<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Opting Out of Math Functions With VOID</title>
    <link>https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244</link>
    <description>It seems to me that it could be useful if math operations accepted VOID.

    &gt;&gt; factor: null

    &gt;&gt; coefficient: 10

    &gt;&gt; value: multiply factor coefficient
    ** Error: multiply doesn&#39;t allow ~null~ antiform for its value1 argument

    &gt;&gt; multiply maybe factor coefficient
    == 10

    &gt;&gt; add coefficient maybe factor
    == 10

If you opt out of the left hand side of a subtraction, you&#39;d get negation:

    &gt;&gt; subtract maybe factor coefficient
    == -10

If you opt out of the left side of a division, er... hm.  That should probably be an error.

    &gt;&gt; divide maybe factor coefficient
    ** Error: divide doesn&#39;t allow ~void~ antiform for its value1 argument

If you opt out of both arguments you get null.

    &gt;&gt; add maybe factor maybe factor
    == ~null~  ; anti

I suppose divide can allow you to opt out of both arguments, though it makes the interface suggest the dividend can be opted out of in isolation since it would have void in the accepted types solely to handle the both-opt-out case.

## Seems Useful and Supports My Cautious Attitude on VOID

I now believe [CASE and SWITCH etc. that do not take any branches should return NULL](https://rebol.metaeducation.com/t/maybe-if-conditionals-went-back-to-returning-null-on-failure/2047).  So you&#39;re less likely to be bitten by stray voids being tolerated in such situations, and need an explicit MAYBE.

But IF will still return void.

    &gt;&gt; multiply 10 (if 1 &gt; 100 [20])
    == 10</description>
    
    <lastBuildDate>Wed, 04 Sep 2024 02:17:48 +0000</lastBuildDate>
    <category>Math</category>
    <atom:link href="https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Opting Out of Math Functions With VOID</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2244">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>I’m not sure I see how this could be useful.</p>
</blockquote>
</aside>
<pre><code>&gt;&gt; factor: null

&gt;&gt; coefficient: 10

&gt;&gt; x: if factor [add coefficient factor]
== ~void~  ; anti

&gt;&gt; x: add coefficient either factor [factor] [0]
== 10

&gt;&gt; x: add coefficient maybe factor
== 10
</code></pre>
<ul>
<li>
<p>Expression produces the calculation product.</p>
<ul>
<li>You don't get that if you put the conditional on the outside--in the case the branch isn't taken.</li>
</ul>
</li>
<li>
<p>Keeps you from having to repeat your variable name twice.</p>
</li>
</ul>
<p>With <a href="https://rebol.metaeducation.com/t/shorthand-for-maybe-what-about/2247">proposed shorthand</a> (people don't have to use it if they don't want to...)</p>
<pre><code>&gt;&gt; x: add coefficient ? factor
== 10
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244/3</link>
        <pubDate>Wed, 04 Sep 2024 02:06:28 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2244-3</guid>
        <source url="https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244.rss">Opting Out of Math Functions With VOID</source>
      </item>
      <item>
        <title>Opting Out of Math Functions With VOID</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>I’m not sure I see how this could be useful. But I’m not hugely opposed to it either.</p>
          <p><a href="https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244/2</link>
        <pubDate>Wed, 04 Sep 2024 00:13:55 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2244-2</guid>
        <source url="https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244.rss">Opting Out of Math Functions With VOID</source>
      </item>
      <item>
        <title>Opting Out of Math Functions With VOID</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It seems to me that it could be useful if math operations accepted VOID.</p>
<pre><code>&gt;&gt; factor: null

&gt;&gt; coefficient: 10

&gt;&gt; value: multiply factor coefficient
** Error: multiply doesn't allow ~null~ antiform for its value1 argument

&gt;&gt; multiply maybe factor coefficient
== 10

&gt;&gt; add coefficient maybe factor
== 10
</code></pre>
<p>If you opt out of the left hand side of a subtraction, you'd get negation:</p>
<pre><code>&gt;&gt; subtract maybe factor coefficient
== -10
</code></pre>
<p>If you opt out of the left side of a division, er... hm.  That should probably be an error.</p>
<pre><code>&gt;&gt; divide maybe factor coefficient
** Error: divide doesn't allow ~void~ antiform for its value1 argument
</code></pre>
<p>If you opt out of both arguments you get null.</p>
<pre><code>&gt;&gt; add maybe factor maybe factor
== ~null~  ; anti
</code></pre>
<p>I suppose divide can allow you to opt out of both arguments, though it makes the interface suggest the dividend can be opted out of in isolation since it would have void in the accepted types solely to handle the both-opt-out case.</p>
<h2><a name="p-7538-seems-useful-and-supports-my-cautious-attitude-on-void-1" class="anchor" href="https://rebol.metaeducation.com#p-7538-seems-useful-and-supports-my-cautious-attitude-on-void-1"></a>Seems Useful and Supports My Cautious Attitude on VOID</h2>
<p>I now believe <a href="https://rebol.metaeducation.com/t/maybe-if-conditionals-went-back-to-returning-null-on-failure/2047">CASE and SWITCH etc. that do not take any branches should return NULL</a>.  So you're less likely to be bitten by stray voids being tolerated in such situations, and need an explicit MAYBE.</p>
<p>But IF will still return void.</p>
<pre><code>&gt;&gt; multiply 10 (if 1 &gt; 100 [20])
== 10
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244/1</link>
        <pubDate>Tue, 03 Sep 2024 18:02:49 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2244-1</guid>
        <source url="https://rebol.metaeducation.com/t/opting-out-of-math-functions-with-void/2244.rss">Opting Out of Math Functions With VOID</source>
      </item>
  </channel>
</rss>
