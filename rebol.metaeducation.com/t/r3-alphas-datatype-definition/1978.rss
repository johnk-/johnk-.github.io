<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>R3-Alpha&#39;s DATATYPE! Definition</title>
    <link>https://rebol.metaeducation.com/t/r3-alphas-datatype-definition/1978</link>
    <description>You likely know that DATATYPE! in R3-Alpha (Rebol 2, Red...) has a distinct &quot;type byte&quot; in the cell.  So the implementation can tell it&#39;s a different thing, even if not all representations show that:

    r3-alpha&gt;&gt; block: reduce [&#39;integer! integer!]
    == [integer! integer!]

    r3-alpha&gt;&gt; type? first block
    == word!

    r3-alpha&gt;&gt; type? second block
    == datatype!

One way R3-Alpha has to see the difference is with MOLD/ALL

    r3-alpha&gt;&gt; mold/all block
    == &quot;[integer! #[datatype! integer!]]&quot;

## But What&#39;s Actually *in* a DATATYPE! Cell?

This was [the definition struct from R3-Alpha](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/include/sys-value.h#L106):

    typedef struct Reb_Type {
        REBINT type;  // base type
        REBSER *spec;
        // REBINT min_type;
        // REBINT max_type;
    } REBTYP;

So an integer to say what **`type`** it is (e.g. REB_INTEGER = 1, REB_LOGIC = 2, REB_BLOCK = 3 or whatever).  Note that this in the *payload* of the cell, not the header...because the type in the header is REB_DATATYPE to say it carries a &quot;datatype payload&quot;.

Who knows what the commented-out **`min_type`** and **`max_type`** were.  But a remark says this payload is for a &quot;Datatype or pseudo-datatype&quot;.  We can guess these were for pseudo-datatypes as a way of specifying a range of REB_XXX numbers to implement categories like ANY-SERIES!, as an alternative to typesets (?)

The **`spec`** is actually an object, that comes back as the answer to SPEC-OF:

    r3-alpha&gt;&gt; spec-of integer!
    == make object! [
        title: &quot;64 bit integer&quot;
        type: &#39;scalar
    ]

This limited amount of information was built into the executable from the [Rebol-format table table in %typespec.r](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/boot/typespec.r#L24). 

You needed to use SPEC-OF to access these properties, but it could have been accessible with paths, e.g. **integer!/title**.  And it might have had more interesting properties:

    &gt;&gt; integer!/max-value
    == 9223372036854775807

## All Redbols Conflated The Looks of DATATYPE! and WORD!

In lockstep, they all did it:

    rebol2&gt;&gt; integer!
    == integer!

    r3-alpha&gt;&gt; integer!
    == integer!
    
    red&gt;&gt; integer!
    == integer!

Since I have [Boron](https://rebol.metaeducation.com/t/boron-language/1976) built, I find it renames integer! to int!, but otherwise the same:

    )&gt; int!
    == int!

    )&gt; type? int!
    == datatype!

    )&gt; type? first [int!]
    == word!

**It seemed to me that this conflation couldn&#39;t possibly be the best answer.**  So I made Ren-C buck this trend to use the R3-Alpha construction syntax, because it was something that could LOAD back:

    &gt;&gt; integer!
    == #[datatype! integer!]

    &gt;&gt; load &quot;#[datatype! integer!]&quot;
    == [#[datatype! integer!]]

**Rendering differently was good, but the specific different rendering wasn&#39;t all that palatable.**  And it wasn&#39;t showing it as any complex object.

## Where To Go From There?

There seemed to be two directions to go with this:

* Accept DATATYPE! as some kind of alien complex type which has ugly rendering

* Fit it into the lexical space somewhere.

Ren-C has moved toward the idea of making datatypes a BLOCK! variant, decorated with &amp;:

    &gt;&gt; type of integer!
    == &amp;[integer]

The details of what structure is used on these type blocks is still under consideration at time of writing.  See the threads in the forum&#39;s [Datatypes Category](https://rebol.metaeducation.com/c/development/datatypes/45)</description>
    
    <lastBuildDate>Wed, 21 Feb 2024 00:10:47 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://rebol.metaeducation.com/t/r3-alphas-datatype-definition/1978.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>R3-Alpha&#39;s DATATYPE! Definition</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>You likely know that DATATYPE! in R3-Alpha (Rebol 2, Red...) has a distinct "type byte" in the cell.  So the implementation can tell it's a different thing, even if not all representations show that:</p>
<pre><code>r3-alpha&gt;&gt; block: reduce ['integer! integer!]
== [integer! integer!]

r3-alpha&gt;&gt; type? first block
== word!

r3-alpha&gt;&gt; type? second block
== datatype!
</code></pre>
<p>One way R3-Alpha has to see the difference is with MOLD/ALL</p>
<pre><code>r3-alpha&gt;&gt; mold/all block
== "[integer! #[datatype! integer!]]"
</code></pre>
<h2><a name="p-6439-but-whats-actually-in-a-datatype-cell-1" class="anchor" href="https://rebol.metaeducation.com#p-6439-but-whats-actually-in-a-datatype-cell-1"></a>But What's Actually <em>in</em> a DATATYPE! Cell?</h2>
<p>This was <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/include/sys-value.h#L106">the definition struct from R3-Alpha</a>:</p>
<pre><code>typedef struct Reb_Type {
    REBINT type;  // base type
    REBSER *spec;
    // REBINT min_type;
    // REBINT max_type;
} REBTYP;
</code></pre>
<p>So an integer to say what <strong><code>type</code></strong> it is (e.g. REB_INTEGER = 1, REB_LOGIC = 2, REB_BLOCK = 3 or whatever).  Note that this in the <em>payload</em> of the cell, not the header...because the type in the header is REB_DATATYPE to say it carries a "datatype payload".</p>
<p>Who knows what the commented-out <strong><code>min_type</code></strong> and <strong><code>max_type</code></strong> were.  But a remark says this payload is for a "Datatype or pseudo-datatype".  We can guess these were for pseudo-datatypes as a way of specifying a range of REB_XXX numbers to implement categories like ANY-SERIES!, as an alternative to typesets (?)</p>
<p>The <strong><code>spec</code></strong> is actually an object, that comes back as the answer to SPEC-OF:</p>
<pre><code>r3-alpha&gt;&gt; spec-of integer!
== make object! [
    title: "64 bit integer"
    type: 'scalar
]
</code></pre>
<p>This limited amount of information was built into the executable from the <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/boot/typespec.r#L24">Rebol-format table table in %typespec.r</a>.</p>
<p>You needed to use SPEC-OF to access these properties, but it could have been accessible with paths, e.g. <strong>integer!/title</strong>.  And it might have had more interesting properties:</p>
<pre><code>&gt;&gt; integer!/max-value
== 9223372036854775807
</code></pre>
<h2><a name="p-6439-all-redbols-conflated-the-looks-of-datatype-and-word-2" class="anchor" href="https://rebol.metaeducation.com#p-6439-all-redbols-conflated-the-looks-of-datatype-and-word-2"></a>All Redbols Conflated The Looks of DATATYPE! and WORD!</h2>
<p>In lockstep, they all did it:</p>
<pre><code>rebol2&gt;&gt; integer!
== integer!

r3-alpha&gt;&gt; integer!
== integer!

red&gt;&gt; integer!
== integer!
</code></pre>
<p>Since I have <a href="https://rebol.metaeducation.com/t/boron-language/1976">Boron</a> built, I find it renames integer! to int!, but otherwise the same:</p>
<pre><code>)&gt; int!
== int!

)&gt; type? int!
== datatype!

)&gt; type? first [int!]
== word!
</code></pre>
<p><strong>It seemed to me that this conflation couldn't possibly be the best answer.</strong>  So I made Ren-C buck this trend to use the R3-Alpha construction syntax, because it was something that could LOAD back:</p>
<pre><code>&gt;&gt; integer!
== #[datatype! integer!]

&gt;&gt; load "#[datatype! integer!]"
== [#[datatype! integer!]]
</code></pre>
<p><strong>Rendering differently was good, but the specific different rendering wasn't all that palatable.</strong>  And it wasn't showing it as any complex object.</p>
<h2><a name="p-6439-where-to-go-from-there-3" class="anchor" href="https://rebol.metaeducation.com#p-6439-where-to-go-from-there-3"></a>Where To Go From There?</h2>
<p>There seemed to be two directions to go with this:</p>
<ul>
<li>
<p>Accept DATATYPE! as some kind of alien complex type which has ugly rendering</p>
</li>
<li>
<p>Fit it into the lexical space somewhere.</p>
</li>
</ul>
<p>Ren-C has moved toward the idea of making datatypes a BLOCK! variant, decorated with &amp;:</p>
<pre><code>&gt;&gt; type of integer!
== &amp;[integer]
</code></pre>
<p>The details of what structure is used on these type blocks is still under consideration at time of writing.  See the threads in the forum's <a href="https://rebol.metaeducation.com/c/development/datatypes/45">Datatypes Category</a></p>
          <p><a href="https://rebol.metaeducation.com/t/r3-alphas-datatype-definition/1978/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/r3-alphas-datatype-definition/1978/1</link>
        <pubDate>Sat, 24 Sep 2022 08:02:56 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1978-1</guid>
        <source url="https://rebol.metaeducation.com/t/r3-alphas-datatype-definition/1978.rss">R3-Alpha&#39;s DATATYPE! Definition</source>
      </item>
  </channel>
</rss>
