<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should AND + OR Handle VOID?</title>
    <link>https://rebol.metaeducation.com/t/should-and-or-handle-void/2274</link>
    <description>Ren-C has infix AND and OR, which are conditional--not bitwise.  Since #[true] and #[false] no longer exist, they now act on things being &quot;branch triggers&quot; or not...which is basically &quot;non-null things vs. null&quot;.

So we have for instance:

            null and null   -&gt;   ~null~ antiform     
        null and (truthy)   -&gt;   ~null~ antiform
        (truthy) and null   -&gt;   ~null~ antiform
    (truthy) and (truthy)   -&gt;   ~okay~ antiform

Today&#39;s rule is that to get TRUTHY to be truthy you need some non-null, non-void/trash thing.  VOID and TRASH cause errors.

## Including VOID Would Be More Flexible.  Worth It?

            void and void   -&gt;   ~[]~ antiform
            void and null   -&gt;   ~null~ antiform
            null and void   -&gt;   ~null~ antiform
        void and (truthy)   -&gt;   ~okay~ antiform
        (truthy) and void   -&gt;   ~okay~ antiform

You&#39;d get an error if you tried **`if (void-thing) and (void-thing) [...]`**, which seems good to me.

It&#39;s strictly more powerful.  Going along with the general idea that &quot;Errors aren&#39;t big enablers of creativity&quot;, I am leaning toward endorsing it.

Particularly because accidental creation of VOID has been pruned further than ever.  It&#39;s not something you can ever pick out of blocks or get from a variable.  And with type checking there&#39;ll be even more confidence that those who are doing this are doing it intentionally.

It&#39;s not a priority.  But I can see how it could be useful.</description>
    
    <lastBuildDate>Sat, 17 May 2025 06:54:22 +0000</lastBuildDate>
    <category>Math</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-and-or-handle-void/2274.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should AND + OR Handle VOID?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Ren-C has infix AND and OR, which are conditional--not bitwise.  Since #[true] and #[false] no longer exist, they now act on things being "branch triggers" or not...which is basically "non-null things vs. null".</p>
<p>So we have for instance:</p>
<pre><code>        null and null   -&gt;   ~null~ antiform     
    null and (truthy)   -&gt;   ~null~ antiform
    (truthy) and null   -&gt;   ~null~ antiform
(truthy) and (truthy)   -&gt;   ~okay~ antiform
</code></pre>
<p>Today's rule is that to get TRUTHY to be truthy you need some non-null, non-void/trash thing.  VOID and TRASH cause errors.</p>
<h2><a name="p-7660-including-void-would-be-more-flexible-worth-it-1" class="anchor" href="https://rebol.metaeducation.com#p-7660-including-void-would-be-more-flexible-worth-it-1"></a>Including VOID Would Be More Flexible.  Worth It?</h2>
<pre><code>        void and void   -&gt;   ~[]~ antiform
        void and null   -&gt;   ~null~ antiform
        null and void   -&gt;   ~null~ antiform
    void and (truthy)   -&gt;   ~okay~ antiform
    (truthy) and void   -&gt;   ~okay~ antiform
</code></pre>
<p>You'd get an error if you tried <strong><code>if (void-thing) and (void-thing) [...]</code></strong>, which seems good to me.</p>
<p>It's strictly more powerful.  Going along with the general idea that "Errors aren't big enablers of creativity", I am leaning toward endorsing it.</p>
<p>Particularly because accidental creation of VOID has been pruned further than ever.  It's not something you can ever pick out of blocks or get from a variable.  And with type checking there'll be even more confidence that those who are doing this are doing it intentionally.</p>
<p>It's not a priority.  But I can see how it could be useful.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-and-or-handle-void/2274/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-and-or-handle-void/2274/1</link>
        <pubDate>Fri, 13 Sep 2024 08:49:10 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2274-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-and-or-handle-void/2274.rss">Should AND + OR Handle VOID?</source>
      </item>
  </channel>
</rss>
