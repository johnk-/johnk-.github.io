<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Non-Words in Function Parameter Spec Dialect</title>
    <link>https://rebol.metaeducation.com/t/non-words-in-function-parameter-spec-dialect/2064</link>
    <description>Historical Redbol only had WORD!s in the BLOCK! that came after a parameter:

    foo: func [
        arg [block! word! number!]  ;  all words in block
    ] ...

But when Ren-C introduced the paradigm-breaking NULL that could not be put in arrays, that meant there was no `null!` datatype.  To fill the gap, the tag `&lt;opt&gt;` was chosen to indicate the parameter as optional--hence possibly null:

    foo: func [
        arg [&lt;opt&gt; block! word! number!]  ;  now it&#39;s WORD!s and TAG!s
    ] ...

I liked using a TAG! for how it stood out (though in retrospect I&#39;d have probably chosen `&lt;null&gt;`, but everything was named differently then).  Other quirky ideas were floated, like being able to put a leading slash on the typeset block:

    foo: func [
        arg /[block! word! number!]  ; like a refinement, but on the types
    ] ...

That didn&#39;t gain traction, and probably shouldn&#39;t have.

Then when early efforts faced another value state that couldn&#39;t be put in a block and didn&#39;t have a type, **`&lt;void&gt;`** came onto the scene...because as with there being no NULL!, there was no VOID! datatype.

## Tag Modifiers Which Weren&#39;t Type Checkers Showed Up

The ability to take a parameter but get an immutable view of it was added as **`&lt;const&gt;`**.

Parameters that would accept being at the end of input and evaluate to null in that case were **`&lt;end&gt;`**

**`&lt;variadic&gt;`** and **`&lt;skippable&gt;`** came into existence.

These &quot;parameter-control tags&quot; seemed to me to be a distinct category from typecheckers like **`&lt;opt&gt;`** and **`&lt;void&gt;`**.   Having them all use TAG! felt like *too many tags.*

So I mused about splitting the roles, something like:

    [&lt;const&gt; #null type!]
    -or-
    [#const &lt;null&gt; type!]

But I didn&#39;t like the look of it enough to move on it.  So things like **`[&lt;const&gt; &lt;opt&gt; type!]`** stuck around while I wondered about it.

## Today, You Can Specify Any Type Check By Function

There&#39;s still no NULL! or VOID!.  But with the way things work now, you can use functions as &quot;type predicates&quot; to recognize things that aren&#39;t datatypes in their own right:

    foo: func [
        arg [null? block! word! number!]
    ] ...

What&#39;s good:

* It leaves TAG! for the properties like **`&lt;const&gt;`** that don&#39;t have to do with type recognition... but rather controlling the parameter in a more special way.

What&#39;s bad:

* It loses that kind of special look that tags gave to arguments that could take null.  It blurs together, especially with things like SPLICE? and LOGIC? and CHAR? for other non-fundamental datatypes (characters are just single-character issues now, and ~true~ and ~false~ isotopes of WORD! implement logic)

## A Modern Option: ~NULL~ for Taking Null

I made an experiment so if you used a QUASI-WORD!, then it would match an isotope of that form.

It&#39;s a kind of pleasingly distinct look:

    foo: func [
        arg [~null~ block! word! number!]
    ] ...

And it mixes better with the tags:

    foo: func [
        arg [~null~ &lt;const&gt; block! word! number!]
    ] ...

It also works for &quot;trash&quot; (antiform blank) and looks really good there, e.g. for RETURN:

    foo: func [
        return: [~]  ; as opposed to `return: [trash?]`
     ] ...

## Allowing NULL? and ~NULL~ As Choices Seems Good

I like the option of **~null~** instead of **null?** to call out the more rare-and-alarming idea of accepting null parameters.

## What about `return: &lt;ghost&gt;` and `return: &lt;trash&gt;`

These two special uses of tag! with no block have been used to say you don&#39;t need a RETURN statement at all... the function just gives back trash or ghost respectively when the body completes.

How necessary is it?  Well, you either write things like:

    comment: func [
        return: [ghost!]
        discarded [any-value!]
    ][
        return ghost
    ]

Or you have the contraction:

    comment: func [
        return: &lt;ghost&gt;
        discarded [any-value!]
    ][
    ]

This style of &quot;don&#39;t even worry about writing a RETURN&quot; has the widest applicability to TRASH and GHOST.  We don&#39;t strictly need it, but I&#39;ve gotten used to it.

I mention **return: [~]** as a possible alternative for saying trash is a return type using the quasiform-means-antiform idea.  And since trash falls out of function bodies by default with no return, it&#39;s not strictly necessary to have **`return: &lt;trash&gt;`** as any kind of special operation.

Again, how does that look?

    foo: func [
        return: [~]
     ] ...

A little more symbol-y, but doesn&#39;t break the rhythm of type specs being blocks.

This leaves the ghost case.  We could say **return: [~,~]** and have that mean &quot;I return an antiform comma&quot; but in that case you&#39;d still need an explicit return:

    comment: func [
        return: [~,~]
        discarded [any-value!]
    ][
        return ghost
    ]

But I like **`return: [ghost!]`** a lot more than that.  Compared to **`return: [~]`** the **`[~,~]`** feels a bit like a bridge too far.

Anyway, the reason this is a struggle is that **`return: &lt;trash&gt;`** has just become so pervasive that it&#39;s hard to see that changed to **`return: [trash!]`**.  But standardizing on blocks and moving away from the tags for this application may be the best idea.</description>
    
    <lastBuildDate>Wed, 07 May 2025 09:41:59 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://rebol.metaeducation.com/t/non-words-in-function-parameter-spec-dialect/2064.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Non-Words in Function Parameter Spec Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historical Redbol only had WORD!s in the BLOCK! that came after a parameter:</p>
<pre><code>foo: func [
    arg [block! word! number!]  ;  all words in block
] ...
</code></pre>
<p>But when Ren-C introduced the paradigm-breaking NULL that could not be put in arrays, that meant there was no <code>null!</code> datatype.  To fill the gap, the tag <code>&lt;opt&gt;</code> was chosen to indicate the parameter as optional--hence possibly null:</p>
<pre><code>foo: func [
    arg [&lt;opt&gt; block! word! number!]  ;  now it's WORD!s and TAG!s
] ...
</code></pre>
<p>I liked using a TAG! for how it stood out (though in retrospect I'd have probably chosen <code>&lt;null&gt;</code>, but everything was named differently then).  Other quirky ideas were floated, like being able to put a leading slash on the typeset block:</p>
<pre><code>foo: func [
    arg /[block! word! number!]  ; like a refinement, but on the types
] ...
</code></pre>
<p>That didn't gain traction, and probably shouldn't have.</p>
<p>Then when early efforts faced another value state that couldn't be put in a block and didn't have a type, <strong><code>&lt;void&gt;</code></strong> came onto the scene...because as with there being no NULL!, there was no VOID! datatype.</p>
<h2><a name="p-6733-tag-modifiers-which-werent-type-checkers-showed-up-1" class="anchor" href="https://rebol.metaeducation.com#p-6733-tag-modifiers-which-werent-type-checkers-showed-up-1"></a>Tag Modifiers Which Weren't Type Checkers Showed Up</h2>
<p>The ability to take a parameter but get an immutable view of it was added as <strong><code>&lt;const&gt;</code></strong>.</p>
<p>Parameters that would accept being at the end of input and evaluate to null in that case were <strong><code>&lt;end&gt;</code></strong></p>
<p><strong><code>&lt;variadic&gt;</code></strong> and <strong><code>&lt;skippable&gt;</code></strong> came into existence.</p>
<p>These "parameter-control tags" seemed to me to be a distinct category from typecheckers like <strong><code>&lt;opt&gt;</code></strong> and <strong><code>&lt;void&gt;</code></strong>.   Having them all use TAG! felt like <em>too many tags.</em></p>
<p>So I mused about splitting the roles, something like:</p>
<pre><code>[&lt;const&gt; #null type!]
-or-
[#const &lt;null&gt; type!]
</code></pre>
<p>But I didn't like the look of it enough to move on it.  So things like <strong><code>[&lt;const&gt; &lt;opt&gt; type!]</code></strong> stuck around while I wondered about it.</p>
<h2><a name="p-6733-today-you-can-specify-any-type-check-by-function-2" class="anchor" href="https://rebol.metaeducation.com#p-6733-today-you-can-specify-any-type-check-by-function-2"></a>Today, You Can Specify Any Type Check By Function</h2>
<p>There's still no NULL! or VOID!.  But with the way things work now, you can use functions as "type predicates" to recognize things that aren't datatypes in their own right:</p>
<pre><code>foo: func [
    arg [null? block! word! number!]
] ...
</code></pre>
<p>What's good:</p>
<ul>
<li>It leaves TAG! for the properties like <strong><code>&lt;const&gt;</code></strong> that don't have to do with type recognition... but rather controlling the parameter in a more special way.</li>
</ul>
<p>What's bad:</p>
<ul>
<li>It loses that kind of special look that tags gave to arguments that could take null.  It blurs together, especially with things like SPLICE? and LOGIC? and CHAR? for other non-fundamental datatypes (characters are just single-character issues now, and ~true~ and ~false~ isotopes of WORD! implement logic)</li>
</ul>
<h2><a name="p-6733-a-modern-option-null-for-taking-null-3" class="anchor" href="https://rebol.metaeducation.com#p-6733-a-modern-option-null-for-taking-null-3"></a>A Modern Option: ~NULL~ for Taking Null</h2>
<p>I made an experiment so if you used a QUASI-WORD!, then it would match an isotope of that form.</p>
<p>It's a kind of pleasingly distinct look:</p>
<pre><code>foo: func [
    arg [~null~ block! word! number!]
] ...
</code></pre>
<p>And it mixes better with the tags:</p>
<pre><code>foo: func [
    arg [~null~ &lt;const&gt; block! word! number!]
] ...
</code></pre>
<p>It also works for "trash" (antiform blank) and looks really good there, e.g. for RETURN:</p>
<pre><code>foo: func [
    return: [~]  ; as opposed to `return: [trash?]`
 ] ...
</code></pre>
<h2><a name="p-6733-allowing-null-and-null-as-choices-seems-good-4" class="anchor" href="https://rebol.metaeducation.com#p-6733-allowing-null-and-null-as-choices-seems-good-4"></a>Allowing NULL? and ~NULL~ As Choices Seems Good</h2>
<p>I like the option of <strong>~null~</strong> instead of <strong>null?</strong> to call out the more rare-and-alarming idea of accepting null parameters.</p>
<h2><a name="p-6733-what-about-return-ghost-and-return-trash-5" class="anchor" href="https://rebol.metaeducation.com#p-6733-what-about-return-ghost-and-return-trash-5"></a>What about <code>return: &lt;ghost&gt;</code> and <code>return: &lt;trash&gt;</code></h2>
<p>These two special uses of tag! with no block have been used to say you don't need a RETURN statement at all... the function just gives back trash or ghost respectively when the body completes.</p>
<p>How necessary is it?  Well, you either write things like:</p>
<pre><code>comment: func [
    return: [ghost!]
    discarded [any-value!]
][
    return ghost
]
</code></pre>
<p>Or you have the contraction:</p>
<pre><code>comment: func [
    return: &lt;ghost&gt;
    discarded [any-value!]
][
]
</code></pre>
<p>This style of "don't even worry about writing a RETURN" has the widest applicability to TRASH and GHOST.  We don't strictly need it, but I've gotten used to it.</p>
<p>I mention <strong>return: [~]</strong> as a possible alternative for saying trash is a return type using the quasiform-means-antiform idea.  And since trash falls out of function bodies by default with no return, it's not strictly necessary to have <strong><code>return: &lt;trash&gt;</code></strong> as any kind of special operation.</p>
<p>Again, how does that look?</p>
<pre><code>foo: func [
    return: [~]
 ] ...
</code></pre>
<p>A little more symbol-y, but doesn't break the rhythm of type specs being blocks.</p>
<p>This leaves the ghost case.  We could say <strong>return: [~,~]</strong> and have that mean "I return an antiform comma" but in that case you'd still need an explicit return:</p>
<pre><code>comment: func [
    return: [~,~]
    discarded [any-value!]
][
    return ghost
]
</code></pre>
<p>But I like <strong><code>return: [ghost!]</code></strong> a lot more than that.  Compared to <strong><code>return: [~]</code></strong> the <strong><code>[~,~]</code></strong> feels a bit like a bridge too far.</p>
<p>Anyway, the reason this is a struggle is that <strong><code>return: &lt;trash&gt;</code></strong> has just become so pervasive that it's hard to see that changed to <strong><code>return: [trash!]</code></strong>.  But standardizing on blocks and moving away from the tags for this application may be the best idea.</p>
          <p><a href="https://rebol.metaeducation.com/t/non-words-in-function-parameter-spec-dialect/2064/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/non-words-in-function-parameter-spec-dialect/2064/1</link>
        <pubDate>Sat, 25 Nov 2023 08:25:56 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2064-1</guid>
        <source url="https://rebol.metaeducation.com/t/non-words-in-function-parameter-spec-dialect/2064.rss">Non-Words in Function Parameter Spec Dialect</source>
      </item>
  </channel>
</rss>
