<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>NONE complement to ANY and ALL</title>
    <link>https://rebol.metaeducation.com/t/none-complement-to-any-and-all/2425</link>
    <description>Having pushed names around a lot... and pushed things back into an equilibrium with where they were before... I&#39;m more confident in where things stand than I&#39;ve ever been.  Everything feels justified *(with the one little question about [`~` quasars](https://rebol.metaeducation.com/t/what-to-call-lone-tilde/2216))*

**So I am certain the term NONE will *not* be used for any antiform or non-antiform state.**

I always thought NONE was the wrong part of speech for a state, and fit better as a synonym for **`not any`**.

    if none [a, b, c] [
       print &quot;None of the things were true&quot;
    ]

It&#39;s something I&#39;d kind of forgotten about, but the bootstrap executable still had it--and was using it.

One issue that was always a question with NONE was its return values.  It needed to return &quot;NULL&quot; in the case of failure to be consistent with the other members of its family (and interoperate with ELSE and THEN, etc.).  But what would its state be in the case of success?  If it were `#[true]` that would be a strange counterpart to null...

But since we now have ~okay~ and ~null~ antiforms, that question is sorted out.

## Usefulness vs. NOT ANY Less Critical With NOT/ANY

One of the reasons that NONE was seen as more useful than you would think was its operation with THEN and ELSE:

    none [a, b, c] then [print &quot;None of the things were true, using THEN&quot;]

Remember that THEN and ELSE are *deferred infix*... they run *one* function on their left.  Not two.  So if you were to use it with NOT ANY you&#39;d need a group:

    (not any [a, b, c]) then [print &quot;Without the GROUP! THEN reacts to ANY [...]&quot;]

But the current cool idea is that you can cascade functions with PATH!s.

    not/any [a, b, c] then [print &quot;NOT/ANY acts as one function for infix purposes&quot;]

NONE still looks nicer, but this is a very cool development.

## So Main Question: Are There Better Uses For NONE?

The most natural language counterpart to NONE is SOME.  I don&#39;t know how it would fit in as a parse feature, though?

    &gt;&gt; parse &quot;aaa&quot; [some &quot;a&quot;]
    == &quot;a&quot;

    &gt;&gt; parse &quot;aaa&quot; [none &quot;b&quot;]
    ???

One place I found a usage for it was in a refinement where the absence (null state) meant &quot;use the default&quot;... e.g. setting compression preferences:

     save: function [... :compress [&#39;none &#39;raw &#39;base64]] [...]

None works as a member of an enumeration when you&#39;re looking for the empty case.  I don&#39;t think this is contentious with having it be a function meaning &quot;none of&quot;.</description>
    
    <lastBuildDate>Sun, 27 Apr 2025 16:05:12 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://rebol.metaeducation.com/t/none-complement-to-any-and-all/2425.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>NONE complement to ANY and ALL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Having pushed names around a lot... and pushed things back into an equilibrium with where they were before... I'm more confident in where things stand than I've ever been.  Everything feels justified <em>(with the one little question about <a href="https://rebol.metaeducation.com/t/what-to-call-lone-tilde/2216"><code>~</code> quasars</a>)</em></p>
<p><strong>So I am certain the term NONE will <em>not</em> be used for any antiform or non-antiform state.</strong></p>
<p>I always thought NONE was the wrong part of speech for a state, and fit better as a synonym for <strong><code>not any</code></strong>.</p>
<pre><code>if none [a, b, c] [
   print "None of the things were true"
]
</code></pre>
<p>It's something I'd kind of forgotten about, but the bootstrap executable still had it--and was using it.</p>
<p>One issue that was always a question with NONE was its return values.  It needed to return "NULL" in the case of failure to be consistent with the other members of its family (and interoperate with ELSE and THEN, etc.).  But what would its state be in the case of success?  If it were <code>#[true]</code> that would be a strange counterpart to null...</p>
<p>But since we now have ~okay~ and ~null~ antiforms, that question is sorted out.</p>
<h2><a name="p-8171-usefulness-vs-not-any-less-critical-with-notany-1" class="anchor" href="https://rebol.metaeducation.com#p-8171-usefulness-vs-not-any-less-critical-with-notany-1"></a>Usefulness vs. NOT ANY Less Critical With NOT/ANY</h2>
<p>One of the reasons that NONE was seen as more useful than you would think was its operation with THEN and ELSE:</p>
<pre><code>none [a, b, c] then [print "None of the things were true, using THEN"]
</code></pre>
<p>Remember that THEN and ELSE are <em>deferred infix</em>... they run <em>one</em> function on their left.  Not two.  So if you were to use it with NOT ANY you'd need a group:</p>
<pre><code>(not any [a, b, c]) then [print "Without the GROUP! THEN reacts to ANY [...]"]
</code></pre>
<p>But the current cool idea is that you can cascade functions with PATH!s.</p>
<pre><code>not/any [a, b, c] then [print "NOT/ANY acts as one function for infix purposes"]
</code></pre>
<p>NONE still looks nicer, but this is a very cool development.</p>
<h2><a name="p-8171-so-main-question-are-there-better-uses-for-none-2" class="anchor" href="https://rebol.metaeducation.com#p-8171-so-main-question-are-there-better-uses-for-none-2"></a>So Main Question: Are There Better Uses For NONE?</h2>
<p>The most natural language counterpart to NONE is SOME.  I don't know how it would fit in as a parse feature, though?</p>
<pre><code>&gt;&gt; parse "aaa" [some "a"]
== "a"

&gt;&gt; parse "aaa" [none "b"]
???
</code></pre>
<p>One place I found a usage for it was in a refinement where the absence (null state) meant "use the default"... e.g. setting compression preferences:</p>
<pre><code> save: function [... :compress ['none 'raw 'base64]] [...]
</code></pre>
<p>None works as a member of an enumeration when you're looking for the empty case.  I don't think this is contentious with having it be a function meaning "none of".</p>
          <p><a href="https://rebol.metaeducation.com/t/none-complement-to-any-and-all/2425/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/none-complement-to-any-and-all/2425/1</link>
        <pubDate>Sat, 26 Apr 2025 07:31:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2425-1</guid>
        <source url="https://rebol.metaeducation.com/t/none-complement-to-any-and-all/2425.rss">NONE complement to ANY and ALL</source>
      </item>
  </channel>
</rss>
