<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Is GROUP! in PATH! for function invocations worth it?</title>
    <link>https://rebol.metaeducation.com/t/is-group-in-path-for-function-invocations-worth-it/1813</link>
    <description>Back in the day, I thought it would be neat to allow you to put GROUP!s in paths.  So you could do things like this:

    append/(if condition [&#39;only]) [a b c] [d e]

It turned out to be of fairly limited use.  Really you could only use it with refinements that didn&#39;t take parameters, because it changes the &quot;shape&quot; of the execution stream.  Consider how you would make the following sensible:

    append/(if condition [&#39;dup]) [a b c] [d e] ???

When the condition is true you want something in the ??? spot.  When it&#39;s false you don&#39;t.  How can your code cover both cases?

## **[Now we have a modern APPLY](https://rebol.metaeducation.com/t/apply-ii-the-revenge/1406/3?u=hostilefork)**

It bends some of the raw frame rules, and lets you use LOGIC! for parameterless refinements:

    apply :append [[a b c] [d e] /only condition]

It&#39;s a bit longer.  And we haven&#39;t really firmed up questions like whether you need the GET-WORD! or if it&#39;s soft quoted by default.  Or if there might be some clever shorthand:

    ($ append [a b c] [d e] /only condition)

## I&#39;m In A Mood To Kill Off Lesser-Loved Features :hocho: 

All things being equal, it might seem nice to support.  But every feature has a cost!

**You&#39;d still be able to put GROUP!s in paths for your own purposes, but refinement dispatch in functions wouldn&#39;t use it.**

You could also use DO of COMPOSE&#39;d code if you really wanted to:

    do compose/deep [
        append/(if condition [&#39;only]) [a b c] [d e]
    ]

So if anyone has a good argument for keeping the function dispatch behavior, speak up now!</description>
    
    <lastBuildDate>Fri, 13 May 2022 07:49:19 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://rebol.metaeducation.com/t/is-group-in-path-for-function-invocations-worth-it/1813.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Is GROUP! in PATH! for function invocations worth it?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I wrote a short hack of a compatibility-APPLY for bootstrap, and changed all the GROUP!-in-PATH! cases for refinements to use APPLY.</p>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/c37440ddf9ae034a14cfbb5ef22cb046145f8f2b">It's just better, in most of these cases.</a></strong></p>
<h2><a name="p-5830-butan-argument-for-keeping-it-1" class="anchor" href="https://rebol.metaeducation.com#p-5830-butan-argument-for-keeping-it-1"></a>But...An Argument For Keeping It</h2>
<p>When you think about dialects like UPARSE, they don't have an APPLY operator out of the box.</p>
<p>Being able to leverage the evaluative tool could be helpful, to someone who is running a GET on the PATH! and wanting a function back with the proper specialization.  :-/</p>
<p><strong>I'll let it stick around for now, for that reason.  But let's try to avoid using it, and give APPLY some exercise.</strong></p>
          <p><a href="https://rebol.metaeducation.com/t/is-group-in-path-for-function-invocations-worth-it/1813/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/is-group-in-path-for-function-invocations-worth-it/1813/2</link>
        <pubDate>Fri, 13 May 2022 07:07:06 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1813-2</guid>
        <source url="https://rebol.metaeducation.com/t/is-group-in-path-for-function-invocations-worth-it/1813.rss">Is GROUP! in PATH! for function invocations worth it?</source>
      </item>
      <item>
        <title>Is GROUP! in PATH! for function invocations worth it?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Back in the day, I thought it would be neat to allow you to put GROUP!s in paths.  So you could do things like this:</p>
<pre><code>append/(if condition ['only]) [a b c] [d e]
</code></pre>
<p>It turned out to be of fairly limited use.  Really you could only use it with refinements that didn't take parameters, because it changes the "shape" of the execution stream.  Consider how you would make the following sensible:</p>
<pre><code>append/(if condition ['dup]) [a b c] [d e] ???
</code></pre>
<p>When the condition is true you want something in the ??? spot.  When it's false you don't.  How can your code cover both cases?</p>
<h2><a name="p-5829-now-we-have-a-modern-applyhttpsrebolmetaeducationcomtapply-ii-the-revenge14063uhostilefork-1" class="anchor" href="https://rebol.metaeducation.com#p-5829-now-we-have-a-modern-applyhttpsrebolmetaeducationcomtapply-ii-the-revenge14063uhostilefork-1"></a><strong><a href="https://rebol.metaeducation.com/t/apply-ii-the-revenge/1406/3">Now we have a modern APPLY</a></strong></h2>
<p>It bends some of the raw frame rules, and lets you use LOGIC! for parameterless refinements:</p>
<pre><code>apply :append [[a b c] [d e] /only condition]
</code></pre>
<p>It's a bit longer.  And we haven't really firmed up questions like whether you need the GET-WORD! or if it's soft quoted by default.  Or if there might be some clever shorthand:</p>
<pre><code>($ append [a b c] [d e] /only condition)
</code></pre>
<h2><a name="p-5829-im-in-a-mood-to-kill-off-lesser-loved-features-hocho-2" class="anchor" href="https://rebol.metaeducation.com#p-5829-im-in-a-mood-to-kill-off-lesser-loved-features-hocho-2"></a>I'm In A Mood To Kill Off Lesser-Loved Features <img src="https://rebol.metaeducation.com/images/emoji/twitter/hocho.png?v=14" title=":hocho:" class="emoji" alt=":hocho:" loading="lazy" width="20" height="20"></h2>
<p>All things being equal, it might seem nice to support.  But every feature has a cost!</p>
<p><strong>You'd still be able to put GROUP!s in paths for your own purposes, but refinement dispatch in functions wouldn't use it.</strong></p>
<p>You could also use DO of COMPOSE'd code if you really wanted to:</p>
<pre><code>do compose/deep [
    append/(if condition ['only]) [a b c] [d e]
]
</code></pre>
<p>So if anyone has a good argument for keeping the function dispatch behavior, speak up now!</p>
          <p><a href="https://rebol.metaeducation.com/t/is-group-in-path-for-function-invocations-worth-it/1813/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/is-group-in-path-for-function-invocations-worth-it/1813/1</link>
        <pubDate>Fri, 13 May 2022 04:35:59 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1813-1</guid>
        <source url="https://rebol.metaeducation.com/t/is-group-in-path-for-function-invocations-worth-it/1813.rss">Is GROUP! in PATH! for function invocations worth it?</source>
      </item>
  </channel>
</rss>
