<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Trust the User&#39;s Judgment... *When You Can*</title>
    <link>https://rebol.metaeducation.com/t/trust-the-users-judgment-when-you-can/2211</link>
    <description>When writing about [whether we should have SET-WORD! for initializing locals in function specs](https://rebol.metaeducation.com/t/set-word-to-initialize-locals-in-function-specs/2210), I talked about whether to enforce the right hand side of the SET-WORD! being a GROUP! for safety:

[quote=&quot;hostilefork, post:1, topic:2210&quot;]
If plain words are being picked up as locals there&#39;s potential for error if you accidentally wrote an expression that didn&#39;t work, like:

```
func [
   arg [integer!]
   &lt;local&gt;
   local1 local2
   local3: arity-2-but-I-think-it&#39;s-3 a b c
   local4: 10
][
    ...
]
```

That could wind up making a local **`c`** that you didn&#39;t intend. But then again, sometimes it would be just a very obvious simple initialization, like **`local4: 10`**. Forcing people to use parentheses could do more harm than good, vs. trusting them to use the parentheses if they feel it&#39;s warranted.
[/quote]

I realized this kind of dove to the heart of Rebol philosophy:

**If you need to evaluate an expression multiple times, it has to be in an array.  But if you&#39;re doing an evaluation just once, trust the user to formulate the expression and use an array if they deem it necessary.**

Most people encounter this first with the difference between IF and WHILE.

Certainly IF *could* take its condition in a BLOCK!.  But it doesn&#39;t.  You can mess up:

In Rebol2:

    block: [a b]
    data: [c]

    if 3 = length? append block [
       print &quot;Appending data to block gave us 3 elements&quot;
    ]

    stuff: [a b c]

You run the code and you get no output, because you forgot to say **append block data**.  So what did you get instead?

    &gt;&gt; block
    == [a b
        print &quot;Appending data to block gave us 3 elements&quot;
    ]

What you thought was a branch got appended.  And the branch actually wound up being the block from the next expression (SET-WORD!s evaluate to what they are assigned).

*(As it so happens in Ren-C, it catches this...due to [soft-quoted branching](https://rebol.metaeducation.com/t/soft-quoted-branching-light-elegant-fast/1020).  Since it quotes its branch slot, it saw a SET-WORD! in the position, and it doesn&#39;t allow things like WORD! or SET-WORD! there.  If we didn&#39;t already have enough reasons to appreciate soft quoted branching, there&#39;s one more!)*

## Should It Have Required a Block For The Condition?

**The answer for the Rebol Core is: No.**  The goal is to trust the user to make that call.

If you think the expression you&#39;re writing is too risky to get right, you should use a GROUP! or break it into subexpressions or otherwise rethink your code so it&#39;s not risky.  Being able to cook up a DSL in ten minutes that solves patterns you find useful is the tool you use when you find yourself making code that&#39;s at risk of mistakes.

**The answer for You is: Your Choice.**  If you find you&#39;re making lots of mistakes and want to set a policy that IF always takes a BLOCK! condition, suit yourself.  IF is yours, just like everything.  Redefine it.  It&#39;s about [putting the personal back into personal computing.](https://rebol.metaeducation.com/t/back-to-personal-computing/186)

## Well Then Why Use A BLOCK! For WHILE&#39;s Condition?

Because there wasn&#39;t another choice.

You can&#39;t tell how long an expression is going to be just by looking at it.  You have to evaluate it.

The condition in a WHILE needs to be evaluated more than once.  So it&#39;s taken as a BLOCK!.

## This Is One of The &quot;Big Ideas&quot;

Whether you see it as a big idea or just kind of gonzo programming, is up to you.

With the state of software being how it is, I think we need the occasional Flower Sermon.

**[https://en.wikipedia.org/wiki/Flower_Sermon](https://en.wikipedia.org/wiki/Flower_Sermon)**

Ren-C has [thrown in another big tool here, with COMMA!](https://rebol.metaeducation.com/t/the-language-worlds-weirdest-comma-mechanic/1387).  Giving you yet more choice.

Yet EVAL and PARSE still let you write your streams of consciousness, giving the code a written-English like fluidity, of mostly words and spaces...which we are naturally good at working with.</description>
    
    <lastBuildDate>Sun, 25 Aug 2024 03:44:14 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://rebol.metaeducation.com/t/trust-the-users-judgment-when-you-can/2211.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Trust the User&#39;s Judgment... *When You Can*</title>
        <dc:creator><![CDATA[vnzio]]></dc:creator>
        <description><![CDATA[
            <p>It's that edge of FORTH</p>
<p>Prefix<br>
Infix<br>
Postfix</p>
<p>Rebol Red RenC</p>
<p>all have interesting flow<br>
But it can be confusing to read if you expect syntax like Lisp</p>
<p>Someone somewhere one wrote that Rebol started life as LISP without Parentheses<br>
Then borrowed stuff from Wolfram</p>
<p>I'm no expert<br>
But it did help me understand<br>
Something</p>
<p>I've long wished for nice slide lecture strange Loop that would present Rebol Red RenC in context</p>
<p>Rich Hickey<br>
Douglas Crockford<br>
heads up</p>
          <p><a href="https://rebol.metaeducation.com/t/trust-the-users-judgment-when-you-can/2211/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/trust-the-users-judgment-when-you-can/2211/2</link>
        <pubDate>Sun, 25 Aug 2024 03:34:31 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2211-2</guid>
        <source url="https://rebol.metaeducation.com/t/trust-the-users-judgment-when-you-can/2211.rss">Trust the User&#39;s Judgment... *When You Can*</source>
      </item>
      <item>
        <title>Trust the User&#39;s Judgment... *When You Can*</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When writing about <a href="https://rebol.metaeducation.com/t/set-word-to-initialize-locals-in-function-specs/2210">whether we should have SET-WORD! for initializing locals in function specs</a>, I talked about whether to enforce the right hand side of the SET-WORD! being a GROUP! for safety:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2210">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/set-word-to-initialize-locals-in-function-specs/2210/1">SET-WORD! To Initialize Locals In Function Specs?</a></div>
<blockquote>
<p>If plain words are being picked up as locals there's potential for error if you accidentally wrote an expression that didn't work, like:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">func [
   arg [integer!]
   &lt;local&gt;
   local1 local2
   local3: arity-2-but-I-think-it's-3 a b c
   local4: 10
][
    ...
]
</code></pre>
<p>That could wind up making a local <strong><code>c</code></strong> that you didn't intend. But then again, sometimes it would be just a very obvious simple initialization, like <strong><code>local4: 10</code></strong>. Forcing people to use parentheses could do more harm than good, vs. trusting them to use the parentheses if they feel it's warranted.</p>
</blockquote>
</aside>
<p>I realized this kind of dove to the heart of Rebol philosophy:</p>
<p><strong>If you need to evaluate an expression multiple times, it has to be in an array.  But if you're doing an evaluation just once, trust the user to formulate the expression and use an array if they deem it necessary.</strong></p>
<p>Most people encounter this first with the difference between IF and WHILE.</p>
<p>Certainly IF <em>could</em> take its condition in a BLOCK!.  But it doesn't.  You can mess up:</p>
<p>In Rebol2:</p>
<pre><code>block: [a b]
data: [c]

if 3 = length? append block [
   print "Appending data to block gave us 3 elements"
]

stuff: [a b c]
</code></pre>
<p>You run the code and you get no output, because you forgot to say <strong>append block data</strong>.  So what did you get instead?</p>
<pre><code>&gt;&gt; block
== [a b
    print "Appending data to block gave us 3 elements"
]
</code></pre>
<p>What you thought was a branch got appended.  And the branch actually wound up being the block from the next expression (SET-WORD!s evaluate to what they are assigned).</p>
<p><em>(As it so happens in Ren-C, it catches this...due to <a href="https://rebol.metaeducation.com/t/soft-quoted-branching-light-elegant-fast/1020">soft-quoted branching</a>.  Since it quotes its branch slot, it saw a SET-WORD! in the position, and it doesn't allow things like WORD! or SET-WORD! there.  If we didn't already have enough reasons to appreciate soft quoted branching, there's one more!)</em></p>
<h2><a name="p-7368-should-it-have-required-a-block-for-the-condition-1" class="anchor" href="https://rebol.metaeducation.com#p-7368-should-it-have-required-a-block-for-the-condition-1"></a>Should It Have Required a Block For The Condition?</h2>
<p><strong>The answer for the Rebol Core is: No.</strong>  The goal is to trust the user to make that call.</p>
<p>If you think the expression you're writing is too risky to get right, you should use a GROUP! or break it into subexpressions or otherwise rethink your code so it's not risky.  Being able to cook up a DSL in ten minutes that solves patterns you find useful is the tool you use when you find yourself making code that's at risk of mistakes.</p>
<p><strong>The answer for You is: Your Choice.</strong>  If you find you're making lots of mistakes and want to set a policy that IF always takes a BLOCK! condition, suit yourself.  IF is yours, just like everything.  Redefine it.  It's about <a href="https://rebol.metaeducation.com/t/back-to-personal-computing/186">putting the personal back into personal computing.</a></p>
<h2><a name="p-7368-well-then-why-use-a-block-for-whiles-condition-2" class="anchor" href="https://rebol.metaeducation.com#p-7368-well-then-why-use-a-block-for-whiles-condition-2"></a>Well Then Why Use A BLOCK! For WHILE's Condition?</h2>
<p>Because there wasn't another choice.</p>
<p>You can't tell how long an expression is going to be just by looking at it.  You have to evaluate it.</p>
<p>The condition in a WHILE needs to be evaluated more than once.  So it's taken as a BLOCK!.</p>
<h2><a name="p-7368-this-is-one-of-the-big-ideas-3" class="anchor" href="https://rebol.metaeducation.com#p-7368-this-is-one-of-the-big-ideas-3"></a>This Is One of The "Big Ideas"</h2>
<p>Whether you see it as a big idea or just kind of gonzo programming, is up to you.</p>
<p>With the state of software being how it is, I think we need the occasional Flower Sermon.</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Flower_Sermon">https://en.wikipedia.org/wiki/Flower_Sermon</a></strong></p>
<p>Ren-C has <a href="https://rebol.metaeducation.com/t/the-language-worlds-weirdest-comma-mechanic/1387">thrown in another big tool here, with COMMA!</a>.  Giving you yet more choice.</p>
<p>Yet EVAL and PARSE still let you write your streams of consciousness, giving the code a written-English like fluidity, of mostly words and spaces...which we are naturally good at working with.</p>
          <p><a href="https://rebol.metaeducation.com/t/trust-the-users-judgment-when-you-can/2211/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/trust-the-users-judgment-when-you-can/2211/1</link>
        <pubDate>Sat, 24 Aug 2024 03:44:15 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2211-1</guid>
        <source url="https://rebol.metaeducation.com/t/trust-the-users-judgment-when-you-can/2211.rss">Trust the User&#39;s Judgment... *When You Can*</source>
      </item>
  </channel>
</rss>
