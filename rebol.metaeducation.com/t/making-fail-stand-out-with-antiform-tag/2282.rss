<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Making FAIL Stand Out With Antiform TAG!</title>
    <link>https://rebol.metaeducation.com/t/making-fail-stand-out-with-antiform-tag/2282</link>
    <description>[quote=&quot;hostilefork, post:1, topic:2278&quot;]
But with **[antiform tags](https://rebol.metaeducation.com/t/antiform-tag-as-triggers-an-error-on-access-type/2170)**, you can embed a message into the unset variable:

```
&gt;&gt; state: ~&lt;INITIALIZE-STATE hasn&#39;t been called yet&gt;~

&gt;&gt; state
** Script Error: state is ~&lt;INITIALIZE-STATE hasn&#39;t been called yet&gt;~ antiform
** See ^(...) and GET/ANY
```
[/quote]

I have another use of TRIPWIRE that I don&#39;t know if it&#39;s good or bad, but...

---

I&#39;ve always wanted FAIL to stand out more.  When it first was invented (and Ren-C was case-insensitive), I would type FAIL in uppercase to get it:

    foo: func [x [integer! text!]] [
        switch/type x [
            integer! [print &quot;It&#39;s an integer&quot;]
            text! [print &quot;It&#39;s a text&quot;]
            FAIL &quot;unreachable&quot;
        ]
    ]

Then I came up with the idea to use QUASI-WORD!s (that would evaluate to antiform words):

    foo: func [x [integer! text!]] [
        switch/type x [
            integer! [print &quot;It&#39;s an integer&quot;]
            text! [print &quot;It&#39;s a text&quot;]
            fail ~unreachable~
        ]
    ]

I thought it looked cool and drew attention more than **`fail &quot;unreachable&quot;`**, while being the same number of characters.  It acted the same, but cost a bit less due to the interning of the word.

But now, [&quot;keywords&quot; are restricted to a finite system set](https://rebol.metaeducation.com/t/renaming-antiword-time-to-call-it-keyword/2277).   So by necessity, this has changed to use quasiform/antiform TAG!s: 

    foo: func [x [integer! text!]] [
        switch/type x [
            integer! [print &quot;It&#39;s an integer&quot;]
            text! [print &quot;It&#39;s a text&quot;]
            fail ~&lt;unreachable&gt;~
        ]
    ]

Now it&#39;s two more characters, doesn&#39;t cost any less than a string, and at the moment still acts the same as a string.  Is it still a useful thing?  Compared with:

    foo: func [x [integer! text!]] [
        switch/type x [
            integer! [print &quot;It&#39;s an integer&quot;]
            text! [print &quot;It&#39;s a text&quot;]
            fail &quot;unreachable&quot;
        ]
    ]

I truly like that you can &quot;see&quot; the error better when it&#39;s **`~&lt;unreachable&gt;~`**...and go &quot;oh, there&#39;s an error there&quot;.  I imagine this being particularly cool with syntax highlighting.

To make that visibility advantage systemic, would it be reasonable to say that all FAILs take antiform tags and not strings?  Then if you have a message in a text string you would have to say **`fail [msg]`** instead of just **`fail msg`**.  I don&#39;t think that&#39;s terribly oppressive.

I don&#39;t completely like the idea of it being a choice/synonym, because then people will just stylize their code differently and inconsistently...the same person even making different choices in the same file.  But it could just be a synonym and let you pick what you like for the situation, and maybe that&#39;s good.

Or maybe it&#39;s a dumb feature.  I don&#39;t know.</description>
    
    <lastBuildDate>Mon, 16 Sep 2024 15:20:07 +0000</lastBuildDate>
    <category>Errors</category>
    <atom:link href="https://rebol.metaeducation.com/t/making-fail-stand-out-with-antiform-tag/2282.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Making FAIL Stand Out With Antiform TAG!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2278">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/tripwire-in-the-wild/2278/1">TRIPWIRE in The Wild</a></div>
<blockquote>
<p>But with <strong><a href="https://rebol.metaeducation.com/t/antiform-tag-as-triggers-an-error-on-access-type/2170">antiform tags</a></strong>, you can embed a message into the unset variable:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; state: ~&lt;INITIALIZE-STATE hasn't been called yet&gt;~

&gt;&gt; state
** Script Error: state is ~&lt;INITIALIZE-STATE hasn't been called yet&gt;~ antiform
** See ^(...) and GET/ANY
</code></pre>
</blockquote>
</aside>
<p>I have another use of TRIPWIRE that I don't know if it's good or bad, but...</p>
<hr>
<p>I've always wanted FAIL to stand out more.  When it first was invented (and Ren-C was case-insensitive), I would type FAIL in uppercase to get it:</p>
<pre><code>foo: func [x [integer! text!]] [
    switch/type x [
        integer! [print "It's an integer"]
        text! [print "It's a text"]
        FAIL "unreachable"
    ]
]
</code></pre>
<p>Then I came up with the idea to use QUASI-WORD!s (that would evaluate to antiform words):</p>
<pre><code>foo: func [x [integer! text!]] [
    switch/type x [
        integer! [print "It's an integer"]
        text! [print "It's a text"]
        fail ~unreachable~
    ]
]
</code></pre>
<p>I thought it looked cool and drew attention more than <strong><code>fail "unreachable"</code></strong>, while being the same number of characters.  It acted the same, but cost a bit less due to the interning of the word.</p>
<p>But now, <a href="https://rebol.metaeducation.com/t/renaming-antiword-time-to-call-it-keyword/2277">"keywords" are restricted to a finite system set</a>.   So by necessity, this has changed to use quasiform/antiform TAG!s:</p>
<pre><code>foo: func [x [integer! text!]] [
    switch/type x [
        integer! [print "It's an integer"]
        text! [print "It's a text"]
        fail ~&lt;unreachable&gt;~
    ]
]
</code></pre>
<p>Now it's two more characters, doesn't cost any less than a string, and at the moment still acts the same as a string.  Is it still a useful thing?  Compared with:</p>
<pre><code>foo: func [x [integer! text!]] [
    switch/type x [
        integer! [print "It's an integer"]
        text! [print "It's a text"]
        fail "unreachable"
    ]
]
</code></pre>
<p>I truly like that you can "see" the error better when it's <strong><code>~&lt;unreachable&gt;~</code></strong>...and go "oh, there's an error there".  I imagine this being particularly cool with syntax highlighting.</p>
<p>To make that visibility advantage systemic, would it be reasonable to say that all FAILs take antiform tags and not strings?  Then if you have a message in a text string you would have to say <strong><code>fail [msg]</code></strong> instead of just <strong><code>fail msg</code></strong>.  I don't think that's terribly oppressive.</p>
<p>I don't completely like the idea of it being a choice/synonym, because then people will just stylize their code differently and inconsistently...the same person even making different choices in the same file.  But it could just be a synonym and let you pick what you like for the situation, and maybe that's good.</p>
<p>Or maybe it's a dumb feature.  I don't know.</p>
          <p><a href="https://rebol.metaeducation.com/t/making-fail-stand-out-with-antiform-tag/2282/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/making-fail-stand-out-with-antiform-tag/2282/1</link>
        <pubDate>Mon, 16 Sep 2024 13:31:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2282-1</guid>
        <source url="https://rebol.metaeducation.com/t/making-fail-stand-out-with-antiform-tag/2282.rss">Making FAIL Stand Out With Antiform TAG!</source>
      </item>
  </channel>
</rss>
