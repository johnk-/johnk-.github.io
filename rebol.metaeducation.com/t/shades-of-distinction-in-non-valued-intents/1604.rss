<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Shades of Distinction In Non-Valued Intents</title>
    <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604</link>
    <description>***UPDATE 2022:** Rewritten completely to explain the modern answers for the topic that inbound links to this thread wanted to talk about.*

---

## Rebol2/R3-Alpha/Red Have Two Kinds of Nothing (both reified)

Historical Redbol gives you two main choices for &quot;nothingness&quot;...**`#[none]`** and **`#[unset]`**... both of which can be found either in variables, or as values in blocks:

    rebol2&gt;&gt; block: reduce [none print &quot;print returns unset&quot;]
    print returns unset
    == [none unset]  ; misleadingly renders as WORD!s

    rebol2&gt;&gt; type? first block
    == none!

    rebol2&gt;&gt; type? second block
    == unset!

Using `#[none]` has the advantage of being &quot;friendly&quot; on access via word, allowing you to write things like:

    rebol2&gt;&gt; var: none

    rebol2&gt;&gt; either var [print &quot;do something with var&quot;] [print &quot;do something else&quot;]
    do something else

But when var contained an #[unset], you&#39;d get an error instead:

    rebol2&gt;&gt; unset &#39;var

    rebol2&gt;&gt; either var [print &quot;do something with var&quot;] [print &quot;do something else&quot;]
    ** Script Error: var has no value

So instead of using var directly, you had to do something more circuitous and pass the word &quot;var&quot; into a special test routine (morally equivalent to today&#39;s **set? &#39;var**)

**Hence #[none] was reached for frequently out of convenience.  Yet this convenience came with a cost: it was very easy to accidentally append one to a block, even if its non-valued intent should have conveyed you might not have wanted to add anything at all.**

But it&#39;s hard to say: sometimes you *did* want to add #[none] to a block, to serve as a placeholder.  

Also, being able to enumerate a block which contained #[unset] values was problematic, because if you did something like a FOR-EACH it would appear that the variable you were enumerating with was itself not set.

## Early Ren-C Made Reified BLANK! and non-Valued NULL

One thing that bugged me was that there was no &quot;pretty&quot; representation for a non-valued state in a block... and that `#[none]` often thus displayed itself as the word `none` (seen in the example at the top of the post).

So the BLANK! datatype took the single underscore **_**.

    &gt;&gt; second [a _]
    == _

    &gt;&gt; if blank? _ [print &quot;yep, it&#39;s a blank&quot;]
    yep it&#39;s a blank

    &gt;&gt; if not _ [print &quot;blank is also falsey&quot;]
    blank is also falsey

And critically, one of the first things I tried to do was rethink the `#[unset]` state into something that you&#39;d never find in a block, and called it NULL (as well as made it correspond to C/Javascript null in the API):

    &gt;&gt; second [a _]
    == _

    &gt;&gt; third [a _]
    ; null

Since NULL couldn&#39;t be found in a block, it wasn&#39;t ambiguous when you got NULL back from a block operation as to whether there was a &quot;null in that position&quot;.

But it&#39;s still just two things:

  * **blank!** - A nothing you can put in a block
      * it was logically false
      * it was friendly via word access (no need for GET-WORD!)

  * **null** - A nothing you couldn&#39;t put in a block
       * it was also logically false
       * it was *unfriendly* via word access (need GET-WORD! for :VAR, or SET? &#39;VAR)

This put you in a difficult situation for your choices of emptiness when you were dealing with something like:

    append block value  ; what nothing state should you use for value?

If you wanted to avoid accidentally appending blanks to arrays, you kind of wanted NULL so you&#39;d get an error.  But once you used NULL, you could not write the convenient **`if value [...]`**  control structure.

## Later Ren-C added a separate &quot;ornery&quot; non-Value State

A third state was added to be neither logically true nor false, and that would trigger an error on accessing a variable with it.  (I&#39;ll whitewash history a bit and say this state was always called &quot;NOTHING&quot;, and also always could not be put in blocks.)

This was the new state of unset variables:

    &gt;&gt; unset &#39;x

    &gt;&gt; x
    ** Error: X is an unset variable

    &gt;&gt; get/any &#39;x
    == ~  ; nothing

    &gt;&gt; if get/any &#39;x [print &quot;Ornery!&quot;]
    ** Error: nothing is neither logically true nor false

So NULL now represented a middle ground.  It was something that was easy to test for being nothing (using IF) but that was impossible to accidentally put into a block.

This gave you three behaviors:

    [1]  &gt;&gt; nothing-value
         ** Error: NOTHING-VALUE variable is unset

    [2]  &gt;&gt; null-value
         ; null

         &gt;&gt; append [a b] null-value
         ** Error: APPEND does not allow adding NULL to blocks

    [3]  &gt;&gt; blank-value
         == _

         &gt;&gt; append [a b] blank-value
         == [a b _]

## WORD! Isotopes Brought Infinite Non-Valued Choices

Eventually the NULL state became the isotopic status of the WORD! null, so a **~null~** antiform.

It joined **~true~** and **~false~** as being antiforms you could test for truthiness and falseyness.

You&#39;d use the null antiform as the initialization for something you may run some code and find it doesn&#39;t assign, and you want to be able to test that.

     directory: ~null~

     for-each [key val] config [
         if key = &#39;directory [
             if directory [
                 fail [&quot;Directory was already set by config:&quot; directory]
             ]
             directory: val
         ]
     ]

## VOID Provided a Clean &quot;Opt-Out&quot; Option

An unfortunate sacrifice that had been made in the design was that the &quot;non-valued&quot; status of NULL was chosen to raise attention to an error condition, rather than be an opportunity to opt-out of an APPEND:

    &gt;&gt; append [a b] null-value
    ** Error: This error is the choice that we went with

    &gt;&gt; append [a b] null-value
    == [a b]  ; would have been another possibility, but too accident prone

Some &quot;strange&quot; things were tried...such as making it so that appending a BLANK! was a no-op, and if you wanted to append a literal blank you had to append a quoted blank:

     &gt;&gt; append [a b] _
     == [a b]  ; hmmm.

     &gt;&gt; append [a b] quote _
     == [a b _]  ; hmmm.

*(It wasn&#39;t that strange considering appending a BLOCK! would append its contents, and a quoted block was being tried as the way of specifying /ONLY.  This line of thinking ultimately led to the [designs for the isotopes that solve things like splicing intent](https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918), so it wasn&#39;t all for naught!)*

After [invisibles were rethought as NIHIL](https://forum.rebol.info/t/invisibility-reviewed-through-modern-eyes/2034), the VOID state that could be stored in variables came along as a new piece of the puzzle.

    &gt;&gt; void
    == ~void~  ; anti

    &gt;&gt; meta void
    == ~void~

I realized that void was the perfect choice for opting out of operations:

    &gt;&gt; append [a b] void
    == [a b]

    &gt;&gt; append void [a b c]
    == ~null~  ; anti

As you see above, an operation can return null when it doesn&#39;t have another good answer for giving back in case of a no-op.  This gives good error locality, since the null won&#39;t trigger another opting out unless you explicitly convert the null to a void with MAYBE.

    &gt;&gt; append (append void [a b c]) [d e f]
    ** Error: APPEND doesn&#39;t accept ~NULL~ antiform for the series argument

    &gt;&gt; maybe null

    &gt;&gt; append (maybe append void [a b c]) [d e f]
    == ~null~  ; anti

Void variables were deemed to be something it would be undesirable to have be &quot;too friendly&quot;.  So they were slated to be mean on WORD!-access, and instead MAYBE would be used with null variables.

This gives a (seemingly) complete picture

    [1]  &gt;&gt; nothing-value
         ** Error: NOTHING-VALUE variable is unset

          &gt;&gt; append [a b] get/any &#39;nothing-value
          ** Error: APPEND does not allow adding ~ antiforms to blocks
          
    [2]  &gt;&gt; void-value
         ** Error: VOID-VALUE is void (use GET-WORD! or GET/ANY)

         &gt;&gt; append [a b] :void-value
         == [a b]

    [3]  &gt;&gt; null-value
         == ~null~  ; anti

         &gt;&gt; append [a b] null-value
         ** Error: APPEND does not allow adding NULL to blocks

    [3a] &gt;&gt; append [a b] maybe null-value
         == [a b]

    [4]  &gt;&gt; blank-value
         == _

         &gt;&gt; append [a b] blank-value
         == [a b _]</description>
    
    <lastBuildDate>Sat, 09 Mar 2024 08:50:18 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Shades of Distinction In Non-Valued Intents</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/how-to-choose-between-returning-void-and-nihil/2171">How To Choose Between Returning VOID and NIHIL?</a></p>
          <p><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/7</link>
        <pubDate>Sat, 09 Mar 2024 09:17:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1604-7</guid>
        <source url="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss">Shades of Distinction In Non-Valued Intents</source>
      </item>
      <item>
        <title>Shades of Distinction In Non-Valued Intents</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="5" data-topic="1604">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>‘Nihil’: the antiform of an empty block, i.e. a multi-return containing no elements. Completely ignored by the evaluator.</p>
</blockquote>
</aside>
<p>Note that NIHIL is only ignored in "interstitial slots".  If you try to call a function that isn't expecting a NIHIL and pass it as an argument, that's an error:</p>
<pre><code>&gt;&gt; append [a b c] 'd comment "ignored"
== [a b c d]

&gt;&gt; append [a b c] comment "not ignored" 'd
** Script Error: No value in antiform BLOCK! pack: ~[]~ (nihil)
</code></pre>
<p>At one point in time, the second worked.  For an understanding of why it no longer does, see:</p>
<p><a href="https://forum.rebol.info/t/invisibility-reviewed-through-modern-eyes/2034" class="inline-onebox">Invisibility Reviewed Through Modern Eyes</a></p>
<aside class="quote no-group" data-username="bradrn" data-post="5" data-topic="1604">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>‘Void’: the antiform of <code>void</code>. Throws an error on variable access or any other attempt to use it, except with APPEND, where it acts as a no-op. Not sure how this is used.</p>
</blockquote>
</aside>
<p>Void is used generically in many places when you want things to vanish:</p>
<pre><code>&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]
</code></pre>
<p>Allowing NULL to vanish here would be too liberal and not reveal what were likely errors.  If you have something that may be NULL that you want to convert to a VOID if so, you can use MAYBE.</p>
<p>VOID is also is used for opting out of things, using the "void-in-null-out" strategy.  Compare:</p>
<pre><code>&gt;&gt; block: ["a" "b"]

&gt;&gt; unspaced block
== "ab"

&gt;&gt; to word! unspaced block
== ab
</code></pre>
<p>With:</p>
<pre><code>&gt;&gt; block: []

&gt;&gt; unspaced block
== ~null~  ; anti

&gt;&gt; to word! unspaced block
** Script Error: to expects [~void~ element?] for its value argument

&gt;&gt; maybe unspaced block
== ~void~  ; anti

&gt;&gt; to word! maybe unspaced block
== ~null~  ; anti
</code></pre>
<p>With:</p>
<pre><code>&gt;&gt; block: null

&gt;&gt; unspaced block
** Script Error: unspaced expects [~void~ text! block! the-block! issue!]
                 for its line argument

&gt;&gt; unspaced maybe block
== ~null~  ; anti

&gt;&gt; to word! maybe unspaced maybe block
== ~null~  ; anti
</code></pre>
<p>Historical Redbol had a lot of people asking that things give NONE! back when they took NONE! in, and this "none propagation" was messy in terms of leading to whole chains which would opt themselves out without knowing where the problem was.  Void-in-null-out encourages being more purposeful--you only throw in the MAYBE where you need them.</p>
          <p><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/6</link>
        <pubDate>Sat, 09 Mar 2024 02:14:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1604-6</guid>
        <source url="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss">Shades of Distinction In Non-Valued Intents</source>
      </item>
      <item>
        <title>Shades of Distinction In Non-Valued Intents</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>I’ve read this through a couple of times, but am still not sure I understand it correctly. The discursive treatment in the first post is nice for motivating the various types, but confusing for actually getting a handle on how they work.</p>
<p>So, trying to summarise the situation, here’s my understanding at the moment of the various values involved:</p>
<ul>
<li>‘Blank’: an ordinary datatype inhabited by the single value <code>_</code>.</li>
<li>‘Nothing’: the antiform of <code>_</code>. Throws an error on variable access, or any other attempt to use it. Used to represent unset variables.</li>
<li>‘Void’: the antiform of <code>void</code>. Throws an error on variable access or any other attempt to use it, except with APPEND, where it acts as a no-op. Not sure how this is used.</li>
<li>‘Null’: the antiform of <code>null</code>. Does not throws an error on variable access, and tests falsey in conditionals, but throws an error on other attempts to use it. Used to represent uninitialised variables.</li>
<li>‘Nihil’: the antiform of an empty block, i.e. a multi-return containing no elements. Completely ignored by the evaluator.</li>
</ul>
<p>Does this seem correct?</p>
          <p><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/5</link>
        <pubDate>Sat, 09 Mar 2024 01:17:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1604-5</guid>
        <source url="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss">Shades of Distinction In Non-Valued Intents</source>
      </item>
      <item>
        <title>Shades of Distinction In Non-Valued Intents</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1604">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Void variables were deemed to be something it would be undesirable to have be "too friendly". So they were slated to be mean on WORD!-access...</p>
<pre><code>[2]  &gt;&gt; void-value
     ** Error: VOID-VALUE is void (use GET-WORD! or GET/ANY)

     &gt;&gt; append [a b] :void-value
     == [a b]
</code></pre>
</blockquote>
</aside>
<p><strong>So... I'm questioning the necessity of making accesses of void variables require a GET-WORD!.</strong></p>
<p>There's a certain amount of historical bias against "liberal voids" that dates back to the old-timey havoc that voids could wreak on code structure.  They'd just skip the evaluator ahead:</p>
<pre><code>old-ren-c&gt;&gt; append [a b c] void 'd
== [a b c d]
</code></pre>
<p>Those were the days when it had no way to represent in an object whatsoever.  A bit later, a voided variable meant an <em>unset</em> variable...so it couldn't be too easy to read them.  <a href="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915/5">That was supplanted with the idea that unset variables are actually <em>blank antiforms</em>,</a> completely distinct.</p>
<p>Today voids are meta-representible with a quasiform:</p>
<pre><code>&gt;&gt; make object! [
    a: if false [10]
    b: void
    c: ~void~
 ]
 == make object! [
     a: ~void~
     b: ~void~
     c: ~void~
 ]
</code></pre>
<p>The main point of lingering concern is that void variables might be "too easy to make", and if you assign void to a variable you might wind up opting out of things you didn't mean to opt out of.</p>
<pre><code>var: case [
    conditionA [...]
    conditionB [...]
]  ; imagine none of the cases run

append [a b c] var  ; is this too easy to be a no-op?
</code></pre>
<p>But is that fear really justified, when you could have written:</p>
<pre><code>append [a b c] case [
    conditionA [...]
    conditionB [...]
]  ; again, imagine none of the cases run, no-op by design
</code></pre>
<p><a href="https://forum.rebol.info/t/the-void-in-null-out-protocol/1880">The whole idea of void-in-null-out</a> is designed to limit the issues of error locality that historical "none propagation" had.  The odds of protecting someone are probably lower than interfering with legitimate void intent.</p>
<p>Some of the most "fearsome" motivating cases are no longer applicable.  For instance, REDUCE was historically used to assign variables itemwise...and a vanishing expression could wreak havoc:</p>
<pre><code> set [a b c] reduce [expr1 expr2 expr3]
</code></pre>
<p>Modern ideas like PACK don't vaporize voids... they preserve them in a meta state:</p>
<pre><code> &gt;&gt; meta pack [1 void 3]
 == ~['1 ~void~ '3]~
</code></pre>
<p><a href="https://forum.rebol.info/t/a-lot-to-unpack-replacing-the-set-of-reduce-block-idiom/1634/10">And the SET-BLOCK! and SET-WORD! unpacking logic is much more clever!</a></p>
<p>By and large people lobbied for the convenience of REDUCE being able to splice and evaporate expressions.  Cases where an exact number of expressions with no splices or evaporations are needed are less common, and could be handled with REDUCE/EXACT or other routine.</p>
<p><strong>And if UPARSE became void-friendly it would help with the issue of <a href="https://forum.rebol.info/t/the-handling-of-null-in-uparse/2023">dealing with NULL (and void) in UPARSE</a>.</strong>  Null rules would error, void rules would bypass without advancing the input.</p>
<p>You can't skip voids as arguments, and interstitial voids no longer vanish...they cause evaluations to be void:</p>
<pre><code>&gt;&gt; x: if 1 &gt; 2 [print "not run"]
== ~void~  ; anti

&gt;&gt; 10 + 20 x
== ~void~  ; anti
</code></pre>
<p>But this oddness is really just kind of an epicycle of the rest of the oddness of what voids do inside COMPOSE or REDUCE or anything else.  Are these examples any scarier than one another?</p>
<pre><code> &gt;&gt; do [10 + 20 x]
 == ~void~  ; anti

 &gt;&gt; reduce [1 + 2 x 10 + 20]
 == [3 30]
</code></pre>
<p><strong>Considered in total, I think it's time to be more accepting of the fluidity and power of void variables.</strong>  If you don't like them, don't make them.</p>
<p><em>(This might mean making constructs like CASE and SWITCH yield null when no branches are taken?  Or that could be a choice people make in their own base library.. to tweak voiding control structures to be nulling when no branches taken... so you'd have to say <strong>maybe case [...]</strong> to get voiding behavior)</em></p>
          <p><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/4</link>
        <pubDate>Thu, 22 Jun 2023 23:51:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1604-4</guid>
        <source url="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss">Shades of Distinction In Non-Valued Intents</source>
      </item>
      <item>
        <title>Shades of Distinction In Non-Valued Intents</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've brought the above discussion up to date, and I think it paints a pretty clear picture of why things are the way they are.</p>
<p>But I realized while thinking about what the right default for ARRAY would be, that there are two single-character reified non-values:</p>
<pre><code>[1]  &gt;&gt; array 3
     == [_ _ _]  ; BLANK!s

[2]  &gt;&gt; array 3
     == [~ ~ ~]  ; Quasi-BLANK!s ("TRASH!")
</code></pre>
<h2>
<a name="this-offers-us-some-nuance-even-if-a-state-must-be-reified-1" class="anchor" href="https://forum.rebol.info#this-offers-us-some-nuance-even-if-a-state-must-be-reified-1"></a>This Offers Us Some Nuance Even If A State Must Be Reified!</h2>
<p>When it comes to the direct behavior of APPEND to a block, these states have to work the same.  In the era of isotopes, all reified values are appended as-is... it cannot (and should not) be any more complex:</p>
<pre><code>&gt;&gt; append [a b] second [c _]
== [a b _]

&gt;&gt; append [a b] second [c ~]
== [a b ~]

&gt;&gt; append [a b] second [c [d e]]
== [a b [d e]]
</code></pre>
<p><strong>But when we throw in an extra operation, we can imagine a difference.</strong>  For instance, we could make BLANK! semantically equivalent to an empty array for the purposes of things like SPREAD or EMPTY?</p>
<pre><code>&gt;&gt; spread second [c []]
== ~()~  ; anti

&gt;&gt; spread second [c _]
== ~()~  ; anti

&gt;&gt; append [a b] spread second [c _]
== [a b]

&gt;&gt; empty? second [c _]
== ~true~  ; anti
</code></pre>
<p>...and then we'd say that if you tried to do such things with a "meta-nothing" trash state, it would be an error:</p>
<pre><code>&gt;&gt; spread second [c ~]
** Error: SPREAD does not accept ~ as an argument
</code></pre>
<p><em>I think this suggests that <code>~</code> makes a better choice for the default value of ARRAY elements!</em>  We can't default to an antiform like the one representing unset variables, but it's the closest thing.</p>
<p><em>Ultimately it came to seem that having only the antiforms ~null~ and ~false~ be falsey was more valuable than having BLANK! be falsey.</em>  Simply being able to assume that anything you can find in an array is truthy offered more leverage.  So blanks are now truthy, BUT they're empty.</p>
<h2>
<a name="what-about-opting-out-of-as-is-appends-etc-2" class="anchor" href="https://forum.rebol.info#what-about-opting-out-of-as-is-appends-etc-2"></a>What About Opting Out Of As-Is Appends, etc?</h2>
<p>I mentioned that all items that can be found in a block have to act mechanically identically when it comes to TAKE-ing and APPEND-ing them.  But what would XXX be if you wanted the following?</p>
<pre><code>&gt;&gt; append [a b] xxx second [c [d e]]
== [a b [d e]]

&gt;&gt; append [a b] xxx second [c _]
== [a b _]

&gt;&gt; append [a b] xxx second [c ~]
** Error: Cannot append NOTHING (~ antiform) to a block
</code></pre>
<p>I'm trying having this operator <a href="https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163">be called DEGRADE</a>.  It would turn all quasiforms into their corresponding antiform:</p>
<pre><code>&gt;&gt; degrade first [~asdf~]
== ~asdf~  ; anti

&gt;&gt; degrade first ['foo]
== 'foo

&gt;&gt; degrade first [123]
== 123
</code></pre>
<p>The reverse of this operator would be REIFY.</p>
<h2>
<a name="what-about-for-each-variations-3" class="anchor" href="https://forum.rebol.info#what-about-for-each-variations-3"></a>What About FOR-EACH Variations?</h2>
<p>I think an additionally neat spin on how these can be treated differently can be how FOR-EACH responds.</p>
<pre><code>&gt;&gt; for-each x (second [c []]) [
       print "Loop never runs"
   ]
== ~void~  ; anti

&gt;&gt; for-each x (second [c _]) [
       print "Loop never runs"
   ]
== ~void~  ; anti

&gt;&gt; for-each x (second [c ~void~]) [
       print "Loop never runs"
   ]
== ~null~  ; anti (like a void in, null out... or if a BREAK was hit)

&gt;&gt; for-each x (second [c ~]) [
       print "Loop never runs"
   ]
** Error: FOR-EACH does not accept TRASH as its data argument
</code></pre>
<p>This is a bit more speculative, but I like the general idea that a quasi void could let you have a kind of nothing that gave you the "opt out" ability in places where it could... and quasi blank could give you an error, while blank acts like an empty series.  This seems to offer some nice invariants that reduce overall code you have to write handling edge cases.</p>
<hr>
<p><strong>I hope that this all plugs together, <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a>.  Can you review this thread and tell me if I've finally gotten it all to gel for you?</strong></p>
          <p><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/3</link>
        <pubDate>Wed, 30 Nov 2022 04:00:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1604-3</guid>
        <source url="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss">Shades of Distinction In Non-Valued Intents</source>
      </item>
      <item>
        <title>Shades of Distinction In Non-Valued Intents</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em><strong>UPDATE 2022:</strong> Rewritten completely to explain the modern answers for the topic that inbound links to this thread wanted to talk about.</em></p>
<hr>
<h2>
<a name="rebol2r3-alphared-have-two-kinds-of-nothing-both-reified-1" class="anchor" href="https://forum.rebol.info#rebol2r3-alphared-have-two-kinds-of-nothing-both-reified-1"></a>Rebol2/R3-Alpha/Red Have Two Kinds of Nothing (both reified)</h2>
<p>Historical Redbol gives you two main choices for "nothingness"...<strong><code>#[none]</code></strong> and <strong><code>#[unset]</code></strong>... both of which can be found either in variables, or as values in blocks:</p>
<pre><code>rebol2&gt;&gt; block: reduce [none print "print returns unset"]
print returns unset
== [none unset]  ; misleadingly renders as WORD!s

rebol2&gt;&gt; type? first block
== none!

rebol2&gt;&gt; type? second block
== unset!
</code></pre>
<p>Using <code>#[none]</code> has the advantage of being "friendly" on access via word, allowing you to write things like:</p>
<pre><code>rebol2&gt;&gt; var: none

rebol2&gt;&gt; either var [print "do something with var"] [print "do something else"]
do something else
</code></pre>
<p>But when var contained an #[unset], you'd get an error instead:</p>
<pre><code>rebol2&gt;&gt; unset 'var

rebol2&gt;&gt; either var [print "do something with var"] [print "do something else"]
** Script Error: var has no value
</code></pre>
<p>So instead of using var directly, you had to do something more circuitous and pass the word "var" into a special test routine (morally equivalent to today's <strong>set? 'var</strong>)</p>
<p><strong>Hence #[none] was reached for frequently out of convenience.  Yet this convenience came with a cost: it was very easy to accidentally append one to a block, even if its non-valued intent should have conveyed you might not have wanted to add anything at all.</strong></p>
<p>But it's hard to say: sometimes you <em>did</em> want to add #[none] to a block, to serve as a placeholder.</p>
<p>Also, being able to enumerate a block which contained #[unset] values was problematic, because if you did something like a FOR-EACH it would appear that the variable you were enumerating with was itself not set.</p>
<h2>
<a name="early-ren-c-made-reified-blank-and-non-valued-null-2" class="anchor" href="https://forum.rebol.info#early-ren-c-made-reified-blank-and-non-valued-null-2"></a>Early Ren-C Made Reified BLANK! and non-Valued NULL</h2>
<p>One thing that bugged me was that there was no "pretty" representation for a non-valued state in a block... and that <code>#[none]</code> often thus displayed itself as the word <code>none</code> (seen in the example at the top of the post).</p>
<p>So the BLANK! datatype took the single underscore <strong>_</strong>.</p>
<pre><code>&gt;&gt; second [a _]
== _

&gt;&gt; if blank? _ [print "yep, it's a blank"]
yep it's a blank

&gt;&gt; if not _ [print "blank is also falsey"]
blank is also falsey
</code></pre>
<p>And critically, one of the first things I tried to do was rethink the <code>#[unset]</code> state into something that you'd never find in a block, and called it NULL (as well as made it correspond to C/Javascript null in the API):</p>
<pre><code>&gt;&gt; second [a _]
== _

&gt;&gt; third [a _]
; null
</code></pre>
<p>Since NULL couldn't be found in a block, it wasn't ambiguous when you got NULL back from a block operation as to whether there was a "null in that position".</p>
<p>But it's still just two things:</p>
<ul>
<li>
<p><strong>blank!</strong> - A nothing you can put in a block</p>
<ul>
<li>it was logically false</li>
<li>it was friendly via word access (no need for GET-WORD!)</li>
</ul>
</li>
<li>
<p><strong>null</strong> - A nothing you couldn't put in a block</p>
<ul>
<li>it was also logically false</li>
<li>it was <em>unfriendly</em> via word access (need GET-WORD! for :VAR, or SET? 'VAR)</li>
</ul>
</li>
</ul>
<p>This put you in a difficult situation for your choices of emptiness when you were dealing with something like:</p>
<pre><code>append block value  ; what nothing state should you use for value?
</code></pre>
<p>If you wanted to avoid accidentally appending blanks to arrays, you kind of wanted NULL so you'd get an error.  But once you used NULL, you could not write the convenient <strong><code>if value [...]</code></strong>  control structure.</p>
<h2>
<a name="later-ren-c-added-a-separate-ornery-non-value-state-3" class="anchor" href="https://forum.rebol.info#later-ren-c-added-a-separate-ornery-non-value-state-3"></a>Later Ren-C added a separate "ornery" non-Value State</h2>
<p>A third state was added to be neither logically true nor false, and that would trigger an error on accessing a variable with it.  (I'll whitewash history a bit and say this state was always called "NOTHING", and also always could not be put in blocks.)</p>
<p>This was the new state of unset variables:</p>
<pre><code>&gt;&gt; unset 'x

&gt;&gt; x
** Error: X is an unset variable

&gt;&gt; get/any 'x
== ~  ; nothing

&gt;&gt; if get/any 'x [print "Ornery!"]
** Error: nothing is neither logically true nor false
</code></pre>
<p>So NULL now represented a middle ground.  It was something that was easy to test for being nothing (using IF) but that was impossible to accidentally put into a block.</p>
<p>This gave you three behaviors:</p>
<pre><code>[1]  &gt;&gt; nothing-value
     ** Error: NOTHING-VALUE variable is unset

[2]  &gt;&gt; null-value
     ; null

     &gt;&gt; append [a b] null-value
     ** Error: APPEND does not allow adding NULL to blocks

[3]  &gt;&gt; blank-value
     == _

     &gt;&gt; append [a b] blank-value
     == [a b _]
</code></pre>
<h2>
<a name="word-isotopes-brought-infinite-non-valued-choices-4" class="anchor" href="https://forum.rebol.info#word-isotopes-brought-infinite-non-valued-choices-4"></a>WORD! Isotopes Brought Infinite Non-Valued Choices</h2>
<p>Eventually the NULL state became the isotopic status of the WORD! null, so a <strong>~null~</strong> antiform.</p>
<p>It joined <strong>~true~</strong> and <strong>~false~</strong> as being antiforms you could test for truthiness and falseyness.</p>
<p>You'd use the null antiform as the initialization for something you may run some code and find it doesn't assign, and you want to be able to test that.</p>
<pre><code> directory: ~null~

 for-each [key val] config [
     if key = 'directory [
         if directory [
             fail ["Directory was already set by config:" directory]
         ]
         directory: val
     ]
 ]
</code></pre>
<h2>
<a name="void-provided-a-clean-opt-out-option-5" class="anchor" href="https://forum.rebol.info#void-provided-a-clean-opt-out-option-5"></a>VOID Provided a Clean "Opt-Out" Option</h2>
<p>An unfortunate sacrifice that had been made in the design was that the "non-valued" status of NULL was chosen to raise attention to an error condition, rather than be an opportunity to opt-out of an APPEND:</p>
<pre><code>&gt;&gt; append [a b] null-value
** Error: This error is the choice that we went with

&gt;&gt; append [a b] null-value
== [a b]  ; would have been another possibility, but too accident prone
</code></pre>
<p>Some "strange" things were tried...such as making it so that appending a BLANK! was a no-op, and if you wanted to append a literal blank you had to append a quoted blank:</p>
<pre><code> &gt;&gt; append [a b] _
 == [a b]  ; hmmm.

 &gt;&gt; append [a b] quote _
 == [a b _]  ; hmmm.
</code></pre>
<p><em>(It wasn't that strange considering appending a BLOCK! would append its contents, and a quoted block was being tried as the way of specifying /ONLY.  This line of thinking ultimately led to the <a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918">designs for the isotopes that solve things like splicing intent</a>, so it wasn't all for naught!)</em></p>
<p>After <a href="https://forum.rebol.info/t/invisibility-reviewed-through-modern-eyes/2034">invisibles were rethought as NIHIL</a>, the VOID state that could be stored in variables came along as a new piece of the puzzle.</p>
<pre><code>&gt;&gt; void
== ~void~  ; anti

&gt;&gt; meta void
== ~void~
</code></pre>
<p>I realized that void was the perfect choice for opting out of operations:</p>
<pre><code>&gt;&gt; append [a b] void
== [a b]

&gt;&gt; append void [a b c]
== ~null~  ; anti
</code></pre>
<p>As you see above, an operation can return null when it doesn't have another good answer for giving back in case of a no-op.  This gives good error locality, since the null won't trigger another opting out unless you explicitly convert the null to a void with MAYBE.</p>
<pre><code>&gt;&gt; append (append void [a b c]) [d e f]
** Error: APPEND doesn't accept ~NULL~ antiform for the series argument

&gt;&gt; maybe null

&gt;&gt; append (maybe append void [a b c]) [d e f]
== ~null~  ; anti
</code></pre>
<p>Void variables were deemed to be something it would be undesirable to have be "too friendly".  So they were slated to be mean on WORD!-access, and instead MAYBE would be used with null variables.</p>
<p>This gives a (seemingly) complete picture</p>
<pre><code>[1]  &gt;&gt; nothing-value
     ** Error: NOTHING-VALUE variable is unset

      &gt;&gt; append [a b] get/any 'nothing-value
      ** Error: APPEND does not allow adding ~ antiforms to blocks
      
[2]  &gt;&gt; void-value
     ** Error: VOID-VALUE is void (use GET-WORD! or GET/ANY)

     &gt;&gt; append [a b] :void-value
     == [a b]

[3]  &gt;&gt; null-value
     == ~null~  ; anti

     &gt;&gt; append [a b] null-value
     ** Error: APPEND does not allow adding NULL to blocks

[3a] &gt;&gt; append [a b] maybe null-value
     == [a b]

[4]  &gt;&gt; blank-value
     == _

     &gt;&gt; append [a b] blank-value
     == [a b _]
</code></pre>
          <p><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/1</link>
        <pubDate>Fri, 14 May 2021 14:44:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1604-1</guid>
        <source url="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss">Shades of Distinction In Non-Valued Intents</source>
      </item>
  </channel>
</rss>
