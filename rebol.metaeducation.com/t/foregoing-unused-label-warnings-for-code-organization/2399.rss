<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Foregoing Unused Label Warnings for Code Organization</title>
    <link>https://rebol.metaeducation.com/t/foregoing-unused-label-warnings-for-code-organization/2399</link>
    <description>Especially in the stackless model, there&#39;s a need for code to be able to be divided into independent sections where the variables in one section don&#39;t carry to another... also so that you can goto without crossing initializations.

Stylistically, I think this pattern looks quite nice:

    void Some_Function(...) {

        /* top definitions available to all code */

      step_one: { ////////////////////////////////////////////////////////

        /* code can see top definitions */

    } step_two: { ////////////////////////////////////////////////////////

        /* code can see top definitions, but not step one */

    } step_three: { //////////////////////////////////////////////////////

        /* can see top definitions but not step one or two */

    }}

It solves a lot of problems.

The only problem is, I don&#39;t always want to GOTO a step.  Sometimes they just fall through.  And the compiler has a &quot;unused goto label&quot; warning.

To get around it, I don&#39;t want to have to write:

    void Some_Function(...) {

        /* top definitions available to all code */

        goto step_one;

      step_one: { ////////////////////////////////////////////////////////

        /* code can see top definitions */

       goto step_two;

    } step_two: { ////////////////////////////////////////////////////////

        /* code can see top definitions, but not step one */

        goto step_three;

    } step_three: { //////////////////////////////////////////////////////

        /* can see top definitions but not step one or two */

    }}

I&#39;ve tried to scam it, having wild ideas like building an automatic goto into a SECTION() macro:

    #define SECTION(name)  goto name; name##:

    void Some_Function(...) {

        /* top definitions available to all code */

      SECTION(step_one) { ///////////////////////////////////////////////

        /* code can see top definitions */

    } SECTION(step_two) { ///////////////////////////////////////////////

        /* code can see top definitions, but not step one */

    } SECTION(step_three) { /////////////////////////////////////////////

        /* can see top definitions but not step one or two */

    }}

Clever though that may be, it does not work (you can&#39;t token paste a colon onto a symbol in a macro and produce a label).  Also, it looks worse.

**Ultimately I think being able to write the code like this is worth it.  So I&#39;m disabling the unused label warning.**

It&#39;s not really that interesting a warning--considering that what you&#39;re really interested in is *unreachable code*.  Who cares whether a goto label is explicitly gone to--or if code just falls through it--so long as it&#39;s reachable?  And that&#39;s covered by other warnings.</description>
    
    <lastBuildDate>Mon, 07 Apr 2025 20:36:02 +0000</lastBuildDate>
    <category>C/C++ Implementation</category>
    <atom:link href="https://rebol.metaeducation.com/t/foregoing-unused-label-warnings-for-code-organization/2399.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Foregoing Unused Label Warnings for Code Organization</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Especially in the stackless model, there's a need for code to be able to be divided into independent sections where the variables in one section don't carry to another... also so that you can goto without crossing initializations.</p>
<p>Stylistically, I think this pattern looks quite nice:</p>
<pre><code>void Some_Function(...) {

    /* top definitions available to all code */

  step_one: { ////////////////////////////////////////////////////////

    /* code can see top definitions */

} step_two: { ////////////////////////////////////////////////////////

    /* code can see top definitions, but not step one */

} step_three: { //////////////////////////////////////////////////////

    /* can see top definitions but not step one or two */

}}
</code></pre>
<p>It solves a lot of problems.</p>
<p>The only problem is, I don't always want to GOTO a step.  Sometimes they just fall through.  And the compiler has a "unused goto label" warning.</p>
<p>To get around it, I don't want to have to write:</p>
<pre><code>void Some_Function(...) {

    /* top definitions available to all code */

    goto step_one;

  step_one: { ////////////////////////////////////////////////////////

    /* code can see top definitions */

   goto step_two;

} step_two: { ////////////////////////////////////////////////////////

    /* code can see top definitions, but not step one */

    goto step_three;

} step_three: { //////////////////////////////////////////////////////

    /* can see top definitions but not step one or two */

}}
</code></pre>
<p>I've tried to scam it, having wild ideas like building an automatic goto into a SECTION() macro:</p>
<pre><code>#define SECTION(name)  goto name; name##:

void Some_Function(...) {

    /* top definitions available to all code */

  SECTION(step_one) { ///////////////////////////////////////////////

    /* code can see top definitions */

} SECTION(step_two) { ///////////////////////////////////////////////

    /* code can see top definitions, but not step one */

} SECTION(step_three) { /////////////////////////////////////////////

    /* can see top definitions but not step one or two */

}}
</code></pre>
<p>Clever though that may be, it does not work (you can't token paste a colon onto a symbol in a macro and produce a label).  Also, it looks worse.</p>
<p><strong>Ultimately I think being able to write the code like this is worth it.  So I'm disabling the unused label warning.</strong></p>
<p>It's not really that interesting a warning--considering that what you're really interested in is <em>unreachable code</em>.  Who cares whether a goto label is explicitly gone to--or if code just falls through it--so long as it's reachable?  And that's covered by other warnings.</p>
          <p><a href="https://rebol.metaeducation.com/t/foregoing-unused-label-warnings-for-code-organization/2399/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/foregoing-unused-label-warnings-for-code-organization/2399/1</link>
        <pubDate>Mon, 07 Apr 2025 20:36:02 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2399-1</guid>
        <source url="https://rebol.metaeducation.com/t/foregoing-unused-label-warnings-for-code-organization/2399.rss">Foregoing Unused Label Warnings for Code Organization</source>
      </item>
  </channel>
</rss>
