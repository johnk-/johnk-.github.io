<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SPREAD in PARSE: Isotopic Matching</title>
    <link>https://rebol.metaeducation.com/t/spread-in-parse-isotopic-matching/1949</link>
    <description>Remember that the `@var` rule will match the contents of variables literally, vs. running them as a rule:

    &gt;&gt; var: [some rule]
    == [some rule]

    &gt;&gt; parse [[some rule] [some rule]] [some @var]
    == [some rule]

You can evaluate an expression to literally match, too:

    &gt;&gt; parse [[some rule] [some rule]] [some @(reverse copy [rule some])]
    == [some rule]

Now there&#39;s a powerful new twist: **You can match in a spliced fashion, using an antiform GROUP!**

    &gt;&gt; var: [some rule]

    &gt;&gt; parse [some rule some rule] [some @(spread var)]
    == ~(some rule)~  ; anti

*And you can synthesize a product that may be a splice or not!!!*

    &gt;&gt; append [a b c] parse [1 2 3] [block! | spread across some integer!]
    == [a b c 1 2 3]

    &gt;&gt; append [a b c] parse [[x y z]] [block! | spread across some integer!]
    == [a b c [x y z]]

**[Encoding the splicing intent on the value is clearly the way to go.](https://rebol.metaeducation.com/t/putting-splicing-intent-on-appended-value/1873)**  Seems obvious now, but hindsight is 20/20.</description>
    
    <lastBuildDate>Wed, 07 May 2025 04:20:01 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://rebol.metaeducation.com/t/spread-in-parse-isotopic-matching/1949.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SPREAD in PARSE: Isotopic Matching</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Remember that the <code>@var</code> rule will match the contents of variables literally, vs. running them as a rule:</p>
<pre><code>&gt;&gt; var: [some rule]
== [some rule]

&gt;&gt; parse [[some rule] [some rule]] [some @var]
== [some rule]
</code></pre>
<p>You can evaluate an expression to literally match, too:</p>
<pre><code>&gt;&gt; parse [[some rule] [some rule]] [some @(reverse copy [rule some])]
== [some rule]
</code></pre>
<p>Now there's a powerful new twist: <strong>You can match in a spliced fashion, using an antiform GROUP!</strong></p>
<pre><code>&gt;&gt; var: [some rule]

&gt;&gt; parse [some rule some rule] [some @(spread var)]
== ~(some rule)~  ; anti
</code></pre>
<p><em>And you can synthesize a product that may be a splice or not!!!</em></p>
<pre><code>&gt;&gt; append [a b c] parse [1 2 3] [block! | spread across some integer!]
== [a b c 1 2 3]

&gt;&gt; append [a b c] parse [[x y z]] [block! | spread across some integer!]
== [a b c [x y z]]
</code></pre>
<p><strong><a href="https://rebol.metaeducation.com/t/putting-splicing-intent-on-appended-value/1873">Encoding the splicing intent on the value is clearly the way to go.</a></strong>  Seems obvious now, but hindsight is 20/20.</p>
          <p><a href="https://rebol.metaeducation.com/t/spread-in-parse-isotopic-matching/1949/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/spread-in-parse-isotopic-matching/1949/1</link>
        <pubDate>Wed, 31 Aug 2022 10:36:04 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1949-1</guid>
        <source url="https://rebol.metaeducation.com/t/spread-in-parse-isotopic-matching/1949.rss">SPREAD in PARSE: Isotopic Matching</source>
      </item>
  </channel>
</rss>
