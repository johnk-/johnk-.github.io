<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Could The &gt;&gt;= Operator Do Something Haskell-Y</title>
    <link>https://rebol.metaeducation.com/t/could-the-operator-do-something-haskell-y/2440</link>
    <description>I&#39;ve been pondering shorthands, and I think I&#39;m near-100% certain that **?** is good shorthand for OPT(IONAL).

Following on that, I&#39;m coming to wonder if **`!`** is a good shorthand for TRY (and that **`?!`** is might be a good shorthand for OPT TRY).  But **`??`** could also be OPT TRY as &quot;more forceful OPT&quot;... especially since there&#39;s OPT:VETO which is competing here and needs something.  

The idea of **`!!`** meaning [**&quot;Propagate Error&quot;**](https://rebol.metaeducation.com/t/virtual-binding-based-error-propagation-operator/2389) is intriguing.  It&#39;s probably a behavior-modifying refinement to TRY or TRAP, e.g. something like TRY:PROPAGATE.  

Anyway this all led me to question **`!=`** being an alias for not equal, and if we should just stick with **`&lt;&gt;`**.  `!=` could be some kind of `&quot;try equal?&quot;` or such, that would make more sense.

But in thinking about how characters compose onto equal signs to affect their behavior, that made me wonder...

## What Could **&gt;&gt;=** Do ?

A good question for @bradrn ... is there anything meaningfully relatable to Haskell&#39;s iconic definition of this, which is applicable in the Ren-C world?

Rebol has dialects... not monads.. but there&#39;s some similarity in terms of finding yourself &quot;wrapped up&quot; in a context with implicit assumptions.

So if you look at something like this EVAL-fence! in PARSE, what might it make you think about applying that?  What kind of scenarios?

  https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728/5?u=hostilefork

e.g. &quot;In what way would that example bend in order to show a usage of &gt;&gt;= that made sense?&quot;

*(Also, more generally, I&#39;m curious if you had any additional observations after some time of having absorbed the design... on posts like asking [&quot;how are dialects implemented?&quot;](https://rebol.metaeducation.com/t/copy-all-files-in-a-directory-a-little-help-please/2149/3?u=hostilefork) or [&quot;fundamental distinguishing features of Rebol&quot;](https://rebol.metaeducation.com/t/fundamental-distinguishing-features-of-rebol/2136).  It&#39;s extremely useful if you add feedback on these over time, and what sorts of &quot;marketing&quot; points stand out most...what examples led to the best realizations.)*</description>
    
    <lastBuildDate>Sun, 11 May 2025 05:43:17 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://rebol.metaeducation.com/t/could-the-operator-do-something-haskell-y/2440.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Could The &gt;&gt;= Operator Do Something Haskell-Y</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2440">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>A good question for <a class="mention" href="https://rebol.metaeducation.com/u/bradrn">@bradrn</a> ... is there anything meaningfully relatable to Haskell's iconic definition of this, which is applicable in the Ren-C world?</p>
</blockquote>
</aside>
<p>I tend to doubt it. Between dialecting and definitional errors, Ren-C already prefers different means for the sorts of things which Haskell expresses using <code>(&gt;&gt;=)</code>. But Iâ€™ll keep this in the back of my mind, in case I come up with any ideas.</p>
          <p><a href="https://rebol.metaeducation.com/t/could-the-operator-do-something-haskell-y/2440/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/could-the-operator-do-something-haskell-y/2440/2</link>
        <pubDate>Sun, 11 May 2025 05:43:17 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2440-2</guid>
        <source url="https://rebol.metaeducation.com/t/could-the-operator-do-something-haskell-y/2440.rss">Could The &gt;&gt;= Operator Do Something Haskell-Y</source>
      </item>
      <item>
        <title>Could The &gt;&gt;= Operator Do Something Haskell-Y</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've been pondering shorthands, and I think I'm near-100% certain that <strong>?</strong> is good shorthand for OPT(IONAL).</p>
<p>Following on that, I'm coming to wonder if <strong><code>!</code></strong> is a good shorthand for TRY (and that <strong><code>?!</code></strong> is might be a good shorthand for OPT TRY).  But <strong><code>??</code></strong> could also be OPT TRY as "more forceful OPT"... especially since there's OPT:VETO which is competing here and needs something.</p>
<p>The idea of <strong><code>!!</code></strong> meaning <a href="https://rebol.metaeducation.com/t/virtual-binding-based-error-propagation-operator/2389"><strong>"Propagate Error"</strong></a> is intriguing.  It's probably a behavior-modifying refinement to TRY or TRAP, e.g. something like TRY:PROPAGATE.</p>
<p>Anyway this all led me to question <strong><code>!=</code></strong> being an alias for not equal, and if we should just stick with <strong><code>&lt;&gt;</code></strong>.  <code>!=</code> could be some kind of <code>"try equal?"</code> or such, that would make more sense.</p>
<p>But in thinking about how characters compose onto equal signs to affect their behavior, that made me wonder...</p>
<h2><a name="p-8242-what-could-do-1" class="anchor" href="https://rebol.metaeducation.com#p-8242-what-could-do-1"></a>What Could <strong>&gt;&gt;=</strong> Do ?</h2>
<p>A good question for <a class="mention" href="https://rebol.metaeducation.com/u/bradrn">@bradrn</a> ... is there anything meaningfully relatable to Haskell's iconic definition of this, which is applicable in the Ren-C world?</p>
<p>Rebol has dialects... not monads.. but there's some similarity in terms of finding yourself "wrapped up" in a context with implicit assumptions.</p>
<p>So if you look at something like this EVAL-fence! in PARSE, what might it make you think about applying that?  What kind of scenarios?</p>
<p><a href="https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728/5" class="inline-onebox">Uses of FENCE! In Dialecting - #5 by hostilefork</a></p>
<p>e.g. "In what way would that example bend in order to show a usage of &gt;&gt;= that made sense?"</p>
<p><em>(Also, more generally, I'm curious if you had any additional observations after some time of having absorbed the design... on posts like asking <a href="https://rebol.metaeducation.com/t/copy-all-files-in-a-directory-a-little-help-please/2149/3">"how are dialects implemented?"</a> or <a href="https://rebol.metaeducation.com/t/fundamental-distinguishing-features-of-rebol/2136">"fundamental distinguishing features of Rebol"</a>.  It's extremely useful if you add feedback on these over time, and what sorts of "marketing" points stand out most...what examples led to the best realizations.)</em></p>
          <p><a href="https://rebol.metaeducation.com/t/could-the-operator-do-something-haskell-y/2440/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/could-the-operator-do-something-haskell-y/2440/1</link>
        <pubDate>Sat, 10 May 2025 22:57:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2440-1</guid>
        <source url="https://rebol.metaeducation.com/t/could-the-operator-do-something-haskell-y/2440.rss">Could The &gt;&gt;= Operator Do Something Haskell-Y</source>
      </item>
  </channel>
</rss>
