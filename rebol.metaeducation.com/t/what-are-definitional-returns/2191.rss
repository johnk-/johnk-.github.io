<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What Are Definitional Returns?</title>
    <link>https://rebol.metaeducation.com/t/what-are-definitional-returns/2191</link>
    <description>Novices using Rebol2 or Red aren&#39;t really clear on how their RETURN works.  (Or *doesn&#39;t* work, as the case my be.)  RETURN climbs the stack until it finds a function that is willing to accept returns.

* Functions in Rebol2/Red that *won&#39;t* accept returns: **IF, WHILE, or pretty much any native**
* Functions in Rebol2/Red that *will* accept returns: **any user FUNC you write**

To give a brutally simple example, you cannot implement UNLESS in terms of IF:

     rebol2&gt;&gt; foo: func [x] [if not x = 10 [return &quot;not 10&quot;] return &quot;it&#39;s 10!&quot;]
     rebol2&gt;&gt; foo 20
     == &quot;not 10&quot;

     rebol2&gt;&gt; unless: func [cond block] [if not cond block]
     rebol2&gt;&gt; bar: func [x] [unless x = 10 [return &quot;not 10&quot;] return &quot;it&#39;s 10!&quot;]
     rebol2&gt;&gt; bar 20
     == &quot;it&#39;s 10&quot;  ; D&#39;oh

That UNLESS, because it&#39;s a FUNC and not a native, is a candidate for receiving RETURN.  So the UNLESS itself returned &quot;not 10&quot; instead of returning from bar.  Execution continued and the `return &quot;it&#39;s 10!&quot; ran.  **I maintain that correct behavior constitutes another must-have, [and I was by no means alone in this, nor the first to say so](https://github.com/metaeducation/rebol-issues/issues/539#issuecomment-170878011)**.

    &gt;&gt; unless: function [cond block] [if not cond (block)]  ; see note re: group!
    &gt;&gt; bar: function [x] [unless x = 10 [return &quot;not 10&quot;] return &quot;it&#39;s 10!&quot;]
    &gt;&gt; bar 20
    == &quot;not 10&quot;

**I do not consider annotating UNLESS to say &quot;I&#39;m the kind of thing that doesn&#39;t catch returns&quot; to be remotely acceptable.**  I&#39;d sooner throw out the project than go that route.  Addressing definitional returns wasn&#39;t at all trivial...even though conceptually it was understood what needed to be done.  It was one of the first things I tried to do in open-sourced R3-Alpha.  The rearranging I had to do in order to understand the code well enough to accomplish it laid the groundwork for many features to come.

*(Note: The reason you have to put a group! around `block` (or say `:block`) is due to soft-quoted branching, and I [argue for the tradeoff here](https://rebol.metaeducation.com/t/stylistic-questions-and-soft-quoted-branching/1220).  I would not consider that one of my non-negotiable points for this list, though I&#39;ve offered what I believe to be some compelling arguments.  I do--however--consider FUNCTION instead of FUNC to be a non-negotiable way of writing this, with current leaning that [FUNC is a full synonym for FUNCTION](https://rebol.metaeducation.com/t/abbreviations-as-synonyms/1211))*</description>
    
    <lastBuildDate>Fri, 30 Aug 2024 05:07:44 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://rebol.metaeducation.com/t/what-are-definitional-returns/2191.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What Are Definitional Returns?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Novices using Rebol2 or Red aren't really clear on how their RETURN works.  (Or <em>doesn't</em> work, as the case my be.)  RETURN climbs the stack until it finds a function that is willing to accept returns.</p>
<ul>
<li>Functions in Rebol2/Red that <em>won't</em> accept returns: <strong>IF, WHILE, or pretty much any native</strong></li>
<li>Functions in Rebol2/Red that <em>will</em> accept returns: <strong>any user FUNC you write</strong></li>
</ul>
<p>To give a brutally simple example, you cannot implement UNLESS in terms of IF:</p>
<pre><code> rebol2&gt;&gt; foo: func [x] [if not x = 10 [return "not 10"] return "it's 10!"]
 rebol2&gt;&gt; foo 20
 == "not 10"

 rebol2&gt;&gt; unless: func [cond block] [if not cond block]
 rebol2&gt;&gt; bar: func [x] [unless x = 10 [return "not 10"] return "it's 10!"]
 rebol2&gt;&gt; bar 20
 == "it's 10"  ; D'oh
</code></pre>
<p>That UNLESS, because it's a FUNC and not a native, is a candidate for receiving RETURN.  So the UNLESS itself returned "not 10" instead of returning from bar.  Execution continued and the `return "it's 10!" ran.  <strong>I maintain that correct behavior constitutes another must-have, <a href="https://github.com/metaeducation/rebol-issues/issues/539#issuecomment-170878011">and I was by no means alone in this, nor the first to say so</a></strong>.</p>
<pre><code>&gt;&gt; unless: function [cond block] [if not cond (block)]  ; see note re: group!
&gt;&gt; bar: function [x] [unless x = 10 [return "not 10"] return "it's 10!"]
&gt;&gt; bar 20
== "not 10"
</code></pre>
<p><strong>I do not consider annotating UNLESS to say "I'm the kind of thing that doesn't catch returns" to be remotely acceptable.</strong>  I'd sooner throw out the project than go that route.  Addressing definitional returns wasn't at all trivial...even though conceptually it was understood what needed to be done.  It was one of the first things I tried to do in open-sourced R3-Alpha.  The rearranging I had to do in order to understand the code well enough to accomplish it laid the groundwork for many features to come.</p>
<p><em>(Note: The reason you have to put a group! around <code>block</code> (or say <code>:block</code>) is due to soft-quoted branching, and I <a href="https://rebol.metaeducation.com/t/stylistic-questions-and-soft-quoted-branching/1220">argue for the tradeoff here</a>.  I would not consider that one of my non-negotiable points for this list, though I've offered what I believe to be some compelling arguments.  I do--however--consider FUNCTION instead of FUNC to be a non-negotiable way of writing this, with current leaning that <a href="https://rebol.metaeducation.com/t/abbreviations-as-synonyms/1211">FUNC is a full synonym for FUNCTION</a>)</em></p>
          <p><a href="https://rebol.metaeducation.com/t/what-are-definitional-returns/2191/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-are-definitional-returns/2191/1</link>
        <pubDate>Sun, 20 Oct 2019 04:00:00 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2191-1</guid>
        <source url="https://rebol.metaeducation.com/t/what-are-definitional-returns/2191.rss">What Are Definitional Returns?</source>
      </item>
  </channel>
</rss>
