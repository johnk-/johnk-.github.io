<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should Void be Offered to Predicates (for REDUCE, ANY/ALL, etc.)</title>
    <link>https://rebol.metaeducation.com/t/should-void-be-offered-to-predicates-for-reduce-any-all-etc/1872</link>
    <description>There&#39;s an option to pass a function to some things, to help avoid needing to write the basic logic of the function over again if you just want some difference.  So if you want a negating version of ANY you can say:

    &gt;&gt; any/predicate [1 + 2 null 3 + 4] :not
    == ~null~  ; isotope (decays to null)

There you have a negated form of ANY.  You could specialize that:

    &gt;&gt; any-not: specialize :any [predicate: :not]
    == #[action! {any-not} [block]]

    &gt;&gt; any-not [1 + 2 null 3 + 4] then [print &quot;Look, it worked!&quot;]
    Look, it worked!

It works with THEN and ELSE thanks to isotopes: a negating form of ANY that returns you an indicator of what the false thing was, while still being able to let you run a THEN or ELSE clause that has the expected semantics.  So even though the thing that triggered the short circuit was a NULL, the isotope form was returned and allowed to run the THEN.

**But what if there&#39;s a void entry, should your predicate function find out about it?**

    &gt;&gt; reduce/predicate [1 + 2 3 + 4] func [x] [return x * 10]
    == [30 70]

    &gt;&gt; reduce [1 + 2 if false [&lt;a&gt;] 3 + 4]
    == [3 7]

    &gt;&gt; reduce/predicate [1 + 2 if false [&lt;a&gt;] 3 + 4] func [x] [return x * 10]
    ; ...???...

**Given that the whole point of predicates is to reuse the work of the core function, it would seem like one of those pieces of work is filtering out the void expressions.**

So I think it&#39;s pretty clear the above should be **`== [30 70]`** with no error given.

But what if the function&#39;s argument was ^META?  Does that change things?

    &gt;&gt; reduce/predicate [1 + 2 if false [&lt;a&gt;] 3 + 4] func [^x] [...]
    ; ...???...

Or does it have to explicitly say by contract it is interested in voids?

    &gt;&gt; reduce/predicate [1 + 2 if false [&lt;a&gt;] 3 + 4] func [^x [&lt;void&gt; any-value!]] [...]
    ; ...???...

It&#39;s a pretty fringe feature either way.  I think that in REDUCE&#39;s case, we can say that if you really want to get control of every expression...then using REDUCE-EACH with ^META seems a bit more explicit that you want EACH.

I&#39;m going to say for the moment that the predicate in REDUCE, ANY, and ALL will never be offered voids...and that&#39;s just part of the benefit of reusing the work.</description>
    
    <lastBuildDate>Sun, 10 Jul 2022 17:16:17 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-void-be-offered-to-predicates-for-reduce-any-all-etc/1872.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should Void be Offered to Predicates (for REDUCE, ANY/ALL, etc.)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's an option to pass a function to some things, to help avoid needing to write the basic logic of the function over again if you just want some difference.  So if you want a negating version of ANY you can say:</p>
<pre><code>&gt;&gt; any/predicate [1 + 2 null 3 + 4] :not
== ~null~  ; isotope (decays to null)
</code></pre>
<p>There you have a negated form of ANY.  You could specialize that:</p>
<pre><code>&gt;&gt; any-not: specialize :any [predicate: :not]
== #[action! {any-not} [block]]

&gt;&gt; any-not [1 + 2 null 3 + 4] then [print "Look, it worked!"]
Look, it worked!
</code></pre>
<p>It works with THEN and ELSE thanks to isotopes: a negating form of ANY that returns you an indicator of what the false thing was, while still being able to let you run a THEN or ELSE clause that has the expected semantics.  So even though the thing that triggered the short circuit was a NULL, the isotope form was returned and allowed to run the THEN.</p>
<p><strong>But what if there's a void entry, should your predicate function find out about it?</strong></p>
<pre><code>&gt;&gt; reduce/predicate [1 + 2 3 + 4] func [x] [return x * 10]
== [30 70]

&gt;&gt; reduce [1 + 2 if false [&lt;a&gt;] 3 + 4]
== [3 7]

&gt;&gt; reduce/predicate [1 + 2 if false [&lt;a&gt;] 3 + 4] func [x] [return x * 10]
; ...???...
</code></pre>
<p><strong>Given that the whole point of predicates is to reuse the work of the core function, it would seem like one of those pieces of work is filtering out the void expressions.</strong></p>
<p>So I think it's pretty clear the above should be <strong><code>== [30 70]</code></strong> with no error given.</p>
<p>But what if the function's argument was ^META?  Does that change things?</p>
<pre><code>&gt;&gt; reduce/predicate [1 + 2 if false [&lt;a&gt;] 3 + 4] func [^x] [...]
; ...???...
</code></pre>
<p>Or does it have to explicitly say by contract it is interested in voids?</p>
<pre><code>&gt;&gt; reduce/predicate [1 + 2 if false [&lt;a&gt;] 3 + 4] func [^x [&lt;void&gt; any-value!]] [...]
; ...???...
</code></pre>
<p>It's a pretty fringe feature either way.  I think that in REDUCE's case, we can say that if you really want to get control of every expression...then using REDUCE-EACH with ^META seems a bit more explicit that you want EACH.</p>
<p>I'm going to say for the moment that the predicate in REDUCE, ANY, and ALL will never be offered voids...and that's just part of the benefit of reusing the work.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-void-be-offered-to-predicates-for-reduce-any-all-etc/1872/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-void-be-offered-to-predicates-for-reduce-any-all-etc/1872/1</link>
        <pubDate>Sun, 10 Jul 2022 17:16:17 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1872-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-void-be-offered-to-predicates-for-reduce-any-all-etc/1872.rss">Should Void be Offered to Predicates (for REDUCE, ANY/ALL, etc.)</source>
      </item>
  </channel>
</rss>
