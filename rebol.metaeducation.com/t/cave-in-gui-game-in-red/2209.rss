<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cave-In: GUI Game In Red</title>
    <link>https://rebol.metaeducation.com/t/cave-in-gui-game-in-red/2209</link>
    <description>Because I&#39;ve idly started to think about what a Ren-C GUI dialect would look like (leveraging the web browser layout engine, of course), I&#39;ve decided to reluctantly learn about Rebol&#39;s historical GUIs.  VID code has traditionally been an eyesore for me, but in the coming months I&#39;ll try to dedicate a little time to look at examples--both old and new--from all the various incarnations of the VID dialect *([VID](https://www.rebol.com/docs/view-guide.html), [Red VID](https://github.com/red/docs/blob/master/en/vid.adoc), [VID/S (Spaces)](https://codeberg.org/hiiamboris/red-spaces/src/branch/master/vids.md), [RebGUI](http://www.dobeash.com/rebgui.html), [GLASS](http://www.rebol.org/view-script.r?script=glayout.r), and I&#39;ve just found out that [DRAW is a different dialect from VID](https://github.com/red/docs/blob/master/en/draw.adoc) so there&#39;s probably at least 12 more variants of all this stuff)*

To try and have a little fun with my first one, I&#39;ll look at the game **&quot;Cave-In&quot;** by @PlanetSizeCPU from Red Gitter:

![Level.gif](https://gitter.ems.host/_matrix/media/v3/download/gitter.im/e0c12d3abca5509745b25a32a6866b3a502273791811281938799919104?allow_redirect=true)

## The Code

The code is [available on GitHub](https://github.com/planetsizecpu/Cave-In), and it has been committed to as recently as July.

Curiously, the level definitions themselves [are not in Red syntax](https://github.com/planetsizecpu/Cave-In/blob/master/zLevelsDesign.txt).  They&#39;re like CSV files, except they use vertical bar as a separator instead of comma, and **#** for to-end-of-line comments 

    # ItemType|ObjectName|FaceName|FaceSize|FaceOffset|Rate|...
    ...
    CAVERN|cavern1|cave|1599x600|0x0|0:0|0x0|0:0|0|0|cavern.png
    GOLDBG|gold1|gld1|8x12|340x564|0:0|0x0|0:0|0|1|gold1.png
    GOLDBG|gold2|gld2|8x12|310x461|0:0|0x0|0:0|0|1|gold1.png
    GOLDBG|gold3|gld3|8x12|650x51|0:0|0x0|0:0|0|1|gold1.png
    GOLDBG|gold4|gld4|8x12|200x185|0:0|0x0|0:0|0|1|gold1.png
    ...


The implementation is just [four` .red` source files](https://github.com/planetsizecpu/Cave-In/tree/master/src), three of which are small and the main implementation lives in something called **`makegame.red`**

[https://github.com/planetsizecpu/Cave-In/blob/master/src/makegame.red](https://github.com/planetsizecpu/Cave-In/blob/master/src/makegame.red)

## There&#39;s an Observable Lack Of... *&quot;Rebolism&quot;*

I don&#39;t want to be too critical of someone&#39;s early efforts in programming.  This actually reminds me a lot of when I was a kid and got Turbo Pascal for a 286 PC, and tried to write a variation of [a Commodore 64 game called &quot;React&quot;](http://blog.hostilefork.com/media/machine-language-commodore-64-128/react-compute-gazette.png).  The example snippets I learned from were very simple and none even showed you how to break your code into different files, so I just had one long .PAS file... that grew and grew.  Instead of seeing the growing code with tons of conditionals as a problem, I was kind of excited about how big it was getting!

But that aside, there clearly are a lot of repetitive patterns and lack of abstraction.  To pick on [one short example at random](https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/makegame.red#L462C1-L474C4):

    if (first f/extra/name) = #&quot;a&quot; [
        foreach img GameData/AgentDead [f/image: get img wait GameData/AgentDeadDelay]		
    ]
    if (first f/extra/name) = #&quot;f&quot; [
        foreach img GameData/FAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
    ]
    if (first f/extra/name) = #&quot;p&quot; [
       foreach img GameData/PAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
    ]
    if (first f/extra/name) = #&quot;y&quot; [
        foreach img GameData/YAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
    ]

But you can see that large-scale repetition of this kind is pervasive.

What I find perplexing is that if people aren&#39;t using Rebol&#39;s mechanisms, what do they actually *like* about the language enough that keeps them going with it?

Ren-C takes the refactoring and streamlining potential to new heights.  It makes it easier to put expressions all on one line with good error locality with [VOID-in-NULL-out](https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880).  It gives you foolproof [truthiness of any item you can put in a block](https://rebol.metaeducation.com/t/blank-2022-revisiting-the-datatype/1942/9?u=hostilefork) (only antiform null is falsey).  GHOST lets you use [put code midstream in any evaluative context without disturbing it](https://rebol.metaeducation.com/t/making-invisible-functions-e-g-comment-elide/2034), for things like ASSERT and ELIDE to be anywhere you please.  [The loop result protocol is super neat](https://rebol.metaeducation.com/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609), and I could go on and on...

...but the basic idea of enabling smooth composition has been there since Rebol2, e.g. you could rewrite the above as:

    if (dead: select [
        #&quot;a&quot; AgentDead
        #&quot;f&quot; FAgentDead
        #&quot;p&quot; PAgentDead
        #&quot;y&quot; YAgentDead
    ] first f/extra/name) [
        foreach img GameData/(dead) [
           f/image: get img wait GameData/AgentDeadDelay
        ]
    ]

As Carl said in [**Rebol: Not for everyone?**](https://rebol.metaeducation.com/t/rebols-target-market-newbies-experts-or-other/581?u=hostilefork):

&gt; *&quot;I&#39;ve glanced over a lot of REBOL code written by a wide variety of programmers, and quite often I&#39;m floored. Many programmers use REBOL like they&#39;re writing in C or BASIC. I can spot it in an instant; they did not bother to learn the fundamental concepts of the REBOL language. When I see that kind of code, I wonder why they bothered to use REBOL at all. C is better written in C. You will never hear me contest that fact.&quot;*

...but the appeal may be &quot;I **can** Use It Like BASIC!&quot;  I dunno.

## Timers And Frame Rates

The [definition of the main &quot;layout&quot; GameScr(een)](https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L113) includes a size and position, and uses what appears to be a RATE dialect keyword:

    GameScr: layout [
        title &quot;Cave-In&quot;
        size 800x600
        origin 0x0
        space 0x0
	
        ; Info field is also used for event management!
        at 10x610 info: base 780x30 orange blue font [
            name: &quot;Arial&quot; size: 14 style: &#39;bold
        ] focus 
        rate GameData/GameRate on-time [
            info/rate: none 
            if CheckStatus [alert &quot;END OF GAME&quot; quit] 
            info/rate: GameData/GameRate
        ]
    ]

RATE is defined [in the VID dialect](https://www.rebol.com/docs/view-guide.html) as:

&gt; **rate** - An INTEGER or TIME that specifies the rate of time events for a face. This is used for animation or repetitive events (such as holding the mouse down on certain types of user interface styles). An INTEGER indicates the number of events per second. A TIME provides the period between events. 

Cave-In apparently uses the time-based parameter, [which it initializes and then overwites](https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L29C2-L34C3).

    GameRate: 0:00:00.003
    either system/platform = &#39;Windows [
        ; Win cant handle 3ms rate so it goes as fast as possible
        GameRate: 0:00:00.006
    ][
        ; For other OSs as GTK we must test this value as they handle right
        GameRate: 0:00:00.065
    ]

So I take it that **`rate &lt;time or integer&gt; on-time [...]`** means that you want callbacks to run the code in the block at the given rate.  I&#39;m not clear on why you would say ON-TIME there vs. just put the block there.

Searching rebol.org for other VID examples using rate, I found [`tweener.r`](http://www.rebol.org/view-script.r?script=tweener.r) that does:

     rate 1 feel [
         engage: func [face action event] [...]
     ]

I don&#39;t know if ON-TIME is Red-specific or what, or what other things you can put there, or what this means.

There is actually code here for [adjusting the timings for different CPUs](https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L174).  That seems to undercut Red&#39;s value proposition if that&#39;s necessary...isn&#39;t this supposed to be speaking about a concrete amount of time that works on all platforms?

## Main Game

Anyway, the spawning of a modal graphic window instance is done with VIEW.  There&#39;s a splashscreen instantiation via VIEW, then a settings instantiation via VIEW, then an instance of GameScr with:

    view/options GameScr [
        actors: context [on-key: func [face event][CheckKeyboard face event/key]]
    ]

So I&#39;m not clear on what the /OPTIONS is for, that can&#39;t be specified in the layout itself.  The [Rebol2 documentation for VIEW says](https://www.rebol.com/docs/words/wview.html):

&gt; Additionally, calls to view can specify options, such as whether the window has borders and is resizable. Single options are provided as a word and multiple options are specified in a block.
&gt;
&gt;     out: layout [vh1 &quot;This is a window.&quot;]
&gt;     view/options out [resize no-title]

As per usual, I&#39;m baffled...what goes in the layout and what doesn&#39;t?  Why isn&#39;t Cave-In able to just **`view GameScr`** with the keyboard handler mentioned alongside the rate timer in the definitoin of GameScr?

In any case, the code that runs at the RATE calls [a function `CheckStatus`](https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/makegame.red#L15) that does some work, and returns a truthy value if the game is over or a falsey value to keep on going.

CheckStatus adds the effect of gravity to objects, but that particular global timed function doesn&#39;t do things like make the bad guys move around.  It seems individual objects have timers associated with them, e.g. when an &quot;Agent&quot; is being instantiated from a Level [it makes a FACE! which has its own RATE set](https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/loadlevel.red#L139), leading to callbacks of its own ON-TIME function:

    &quot;A&quot; [  ; &quot;(A)gent&quot;
        set (w) make face! [
            type: &#39;base
            size: ItemObj/size
            offset: ItemObj/offset
            image: copy ItemObj/image
            extra: ItemObj
            rate: ItemObj/rate
            actors: context [
                on-time: func [f e][AgentMotion f]
            ]
            ItemObj/lives: 64
        ]
        append cave/pane (get w)
    ]

So then `AgentMotion` does the updating.

## Okay, I Understand This One

I can see a little bit of the appeal for why someone would have fun hacking on it this way.  Red is giving you some game-engine type autonomy to all the objects, with each face its own timer.  You get some very simple things like an [**`overlap?`** utility function](https://github.com/red/red/blob/dbc93da47047667023a66c5edf1aa1d63ff6f0d0/modules/view/utils.red#L44) to see if two faces overlap (though it just checks bounding boxes, not collision detection on non-transparent portions).

Now that I&#39;m learning a bit of the terminology, this isn&#39;t really using &quot;VID&quot; the dialect hardly at all.  The only VID code is in [%cave.red](https://github.com/planetsizecpu/Cave-In/blob/master/src/cave.red) and it does nearly nothing.

But it&#39;s using &quot;View&quot;, which is kind of like a browser layout engine.  VID is a shorthand for building View code--it&#39;s maybe a little like HTML for declaratively specifying the starting point of the DOM...that then gets dynamically juggled all around as objects after that.

Cave-In basically is like one of those pages where if you &quot;View Source&quot; the .HTML is nearly empty, and everything is created dynamically with code.  But that code does not leverage small VID fragments, the way some dynamic JavaScript might use HTML snippets to build DOM code.  (Could it?)

I&#39;ll add that I notice nowhere in the source for Cave-In is the **`on-change*`** method used, so this isn&#39;t using the [&quot;reactive programming&quot; features added by Red](https://www.red-lang.org/2016/06/061-reactive-programming.html), FWIW.

Tune in next week (month?) when I set aside some time to look at another Rebol GUI thing.</description>
    
    <lastBuildDate>Thu, 08 May 2025 09:48:37 +0000</lastBuildDate>
    <category>GUI</category>
    <atom:link href="https://rebol.metaeducation.com/t/cave-in-gui-game-in-red/2209.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cave-In: GUI Game In Red</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were merged into an existing topic: <a href="https://rebol.metaeducation.com/t/rebols-target-market-newbies-experts-or-other/581/5">Rebol's Target Market: Newbies, Experts, or Other?</a></p>
          <p><a href="https://rebol.metaeducation.com/t/cave-in-gui-game-in-red/2209/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/cave-in-gui-game-in-red/2209/2</link>
        <pubDate>Thu, 08 May 2025 09:49:58 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2209-2</guid>
        <source url="https://rebol.metaeducation.com/t/cave-in-gui-game-in-red/2209.rss">Cave-In: GUI Game In Red</source>
      </item>
      <item>
        <title>Cave-In: GUI Game In Red</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Because I've idly started to think about what a Ren-C GUI dialect would look like (leveraging the web browser layout engine, of course), I've decided to reluctantly learn about Rebol's historical GUIs.  VID code has traditionally been an eyesore for me, but in the coming months I'll try to dedicate a little time to look at examples--both old and new--from all the various incarnations of the VID dialect <em>(<a href="https://www.rebol.com/docs/view-guide.html">VID</a>, <a href="https://github.com/red/docs/blob/master/en/vid.adoc">Red VID</a>, <a href="https://codeberg.org/hiiamboris/red-spaces/src/branch/master/vids.md">VID/S (Spaces)</a>, <a href="http://www.dobeash.com/rebgui.html">RebGUI</a>, <a href="http://www.rebol.org/view-script.r?script=glayout.r">GLASS</a>, and I've just found out that <a href="https://github.com/red/docs/blob/master/en/draw.adoc">DRAW is a different dialect from VID</a> so there's probably at least 12 more variants of all this stuff)</em></p>
<p>To try and have a little fun with my first one, I'll look at the game <strong>"Cave-In"</strong> by <span class="mention">@PlanetSizeCPU</span> from Red Gitter:</p>
<p><img src="https://gitter.ems.host/_matrix/media/v3/download/gitter.im/e0c12d3abca5509745b25a32a6866b3a502273791811281938799919104?allow_redirect=true" alt="Level.gif" width="637" height="500"></p>
<h2><a name="p-7366-the-code-1" class="anchor" href="https://rebol.metaeducation.com#p-7366-the-code-1"></a>The Code</h2>
<p>The code is <a href="https://github.com/planetsizecpu/Cave-In">available on GitHub</a>, and it has been committed to as recently as July.</p>
<p>Curiously, the level definitions themselves <a href="https://github.com/planetsizecpu/Cave-In/blob/master/zLevelsDesign.txt">are not in Red syntax</a>.  They're like CSV files, except they use vertical bar as a separator instead of comma, and <strong>#</strong> for to-end-of-line comments</p>
<pre><code># ItemType|ObjectName|FaceName|FaceSize|FaceOffset|Rate|...
...
CAVERN|cavern1|cave|1599x600|0x0|0:0|0x0|0:0|0|0|cavern.png
GOLDBG|gold1|gld1|8x12|340x564|0:0|0x0|0:0|0|1|gold1.png
GOLDBG|gold2|gld2|8x12|310x461|0:0|0x0|0:0|0|1|gold1.png
GOLDBG|gold3|gld3|8x12|650x51|0:0|0x0|0:0|0|1|gold1.png
GOLDBG|gold4|gld4|8x12|200x185|0:0|0x0|0:0|0|1|gold1.png
...
</code></pre>
<p>The implementation is just <a href="https://github.com/planetsizecpu/Cave-In/tree/master/src">four<code> .red</code> source files</a>, three of which are small and the main implementation lives in something called <strong><code>makegame.red</code></strong></p>
<p><a href="https://github.com/planetsizecpu/Cave-In/blob/master/src/makegame.red">https://github.com/planetsizecpu/Cave-In/blob/master/src/makegame.red</a></p>
<h2><a name="p-7366-theres-an-observable-lack-of-rebolism-2" class="anchor" href="https://rebol.metaeducation.com#p-7366-theres-an-observable-lack-of-rebolism-2"></a>There's an Observable Lack Of... <em>"Rebolism"</em></h2>
<p>I don't want to be too critical of someone's early efforts in programming.  This actually reminds me a lot of when I was a kid and got Turbo Pascal for a 286 PC, and tried to write a variation of <a href="http://blog.hostilefork.com/media/machine-language-commodore-64-128/react-compute-gazette.png">a Commodore 64 game called "React"</a>.  The example snippets I learned from were very simple and none even showed you how to break your code into different files, so I just had one long .PAS file... that grew and grew.  Instead of seeing the growing code with tons of conditionals as a problem, I was kind of excited about how big it was getting!</p>
<p>But that aside, there clearly are a lot of repetitive patterns and lack of abstraction.  To pick on <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/makegame.red#L462C1-L474C4">one short example at random</a>:</p>
<pre><code>if (first f/extra/name) = #"a" [
    foreach img GameData/AgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
if (first f/extra/name) = #"f" [
    foreach img GameData/FAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
if (first f/extra/name) = #"p" [
   foreach img GameData/PAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
if (first f/extra/name) = #"y" [
    foreach img GameData/YAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
</code></pre>
<p>But you can see that large-scale repetition of this kind is pervasive.</p>
<p>What I find perplexing is that if people aren't using Rebol's mechanisms, what do they actually <em>like</em> about the language enough that keeps them going with it?</p>
<p>Ren-C takes the refactoring and streamlining potential to new heights.  It makes it easier to put expressions all on one line with good error locality with <a href="https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880">VOID-in-NULL-out</a>.  It gives you foolproof <a href="https://rebol.metaeducation.com/t/blank-2022-revisiting-the-datatype/1942/9">truthiness of any item you can put in a block</a> (only antiform null is falsey).  GHOST lets you use <a href="https://rebol.metaeducation.com/t/making-invisible-functions-e-g-comment-elide/2034">put code midstream in any evaluative context without disturbing it</a>, for things like ASSERT and ELIDE to be anywhere you please.  <a href="https://rebol.metaeducation.com/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609">The loop result protocol is super neat</a>, and I could go on and on...</p>
<p>...but the basic idea of enabling smooth composition has been there since Rebol2, e.g. you could rewrite the above as:</p>
<pre><code>if (dead: select [
    #"a" AgentDead
    #"f" FAgentDead
    #"p" PAgentDead
    #"y" YAgentDead
] first f/extra/name) [
    foreach img GameData/(dead) [
       f/image: get img wait GameData/AgentDeadDelay
    ]
]
</code></pre>
<p>As Carl said in <a href="https://rebol.metaeducation.com/t/rebols-target-market-newbies-experts-or-other/581"><strong>Rebol: Not for everyone?</strong></a>:</p>
<blockquote>
<p><em>"I've glanced over a lot of REBOL code written by a wide variety of programmers, and quite often I'm floored. Many programmers use REBOL like they're writing in C or BASIC. I can spot it in an instant; they did not bother to learn the fundamental concepts of the REBOL language. When I see that kind of code, I wonder why they bothered to use REBOL at all. C is better written in C. You will never hear me contest that fact."</em></p>
</blockquote>
<p>...but the appeal may be "I <strong>can</strong> Use It Like BASIC!"  I dunno.</p>
<h2><a name="p-7366-timers-and-frame-rates-3" class="anchor" href="https://rebol.metaeducation.com#p-7366-timers-and-frame-rates-3"></a>Timers And Frame Rates</h2>
<p>The <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L113">definition of the main "layout" GameScr(een)</a> includes a size and position, and uses what appears to be a RATE dialect keyword:</p>
<pre><code>GameScr: layout [
    title "Cave-In"
    size 800x600
    origin 0x0
    space 0x0

    ; Info field is also used for event management!
    at 10x610 info: base 780x30 orange blue font [
        name: "Arial" size: 14 style: 'bold
    ] focus 
    rate GameData/GameRate on-time [
        info/rate: none 
        if CheckStatus [alert "END OF GAME" quit] 
        info/rate: GameData/GameRate
    ]
]
</code></pre>
<p>RATE is defined <a href="https://www.rebol.com/docs/view-guide.html">in the VID dialect</a> as:</p>
<blockquote>
<p><strong>rate</strong> - An INTEGER or TIME that specifies the rate of time events for a face. This is used for animation or repetitive events (such as holding the mouse down on certain types of user interface styles). An INTEGER indicates the number of events per second. A TIME provides the period between events.</p>
</blockquote>
<p>Cave-In apparently uses the time-based parameter, <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L29C2-L34C3">which it initializes and then overwites</a>.</p>
<pre><code>GameRate: 0:00:00.003
either system/platform = 'Windows [
    ; Win cant handle 3ms rate so it goes as fast as possible
    GameRate: 0:00:00.006
][
    ; For other OSs as GTK we must test this value as they handle right
    GameRate: 0:00:00.065
]
</code></pre>
<p>So I take it that <strong><code>rate &lt;time or integer&gt; on-time [...]</code></strong> means that you want callbacks to run the code in the block at the given rate.  I'm not clear on why you would say ON-TIME there vs. just put the block there.</p>
<p>Searching <a href="http://rebol.org">rebol.org</a> for other VID examples using rate, I found <a href="http://www.rebol.org/view-script.r?script=tweener.r"><code>tweener.r</code></a> that does:</p>
<pre><code> rate 1 feel [
     engage: func [face action event] [...]
 ]
</code></pre>
<p>I don't know if ON-TIME is Red-specific or what, or what other things you can put there, or what this means.</p>
<p>There is actually code here for <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L174">adjusting the timings for different CPUs</a>.  That seems to undercut Red's value proposition if that's necessary...isn't this supposed to be speaking about a concrete amount of time that works on all platforms?</p>
<h2><a name="p-7366-main-game-4" class="anchor" href="https://rebol.metaeducation.com#p-7366-main-game-4"></a>Main Game</h2>
<p>Anyway, the spawning of a modal graphic window instance is done with VIEW.  There's a splashscreen instantiation via VIEW, then a settings instantiation via VIEW, then an instance of GameScr with:</p>
<pre><code>view/options GameScr [
    actors: context [on-key: func [face event][CheckKeyboard face event/key]]
]
</code></pre>
<p>So I'm not clear on what the /OPTIONS is for, that can't be specified in the layout itself.  The <a href="https://www.rebol.com/docs/words/wview.html">Rebol2 documentation for VIEW says</a>:</p>
<blockquote>
<p>Additionally, calls to view can specify options, such as whether the window has borders and is resizable. Single options are provided as a word and multiple options are specified in a block.</p>
<pre><code>out: layout [vh1 "This is a window."]
view/options out [resize no-title]
</code></pre>
</blockquote>
<p>As per usual, I'm baffled...what goes in the layout and what doesn't?  Why isn't Cave-In able to just <strong><code>view GameScr</code></strong> with the keyboard handler mentioned alongside the rate timer in the definitoin of GameScr?</p>
<p>In any case, the code that runs at the RATE calls <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/makegame.red#L15">a function <code>CheckStatus</code></a> that does some work, and returns a truthy value if the game is over or a falsey value to keep on going.</p>
<p>CheckStatus adds the effect of gravity to objects, but that particular global timed function doesn't do things like make the bad guys move around.  It seems individual objects have timers associated with them, e.g. when an "Agent" is being instantiated from a Level <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/loadlevel.red#L139">it makes a FACE! which has its own RATE set</a>, leading to callbacks of its own ON-TIME function:</p>
<pre><code>"A" [  ; "(A)gent"
    set (w) make face! [
        type: 'base
        size: ItemObj/size
        offset: ItemObj/offset
        image: copy ItemObj/image
        extra: ItemObj
        rate: ItemObj/rate
        actors: context [
            on-time: func [f e][AgentMotion f]
        ]
        ItemObj/lives: 64
    ]
    append cave/pane (get w)
]
</code></pre>
<p>So then <code>AgentMotion</code> does the updating.</p>
<h2><a name="p-7366-okay-i-understand-this-one-5" class="anchor" href="https://rebol.metaeducation.com#p-7366-okay-i-understand-this-one-5"></a>Okay, I Understand This One</h2>
<p>I can see a little bit of the appeal for why someone would have fun hacking on it this way.  Red is giving you some game-engine type autonomy to all the objects, with each face its own timer.  You get some very simple things like an <a href="https://github.com/red/red/blob/dbc93da47047667023a66c5edf1aa1d63ff6f0d0/modules/view/utils.red#L44"><strong><code>overlap?</code></strong> utility function</a> to see if two faces overlap (though it just checks bounding boxes, not collision detection on non-transparent portions).</p>
<p>Now that I'm learning a bit of the terminology, this isn't really using "VID" the dialect hardly at all.  The only VID code is in <a href="https://github.com/planetsizecpu/Cave-In/blob/master/src/cave.red">%cave.red</a> and it does nearly nothing.</p>
<p>But it's using "View", which is kind of like a browser layout engine.  VID is a shorthand for building View code--it's maybe a little like HTML for declaratively specifying the starting point of the DOM...that then gets dynamically juggled all around as objects after that.</p>
<p>Cave-In basically is like one of those pages where if you "View Source" the .HTML is nearly empty, and everything is created dynamically with code.  But that code does not leverage small VID fragments, the way some dynamic JavaScript might use HTML snippets to build DOM code.  (Could it?)</p>
<p>I'll add that I notice nowhere in the source for Cave-In is the <strong><code>on-change*</code></strong> method used, so this isn't using the <a href="https://www.red-lang.org/2016/06/061-reactive-programming.html">"reactive programming" features added by Red</a>, FWIW.</p>
<p>Tune in next week (month?) when I set aside some time to look at another Rebol GUI thing.</p>
          <p><a href="https://rebol.metaeducation.com/t/cave-in-gui-game-in-red/2209/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/cave-in-gui-game-in-red/2209/1</link>
        <pubDate>Fri, 23 Aug 2024 23:08:26 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2209-1</guid>
        <source url="https://rebol.metaeducation.com/t/cave-in-gui-game-in-red/2209.rss">Cave-In: GUI Game In Red</source>
      </item>
  </channel>
</rss>
