<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Old Idea from DocKimbel For Rebol2 =&gt; Rebol3/Red</title>
    <link>https://rebol.metaeducation.com/t/old-idea-from-dockimbel-for-rebol2-rebol3-red/1814</link>
    <description>This is something I just ran across from a long time ago, which I thought would be interesting to look at with modern eyes.

It&#39;s a Gist: [https://gist.github.com/dockimbel/5083375](https://gist.github.com/dockimbel/5083375) of a proposal of actually making a DO variant that would rewrite the source of a script.

He is quoted as having said: *&quot;A JIT-migration tool would be more accurate. It would run just after LOAD and before DO to rewrite part of the R2 sources in a R3 compatible format.&quot;*

Static analysis of Turing-Complete programs is notoriously on the difficult-if-not-impossible scale, even for simple languages.  So JIT-rewriting even something like PARSE rules is only going to be feasible if those rules were not built by code.

His example just looks for one source pattern (negative literal indexing, so like translating between **`data/0`** and **`data/-1`**).  But determining what is &quot;code&quot; and what is &quot;data&quot; is deliberately more complex in Rebol than other language.

In Ren-C we have code like `enbin [BE +/- 32]` and that path is never meant to execute, it&#39;s just there to convey the notion of wanting to encode a signed number.  Going around and randomly turning all paths with 0 in them to be -1 misses the whole point of &quot;relative expressions&quot;; you don&#39;t know what they&#39;re relative to.

So the ironic point of preserving this is just to say &quot;nothing to see, here&quot;.  :-)  `%redbol.reb` is a saner track.  But I do think it&#39;s going to wind up requiring DO itself being different... a DO2 (like UPARSE2).  It won&#39;t rewriting the code block given, but hook the evaluator with different rules.

    REBOL [
        Author:  &quot;Nenad Rakocevic&quot;
        Date:      04/03/2013
        Purpose: {
            Show how to achieve R2 source rewriting suitable for evaluation
            using R3 interpreter.
        }
            Note: &quot;Use it from %Red/ folder&quot;
    ]

    context [
        do*: s: none
        
        path-rewrite: [
            some [
                s: integer! (if negative? s/1 [s/1: s/1 + 1])
                ;| handle other indexed-access cases here
                | skip
            ]
        ]

        patched-do: func [value /arg /local saved rule mark path file][
            unless file? :value [return do* value]

            saved: system/script/path
            set [path file] split-path :value
            change-dir path
            value: load file

            parse value rule: [
                any [
                    mark: [path! | set-path! | lit-path!] :mark into path-rewrite
                    ;; | mark: string! :mark into string-rewrite 
                    ;; add more rewritting rules here
                    | mark: any-block! :mark into rule
                    | skip
                ]
            ]
            also 
                do* value
                system/script/path: saved
        ]
        
        set &#39;do-r2 func [blk [block!]][
            do*: :do
            set &#39;do :patched-do
            do blk
            set &#39;do :do*
        ]
    ]

    do-r2 [
        do %red/compiler.r
    ]
    save %red.new red  ;-- inspect the file to see the changes
    halt</description>
    
    <lastBuildDate>Sat, 14 May 2022 04:12:29 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://rebol.metaeducation.com/t/old-idea-from-dockimbel-for-rebol2-rebol3-red/1814.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Old Idea from DocKimbel For Rebol2 =&gt; Rebol3/Red</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This is something I just ran across from a long time ago, which I thought would be interesting to look at with modern eyes.</p>
<p>It's a Gist: <a href="https://gist.github.com/dockimbel/5083375">https://gist.github.com/dockimbel/5083375</a> of a proposal of actually making a DO variant that would rewrite the source of a script.</p>
<p>He is quoted as having said: <em>"A JIT-migration tool would be more accurate. It would run just after LOAD and before DO to rewrite part of the R2 sources in a R3 compatible format."</em></p>
<p>Static analysis of Turing-Complete programs is notoriously on the difficult-if-not-impossible scale, even for simple languages.  So JIT-rewriting even something like PARSE rules is only going to be feasible if those rules were not built by code.</p>
<p>His example just looks for one source pattern (negative literal indexing, so like translating between <strong><code>data/0</code></strong> and <strong><code>data/-1</code></strong>).  But determining what is "code" and what is "data" is deliberately more complex in Rebol than other language.</p>
<p>In Ren-C we have code like <code>enbin [BE +/- 32]</code> and that path is never meant to execute, it's just there to convey the notion of wanting to encode a signed number.  Going around and randomly turning all paths with 0 in them to be -1 misses the whole point of "relative expressions"; you don't know what they're relative to.</p>
<p>So the ironic point of preserving this is just to say "nothing to see, here".  <img src="https://rebol.metaeducation.com/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20">  <code>%redbol.reb</code> is a saner track.  But I do think it's going to wind up requiring DO itself being different... a DO2 (like UPARSE2).  It won't rewriting the code block given, but hook the evaluator with different rules.</p>
<pre><code>REBOL [
    Author:  "Nenad Rakocevic"
    Date:      04/03/2013
    Purpose: {
        Show how to achieve R2 source rewriting suitable for evaluation
        using R3 interpreter.
    }
        Note: "Use it from %Red/ folder"
]

context [
    do*: s: none
    
    path-rewrite: [
        some [
            s: integer! (if negative? s/1 [s/1: s/1 + 1])
            ;| handle other indexed-access cases here
            | skip
        ]
    ]

    patched-do: func [value /arg /local saved rule mark path file][
        unless file? :value [return do* value]

        saved: system/script/path
        set [path file] split-path :value
        change-dir path
        value: load file

        parse value rule: [
            any [
                mark: [path! | set-path! | lit-path!] :mark into path-rewrite
                ;; | mark: string! :mark into string-rewrite 
                ;; add more rewritting rules here
                | mark: any-block! :mark into rule
                | skip
            ]
        ]
        also 
            do* value
            system/script/path: saved
    ]
    
    set 'do-r2 func [blk [block!]][
        do*: :do
        set 'do :patched-do
        do blk
        set 'do :do*
    ]
]

do-r2 [
    do %red/compiler.r
]
save %red.new red  ;-- inspect the file to see the changes
halt
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/old-idea-from-dockimbel-for-rebol2-rebol3-red/1814/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/old-idea-from-dockimbel-for-rebol2-rebol3-red/1814/1</link>
        <pubDate>Sat, 14 May 2022 04:12:29 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1814-1</guid>
        <source url="https://rebol.metaeducation.com/t/old-idea-from-dockimbel-for-rebol2-rebol3-red/1814.rss">Old Idea from DocKimbel For Rebol2 =&gt; Rebol3/Red</source>
      </item>
  </channel>
</rss>
