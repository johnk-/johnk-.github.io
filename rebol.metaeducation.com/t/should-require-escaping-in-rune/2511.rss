<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should `[: . /]` Require Escaping In RUNE! ?</title>
    <link>https://rebol.metaeducation.com/t/should-require-escaping-in-rune/2511</link>
    <description>Should it be:

    &gt;&gt; second &quot;a.b&quot;
    == #.

Or should it be:

    &gt;&gt; second &quot;a.b&quot;
    == #&quot;.&quot;

The ramifications here are that if these delimiters are RUNE! contents without escaping, then you can&#39;t put RUNE! inside of [CHAIN! PATH! TUPLE!]

    &gt;&gt; type of #a/b
    == \~{rune!}~\  ; antiform  (e.g. not a PATH!)

## You Can Put the SPACE RUNE! In Sequences Today

I haven&#39;t questioned it lately, but the [SPACE character (now denoted by an underscore)](https://rebol.metaeducation.com/t/reified-unreassignable-nothingness-space-runes/2457) is what&#39;s used to indicate there&#39;s nothing in a PATH!/TUPLE!/CHAIN! slot:

    &gt;&gt; second first [:a]
    == a

    &gt;&gt; first first [:a]
    == _

That doesn&#39;t mean that all RUNE! have to be legal.  It could be the only one that is.

## Single-Hash Is The Biggest Loss

When I think about how one might use RUNE! in tuples or paths or chains, the patterns I think are most likely to be interesting for dialects would be those that just put hash marks in spots.  An example of the kinds of patterns:

    a:#:c

    #:#:#

    #:b:#

If you look at the problem with those glasses, you might question the value of:

    &gt;&gt; to text! #:#:#
    == &quot;:#:#&quot;

But how you see such things depends on what examples you&#39;re comparing it to.

Note that if you just want the characters, `[: / .]` are WORD!

    &gt;&gt; parse &quot;./:&quot; [&#39;. &#39;/ &#39;:]
    == :

So you already have a 2-character means of matching them in strings, for that purpose...that looks cleaner than:

    &gt;&gt; parse &quot;./:&quot; [#. #/ #:]
    == #:

## The Legality of SPACE Twists My Arm A Bit

I did say that just because space runes are legal doesn&#39;t mean all runes need to be legal.  But it does make me more inclined to say they are.

My leaning here is to say you have to escape them.  I think the hash character in tuple!/path!/chain! has more potential for enabling novel features than worrying over slightly briefer character notations.</description>
    
    <lastBuildDate>Fri, 18 Jul 2025 05:42:54 +0000</lastBuildDate>
    <category>Lexer</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-require-escaping-in-rune/2511.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should `[: . /]` Require Escaping In RUNE! ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Should it be:</p>
<pre><code>&gt;&gt; second "a.b"
== #.
</code></pre>
<p>Or should it be:</p>
<pre><code>&gt;&gt; second "a.b"
== #"."
</code></pre>
<p>The ramifications here are that if these delimiters are RUNE! contents without escaping, then you can't put RUNE! inside of [CHAIN! PATH! TUPLE!]</p>
<pre><code>&gt;&gt; type of #a/b
== \~{rune!}~\  ; antiform  (e.g. not a PATH!)
</code></pre>
<h2><a name="p-8536-you-can-put-the-space-rune-in-sequences-today-1" class="anchor" href="https://rebol.metaeducation.com#p-8536-you-can-put-the-space-rune-in-sequences-today-1"></a>You Can Put the SPACE RUNE! In Sequences Today</h2>
<p>I haven't questioned it lately, but the <a href="https://rebol.metaeducation.com/t/reified-unreassignable-nothingness-space-runes/2457">SPACE character (now denoted by an underscore)</a> is what's used to indicate there's nothing in a PATH!/TUPLE!/CHAIN! slot:</p>
<pre><code>&gt;&gt; second first [:a]
== a

&gt;&gt; first first [:a]
== _
</code></pre>
<p>That doesn't mean that all RUNE! have to be legal.  It could be the only one that is.</p>
<h2><a name="p-8536-single-hash-is-the-biggest-loss-2" class="anchor" href="https://rebol.metaeducation.com#p-8536-single-hash-is-the-biggest-loss-2"></a>Single-Hash Is The Biggest Loss</h2>
<p>When I think about how one might use RUNE! in tuples or paths or chains, the patterns I think are most likely to be interesting for dialects would be those that just put hash marks in spots.  An example of the kinds of patterns:</p>
<pre><code>a:#:c

#:#:#

#:b:#
</code></pre>
<p>If you look at the problem with those glasses, you might question the value of:</p>
<pre><code>&gt;&gt; to text! #:#:#
== ":#:#"
</code></pre>
<p>But how you see such things depends on what examples you're comparing it to.</p>
<p>Note that if you just want the characters, <code>[: / .]</code> are WORD!</p>
<pre><code>&gt;&gt; parse "./:" ['. '/ ':]
== :
</code></pre>
<p>So you already have a 2-character means of matching them in strings, for that purpose...that looks cleaner than:</p>
<pre><code>&gt;&gt; parse "./:" [#. #/ #:]
== #:
</code></pre>
<h2><a name="p-8536-the-legality-of-space-twists-my-arm-a-bit-3" class="anchor" href="https://rebol.metaeducation.com#p-8536-the-legality-of-space-twists-my-arm-a-bit-3"></a>The Legality of SPACE Twists My Arm A Bit</h2>
<p>I did say that just because space runes are legal doesn't mean all runes need to be legal.  But it does make me more inclined to say they are.</p>
<p>My leaning here is to say you have to escape them.  I think the hash character in tuple!/path!/chain! has more potential for enabling novel features than worrying over slightly briefer character notations.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-require-escaping-in-rune/2511/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-require-escaping-in-rune/2511/1</link>
        <pubDate>Fri, 18 Jul 2025 05:42:54 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2511-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-require-escaping-in-rune/2511.rss">Should `[: . /]` Require Escaping In RUNE! ?</source>
      </item>
  </channel>
</rss>
