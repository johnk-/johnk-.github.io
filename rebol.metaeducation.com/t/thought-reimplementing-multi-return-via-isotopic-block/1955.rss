<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Thought: Reimplementing Multi-Return via Isotopic BLOCK!</title>
    <link>https://forum.rebol.info/t/thought-reimplementing-multi-return-via-isotopic-block/1955</link>
    <description>With [splices confined to isotopic GROUP!s](https://forum.rebol.info/t/canonizing-group-as-the-underlying-array-type-for-splices/1953), it occurs to me that isotopic BLOCK! could be an angle to solving multi-returns.

The problem of not being able to return NULL or VOID would be solved by having the protocol speak in meta values:

    &gt;&gt; ^ transcode/one {abc def}
    == ~[&#39;abc &#39;{ def}]~  ; isotope

    &gt;&gt; ^ transcode/one {}
     == ~null~  ; isotope

It would sacrifice the sensitivity to asking how many return values were requested... a feature I felt pretty attached to.  But it would offer a solution to the piping problems that plague things like even simply putting a multi-return expression into a group.

It would mean that doing a ^META casually inline in expressions would be crazier, you&#39;d tend to want to unpack things:

    &gt;&gt; x: multi-return-func
    == &lt;result&gt;

    &gt;&gt; x: ^ multi-return-func
    == ~[&#39;&lt;result&gt; ~null~ &#39;*]~  ; wait a minute what is all this crap?

    &gt;&gt; [^x]: multi-return-func
    == &#39;&lt;result&gt;

**Because I just had the idea, I don&#39;t know all the ramifications.**  But it&#39;s clear this would solve the issues with APPLY and other piping scenarios.

Evaluator behavior would be that any slots not expecting a &quot;pack&quot; isotope would just become its first item UNMETA, but then a ^META slot can do other things.

This would mean it would be your choice to use the output variable proxying feature to get multi-return mechanics.  It would be a convenience feature of FUNC for those who wanted it, in order to give better documentation on the interface and to make it clearer in the code what you were assigning.

## It Wouldn&#39;t *Prevent* Enfix Detection...

And it wouldn&#39;t rule out people who wanted to do cleverness detecting things on the left.  They could use mechanisms parallel to what exists today.  But that would defeat putting function calls in groups, etc.  Which may be the right tradeoff for some scenarios.</description>
    
    <lastBuildDate>Wed, 26 Jul 2023 21:33:13 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/thought-reimplementing-multi-return-via-isotopic-block/1955.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Thought: Reimplementing Multi-Return via Isotopic BLOCK!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With <a href="https://forum.rebol.info/t/canonizing-group-as-the-underlying-array-type-for-splices/1953">splices confined to isotopic GROUP!s</a>, it occurs to me that isotopic BLOCK! could be an angle to solving multi-returns.</p>
<p>The problem of not being able to return NULL or VOID would be solved by having the protocol speak in meta values:</p>
<pre><code>&gt;&gt; ^ transcode/one {abc def}
== ~['abc '{ def}]~  ; isotope

&gt;&gt; ^ transcode/one {}
 == ~null~  ; isotope
</code></pre>
<p>It would sacrifice the sensitivity to asking how many return values were requested... a feature I felt pretty attached to.  But it would offer a solution to the piping problems that plague things like even simply putting a multi-return expression into a group.</p>
<p>It would mean that doing a ^META casually inline in expressions would be crazier, you'd tend to want to unpack things:</p>
<pre><code>&gt;&gt; x: multi-return-func
== &lt;result&gt;

&gt;&gt; x: ^ multi-return-func
== ~['&lt;result&gt; ~null~ '*]~  ; wait a minute what is all this crap?

&gt;&gt; [^x]: multi-return-func
== '&lt;result&gt;
</code></pre>
<p><strong>Because I just had the idea, I don't know all the ramifications.</strong>  But it's clear this would solve the issues with APPLY and other piping scenarios.</p>
<p>Evaluator behavior would be that any slots not expecting a "pack" isotope would just become its first item UNMETA, but then a ^META slot can do other things.</p>
<p>This would mean it would be your choice to use the output variable proxying feature to get multi-return mechanics.  It would be a convenience feature of FUNC for those who wanted it, in order to give better documentation on the interface and to make it clearer in the code what you were assigning.</p>
<h2>
<a name="it-wouldnt-prevent-enfix-detection-1" class="anchor" href="https://forum.rebol.info#it-wouldnt-prevent-enfix-detection-1"></a>It Wouldn't <em>Prevent</em> Enfix Detection...</h2>
<p>And it wouldn't rule out people who wanted to do cleverness detecting things on the left.  They could use mechanisms parallel to what exists today.  But that would defeat putting function calls in groups, etc.  Which may be the right tradeoff for some scenarios.</p>
          <p><a href="https://forum.rebol.info/t/thought-reimplementing-multi-return-via-isotopic-block/1955/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/thought-reimplementing-multi-return-via-isotopic-block/1955/1</link>
        <pubDate>Thu, 01 Sep 2022 13:19:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1955-1</guid>
        <source url="https://forum.rebol.info/t/thought-reimplementing-multi-return-via-isotopic-block/1955.rss">Thought: Reimplementing Multi-Return via Isotopic BLOCK!</source>
      </item>
  </channel>
</rss>
