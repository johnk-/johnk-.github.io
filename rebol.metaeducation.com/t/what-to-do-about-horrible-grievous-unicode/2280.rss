<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What To Do About Horrible, Grievous, Unicode</title>
    <link>https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280</link>
    <description>At some point [I picked up a test from Red](https://github.com/red/red/blob/master/tests/source/units/series-test.red#L1413C2-L1417C39), which is basically this:

    str: &quot; ^(A0) ^-a b  ^- c  ^(2000) &quot;
    assert [&quot;a b  ^- c&quot; = trim copy str]

That&#39;s some funny business.

* The hex character ^(a0) is decimal 160, which is the standard Unicode translation for `&amp;nbsp;`... non-breaking space.

* The hex character ^(2000) is &quot;EN QUAD&quot;.. [a space that is one *en* wide: half the width of an em quad.](https://en.wikipedia.org/wiki/Quad_(typography))

R3-Alpha (and Ren-C) never had support for trimming these characters out.  So the test fails.

But it wound up flying under the radar, somehow.

*(I think I didn&#39;t actually pick up the file it was in to the tests until some time after adding it.  And by the time I added it, a lot of things were breaking due to binding and I was putting off fixing everything until it was time.  Now it&#39;s that time--I&#39;m going item by item reviewing breakages and getting the tests in order.)*

But when I got to this one, the log just said:

    (   
        str: &quot;   ^-a b  ^- c    &quot;
        &quot;a b  ^- c&quot; = trim copy str
    ) &quot;failed, test returned null&quot;

Because I didn&#39;t go look up the test (I thought I had it right there)...I didn&#39;t realize there was funny business because the display doesn&#39;t give you any indication.  Neither does Red&#39;s after the transcode:

    red&gt;&gt; &quot; ^(A0) ^-a b  ^- c  ^(2000) &quot;
    == &quot;   ^-a b  ^- c    &quot;

Even pasting it into VS Code (which I didn&#39;t, until just now) gives you *terribly weak* feedback that something weird is going on:

![image|393x59](upload://A3Bv5No7U3eVyTqLu28KCsYccXl.png)

Gee.  Glad I had &quot;show invisibles&quot; turned on--that *really* did a lot for me there.  :roll_eyes: 

*(Seriously, what is the point of that feature if that&#39;s what it&#39;s going to do?)*

## I Don&#39;t Want This Stuff In Source Files

We can&#39;t fix the world.  They&#39;re doing what they are doing.  This stuff is the currency of text and you have to support it.

But we can set house rules.  The default mode for Ren-C should only allow two invisible characters in source: space and newline.  (And I&#39;d like there to not be space at the end of lines.)  This would be a hard rule for any script in official repositories.

I&#39;d have saved myself an hour of confused digging if there&#39;d been an error when I pasted in the console, telling me I was dealing with a messed-up situation.  There&#39;d have to be some conscious shift into a mode to tolerate it... temporarily as some kind of way to import a string into the system.

## Not Ready To Support This Test

There&#39;s a [sparse bitset implementation](https://rebol.metaeducation.com/t/roaring-bitset-s/1327) that has been on the shelf, but that&#39;s needed before we create unicode charsets for high codepoints.

Anyway, there are higher priorities.  But I definitely do feel like there should be some alarms going off when you are reading files with disruptive codepoints.  You should have to say &quot;Yes, I want ugly codepoints&quot; or &quot;Yes, I want emoji&quot;.

A totally permissive TO TEXT! operator shouldn&#39;t be what people are reaching for.  You should have to be explicit.  **`(decode [@utf-8, whitespace: all, emoji: all] blob)`**.  Principle of least privilege... conservative defaults.

The names for the specializations should help guide behavior.  **`(decode @utf8-unchecked blob)`**.  (Unnatural?)

* &quot;What does that mean, unchecked (looks up documentation)&quot;
* &quot;Oh, I have an option to have it screen out weird whitespace?  Wow!  Great! &quot;

Something like **`utf8-basic`** would make conservative choices--the same ones used by default for source code.</description>
    
    <lastBuildDate>Wed, 19 Mar 2025 00:21:20 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What To Do About Horrible, Grievous, Unicode</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="bradrn" data-post="4" data-topic="2280">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2280">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Maybe I'm unusual--in that I work on an interpreter, so most "usermode" strings I work with wind up being source code at some point. If I worked on other kinds of programs that had to pass-through arbitrary freeform HTML or emoji-laden SMS messages all the time, I might have a different bias.</p>
</blockquote>
</aside>
<p>Yes, I think this is the unusual domain showing. In my kinds of programs, by contrast, I very regularly have to deal with multilingual text and â€˜unusualâ€™ (to English-speakers) Unicode characters. Iâ€™d say my situation is probably more representative of the more common use-cases.</p>
</blockquote>
</aside>
<p>At least on the <em>encoding</em> side of UTF-8, I have an answer for stopping the propagation of weird bytes if you want, that's now pretty palatable...</p>
<p>I was fretting over how TO of BINARY! doing UTF-8 encoding wasn't really fitting nicely with my idea of it, and so I preferred to go ahead with a more explicit parameterization to ENCODE:</p>
<pre><code>&gt;&gt; encode 'utf8 -{CðŸ˜ºT}-
== #{43F09F98BA54}
</code></pre>
<p>It's not that much longer than <strong>to binary!</strong>, just two characters:</p>
<pre><code>to binary!
encode 'utf8
</code></pre>
<p>But you get a lot more information.  However, if you have these personal settings, it gets a little bit messier, let's say like:</p>
<pre><code>&gt;&gt; encode [utf8 emoji: no] -{CðŸ˜ºT}-
** Error: Emoji disabled in UTF-8 Codec configuration
</code></pre>
<p>That's a lot to type so you're liable to need to invent a name for it, which puts some burden on you.  But <strong>utf8-of</strong> isn't a terrible name for you to call your specialization:</p>
<pre><code>/utf8-of: specialize encode?/ [codec: [utf8 emoji: no]]
</code></pre>
<p>This would override the default configuration, we'll assume UTF8-OF is in LIB is defined as some sane default.</p>
<p>It's still a little bit ugly due to the hyphen, BUT, pursuant to the newfound <strong><a href="https://rebol.metaeducation.com/t/squaring-the-circle-of-length-and-length-of/385/8">binding-based configurability of infix OF</a></strong>, you can call the relevant local definition for your environment with no space!  And still not lose your variable names!</p>
<pre><code>&gt;&gt; utf8: utf8 of -{CðŸ˜ºT}-
== #{43F09F98BA54}

&gt;&gt; utf8
== #{43F09F98BA54}
</code></pre>
<p>And maybe the default UTF8-OF offers some refinements to swap up the settings, that OF can migrate onto the call:</p>
<pre><code>&gt;&gt; utf8: utf8:basic of -{CðŸ˜ºT}-
** Error: Codepoints of ENCODE UTF-8 with Basic setting Must Be &lt; 65535
</code></pre>
<p>So things like UTF8:PRINTABLE could be options of the stock UTF8-OF, and you could just say in your file:</p>
<pre><code>/utf8-of: utf8-of:printable/
</code></pre>
<p>Then all your <strong>utf8 of</strong> would be protected, in the scope of that file (or if you imported your standard configuration library, in all the files that use your personal configuration... I expect everyone to have such files... the goal here is to <em>bend the language to you</em>, not to bend yourself to the language...)</p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/magic_wand.png?v=14" title=":magic_wand:" class="emoji only-emoji" alt=":magic_wand:" loading="lazy" width="20" height="20"></p>
<p>This strategy, of having strong routines like ENCODE or CHECKSUM, which can be parameterized and specialized, ultimately being able to "hook" things like OF, is looking like it's going to be able to hit the target of the kind of flow we are seeking.</p>
<p>So if you want the exact bytes, you can always use AS BINARY!, which just aliases the memory as a binary blob directly.  Anything else is making a copy, and while memcpy() would be fastest a little bit of filtering isn't going to be a problem.</p>
<h2><a name="p-8047-what-about-the-decoding-side-1" class="anchor" href="https://rebol.metaeducation.com#p-8047-what-about-the-decoding-side-1"></a>What About the Decoding Side?</h2>
<p>That... I dunno yet.</p>
<p>So there's <strong><code>decode 'utf8</code></strong> With the corresponding options like <strong><code>decode [utf8 emoji: no]</code></strong> or whatever.  More thinking is needed on how READ and LOAD and other such operations get configured.</p>
<p>But at least I think the encoding side looks good.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/5</link>
        <pubDate>Tue, 18 Mar 2025 23:27:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2280-5</guid>
        <source url="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280.rss">What To Do About Horrible, Grievous, Unicode</source>
      </item>
      <item>
        <title>What To Do About Horrible, Grievous, Unicode</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2280">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Maybe I'm unusual--in that I work on an interpreter, so most "usermode" strings I work with wind up being source code at some point. If I worked on other kinds of programs that had to pass-through arbitrary freeform HTML or emoji-laden SMS messages all the time, I might have a different bias.</p>
</blockquote>
</aside>
<p>Yes, I think this is the unusual domain showing. In my kinds of programs, by contrast, I very regularly have to deal with multilingual text and â€˜unusualâ€™ (to English-speakers) Unicode characters. Iâ€™d say my situation is probably more representative of the more common use-cases.</p>
<p>What helps me in writing these programs? Basically, a language which doesnâ€™t get in my way when I manipulate these strings, but only does exactly what I tell it to. Arguably Haskell takes this to an unusual extreme: I canâ€™t even directly read a file to a string, I need to read it to a byte array and then parse that as UTF-8. But it does make my job immensely easier â€” I can port my program to Windows. Linux and WebAssembly without having to worry that locales or OS conventions will mess everything up. Thatâ€™s a win in my book.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2280">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>And that can be a situation like you type <strong><code>string: -{</code></strong> <code>&lt;&lt;PASTE&gt;&gt;</code> <strong><code>}-</code></strong> and I don't want to get arbitrary invisibles when you do that without some warning. Perhaps you'd think that falls under the "it's okay to be restrictive there, because it's source code".</p>
</blockquote>
</aside>
<p>I lean towards allowing arbitrary Unicode in strings â€” especially ones with such distinctive delimiters. The benefits of being able to copy-paste arbitrary text outweigh the possibility of that text having an unexpected character. (Remember, this test case was <em>designed</em> to be unusualâ€¦ most text isnâ€™t like this.)</p>
<p>Instead, on reflection, I tend to see this case as a problem with <em>printing to the console</em>. When Haskell prints strings for debugging purposes, it escapes all non-ASCII characters by default:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">ghci&gt; "unicÃ¶Ã°e texÅ§"
"unic\246\240e tex\359"
</code></pre>
<p>Why canâ€™t Ren-C do the same? It would nicely solve the problem of copying from the console, while leaving the language itself unaltered.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/4</link>
        <pubDate>Mon, 16 Sep 2024 15:19:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2280-4</guid>
        <source url="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280.rss">What To Do About Horrible, Grievous, Unicode</source>
      </item>
      <item>
        <title>What To Do About Horrible, Grievous, Unicode</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2280">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>I think this is a sensible choice. Whitespace other than the usual ASCII space just causes confusion in source code.</p>
</blockquote>
</aside>
<p>Then you agree there are domains in which it makes sense to be conservative.</p>
<p>The question is: how often are usages of usermode string values based on domains where conservatism makes sense?</p>
<p>Maybe I'm unusual--in that I work on an interpreter, so most "usermode" strings I work with wind up being source code at some point.  If I worked on other kinds of programs that had to pass-through arbitrary freeform HTML or emoji-laden SMS messages all the time, I might have a different bias.</p>
<p>I have strong feelings about <a href="http://blog.hostilefork.com/freedom-to-and-freedom-from/">Freedom To vs. Freedom From</a>.  e.g. I'm the sort of person who is completely convinced that allowing spaces in filenames caused far more harm than good to the field of software.</p>
<p>Anyway, for right now my principal agenda is to stop losing hours on this <img src="https://rebol.metaeducation.com/images/emoji/twitter/poop.png?v=14" title=":poop:" class="emoji" alt=":poop:" loading="lazy" width="20" height="20"> by not letting it bite me every time it comes up.</p>
<p>I don't know what the exact tradeoffs to be made here are, or which you'd agree with.  But I give the example of pasting things into the console.  And that can be a situation like you type <strong><code>string: -{</code></strong> <code>&lt;&lt;PASTE&gt;&gt;</code> <strong><code>}-</code></strong> and I don't want to get arbitrary invisibles when you do that without some warning.  Perhaps you'd think that falls under the "it's okay to be restrictive there, because it's source code".</p>
<p>Anyway, it doesn't necessarily need to be <em>hard</em> to put the console into a mode where it allows such pastes (<strong><code>console @utf8-unchecked</code></strong>)...I just don't want it to be the default.  And I want there to be an established vocabulary for talking about these domains.</p>
<p>Once that vocabulary exists, I want people to use it.  I've mentioned that I'm tired of all the implicitness in the system, it just breaks every time a change comes along.  How the 32-bit to 64-bit change was handled in R3-Alpha and Red is a perfect example of how people love to just kick the can down the road with more bad choices after having just seen the prior methodology fail.</p>
<hr>
<blockquote>
<p><em>A COBOL programmer, tired of all the extra work and chaos caused by the impending Y2K bug, decides to have himself cryogenically frozen for a year so he can skip all of it.</em></p>
<p><em>He gets himself frozen, and eventually is woken up when several scientists open his cryo-pod.</em></p>
<p><em>"Did I sleep through Y2K? Is it the year 2000?", he asks.</em></p>
<p><em>The scientists nervously look at each other. Finally, one of them says "Actually, it's the year 9999. We hear you know COBOL."</em></p>
</blockquote>
          <p><a href="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/3</link>
        <pubDate>Mon, 16 Sep 2024 11:19:09 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2280-3</guid>
        <source url="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280.rss">What To Do About Horrible, Grievous, Unicode</source>
      </item>
      <item>
        <title>What To Do About Horrible, Grievous, Unicode</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2280">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The default mode for Ren-C should only allow two invisible characters in source: space and newline.</p>
</blockquote>
</aside>
<p>I think this is a sensible choice. Whitespace other than the usual ASCII space just causes confusion in source code.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2280">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But I definitely do feel like there should be some alarms going off when you are reading files with disruptive codepoints. You should have to say "Yes, I want ugly codepoints" or "Yes, I want emoji".</p>
</blockquote>
</aside>
<p>This, on the other hand, worries me. Both non-breaking spaces and en quads have legitimate uses in text â€” theyâ€™re hardly â€˜uglyâ€™ at all. (Thereâ€™s even more obscure ones with legitimate uses: e.g. text in French uses the narrow non-breaking space, U+202F.)</p>
<p>In general, it feels to me that youâ€™ve been trying to manage the complexities of Unicode by ignoring them. (First by trying to normalise everything, now by trying to remove annoying characters entirely.) The trouble is, Unicode is complex because the problem domain of text is complex. Speaking as someone who spends a considerable amount of time dealing with multilingual text, I can say with confidence that trying to avoid the issues does nothing but make them more complex when you inevitably stumble upon them.</p>
<p>As for this test itself: some parts of Unicode are complex, but not this. The <a href="https://www.unicode.org/Public/16.0.0/ucd/UnicodeData.txt">Unicode character database</a> lists precisely 17 characters with general category <code>Zs</code> (<code>Space_Separator</code>), plus one line separator and one paragraph separator. Thatâ€™s 19 characters in total. I see no reason why Ren-C couldnâ€™t recognise them.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/2</link>
        <pubDate>Mon, 16 Sep 2024 00:34:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2280-2</guid>
        <source url="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280.rss">What To Do About Horrible, Grievous, Unicode</source>
      </item>
      <item>
        <title>What To Do About Horrible, Grievous, Unicode</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>At some point <a href="https://github.com/red/red/blob/master/tests/source/units/series-test.red#L1413C2-L1417C39">I picked up a test from Red</a>, which is basically this:</p>
<pre><code>str: " ^(A0) ^-a b  ^- c  ^(2000) "
assert ["a b  ^- c" = trim copy str]
</code></pre>
<p>That's some funny business.</p>
<ul>
<li>
<p>The hex character ^(a0) is decimal 160, which is the standard Unicode translation for <code>&amp;nbsp;</code>... non-breaking space.</p>
</li>
<li>
<p>The hex character ^(2000) is "EN QUAD".. <a href="https://en.wikipedia.org/wiki/Quad_(typography)">a space that is one <em>en</em> wide: half the width of an em quad.</a></p>
</li>
</ul>
<p>R3-Alpha (and Ren-C) never had support for trimming these characters out.  So the test fails.</p>
<p>But it wound up flying under the radar, somehow.</p>
<p><em>(I think I didn't actually pick up the file it was in to the tests until some time after adding it.  And by the time I added it, a lot of things were breaking due to binding and I was putting off fixing everything until it was time.  Now it's that time--I'm going item by item reviewing breakages and getting the tests in order.)</em></p>
<p>But when I got to this one, the log just said:</p>
<pre><code>(   
    str: "   ^-a b  ^- c    "
    "a b  ^- c" = trim copy str
) "failed, test returned null"
</code></pre>
<p>Because I didn't go look up the test (I thought I had it right there)...I didn't realize there was funny business because the display doesn't give you any indication.  Neither does Red's after the transcode:</p>
<pre><code>red&gt;&gt; " ^(A0) ^-a b  ^- c  ^(2000) "
== "   ^-a b  ^- c    "
</code></pre>
<p>Even pasting it into VS Code (which I didn't, until just now) gives you <em>terribly weak</em> feedback that something weird is going on:</p>
<p><img src="https://rebol.metaeducation.com/uploads/default/original/1X/fcb694d9fa08aa3be6b625b1529de82cf9e2ecef.png" alt="image" data-base62-sha1="A3Bv5No7U3eVyTqLu28KCsYccXl" width="393" height="59"></p>
<p>Gee.  Glad I had "show invisibles" turned on--that <em>really</em> did a lot for me there.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/roll_eyes.png?v=14" title=":roll_eyes:" class="emoji" alt=":roll_eyes:" loading="lazy" width="20" height="20"></p>
<p><em>(Seriously, what is the point of that feature if that's what it's going to do?)</em></p>
<h2><a name="p-7679-i-dont-want-this-stuff-in-source-files-1" class="anchor" href="https://rebol.metaeducation.com#p-7679-i-dont-want-this-stuff-in-source-files-1"></a>I Don't Want This Stuff In Source Files</h2>
<p>We can't fix the world.  They're doing what they are doing.  This stuff is the currency of text and you have to support it.</p>
<p>But we can set house rules.  The default mode for Ren-C should only allow two invisible characters in source: space and newline.  (And I'd like there to not be space at the end of lines.)  This would be a hard rule for any script in official repositories.</p>
<p>I'd have saved myself an hour of confused digging if there'd been an error when I pasted in the console, telling me I was dealing with a messed-up situation.  There'd have to be some conscious shift into a mode to tolerate it... temporarily as some kind of way to import a string into the system.</p>
<h2><a name="p-7679-not-ready-to-support-this-test-2" class="anchor" href="https://rebol.metaeducation.com#p-7679-not-ready-to-support-this-test-2"></a>Not Ready To Support This Test</h2>
<p>There's a <a href="https://rebol.metaeducation.com/t/roaring-bitset-s/1327">sparse bitset implementation</a> that has been on the shelf, but that's needed before we create unicode charsets for high codepoints.</p>
<p>Anyway, there are higher priorities.  But I definitely do feel like there should be some alarms going off when you are reading files with disruptive codepoints.  You should have to say "Yes, I want ugly codepoints" or "Yes, I want emoji".</p>
<p>A totally permissive TO TEXT! operator shouldn't be what people are reaching for.  You should have to be explicit.  <strong><code>(decode [@utf-8, whitespace: all, emoji: all] blob)</code></strong>.  Principle of least privilege... conservative defaults.</p>
<p>The names for the specializations should help guide behavior.  <strong><code>(decode @utf8-unchecked blob)</code></strong>.  (Unnatural?)</p>
<ul>
<li>"What does that mean, unchecked (looks up documentation)"</li>
<li>"Oh, I have an option to have it screen out weird whitespace?  Wow!  Great! "</li>
</ul>
<p>Something like <strong><code>utf8-basic</code></strong> would make conservative choices--the same ones used by default for source code.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280/1</link>
        <pubDate>Sun, 15 Sep 2024 13:38:04 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2280-1</guid>
        <source url="https://rebol.metaeducation.com/t/what-to-do-about-horrible-grievous-unicode/2280.rss">What To Do About Horrible, Grievous, Unicode</source>
      </item>
  </channel>
</rss>
