<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>FENCE! In PARSE: What Should It Do?</title>
    <link>https://rebol.metaeducation.com/t/fence-in-parse-what-should-it-do/2312</link>
    <description>FENCE! is coming soon.  How soon?  ...soon.

When it gets here I&#39;m going to want to kick the tires a bit with purposes in dialects.  And so of course a big question is: **What will FENCE! do in PARSE?**  *(By default, I mean...you can override it with whatever FENCE! combinator you want.)*

It *might* seem an obvious use for it would be to make objects, e.g. act as GATHER:

So instead of:

    &gt;&gt; parse &quot;aaabbb&quot; [
          gather [
              emit x: collect some [&quot;a&quot;, keep (&lt;a&gt;)]
              emit y: collect some [&quot;b&quot;, keep (&lt;b&gt;)]
          ]
      ]
    == make object! [
        x: [&lt;a&gt; &lt;a&gt; &lt;a&gt;]
        y: [&lt;b&gt; &lt;b&gt; &lt;b&gt;]
    ]

You might imagine writing:

    &gt;&gt; parse &quot;aaabbb&quot; [
          {
              x: collect some [&quot;a&quot;, keep (&lt;a&gt;)]
              y: collect some [&quot;b&quot;, keep (&lt;b&gt;)]
          }
      ]
    == make object! [
        x: [&lt;a&gt; &lt;a&gt; &lt;a&gt;]
        y: [&lt;b&gt; &lt;b&gt; &lt;b&gt;]
    ]

**But I don&#39;t know if that&#39;s obviously a great application.**

We shouldn&#39;t be thinking inside-the-box that just because FENCE! is used for making objects sometimes, that&#39;s the most pressing need for them in dialects.  I actually think GATHER does a good enough job at what it does...and I think the above example reads more clearly with it.

But I&#39;ve pointed to other rather weak areas, **[like how we don&#39;t have implicit capture](https://rebol.metaeducation.com/t/implicit-capture-in-parse-how-to-get-it/1718)**.

    parse isodate [
        year: between &lt;here&gt; &quot;-&quot;
        month: between &lt;here&gt; &quot;-&quot;
        day: between &lt;here&gt; &quot;T&quot;
        ...
    ]

I&#39;m not saying this is what we should use fences for, but just to kick-off that &quot;outside-the-box&quot; brainstorm:

    parse isodate [{year} &quot;-&quot; {month} &quot;-&quot; {day} &quot;T&quot; ...]

If my only choices were between that and an alternate for GATHER+EMIT, I&#39;d pick that, because I think we&#39;d get a lot more mileage out of it.

Remember also that there are lots of variations, like **`${...}`** and **`:{...}`** and whatever combinations in paths in chains and tuples you can think of.  Ideally how it&#39;s used makes some sense across these variants.  But we should remember that dialecting is about serving the domain, not making sacrifices to some god-of-consistency.

**Anyway...it&#39;s going to take time to build up a sense of what being &quot;fency&quot; means.**

But if any pet applications start coming to mind, pitch them.</description>
    
    <lastBuildDate>Thu, 10 Oct 2024 18:52:05 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://rebol.metaeducation.com/t/fence-in-parse-what-should-it-do/2312.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>FENCE! In PARSE: What Should It Do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>FENCE! is coming soon.  How soon?  ...soon.</p>
<p>When it gets here I'm going to want to kick the tires a bit with purposes in dialects.  And so of course a big question is: <strong>What will FENCE! do in PARSE?</strong>  <em>(By default, I mean...you can override it with whatever FENCE! combinator you want.)</em></p>
<p>It <em>might</em> seem an obvious use for it would be to make objects, e.g. act as GATHER:</p>
<p>So instead of:</p>
<pre><code>&gt;&gt; parse "aaabbb" [
      gather [
          emit x: collect some ["a", keep (&lt;a&gt;)]
          emit y: collect some ["b", keep (&lt;b&gt;)]
      ]
  ]
== make object! [
    x: [&lt;a&gt; &lt;a&gt; &lt;a&gt;]
    y: [&lt;b&gt; &lt;b&gt; &lt;b&gt;]
]
</code></pre>
<p>You might imagine writing:</p>
<pre><code>&gt;&gt; parse "aaabbb" [
      {
          x: collect some ["a", keep (&lt;a&gt;)]
          y: collect some ["b", keep (&lt;b&gt;)]
      }
  ]
== make object! [
    x: [&lt;a&gt; &lt;a&gt; &lt;a&gt;]
    y: [&lt;b&gt; &lt;b&gt; &lt;b&gt;]
]
</code></pre>
<p><strong>But I don't know if that's obviously a great application.</strong></p>
<p>We shouldn't be thinking inside-the-box that just because FENCE! is used for making objects sometimes, that's the most pressing need for them in dialects.  I actually think GATHER does a good enough job at what it does...and I think the above example reads more clearly with it.</p>
<p>But I've pointed to other rather weak areas, <strong><a href="https://rebol.metaeducation.com/t/implicit-capture-in-parse-how-to-get-it/1718">like how we don't have implicit capture</a></strong>.</p>
<pre><code>parse isodate [
    year: between &lt;here&gt; "-"
    month: between &lt;here&gt; "-"
    day: between &lt;here&gt; "T"
    ...
]
</code></pre>
<p>I'm not saying this is what we should use fences for, but just to kick-off that "outside-the-box" brainstorm:</p>
<pre><code>parse isodate [{year} "-" {month} "-" {day} "T" ...]
</code></pre>
<p>If my only choices were between that and an alternate for GATHER+EMIT, I'd pick that, because I think we'd get a lot more mileage out of it.</p>
<p>Remember also that there are lots of variations, like <strong><code>${...}</code></strong> and <strong><code>:{...}</code></strong> and whatever combinations in paths in chains and tuples you can think of.  Ideally how it's used makes some sense across these variants.  But we should remember that dialecting is about serving the domain, not making sacrifices to some god-of-consistency.</p>
<p><strong>Anyway...it's going to take time to build up a sense of what being "fency" means.</strong></p>
<p>But if any pet applications start coming to mind, pitch them.</p>
          <p><a href="https://rebol.metaeducation.com/t/fence-in-parse-what-should-it-do/2312/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/fence-in-parse-what-should-it-do/2312/1</link>
        <pubDate>Thu, 10 Oct 2024 18:52:05 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2312-1</guid>
        <source url="https://rebol.metaeducation.com/t/fence-in-parse-what-should-it-do/2312.rss">FENCE! In PARSE: What Should It Do?</source>
      </item>
  </channel>
</rss>
