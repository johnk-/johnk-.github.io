<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What&#39;s Cool (According to Danny)</title>
    <link>https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906</link>
    <description>Photos are nice. complex. but some how easy to understand most of the time without having to know the &quot;who, what, when, where, and why.&quot; Just by looking at them, you can kinda tell what it&#39;s trying to show you. I want Rebol coding to look like that while working with any data context in its original form as possible.

&gt; ** 
var {whats-cool 0: Brett} 
Var Rebdol: {Rebdol cool: &quot;what&#39;s-cool&quot;}**

The [%Rebol-dom.r](http://www.rebol.org/view-script.r?script=rebol-dom.r) Var is named from the associated value strings/words, unless you *!, select-all-fetch-as strings/words. Then you can, Rebdol.&quot;cool&quot; -&gt;select &amp; load &quot;what&#39;s-cool&quot;. Wich is, whats-cool: { 0: Brett}. Then .[0], and  you get Brett. 

Or change the *value to Ren-C. **

&gt;whats-cool [ /rebdol.cool.&amp;.0 = Ren-C] *messy, noisy example*
**


Is this musing when the origonal data context does&#39;nt need to be changed. And if parsed into a Dialect Object Model, without changing syntax, this data can be searched, updated with DOM functions.

Creating Vars out of molded data/code with foreign syntax, is its own Sequence built notation.

&gt;     struct: :Var
&gt; 
&gt;      struct qwerty {
&gt;                        Int #1
&gt;                        Char &quot;hello&quot;
&gt;                        Float 9.0
&gt;                        Char &quot;there&quot;
&gt;                     } *! &#39;qwerty
&gt; 
&gt;     *variable: &quot;request&quot; new[qwerty]


This data looks like and can be used to construct *New nodes that can run as code without creating defined functions but remain as sequence(molded) data that needs no bindings or loading to take place.
   
I hope this is musing, for others as it is for me. Rebol-dom.r Sequence/molded data, strings as *keys have context all without loading anything but the *value. It&#39;s what i found and fished out of that Deep Lake.</description>
    
    <lastBuildDate>Mon, 26 Jun 2023 01:35:13 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What&#39;s Cool (According to Danny)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Moving to new thread because it doesn't clearly relate to the topic of binding in strings.)</em></p>
<aside class="quote no-group" data-username="Danny" data-post="1" data-topic="1906">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/letter_avatar_proxy/v4/letter/d/848f3c/48.png" class="avatar"> Danny:</div>
<blockquote>
<p>It's what i found and fished out of that Deep Lake.</p>
</blockquote>
</aside>
<p>I know that you have been looking at ways of representing JavaScript-looking things (e.g. <strong>var</strong> declarations, or using <strong><code>[0]</code></strong> to index arrays) in Rebol.</p>
<p>And yes--those kinds of things have been considered here.</p>
<ul>
<li>
<p><a href="https://rebol.metaeducation.com/t/let-binding-a-limited-form-of-virtual-binding/1435"><strong><code>let var: value</code></strong> is a very real thing</a> in Ren-C for making declarations inline with the stream of code (as opposed to <strong><code>use [var] [var: value, ...]</code></strong> which breaks the stream of code and introduces a new level of indentation)</p>
</li>
<li>
<p><a href="https://rebol.metaeducation.com/t/pack-sequence-type/1503">"SCRUNCH!" was proposed</a> as a kin to PATH! and TUPLE!, except instead of an interstitial delimiter of a dot or a slash it would use <em>nothing at all</em>, to enable things like <strong>array[0]</strong> being a 2-element SCRUNCH! of a WORD! and a BLOCK!.</p>
</li>
</ul>
<p>So far be it from me to point at anything and say "that's crazy".  For any number of reasons.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/crazy_face.png?v=14" title=":crazy_face:" class="emoji" alt=":crazy_face:" loading="lazy" width="20" height="20"></p>
<p>But we have to have some compass for what the scope of the problems being solved are (and if we're solving problems at all, or just creating them.)</p>
<p>A warning I would give, which may apply to you is...</p>
<h2><a name="p-6205-duck-avoid-duck-imprinting-1" class="anchor" href="https://rebol.metaeducation.com#p-6205-duck-avoid-duck-imprinting-1"></a><img src="https://rebol.metaeducation.com/images/emoji/twitter/duck.png?v=14" title=":duck:" class="emoji" alt=":duck:" loading="lazy" width="20" height="20"> Avoid Duck Imprinting</h2>
<p>There's this thing about ducks, that they follow whatever they see when they hatch:</p>
<p><a href="https://animalkooky.com/why-are-ducks-following-me/">https://animalkooky.com/why-are-ducks-following-me/</a></p>
<p>And I think some people who follow Rebol, seem to follow it a bit like those ducks... outside of the context of what it's useful for or not.</p>
<p>I'm not sure what your goals are.  And I suspect you're not well-versed in things like <a href="http://dinosaur.compilertools.net/">lex and yacc</a>, so the low-barrier-to-entry of Rebol may have attracted you.</p>
<p>But while it may be non-obvious how to get started with studying abstract syntax trees... there are things like the <a href="https://astexplorer.net/">JavaScript AST Explorer</a> you might find there's a world of non-Rebol things that can work pretty well for what they do.</p>
<p><strong>Software artifacts are defined by the boundary of what they don't do, every much as by what they can do.</strong>  I'm extremely skeptical if I approach someone who can't articulate things that what they are doing would <em>not</em> be useful for...because it indicates to me they don't comprehend the nature of design.</p>
<p>Anyway, it would be informative if you showed a contrast of things you have tried to do in other languages--and why you think Rebol is particularly suited for whatever your pursuits are.</p>
          <p><a href="https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906/3</link>
        <pubDate>Sat, 30 Jul 2022 03:00:01 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1906-3</guid>
        <source url="https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906.rss">What&#39;s Cool (According to Danny)</source>
      </item>
      <item>
        <title>What&#39;s Cool (According to Danny)</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="Danny" data-post="1" data-topic="1906">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/letter_avatar_proxy/v4/letter/d/848f3c/48.png" class="avatar"> Danny:</div>
<blockquote>
<p>Is this musing when the origonal data context does'nt need to be changed. Just loaded as a Dialect Object Model. And the data can be searched, updared with DOM functions?</p>
</blockquote>
</aside>
<p>A full blown object model is different to what I was alluding to. That's at one end of manipulation, at the other end you have a basic text search and replace. I was talking about something in between, something that works on search and replace but has already broken up the text into tokens.  It may not be useful to everyone, but it's handy for ad-hoc situations or where you just want to target a little bit of the foreign syntax.<br>
It's a bit of a cheat to avoid having to build a full object model when you really do want to keep the foreign syntax as foreign.  Just a little use-case to add colour to the post's topic.</p>
          <p><a href="https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906/2</link>
        <pubDate>Sat, 30 Jul 2022 00:25:13 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1906-2</guid>
        <source url="https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906.rss">What&#39;s Cool (According to Danny)</source>
      </item>
      <item>
        <title>What&#39;s Cool (According to Danny)</title>
        <dc:creator><![CDATA[Danny]]></dc:creator>
        <description><![CDATA[
            <p>Photos are nice. complex. but some how easy to understand most of the time without having to know the "who, what, when, where, and why." Just by looking at them, you can kinda tell what it's trying to show you. I want Rebol coding to look like that while working with any data context in its original form as possible.</p>
<blockquote>
<p>**<br>
var {whats-cool 0: Brett}<br>
Var Rebdol: {Rebdol cool: "what's-cool"}**</p>
</blockquote>
<p>The <a href="http://www.rebol.org/view-script.r?script=rebol-dom.r" rel="noopener nofollow ugc">%Rebol-dom.r</a> Var is named from the associated value strings/words, unless you *!, select-all-fetch-as strings/words. Then you can, Rebdol."cool" -&gt;select &amp; load "what's-cool". Wich is, whats-cool: { 0: Brett}. Then .[0], and  you get Brett.</p>
<p>Or change the *value to Ren-C. **</p>
<blockquote>
<p>whats-cool [ /rebdol.cool.&amp;.0 = Ren-C] <em>messy, noisy example</em><br>
**</p>
</blockquote>
<p>Is this musing when the origonal data context does'nt need to be changed. And if parsed into a Dialect Object Model, without changing syntax, this data can be searched, updated with DOM functions.</p>
<p>Creating Vars out of molded data/code with foreign syntax, is its own Sequence built notation.</p>
<blockquote>
<pre><code>struct: :Var

 struct qwerty {
                   Int #1
                   Char "hello"
                   Float 9.0
                   Char "there"
                } *! 'qwerty

*variable: "request" new[qwerty]
</code></pre>
</blockquote>
<p>This data looks like and can be used to construct *New nodes that can run as code without creating defined functions but remain as sequence(molded) data that needs no bindings or loading to take place.</p>
<p>I hope this is musing, for others as it is for me. Rebol-dom.r Sequence/molded data, strings as *keys have context all without loading anything but the *value. It's what i found and fished out of that Deep Lake.</p>
          <p><a href="https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906/1</link>
        <pubDate>Fri, 29 Jul 2022 23:42:34 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1906-1</guid>
        <source url="https://rebol.metaeducation.com/t/whats-cool-according-to-danny/1906.rss">What&#39;s Cool (According to Danny)</source>
      </item>
  </channel>
</rss>
