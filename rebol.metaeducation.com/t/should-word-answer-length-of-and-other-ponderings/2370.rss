<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should WORD! Answer LENGTH OF (and other ponderings)</title>
    <link>https://rebol.metaeducation.com/t/should-word-answer-length-of-and-other-ponderings/2370</link>
    <description>I&#39;m looking at putting some gaps in the type table, and at first I was going to write something along the lines of this, with BLANK?:

    blank 1
    integer 2
    decimal 3
    _ 4
    _ 5
    any-series 6
    any-unit 7

Then I stopped and thought &quot;well, wait, might TRASH? be better?&quot;

    blank 1
    integer 2
    decimal 3
    ~ 4
    ~ 5
    any-series 6
    any-unit 7

Of course you have a lot of single-character choices, if single-characterness is important.  **`#`** is the space character.  And single-characterness isn&#39;t in and of itself all that big a deal.

## What&#39;s The Difference?

There&#39;s a key difference: **if you want something in that slot that&#39;s going to signal a misunderstanding, trash will get the you there faster.**

Nominally what&#39;s expected in that slot is a WORD!  And there are various things you can do with a blank, like convert it TO a TEXT!...

    &gt;&gt; to text! _
    == &quot;&quot;

Whereas trash doesn&#39;t do that.  It&#39;s a quasiform, so like quoted values and antiforms it is not considered &quot;fundamental&quot;:

    &gt;&gt; to text! first [~]
    ** Script Error: to expects [~void~ fundamental?] for its element argument

So really, you will get errors on *any* quasiform you use.  There&#39;s lots of options:

    blank 1
    integer 2
    decimal 3
    ~nope~ 4
    ~[nuh-uh]~ 5
    any-series 6
    any-unit 7

But when I look at this, it suddenly presents a pretty strong justification for quasiform integers:

    blank 1
    integer 2
    decimal 3
    ~4~
    ~5~
    any-series 6
    any-unit 7

Though maybe one should be happy enough with meta-tripwire, quasi-tag:

    blank 1
    integer 2
    decimal 3
    ~&lt;4&gt;~
    ~&lt;5&gt;~
    any-series 6
    any-unit 7

Or if you think GROUP! looks better, which it kind of does:

    blank 1
    integer 2
    decimal 3
    ~(4)~
    ~(5)~
    any-series 6
    any-unit 7

This is where you see the value of the **[&quot;useless&quot; reversible TO scheme](https://rebol.metaeducation.com/t/embracing-a-useless-definition-of-to/2325)** that I&#39;ve been trying to drill in:

    &gt;&gt; to integer! unquasi first [~(4)~]
    == 4

Comprende?

## Anyway, Back To The Main Point...

The main point is that by exploring these little choices we can see that you don&#39;t just make the choice based on how things look.  Pushing values into the quasi or quoted band gives you a *useful orneryness*.

It&#39;s far too easy to get in situations where you don&#39;t know if what you have is a word or a string, and you check to see if they&#39;re equal and the code goes merrily along.

In fact... I sort of wonder if the difference between **`=`** and **`==`** should not be strictness per se, but that **`==`** will raise an error if the types you&#39;re comparing aren&#39;t identical.  Then you can TRY it to suppress the error, and get null, which is the result from inequality:

    &gt;&gt; &quot;a&quot; = &lt;a&gt;
    == ~null~  ; anti

    &gt;&gt; &quot;a&quot; == &lt;a&gt;
    ** Error: == requires compared types be the same, or use TRY

    &gt;&gt; try &quot;a&quot; == &lt;a&gt;
    == ~null~  ; anti

But what I started wondering was, is it useful to have an answer to the length of a WORD!?  Just because we can, should we, or does that risk more downstream misunderstanding when you typically don&#39;t want to take the length of a word, and can alias it as text if you need to?

    &gt;&gt; length of &#39;abc
    == 3  ; we CAN, but should we?

I&#39;d made it possible to do that, but I don&#39;t think that&#39;s a good idea.  Instead:

    &gt;&gt; length of as text! &#39;abc
    == 3  ; if you need to do it, you can</description>
    
    <lastBuildDate>Sun, 16 Mar 2025 22:19:11 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-word-answer-length-of-and-other-ponderings/2370.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should WORD! Answer LENGTH OF (and other ponderings)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm looking at putting some gaps in the type table, and at first I was going to write something along the lines of this, with BLANK?:</p>
<pre><code>blank 1
integer 2
decimal 3
_ 4
_ 5
any-series 6
any-unit 7
</code></pre>
<p>Then I stopped and thought "well, wait, might TRASH? be better?"</p>
<pre><code>blank 1
integer 2
decimal 3
~ 4
~ 5
any-series 6
any-unit 7
</code></pre>
<p>Of course you have a lot of single-character choices, if single-characterness is important.  <strong><code>#</code></strong> is the space character.  And single-characterness isn't in and of itself all that big a deal.</p>
<h2><a name="p-8035-whats-the-difference-1" class="anchor" href="https://rebol.metaeducation.com#p-8035-whats-the-difference-1"></a>What's The Difference?</h2>
<p>There's a key difference: <strong>if you want something in that slot that's going to signal a misunderstanding, trash will get the you there faster.</strong></p>
<p>Nominally what's expected in that slot is a WORD!  And there are various things you can do with a blank, like convert it TO a TEXT!...</p>
<pre><code>&gt;&gt; to text! _
== ""
</code></pre>
<p>Whereas trash doesn't do that.  It's a quasiform, so like quoted values and antiforms it is not considered "fundamental":</p>
<pre><code>&gt;&gt; to text! first [~]
** Script Error: to expects [~void~ fundamental?] for its element argument
</code></pre>
<p>So really, you will get errors on <em>any</em> quasiform you use.  There's lots of options:</p>
<pre><code>blank 1
integer 2
decimal 3
~nope~ 4
~[nuh-uh]~ 5
any-series 6
any-unit 7
</code></pre>
<p>But when I look at this, it suddenly presents a pretty strong justification for quasiform integers:</p>
<pre><code>blank 1
integer 2
decimal 3
~4~
~5~
any-series 6
any-unit 7
</code></pre>
<p>Though maybe one should be happy enough with meta-tripwire, quasi-tag:</p>
<pre><code>blank 1
integer 2
decimal 3
~&lt;4&gt;~
~&lt;5&gt;~
any-series 6
any-unit 7
</code></pre>
<p>Or if you think GROUP! looks better, which it kind of does:</p>
<pre><code>blank 1
integer 2
decimal 3
~(4)~
~(5)~
any-series 6
any-unit 7
</code></pre>
<p>This is where you see the value of the <strong><a href="https://rebol.metaeducation.com/t/embracing-a-useless-definition-of-to/2325">"useless" reversible TO scheme</a></strong> that I've been trying to drill in:</p>
<pre><code>&gt;&gt; to integer! unquasi first [~(4)~]
== 4
</code></pre>
<p>Comprende?</p>
<h2><a name="p-8035-anyway-back-to-the-main-point-2" class="anchor" href="https://rebol.metaeducation.com#p-8035-anyway-back-to-the-main-point-2"></a>Anyway, Back To The Main Point...</h2>
<p>The main point is that by exploring these little choices we can see that you don't just make the choice based on how things look.  Pushing values into the quasi or quoted band gives you a <em>useful orneryness</em>.</p>
<p>It's far too easy to get in situations where you don't know if what you have is a word or a string, and you check to see if they're equal and the code goes merrily along.</p>
<p>In fact... I sort of wonder if the difference between <strong><code>=</code></strong> and <strong><code>==</code></strong> should not be strictness per se, but that <strong><code>==</code></strong> will raise an error if the types you're comparing aren't identical.  Then you can TRY it to suppress the error, and get null, which is the result from inequality:</p>
<pre><code>&gt;&gt; "a" = &lt;a&gt;
== ~null~  ; anti

&gt;&gt; "a" == &lt;a&gt;
** Error: == requires compared types be the same, or use TRY

&gt;&gt; try "a" == &lt;a&gt;
== ~null~  ; anti
</code></pre>
<p>But what I started wondering was, is it useful to have an answer to the length of a WORD!?  Just because we can, should we, or does that risk more downstream misunderstanding when you typically don't want to take the length of a word, and can alias it as text if you need to?</p>
<pre><code>&gt;&gt; length of 'abc
== 3  ; we CAN, but should we?
</code></pre>
<p>I'd made it possible to do that, but I don't think that's a good idea.  Instead:</p>
<pre><code>&gt;&gt; length of as text! 'abc
== 3  ; if you need to do it, you can
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/should-word-answer-length-of-and-other-ponderings/2370/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-word-answer-length-of-and-other-ponderings/2370/1</link>
        <pubDate>Sun, 16 Mar 2025 22:19:11 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2370-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-word-answer-length-of-and-other-ponderings/2370.rss">Should WORD! Answer LENGTH OF (and other ponderings)</source>
      </item>
  </channel>
</rss>
