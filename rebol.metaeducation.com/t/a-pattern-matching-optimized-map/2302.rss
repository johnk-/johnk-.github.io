<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A Pattern-Matching Optimized MAP (?)</title>
    <link>https://rebol.metaeducation.com/t/a-pattern-matching-optimized-map/2302</link>
    <description>In UPARSE, there&#39;s a MAP! of all the combinators.  You can map fundamental datatypes to combinator functions, or you can map literal elements to combinator functions (as keywords like SOME or ACROSS are)... or you can map literal elements to something to substitute as a rule.

*(e.g. you can map a literal element to a parse rule block!, and it will use that block as the implementation of whatever you mapped.  You could map **`&lt;_&gt;`** to **`[opt some whitespace]`** if you wanted.)*

## But now `FOO:BAR`, `FOO:` and `:(FOO)` are all becoming [CHAIN!](https://rebol.metaeducation.com/t/introducingnew-chain-datatype/2226)

It&#39;s likely that **`foo:bar`** would be handled by the combinator mechanics themselves, to provide refinements to the combinator.  So it wouldn&#39;t be dispatched to the &quot;CHAIN! combinator&quot;.

But we&#39;ve been handling **`foo:`** and **`:(foo)`** very differently.  But they&#39;re both the same type: CHAIN!.

Problem is, there are no variadic combinators (yet?).  So you either map the CHAIN! to a combinator that takes an argument or you don&#39;t.  The **`foo:`** needs an argument, the **`:(foo)`** has been evaluating the group and splicing it as a rule to execute.

## Cheap Solution of the Moment: Hack The Dispatch

The terrible but &quot;let&#39;s keep things moving&quot; answer is that if you have any sequence with a leading blank, it will try dispatching to **`:*`** or **`/*`** or **`.*`** ... e.g. those literal sequence patterns are what you put in the combinator table.

And if it has a trailing blank, you put **`*:`** or **`*/`** or **`*.`** and give those a combinator.

If both of those fall through, it goes to the plain CHAIN! or PATH! or TUPLE! combinator.

Shoddy...of course.  How to do better?

## Could A MAP!-Like Structure Optimize Pattern Match?

As a non-compiled language, we can&#39;t do much to optimize [something like DESTRUCTURE](https://rebol.metaeducation.com/t/destructure-dialect/1877) if the moment we encounter it is the first time we&#39;ve seen it.

We *could* have a data structure that is internally optimized to pattern matching.  e.g. something like a MAP! but that has architecture inside of itself as a data structure that groups patterns that are close to each other together, and branches off at the appropriate points.

I don&#39;t know how to implement it, but I do know that if we turned the combinator map into a list of destructure rules that it tested one at a time in order, that that would be really slow... even if destructure were native.</description>
    
    <lastBuildDate>Sat, 28 Sep 2024 23:46:24 +0000</lastBuildDate>
    <category>Optimization</category>
    <atom:link href="https://rebol.metaeducation.com/t/a-pattern-matching-optimized-map/2302.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A Pattern-Matching Optimized MAP (?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In UPARSE, there's a MAP! of all the combinators.  You can map fundamental datatypes to combinator functions, or you can map literal elements to combinator functions (as keywords like SOME or ACROSS are)... or you can map literal elements to something to substitute as a rule.</p>
<p><em>(e.g. you can map a literal element to a parse rule block!, and it will use that block as the implementation of whatever you mapped.  You could map <strong><code>&lt;_&gt;</code></strong> to <strong><code>[opt some whitespace]</code></strong> if you wanted.)</em></p>
<h2><a name="p-7793-but-now-foobar-foo-and-foo-are-all-becoming-chainhttpsrebolmetaeducationcomtintroducingnew-chain-datatype2226-1" class="anchor" href="https://rebol.metaeducation.com#p-7793-but-now-foobar-foo-and-foo-are-all-becoming-chainhttpsrebolmetaeducationcomtintroducingnew-chain-datatype2226-1"></a>But now <code>FOO:BAR</code>, <code>FOO:</code> and <code>:(FOO)</code> are all becoming <a href="https://rebol.metaeducation.com/t/introducingnew-chain-datatype/2226">CHAIN!</a></h2>
<p>It's likely that <strong><code>foo:bar</code></strong> would be handled by the combinator mechanics themselves, to provide refinements to the combinator.  So it wouldn't be dispatched to the "CHAIN! combinator".</p>
<p>But we've been handling <strong><code>foo:</code></strong> and <strong><code>:(foo)</code></strong> very differently.  But they're both the same type: CHAIN!.</p>
<p>Problem is, there are no variadic combinators (yet?).  So you either map the CHAIN! to a combinator that takes an argument or you don't.  The <strong><code>foo:</code></strong> needs an argument, the <strong><code>:(foo)</code></strong> has been evaluating the group and splicing it as a rule to execute.</p>
<h2><a name="p-7793-cheap-solution-of-the-moment-hack-the-dispatch-2" class="anchor" href="https://rebol.metaeducation.com#p-7793-cheap-solution-of-the-moment-hack-the-dispatch-2"></a>Cheap Solution of the Moment: Hack The Dispatch</h2>
<p>The terrible but "let's keep things moving" answer is that if you have any sequence with a leading blank, it will try dispatching to <strong><code>:*</code></strong> or <strong><code>/*</code></strong> or <strong><code>.*</code></strong> ... e.g. those literal sequence patterns are what you put in the combinator table.</p>
<p>And if it has a trailing blank, you put <strong><code>*:</code></strong> or <strong><code>*/</code></strong> or <strong><code>*.</code></strong> and give those a combinator.</p>
<p>If both of those fall through, it goes to the plain CHAIN! or PATH! or TUPLE! combinator.</p>
<p>Shoddy...of course.  How to do better?</p>
<h2><a name="p-7793-could-a-map-like-structure-optimize-pattern-match-3" class="anchor" href="https://rebol.metaeducation.com#p-7793-could-a-map-like-structure-optimize-pattern-match-3"></a>Could A MAP!-Like Structure Optimize Pattern Match?</h2>
<p>As a non-compiled language, we can't do much to optimize <a href="https://rebol.metaeducation.com/t/destructure-dialect/1877">something like DESTRUCTURE</a> if the moment we encounter it is the first time we've seen it.</p>
<p>We <em>could</em> have a data structure that is internally optimized to pattern matching.  e.g. something like a MAP! but that has architecture inside of itself as a data structure that groups patterns that are close to each other together, and branches off at the appropriate points.</p>
<p>I don't know how to implement it, but I do know that if we turned the combinator map into a list of destructure rules that it tested one at a time in order, that that would be really slow... even if destructure were native.</p>
          <p><a href="https://rebol.metaeducation.com/t/a-pattern-matching-optimized-map/2302/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/a-pattern-matching-optimized-map/2302/1</link>
        <pubDate>Sat, 28 Sep 2024 23:35:31 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2302-1</guid>
        <source url="https://rebol.metaeducation.com/t/a-pattern-matching-optimized-map/2302.rss">A Pattern-Matching Optimized MAP (?)</source>
      </item>
  </channel>
</rss>
