<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How should C variadics (like printf) work in the FFI?</title>
    <link>https://rebol.metaeducation.com/t/how-should-c-variadics-like-printf-work-in-the-ffi/2458</link>
    <description>The Atronix `va_list` interface took a block.  It required a type to be specified for each argument--achieving what you would get if you used a C cast on each variadic argument.

You had to REDUCE it, also...which I don&#39;t think you should have to do:
 
    printf reduce [&quot;%d, %f&quot; 10 + 20 [int32] 12.34 [float]]

It may be useful to use defaulting like C&#39;s where integer types default to `int` and floating point types default to `double`:

    printf [&quot;%d, %f&quot; (10 + 20) 12.34]

If you do want to specify types, I&#39;m leaning towards liking the FENCE! for lightweight construction, so maybe more like:

    printf [&quot;%d, %f&quot; {int32 10 + 20} 12.34]
    printf [&quot;%d, %f&quot; {int32 10 + 20} {float 12.34}]

Back in the day I suggested putting it inside a group instead of passing a block...so that notationally it wouldn&#39;t put space between the printf and the arguments:

    (printf &quot;%d, %f&quot; (10 + 20) 12.34)

Though that has the bad property that if you forget it&#39;s a variadic, it will consume all the parameters of all ensuing calls.

However, it has the good property that &quot;ordinary&quot; variadics work with APPLY, including its `//` operator form:

    apply printf/ [&quot;%d, %f&quot; {int32 10 + 20} 12.34]

    printf // [&quot;%d, %f&quot; {int32 10 + 20} 12.34]</description>
    
    <lastBuildDate>Sun, 18 May 2025 16:38:42 +0000</lastBuildDate>
    <category>FFI</category>
    <atom:link href="https://rebol.metaeducation.com/t/how-should-c-variadics-like-printf-work-in-the-ffi/2458.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How should C variadics (like printf) work in the FFI?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The Atronix <code>va_list</code> interface took a block.  It required a type to be specified for each argument--achieving what you would get if you used a C cast on each variadic argument.</p>
<p>You had to REDUCE it, also...which I don't think you should have to do:</p>
<pre><code>printf reduce ["%d, %f" 10 + 20 [int32] 12.34 [float]]
</code></pre>
<p>It may be useful to use defaulting like C's where integer types default to <code>int</code> and floating point types default to <code>double</code>:</p>
<pre><code>printf ["%d, %f" (10 + 20) 12.34]
</code></pre>
<p>If you do want to specify types, I'm leaning towards liking the FENCE! for lightweight construction, so maybe more like:</p>
<pre><code>printf ["%d, %f" {int32 10 + 20} 12.34]
printf ["%d, %f" {int32 10 + 20} {float 12.34}]
</code></pre>
<p>Back in the day I suggested putting it inside a group instead of passing a block...so that notationally it wouldn't put space between the printf and the arguments:</p>
<pre><code>(printf "%d, %f" (10 + 20) 12.34)
</code></pre>
<p>Though that has the bad property that if you forget it's a variadic, it will consume all the parameters of all ensuing calls.</p>
<p>However, it has the good property that "ordinary" variadics work with APPLY, including its <code>//</code> operator form:</p>
<pre><code>apply printf/ ["%d, %f" {int32 10 + 20} 12.34]

printf // ["%d, %f" {int32 10 + 20} 12.34]
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/how-should-c-variadics-like-printf-work-in-the-ffi/2458/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-c-variadics-like-printf-work-in-the-ffi/2458/1</link>
        <pubDate>Sun, 18 May 2025 16:38:42 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2458-1</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-c-variadics-like-printf-work-in-the-ffi/2458.rss">How should C variadics (like printf) work in the FFI?</source>
      </item>
  </channel>
</rss>
