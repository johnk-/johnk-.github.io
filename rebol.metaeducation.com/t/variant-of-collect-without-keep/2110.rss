<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</title>
    <link>https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110</link>
    <description>I recently discovered a version of COLLECT by Brett Handley (for R2) that is less general *[[than what COLLECT has been come to be known as](https://rebol.metaeducation.com/t/implementing-collect-keep/2099)]* but avoids nested code.

    collect: func [
        {Collects block evaluations, use as body in For, Repeat, etc.}
        block [block!] &quot;Block to evaluate.&quot;
        /initial result [series! datatype!] &quot;Initialise the result.&quot;
        /only &quot;Inserts into result using Only refinement.&quot;
    ] [
        if not initial [result: block!]
        result: any [all [datatype? result make result 1000] result]
        reduce [&#39;head pick [insert insert/only] not only &#39;tail result to paren! block]
    ]

Examples (running in Rebol2 interpreter):

    &gt;&gt; for i 1 10 2 collect [i * 10]
    == [10 30 50 70 90]
        
    &gt;&gt; foreach [a b] [1 2 3 4] collect [a + b]
    == [3 7]

    &gt;&gt; foreach w [a b c d] collect [w]
    == [a b c d]

    &gt;&gt; repeat e [a b c %.txt] collect/initial [e] %file
    == %fileabc.txt

    &gt;&gt; iota: func [n [integer!]][repeat i n collect/initial [i] make block! n]
    &gt;&gt; iota 10
    == [1 2 3 4 5 6 7 8 9 10]</description>
    
    <lastBuildDate>Thu, 22 Feb 2024 09:28:17 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2110">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Maybe having a thing and calling it ACCUMULATE would be useful?</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; parse [hello 1 2 3] [let w: word! (print [w]), accumulate integer!]
hello
== [1 2 3]
</code></pre>
</blockquote>
</aside>
<p>I've realized this is actually <em>extremely</em> useful.  Ren-C's ability to vaporize things with ELIDE makes it even more useful, since making the result you want drop out of an expression is even easier without a temporary variable.</p>
<pre><code> &gt;&gt; parse ["a" a &lt;a&gt; "b" b &lt;b&gt;] [accumulate [text! word! elide tag!]]
 == [a b]
</code></pre>
<p>So I've added it!</p>
<pre><code>accumulate: combinator [
    return: "Block of accumulated values"
        [block!]
    parser [action?]
    &lt;local&gt; collected
][
    collected: copy []
    remainder: input
    cycle [
        append collected (
            [@ remainder]: parser remainder except e -&gt; [
                return collected
            ]
        )
    ]
]
</code></pre>
<p>It just loops through calling the "combinated" parser function it receives, until there's a match failure.  Then it returns the block it collected.  (Ultimately I decided that an empty block is probably what you want vs a null if there are no matches, but a variation could be easily done...as you can see.)</p>
<p><strong>UPARSE extensibility for the win yet again.</strong></p>
          <p><a href="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/6</link>
        <pubDate>Thu, 22 Feb 2024 09:20:55 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2110-6</guid>
        <source url="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110.rss">Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</source>
      </item>
      <item>
        <title>Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Brett" data-post="3" data-topic="2110">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/brett/48/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>Using Collect as a wrapper function meant indenting the code, forcing the keyword Keep into code that might otherwise be resuable and wearing the performance penalty of doing so. For code with a single Keep, that seemed excessive for the boilerplate it avoided.</p>
</blockquote>
</aside>
<p>I was <a href="https://rebol.metaeducation.com/t/sticky-set-word-binding-problem-in-make-object/2127/3">writing a PARSE example up</a> with two COLLECTs in it, and I messed both of them up at first...</p>
<ul>
<li>
<p>I expected <strong>collect some integer!</strong> to work, instead of <strong>collect some keep integer!</strong>.</p>
</li>
<li>
<p>I wrote <strong>collect keep some gather</strong> instead of <strong>collect some keep gather</strong></p>
</li>
</ul>
<p>So I can see the appeal of a KEEP-less COLLECT.  But it's tough to implement cleanly; I don't think putting the COLLECT underneath an iteration and having it sneakily retain memory across those iterations is practical (though clever).</p>
<p>One line of attack in PARSE would be a construct that implies both iteration and collection together, so you could say something like <strong>collect-some-keep integer!</strong>  Though that doesn't give you a way to express a difference of tolerating empty collections, you'd need <strong>collect-try-some-keep</strong> if you wanted that.</p>
<p>Maybe having a thing and calling it ACCUMULATE would be useful?</p>
<pre><code>&gt;&gt; parse [hello 1 2 3] [let w: word! (print [w]), accumulate integer!]
hello
== [1 2 3]
</code></pre>
<p>It could have the at-least-one semantic, and then you could TRY ACCUMULATE and get a NULL if there weren't any (as opposed to an empty block).  Then maybe you resort to COLLECT if you always wanted a block.  Or vice-versa.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/man_shrugging.png?v=14" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
<p>Maybe a variant like ACCUMULATE* could give back NULL if there's no YIELDs, e.g. the function it calls just returns NULL. (there's a COLLECT* that does this if there's no KEEPs.)</p>
<pre><code>&gt;&gt; collect* [keep 1 keep 2]
== [1 2]

&gt;&gt; collect* [print "No keeps!"]
No keeps!
== ~null~  ; anti
</code></pre>
<p>A non-combinator ACCUMULATE could be applied to generators, as above:</p>
<pre><code>&gt;&gt; accumulate generator [
      for x each [1 2] [yield x * 10] yield [a b] yield spread [d e]
   ]
== [10 20 [a b] d e]
</code></pre>
<p>If you passed ACCUMULATE a BLOCK! it could assume you wanted that block to be a generator:</p>
<pre><code>&gt;&gt; accumulate [
      for x each [1 2] [yield x * 10] yield [a b] yield spread [d e]
   ]
== [10 20 [a b] d e]
</code></pre>
<p>Again, that's close to COLLECT and KEEP, minus the ability to KEEP/LINE or KEEP/PART or KEEP/DUP.</p>
          <p><a href="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/5</link>
        <pubDate>Sat, 20 Jan 2024 05:26:18 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2110-5</guid>
        <source url="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110.rss">Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</source>
      </item>
      <item>
        <title>Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Brett" data-post="3" data-topic="2110">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/brett/48/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>I let mine go, because doing something different than the more popular conception would be confusing in published code.</p>
</blockquote>
</aside>
<p>Where things have been headed is to offer a MAP operation combined with generators.</p>
<pre><code>&gt;&gt; gen: each [1 2]
== ~#[frame! "gen" []]~  ; anti

&gt;&gt; gen
== 1

&gt;&gt; gen
== 2

&gt;&gt; gen
== ~null~  ; anti

&gt;&gt; map x each [1 2] [x * 10]
== [10 20]

&gt;&gt; for x each [1 2] [print ["x is" x], x * 10]
x is 1
x is 2
== 20
</code></pre>
<p>When you combine this with <a href="https://rebol.metaeducation.com/t/yielder-and-generator-and-thinking-about-coroutines/1311">GENERATOR and YIELDER</a> <em>(work in progress)</em> it gives even more options.</p>
<p>You'd get something analogous to COLLECT and KEEP with:</p>
<pre><code>&gt;&gt; map y generator [
       for x each [1 2] [yield x * 10] yield [a b] yield spread [d e]
   ] [y]
== [10 20 [a b] d e]
</code></pre>
<p>But it's not the same approach (e.g. there's no YIELD/LINE or YIELD/DUP).  The pattern of implementing COLLECT+KEEP is applicable to different kinds of problems.</p>
          <p><a href="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/4</link>
        <pubDate>Fri, 12 Jan 2024 22:14:20 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2110-4</guid>
        <source url="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110.rss">Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</source>
      </item>
      <item>
        <title>Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>My version is old. Append was still a mezzanine, this formulation was significantly faster than using Append.</p>
<p>Coming from standard imperative languages, Rebol was interesting and exciting and I'd noticed I was writing a lot of boring boilerplate code to collect results into a block from a variety of loop types.  It was cool to realise I could manipulate the loop body, which in another language you'd expect was a given, bending it to fulfill a new intent and this would work for multiple types of loop function.</p>
<p>Not too long after I shared Collect, a wrapper function with Keep spontaneously appeared sporting the same name. I think there were a couple of tries of Keep versions by different people and ultimately the community pushed for one to be adopted into the Rebol distribution.</p>
<p>For myself, I never ultimately used Collect much in scripts. Using Collect as a wrapper function meant indenting the code, forcing the keyword Keep into code that might otherwise be resuable and wearing the performance penalty of doing so. For code with a single Keep, that seemed excessive for the boilerplate it avoided. Being able to have multiple Keeps in code is a feature, but such code seemed inelegant in some way. I let mine go, because doing something different than the more popular conception would be confusing in published code.</p>
          <p><a href="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/3</link>
        <pubDate>Thu, 11 Jan 2024 20:47:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2110-3</guid>
        <source url="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110.rss">Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</source>
      </item>
      <item>
        <title>Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Interesting idea... I'm sure <a class="mention" href="https://rebol.metaeducation.com/u/brett">@Brett</a> can offer some historical perspective, and whether this was a precursor to COLLECT as we know it, or some other experiment.  Doing a HEAD of an insertion at a TAIL suggests it's likely quite old... perhaps before APPEND existed (or before it had been standardized to return the head).</p>
<ul>
<li>
<p>It builds a block of code that references a result block that it defines.  Then returns that code.</p>
</li>
<li>
<p>The code is used as a loop body, and every time it is run adds the result to the block... then evaluates to the head of the collected block.</p>
</li>
<li>
<p>Then it takes advantage of the idea that loops evaluate to their last body result to give the answer.</p>
</li>
</ul>
<p>One thing it can't do is control the result when the loop never runs the body... so you'll always get none, vs. an empty block:</p>
<pre><code>rebol2&gt;&gt; data: [a b]
rebol2&gt;&gt; foreach w data collect [w]
== [a b]

rebol2&gt;&gt; data: []
rebol2&gt;&gt; foreach w data collect [w]
== none
</code></pre>
<p>It also can't control the result when a loop breaks (appears to be an UNSET!, in Rebol2):</p>
<pre><code>rebol2&gt;&gt; data: [a b]
rebol2&gt;&gt; unset? foreach w data collect [if w = 'b [break] w]
== true
</code></pre>
<p>So these are some contrasts from what you'd get from today's COLLECT being outside a loop, with the KEEP inside.</p>
<h3><a name="p-6937-ren-c-notes-1" class="anchor" href="https://rebol.metaeducation.com#p-6937-ren-c-notes-1"></a>Ren-C Notes</h3>
<p>In Ren-C, loops that don't run their body at all return VOID... and loops that BREAK return the reserved value of a ~null~ antiform.</p>
<p>Also, some Ren-C loops started accepting functions, and passing them the loop variable value:</p>
<pre><code>&gt;&gt; repeat 3 (lambda [x] [print [x]])
1
2
3
</code></pre>
<p>It's not fully baked, but was inspired by conditionals accepting functions as branches, and passing the condition:</p>
<pre><code>&gt;&gt; if second [a b c] (lambda [x] [print [x]])
b
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/2</link>
        <pubDate>Thu, 11 Jan 2024 10:36:21 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2110-2</guid>
        <source url="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110.rss">Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</source>
      </item>
      <item>
        <title>Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</title>
        <dc:creator><![CDATA[no-e-in]]></dc:creator>
        <description><![CDATA[
            <p>I recently discovered a version of COLLECT by Brett Handley (for R2) that is less general <em>[<a href="https://rebol.metaeducation.com/t/implementing-collect-keep/2099">than what COLLECT has been come to be known as</a>]</em> but avoids nested code.</p>
<pre><code>collect: func [
    {Collects block evaluations, use as body in For, Repeat, etc.}
    block [block!] "Block to evaluate."
    /initial result [series! datatype!] "Initialise the result."
    /only "Inserts into result using Only refinement."
] [
    if not initial [result: block!]
    result: any [all [datatype? result make result 1000] result]
    reduce ['head pick [insert insert/only] not only 'tail result to paren! block]
]
</code></pre>
<p>Examples (running in Rebol2 interpreter):</p>
<pre><code>&gt;&gt; for i 1 10 2 collect [i * 10]
== [10 30 50 70 90]
    
&gt;&gt; foreach [a b] [1 2 3 4] collect [a + b]
== [3 7]

&gt;&gt; foreach w [a b c d] collect [w]
== [a b c d]

&gt;&gt; repeat e [a b c %.txt] collect/initial [e] %file
== %fileabc.txt

&gt;&gt; iota: func [n [integer!]][repeat i n collect/initial [i] make block! n]
&gt;&gt; iota 10
== [1 2 3 4 5 6 7 8 9 10]
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110/1</link>
        <pubDate>Thu, 11 Jan 2024 10:05:58 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2110-1</guid>
        <source url="https://rebol.metaeducation.com/t/variant-of-collect-without-keep/2110.rss">Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</source>
      </item>
  </channel>
</rss>
