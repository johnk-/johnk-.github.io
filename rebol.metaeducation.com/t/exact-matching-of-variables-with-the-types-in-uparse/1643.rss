<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Exact Matching of Variables with the @ Types In UPARSE</title>
    <link>https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643</link>
    <description>I mentioned that the @ types were slated for use for matching the contents of a variable exactly.  The most frequent example I have given is:

    &gt;&gt; block: [some &quot;a&quot;]

    &gt;&gt; uparse [[some &quot;a&quot;] [some &quot;a&quot;]] [some @block]
    == [some &quot;a&quot;]  ; success gives result of last matching rule

So that&#39;s different than **[some block]**, which would treat block as a rule.

Works with all types:

    &gt;&gt; num: 1

    &gt;&gt; uparse [1 1 1] [some @num]
    == 1

I didn&#39;t mention things like @(gr o up) but those work too:

    &gt;&gt; uparse [1 1 1] [some @(3 - 2)]
    == 1

**I realized I actually do not know how to write the above two cases in Red or Rebol2.**  You can&#39;t use the number as a plain variable in Red, since it acts as a repeat rule *(UPARSE prohibits that, since it&#39;s a rule that takes an argument, you must use REPEAT for such behavior)*

    red&gt;&gt; num: 1

    red&gt;&gt; parse [1 1 1] [some num]
    *** Script Error: PARSE - invalid rule or usage of rule: 1

Also in Red, I&#39;m not clear on why the following isn&#39;t an error, since the GROUP! product is just discarded:

    red&gt;&gt; parse [1 1 1] [some (3 - 2)]
    == false

This is something that would work in R3-Alpha, but doesn&#39;t in Red or Rebol2:

    red&gt;&gt; parse [1 1 1] [some quote (3 - 2)]
    == false

**Your guess is as good as mine.**  Whatever the answer in their world is, it&#39;s not obvious.  But I think the @ types give a clean answer in UPARSE.

## But What About @[bl o ck] ?

We might say that it means match a block literally:

    &gt;&gt; uparse [[some &quot;a&quot;] [some &quot;a&quot;]] [some @[some &quot;a&quot;]]
    == [some &quot;a&quot;]

That would be wasteful, since we already have a way to match blocks literally by quoting them:

    &gt;&gt; uparse [[some &quot;a&quot;] [some &quot;a&quot;]] [some &#39;[some &quot;a&quot;]]
    == [some &quot;a&quot;]

But UPARSE has changed the game for why @[...] and [...] can mean different things...because *block rules synthesize values*.  And who&#39;s to say you might not want to match a rule and use its product as the literal thing to match against?

    &gt;&gt; uparse [1 1 1 2] [@[some &#39;10, (10 + 10) | some &#39;1 (1 + 1)]]
    == 2

In other words your rule can match *and* provide an answer for the thing to match next.  We have zero experience with how often that might be useful, but maybe it is?  :man_shrugging:</description>
    
    <lastBuildDate>Sun, 20 Jul 2025 02:11:17 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Exact Matching of Variables with the @ Types In UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>One downside I discovered of using a SIGIL! for "match anything" is that if you try and apply that more broadly outside of PARSE, you run into trouble if you're going to try using some sequence itself as a matching template.</p>
<p>For example, if you wanted <strong><code>a.1.2</code></strong> to match against <strong><code>@.1.2</code></strong>.   The <code>@</code> isn't in the first position, it's a decoration on <strong>.1.2</strong></p>
<p>Of course, there's going to be some trouble no matter what you pick... if it's legal to occur in that position, then you have to deal with the case that it's literally there.</p>
<p>But if it were <strong><code>*</code></strong> then it would at least afford:</p>
<pre><code>*.1.2  ; matches a.1.2

['*].1.2   ; matches *.1.2

['[*]].1.2  ; matches [*].1.2
</code></pre>
<p>etc.</p>
<p>This is sort of a tangentially related thing, because if you try and apply the logic of PARSE to this matching scenario, then pretty much everything has to be in a block to quote it literally.</p>
<p>So whatever this <em>"sequence-<a href="https://en.wikipedia.org/wiki/Glob_(programming)">globbing</a>"</em> domain is, would be different.</p>
<p>Also, given that I'm talking about something that doesn't exist, what would <code>*</code> really mean?</p>
<pre><code> a.b.c.1.2  ; would this match *.1.2 but not ?.1.2
</code></pre>
<p>If we were to say that PARSE needed to bow to this, then it kind of suggests that <strong><code>?</code></strong> would be "match any one item".</p>
<p>Anyway, just making the point here... that SIGIL!s are slippery.  If PARSE is trying to set a precedent for a systemic recognizable idea of "match single item" then maybe it shouldn't be done with a sigil.</p>
          <p><a href="https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643/8">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643/8</link>
        <pubDate>Sat, 16 Nov 2024 13:51:47 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1643-8</guid>
        <source url="https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643.rss">Exact Matching of Variables with the @ Types In UPARSE</source>
      </item>
      <item>
        <title>Exact Matching of Variables with the @ Types In UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I think I've finally decided to declare <strong><code>@</code></strong> to be a shorthand for "match any item at this position", and not take an argument.</p>
<p>This combinator's "long" form is called ONE <em>(a replacement for historical SKIP, because reading <strong><code>[x: skip]</code></strong> and expecting that to store an item in a variable sounds like the opposite of skipping... and also, SKIP being arity-0 doesn't fit with the rest of the system... UPARSE instead has a SKIP combinator that takes how much to skip)</em>:</p>
<pre><code>&gt;&gt; parse [#foo &lt;bar&gt;] [issue! one]
== &lt;bar&gt;
</code></pre>
<p>So now, it simply has a shorthand:</p>
<pre><code>&gt;&gt; parse [#foo &lt;bar&gt;] [issue! @]
== &lt;bar&gt;
</code></pre>
<p>To justify why this isn't a fully arbitrary choice: when we see something like <code>@var</code> that's matching at the current position under the constraint of the provided variable:</p>
<pre><code>&gt;&gt; block: [some "a"]

&gt;&gt; parse [[some "a"] [some "a"]] [some @block]
== [some "a"]
</code></pre>
<p>So it doesn't seem too crazy that when you take away the variable name that's being looked up for the constraint, you'd get a combinator that matches <em>anything</em>.</p>
<h2><a name="p-7879-for-quoting-theres-just-and-literal-1" class="anchor" href="https://rebol.metaeducation.com#p-7879-for-quoting-theres-just-and-literal-1"></a>For Quoting, There's JUST and LITERAL</h2>
<p>This means @ doesn't behave like it does in the main evaluator as an arity-1 operator for literalizing the subsequent argument.</p>
<p>But you have other options.  <a href="https://rebol.metaeducation.com/t/synthesizing-parse-values-from-thin-air-just/2328">JUST will "just" synthesize the value (don't match it)</a>, while LITERAL will match it (and synthesize if matched).</p>
<pre><code>&gt;&gt; parse [] [just x]
== x

&gt;&gt; parse [''x] [literal ''x]
== ''x
</code></pre>
<p>LITERAL is nice when the thing you are matching has more than one quote level, because otherwise it can feel a little confusing:</p>
<pre><code>&gt;&gt; parse [''x] ['''x]
== ''x
</code></pre>
<p>It's also nice if something has a quote mark in the name:</p>
<pre><code> &gt;&gt; foo': "foo prime"

 &gt;&gt; parse [foo'] ['foo']  ; hrrrm
 == foo'

 &gt;&gt; parse [foo'] [literal foo']
 == foo'
</code></pre>
<p>As a shorthand, there's LIT.</p>
<pre><code> &gt;&gt; parse [foo'] [lit foo']
 == foo'
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643/7">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643/7</link>
        <pubDate>Fri, 08 Nov 2024 20:06:33 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1643-7</guid>
        <source url="https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643.rss">Exact Matching of Variables with the @ Types In UPARSE</source>
      </item>
      <item>
        <title>Exact Matching of Variables with the @ Types In UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I mentioned that the @ types were slated for use for matching the contents of a variable exactly.  The most frequent example I have given is:</p>
<pre><code>&gt;&gt; block: [some "a"]

&gt;&gt; uparse [[some "a"] [some "a"]] [some @block]
== [some "a"]  ; success gives result of last matching rule
</code></pre>
<p>So that's different than <strong>[some block]</strong>, which would treat block as a rule.</p>
<p>Works with all types:</p>
<pre><code>&gt;&gt; num: 1

&gt;&gt; uparse [1 1 1] [some @num]
== 1
</code></pre>
<p>I didn't mention things like @(gr o up) but those work too:</p>
<pre><code>&gt;&gt; uparse [1 1 1] [some @(3 - 2)]
== 1
</code></pre>
<p><strong>I realized I actually do not know how to write the above two cases in Red or Rebol2.</strong>  You can't use the number as a plain variable in Red, since it acts as a repeat rule <em>(UPARSE prohibits that, since it's a rule that takes an argument, you must use REPEAT for such behavior)</em></p>
<pre><code>red&gt;&gt; num: 1

red&gt;&gt; parse [1 1 1] [some num]
*** Script Error: PARSE - invalid rule or usage of rule: 1
</code></pre>
<p>Also in Red, I'm not clear on why the following isn't an error, since the GROUP! product is just discarded:</p>
<pre><code>red&gt;&gt; parse [1 1 1] [some (3 - 2)]
== false
</code></pre>
<p>This is something that would work in R3-Alpha, but doesn't in Red or Rebol2:</p>
<pre><code>red&gt;&gt; parse [1 1 1] [some quote (3 - 2)]
== false
</code></pre>
<p><strong>Your guess is as good as mine.</strong>  Whatever the answer in their world is, it's not obvious.  But I think the @ types give a clean answer in UPARSE.</p>
<h2><a name="p-5280-but-what-about-bl-o-ck-1" class="anchor" href="https://rebol.metaeducation.com#p-5280-but-what-about-bl-o-ck-1"></a>But What About @[bl o ck] ?</h2>
<p>We might say that it means match a block literally:</p>
<pre><code>&gt;&gt; uparse [[some "a"] [some "a"]] [some @[some "a"]]
== [some "a"]
</code></pre>
<p>That would be wasteful, since we already have a way to match blocks literally by quoting them:</p>
<pre><code>&gt;&gt; uparse [[some "a"] [some "a"]] [some '[some "a"]]
== [some "a"]
</code></pre>
<p>But UPARSE has changed the game for why @[...] and [...] can mean different things...because <em>block rules synthesize values</em>.  And who's to say you might not want to match a rule and use its product as the literal thing to match against?</p>
<pre><code>&gt;&gt; uparse [1 1 1 2] [@[some '10, (10 + 10) | some '1 (1 + 1)]]
== 2
</code></pre>
<p>In other words your rule can match <em>and</em> provide an answer for the thing to match next.  We have zero experience with how often that might be useful, but maybe it is?  <img src="https://rebol.metaeducation.com/images/emoji/twitter/man_shrugging.png?v=14" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643/1</link>
        <pubDate>Mon, 02 Aug 2021 18:58:15 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1643-1</guid>
        <source url="https://rebol.metaeducation.com/t/exact-matching-of-variables-with-the-types-in-uparse/1643.rss">Exact Matching of Variables with the @ Types In UPARSE</source>
      </item>
  </channel>
</rss>
