<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ENHEX and DEHEX testing, another &quot;Micro-Dialect&quot;</title>
    <link>https://rebol.metaeducation.com/t/enhex-and-dehex-testing-another-micro-dialect/2323</link>
    <description>Here&#39;s a little excerpt of testing **[Percent Encoding](https://en.wikipedia.org/wiki/Percent-encoding)** *(which Rebol gives the poor names ENHEX and DEHEX to, and should probably be changed)*.

It started out just as a table of encoded and decoded forms, e.g.

    for-each [encoded decoded] [
        &quot;a%20b&quot; &quot;a b&quot;
        &quot;a%25b&quot; &quot;a%b&quot;
        &quot;a%ce%b2c&quot; &quot;aβc&quot;
        ...
    ][
       ; test that it decodes
    ]

But the encoding produces uppercase hex digits (per [RFC 3896](https://datatracker.ietf.org/doc/html/rfc3986)), while the decoding tolerates lowercase ones.  So you don&#39;t get the same thing back.

That led me to the &quot;whimsical&quot; choice to denote reversible **`&lt;-&gt;`** and non-reversible **`-&gt;`** transforms:

    &quot;a%25b&quot; &lt;-&gt; &quot;a%b&quot;
    &quot;a%ce%b2c&quot; -&gt; &quot;aβc&quot; -&gt; &quot;a%CE%B2c&quot;

This is strange in that **`-&gt;`** is a WORD!, while **`&lt;-&gt;`** is a TAG! (and I believe this is the correct design choice when all is said and done).

But in a dialect, having something *look like what you want* can be enough, as it&#39;s just being looked for literally.

I threw in an additional wrinkle by letting BLOCK! with an INTEGER! in it serve as a comment.  It looks visually better than having to throw in a semicolon.

It&#39;s satisfying when such things can be done in a matter of a few minutes:

    ; 1. Accept lowercase, but canonize to uppercase, per RFC 3896 2.1
    ;
    ; 2. A case can be made for considering the encoding of characters that
    ;    don&#39;t need it to be an error by default.
    ;
    parse compose [
        &quot;a%20b&quot; &lt;-&gt; &quot;a b&quot;
        &quot;a%25b&quot; &lt;-&gt; &quot;a%b&quot;
        &quot;a%ce%b2c&quot; -&gt; &quot;aβc&quot; -&gt; &quot;a%CE%B2c&quot;  [1]
        &quot;%2b%2b&quot; -&gt; &quot;++&quot; -&gt; &quot;++&quot;  [2]
        &quot;a%2Bb&quot; -&gt; &quot;a+b&quot; -&gt; &quot;a+b&quot;  [2]
        &quot;a%62c&quot; -&gt; &quot;abc&quot; -&gt; &quot;abc&quot;  [2]
        &quot;a%CE%B2c&quot; &lt;-&gt; &quot;aβc&quot;
        (as text! #{2F666F726D3F763D254335253939}) -&gt; &quot;/form?v=ř&quot;
    ][ some [
        let encoded: text!
        let arrow: [&#39;&lt;-&gt; | &#39;-&gt;]
        let decoded: text!
        let re-encoded: [when (arrow = &#39;-&gt;) [&#39;-&gt; text!] | (encoded)]
        optional block!  ; headnote comment
        (
            let de: dehex encoded
            if de != decoded [
                fail [&quot;Decode of&quot; @encoded &quot;gave&quot; @de &quot;expected&quot; @decoded]
            ]
            let en: enhex decoded
            if en != re-encoded [
                fail [&quot;Encode of&quot; @decoded &quot;gave&quot; @en &quot;expected&quot; @re-encoded]
            ]
        )
    ]]</description>
    
    <lastBuildDate>Fri, 22 Nov 2024 06:47:24 +0000</lastBuildDate>
    <category>Testing</category>
    <atom:link href="https://rebol.metaeducation.com/t/enhex-and-dehex-testing-another-micro-dialect/2323.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ENHEX and DEHEX testing, another &quot;Micro-Dialect&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here's a little excerpt of testing <strong><a href="https://en.wikipedia.org/wiki/Percent-encoding">Percent Encoding</a></strong> <em>(which Rebol gives the poor names ENHEX and DEHEX to, and should probably be changed)</em>.</p>
<p>It started out just as a table of encoded and decoded forms, e.g.</p>
<pre><code>for-each [encoded decoded] [
    "a%20b" "a b"
    "a%25b" "a%b"
    "a%ce%b2c" "aβc"
    ...
][
   ; test that it decodes
]
</code></pre>
<p>But the encoding produces uppercase hex digits (per <a href="https://datatracker.ietf.org/doc/html/rfc3986">RFC 3896</a>), while the decoding tolerates lowercase ones.  So you don't get the same thing back.</p>
<p>That led me to the "whimsical" choice to denote reversible <strong><code>&lt;-&gt;</code></strong> and non-reversible <strong><code>-&gt;</code></strong> transforms:</p>
<pre><code>"a%25b" &lt;-&gt; "a%b"
"a%ce%b2c" -&gt; "aβc" -&gt; "a%CE%B2c"
</code></pre>
<p>This is strange in that <strong><code>-&gt;</code></strong> is a WORD!, while <strong><code>&lt;-&gt;</code></strong> is a TAG! (and I believe this is the correct design choice when all is said and done).</p>
<p>But in a dialect, having something <em>look like what you want</em> can be enough, as it's just being looked for literally.</p>
<p>I threw in an additional wrinkle by letting BLOCK! with an INTEGER! in it serve as a comment.  It looks visually better than having to throw in a semicolon.</p>
<p>It's satisfying when such things can be done in a matter of a few minutes:</p>
<pre><code>; 1. Accept lowercase, but canonize to uppercase, per RFC 3896 2.1
;
; 2. A case can be made for considering the encoding of characters that
;    don't need it to be an error by default.
;
parse compose [
    "a%20b" &lt;-&gt; "a b"
    "a%25b" &lt;-&gt; "a%b"
    "a%ce%b2c" -&gt; "aβc" -&gt; "a%CE%B2c"  [1]
    "%2b%2b" -&gt; "++" -&gt; "++"  [2]
    "a%2Bb" -&gt; "a+b" -&gt; "a+b"  [2]
    "a%62c" -&gt; "abc" -&gt; "abc"  [2]
    "a%CE%B2c" &lt;-&gt; "aβc"
    (as text! #{2F666F726D3F763D254335253939}) -&gt; "/form?v=ř"
][ some [
    let encoded: text!
    let arrow: ['&lt;-&gt; | '-&gt;]
    let decoded: text!
    let re-encoded: [when (arrow = '-&gt;) ['-&gt; text!] | (encoded)]
    optional block!  ; headnote comment
    (
        let de: dehex encoded
        if de != decoded [
            fail ["Decode of" @encoded "gave" @de "expected" @decoded]
        ]
        let en: enhex decoded
        if en != re-encoded [
            fail ["Encode of" @decoded "gave" @en "expected" @re-encoded]
        ]
    )
]]
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/enhex-and-dehex-testing-another-micro-dialect/2323/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/enhex-and-dehex-testing-another-micro-dialect/2323/1</link>
        <pubDate>Fri, 08 Nov 2024 16:10:52 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2323-1</guid>
        <source url="https://rebol.metaeducation.com/t/enhex-and-dehex-testing-another-micro-dialect/2323.rss">ENHEX and DEHEX testing, another &quot;Micro-Dialect&quot;</source>
      </item>
  </channel>
</rss>
