<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should VOID Assigns Mean &quot;Fully Remove A Key&quot;?</title>
    <link>https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431</link>
    <description>Rebol2 and R3-Alpha distinguish between fields not in an object, and those that are in the object but unset:

    rebol2&gt;&gt; obj: make object! [x: &quot;unsetme&quot;]

    rebol2&gt;&gt; unset bind &#39;x obj

    rebol2&gt;&gt; &gt;&gt; print mold obj
    make object! [
        x: unset
    ]

    rebol2&gt;&gt; unset? obj/x  ; asks if obj/x is an &quot;UNSET! value&quot;
    == true

    rebol2&gt;&gt; unset? obj/asdf
    ** Script Error: Invalid path value: asdf

Ren-C has this distinction today, as well.

    &gt;&gt; obj: make object! [x: ~]
    
    &gt;&gt; unset? $obj.x  ; asks if obj.x looks up to a TRASH! value
    == ~okay~  ; anti

    &gt;&gt; unset? $obj.asdf
    ** Error: Cannot pick asdf in obj

*(Red says both **obj/x** and **obj/asdf** are &quot;UNSET?&quot;, so you have to ask something like **(unset? obj/asdf/jkl)** before you get an error.)*

## This Is the &quot;Unresolved&quot; (vs. &quot;Unset&quot;?) Distinction

I think UNRESOLVED? is a pretty good name for the test saying there&#39;s no variable location to even find for something to ask about its state.

    &gt;&gt; obj: make object! [x: ~]
    
    &gt;&gt; unresolved? $obj.x
    == ~null~  ; anti

    &gt;&gt; unresolved? $obj.asdf
    == ~okay~  ; anti

I don&#39;t know if the UNRESOLVED? question should accept multiple steps of not being resolved.  Perhaps there&#39;s a refinement...

    &gt;&gt; unresolved? $asdf.jkl.qwertyiop
    ** Error: Multi-step unresolved, use UNRESOLVED?:MULTI if intended

    &gt;&gt; unresolved?:multi $asdf.jkl.qwertyiop
    == ~okay~  ; anti

Beyond that, it&#39;s a little tricky to cover all the states related to &quot;unsetness&quot;.  There&#39;s TRIPWIRE! and TRASH! which both generate errors on reads, and currently both count as UNSET?.  Then DEFAULT will overwrite null variables as well...so that&#39;s DEFAULTABLE? (void variables aren&#39;t really understood as to whether default should overwrite them).

I don&#39;t know.  But I do think that terms like UNSPECIFIED?/UNRESOLVED?/UNDEFINED? all kind of cluster together... and among them UNRESOLVED? stands out to me as the best one to draw from for saying there really is no variable location at all.

## Distinction Is Hazy For Things Like MAP!

Originally I had it so you would remove keys from MAP! by setting them to `~null~` antiforms.

Later I decided it would be more consistent if you asked to &quot;remove&quot; them by setting them to trash, so they&#39;d be unset and you&#39;d have to TRY to access them.

**But removal from maps removes them from enumeration.**  This is like being &quot;unresolved&quot;, not like being &quot;unset&quot;.

A similar issue happened with the ENVIRONMENT! type for modeling environment variables.  Removing with trash seems wrong.

## Wild Thought: VOID (empty PACK!) To Mean REMOVE ?

Empty PACK! (now called &quot;VOID&quot;) is an unstable antiform used to opt out of things like COMPOSE 

*But what if it was the way to ask for a removal from a MAP?*

     &gt;&gt; m: to map! [a 10 b 20]

     &gt;&gt; m.a: void
     == ~[]~  ; anti

     &gt;&gt; m
     == #[map [b 20]]

This would only be usable on datatypes where removals were legal... such as MAP! and ENVIRONMENT!.  You can&#39;t remove cells from a FRAME!--they&#39;re in fixed positions that have been compiled in.  Today&#39;s OBJECT! doesn&#39;t allow removals either (though perhaps it could/should?)

The rule for accepting an unstable assignment of this form would be that this removes the item from enumeration entirely.  Whereas if you assigned with a TRASH! the understanding is you&#39;re just making something that errors on access, but would still be in an enumeration of available keys.

## Strangely Compelling Use Of Unstable Antiforms

This does feel like it pushes to a clearer resolution of my misgivings of the incorrect parallels between map/environment removals and trashing object/frame cells... in terms of the effects on enumeration.</description>
    
    <lastBuildDate>Wed, 16 Jul 2025 10:31:52 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should VOID Assigns Mean &quot;Fully Remove A Key&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2431">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So Should You Declare "unassigned" Variables with <code>field: ~</code> or With <code>field: void</code>?</p>
</blockquote>
</aside>
<p>Given that <a href="https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452">type-checking is more strict now with respect to NULL and TRASH</a>, this does give a possible reasoning for why you might want to use a "void-to-unset" assignment.</p>
<p>Right now if you have a variable which is meant to optionally hold a function value, you don't want to use NULL:</p>
<pre><code> some-hook-that-takes-integer: null   ; optionally a function
</code></pre>
<p>Because then, if you try to call it with no arguments when it's not set, you get a no-op in todays world:</p>
<pre><code>&gt;&gt; some-hook-that-takes-integer 10
== 10
</code></pre>
<p>So you use TRASH! to "poison" such values, to stop that from happening.</p>
<p><em>(Alternative conceptions have been that maybe if something evaluates to null but is "not used" that raises an error--this idea of inert value discards being an error is something I think about from time to time, but have never actually tried.  It would be easier now to try it, so I should just go ahead and see what happens.)</em></p>
<p>In any case, if you use <code>^some-hook-that-takes-integer</code> you can get it back as a trash value vs. erroring on access.  But TRASH! isn't easy to convert to void--it wasn't meant for it.</p>
<p>So if you wrote:</p>
<pre><code>apply opt ^some-hook-that-takes-integer [10]
</code></pre>
<p>You would likely be intending "run the function if it's there, ignore it if it's not".  But you'd be OPT-ing a trash, which doesn't give you void today.</p>
<p>However... if we were to go with the unset concept, and <a href="https://rebol.metaeducation.com/t/what-should-new-refinements-e-g-foo-evaluate-to/2299/2">possibly leading colons turning them into nulls</a>, that would possibly allow for:</p>
<pre><code>apply opt :some-hook-that-takes-integer [10]
</code></pre>
<p>Then again, maybe OPT should be willing to turn TRASH! into null.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/man_shrugging.png?v=14" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20">  Trash lets you use descriptive messages for why something is trash, which being unset would sacrifice.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431/4</link>
        <pubDate>Wed, 16 Jul 2025 10:31:52 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2431-4</guid>
        <source url="https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431.rss">Should VOID Assigns Mean &quot;Fully Remove A Key&quot;?</source>
      </item>
      <item>
        <title>Should VOID Assigns Mean &quot;Fully Remove A Key&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The concept of "void means remove" has gotten more entangled, now that it's legal to put unstable antiforms in metavariables (and, presumably, meta-map entries as well).</p>
<pre><code>&gt;&gt; m: make map! []

&gt;&gt; m.^key: pack [1 2]
== \~['1 '2]~\  ; antiform

&gt;&gt; m.^key
== \~['1 '2]~\  ; antiform
</code></pre>
<p>This means mapping to the empty pack of VOID (and presumably to GHOST!, or ERROR!) should be legal.</p>
<p><strong>That doesn't mean a non-^META assignment of VOID can't mean "remove".</strong>  But it would be a point of "inconsistency".</p>
<p>Though is it any more inconsistent than saying <strong><code>^e: fail "msg"</code></strong> is different from <strong><code>e: fail "msg"</code></strong> ... with the former storing an unstable ERROR! antiform, and the latter escalating the error to a panic?</p>
<p>Without some "assignment-based" mechanism to remove map keys, you'd have to use an operation that wasn't SET or a set-word.  For instance, if UNSET were kept as a prefix operation:</p>
<pre><code>unset $m.key
</code></pre>
<p>This requires branching your code in ways that aren't as pleasing as just being able to OPT your assignment out.</p>
<h2><a name="p-8522-rethinking-wacky-packs-1" class="anchor" href="https://rebol.metaeducation.com#p-8522-rethinking-wacky-packs-1"></a>Rethinking "Wacky Packs"</h2>
<p>I have proposed the wacky idea of using PACK! as a means of doing things like assignment-with-typechecking, using sub-band values (like a BLOCK! which is neither quoted nor quasi):</p>
<pre><code>&gt;&gt; var: (typed [integer! tag!] 1020)
== \~[ [&amp;[parameter! [integer! tag!]] '1020] ]~\  antiform
</code></pre>
<p>That could pretty clearly decay to the value minus the typecheck.</p>
<p>Then I floated similar ideas for unsetting things, using sub-band WORD! for example:</p>
<pre><code>&gt;&gt; var: unset
== \~[ *unset* ]~\  antiform
</code></pre>
<p>That would also be not-quoted and not-quasi inside the pack...so it can be distinguished as a special signal.  However, I wasn't sure what that should decay to (e.g. if you wrote <strong>any [x: unset ...]</strong>)</p>
<p>But neither of these ideas would be effective for ^META assignment, because the meta assignment would just store the pack.</p>
<h2><a name="p-8522-why-be-any-more-obtuse-let-void-unset-variables-2" class="anchor" href="https://rebol.metaeducation.com#p-8522-why-be-any-more-obtuse-let-void-unset-variables-2"></a>Why Be Any More Obtuse? Let VOID Unset Variables</h2>
<p>I'm kind of feeling now like VOID in non-^META assignments should just unset variables.  Then just live with the idea that ^META assignments can't be used to remove things.**  You can't have it both ways.</p>
<p>Since VOID is an empty PACK!, this would be a change from the situation of getting a panic today when you try:</p>
<pre><code>[x]: pack []   ; empty PACK! (definition of VOID)
</code></pre>
<p>Today the error guards you from misunderstandings, just as you're guarded against misunderstandings when you say:</p>
<pre><code>[x y]: pack [1]
</code></pre>
<p>But the problem is, that if you go and start trying to invent workarounds for ways to "assign" the unset state (like ~[<em>unset</em>]~) that are any weirder than this, your weirdness creates new problems.</p>
<hr>
<p><strong>I think that I now believe that either VOID non-^META assignments should be the way that you get the unset state, or there just isn't an offered way to get the unset state through assignment.</strong></p>
<hr>
<p>Ergonomically, being able to get the unset state through assignment has a lot of advantages.  And many assignments are not ^META.</p>
<p>I think it is worth it, to allow voids to unset variables--and remove them from maps--without having to write branching code to use a special removal operation.  If you truly are writing something "full-band" that wants to do meta-assignment -or- unset the variable, I guess it's acceptable that <em>then</em> you have to branch your code to do either a meta-assignment or a non-meta void assignment (or use the UNSET function).</p>
<h2><a name="p-8522-meditation-on-true-unset-3" class="anchor" href="https://rebol.metaeducation.com#p-8522-meditation-on-true-unset-3"></a>Meditation on True Unset</h2>
<p>"Unsetness" is perpetually thorny.</p>
<p>The idea of true unset has been to create an out of band state which would defeat accesses by even meta variable access with ^VAR.  You cannot specialize function arguments with the unset state... hence it's a state FRAME! variables can be in (present, but unset) but not one that's very friendly.</p>
<p>If FRAME! variables can be "present, but unset" what is it about MAP! keys that means they can't be present in an enumeration, but unset?  Should object variables have this?  Module variables?</p>
<p>If object variables can have the unset state, and you can get it just with a non-^META assignment to void, when would you write <strong><code>field: ~</code></strong> vs. <strong><code>field: void</code></strong> ?  Why prefer one over the other?  At least one difference would be that <code>^field</code> would work on the trash-assigned-variable, but not on the void-assigned-hence-unset-variable... but how does that inform things more generally?</p>
<p>I'll just throw in a little reminder of why trash is distinct from void in other places, e.g. why PRINT returns trash and not void.  <a href="https://rebol.metaeducation.com/t/console-treatment-of-void-vs-trash/2045">The reason is that VOID opts out of too many things.</a>, and:</p>
<pre><code> append data (... print "Hello"))
</code></pre>
<p>...should error, not be silent.  TRASH!'s raison-d'etre is to throw wrenches in things, whereas VOID is silently accepted as an opt-out.</p>
<p>(<em>So if anything, the current philosophy is backwards...</em> VOID should silently unset a SET-WORD!, while TRASH should cause a panic on the assignment.  Not that I believe it <em>should</em>, I'm just saying that if anything should be a panic, it's probably trash...not void.)</p>
<p>Back to the question: if VOID doesn't remove from MAP!, it's useless.  But VOID <em>can't</em> remove fields from FRAME!, because you can't remove fields from frames--and it's not what we'd want it to do.  You need to still be able to FOR-EACH enumerate a FRAME! to get at its keys, even if they're not assigned yet.</p>
<p>OBJECT! has the same underlying implementation as FRAME!--just an ordered set of slots in memory.  Why would VOID assignment remove any of those slots from enumeration?  LET variables start out life in the unset state...so why wouldn't a VOID assignment return them to that state?</p>
<p>It really seems like MAP! is just the odd one out here.  <strong>But it's not storing variables, it's storing mappings.</strong>  You can't bind into a map either.  I guess we can say simply that the unset state is something only variables need to worry about preserving.</p>
<p><strong>So Should You Declare "unassigned" Variables with <code>field: ~</code> or With <code>field: void</code>?</strong></p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/thinking.png?v=14" title=":thinking:" class="emoji only-emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<p>TRASH! is now truthy, by design, so using VOID means if you declare things in ANY or ALL, that would be skipped as a no-op, at least in the current imagining of ALL, that throws out voids:</p>
<pre><code> eval wrap all [
     x: y: z: void  ; ALL throws out voids this would be no vote
     ...
 ]
</code></pre>
<p>But one problem with it is that it's <em>not</em> assigning void, so it's misleading.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/frowning.png?v=14" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
<h2><a name="p-8522-reminder-why-isnt-void-was-the-unset-state-4" class="anchor" href="https://rebol.metaeducation.com#p-8522-reminder-why-isnt-void-was-the-unset-state-4"></a>Reminder: Why Isn't VOID Was The Unset State?</h2>
<p>Because several changes have come that are new, it's good to ask why <strong>Why isn't VOID as a Meta-Variable Assignment The "UNSET" state?</strong></p>
<p>Where this starts to break is in FRAME! creation, where unspecialized slots look like they're assigned void:</p>
<pre><code>&gt;&gt; f: make frame! subtract/
== &amp;[frame! [
     ^value1: ~[]~
     ^value2: ~[]~
 ]]
</code></pre>
<p>The problem is, VOID is now used to opt-out of things.  You couldn't then tell the difference between:</p>
<pre><code> make frame! [foo void]
 make frame! [foo]
</code></pre>
<p><strong>This has been why the "truly unset" state has been important--something an evaluation cannot produce, yet a variable can represent (but never fetch with GET).</strong>  I do note, though, that there's an advantage if void is allowed to set things to the unset state, that means there can be a difference:</p>
<pre><code>&amp;[frame! [
     value1: ~[]~  ; non-meta assignment (value1 is unset)
     ^value2: ~[]~  ; meta-assignment (value2 is void)
 ]]
</code></pre>
<h2><a name="p-8522-guidance-still-hazy-but-mechanics-look-solid-5" class="anchor" href="https://rebol.metaeducation.com#p-8522-guidance-still-hazy-but-mechanics-look-solid-5"></a>Guidance Still Hazy, But Mechanics Look Solid</h2>
<p>It bothers me some to have <strong><code>x: void</code></strong> be legal, because it looks like you've assigned void to the variable... when a non-^META assignment can't do that.  This has been an error historically, and it feels misleading to make it a non-error.</p>
<p><em>However</em>--as I've said--<em><strong>IF</strong></em> there is going to be a state that unsets variables through assignment, it doesn't make sense to use a state other than void (more generally, "missing pack slot").  There are too many questions opened up by using another state.</p>
<p>So as for the misleadingness... I could similarly say that it's misleading to do <strong>append [a b c] void</strong> and get back <strong>[a b c]</strong>, "because you didn't really append void".  No...because you can't append void to a block..but there is meaning applied to it anyway.</p>
<p>But when it comes to coherent source, this does make it seem better to assign things with <strong><code>~</code></strong> in general when you want to poison them.  This works whether you're doing an assignment or a meta-assignment, and also has a smooth transition to if you want to use a labeled trash.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431/3</link>
        <pubDate>Tue, 15 Jul 2025 22:58:53 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2431-3</guid>
        <source url="https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431.rss">Should VOID Assigns Mean &quot;Fully Remove A Key&quot;?</source>
      </item>
      <item>
        <title>Should VOID Assigns Mean &quot;Fully Remove A Key&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol2 and R3-Alpha distinguish between fields not in an object, and those that are in the object but unset:</p>
<pre><code>rebol2&gt;&gt; obj: make object! [x: "unsetme"]

rebol2&gt;&gt; unset bind 'x obj

rebol2&gt;&gt; &gt;&gt; print mold obj
make object! [
    x: unset
]

rebol2&gt;&gt; unset? obj/x  ; asks if obj/x is an "UNSET! value"
== true

rebol2&gt;&gt; unset? obj/asdf
** Script Error: Invalid path value: asdf
</code></pre>
<p>Ren-C has this distinction today, as well.</p>
<pre><code>&gt;&gt; obj: make object! [x: ~]

&gt;&gt; unset? $obj.x  ; asks if obj.x looks up to a TRASH! value
== ~okay~  ; anti

&gt;&gt; unset? $obj.asdf
** Error: Cannot pick asdf in obj
</code></pre>
<p><em>(Red says both <strong>obj/x</strong> and <strong>obj/asdf</strong> are "UNSET?", so you have to ask something like <strong>(unset? obj/asdf/jkl)</strong> before you get an error.)</em></p>
<h2><a name="p-8195-this-is-the-unresolved-vs-unset-distinction-1" class="anchor" href="https://rebol.metaeducation.com#p-8195-this-is-the-unresolved-vs-unset-distinction-1"></a>This Is the "Unresolved" (vs. "Unset"?) Distinction</h2>
<p>I think UNRESOLVED? is a pretty good name for the test saying there's no variable location to even find for something to ask about its state.</p>
<pre><code>&gt;&gt; obj: make object! [x: ~]

&gt;&gt; unresolved? $obj.x
== ~null~  ; anti

&gt;&gt; unresolved? $obj.asdf
== ~okay~  ; anti
</code></pre>
<p>I don't know if the UNRESOLVED? question should accept multiple steps of not being resolved.  Perhaps there's a refinement...</p>
<pre><code>&gt;&gt; unresolved? $asdf.jkl.qwertyiop
** Error: Multi-step unresolved, use UNRESOLVED?:MULTI if intended

&gt;&gt; unresolved?:multi $asdf.jkl.qwertyiop
== ~okay~  ; anti
</code></pre>
<p>Beyond that, it's a little tricky to cover all the states related to "unsetness".  There's TRIPWIRE! and TRASH! which both generate errors on reads, and currently both count as UNSET?.  Then DEFAULT will overwrite null variables as well...so that's DEFAULTABLE? (void variables aren't really understood as to whether default should overwrite them).</p>
<p>I don't know.  But I do think that terms like UNSPECIFIED?/UNRESOLVED?/UNDEFINED? all kind of cluster together... and among them UNRESOLVED? stands out to me as the best one to draw from for saying there really is no variable location at all.</p>
<h2><a name="p-8195-distinction-is-hazy-for-things-like-map-2" class="anchor" href="https://rebol.metaeducation.com#p-8195-distinction-is-hazy-for-things-like-map-2"></a>Distinction Is Hazy For Things Like MAP!</h2>
<p>Originally I had it so you would remove keys from MAP! by setting them to <code>~null~</code> antiforms.</p>
<p>Later I decided it would be more consistent if you asked to "remove" them by setting them to trash, so they'd be unset and you'd have to TRY to access them.</p>
<p><strong>But removal from maps removes them from enumeration.</strong>  This is like being "unresolved", not like being "unset".</p>
<p>A similar issue happened with the ENVIRONMENT! type for modeling environment variables.  Removing with trash seems wrong.</p>
<h2><a name="p-8195-wild-thought-void-empty-pack-to-mean-remove-3" class="anchor" href="https://rebol.metaeducation.com#p-8195-wild-thought-void-empty-pack-to-mean-remove-3"></a>Wild Thought: VOID (empty PACK!) To Mean REMOVE ?</h2>
<p>Empty PACK! (now called "VOID") is an unstable antiform used to opt out of things like COMPOSE</p>
<p><em>But what if it was the way to ask for a removal from a MAP?</em></p>
<pre><code> &gt;&gt; m: to map! [a 10 b 20]

 &gt;&gt; m.a: void
 == ~[]~  ; anti

 &gt;&gt; m
 == #[map [b 20]]
</code></pre>
<p>This would only be usable on datatypes where removals were legal... such as MAP! and ENVIRONMENT!.  You can't remove cells from a FRAME!--they're in fixed positions that have been compiled in.  Today's OBJECT! doesn't allow removals either (though perhaps it could/should?)</p>
<p>The rule for accepting an unstable assignment of this form would be that this removes the item from enumeration entirely.  Whereas if you assigned with a TRASH! the understanding is you're just making something that errors on access, but would still be in an enumeration of available keys.</p>
<h2><a name="p-8195-strangely-compelling-use-of-unstable-antiforms-4" class="anchor" href="https://rebol.metaeducation.com#p-8195-strangely-compelling-use-of-unstable-antiforms-4"></a>Strangely Compelling Use Of Unstable Antiforms</h2>
<p>This does feel like it pushes to a clearer resolution of my misgivings of the incorrect parallels between map/environment removals and trashing object/frame cells... in terms of the effects on enumeration.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431/1</link>
        <pubDate>Fri, 02 May 2025 12:10:04 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2431-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-void-assigns-mean-fully-remove-a-key/2431.rss">Should VOID Assigns Mean &quot;Fully Remove A Key&quot;?</source>
      </item>
  </channel>
</rss>
