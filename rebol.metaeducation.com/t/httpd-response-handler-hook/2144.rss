<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>HTTPD Response Handler Hook</title>
    <link>https://rebol.metaeducation.com/t/httpd-response-handler-hook/2144</link>
    <description>As another instance of *&quot;I want to augment this block as a function body, with some stuff&quot;* there&#39;s this pattern in HTTPD.  Here is a usage:

The idea is that SERVER.SPEC.ACTIONS is a plain BLOCK! of what to do.  Here&#39;s a sample usage:

        import %httpd.reb
        trap [
            str: {Test} n: 0
            wait srv: open [scheme: &#39;httpd 8000 [
                n: n + 1
                expected: copy str
                repeat n [append expected expected]
                lib.print [{SERVER} n {:} (length of as binary! expected) {bytes}]
                render expected
            ]]
        ] then (func [e] [print mold/limit e 2000])

If you do something like fetch %index.html, that BLOCK! after the 8000 is executed.  Here what&#39;s happening is it&#39;s just incrementing a number and doubling the length of the response sent back each time.

The implementation was like this:

        server.locals.handler: func [
            return: [~]
            request [object!]
            response [object!]
        ] compose [
            render: :response.render
            redirect: :response.redirect
            print: :response.print

            (spread (
                match block! server.spec.actions else [default-response]
            ))
        ]

It wants to override PRINT so that what you print becomes part of the response.  So you&#39;re supposed to get these three service functions RENDER / REDIRECT / PRINT as well as access to the REQUEST and RESPONSE objects.

Now that SPREAD is spreading unbound material, this does not work.

PUNCH would be one way of doing this:

        server.locals.handler: func [
            return: [~]
            request [object!]
            response [object!]
        ] compose [
            render: :response.render
            redirect: :response.redirect
            print: :response.print

            (punch [request response render redirect print] as group! (
                match block! server.spec.actions else [default-response]
            ))
        ]

Though if you had [something like WITH](https://rebol.metaeducation.com/t/hiiamboriss-with/2138) you could imagine it like:

        server.locals.handler: func [
            return: [~]
            request [object!]
            response [object!]
        ] compose [
            do with [request response {  ; idea of FENCE! representing object
                render: :response.render
                redirect: :response.redirect
                print: :response.print
            }] (
                match block! server.spec.actions else [default-response]
            )
        ]

The COMPOSE is not strictly necessary there, but it lets you do at least a little work once vs. every time the function is called.

Which points to something useful about the PUNCH-based concept... beyond being [usable in dialects where things like DO WITH aren&#39;t available](https://rebol.metaeducation.com/t/what-dialects-need-from-binding/2111)... it has the potential to perform better (assuming punch-merges are faster than usermode function calls, which I believe they would be).</description>
    
    <lastBuildDate>Mon, 05 Feb 2024 19:02:22 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://rebol.metaeducation.com/t/httpd-response-handler-hook/2144.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>HTTPD Response Handler Hook</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As another instance of <em>"I want to augment this block as a function body, with some stuff"</em> there's this pattern in HTTPD.  Here is a usage:</p>
<p>The idea is that SERVER.SPEC.ACTIONS is a plain BLOCK! of what to do.  Here's a sample usage:</p>
<pre><code>    import %httpd.reb
    trap [
        str: {Test} n: 0
        wait srv: open [scheme: 'httpd 8000 [
            n: n + 1
            expected: copy str
            repeat n [append expected expected]
            lib.print [{SERVER} n {:} (length of as binary! expected) {bytes}]
            render expected
        ]]
    ] then (func [e] [print mold/limit e 2000])
</code></pre>
<p>If you do something like fetch %index.html, that BLOCK! after the 8000 is executed.  Here what's happening is it's just incrementing a number and doubling the length of the response sent back each time.</p>
<p>The implementation was like this:</p>
<pre><code>    server.locals.handler: func [
        return: [~]
        request [object!]
        response [object!]
    ] compose [
        render: :response.render
        redirect: :response.redirect
        print: :response.print

        (spread (
            match block! server.spec.actions else [default-response]
        ))
    ]
</code></pre>
<p>It wants to override PRINT so that what you print becomes part of the response.  So you're supposed to get these three service functions RENDER / REDIRECT / PRINT as well as access to the REQUEST and RESPONSE objects.</p>
<p>Now that SPREAD is spreading unbound material, this does not work.</p>
<p>PUNCH would be one way of doing this:</p>
<pre><code>    server.locals.handler: func [
        return: [~]
        request [object!]
        response [object!]
    ] compose [
        render: :response.render
        redirect: :response.redirect
        print: :response.print

        (punch [request response render redirect print] as group! (
            match block! server.spec.actions else [default-response]
        ))
    ]
</code></pre>
<p>Though if you had <a href="https://rebol.metaeducation.com/t/hiiamboriss-with/2138">something like WITH</a> you could imagine it like:</p>
<pre><code>    server.locals.handler: func [
        return: [~]
        request [object!]
        response [object!]
    ] compose [
        do with [request response {  ; idea of FENCE! representing object
            render: :response.render
            redirect: :response.redirect
            print: :response.print
        }] (
            match block! server.spec.actions else [default-response]
        )
    ]
</code></pre>
<p>The COMPOSE is not strictly necessary there, but it lets you do at least a little work once vs. every time the function is called.</p>
<p>Which points to something useful about the PUNCH-based concept... beyond being <a href="https://rebol.metaeducation.com/t/what-dialects-need-from-binding/2111">usable in dialects where things like DO WITH aren't available</a>... it has the potential to perform better (assuming punch-merges are faster than usermode function calls, which I believe they would be).</p>
          <p><a href="https://rebol.metaeducation.com/t/httpd-response-handler-hook/2144/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/httpd-response-handler-hook/2144/1</link>
        <pubDate>Mon, 05 Feb 2024 19:02:22 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2144-1</guid>
        <source url="https://rebol.metaeducation.com/t/httpd-response-handler-hook/2144.rss">HTTPD Response Handler Hook</source>
      </item>
  </channel>
</rss>
