<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>REIFY vs. LIFT vs.... SOMETHING</title>
    <link>https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001</link>
    <description>Originally I suggested that REIFY of an isotope would give its plain form, and you would LIFT it if you wanted a quasiform:

[quote=&quot;hostilefork, post:1, topic:1989&quot;]
* The generic and reversible way to make them real it is to LIFT them and get `~okay~` and `~null~` quasiforms, which you can UNLIFT back to the antiforms
* The readable way to make them real is to REIFY them and get `okay` and `null` as plain WORD!, which only gets turned back into the antiform if they are bound to variables that hold the antiforms, and you evaluate them.
[/quote]

*But that&#39;s not a full coverage answer.* 

* An operator that takes everything &quot;one level up&quot;, where antiforms become quasiforms and everything else gets a quote level added.

      &gt;&gt; okay
      == \~okay~\  ; antiform

      &gt;&gt; lift okay
      == ~okay~

      &gt;&gt; lift 10
      == &#39;10

* An operator that leaves non-antiforms as they are, but turns antiforms into their quasiforms (and I think this probably is best called REIFY):

      &gt;&gt; okay
      == \~okay~\  ; antiform

      &gt;&gt; reify okay
      == ~okay~

      &gt;&gt; reify 10
      == 10

* An operator that leaves non-antiforms as they are, but turns antiforms into their plain forms:

      &gt;&gt; okay
      == \~okay~\  ; antiform

      &gt;&gt; something okay
      == okay

      &gt;&gt; something 10
      == 10

Specifically for FRAME! antiforms (actions) being turned into plain FRAME!, I used an interim term UNRUN, but that&#39;s pretty awful.  *(UPDATE: it&#39;s still around, years later.)*

It could be a refinement to REIFY, like REIFY:PLAIN.  But at that point it could be two steps that might be clearer: NOQUASI REIFY, where NOQUASI would be like NOQUOTE and not complain if the thing you passed it was not a quasiform.

Maybe... CONCRETIZE?  That sounds like it might do a bit more work than what REIFY does :-/

    &gt;&gt; okay
    == \~okay~\  ; antiform

    &gt;&gt; concretize okay
    == okay

    &gt;&gt; concretize 10
    == 10

It&#39;s not awful.  A shorter word would be CONCRETE.

    &gt;&gt; okay
    == \~okay~\  ; antiform

    &gt;&gt; concrete okay
    == okay

    &gt;&gt; concrete 10
    == 10

We do mess a bit with wording, but here it would be more of an adjective.

**Another big question is what the antonym of REIFY would be.**  That is to say something that leaves all input values alone except for quasi forms, and gives you back an antiform.

    &gt;&gt; unreify first [~okay~ 1020]
    == \~okay~\  ; antiform

    &gt;&gt; unreify second [~okay~ 1020]
    == 1020

Unfortunately, there&#39;s not a good opposite word for REIFY.  Maybe DEGRADE?

    &gt;&gt; degrade first [~okay~ 1020]
    == \~okay~\  ; antiform

    &gt;&gt; degrade second [~okay~ 1020]
    == 1020

I think I&#39;ll go with DEGRADE a while and see how I like it.  The names can be juggled around once all the necessary behaviors are assembled.</description>
    
    <lastBuildDate>Mon, 02 Jun 2025 19:21:13 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>REIFY vs. LIFT vs.... SOMETHING</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2001">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>An operator that leaves non-antiforms as they are, but turns antiforms into their plain forms:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; okay
== \~okay~\  ; antiform

&gt;&gt; something okay
== okay

&gt;&gt; something 10
== 10
</code></pre>
</blockquote>
</aside>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2001">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It could be a refinement to REIFY, like REIFY:PLAIN. But at that point it could be two steps that might be clearer: NOQUASI REIFY, where NOQUASI would be like NOQUOTE and not complain if the thing you passed it was not a quasiform.</p>
</blockquote>
</aside>
<p>I think <strong><code>(noquasi reify ...)</code></strong> and <strong><code>(reify:noquasi ...)</code></strong> are probably about as good as this gets.</p>
<p>One argument against providing both is that it's cleaner.  Another is that <a href="https://rebol.metaeducation.com/t/intrinsics-functions-without-frames/2050">a function with one argument and no refinements can be an intrinsic</a>.  So having just <strong><code>noquasi reify</code></strong> would be faster than chain dispatch, as well as speed up all REIFY operations.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2001">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Maybe... CONCRETIZE? That sounds like it might do a bit more work than what REIFY does :-/</p>
</blockquote>
</aside>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2001">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's not awful. A shorter word would be CONCRETE.</p>
</blockquote>
</aside>
<p>No one will know what that means.  If you're in a script where you're saying <strong><code>noquasi reify</code></strong> over and over so often it's creating problems you can define it however you like (<strong><code>nqr: get $noquasi/reify</code></strong>)</p>
<p>Maybe not everything needs a single word.</p>
<p><a href="https://www.youtube.com/watch?v=qfEORP5pbCo">When youâ€™re about to defenestrate French...</a></p>

          <p><a href="https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001/6</link>
        <pubDate>Fri, 30 Aug 2024 14:34:55 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2001-6</guid>
        <source url="https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001.rss">REIFY vs. LIFT vs.... SOMETHING</source>
      </item>
      <item>
        <title>REIFY vs. LIFT vs.... SOMETHING</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Not being an English native speaker I'll have to trust you on this.</p>
          <p><a href="https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001/3</link>
        <pubDate>Thu, 12 Jan 2023 21:24:24 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2001-3</guid>
        <source url="https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001.rss">REIFY vs. LIFT vs.... SOMETHING</source>
      </item>
      <item>
        <title>REIFY vs. LIFT vs.... SOMETHING</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Originally I suggested that REIFY of an isotope would give its plain form, and you would LIFT it if you wanted a quasiform:</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1989">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/1989/1">On another topic</a></div>
<blockquote>
<ul>
<li>The generic and reversible way to make them real it is to LIFT them and get <code>~okay~</code> and <code>~null~</code> quasiforms, which you can UNLIFT back to the antiforms</li>
<li>The readable way to make them real is to REIFY them and get <code>okay</code> and <code>null</code> as plain WORD!, which only gets turned back into the antiform if they are bound to variables that hold the antiforms, and you evaluate them.</li>
</ul>
</blockquote>
</aside>
<p><em>But that's not a full coverage answer.</em></p>
<ul>
<li>
<p>An operator that takes everything "one level up", where antiforms become quasiforms and everything else gets a quote level added.</p>
<pre><code>&gt;&gt; okay
== \~okay~\  ; antiform

&gt;&gt; lift okay
== ~okay~

&gt;&gt; lift 10
== '10
</code></pre>
</li>
<li>
<p>An operator that leaves non-antiforms as they are, but turns antiforms into their quasiforms (and I think this probably is best called REIFY):</p>
<pre><code>&gt;&gt; okay
== \~okay~\  ; antiform

&gt;&gt; reify okay
== ~okay~

&gt;&gt; reify 10
== 10
</code></pre>
</li>
<li>
<p>An operator that leaves non-antiforms as they are, but turns antiforms into their plain forms:</p>
<pre><code>&gt;&gt; okay
== \~okay~\  ; antiform

&gt;&gt; something okay
== okay

&gt;&gt; something 10
== 10
</code></pre>
</li>
</ul>
<p>Specifically for FRAME! antiforms (actions) being turned into plain FRAME!, I used an interim term UNRUN, but that's pretty awful.  <em>(UPDATE: it's still around, years later.)</em></p>
<p>It could be a refinement to REIFY, like REIFY:PLAIN.  But at that point it could be two steps that might be clearer: NOQUASI REIFY, where NOQUASI would be like NOQUOTE and not complain if the thing you passed it was not a quasiform.</p>
<p>Maybe... CONCRETIZE?  That sounds like it might do a bit more work than what REIFY does :-/</p>
<pre><code>&gt;&gt; okay
== \~okay~\  ; antiform

&gt;&gt; concretize okay
== okay

&gt;&gt; concretize 10
== 10
</code></pre>
<p>It's not awful.  A shorter word would be CONCRETE.</p>
<pre><code>&gt;&gt; okay
== \~okay~\  ; antiform

&gt;&gt; concrete okay
== okay

&gt;&gt; concrete 10
== 10
</code></pre>
<p>We do mess a bit with wording, but here it would be more of an adjective.</p>
<p><strong>Another big question is what the antonym of REIFY would be.</strong>  That is to say something that leaves all input values alone except for quasi forms, and gives you back an antiform.</p>
<pre><code>&gt;&gt; unreify first [~okay~ 1020]
== \~okay~\  ; antiform

&gt;&gt; unreify second [~okay~ 1020]
== 1020
</code></pre>
<p>Unfortunately, there's not a good opposite word for REIFY.  Maybe DEGRADE?</p>
<pre><code>&gt;&gt; degrade first [~okay~ 1020]
== \~okay~\  ; antiform

&gt;&gt; degrade second [~okay~ 1020]
== 1020
</code></pre>
<p>I think I'll go with DEGRADE a while and see how I like it.  The names can be juggled around once all the necessary behaviors are assembled.</p>
          <p><a href="https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001/1</link>
        <pubDate>Thu, 05 Jan 2023 21:26:08 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2001-1</guid>
        <source url="https://rebol.metaeducation.com/t/reify-vs-lift-vs-something/2001.rss">REIFY vs. LIFT vs.... SOMETHING</source>
      </item>
  </channel>
</rss>
