<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rebmake Shows Why NULLs Shouldn&#39;t Vaporize in REDUCE</title>
    <link>https://rebol.metaeducation.com/t/rebmake-shows-why-nulls-shouldnt-vaporize-in-reduce/2205</link>
    <description>*Before there were [distinct NULL and VOID states](https://rebol.metaeducation.com/t/null-void-trash-evolution-from-none-unset/2422), there was only NULL... and it was the product of failed conditionals.  There was a debate about whether NULL should be an error if encountered by REDUCE, or if it should vaporize.  This is a little piece of circa 2021 history I extracted about the first case I saw that represented a problem, that I edited out of a thread I was paring down.*

---

&gt; Both changes are now in master:
&gt;
&gt; * [**null = do []**](https://github.com/metaeducation/ren-c/commit/988fc71103f5c75c0656a688ac3c3a36fdba1c9b)
&gt; * [**[] = reduce [null]**](https://github.com/metaeducation/ren-c/commit/056d9f336050a1813426916e41b604e9bcbc70b9)
&gt;
&gt; The new REDUCE behavior has been advocated now by @rgchris, @BlackATTR, @giuliolunati, @gchiu, and was my original choice also:
&gt;
&gt;
&gt;     &gt;&gt; append [&lt;a&gt; &lt;b&gt;] spread reduce [&lt;c&gt; if null [&lt;d&gt;]]
&gt;     == [&lt;a&gt; &lt;b&gt; &lt;c&gt;]
&gt;
&gt; Up until now it has errored to leave the option open, without yet breaking the &quot;N expressions in, N values out&quot; dogma espoused by DocKimbel.

---

Hmmm...well when I tried bootstrapping the updated executable, here is an example of where NULL vaporizing in REDUCE bit me:

It was some of Shixin&#39;s code from rebmake.

        if not let suffix: find reduce [
            #application target-platform.exe-suffix
            #dynamic-library target-platform.dll-suffix
            #static-library target-platform.archive-suffix
            #object-library target-platform.archive-suffix
            #object-file target-platform.obj-suffix
        ] project/class [return null]

        suffix: second suffix

I had changed the suffixes in the base class of some objects from being blank to NULL.  This was in order to be more likely to catch usage problems of those suffixes, when blank is more quiet about many operations (e.g. they will silently append, like classical #[none] would).

NULL provides a gentle sort of alarm...in the sense that it is falsey and can&#39;t be e.g. silently appended without an operation converting it to a value.  This is good for callsite comprehension.

But with NULL vanishing here, code in this style has problems.  I&#39;m not sure there&#39;s anything particularly wrong about code in this style.  So we still might want to think about this.</description>
    
    <lastBuildDate>Mon, 02 Jun 2025 17:38:38 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://rebol.metaeducation.com/t/rebmake-shows-why-nulls-shouldnt-vaporize-in-reduce/2205.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rebmake Shows Why NULLs Shouldn&#39;t Vaporize in REDUCE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2205">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But with NULL vanishing here, code in this style has problems. I'm not sure there's anything particularly wrong about code in this style. So we still might want to think about this.</p>
</blockquote>
</aside>
<p>Looking at this through 2024 eyes, <strong>clearly there is something wrong with code in this style</strong> ... it can't/won't work.</p>
<p>What's good about NULL erroring here is it at least lets you know that what you're doing is broken.</p>
<p>Use a switch statement!</p>
<pre><code>let suffix: switch project.class [
    #application [target-platform.exe-suffix]
    #dynamic-library [target-platform.dll-suffix]
    #static-library [target-platform.archive-suffix]
    #object-library [target-platform.archive-suffix]
    #object-file [target-platform.obj-suffix]
 ] else [
    return null
 ]
</code></pre>
<p>But if you <em>really</em> want to make a block for some reason, you can round-trip your antiforms with REIFY and DEGRADE.</p>
<pre><code>&gt;&gt; suffix: null
== \~null~\  ; antiform

&gt;&gt; reduce [#application suffix]
** Script Error: non-NULL value required (see OPT, LIFT, REIFY)

&gt;&gt; reify suffix  ; makes a quasiform out of antiforms, passes all else as-is
== ~null~

&gt;&gt; reduce [#application reify suffix]
== [#application ~null~]

&gt;&gt; second reduce [#application reify suffix]
== ~null~

&gt;&gt; degrade second reduce [#application reify suffix]
== \~null~\  ; antiform
</code></pre>
<p>So long as you know the data you're working with doesn't have quasiforms that you wanted to pick out as quasiforms, you don't have to use LIFT and UNLIFT... meaning only your antiforms will get transformed, vs. adding quotes to everything else.</p>
<p>Sorry to those for whom this seems like tough love.  But trust me from experience <em>(which has come from trying to maintain things like Rebmake!)</em> that if you only have reified nothings, then you wind up making a mess when you get confused about when something that isn't supposed to be a thing gets treated as a thing.</p>
<p><strong>Antiforms are your friends.  They're here to help.</strong></p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/handshake.png?v=14" title=":handshake:" class="emoji only-emoji" alt=":handshake:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/rebmake-shows-why-nulls-shouldnt-vaporize-in-reduce/2205/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/rebmake-shows-why-nulls-shouldnt-vaporize-in-reduce/2205/2</link>
        <pubDate>Thu, 22 Aug 2024 01:30:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2205-2</guid>
        <source url="https://rebol.metaeducation.com/t/rebmake-shows-why-nulls-shouldnt-vaporize-in-reduce/2205.rss">Rebmake Shows Why NULLs Shouldn&#39;t Vaporize in REDUCE</source>
      </item>
      <item>
        <title>Rebmake Shows Why NULLs Shouldn&#39;t Vaporize in REDUCE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>Before there were <a href="https://rebol.metaeducation.com/t/null-void-trash-evolution-from-none-unset/2422">distinct NULL and VOID states</a>, there was only NULL... and it was the product of failed conditionals.  There was a debate about whether NULL should be an error if encountered by REDUCE, or if it should vaporize.  This is a little piece of circa 2021 history I extracted about the first case I saw that represented a problem, that I edited out of a thread I was paring down.</em></p>
<hr>
<blockquote>
<p>Both changes are now in master:</p>
<ul>
<li><a href="https://github.com/metaeducation/ren-c/commit/988fc71103f5c75c0656a688ac3c3a36fdba1c9b"><strong>null = do []</strong></a></li>
<li><a href="https://github.com/metaeducation/ren-c/commit/056d9f336050a1813426916e41b604e9bcbc70b9"><strong>[] = reduce [null]</strong></a></li>
</ul>
<p>The new REDUCE behavior has been advocated now by <a class="mention" href="https://rebol.metaeducation.com/u/rgchris">@rgchris</a>, <a class="mention" href="https://rebol.metaeducation.com/u/blackattr">@BlackATTR</a>, <a class="mention" href="https://rebol.metaeducation.com/u/giuliolunati">@giuliolunati</a>, <a class="mention" href="https://rebol.metaeducation.com/u/gchiu">@gchiu</a>, and was my original choice also:</p>
<pre><code>&gt;&gt; append [&lt;a&gt; &lt;b&gt;] spread reduce [&lt;c&gt; if null [&lt;d&gt;]]
== [&lt;a&gt; &lt;b&gt; &lt;c&gt;]
</code></pre>
<p>Up until now it has errored to leave the option open, without yet breaking the "N expressions in, N values out" dogma espoused by DocKimbel.</p>
</blockquote>
<hr>
<p>Hmmm...well when I tried bootstrapping the updated executable, here is an example of where NULL vaporizing in REDUCE bit me:</p>
<p>It was some of Shixin's code from rebmake.</p>
<pre><code>    if not let suffix: find reduce [
        #application target-platform.exe-suffix
        #dynamic-library target-platform.dll-suffix
        #static-library target-platform.archive-suffix
        #object-library target-platform.archive-suffix
        #object-file target-platform.obj-suffix
    ] project/class [return null]

    suffix: second suffix
</code></pre>
<p>I had changed the suffixes in the base class of some objects from being blank to NULL.  This was in order to be more likely to catch usage problems of those suffixes, when blank is more quiet about many operations (e.g. they will silently append, like classical #[none] would).</p>
<p>NULL provides a gentle sort of alarm...in the sense that it is falsey and can't be e.g. silently appended without an operation converting it to a value.  This is good for callsite comprehension.</p>
<p>But with NULL vanishing here, code in this style has problems.  I'm not sure there's anything particularly wrong about code in this style.  So we still might want to think about this.</p>
          <p><a href="https://rebol.metaeducation.com/t/rebmake-shows-why-nulls-shouldnt-vaporize-in-reduce/2205/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/rebmake-shows-why-nulls-shouldnt-vaporize-in-reduce/2205/1</link>
        <pubDate>Thu, 10 Dec 2020 19:59:04 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2205-1</guid>
        <source url="https://rebol.metaeducation.com/t/rebmake-shows-why-nulls-shouldnt-vaporize-in-reduce/2205.rss">Rebmake Shows Why NULLs Shouldn&#39;t Vaporize in REDUCE</source>
      </item>
  </channel>
</rss>
