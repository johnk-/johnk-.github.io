<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Canonical List Of Illegal-But-Interesting Tokens</title>
    <link>https://rebol.metaeducation.com/t/canonical-list-of-illegal-but-interesting-tokens/2378</link>
    <description>When I first made SIGIL!, I was trying to make every element have an answer to the SIGIL OF question.  Note that plain types return null:

    &gt;&gt; sigil of first [@foo]
    == @

    &gt;&gt; sigil of first [foo]
    == ~null~  ; anti

In pondering [whether SIGIL! should carry a binding](https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376), I realized that two of the SIGIL! we had were just bad ideas.

    &gt;&gt; sigil of first [~foo~]
    == ~~

    &gt;&gt; sigil of first [&#39;&#39;foo]
    == &#39;

These had always been dicey.  Clearly the quasiform sigil can&#39;t be just **`~`** as that&#39;s quasiform blank, so the &quot;weird&quot; compromise was to have it be two tildes, to reflect that usually (except in the case of quasiform blank) you have two tildes.

And then there&#39;s the dodginess of answering the number of quotes for the quote sigil:

    &gt;&gt; quotes of first [&#39;&#39;foo]
    == 2

    &gt;&gt; quotes of first [&#39;]
    == 1

    &gt;&gt; quotes of first [&#39;&#39;]
    == 1

**So I decided to kill these.**  Asking for SIGIL OF on a QUOTED! or QUASIFORM! will raise an error.  Since it&#39;s a raised error and not a failure, you can use TRY to get nullptr.

    &gt;&gt; sigil of first [&#39;&#39;@foo]
    ** Error: Can&#39;t take SIGIL OF a quoted type

    &gt;&gt; try sigil of first [&#39;&#39;@foo]
    == ~null~  ; anti

    &gt;&gt; sigil of noquote first [&#39;&#39;@foo]
    == @

## No Legal Meaning As Value Means Other Purposes Available

Since we know that **`&#39;`** doesn&#39;t sanely represent a value, it could signal something to the scanner, or to the reader.

Maybe it could be useful for line continuations.

     reverse copy imagine-writing your-long-line-here append [a b c] 
         &#39; [d e f]

I&#39;ve struggled with that question of how to know when a line is being continued.  And if we know that &#39; means nothing due not being able to quote nothing, it could be used for that.  And perhaps it would cue the scanner to not do a new-line

    &gt;&gt; load --{reverse copy imagine-writing your-long-line-here append [a b c] 
         &#39; [d e f]}--
    == reverse copy imagine-writing your-long-line-here append [a b c] [d e f]

This would mean that if your code applied significance to newlines, you could work around it and get the behavior you want for things being all on one line, even if you don&#39;t write it that way.

The idea here would be that it would be specifically legal only on newlines, so you couldn&#39;t write:

    block: [&#39; &#39; &#39;]  ; would be an error

As for **`~~`**, it may be that it&#39;s a quasiform of a &quot;length two&quot; blank.  Allowing blanks to have a length is an old debate:

  https://rebol.metaeducation.com/t/should-literal-blank-be-one-or-two-underscores/222/14?u=hostilefork

## Hence I Think Keeping A List Is Good

A list of things that have no meaning is a good resource for when you want to do something out of band.

Another thing I&#39;ll throw out as having no meaning is backslash.  But I also think that it&#39;s important to leave some room for not definiing things, so that preprocessing tasks or other trickery have some choices to put their own escapes into the code.</description>
    
    <lastBuildDate>Mon, 28 Apr 2025 20:07:20 +0000</lastBuildDate>
    <category>Lexer</category>
    <atom:link href="https://rebol.metaeducation.com/t/canonical-list-of-illegal-but-interesting-tokens/2378.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Canonical List Of Illegal-But-Interesting Tokens</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When I first made SIGIL!, I was trying to make every element have an answer to the SIGIL OF question.  Note that plain types return null:</p>
<pre><code>&gt;&gt; sigil of first [@foo]
== @

&gt;&gt; sigil of first [foo]
== ~null~  ; anti
</code></pre>
<p>In pondering <a href="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376">whether SIGIL! should carry a binding</a>, I realized that two of the SIGIL! we had were just bad ideas.</p>
<pre><code>&gt;&gt; sigil of first [~foo~]
== ~~

&gt;&gt; sigil of first [''foo]
== '
</code></pre>
<p>These had always been dicey.  Clearly the quasiform sigil can't be just <strong><code>~</code></strong> as that's quasiform blank, so the "weird" compromise was to have it be two tildes, to reflect that usually (except in the case of quasiform blank) you have two tildes.</p>
<p>And then there's the dodginess of answering the number of quotes for the quote sigil:</p>
<pre><code>&gt;&gt; quotes of first [''foo]
== 2

&gt;&gt; quotes of first [']
== 1

&gt;&gt; quotes of first ['']
== 1
</code></pre>
<p><strong>So I decided to kill these.</strong>  Asking for SIGIL OF on a QUOTED! or QUASIFORM! will raise an error.  Since it's a raised error and not a failure, you can use TRY to get nullptr.</p>
<pre><code>&gt;&gt; sigil of first [''@foo]
** Error: Can't take SIGIL OF a quoted type

&gt;&gt; try sigil of first [''@foo]
== ~null~  ; anti

&gt;&gt; sigil of noquote first [''@foo]
== @
</code></pre>
<h2><a name="p-8056-no-legal-meaning-as-value-means-other-purposes-available-1" class="anchor" href="https://rebol.metaeducation.com#p-8056-no-legal-meaning-as-value-means-other-purposes-available-1"></a>No Legal Meaning As Value Means Other Purposes Available</h2>
<p>Since we know that <strong><code>'</code></strong> doesn't sanely represent a value, it could signal something to the scanner, or to the reader.</p>
<p>Maybe it could be useful for line continuations.</p>
<pre><code> reverse copy imagine-writing your-long-line-here append [a b c] 
     ' [d e f]
</code></pre>
<p>I've struggled with that question of how to know when a line is being continued.  And if we know that ' means nothing due not being able to quote nothing, it could be used for that.  And perhaps it would cue the scanner to not do a new-line</p>
<pre><code>&gt;&gt; load --{reverse copy imagine-writing your-long-line-here append [a b c] 
     ' [d e f]}--
== reverse copy imagine-writing your-long-line-here append [a b c] [d e f]
</code></pre>
<p>This would mean that if your code applied significance to newlines, you could work around it and get the behavior you want for things being all on one line, even if you don't write it that way.</p>
<p>The idea here would be that it would be specifically legal only on newlines, so you couldn't write:</p>
<pre><code>block: [' ' ']  ; would be an error
</code></pre>
<p>As for <strong><code>~~</code></strong>, it may be that it's a quasiform of a "length two" blank.  Allowing blanks to have a length is an old debate:</p>
<p><a href="https://rebol.metaeducation.com/t/should-literal-blank-be-one-or-two-underscores/222/14" class="inline-onebox">Should literal BLANK! be one, or two underscores? - #14 by hostilefork</a></p>
<h2><a name="p-8056-hence-i-think-keeping-a-list-is-good-2" class="anchor" href="https://rebol.metaeducation.com#p-8056-hence-i-think-keeping-a-list-is-good-2"></a>Hence I Think Keeping A List Is Good</h2>
<p>A list of things that have no meaning is a good resource for when you want to do something out of band.</p>
<p>Another thing I'll throw out as having no meaning is backslash.  But I also think that it's important to leave some room for not definiing things, so that preprocessing tasks or other trickery have some choices to put their own escapes into the code.</p>
          <p><a href="https://rebol.metaeducation.com/t/canonical-list-of-illegal-but-interesting-tokens/2378/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/canonical-list-of-illegal-but-interesting-tokens/2378/1</link>
        <pubDate>Sat, 22 Mar 2025 15:15:44 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2378-1</guid>
        <source url="https://rebol.metaeducation.com/t/canonical-list-of-illegal-but-interesting-tokens/2378.rss">Canonical List Of Illegal-But-Interesting Tokens</source>
      </item>
  </channel>
</rss>
