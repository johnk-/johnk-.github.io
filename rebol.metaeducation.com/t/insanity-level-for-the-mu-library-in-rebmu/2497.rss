<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;Insanity Level&quot; for The Mu-Library In Rebmu</title>
    <link>https://rebol.metaeducation.com/t/insanity-level-for-the-mu-library-in-rebmu/2497</link>
    <description>Rebmu has a fairly strict design principle, which is that a typical library function can only be overridden with a version that is a *superset* of its functionality.  It can have special handling for things that would cause panics, but should give the same output for any valid input.

As an example: IF should not be redefined to something that would consider 0 to be conditionally false.  If you write regular old lowercase code, you always want:

    rebmu&gt;&gt; if 0 [print &quot;truthy&quot;]
    truthy

However... IF typically doesn&#39;t allow VOIDs, TRASH!, ERROR! as conditions.  We could treat them all as falsey if we liked, or truthy.  Or do various weird things (IF of a VOID could make the whole IF expression void...)

And at the moment, WORD!s are illegal in the branch slot (the branch is not evaluated by default, it is taken literally for **[&quot;soft literal branching&quot;](https://rebol.metaeducation.com/t/soft-quoted-branching-light-elegant-fast/1020)**).  But if WORD! wasn&#39;t an error, what could it mean?

I like the idea of it being able to build a specialized action out of the branch:

    rebmu&gt;&gt; if 0 print &quot;truthy&quot;
    == truthy

    rebmu&gt;&gt; if null print &quot;truthy&quot;
    == \~null~\  ; antiform

So that would be like you had written:

    rebmu&gt;&gt; if 0 (specialize print/ [&quot;truthy&quot;])
    == truthy

    rebmu&gt;&gt; if null (specialize print/ [&quot;truthy&quot;])
    == \~null~\  ; antiform

It could save the `[` and `]` off of a lot of calls, I think it would be particularly interesting with things like function:

    z: function [x y] any [equal? 10 add x y, equal? 20 subtract x y]

Which would wind up being written  like:

    Zfn[xY]ay[e?10adXyE?20sbXy]

Of course this is just the tip of the iceberg.

## Lots I Could Talk About, But Wanted To Mention Something

In thinking about the idea of a version of IF that didn&#39;t raise ERROR!s but treated them as false, I thought about how maddening that would be to debug.

&quot;True Rebmu&quot; should probably be as liberal as it can about finding meaning for inputs, without concern for debuggability.  But you shouldn&#39;t dial the settings for insane unless you&#39;re actually using them.

So I think in the Rebmu header, there should be some configuration you can do.

    Rebmu [
        file: %99-bottles.rebmu
        title: &quot;99 Bottles of Beer on the Wall, Code Golfed&quot;
        configure: [
            if: [:errors-are-falsey :void-if-void-condition]
            ...
        ]
    ]

None of the options would be contradictory...they&#39;re all just creeping you along the path to ultimate &quot;insanity mode&quot; where it&#39;s maximally permissive (the zero-header run state, to be the most minimal characters for code golf).  Headers are just documentation of which facilities you&#39;re actually using on purpose in the program, to help debugging by not enabling behaviors you won&#39;t use.

For things like ERROR! are falsey in conditionals, it&#39;s something you should be able to turn on for all conditionals or selectively for specific ones.

This resembles the kinds of problems of configuration for &quot;real&quot; tasks, so will have to see how things like [RebindableSyntax](https://rebol.metaeducation.com/t/evaluator-hooking-rebindablesyntax/2443) can help.</description>
    
    <lastBuildDate>Tue, 24 Jun 2025 19:34:34 +0000</lastBuildDate>
    <category>Rebmu</category>
    <atom:link href="https://rebol.metaeducation.com/t/insanity-level-for-the-mu-library-in-rebmu/2497.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;Insanity Level&quot; for The Mu-Library In Rebmu</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebmu has a fairly strict design principle, which is that a typical library function can only be overridden with a version that is a <em>superset</em> of its functionality.  It can have special handling for things that would cause panics, but should give the same output for any valid input.</p>
<p>As an example: IF should not be redefined to something that would consider 0 to be conditionally false.  If you write regular old lowercase code, you always want:</p>
<pre><code>rebmu&gt;&gt; if 0 [print "truthy"]
truthy
</code></pre>
<p>However... IF typically doesn't allow VOIDs, TRASH!, ERROR! as conditions.  We could treat them all as falsey if we liked, or truthy.  Or do various weird things (IF of a VOID could make the whole IF expression void...)</p>
<p>And at the moment, WORD!s are illegal in the branch slot (the branch is not evaluated by default, it is taken literally for <strong><a href="https://rebol.metaeducation.com/t/soft-quoted-branching-light-elegant-fast/1020">"soft literal branching"</a></strong>).  But if WORD! wasn't an error, what could it mean?</p>
<p>I like the idea of it being able to build a specialized action out of the branch:</p>
<pre><code>rebmu&gt;&gt; if 0 print "truthy"
== truthy

rebmu&gt;&gt; if null print "truthy"
== \~null~\  ; antiform
</code></pre>
<p>So that would be like you had written:</p>
<pre><code>rebmu&gt;&gt; if 0 (specialize print/ ["truthy"])
== truthy

rebmu&gt;&gt; if null (specialize print/ ["truthy"])
== \~null~\  ; antiform
</code></pre>
<p>It could save the <code>[</code> and <code>]</code> off of a lot of calls, I think it would be particularly interesting with things like function:</p>
<pre><code>z: function [x y] any [equal? 10 add x y, equal? 20 subtract x y]
</code></pre>
<p>Which would wind up being written  like:</p>
<pre><code>Zfn[xY]ay[e?10adXyE?20sbXy]
</code></pre>
<p>Of course this is just the tip of the iceberg.</p>
<h2><a name="p-8456-lots-i-could-talk-about-but-wanted-to-mention-something-1" class="anchor" href="https://rebol.metaeducation.com#p-8456-lots-i-could-talk-about-but-wanted-to-mention-something-1"></a>Lots I Could Talk About, But Wanted To Mention Something</h2>
<p>In thinking about the idea of a version of IF that didn't raise ERROR!s but treated them as false, I thought about how maddening that would be to debug.</p>
<p>"True Rebmu" should probably be as liberal as it can about finding meaning for inputs, without concern for debuggability.  But you shouldn't dial the settings for insane unless you're actually using them.</p>
<p>So I think in the Rebmu header, there should be some configuration you can do.</p>
<pre><code>Rebmu [
    file: %99-bottles.rebmu
    title: "99 Bottles of Beer on the Wall, Code Golfed"
    configure: [
        if: [:errors-are-falsey :void-if-void-condition]
        ...
    ]
]
</code></pre>
<p>None of the options would be contradictory...they're all just creeping you along the path to ultimate "insanity mode" where it's maximally permissive (the zero-header run state, to be the most minimal characters for code golf).  Headers are just documentation of which facilities you're actually using on purpose in the program, to help debugging by not enabling behaviors you won't use.</p>
<p>For things like ERROR! are falsey in conditionals, it's something you should be able to turn on for all conditionals or selectively for specific ones.</p>
<p>This resembles the kinds of problems of configuration for "real" tasks, so will have to see how things like <a href="https://rebol.metaeducation.com/t/evaluator-hooking-rebindablesyntax/2443">RebindableSyntax</a> can help.</p>
          <p><a href="https://rebol.metaeducation.com/t/insanity-level-for-the-mu-library-in-rebmu/2497/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/insanity-level-for-the-mu-library-in-rebmu/2497/1</link>
        <pubDate>Tue, 24 Jun 2025 06:41:41 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2497-1</guid>
        <source url="https://rebol.metaeducation.com/t/insanity-level-for-the-mu-library-in-rebmu/2497.rss">&quot;Insanity Level&quot; for The Mu-Library In Rebmu</source>
      </item>
  </channel>
</rss>
