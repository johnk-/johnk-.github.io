<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Redbol Adaptation to get /ONLY on APPEND, INSERT...</title>
    <link>https://rebol.metaeducation.com/t/redbol-adaptation-to-get-only-on-append-insert/2081</link>
    <description>[/ONLY is Dead](https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607)...*but* Ren-C&#39;s flexibility means you can get it back if you want it, and not break a sweat doing so.   You just become responsible for figuring out what its universal meaning is.  (#goodluckwiththat)

Remember that AUGMENT lets you add parameters to functions.

    &gt;&gt; foo: func [x] [print [&quot;x is&quot; mold x]]
    &gt;&gt; parameters of :foo
    == [x]

    &gt;&gt; foo+: augment :foo [/only &quot;An ONLY parameter&quot;]
    &gt;&gt; parameters of :foo+
    == [x /only]

    &gt;&gt; foo+ 10
    x is 10

    &gt;&gt; foo+/only 10
    x is 10

But adding parameters doesn&#39;t actually do anything but expand the specification.  You have to use another tool like ADAPT or ENCLOSE to make use of the new parameters that FOO never knew about.

    &gt;&gt; foo++: adapt :foo+ [print either only [&quot;/ONLY!&quot;] [&quot;no /ONLY&quot;]]

    &gt;&gt; foo++ 10
    no /ONLY
    x is 10

    &gt;&gt; foo++/only 10
    /ONLY!
    x is 10

So here&#39;s an ONLIFY transformer that adds a refinement to a function, and then injects a little code to pre-process the parameter to make a splice (group isotope) via SPREAD if needed.

    onlify: lambda [
        {Add /ONLY behavior to APPEND, INSERT, CHANGE}
        action [action?]
    ][
        adapt (augment :action [/only &quot;Use quoted semantics for value&quot;]) [
            all [not only, any-array? series, any-array? value] then [
                value: spread value
            ]
            ; ...fall through to normal handling
        ]
    ]

Then you can apply it to the functions:

    append: my onlify  ; e.g. `append: onlify :append` 
    insert: my onlify
    change: my onlify

And there you have it:

    &gt;&gt; append [a b c] [d e]
    == [a b c d e]

    &gt;&gt; append/only [a b c] [d e]
    == [a b c [d e]]</description>
    
    <lastBuildDate>Sat, 16 Dec 2023 05:51:49 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://rebol.metaeducation.com/t/redbol-adaptation-to-get-only-on-append-insert/2081.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Redbol Adaptation to get /ONLY on APPEND, INSERT...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607">/ONLY is Dead</a>...<em>but</em> Ren-C's flexibility means you can get it back if you want it, and not break a sweat doing so.   You just become responsible for figuring out what its universal meaning is.  (<span class="hashtag-raw">#goodluckwiththat</span>)</p>
<p>Remember that AUGMENT lets you add parameters to functions.</p>
<pre><code>&gt;&gt; foo: func [x] [print ["x is" mold x]]
&gt;&gt; parameters of :foo
== [x]

&gt;&gt; foo+: augment :foo [/only "An ONLY parameter"]
&gt;&gt; parameters of :foo+
== [x /only]

&gt;&gt; foo+ 10
x is 10

&gt;&gt; foo+/only 10
x is 10
</code></pre>
<p>But adding parameters doesn't actually do anything but expand the specification.  You have to use another tool like ADAPT or ENCLOSE to make use of the new parameters that FOO never knew about.</p>
<pre><code>&gt;&gt; foo++: adapt :foo+ [print either only ["/ONLY!"] ["no /ONLY"]]

&gt;&gt; foo++ 10
no /ONLY
x is 10

&gt;&gt; foo++/only 10
/ONLY!
x is 10
</code></pre>
<p>So here's an ONLIFY transformer that adds a refinement to a function, and then injects a little code to pre-process the parameter to make a splice (group isotope) via SPREAD if needed.</p>
<pre><code>onlify: lambda [
    {Add /ONLY behavior to APPEND, INSERT, CHANGE}
    action [action?]
][
    adapt (augment :action [/only "Use quoted semantics for value"]) [
        all [not only, any-array? series, any-array? value] then [
            value: spread value
        ]
        ; ...fall through to normal handling
    ]
]
</code></pre>
<p>Then you can apply it to the functions:</p>
<pre><code>append: my onlify  ; e.g. `append: onlify :append` 
insert: my onlify
change: my onlify
</code></pre>
<p>And there you have it:</p>
<pre><code>&gt;&gt; append [a b c] [d e]
== [a b c d e]

&gt;&gt; append/only [a b c] [d e]
== [a b c [d e]]
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/redbol-adaptation-to-get-only-on-append-insert/2081/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/redbol-adaptation-to-get-only-on-append-insert/2081/1</link>
        <pubDate>Thu, 21 Jul 2022 09:11:10 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2081-1</guid>
        <source url="https://rebol.metaeducation.com/t/redbol-adaptation-to-get-only-on-append-insert/2081.rss">Redbol Adaptation to get /ONLY on APPEND, INSERT...</source>
      </item>
  </channel>
</rss>
