<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should SIGIL! Be A Type, Or Just Decorated SPACE?</title>
    <link>https://rebol.metaeducation.com/t/should-sigil-be-a-type-or-just-decorated-space/2451</link>
    <description>[quote=&quot;hostilefork, post:2, topic:2447&quot;]
This could also give us a verb:

```
&gt;&gt; lift [a b c]
== ^[a b c]
```
[/quote]

When you consider this, it might suggest there&#39;s no SIGIL! *datatype*... they&#39;re just sigilized states of space ([note that _ is now the space character literal, not a unique unit type](https://rebol.metaeducation.com/t/how-does-blank-interact-with-strings-binary/2287/3?u=hostilefork))

    &gt;&gt; lift _
    == ^

    &gt;&gt; pin _
    == @

    &gt;&gt; tie _
    == $

That wouldn&#39;t change anything really about the functions asking questions like SIGIL OF.  Same difference:

    assert [&#39;$ = sigil of first [$abc]]

It does mean we don&#39;t need to spend one of 63 fundamental datatypes on SIGIL!, which isn&#39;t totally useless.

It also means that we don&#39;t have to worry about explaining the difference between **`[$ @ ^]`** and **`[$_ @_ ^_]`**  This seems like a pretty big win:  the value of being able to decorate spaces in this way seems like it would be far outweighed by the cognitive load of having these forms be different.

Also, **`[$$ $@ $^ @$ @@ @^ ^$ ^@ ^^]`** would not exist.

As obviously good as forbidding those may seem...I strangely proposed using things like this back when COMPOSE didn&#39;t use the current environment, so I was thinking about bindable SIGIL!s:

    &gt;&gt; $$
    == $  ; bound

    &gt;&gt; bar: 1020

    &gt;&gt; compose2-old $$ [foo $bar baz]
    == [foo 1020 baz]

Now this is less of a concern, since COMPOSE2 will use the current environment, so it can work with a Sigil that is not bound:

    &gt;&gt; bar: 1020

    &gt;&gt; compose2 &#39;$ [foo $bar baz]
    == [foo 1020 baz]

Actually, the whole priority of being able to pass the environment by means of the pattern is pretty much gone.  It could just be an additional parameter to COMPOSE for the few cases that use it, and that would actually be simpler than the rigamarole and confusion of trying to put the context onto the pattern itself... which was an artifact of when COMPOSE syntactically needed to capture the environment to work.</description>
    
    <lastBuildDate>Thu, 15 May 2025 10:20:54 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-sigil-be-a-type-or-just-decorated-space/2451.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should SIGIL! Be A Type, Or Just Decorated SPACE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2447">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447/2">New Names for ^FOO, @FOO, and $FOO</a></div>
<blockquote>
<p>This could also give us a verb:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; lift [a b c]
== ^[a b c]
</code></pre>
</blockquote>
</aside>
<p>When you consider this, it might suggest there's no SIGIL! <em>datatype</em>... they're just sigilized states of space (<a href="https://rebol.metaeducation.com/t/how-does-blank-interact-with-strings-binary/2287/3">note that _ is now the space character literal, not a unique unit type</a>)</p>
<pre><code>&gt;&gt; lift _
== ^

&gt;&gt; pin _
== @

&gt;&gt; tie _
== $
</code></pre>
<p>That wouldn't change anything really about the functions asking questions like SIGIL OF.  Same difference:</p>
<pre><code>assert ['$ = sigil of first [$abc]]
</code></pre>
<p>It does mean we don't need to spend one of 63 fundamental datatypes on SIGIL!, which isn't totally useless.</p>
<p>It also means that we don't have to worry about explaining the difference between <strong><code>[$ @ ^]</code></strong> and <strong><code>[$_ @_ ^_]</code></strong>  This seems like a pretty big win:  the value of being able to decorate spaces in this way seems like it would be far outweighed by the cognitive load of having these forms be different.</p>
<p>Also, <strong><code>[$$ $@ $^ @$ @@ @^ ^$ ^@ ^^]</code></strong> would not exist.</p>
<p>As obviously good as forbidding those may seem...I strangely proposed using things like this back when COMPOSE didn't use the current environment, so I was thinking about bindable SIGIL!s:</p>
<pre><code>&gt;&gt; $$
== $  ; bound

&gt;&gt; bar: 1020

&gt;&gt; compose2-old $$ [foo $bar baz]
== [foo 1020 baz]
</code></pre>
<p>Now this is less of a concern, since COMPOSE2 will use the current environment, so it can work with a Sigil that is not bound:</p>
<pre><code>&gt;&gt; bar: 1020

&gt;&gt; compose2 '$ [foo $bar baz]
== [foo 1020 baz]
</code></pre>
<p>Actually, the whole priority of being able to pass the environment by means of the pattern is pretty much gone.  It could just be an additional parameter to COMPOSE for the few cases that use it, and that would actually be simpler than the rigamarole and confusion of trying to put the context onto the pattern itself... which was an artifact of when COMPOSE syntactically needed to capture the environment to work.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-sigil-be-a-type-or-just-decorated-space/2451/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-sigil-be-a-type-or-just-decorated-space/2451/1</link>
        <pubDate>Wed, 14 May 2025 03:17:57 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2451-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-sigil-be-a-type-or-just-decorated-space/2451.rss">Should SIGIL! Be A Type, Or Just Decorated SPACE?</source>
      </item>
  </channel>
</rss>
