<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should Things Like TEXT? Fail On NULL</title>
    <link>https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452</link>
    <description>One of the principal ideas of the null state is to be a falsey state a variable can hold that reflects it hasn&#39;t been assigned... but that you can access without getting an error on word fetch.

Increasingly I&#39;ve come to believe that functions should not accept NULL states as arguments, *unless they are specifically designed for doing conditional tests* (e.g. IF needs to take NULL in its condition slot...)

I think that if you write code that says **`if not text? var [...]`** and VAR was null, that should be an error to cue you into the fact that your test was meaningless.  We now have empty splice that can serve a role of a &quot;friendlier&quot; form of nothing (the new BLANK now that _ is SPACE).  So you can use that for your variable if you need tests like this to succeed.

If you really want to &quot;opt out&quot; and get the test to fail on null, there&#39;s OPT which will pass a void... and then that will let you say &quot;I meant to do that&quot;.  (And I think OPT of the ~()~ antiform should probably also return a void state, but you wouldn&#39;t have to do that to get the test to fail if using the empty splice as your blank state).

## Should Testing Quoted Values Soft Fail?

I kind of feel like you&#39;re potentially missing some of the picture if you&#39;re working with quoted values and don&#39;t realize it:

    &gt;&gt; foo: first [&#39;&lt;thing&gt;]
    == &#39;&lt;thing&gt;

    &gt;&gt; tag? foo
    == ~null~  ; anti

I mean, it *is* a tag... it&#39;s just a quoted one.  Same with pinned/lifted/tied values.

    &gt;&gt; bar: @&lt;thing&gt;
    == @&lt;thing&gt;

    &gt;&gt; tag? bar
    == ~null~  ; anti

These could give ERROR! back, and you could say **`try tag? bar`** if you wanted to say &quot;yeah I know it&#39;s quoted, and I want that to not be a match&quot;.

(I&#39;ve discussed leading colon as a shorthand for TRY in the modern world, so it could be **`:tag? bar`** in that world, for people who like brevity.)

I don&#39;t think having a speedbump here is as likely to be as inconvenient as one might think. And it could cue you to ask **`tag? noquote bar`** or **`tag? plain bar`** or whatever your particular meaning was.

I&#39;m not as confident about this as I am about the need to panic (not error) on null.

## What To Call The Typeset?

I think the set of things that we&#39;re talking about the signature testing for here is &quot;every stable value state except for KEYWORD! and TRASH!&quot;

I&#39;ve struggled with the **SOMETHING?** term and the over-generality of **NOTHING?**... and here I think we don&#39;t want `~okay~` to pass either ... and ~okay~ seems like something.

**TESTABLE?**  :face_with_diagonal_mouth:  **TYPECHECKABLE?**

Well, I&#39;ll have to think about it.  In any case, I&#39;m sure enough that I want to start failing on NULL.</description>
    
    <lastBuildDate>Fri, 20 Jun 2025 00:09:53 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should Things Like TEXT? Fail On NULL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In terms of devil's advocacy and wondering how far to take this...</p>
<p><strong>Should things like EQUAL? prohibit NULL, too?</strong></p>
<p>You can test for nullness with NULL? and NOT.  So is there any great reason why you should be able to say <strong><code>if foo = null</code></strong> ?</p>
<p>Remember, if you have a variable that happens to be null that you want to test against, you can test with <strong><code>opt</code></strong> and compare the voids.</p>
<pre><code>something: null

; maybe you assign SOMETHING, maybe you don't...

if #A = something [...]  ; illegal

if #A = opt something [...]  ; legal
</code></pre>
<h3><a name="p-8448-its-probably-more-trouble-than-its-worth-but-1" class="anchor" href="https://rebol.metaeducation.com#p-8448-its-probably-more-trouble-than-its-worth-but-1"></a>It's <em>Probably</em> More Trouble Than It's Worth, But...</h3>
<p>...it does seem like forcibly making you do an OPT on a compare has advantages that come in general from other places that require it.</p>
<p>I'll keep an eye out for arguments for or against it...</p>
          <p><a href="https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452/3</link>
        <pubDate>Fri, 20 Jun 2025 00:09:53 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2452-3</guid>
        <source url="https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452.rss">Should Things Like TEXT? Fail On NULL</source>
      </item>
      <item>
        <title>Should Things Like TEXT? Fail On NULL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I talk about how the things you map from in MAP! need to support antiforms:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1995">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/should-antiforms-be-legal-in-map-keys-values/1995/3">Should Antiforms Be Legal in MAP! (Keys, Values?)</a></div>
<blockquote>
<p>Having seen how it goes: one of the big places that MAP! is used right now is in UPARSE, as the combinator map. And it's a thorn to have to META the DATATYPE! instances just to put them into or out of the map.</p>
</blockquote>
</aside>
<p>If it helps in naming this "not a keyword! and not a trash!" class, that constraint is the same as would be applied here in what's not legal to use as a key.</p>
<p>So in at least some sense, the class is LEGAL-KEY?</p>
          <p><a href="https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452/2</link>
        <pubDate>Fri, 16 May 2025 20:58:18 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2452-2</guid>
        <source url="https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452.rss">Should Things Like TEXT? Fail On NULL</source>
      </item>
      <item>
        <title>Should Things Like TEXT? Fail On NULL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>One of the principal ideas of the null state is to be a falsey state a variable can hold that reflects it hasn't been assigned... but that you can access without getting an error on word fetch.</p>
<p>Increasingly I've come to believe that functions should not accept NULL states as arguments, <em>unless they are specifically designed for doing conditional tests</em> (e.g. IF needs to take NULL in its condition slot...)</p>
<p>I think that if you write code that says <strong><code>if not text? var [...]</code></strong> and VAR was null, that should be an error to cue you into the fact that your test was meaningless.  We now have empty splice that can serve a role of a "friendlier" form of nothing (the new BLANK now that _ is SPACE).  So you can use that for your variable if you need tests like this to succeed.</p>
<p>If you really want to "opt out" and get the test to fail on null, there's OPT which will pass a void... and then that will let you say "I meant to do that".  (And I think OPT of the ~()~ antiform should probably also return a void state, but you wouldn't have to do that to get the test to fail if using the empty splice as your blank state).</p>
<h2><a name="p-8286-should-testing-quoted-values-soft-fail-1" class="anchor" href="https://rebol.metaeducation.com#p-8286-should-testing-quoted-values-soft-fail-1"></a>Should Testing Quoted Values Soft Fail?</h2>
<p>I kind of feel like you're potentially missing some of the picture if you're working with quoted values and don't realize it:</p>
<pre><code>&gt;&gt; foo: first ['&lt;thing&gt;]
== '&lt;thing&gt;

&gt;&gt; tag? foo
== ~null~  ; anti
</code></pre>
<p>I mean, it <em>is</em> a tag... it's just a quoted one.  Same with pinned/lifted/tied values.</p>
<pre><code>&gt;&gt; bar: @&lt;thing&gt;
== @&lt;thing&gt;

&gt;&gt; tag? bar
== ~null~  ; anti
</code></pre>
<p>These could give ERROR! back, and you could say <strong><code>try tag? bar</code></strong> if you wanted to say "yeah I know it's quoted, and I want that to not be a match".</p>
<p>(I've discussed leading colon as a shorthand for TRY in the modern world, so it could be <strong><code>:tag? bar</code></strong> in that world, for people who like brevity.)</p>
<p>I don't think having a speedbump here is as likely to be as inconvenient as one might think. And it could cue you to ask <strong><code>tag? noquote bar</code></strong> or <strong><code>tag? plain bar</code></strong> or whatever your particular meaning was.</p>
<p>I'm not as confident about this as I am about the need to panic (not error) on null.</p>
<h2><a name="p-8286-what-to-call-the-typeset-2" class="anchor" href="https://rebol.metaeducation.com#p-8286-what-to-call-the-typeset-2"></a>What To Call The Typeset?</h2>
<p>I think the set of things that we're talking about the signature testing for here is "every stable value state except for KEYWORD! and TRASH!"</p>
<p>I've struggled with the <strong>SOMETHING?</strong> term and the over-generality of <strong>NOTHING?</strong>... and here I think we don't want <code>~okay~</code> to pass either ... and ~okay~ seems like something.</p>
<p><strong>TESTABLE?</strong>  <img src="https://rebol.metaeducation.com/images/emoji/twitter/face_with_diagonal_mouth.png?v=14" title=":face_with_diagonal_mouth:" class="emoji" alt=":face_with_diagonal_mouth:" loading="lazy" width="20" height="20">  <strong>TYPECHECKABLE?</strong></p>
<p>Well, I'll have to think about it.  In any case, I'm sure enough that I want to start failing on NULL.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452/1</link>
        <pubDate>Thu, 15 May 2025 11:13:09 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2452-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-things-like-text-fail-on-null/2452.rss">Should Things Like TEXT? Fail On NULL</source>
      </item>
  </channel>
</rss>
