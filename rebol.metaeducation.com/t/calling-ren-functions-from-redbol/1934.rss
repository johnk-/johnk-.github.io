<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Calling Ren Functions From Redbol</title>
    <link>https://rebol.metaeducation.com/t/calling-ren-functions-from-redbol/1934</link>
    <description>When you **`import @redbol`** the environment for your module is skinned with the Redbol definitions.  But it can run concurrently with non-Redbol modules in the same session.  This is very cool.

I&#39;ve nudged it a little further into cool by having the definition of LIB in Redbol be the initial state of the Redbol definitions, and then REN is the Ren-C&#39;s version of LIB.

    &gt;&gt; import @redbol

    &gt;&gt; append [a b c] [d e]
    == [a b c d e]

    &gt;&gt; append/only [a b c] [d e]
    == [a b c [d e]]

    &gt;&gt; ren/append [a b c] [d e]
    == [a b c [d e]]

    &gt;&gt; ren/append [a b c] ren/spread [d e]
    == [a b c d e]

    &gt;&gt; append: does [print &quot;Overwritten&quot;]
    == #[action! {append} []]

    &gt;&gt; append
    Overwritten

    &gt;&gt; lib/append [a b c] [d e]
    == [a b c d e]

*Pretty slick.*

## But IMPORT is Ultimately Not The Right Mechanism

Because it&#39;s done using import, Redbol does not &quot;clear out&quot; the space of all the Ren-Cisms.

In fact, I didn&#39;t actually have to say **ren/spread** because the spread definition is still available:

    &gt;&gt; ren/append [a b c] spread [d e]
    == [a b c d e]

It&#39;s non-viable to ask Redbol to remove every Ren-C definition.  Instead, there needs to be a way to get a Redbol-using module to start from a fully clean slate where it explicitly exports everything it wants to make available.  This doesn&#39;t have to be that much work, it can just be a list of words in a block, with possible renamings:

    redbol-inherit [even?, odd?, value?: unset? ...]

## These Challenges Are Great For Vetting

I don&#39;t throw softballs.  This is all truly attempting to live up to the hype of a language that you can bend and redefine at will, without constantly tripping over your own changes--and being able to build on top of existing functionality without being forced to rewrite it too.

Although things move slowly... the arrow of progress is in the right direction.</description>
    
    <lastBuildDate>Sun, 21 Aug 2022 04:06:22 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://rebol.metaeducation.com/t/calling-ren-functions-from-redbol/1934.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Calling Ren Functions From Redbol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When you <strong><code>import @redbol</code></strong> the environment for your module is skinned with the Redbol definitions.  But it can run concurrently with non-Redbol modules in the same session.  This is very cool.</p>
<p>I've nudged it a little further into cool by having the definition of LIB in Redbol be the initial state of the Redbol definitions, and then REN is the Ren-C's version of LIB.</p>
<pre><code>&gt;&gt; import @redbol

&gt;&gt; append [a b c] [d e]
== [a b c d e]

&gt;&gt; append/only [a b c] [d e]
== [a b c [d e]]

&gt;&gt; ren/append [a b c] [d e]
== [a b c [d e]]

&gt;&gt; ren/append [a b c] ren/spread [d e]
== [a b c d e]

&gt;&gt; append: does [print "Overwritten"]
== #[action! {append} []]

&gt;&gt; append
Overwritten

&gt;&gt; lib/append [a b c] [d e]
== [a b c d e]
</code></pre>
<p><em>Pretty slick.</em></p>
<h2><a name="p-6297-but-import-is-ultimately-not-the-right-mechanism-1" class="anchor" href="https://rebol.metaeducation.com#p-6297-but-import-is-ultimately-not-the-right-mechanism-1"></a>But IMPORT is Ultimately Not The Right Mechanism</h2>
<p>Because it's done using import, Redbol does not "clear out" the space of all the Ren-Cisms.</p>
<p>In fact, I didn't actually have to say <strong>ren/spread</strong> because the spread definition is still available:</p>
<pre><code>&gt;&gt; ren/append [a b c] spread [d e]
== [a b c d e]
</code></pre>
<p>It's non-viable to ask Redbol to remove every Ren-C definition.  Instead, there needs to be a way to get a Redbol-using module to start from a fully clean slate where it explicitly exports everything it wants to make available.  This doesn't have to be that much work, it can just be a list of words in a block, with possible renamings:</p>
<pre><code>redbol-inherit [even?, odd?, value?: unset? ...]
</code></pre>
<h2><a name="p-6297-these-challenges-are-great-for-vetting-2" class="anchor" href="https://rebol.metaeducation.com#p-6297-these-challenges-are-great-for-vetting-2"></a>These Challenges Are Great For Vetting</h2>
<p>I don't throw softballs.  This is all truly attempting to live up to the hype of a language that you can bend and redefine at will, without constantly tripping over your own changes--and being able to build on top of existing functionality without being forced to rewrite it too.</p>
<p>Although things move slowly... the arrow of progress is in the right direction.</p>
          <p><a href="https://rebol.metaeducation.com/t/calling-ren-functions-from-redbol/1934/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/calling-ren-functions-from-redbol/1934/1</link>
        <pubDate>Sat, 20 Aug 2022 21:05:31 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1934-1</guid>
        <source url="https://rebol.metaeducation.com/t/calling-ren-functions-from-redbol/1934.rss">Calling Ren Functions From Redbol</source>
      </item>
  </channel>
</rss>
