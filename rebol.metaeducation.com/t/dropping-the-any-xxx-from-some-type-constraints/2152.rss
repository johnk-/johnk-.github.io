<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dropping the ANY-XXX! from (Some) Type Constraints?</title>
    <link>https://rebol.metaeducation.com/t/dropping-the-any-xxx-from-some-type-constraints/2152</link>
    <description>There was a slightly confusing aspect of historical Rebol where some typesets were named so that they looked just like a datatype:

    red&gt;&gt; help append
    USAGE:
        APPEND series value

    DESCRIPTION: 
        Inserts value(s) at series tail; returns series head. 
        APPEND is an action! value.

    ARGUMENTS:
        series       [series! bitset! port!] 
        value        [any-type!] 
    ...

Here, we see SERIES! which is not named in a way that makes it obvious that it&#39;s not a fundamental type.  It&#39;s named the same as BLOCK! or WORD!.

@earl and I agreed that this was a stumbling block, so we thought that ANY-SERIES! was a better name.  That way you wouldn&#39;t make the mistake of saying:

    if series! = type? x [...]

...and have it always fail.  You&#39;d be cued by that ANY- to know that it was a set of many types.  (You still might think that you could use the equals operator to see if something was in a typeset and be wrong, but that&#39;s a different level).

[But Ren-C has done away with typesets.](https://rebol.metaeducation.com/t/ugly-types-less-ugly-than-history-can-we-do-better/2151)  They were too limited, and we now use arbitrary functions to do typechecking via predicates (with some various supporting optimizations so the common cases aren&#39;t horrifically slow).

So ANY-SERIES! is pretty much going away.  Most of the time you just use ANY-SERIES? (e.g. in a function spec or regular code), and then &amp;ANY-SERIES? if you&#39;re in something like a parse rule.

## Do We Still Need The ANY-?

I&#39;m a little torn on the question of whether we need the ANY-.

Sometimes it&#39;s required (e.g. with ANY-WORD?) because WORD? means specifically &quot;plain word&quot;.  (Note you&#39;d use WORD! generally in type specs, though technically you can use either...performance should be identical).

But on ANY-SERIES? it&#39;s now a bit superfluous. And SERIES? is certainly shorter.

:thinking: 

It&#39;s not a slam dunk to take the ANY- off.  I kind of like the realization it gives you as a reader... &quot;hey, we&#39;re talking about multiple things here&quot;... and it makes you stop and consider &quot;just how many series are there?  is ANY-SERIES? really what I mean?&quot;

I kind of lean to keeping it.  And I prefer ANY-VALUE? to just VALUE? as well.

But it&#39;s definitely less important than it was.</description>
    
    <lastBuildDate>Sun, 18 Feb 2024 00:11:03 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://rebol.metaeducation.com/t/dropping-the-any-xxx-from-some-type-constraints/2152.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dropping the ANY-XXX! from (Some) Type Constraints?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>In my <a href="https://rebol.metaeducation.com/t/ugly-types-less-ugly-than-history-can-we-do-better/2151/2">proposal for a constraints-only world</a>, I suggested keeping ANY-* for constraints which ‘look under’ sigils to match a specific type. So ANY-WORD? would match WORD!, GET-WORD!, QUOTED! of WORD!, ISOTOPE! of WORD!, etc., and similarly for the other ANY-* constraints. The idea would be that these are looking for ‘any’ occurrence of the specified type name. By contrast, a constraint like SERIES? wouldn’t get an ANY in its name, because it’s not looking for any occurrence of a SERIES! type. I think this is a reasonable compromise.</p>
          <p><a href="https://rebol.metaeducation.com/t/dropping-the-any-xxx-from-some-type-constraints/2152/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/dropping-the-any-xxx-from-some-type-constraints/2152/2</link>
        <pubDate>Sun, 18 Feb 2024 00:11:03 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2152-2</guid>
        <source url="https://rebol.metaeducation.com/t/dropping-the-any-xxx-from-some-type-constraints/2152.rss">Dropping the ANY-XXX! from (Some) Type Constraints?</source>
      </item>
      <item>
        <title>Dropping the ANY-XXX! from (Some) Type Constraints?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There was a slightly confusing aspect of historical Rebol where some typesets were named so that they looked just like a datatype:</p>
<pre><code>red&gt;&gt; help append
USAGE:
    APPEND series value

DESCRIPTION: 
    Inserts value(s) at series tail; returns series head. 
    APPEND is an action! value.

ARGUMENTS:
    series       [series! bitset! port!] 
    value        [any-type!] 
...
</code></pre>
<p>Here, we see SERIES! which is not named in a way that makes it obvious that it's not a fundamental type.  It's named the same as BLOCK! or WORD!.</p>
<p><span class="mention">@earl</span> and I agreed that this was a stumbling block, so we thought that ANY-SERIES! was a better name.  That way you wouldn't make the mistake of saying:</p>
<pre><code>if series! = type? x [...]
</code></pre>
<p>...and have it always fail.  You'd be cued by that ANY- to know that it was a set of many types.  (You still might think that you could use the equals operator to see if something was in a typeset and be wrong, but that's a different level).</p>
<p><a href="https://rebol.metaeducation.com/t/ugly-types-less-ugly-than-history-can-we-do-better/2151">But Ren-C has done away with typesets.</a>  They were too limited, and we now use arbitrary functions to do typechecking via predicates (with some various supporting optimizations so the common cases aren't horrifically slow).</p>
<p>So ANY-SERIES! is pretty much going away.  Most of the time you just use ANY-SERIES? (e.g. in a function spec or regular code), and then &amp;ANY-SERIES? if you're in something like a parse rule.</p>
<h2><a name="p-7147-do-we-still-need-the-any-1" class="anchor" href="https://rebol.metaeducation.com#p-7147-do-we-still-need-the-any-1"></a>Do We Still Need The ANY-?</h2>
<p>I'm a little torn on the question of whether we need the ANY-.</p>
<p>Sometimes it's required (e.g. with ANY-WORD?) because WORD? means specifically "plain word".  (Note you'd use WORD! generally in type specs, though technically you can use either...performance should be identical).</p>
<p>But on ANY-SERIES? it's now a bit superfluous. And SERIES? is certainly shorter.</p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/thinking.png?v=14" title=":thinking:" class="emoji only-emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<p>It's not a slam dunk to take the ANY- off.  I kind of like the realization it gives you as a reader... "hey, we're talking about multiple things here"... and it makes you stop and consider "just how many series are there?  is ANY-SERIES? really what I mean?"</p>
<p>I kind of lean to keeping it.  And I prefer ANY-VALUE? to just VALUE? as well.</p>
<p>But it's definitely less important than it was.</p>
          <p><a href="https://rebol.metaeducation.com/t/dropping-the-any-xxx-from-some-type-constraints/2152/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/dropping-the-any-xxx-from-some-type-constraints/2152/1</link>
        <pubDate>Sat, 17 Feb 2024 06:47:13 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2152-1</guid>
        <source url="https://rebol.metaeducation.com/t/dropping-the-any-xxx-from-some-type-constraints/2152.rss">Dropping the ANY-XXX! from (Some) Type Constraints?</source>
      </item>
  </channel>
</rss>
