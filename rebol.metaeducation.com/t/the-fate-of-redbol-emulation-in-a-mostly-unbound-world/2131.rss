<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Fate of Redbol Emulation In A Mostly Unbound World</title>
    <link>https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131</link>
    <description>100% Emulation of historical Rebol was always going to be impossible.  But if we go forward with the model that most code is unbound, that&#39;s going to break even code that didn&#39;t do anything sophisticated with binding.  Not only will any values you PICK out of a block or iterate over be unbound, but even basic quoting won&#39;t be bound:

e.g. this won&#39;t work:

    rebol2&gt;&gt; thing: 10

    rebol2&gt;&gt; foo: func [w [word!]] [return get w]

    rebol2&gt;&gt; foo &#39;thing
    == 10

I had a problem with this in emulating my very, very old whitespace interpreter.  It [quoted ADD](https://github.com/hostilefork/rebol-whitespacers/blob/1d69ea0e79e60ba79fe680d3af657d0823dcbe9e/historical/whitespace-old.reb#L595) and then [put it in a block](https://github.com/hostilefork/rebol-whitespacers/blob/1d69ea0e79e60ba79fe680d3af657d0823dcbe9e/historical/whitespace-old.reb#L424), expecting a DO of that block to run the ADD it meant.

## Simulating Waves of Binding (Probably?) Impractical

You might think that so long as every word can still hold a binding, then historical behavior could be simulated by manually binding everything.

When a module loads, you could walk through it binding every word.  Then when a function runs, you could copy its body and walk through it...overwriting those module bindings for functions and arguments.

But it would really mean rewriting everything.  You&#39;d have to redo MAKE OBJECT!, otherwise the [indiscriminate binding would break its expectations](https://rebol.metaeducation.com/t/sticky-set-word-binding-problem-in-make-object/2127)--as it doesn&#39;t override explicit binding anymore.

## Hooked Evaluator May Fix (Some) Cases

We already are going to need a hooked evaluator to handle things like PATH! looking up in objects (done presently with a hack to the main evaluator).

Another hook could just say that quoted things wound up bound under the same rules that non-quoted things use.

That would make this one whitespace example work, and maybe it would be able to run some more simple historical example scripts.  But anything that mixes COMPOSE and DO is likely doomed.

This may just be the price of progress.  Rebol2 emulation remains a good experiment of changing your baseline library, and it still would be a good example of that... for all the changes to primitives like FUNC and APPEND etc.  It just may not be able to accommodate the different expectations of binding.</description>
    
    <lastBuildDate>Sat, 31 Aug 2024 08:45:18 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Fate of Redbol Emulation In A Mostly Unbound World</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm just going to hack up the bootstrap executable's scanner.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">ren-c-boot&gt;&gt; transcode "obj.subobj/accessor:refinement"
== [obj/subobj/accessor/refinement]
</code></pre>
<p>Then all the code that needs to run in both the bootstrap executable and the current executable can be written to the new style.</p>
<p>It's <strong>"trivial"<sub>cough</sub></strong> to implement, it works, and it means the kludges for supporting all-path formats can be cut out of the modern executable.</p>
</blockquote>
</aside>
<p>Of course it isn't trivial. <img src="https://rebol.metaeducation.com/images/emoji/twitter/roll_eyes.png?v=14" title=":roll_eyes:" class="emoji" alt=":roll_eyes:" loading="lazy" width="20" height="20"> But I made a bit of progress on it today.</p>
<p>One thing I forgot about is that PATH!s are used to represent filenames in some places.  While they can't represent every possible filename, they can be used for tame ones... such as <strong><code>foo/bar/baz.txt</code></strong> ... and since Rebol source code files have tame names, PATH! is used in order to avoid needing the % prefix everywhere.  Looks nicer in "file specification dialects".</p>
<p><em>(This "abuse" of PATH! instead of using FILE! was <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/tools/file-base.r#L113">Carl's choice, originating from R3-Alpha</a>.  The desire to use this for filenames like <strong><code>1-file.txt</code></strong> is an argument for the <a href="https://rebol.metaeducation.com/t/no-interstitial-delimiter-sequence-proposal-fused/1503">FUSED! proposal</a>.)</em></p>
<p>But of course my "scan all dots as slashes" interferes with that.  So I'm going to say that it stops turning dots into slashes once it sees an actual slash in the scan.</p>
<pre><code>&gt;&gt; transcode "foo.baz.bar/mumble/frotz.txt"
== foo/baz/bar/mumble/frotz.txt

&gt;&gt; transcode "/foo/baz/bar/mumble/frotz.txt"
== foo/baz/bar/mumble/frotz.txt
</code></pre>
<p>That is compatible with what bootstrap should need.</p>
<p>Of course there's another thing the bootstrap executable can't/won't do, and that's make PATH!s with SET-WORD!s or SET-TUPLE!s at the tail.  The modern executable will need these for antiform frame assignments.  But simply skip the slash and do normal assignment.</p>
<pre><code> &gt;&gt; transcode "/foo: func [x] [print [x]]"
 == [foo: func [x] [print [x]]]

 &gt;&gt; transcode "/obj.accessor: func [x] [print [x]]"
 == [obj/accessor: func [x] [print [x]]"
</code></pre>
<p>I'm honestly looking forward to going through and wiping out the old all-path notation, introducing the tuples and colons in the bootstrap scripts.  Sad, isn't it?</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://theonion.com/man-ashamed-of-own-joy-upon-receiving-new-mop-head-1819565761/">
  <header class="source">
      <img src="https://theonion.com/wp-content/uploads/2024/07/cropped-site-icon.png?w=32" class="site-icon" width="32" height="32">

      <a href="https://theonion.com/man-ashamed-of-own-joy-upon-receiving-new-mop-head-1819565761/" target="_blank" rel="noopener" title="08:00PM - 27 September 2000">The Onion – 27 Sep 00</a>
  </header>

  <article class="onebox-body">
    <img width="500" height="500" src="https://theonion.com/wp-content/uploads/2000/09/qyc1pcj5xbr5z716bfmw.jpg?w=1024" class="thumbnail onebox-avatar">

<h3><a href="https://theonion.com/man-ashamed-of-own-joy-upon-receiving-new-mop-head-1819565761/" target="_blank" rel="noopener">Man Ashamed Of Own Joy Upon Receiving New Mop Head</a></h3>

  <p>GAINESVILLE, FL–Hamilton’s Bar &amp; Grill dishwasher and prep cook Cory Akers experienced a fleeting moment of joy, followed by a deep and abiding sense of shame, upon receiving a new mop head Monday.</p>

  <p>
    <span class="label1">Est. reading time: 5 minutes</span>
  </p>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

          <p><a href="https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131/4</link>
        <pubDate>Sat, 31 Aug 2024 08:35:58 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2131-4</guid>
        <source url="https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131.rss">The Fate of Redbol Emulation In A Mostly Unbound World</source>
      </item>
      <item>
        <title>The Fate of Redbol Emulation In A Mostly Unbound World</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>Emulating Rebol2/Red is not important enough in the near term to make sacrifices that impede progress.</strong></p>
</blockquote>
</aside>
<p>I’m pretty confident saying that nobody will miss it</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I don't think there are going to be any Rebol2 modules that will actually be relevant or useful in a practical sense to leverage in Ren-C. So it's only fun, nostalgia, and a tech demo.</p>
</blockquote>
</aside>
<p>I’m not sure we are in the kind of secure world where we should encourage others to run old Rebol code in the library.</p>
<p>And that’s the main reason I can think of that someone would want emulation</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's a strange delicate balancing act with tons of spinning plates in the air to come up with strategies for these changes!</p>
</blockquote>
</aside>
<p>I can only imagine. Time to let go of some ballast. <img src="https://rebol.metaeducation.com/images/emoji/twitter/balloon.png?v=14" title=":balloon:" class="emoji" alt=":balloon:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131/3</link>
        <pubDate>Thu, 29 Aug 2024 23:39:55 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2131-3</guid>
        <source url="https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131.rss">The Fate of Redbol Emulation In A Mostly Unbound World</source>
      </item>
      <item>
        <title>The Fate of Redbol Emulation In A Mostly Unbound World</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2131">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This may just be the price of progress. Rebol2 emulation remains a good experiment of changing your baseline library, and it still would be a good example of that... for all the changes to primitives like FUNC and APPEND etc. It just may not be able to accommodate the different expectations of binding.</p>
</blockquote>
</aside>
<p>So on top of all the other complications, the situation just got a lot more... sticky</p>
<p><a href="https://rebol.metaeducation.com/t/big-alien-proposal-word-runs-functions/1905/13" class="inline-onebox">Big Alien Proposal 🛸 "/WORD" Runs Functions - #13 by hostilefork</a></p>
<p>The writing is on the wall:</p>
<p><strong>Emulating Rebol2/Red is not important enough in the near term to make sacrifices that impede progress.</strong></p>
<h2><a name="p-7457-redbol-was-not-a-waste-of-time-1" class="anchor" href="https://rebol.metaeducation.com#p-7457-redbol-was-not-a-waste-of-time-1"></a>Redbol Was Not A Waste Of Time</h2>
<p>From its <a href="https://github.com/metaeducation/ren-c/blob/2947e536e358a8727c90f8779202287fbac3b75f/scripts/redbol.reb">modest start as a small script in 2018</a> to its <a href="https://github.com/metaeducation/redbol">more expansive emulation circa 2024</a>, Redbol has informed and tested the design of Ren-C.</p>
<p>It legitimately ran historical scripts, even the complex <a href="https://rebol.metaeducation.com/t/redbol-emulation-runs-pdf-maker-r-and-now-on-the-web/1142">%pdf-maker.r</a> at one point.  <em>(Though later I focused the attention and CI handling on my own historical scripts, e.g. <a href="https://github.com/hostilefork/uscii/tree/master/historical">the original USCII</a> and the <a href="https://github.com/hostilefork/rebol-whitespacers/tree/main/historical">original Whitespace Dialect</a>)</em></p>
<p>But it required kludges in the evaluator--very ugly ones--to still support <strong><code>obj/subobj/accessor/refinement</code></strong> in a world where Ren-C required <strong><code>obj.subobj.accessor/refinement</code></strong>.  The code handling that is a blight, and causes undue burden on switching this to <strong><code>obj.subobj/accessor:refinement</code></strong> while still handling the original form.  What should be emergently elegant code following the <a href="https://rebol.metaeducation.com/t/big-alien-proposal-word-runs-functions/1905/14">new more coherent model</a> would be torturous and correspondingly buggy.</p>
<p>Those kludges need to be cut out.  And Redbol emulation will die.</p>
<h2><a name="p-7457-what-about-bootstrap-2" class="anchor" href="https://rebol.metaeducation.com#p-7457-what-about-bootstrap-2"></a>What About Bootstrap?</h2>
<p>The bootstrap executable doesn't have generalized TUPLE!.  And it's not going to get it! <img src="https://rebol.metaeducation.com/images/emoji/twitter/face_with_raised_eyebrow.png?v=14" title=":face_with_raised_eyebrow:" class="emoji" alt=":face_with_raised_eyebrow:" loading="lazy" width="20" height="20">  That's simply too deep and far reaching a change to apply to sources circa 2018.</p>
<p>So you might think the kludges need to remain, since the bootstrap EXE will only ever understand <strong><code>obj/subobj/accessor/refinement</code></strong>... until the deep future where we're confident enough to bootstrap to a pure virtual binding EXE.  Which would mean it needs to be not just robust, but faster too, otherwise my development will be slowed down.  Realistically I would not schedule Pure Virtual Binding Bootstrap until at least 2026.</p>
<p><em>(If that seems like slow progress, it is not uncommon for much more rigorous projects with orders of magnitude more people to use "LTS" releases for their bootstrap.)</em></p>
<h2><a name="p-7457-i-have-a-plan-scientist-3" class="anchor" href="https://rebol.metaeducation.com#p-7457-i-have-a-plan-scientist-3"></a>I Have A Plan! <img src="https://rebol.metaeducation.com/images/emoji/twitter/scientist.png?v=14" title=":scientist:" class="emoji" alt=":scientist:" loading="lazy" width="20" height="20"></h2>
<p>I'm just going to hack up the bootstrap executable's scanner.</p>
<pre><code>ren-c-boot&gt;&gt; transcode "obj.subobj/accessor:refinement"
== [obj/subobj/accessor/refinement]
</code></pre>
<p>Then all the code that needs to run in both the bootstrap executable and the current executable can be written to the new style.</p>
<p>It's "trivial"<sub>cough</sub> to implement, it works, and it means the kludges for supporting all-path formats can be cut out of the modern executable.</p>
<h2><a name="p-7457-but-redbol-will-be-deadfor-now-skull_and_crossbones-4" class="anchor" href="https://rebol.metaeducation.com#p-7457-but-redbol-will-be-deadfor-now-skull_and_crossbones-4"></a>But Redbol Will Be Dead...For Now <img src="https://rebol.metaeducation.com/images/emoji/twitter/skull_and_crossbones.png?v=14" title=":skull_and_crossbones:" class="emoji" alt=":skull_and_crossbones:" loading="lazy" width="20" height="20"></h2>
<p>Bringing it back to life and letting <strong><code>obj/subobj/accessor/refinement</code></strong> act in accordance with history will require parameterized evaluation.  This would be kind of like how UPARSE lets you use a collection of COMBINATORs picked according to the type it encounters, you'd have EVALUATORs that did the same.</p>
<p>So Redbol would have in its evaluation map an entry for PATH!.  It would map to something that would rewrite that path as the right sequence of PATH!/CHAIN!/TUPLE! (or perhaps just do the interpretation itself).</p>
<p>That PATH! evaluator would also have to notice when its first element was a CHAIN! that started with BLANK!.  So <strong><code>:a/b</code></strong> would need to be rewritten as <strong><code>:a.b</code></strong>  (or again, just directly evaluate...if these EVALUATORs are native code then so long as they've already done the analysis to know what a correct rewrite would be, they might as well just do the implied operations as they go).</p>
<h2><a name="p-7457-the-new-redbol-probably-wont-be-written-by-me-5" class="anchor" href="https://rebol.metaeducation.com#p-7457-the-new-redbol-probably-wont-be-written-by-me-5"></a>The New Redbol Probably Won't Be Written By Me</h2>
<p>I can imagine laying the foundations of parameterized evaluators, and using some Redbol behaviors as a demo.  But I can't imagine myself feeling compelled to go deep into actually completing the whole emulation initiative.</p>
<p>So if it ever happens, it would be the pursuit of some enthusiasts (or enthusiast AI) who thinks it would be novel to run Rebol2 or Red code inside of Ren-C.</p>
<p>I don't think there are going to be any Rebol2 modules that will actually be relevant or useful in a practical sense to leverage in Ren-C.  So it's only fun, nostalgia, and a tech demo.</p>
<h2><a name="p-7457-we-can-still-leverage-tests-parse2-apply2-6" class="anchor" href="https://rebol.metaeducation.com#p-7457-we-can-still-leverage-tests-parse2-apply2-6"></a>We Can Still Leverage Tests (PARSE2, APPLY2...)</h2>
<p>Being able to twist UPARSE so it acts like Rebol2 and Red was a great demo.  And we can still demo it running Rebol2 or Red tests.  It's just that anything that's not related to parsing needs to be updated.</p>
<pre><code>; hypothetical Rebol2 COPY test in PARSE
(
    obj: make object! [what: &lt;tag&gt;]
    all [
        parse [{"} b &lt;tag&gt;] compose [text! copy result thru (obj/what)]
        result = [b &lt;tag&gt;]
    ]
)
</code></pre>
<p>We could keep things like that, and say <strong><code>parse: get $parse2</code></strong> but just change the little bits that need changing:</p>
<pre><code>(
    obj: {what: &lt;tag&gt;}
    all [
        parse [-{"}- b &lt;tag&gt;] compose [text! copy result thru (obj.what)]
        result = [b &lt;tag&gt;]
    ] 
)
</code></pre>
<p>So that's the way the tides are flowing at the moment.  I'm sad to see Redbol get sidelined, but it's far outweighed by my positive feelings about the direction of the new designs.</p>
<p>It's a strange delicate balancing act with tons of spinning plates in the air to come up with strategies for these changes!</p>
          <p><a href="https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131/2</link>
        <pubDate>Thu, 29 Aug 2024 23:28:56 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2131-2</guid>
        <source url="https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131.rss">The Fate of Redbol Emulation In A Mostly Unbound World</source>
      </item>
      <item>
        <title>The Fate of Redbol Emulation In A Mostly Unbound World</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>100% Emulation of historical Rebol was always going to be impossible.  But if we go forward with the model that most code is unbound, that's going to break even code that didn't do anything sophisticated with binding.  Not only will any values you PICK out of a block or iterate over be unbound, but even basic quoting won't be bound:</p>
<p>e.g. this won't work:</p>
<pre><code>rebol2&gt;&gt; thing: 10

rebol2&gt;&gt; foo: func [w [word!]] [return get w]

rebol2&gt;&gt; foo 'thing
== 10
</code></pre>
<p>I had a problem with this in emulating my very, very old whitespace interpreter.  It <a href="https://github.com/hostilefork/rebol-whitespacers/blob/1d69ea0e79e60ba79fe680d3af657d0823dcbe9e/historical/whitespace-old.reb#L595">quoted ADD</a> and then <a href="https://github.com/hostilefork/rebol-whitespacers/blob/1d69ea0e79e60ba79fe680d3af657d0823dcbe9e/historical/whitespace-old.reb#L424">put it in a block</a>, expecting a DO of that block to run the ADD it meant.</p>
<h2><a name="p-7019-simulating-waves-of-binding-probably-impractical-1" class="anchor" href="https://rebol.metaeducation.com#p-7019-simulating-waves-of-binding-probably-impractical-1"></a>Simulating Waves of Binding (Probably?) Impractical</h2>
<p>You might think that so long as every word can still hold a binding, then historical behavior could be simulated by manually binding everything.</p>
<p>When a module loads, you could walk through it binding every word.  Then when a function runs, you could copy its body and walk through it...overwriting those module bindings for functions and arguments.</p>
<p>But it would really mean rewriting everything.  You'd have to redo MAKE OBJECT!, otherwise the <a href="https://rebol.metaeducation.com/t/sticky-set-word-binding-problem-in-make-object/2127">indiscriminate binding would break its expectations</a>--as it doesn't override explicit binding anymore.</p>
<h2><a name="p-7019-hooked-evaluator-may-fix-some-cases-2" class="anchor" href="https://rebol.metaeducation.com#p-7019-hooked-evaluator-may-fix-some-cases-2"></a>Hooked Evaluator May Fix (Some) Cases</h2>
<p>We already are going to need a hooked evaluator to handle things like PATH! looking up in objects (done presently with a hack to the main evaluator).</p>
<p>Another hook could just say that quoted things wound up bound under the same rules that non-quoted things use.</p>
<p>That would make this one whitespace example work, and maybe it would be able to run some more simple historical example scripts.  But anything that mixes COMPOSE and DO is likely doomed.</p>
<p>This may just be the price of progress.  Rebol2 emulation remains a good experiment of changing your baseline library, and it still would be a good example of that... for all the changes to primitives like FUNC and APPEND etc.  It just may not be able to accommodate the different expectations of binding.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131/1</link>
        <pubDate>Tue, 23 Jan 2024 15:11:47 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2131-1</guid>
        <source url="https://rebol.metaeducation.com/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131.rss">The Fate of Redbol Emulation In A Mostly Unbound World</source>
      </item>
  </channel>
</rss>
