<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Haskell and Rust Error Handling</title>
    <link>https://rebol.metaeducation.com/t/haskell-and-rust-error-handling/1987</link>
    <description>Ren-C is shoring up Rebol&#39;s historically problematic exception-based error handling by blending together two mechanics: definitional returns and isotopic errors.  This gives what I&#39;m calling &quot;definitional failures&quot;:

  https://rebol.metaeducation.com/t/fail-vs-return-raise-the-new-age-of-definitional-failures/1852

Pivoting to this line of thinking has some non-accidental similarity to [Haskell&#39;s `Either`](https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-Either.html) and [Rust&#39;s `Result`](https://doc.rust-lang.org/std/result/), which I mentioned when first sketching out the motivation for change:

  https://rebol.metaeducation.com/t/the-need-to-rethink-error/1371

I thought it would be worth it to make a thread for pointing out similarities and differences, and if there are libraries they use that might have relevant inspiration.

## An Out-Of-Band State On The Value Is... Like An Isotope?

Either is fully generic beyond just allowing errors (and [Rust has its own generic Either](https://docs.rs/either/latest/either/) as well).  So you can really say whatever you are returning can come in two forms: the left form vs. the right form.

But even Rust&#39;s `Result` container will permit you to make an Error class the &quot;valid&quot; result, as well as the &quot;invalid&quot; result.

So here we see generic way of letting a value carry a bit--independent of what the payload is--saying whether that is a &quot;normal&quot; state or a &quot;weird&quot; state.  Then, the system has an assortment of operations that are designed for directing program flow in different ways reacting to it.

Ren-C embraces this deeply: effectively saying that every variable and expression product has the potential of being in this &quot;weird&quot; state... and *no array can contain a value in the weird state*.  But you don&#39;t have to do anything special to a value that *isn&#39;t* weird to extract it... you just get runtime errors if you use the weird values where they&#39;re not expected.

## Rust Tackles Low-Hanging Fruit via `unwrap()` and `?`

In Ren-C, if you don&#39;t have handling at the callsite when a definitional error happens, it&#39;s promoted to being more like a throw--and most code should not intercept it.

Being more formal by nature, both Haskell and Rust force *some* handling at the callsite when an error result is possible.  You have to define a code path to take if there&#39;s an error, or a code path to take if there&#39;s not.

But Rust has a couple of conveniences.  If you want something like the Ren-C behavior, you can just call the `.unwrap()` method on the result.  It will give you the ordinary value if the function didn&#39;t return, otherwise raise the error as a &quot;panic&quot;.

There&#39;s also a cool shortcut with a postfix operator of **?** on the call.  This makes it so that if you call a function that returns a `Result` type from inside another function that returns a `Result` type, it will automatically propagate the result if it&#39;s an error out of the calling function.

Getting this behavior is more laborious in Ren-C:

    foo: func [...] [
        x: bar (...) except e -&gt; [return raise e]
        ...
    ]

Implementing the feature as postfix raises its own problems, so let&#39;s just imagine we were trying it prefix:

    foo: func [...] [
        x: ? bar (...)  ; we want this to act the same as above
        ...
    ]

For this to work under the current system, each FUNC would have to define its own **?** operator... because much like definitional RETURN, it would have to know what it was returning *from* in case of a raised error.

## Haskell Has Generic Compositional Smarts

As mentioned, the strict compile-time typing in Haskell forces you to be explicit about your reaction when a function returns one of these `Either` values.

But because Either fits in with monadic/applicative/functor stuff, you can have higher-order operations that [can compose together](https://lhbg-book.link/06-errors_and_files/01-either.html) failure scenarios...and gather up failures from several functions or cascade the failure through to where you want.

Ren-C can do this kind of thing as well, such as how you can write higher-order functions like ATTEMPT in usermode, or REDUCE a block of values in one pass with META and get the errors, then react to them later.  

But in practice, the lack of a static type system makes this more precarious.

## Links To Error Handling Libraries

* Rust&#39;s ANYHOW!: https://docs.rs/anyhow/</description>
    
    <lastBuildDate>Sun, 16 Oct 2022 02:17:44 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://rebol.metaeducation.com/t/haskell-and-rust-error-handling/1987.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Haskell and Rust Error Handling</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Ren-C is shoring up Rebol's historically problematic exception-based error handling by blending together two mechanics: definitional returns and isotopic errors.  This gives what I'm calling "definitional failures":</p>
<p><a href="https://rebol.metaeducation.com/t/fail-vs-return-raise-the-new-age-of-definitional-failures/1852" class="inline-onebox">FAIL vs. RETURN RAISE: The New Age of Definitional Errors!</a></p>
<p>Pivoting to this line of thinking has some non-accidental similarity to <a href="https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-Either.html">Haskell's <code>Either</code></a> and <a href="https://doc.rust-lang.org/std/result/">Rust's <code>Result</code></a>, which I mentioned when first sketching out the motivation for change:</p>
<p><a href="https://rebol.metaeducation.com/t/the-need-to-rethink-error/1371" class="inline-onebox">The Need To Rethink ERROR!</a></p>
<p>I thought it would be worth it to make a thread for pointing out similarities and differences, and if there are libraries they use that might have relevant inspiration.</p>
<h2><a name="p-6481-an-out-of-band-state-on-the-value-is-like-an-isotope-1" class="anchor" href="https://rebol.metaeducation.com#p-6481-an-out-of-band-state-on-the-value-is-like-an-isotope-1"></a>An Out-Of-Band State On The Value Is... Like An Isotope?</h2>
<p>Either is fully generic beyond just allowing errors (and <a href="https://docs.rs/either/latest/either/">Rust has its own generic Either</a> as well).  So you can really say whatever you are returning can come in two forms: the left form vs. the right form.</p>
<p>But even Rust's <code>Result</code> container will permit you to make an Error class the "valid" result, as well as the "invalid" result.</p>
<p>So here we see generic way of letting a value carry a bit--independent of what the payload is--saying whether that is a "normal" state or a "weird" state.  Then, the system has an assortment of operations that are designed for directing program flow in different ways reacting to it.</p>
<p>Ren-C embraces this deeply: effectively saying that every variable and expression product has the potential of being in this "weird" state... and <em>no array can contain a value in the weird state</em>.  But you don't have to do anything special to a value that <em>isn't</em> weird to extract it... you just get runtime errors if you use the weird values where they're not expected.</p>
<h2><a name="p-6481-rust-tackles-low-hanging-fruit-via-unwrap-and-2" class="anchor" href="https://rebol.metaeducation.com#p-6481-rust-tackles-low-hanging-fruit-via-unwrap-and-2"></a>Rust Tackles Low-Hanging Fruit via <code>unwrap()</code> and <code>?</code></h2>
<p>In Ren-C, if you don't have handling at the callsite when a definitional error happens, it's promoted to being more like a throw--and most code should not intercept it.</p>
<p>Being more formal by nature, both Haskell and Rust force <em>some</em> handling at the callsite when an error result is possible.  You have to define a code path to take if there's an error, or a code path to take if there's not.</p>
<p>But Rust has a couple of conveniences.  If you want something like the Ren-C behavior, you can just call the <code>.unwrap()</code> method on the result.  It will give you the ordinary value if the function didn't return, otherwise raise the error as a "panic".</p>
<p>There's also a cool shortcut with a postfix operator of <strong>?</strong> on the call.  This makes it so that if you call a function that returns a <code>Result</code> type from inside another function that returns a <code>Result</code> type, it will automatically propagate the result if it's an error out of the calling function.</p>
<p>Getting this behavior is more laborious in Ren-C:</p>
<pre><code>foo: func [...] [
    x: bar (...) except e -&gt; [return raise e]
    ...
]
</code></pre>
<p>Implementing the feature as postfix raises its own problems, so let's just imagine we were trying it prefix:</p>
<pre><code>foo: func [...] [
    x: ? bar (...)  ; we want this to act the same as above
    ...
]
</code></pre>
<p>For this to work under the current system, each FUNC would have to define its own <strong>?</strong> operator... because much like definitional RETURN, it would have to know what it was returning <em>from</em> in case of a raised error.</p>
<h2><a name="p-6481-haskell-has-generic-compositional-smarts-3" class="anchor" href="https://rebol.metaeducation.com#p-6481-haskell-has-generic-compositional-smarts-3"></a>Haskell Has Generic Compositional Smarts</h2>
<p>As mentioned, the strict compile-time typing in Haskell forces you to be explicit about your reaction when a function returns one of these <code>Either</code> values.</p>
<p>But because Either fits in with monadic/applicative/functor stuff, you can have higher-order operations that <a href="https://lhbg-book.link/06-errors_and_files/01-either.html">can compose together</a> failure scenarios...and gather up failures from several functions or cascade the failure through to where you want.</p>
<p>Ren-C can do this kind of thing as well, such as how you can write higher-order functions like ATTEMPT in usermode, or REDUCE a block of values in one pass with META and get the errors, then react to them later.</p>
<p>But in practice, the lack of a static type system makes this more precarious.</p>
<h2><a name="p-6481-links-to-error-handling-libraries-4" class="anchor" href="https://rebol.metaeducation.com#p-6481-links-to-error-handling-libraries-4"></a>Links To Error Handling Libraries</h2>
<ul>
<li>Rust's ANYHOW!: <a href="https://docs.rs/anyhow/" class="inline-onebox">anyhow - Rust</a></li>
</ul>
          <p><a href="https://rebol.metaeducation.com/t/haskell-and-rust-error-handling/1987/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/haskell-and-rust-error-handling/1987/1</link>
        <pubDate>Sun, 16 Oct 2022 02:17:44 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1987-1</guid>
        <source url="https://rebol.metaeducation.com/t/haskell-and-rust-error-handling/1987.rss">Haskell and Rust Error Handling</source>
      </item>
  </channel>
</rss>
