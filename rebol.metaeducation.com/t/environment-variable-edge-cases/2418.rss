<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Environment Variable Edge Cases</title>
    <link>https://rebol.metaeducation.com/t/environment-variable-edge-cases/2418</link>
    <description>[quote=&quot;hostilefork, post:3, topic:1857&quot;]
We have standardized methods now where if you say **`env.FOO`** and it doesn&#39;t find it, then you get a raised error. So you say **`try env.FOO`** and get NULL, or **`maybe env.FOO`** and get VOID.
[/quote]

Environment variables have some nasty edge cases

## Windows Environment Var Names are not Case-Sensitive

Whoever sets the variable first lays claim to the case, so:

    C:\&gt; set WHATEVER=&quot;foo&quot;

    C:\&gt; set WhAtEvEr=&quot;bar&quot;

If you list the environment variables after that, it will say **`WHATEVER=&quot;bar&quot;`**

I nearly hate this enough to want to fix it by layering on a case-sensitive default behavior, and try and force Windows users to straighten out their systems and use consistent casing.

    &gt;&gt; env.WhAtEvEr: &quot;bar&quot;
    ** Error: existing environment variable casing is WHATEVER, not WhAtEvEr

Beyond just bringing about more sanity in the world, this would mean your programs would run better cross-platform (as I try to maintain Windows, Mac, Linux, HaikuOS, etc. I&#39;m particularly attuned to when these undesirable design choices make that miserable.)

It&#39;s technically possible to do this.  But you&#39;d need a way to get past it if.

* There could be a setting on the ENVIRONMENT! you can tweak regarding case sensitivity.

* It could be a difference in behavior between WORD! lookup and TEXT! lookup
   * (I like this less, because it seems unmotivated)

## Empty Strings &lt;&gt; Unset Variables (But APIs Confuse...)

Setting an environment variable to an empty string is possible, and it&#39;s not the same as the environment variable not being set.

The prescriptivist in me says you should avoid this pattern.  One thought I have is that this could be a &quot;null-vs-trash-vs-text&quot; distinction, e.g. if:

    C:\&gt; set SOME_VAR=&quot;&quot;

Then...

    &gt;&gt; env.SOME_VAR
    == ~null~  ; anti

Basically, disallow you from setting environment variables to empty strings, and consider that empty state to be something you have to handle specially.

Although...this dovetails in an interestingly with raised errors for variables that aren&#39;t there:

    &gt;&gt; env.ASDFASDF
    ** Error: ASDFASDF not assigned in environment

Because TRY converts that raised error to a null (and I&#39;m considering this to be what leading-colon does, which is an interesting parallel to history, though it will give you null and not a TRASH antiform):

    &gt;&gt; try env.ASDFASDF
    == ~null~  ; anti

    &gt;&gt; :env.ASDFASDF
    == ~null~  ; anti

This means that if you&#39;re willing to accept non-set environment variables, you can conflate their intents just by getting null for them and environment variables set to empty strings.  If you need to discern them, then you&#39;d use EXCEPT or TRAP to say what to do with the not set case differently from the set to empty string case.

I like it... BUT I&#39;m not so keen on letting you set environment variables to NULL and producing empty strings casually, when what you meant to do was set them to TRASH to remove them.  But you have to know the difference when setting fields in objects.

Anyway, just throwing this out there.  As usual, I think we have opportunities to be a force for sanity, and there can always be a fallback for people who want to live in the ugly world... just don&#39;t make ugly the default.</description>
    
    <lastBuildDate>Sun, 20 Apr 2025 18:18:41 +0000</lastBuildDate>
    <category>System Tools</category>
    <atom:link href="https://rebol.metaeducation.com/t/environment-variable-edge-cases/2418.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Environment Variable Edge Cases</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1857">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/from-get-env-foo-to-environment-foo-to-env-foo-to-foo/1857/3">From (get-env "FOO") to (environment.FOO) to (env.FOO) to $FOO</a></div>
<blockquote>
<p>We have standardized methods now where if you say <strong><code>env.FOO</code></strong> and it doesn't find it, then you get a raised error. So you say <strong><code>try env.FOO</code></strong> and get NULL, or <strong><code>maybe env.FOO</code></strong> and get VOID.</p>
</blockquote>
</aside>
<p>Environment variables have some nasty edge cases</p>
<h2><a name="p-8153-windows-environment-var-names-are-not-case-sensitive-1" class="anchor" href="https://rebol.metaeducation.com#p-8153-windows-environment-var-names-are-not-case-sensitive-1"></a>Windows Environment Var Names are not Case-Sensitive</h2>
<p>Whoever sets the variable first lays claim to the case, so:</p>
<pre><code>C:\&gt; set WHATEVER="foo"

C:\&gt; set WhAtEvEr="bar"
</code></pre>
<p>If you list the environment variables after that, it will say <strong><code>WHATEVER="bar"</code></strong></p>
<p>I nearly hate this enough to want to fix it by layering on a case-sensitive default behavior, and try and force Windows users to straighten out their systems and use consistent casing.</p>
<pre><code>&gt;&gt; env.WhAtEvEr: "bar"
** Error: existing environment variable casing is WHATEVER, not WhAtEvEr
</code></pre>
<p>Beyond just bringing about more sanity in the world, this would mean your programs would run better cross-platform (as I try to maintain Windows, Mac, Linux, HaikuOS, etc. I'm particularly attuned to when these undesirable design choices make that miserable.)</p>
<p>It's technically possible to do this.  But you'd need a way to get past it if.</p>
<ul>
<li>
<p>There could be a setting on the ENVIRONMENT! you can tweak regarding case sensitivity.</p>
</li>
<li>
<p>It could be a difference in behavior between WORD! lookup and TEXT! lookup</p>
<ul>
<li>(I like this less, because it seems unmotivated)</li>
</ul>
</li>
</ul>
<h2><a name="p-8153-empty-strings-unset-variables-but-apis-confuse-2" class="anchor" href="https://rebol.metaeducation.com#p-8153-empty-strings-unset-variables-but-apis-confuse-2"></a>Empty Strings &lt;&gt; Unset Variables (But APIs Confuse...)</h2>
<p>Setting an environment variable to an empty string is possible, and it's not the same as the environment variable not being set.</p>
<p>The prescriptivist in me says you should avoid this pattern.  One thought I have is that this could be a "null-vs-trash-vs-text" distinction, e.g. if:</p>
<pre><code>C:\&gt; set SOME_VAR=""
</code></pre>
<p>Then...</p>
<pre><code>&gt;&gt; env.SOME_VAR
== ~null~  ; anti
</code></pre>
<p>Basically, disallow you from setting environment variables to empty strings, and consider that empty state to be something you have to handle specially.</p>
<p>Although...this dovetails in an interestingly with raised errors for variables that aren't there:</p>
<pre><code>&gt;&gt; env.ASDFASDF
** Error: ASDFASDF not assigned in environment
</code></pre>
<p>Because TRY converts that raised error to a null (and I'm considering this to be what leading-colon does, which is an interesting parallel to history, though it will give you null and not a TRASH antiform):</p>
<pre><code>&gt;&gt; try env.ASDFASDF
== ~null~  ; anti

&gt;&gt; :env.ASDFASDF
== ~null~  ; anti
</code></pre>
<p>This means that if you're willing to accept non-set environment variables, you can conflate their intents just by getting null for them and environment variables set to empty strings.  If you need to discern them, then you'd use EXCEPT or TRAP to say what to do with the not set case differently from the set to empty string case.</p>
<p>I like it... BUT I'm not so keen on letting you set environment variables to NULL and producing empty strings casually, when what you meant to do was set them to TRASH to remove them.  But you have to know the difference when setting fields in objects.</p>
<p>Anyway, just throwing this out there.  As usual, I think we have opportunities to be a force for sanity, and there can always be a fallback for people who want to live in the ugly world... just don't make ugly the default.</p>
          <p><a href="https://rebol.metaeducation.com/t/environment-variable-edge-cases/2418/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/environment-variable-edge-cases/2418/1</link>
        <pubDate>Thu, 17 Apr 2025 18:39:29 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2418-1</guid>
        <source url="https://rebol.metaeducation.com/t/environment-variable-edge-cases/2418.rss">Environment Variable Edge Cases</source>
      </item>
  </channel>
</rss>
