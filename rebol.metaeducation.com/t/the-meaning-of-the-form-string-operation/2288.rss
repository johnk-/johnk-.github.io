<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Meaning of the FORM String Operation</title>
    <link>https://rebol.metaeducation.com/t/the-meaning-of-the-form-string-operation/2288</link>
    <description>So FORM&#39;s vague job is to give a &quot;human readable representation&quot; of the data it&#39;s given.

So for TEXT!, it gives you a representation of the string without delimiters--in contrast to MOLD, which gives you the delimiters:

    &gt;&gt; form &quot;hello world&quot;
    == &quot;hello world&quot;

    &gt;&gt; mold &quot;hello world&quot;
    == {&quot;hello world&quot;}

And you&#39;re probably thinking *&quot;Uh...FORM of a text string is a no-op.  Why would you do that?&quot;*

The idea is that there are things other than text which do what the delimiters.  Such as TAG!

    &gt;&gt; form &lt;hello world&gt;
    == &quot;&lt;hello world&gt;&quot;

    &gt;&gt; mold &lt;hello world&gt;
    == &quot;&lt;hello world&gt;&quot;

What if you don&#39;t want delimiters on your TAG!s and such?  Well... for any string-ish type, thanks to UTF-8 we have a *super efficient* operation called AS TEXT! which aliases any type as a string.  It reuses the memory:

    &gt;&gt; tag: &lt;hello world&gt;

    &gt;&gt; text: as text! &lt;hello world&gt;
    == &quot;hello world&quot;

    &gt;&gt; append tag &quot;ly Ren-C user&quot;
    == &lt;hello worldly Ren-C user&gt;

    &gt;&gt; text
    == &quot;hello worldly Ren-C user&quot;

You can use it on ANY-WORD! as well, and it will give you a read-only string... and not have the sigils:

    &gt;&gt; as text! &#39;$var
    == &quot;var&quot;

I have an inkling that over the subset of operations to which you can use both TO and AS, that you should get the same result... just a copy:

    &gt;&gt; tag: &lt;hello world&gt;

    &gt;&gt; text: to text! &lt;hello world&gt;  ; TO TEXT!, not AS TEXT!
    == &quot;hello world&quot;

    &gt;&gt; append tag &quot;ly Ren-C user&quot;
    == &lt;hello worldly Ren-C user&gt;

    &gt;&gt; text
    == &quot;hello world&quot;

## So FORM adds delimiters, and TO+AS TEXT! Does Not...

...BUT...let&#39;s go back:

    &gt;&gt; form &quot;hello world&quot;
    == &quot;hello world&quot;

    &gt;&gt; form &lt;hello world&gt;
    == &quot;&lt;hello world&gt;&quot;

Why again is FORM a no-op on text, but adds delimiters to tags?

## And How About Blocks?

The block behavior of FORM historically strikes me as not terribly useful:

    rebol2/red&gt;&gt; form [I am [:a &quot;block&quot; that:] &lt;is&gt; (being formed)]
    == &quot;I am a block that &lt;is&gt; being formed&quot;

    r3-alpha&gt;&gt; form [I am [:a &quot;block&quot; that:] &lt;is&gt; (being formed)]
    == &quot;I am :a block that: &lt;is&gt; being formed&quot;

How often do you want to take a bunch of material and throw away decorations from some of it, and flatten out all the lists with no processing but spaces?

I don&#39;t think I&#39;ve ever used that.  I see more use in MOLD SPREAD, which it seems like R3-Alpha was edging toward and didn&#39;t quite get there.

    &gt;&gt; mold spread [I am [:a &quot;block&quot; that:] &lt;is&gt; (being &quot;formed&quot;)]
    == {(I am :a &quot;block&quot; that: &lt;is&gt; (being &quot;formed&quot;))}

## Who is Calling FORM (and why are they calling it?)

The variance in behaviors across R3-Alpha and Red show what is usually true when you see variation--*people don&#39;t know why the thing exists, find out it has random behavior, then avoid using it in favor of other things*.

Most uses seem to be turning WORD! to string, and turning TAG! to string with some assurance it will have the delimiters on it.  Nobody really uses it on blocks.

I don&#39;t yet have a complete answer for either getting rid of it, or defining it rigorously.  But I&#39;m going to start paying more attention to it.</description>
    
    <lastBuildDate>Fri, 20 Sep 2024 10:35:28 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/the-meaning-of-the-form-string-operation/2288.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Meaning of the FORM String Operation</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>I think it may be useful to compare the set of operations used in Haskell:</p>
<ul>
<li>The main function is <code>show</code>. It can convert any type to <code>String</code> (well, any <code>Show</code> instance). The intention is that it should return a string with valid Haskell syntax, which can be printed for debugging purposes, or converted back to a Haskell value with <code>read</code> (although no-one ever uses <code>read</code> in practice). This is therefore Haskell’s equivalent to MOLD.</li>
<li>What a lot of people <em>want</em> is a function which can nicely pretty-print any value. People tend to co-opt <code>show</code> for this, but that breaks its usual behaviour. I believe a function for this is provided in third-party libraries, but simply by the nature of being third-party they’ve never gotten much traction.</li>
<li>Haskell doesn’t have many types like TAG! which are pure string wrappers. When they crop up, they tend to define their own individual functions for conversion to strings.</li>
</ul>
<p>Compared to these, the behaviour you’ve described for FORM sounds dreadfully ad-hoc. No delimiters for TEXT!, delimiters for other string types, and something weird for blocks. I can think of no use-case for this.</p>
<p>I thus suggest getting rid of FORM entirely. It can easily be replaced with MOLD where delimiters are needed, and AS/TO TEXT! where they’re not. If someone really needs to strip off the delimiters for strings only (an unlikely scenario), they can use a conditional and make it clear that that’s really what they want.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-meaning-of-the-form-string-operation/2288/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-meaning-of-the-form-string-operation/2288/2</link>
        <pubDate>Fri, 20 Sep 2024 10:35:28 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2288-2</guid>
        <source url="https://rebol.metaeducation.com/t/the-meaning-of-the-form-string-operation/2288.rss">The Meaning of the FORM String Operation</source>
      </item>
      <item>
        <title>The Meaning of the FORM String Operation</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So FORM's vague job is to give a "human readable representation" of the data it's given.</p>
<p>So for TEXT!, it gives you a representation of the string without delimiters--in contrast to MOLD, which gives you the delimiters:</p>
<pre><code>&gt;&gt; form "hello world"
== "hello world"

&gt;&gt; mold "hello world"
== {"hello world"}
</code></pre>
<p>And you're probably thinking <em>"Uh...FORM of a text string is a no-op.  Why would you do that?"</em></p>
<p>The idea is that there are things other than text which do what the delimiters.  Such as TAG!</p>
<pre><code>&gt;&gt; form &lt;hello world&gt;
== "&lt;hello world&gt;"

&gt;&gt; mold &lt;hello world&gt;
== "&lt;hello world&gt;"
</code></pre>
<p>What if you don't want delimiters on your TAG!s and such?  Well... for any string-ish type, thanks to UTF-8 we have a <em>super efficient</em> operation called AS TEXT! which aliases any type as a string.  It reuses the memory:</p>
<pre><code>&gt;&gt; tag: &lt;hello world&gt;

&gt;&gt; text: as text! &lt;hello world&gt;
== "hello world"

&gt;&gt; append tag "ly Ren-C user"
== &lt;hello worldly Ren-C user&gt;

&gt;&gt; text
== "hello worldly Ren-C user"
</code></pre>
<p>You can use it on ANY-WORD! as well, and it will give you a read-only string... and not have the sigils:</p>
<pre><code>&gt;&gt; as text! '$var
== "var"
</code></pre>
<p>I have an inkling that over the subset of operations to which you can use both TO and AS, that you should get the same result... just a copy:</p>
<pre><code>&gt;&gt; tag: &lt;hello world&gt;

&gt;&gt; text: to text! &lt;hello world&gt;  ; TO TEXT!, not AS TEXT!
== "hello world"

&gt;&gt; append tag "ly Ren-C user"
== &lt;hello worldly Ren-C user&gt;

&gt;&gt; text
== "hello world"
</code></pre>
<h2><a name="p-7708-so-form-adds-delimiters-and-toas-text-does-not-1" class="anchor" href="https://rebol.metaeducation.com#p-7708-so-form-adds-delimiters-and-toas-text-does-not-1"></a>So FORM adds delimiters, and TO+AS TEXT! Does Not...</h2>
<p>...BUT...let's go back:</p>
<pre><code>&gt;&gt; form "hello world"
== "hello world"

&gt;&gt; form &lt;hello world&gt;
== "&lt;hello world&gt;"
</code></pre>
<p>Why again is FORM a no-op on text, but adds delimiters to tags?</p>
<h2><a name="p-7708-and-how-about-blocks-2" class="anchor" href="https://rebol.metaeducation.com#p-7708-and-how-about-blocks-2"></a>And How About Blocks?</h2>
<p>The block behavior of FORM historically strikes me as not terribly useful:</p>
<pre><code>rebol2/red&gt;&gt; form [I am [:a "block" that:] &lt;is&gt; (being formed)]
== "I am a block that &lt;is&gt; being formed"

r3-alpha&gt;&gt; form [I am [:a "block" that:] &lt;is&gt; (being formed)]
== "I am :a block that: &lt;is&gt; being formed"
</code></pre>
<p>How often do you want to take a bunch of material and throw away decorations from some of it, and flatten out all the lists with no processing but spaces?</p>
<p>I don't think I've ever used that.  I see more use in MOLD SPREAD, which it seems like R3-Alpha was edging toward and didn't quite get there.</p>
<pre><code>&gt;&gt; mold spread [I am [:a "block" that:] &lt;is&gt; (being "formed")]
== {(I am :a "block" that: &lt;is&gt; (being "formed"))}
</code></pre>
<h2><a name="p-7708-who-is-calling-form-and-why-are-they-calling-it-3" class="anchor" href="https://rebol.metaeducation.com#p-7708-who-is-calling-form-and-why-are-they-calling-it-3"></a>Who is Calling FORM (and why are they calling it?)</h2>
<p>The variance in behaviors across R3-Alpha and Red show what is usually true when you see variation--<em>people don't know why the thing exists, find out it has random behavior, then avoid using it in favor of other things</em>.</p>
<p>Most uses seem to be turning WORD! to string, and turning TAG! to string with some assurance it will have the delimiters on it.  Nobody really uses it on blocks.</p>
<p>I don't yet have a complete answer for either getting rid of it, or defining it rigorously.  But I'm going to start paying more attention to it.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-meaning-of-the-form-string-operation/2288/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-meaning-of-the-form-string-operation/2288/1</link>
        <pubDate>Fri, 20 Sep 2024 09:16:05 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2288-1</guid>
        <source url="https://rebol.metaeducation.com/t/the-meaning-of-the-form-string-operation/2288.rss">The Meaning of the FORM String Operation</source>
      </item>
  </channel>
</rss>
