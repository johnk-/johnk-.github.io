<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Uses of FENCE! In Dialecting</title>
    <link>https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728</link>
    <description>I&#39;m now committed to [make braces a new array type](https://rebol.metaeducation.com/t/rethinking-braces-as-an-array-type/1727). Rebol has put itself in a bad position by using that particularly valuable piece of keyboard real-estate for something &quot;superficial&quot; like making strings a little cleaner, sometimes.  :-/

# `[block]` `•`  `(group)` `•` `{fence}`

It&#39;s *likely* (though not 100% set in stone) that FENCE! will evaluate by running MAKE OBJECT!.  But what might it do in other dialects?

* *&quot;If there&#39;s an integer inside of a pair of fences, such as `{{10}}`, then that represents a citation.  Citations can appear at either the beginning or end of a reference block.&quot;*

* *&quot;In the PARSE dialect, blocks are used to represent subrules.  Groups switch over to running ordinary code as with DO.  While fences are used to... (insert your active imagination here)&quot;*

## If FENCE! Were Inert, That Would Change Dialecting Possibilities

Fences don&#39;t necessarily have to produce an object under evaluation.  If it wasn&#39;t, you could do things like pass it to an arity-1 MAKE:

    &gt;&gt; obj: make {x: 10 y: 20}
    == ...object x: 10 y: 20...  ; whatever literals look like

Switching to an arity-1 MAKE could be dialected, if you needed to slip things like a parent object in:

    &gt;&gt; obj2: make {&lt;parent&gt; obj, x: 30}  ; potential dialect for mentioning parent
    == ...object x: 30 y: 20....

    &gt;&gt; obj3: make {{obj} x: 30}  ; weirder but more succinct dialect parent concept
    == ...object x: 30 y: 20...

Less disruptive, we could just say it reduces:

    &gt;&gt; reduce {x: 10 y: 20}
    == make object! [x: 10 y: 20]  ; or whatever

Then GET-FENCE! could do the same:

    &gt;&gt; :{x: 10 y: 20}
    == make object! [x: 10 y: 20]  ; or whatever</description>
    
    <lastBuildDate>Sun, 11 May 2025 10:05:55 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Uses of FENCE! In Dialecting</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>4 posts were split to a new topic: <a href="https://rebol.metaeducation.com/t/evaluator-hooking-rebindablesyntax/2443">Evaluator Hooking ("RebindableSyntax")</a></p>
          <p><a href="https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728/5</link>
        <pubDate>Sun, 11 May 2025 10:09:41 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1728-5</guid>
        <source url="https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728.rss">Uses of FENCE! In Dialecting</source>
      </item>
      <item>
        <title>Uses of FENCE! In Dialecting</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1728">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Fences don't necessarily have to produce an object under evaluation. If it wasn't, you could do things like pass it to an arity-1 MAKE:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; obj: make {x: 10 y: 20}
== ...object x: 10 y: 20...  ; whatever literals look like
</code></pre>
</blockquote>
</aside>
<p>I've taken my time to mull over this question, and not assume too much.  I wanted to look at all the angles.</p>
<p>Having looked at those angles, I've reached a conclusion (which I suspected all along...)</p>
<h1><a name="p-8239-it-would-be-a-phenomenally-insane-waste-of-an-opportunity-to-make-fence-unconditionally-inert-in-the-evaluator-1" class="anchor" href="https://rebol.metaeducation.com#p-8239-it-would-be-a-phenomenally-insane-waste-of-an-opportunity-to-make-fence-unconditionally-inert-in-the-evaluator-1"></a>IT WOULD BE A PHENOMENALLY INSANE WASTE OF AN OPPORTUNITY TO MAKE FENCE! (UNCONDITIONALLY) INERT IN THE EVALUATOR.</h1>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/wastebasket.png?v=14" title=":wastebasket:" class="emoji only-emoji" alt=":wastebasket:" loading="lazy" width="20" height="20"></p>
<p><strong>If you want an inert FENCE!, you can make one.</strong></p>
<pre><code>&gt;&gt; '{a b c}
== {a b c}  ; unbound

&gt;&gt; ${a b c}
== {a b c}  ; bound

&gt;&gt; @{a b c}
== @{a b c}  ; bound

&gt;&gt; ^{a b c}
== ... ; I have no clue, yet
</code></pre>
<p><strong>It's a golden opportunity to give people a surprising artifact, that does something "familiar" but is much more than meets the eye...</strong></p>
<pre><code>&gt;&gt; z: &lt;outside&gt;

&gt;&gt; obj: {x: 10, print "Hello" print "World", y: null, z: z}
Hello
World
== #[...object...]

&gt;&gt; obj.x
== 10

&gt;&gt; obj.y
== 20

&gt;&gt; obj.z
== &lt;outside&gt;

&gt;&gt; for-each [key val] obj [probe key probe val]
x
10
y 
~null~  ; anti
z
&lt;outside&gt;
</code></pre>
<p>You've transitioned from a FENCE! ... which is a list structure that can only hold reified elements... to a key/value structure whose slots can hold stable antiforms.</p>
<p>Besides just plain assignments, you're allowed to run code.  But the default construction should not assume WORD! references resolve inside the object as its being generated.  There should be a way to get at those internal references if you need them, but I'm kind of opposed to defining any sort of THIS or SELF word in an evaluator primitive.</p>
          <p><a href="https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728/4</link>
        <pubDate>Sat, 10 May 2025 12:03:51 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1728-4</guid>
        <source url="https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728.rss">Uses of FENCE! In Dialecting</source>
      </item>
      <item>
        <title>Uses of FENCE! In Dialecting</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm now committed to <a href="https://rebol.metaeducation.com/t/rethinking-braces-as-an-array-type/1727">make braces a new array type</a>. Rebol has put itself in a bad position by using that particularly valuable piece of keyboard real-estate for something "superficial" like making strings a little cleaner, sometimes.  :-/</p>
<h1><a name="p-5524-block-group-fence-1" class="anchor" href="https://rebol.metaeducation.com#p-5524-block-group-fence-1"></a><code>[block]</code> <code>•</code>  <code>(group)</code> <code>•</code> <code>{fence}</code></h1>
<p>It's <em>likely</em> (though not 100% set in stone) that FENCE! will evaluate by running MAKE OBJECT!.  But what might it do in other dialects?</p>
<ul>
<li>
<p><em>"If there's an integer inside of a pair of fences, such as <code>{{10}}</code>, then that represents a citation.  Citations can appear at either the beginning or end of a reference block."</em></p>
</li>
<li>
<p><em>"In the PARSE dialect, blocks are used to represent subrules.  Groups switch over to running ordinary code as with DO.  While fences are used to... (insert your active imagination here)"</em></p>
</li>
</ul>
<h2><a name="p-5524-if-fence-were-inert-that-would-change-dialecting-possibilities-2" class="anchor" href="https://rebol.metaeducation.com#p-5524-if-fence-were-inert-that-would-change-dialecting-possibilities-2"></a>If FENCE! Were Inert, That Would Change Dialecting Possibilities</h2>
<p>Fences don't necessarily have to produce an object under evaluation.  If it wasn't, you could do things like pass it to an arity-1 MAKE:</p>
<pre><code>&gt;&gt; obj: make {x: 10 y: 20}
== ...object x: 10 y: 20...  ; whatever literals look like
</code></pre>
<p>Switching to an arity-1 MAKE could be dialected, if you needed to slip things like a parent object in:</p>
<pre><code>&gt;&gt; obj2: make {&lt;parent&gt; obj, x: 30}  ; potential dialect for mentioning parent
== ...object x: 30 y: 20....

&gt;&gt; obj3: make {{obj} x: 30}  ; weirder but more succinct dialect parent concept
== ...object x: 30 y: 20...
</code></pre>
<p>Less disruptive, we could just say it reduces:</p>
<pre><code>&gt;&gt; reduce {x: 10 y: 20}
== make object! [x: 10 y: 20]  ; or whatever
</code></pre>
<p>Then GET-FENCE! could do the same:</p>
<pre><code>&gt;&gt; :{x: 10 y: 20}
== make object! [x: 10 y: 20]  ; or whatever
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728/1</link>
        <pubDate>Thu, 30 Sep 2021 11:36:13 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1728-1</guid>
        <source url="https://rebol.metaeducation.com/t/uses-of-fence-in-dialecting/1728.rss">Uses of FENCE! In Dialecting</source>
      </item>
  </channel>
</rss>
