<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Parsing/Destructuring a QUOTED! or QUASIFORM!</title>
    <link>https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300</link>
    <description>Quoteds (and quasiforms) can be seen kind of as containers...

But there isn&#39;t a good way to destructure them at the moment.

One off-the-cuff idea would be that you could SUBPARSE into them:

    &gt;&gt; parse [&#39;a:] [subparse quoted! set-word!]
    == a:

    &gt;&gt; parse [&#39;&#39;a:] [subparse quoted! subparse quoted! set-word!]
    == a:

    &gt;&gt; parse [~(a b c)~] [subparse quasiform! subparse group! [some word!]]
    == c

A bit of a belabored method.  And because combinators require a series, I can&#39;t think of any efficient way to do that (vs. fabricating an array to hold a single item, and parsing that as a series.)  But it&#39;s better than no method at all.

**UPDATE:** Having come up with a strategy for [doing constraints like **`quote:quote:block?`**](https://rebol.metaeducation.com/t/typechecking-quoted-forms-quasiforms-antiforms/2298), it seems that covers a lot of use cases:

    &gt;&gt; parse [&#39;a:] [&amp;quote:set-word!]
    == a:

    &gt;&gt; parse [&#39;&#39;a:] [&amp;quote:quote:set-word!]
    == a:

    &gt;&gt; parse [~(a b c)~] [subparse &amp;quasi:group! [some word!]]
    == c

It would require SUBPARSE to be willing to go inside quoted lists, which is easy enough to permit (and no reason not to, since it has to pass the type check you know what you&#39;re doing).

Seems to be reasonably powerful...just have to make peace with this strange new world of *dialecting the act of calling functions itself.* (!)</description>
    
    <lastBuildDate>Sat, 28 Sep 2024 02:38:22 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Parsing/Destructuring a QUOTED! or QUASIFORM!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Yup, that's good in the spirit of DESTRUCTURE.</p>
<p><a href="https://rebol.metaeducation.com/t/destructure-dialect/1877" class="inline-onebox">DESTRUCTURE Dialect</a></p>
<p>Using blanks in these cases to mean "match anything" makes me wonder if that should be the meaning of blank in parse in general...and switch over to <strong>#</strong> for space in strings (<a href="https://rebol.metaeducation.com/t/how-does-blank-interact-with-strings/2287/2">it now is the space character literal</a>) and use <strong><code>'_</code></strong> to match blanks in lists.</p>
<p><a href="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821">It's been up in the air a long time.</a>  My ambition to make <strong>_</strong> what's used for spaces in string dialects has driven the current leaning, but, now that <strong>#</strong> is space, I guess I can live with that.</p>
<pre><code>&gt;&gt; refinement-rule: [subparse chain! ['_ word!]]  ; would require the quote

&gt;&gt; parse [:foo] [refinement-rule]
== foo
</code></pre>
<p>It seems that if unquoted blank is literal in some pattern matching places and not others, that just gets confusing.</p>
          <p><a href="https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300/3</link>
        <pubDate>Sat, 28 Sep 2024 02:29:54 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2300-3</guid>
        <source url="https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300.rss">Parsing/Destructuring a QUOTED! or QUASIFORM!</source>
      </item>
      <item>
        <title>Parsing/Destructuring a QUOTED! or QUASIFORM!</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2300">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Quoteds (and quasiforms) can be seen kind of as containers...</p>
<p>But there isn't a good way to destructure them at the moment.</p>
</blockquote>
</aside>
<p>I’m going to bring up something I’ve mentioned before: pattern-matching!</p>
<p>Imagining a possible syntax:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; match ''a: ['($value): [probe value]]
a

&gt;&gt; match '~(a b c)~ [~(_ _ $value)~ [probe value]]
c
</code></pre>
<p>Rebol’s syntax makes this particularly ergonomic, because you can re-use value syntax for patterns.</p>
          <p><a href="https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300/2</link>
        <pubDate>Sat, 28 Sep 2024 02:20:00 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2300-2</guid>
        <source url="https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300.rss">Parsing/Destructuring a QUOTED! or QUASIFORM!</source>
      </item>
      <item>
        <title>Parsing/Destructuring a QUOTED! or QUASIFORM!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Quoteds (and quasiforms) can be seen kind of as containers...</p>
<p>But there isn't a good way to destructure them at the moment.</p>
<p>One off-the-cuff idea would be that you could SUBPARSE into them:</p>
<pre><code>&gt;&gt; parse ['a:] [subparse quoted! set-word!]
== a:

&gt;&gt; parse [''a:] [subparse quoted! subparse quoted! set-word!]
== a:

&gt;&gt; parse [~(a b c)~] [subparse quasiform! subparse group! [some word!]]
== c
</code></pre>
<p>A bit of a belabored method.  And because combinators require a series, I can't think of any efficient way to do that (vs. fabricating an array to hold a single item, and parsing that as a series.)  But it's better than no method at all.</p>
<p><strong>UPDATE:</strong> Having come up with a strategy for <a href="https://rebol.metaeducation.com/t/typechecking-quoted-forms-quasiforms-antiforms/2298">doing constraints like <strong><code>quote:quote:block?</code></strong></a>, it seems that covers a lot of use cases:</p>
<pre><code>&gt;&gt; parse ['a:] [&amp;quote:set-word!]
== a:

&gt;&gt; parse [''a:] [&amp;quote:quote:set-word!]
== a:

&gt;&gt; parse [~(a b c)~] [subparse &amp;quasi:group! [some word!]]
== c
</code></pre>
<p>It would require SUBPARSE to be willing to go inside quoted lists, which is easy enough to permit (and no reason not to, since it has to pass the type check you know what you're doing).</p>
<p>Seems to be reasonably powerful...just have to make peace with this strange new world of <em>dialecting the act of calling functions itself.</em> (!)</p>
          <p><a href="https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300/1</link>
        <pubDate>Fri, 27 Sep 2024 21:59:08 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2300-1</guid>
        <source url="https://rebol.metaeducation.com/t/parsing-destructuring-a-quoted-or-quasiform/2300.rss">Parsing/Destructuring a QUOTED! or QUASIFORM!</source>
      </item>
  </channel>
</rss>
