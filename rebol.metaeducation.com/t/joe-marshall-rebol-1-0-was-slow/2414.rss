<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Joe Marshall: &quot;REBOL 1.0 Was Slow&quot;</title>
    <link>https://rebol.metaeducation.com/t/joe-marshall-rebol-1-0-was-slow/2414</link>
    <description>Joe Marshall has posted on his blog about Rebol 1.0, here in modern times (January 3, 2025).

**[https://funcall.blogspot.com/2025/01/rebol-10-was-slow.html](https://funcall.blogspot.com/2025/01/rebol-10-was-slow.html)**

*(See also posts here on this forum: **[Rebol 1.0 Retrospective](https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788)**)*

---

&gt; Rebol 1.0 was slow. I paid little attention to speed in the implementation — I was concerned with correctness. The intepreter was intended to be a reference implementation, with well-defined behavior on every edge case. My intent was to add a compiler at a later date.
&gt;
&gt; Once source of slowness was the liberal use of first-class continuations in the interpreter. Rebol 1.0 used a “Cheney on the MTA” interpretation strategy, where no function ever returned a value and the stack simply got deeper and deeper. When the stack overflowed, a stack garbage collection was triggered. Since most of the stack was garbage, this was a fast operation (I used a garbage collector that used time proportional to live storage). With such an implementation, first-class continuations were trivial to implement — *all* continuations were first-class, it was just a question of whether you surfaced them to the user. I didn’t have an ideological belief either way, but there they were, so why not? Many control flow constructs that would otherwise require an *ad hoc* implementation can be easily implemented with first-class continuations.
&gt;
&gt; Rebol had `return` statements that would return control to the caller from within the function. 99% of the time, the caller is sitting on the stack just above the current frame. But 1% of the time, the user would do something weird like create a lexical closure over the `return` statement and pass it downward. Like as not he didn’t deliberately do this, but rather used some library that was implemented in continuation-passing style. If this happened, the `return` statement might have to unwind an arbitrary amount of stack. To implement this, I captured the current continuation at the entry of each function and bound it to the implicit “`return`” variable. Invoking `return` invoked the continuation and returned control to the caller. The advantage of doing it this way was that `return` statements had the correct semantics under all circumstances. There were no special rules governing use of `return` and no code had to have special cases for unexpected `return`s.
&gt;
&gt; A similar thing happened in the implementation of `break` and `continue` in loops. These were implemented by capturing the continuation at the entry of the loop and binding it to the implicit `break` variable, and capturing the continuation on each iteration and binding it to the implicit `continue` variable. Because these were first-class continuations, they could be used to restart the loop after it exited. That wasn’t a requirement. I was perfectly happy to stipulate that `break` and `continue` only work while a loop is in progress, but in Rebol 1.0, they’d continue to work after the loop finished.
&gt;
&gt; Worrying about continuations captured in lexical closures may seem weird, but it’s a real issue. It is common to introduce implicit lexical contours in a program: even a `let` expression does it. You would like to be able to use `break` and `continue` in the body of a `let` expression in a loop. Some Rebol constructs were implemented by implicitly macroexpanding the code into a call to a helper function. `break` and `continue` would work across function call boundaries, so there were no limitations on introducing helper functions within a loop.
&gt;
&gt; A more traditional language has a handful of *ad hoc* iteration constructs that are implemented with special purpose code. The special purpose code knows it is a loop and can be optimized for this. `break` and `continue` statements have a special dependency on the enclosing loop.
&gt;
&gt; Rebol 1.0 was properly tail recursive, so there was no special implementation of loops. They were ordinary functions that happened to call themselves. Non-standard iteration constructs could be created by the user by simply writing code that called itself. `break` and `continue` just surfaced the interpreter’s continuation to the user. As a consequence, loops in Rebol 1.0 were implemented completely in Rebol code but had signifcant interpreter overhead.
&gt;
&gt; Rebol 2.0 and later are not properly tail recusive. As a consequence, special looping constructs are required to be written in C to support iteration. Common iteration constucts such as `for` and `while` are provided and do not have interpreter overhead, but if you want a non-standard iteration construct, there is no way to achieve it. You have to re-write your code to use one of the built-in iteration constructs or go without and risk blowing the stack.
&gt;
&gt; My intent was to eventually write a compiler for Rebol. I wrote a prototype called Sherman that compiled to MIT-Scheme and was supported by the MIT-Scheme runtime library. Loops compiled with Sherman ran quickly as expected.</description>
    
    <lastBuildDate>Sat, 12 Apr 2025 18:42:39 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://rebol.metaeducation.com/t/joe-marshall-rebol-1-0-was-slow/2414.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Joe Marshall: &quot;REBOL 1.0 Was Slow&quot;</title>
        <dc:creator><![CDATA[rebolbot]]></dc:creator>
        <description><![CDATA[
            <p>Joe Marshall has posted on his blog about Rebol 1.0, here in modern times (January 3, 2025).</p>
<p><strong><a href="https://funcall.blogspot.com/2025/01/rebol-10-was-slow.html">https://funcall.blogspot.com/2025/01/rebol-10-was-slow.html</a></strong></p>
<p><em>(See also posts here on this forum: <strong><a href="https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788">Rebol 1.0 Retrospective</a></strong>)</em></p>
<hr>
<blockquote>
<p>Rebol 1.0 was slow. I paid little attention to speed in the implementation — I was concerned with correctness. The intepreter was intended to be a reference implementation, with well-defined behavior on every edge case. My intent was to add a compiler at a later date.</p>
<p>Once source of slowness was the liberal use of first-class continuations in the interpreter. Rebol 1.0 used a “Cheney on the MTA” interpretation strategy, where no function ever returned a value and the stack simply got deeper and deeper. When the stack overflowed, a stack garbage collection was triggered. Since most of the stack was garbage, this was a fast operation (I used a garbage collector that used time proportional to live storage). With such an implementation, first-class continuations were trivial to implement — <em>all</em> continuations were first-class, it was just a question of whether you surfaced them to the user. I didn’t have an ideological belief either way, but there they were, so why not? Many control flow constructs that would otherwise require an <em>ad hoc</em> implementation can be easily implemented with first-class continuations.</p>
<p>Rebol had <code>return</code> statements that would return control to the caller from within the function. 99% of the time, the caller is sitting on the stack just above the current frame. But 1% of the time, the user would do something weird like create a lexical closure over the <code>return</code> statement and pass it downward. Like as not he didn’t deliberately do this, but rather used some library that was implemented in continuation-passing style. If this happened, the <code>return</code> statement might have to unwind an arbitrary amount of stack. To implement this, I captured the current continuation at the entry of each function and bound it to the implicit “<code>return</code>” variable. Invoking <code>return</code> invoked the continuation and returned control to the caller. The advantage of doing it this way was that <code>return</code> statements had the correct semantics under all circumstances. There were no special rules governing use of <code>return</code> and no code had to have special cases for unexpected <code>return</code>s.</p>
<p>A similar thing happened in the implementation of <code>break</code> and <code>continue</code> in loops. These were implemented by capturing the continuation at the entry of the loop and binding it to the implicit <code>break</code> variable, and capturing the continuation on each iteration and binding it to the implicit <code>continue</code> variable. Because these were first-class continuations, they could be used to restart the loop after it exited. That wasn’t a requirement. I was perfectly happy to stipulate that <code>break</code> and <code>continue</code> only work while a loop is in progress, but in Rebol 1.0, they’d continue to work after the loop finished.</p>
<p>Worrying about continuations captured in lexical closures may seem weird, but it’s a real issue. It is common to introduce implicit lexical contours in a program: even a <code>let</code> expression does it. You would like to be able to use <code>break</code> and <code>continue</code> in the body of a <code>let</code> expression in a loop. Some Rebol constructs were implemented by implicitly macroexpanding the code into a call to a helper function. <code>break</code> and <code>continue</code> would work across function call boundaries, so there were no limitations on introducing helper functions within a loop.</p>
<p>A more traditional language has a handful of <em>ad hoc</em> iteration constructs that are implemented with special purpose code. The special purpose code knows it is a loop and can be optimized for this. <code>break</code> and <code>continue</code> statements have a special dependency on the enclosing loop.</p>
<p>Rebol 1.0 was properly tail recursive, so there was no special implementation of loops. They were ordinary functions that happened to call themselves. Non-standard iteration constructs could be created by the user by simply writing code that called itself. <code>break</code> and <code>continue</code> just surfaced the interpreter’s continuation to the user. As a consequence, loops in Rebol 1.0 were implemented completely in Rebol code but had signifcant interpreter overhead.</p>
<p>Rebol 2.0 and later are not properly tail recusive. As a consequence, special looping constructs are required to be written in C to support iteration. Common iteration constucts such as <code>for</code> and <code>while</code> are provided and do not have interpreter overhead, but if you want a non-standard iteration construct, there is no way to achieve it. You have to re-write your code to use one of the built-in iteration constructs or go without and risk blowing the stack.</p>
<p>My intent was to eventually write a compiler for Rebol. I wrote a prototype called Sherman that compiled to MIT-Scheme and was supported by the MIT-Scheme runtime library. Loops compiled with Sherman ran quickly as expected.</p>
</blockquote>
          <p><a href="https://rebol.metaeducation.com/t/joe-marshall-rebol-1-0-was-slow/2414/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/joe-marshall-rebol-1-0-was-slow/2414/1</link>
        <pubDate>Sat, 12 Apr 2025 18:42:39 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2414-1</guid>
        <source url="https://rebol.metaeducation.com/t/joe-marshall-rebol-1-0-was-slow/2414.rss">Joe Marshall: &quot;REBOL 1.0 Was Slow&quot;</source>
      </item>
  </channel>
</rss>
