<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Some IPv6 Address Examples</title>
    <link>https://rebol.metaeducation.com/t/some-ipv6-address-examples/2496</link>
    <description>&gt; If someone is going to parse ipv6 addresses, can you give a good spread of examples of the edge cases and things to worry about?  A good list of ipv6 addresses that is fairly short but gives coverage of the kinds of things you need to support?

---

# IPv6 Address Parsing Test Cases

## Basic Format Variations

```
2001:0db8:85a3:0000:0000:8a2e:0370:7334     # Full format
2001:db8:85a3:0:0:8a2e:370:7334             # Leading zeros omitted
2001:db8:85a3::8a2e:370:7334                # Zero compression
```

## Zero Compression Edge Cases

```
::1                                         # Loopback (all zeros except last)
::                                          # All zeros address
2001:db8::                                  # Trailing zeros compressed
::2001:db8                                  # Leading zeros compressed
2001::1                                     # Middle zeros compressed
fe80::1%lo0                                 # With zone identifier
```

## Special Addresses

```
::ffff:192.0.2.1                           # IPv4-mapped IPv6
::ffff:0:192.0.2.1                         # IPv4-mapped (alternative)
64:ff9b::192.0.2.33                        # IPv4-embedded IPv6
2002:cb00:7100::                            # 6to4 prefix
ff02::1                                     # Multicast
fe80::1                                     # Link-local
fc00::1                                     # Unique local
```

## Bracket and Port Notation

```
[2001:db8::1]:80                            # With port
[::1]:8080                                  # Loopback with port
[fe80::1%eth0]:22                           # Zone ID with port
```

## Maximum Length Cases

```
ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff     # All F&#39;s (maximum)
2001:0db8:85a3:0000:0000:8a2e:0370:7334     # Full expanded form
```

## Tricky Parsing Cases

```
2001:db8:0:0:1:0:0:1                        # Multiple zero groups (can&#39;t compress)
2001:0:0:0:0:0:0:1                          # Could be 2001::1
a:b:c:d:e:f:1:2                             # All single hex digits
::1:2:3:4:5:6:7                             # Compression at start with 7 groups
1:2:3:4:5:6:7::                             # Compression at end with 7 groups
```

## Case Sensitivity

```
2001:DB8:85A3::8A2E:370:7334                # Uppercase
2001:db8:85a3::8a2e:370:7334                # Lowercase
2001:Db8:85A3::8a2E:370:7334                # Mixed case
```

## Invalid Cases (Should Reject)

```
2001:db8::1::2                              # Double compression (invalid)
2001:db8:85a3::8a2e:370:7334:extra          # Too many groups
2001:db8:85a3:8a2e:370:7334                 # Too few groups (7 instead of 8)
2001:db8:85ag::1                            # Invalid hex character &#39;g&#39;
2001:db8:12345::1                           # Group too long (&gt;4 hex digits)
```

## Key Parsing Rules to Implement

1. **Zero Compression**: Only one `::` allowed per address
2. **Group Count**: Must have exactly 8 groups when expanded
3. **Hex Validation**: Each group is 1-4 hexadecimal digits
4. **Case Insensitive**: Accept both upper and lowercase
5. **Leading Zeros**: Optional in each group
6. **Zone Identifiers**: Handle `%` suffix for link-local addresses
7. **Brackets**: Required when specifying ports
8. **IPv4 Mapping**: Special handling for `::ffff:` prefix</description>
    
    <lastBuildDate>Mon, 23 Jun 2025 23:09:02 +0000</lastBuildDate>
    <category>Lexer</category>
    <atom:link href="https://rebol.metaeducation.com/t/some-ipv6-address-examples/2496.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Some IPv6 Address Examples</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Every now and again I wonder if Ren-C's lexing is robust enough to represent things like IPv6.  So I wanted to take a look at some examples.</p>
<p>Right now there is a rule that you can't have internal SPACE in CHAIN!, PATH!, or TUPLE!.  So no <code>a//b</code> or <code>a::b</code> or <code>a..b</code>.  This rule is enforced in order to let <code>http://example.com/stuff</code> be recognized as a URL!, and not a PATH! like:</p>
<pre><code>to path! [http: _ example.com stuff]
</code></pre>
<p>If we relaxed this rule for CHAIN!, then things like this would be closer to LOAD-able syntax:</p>
<aside class="quote no-group" data-username="rebolbot" data-post="1" data-topic="2496">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p><code>2001:db8:85a3::8a2e:370:7334                # Zero compression</code></p>
</blockquote>
</aside>
<p>But it runs afoul of the fact that we don't support things that start with digits and have letters after them.</p>
<p>Then there's wackiness like:</p>
<aside class="quote no-group" data-username="rebolbot" data-post="1" data-topic="2496">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p><code>fe80::1%lo0                                 # With zone identifier</code></p>
</blockquote>
</aside>
<p>While it's interesting to see us getting closer to LOAD-ability for these things, I'm thinking we need to draw the line and use strings.  People have praised Rebol's crazy literals in the past, there's just too much competition in the lexical space and it makes a mess.</p>
<p><strong>So I'm fully abandoning any idea that IPv6 addresses scan as some weird CHAIN! (just as I had fully abandoned the idea that URL!s scan as some weird PATH!</strong></p>
<p>We're moving toward this, which isn't terrible for when you want to do some dynamic creation:</p>
<pre><code>address: {ipv6! join "fe80::" "1%lo0"}
</code></pre>
<p>And it occurs to me the opening up of <code>-{...}-</code> strings is a perfect opportunity to let them become "construction strings".  This would be where you get a hook into LOAD itself, where you run on fully unbound data... and let whatever "recognizers" you choose duke it out:</p>
<pre><code>address: -{fe80::1%lo0}-
cash: -{$10.20}-
</code></pre>
<p>So I'll be transitioning things like existing MONEY! code to use this.  (It's better than <a href="https://rebol.metaeducation.com/t/backtick-literals-and-an-axis-of-extensibility/2235">using backticks, which was proposed before.</a>)</p>
          <p><a href="https://rebol.metaeducation.com/t/some-ipv6-address-examples/2496/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/some-ipv6-address-examples/2496/2</link>
        <pubDate>Mon, 23 Jun 2025 23:09:02 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2496-2</guid>
        <source url="https://rebol.metaeducation.com/t/some-ipv6-address-examples/2496.rss">Some IPv6 Address Examples</source>
      </item>
      <item>
        <title>Some IPv6 Address Examples</title>
        <dc:creator><![CDATA[rebolbot]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>If someone is going to parse ipv6 addresses, can you give a good spread of examples of the edge cases and things to worry about?  A good list of ipv6 addresses that is fairly short but gives coverage of the kinds of things you need to support?</p>
</blockquote>
<hr>
<h1><a name="p-8454-ipv6-address-parsing-test-cases-1" class="anchor" href="https://rebol.metaeducation.com#p-8454-ipv6-address-parsing-test-cases-1"></a>IPv6 Address Parsing Test Cases</h1>
<h2><a name="p-8454-basic-format-variations-2" class="anchor" href="https://rebol.metaeducation.com#p-8454-basic-format-variations-2"></a>Basic Format Variations</h2>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">2001:0db8:85a3:0000:0000:8a2e:0370:7334     # Full format
2001:db8:85a3:0:0:8a2e:370:7334             # Leading zeros omitted
2001:db8:85a3::8a2e:370:7334                # Zero compression
</code></pre>
<h2><a name="p-8454-zero-compression-edge-cases-3" class="anchor" href="https://rebol.metaeducation.com#p-8454-zero-compression-edge-cases-3"></a>Zero Compression Edge Cases</h2>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">::1                                         # Loopback (all zeros except last)
::                                          # All zeros address
2001:db8::                                  # Trailing zeros compressed
::2001:db8                                  # Leading zeros compressed
2001::1                                     # Middle zeros compressed
fe80::1%lo0                                 # With zone identifier
</code></pre>
<h2><a name="p-8454-special-addresses-4" class="anchor" href="https://rebol.metaeducation.com#p-8454-special-addresses-4"></a>Special Addresses</h2>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">::ffff:192.0.2.1                           # IPv4-mapped IPv6
::ffff:0:192.0.2.1                         # IPv4-mapped (alternative)
64:ff9b::192.0.2.33                        # IPv4-embedded IPv6
2002:cb00:7100::                            # 6to4 prefix
ff02::1                                     # Multicast
fe80::1                                     # Link-local
fc00::1                                     # Unique local
</code></pre>
<h2><a name="p-8454-bracket-and-port-notation-5" class="anchor" href="https://rebol.metaeducation.com#p-8454-bracket-and-port-notation-5"></a>Bracket and Port Notation</h2>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">[2001:db8::1]:80                            # With port
[::1]:8080                                  # Loopback with port
[fe80::1%eth0]:22                           # Zone ID with port
</code></pre>
<h2><a name="p-8454-maximum-length-cases-6" class="anchor" href="https://rebol.metaeducation.com#p-8454-maximum-length-cases-6"></a>Maximum Length Cases</h2>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff     # All F's (maximum)
2001:0db8:85a3:0000:0000:8a2e:0370:7334     # Full expanded form
</code></pre>
<h2><a name="p-8454-tricky-parsing-cases-7" class="anchor" href="https://rebol.metaeducation.com#p-8454-tricky-parsing-cases-7"></a>Tricky Parsing Cases</h2>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">2001:db8:0:0:1:0:0:1                        # Multiple zero groups (can't compress)
2001:0:0:0:0:0:0:1                          # Could be 2001::1
a:b:c:d:e:f:1:2                             # All single hex digits
::1:2:3:4:5:6:7                             # Compression at start with 7 groups
1:2:3:4:5:6:7::                             # Compression at end with 7 groups
</code></pre>
<h2><a name="p-8454-case-sensitivity-8" class="anchor" href="https://rebol.metaeducation.com#p-8454-case-sensitivity-8"></a>Case Sensitivity</h2>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">2001:DB8:85A3::8A2E:370:7334                # Uppercase
2001:db8:85a3::8a2e:370:7334                # Lowercase
2001:Db8:85A3::8a2E:370:7334                # Mixed case
</code></pre>
<h2><a name="p-8454-invalid-cases-should-reject-9" class="anchor" href="https://rebol.metaeducation.com#p-8454-invalid-cases-should-reject-9"></a>Invalid Cases (Should Reject)</h2>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">2001:db8::1::2                              # Double compression (invalid)
2001:db8:85a3::8a2e:370:7334:extra          # Too many groups
2001:db8:85a3:8a2e:370:7334                 # Too few groups (7 instead of 8)
2001:db8:85ag::1                            # Invalid hex character 'g'
2001:db8:12345::1                           # Group too long (&gt;4 hex digits)
</code></pre>
<h2><a name="p-8454-key-parsing-rules-to-implement-10" class="anchor" href="https://rebol.metaeducation.com#p-8454-key-parsing-rules-to-implement-10"></a>Key Parsing Rules to Implement</h2>
<ol>
<li><strong>Zero Compression</strong>: Only one <code>::</code> allowed per address</li>
<li><strong>Group Count</strong>: Must have exactly 8 groups when expanded</li>
<li><strong>Hex Validation</strong>: Each group is 1-4 hexadecimal digits</li>
<li><strong>Case Insensitive</strong>: Accept both upper and lowercase</li>
<li><strong>Leading Zeros</strong>: Optional in each group</li>
<li><strong>Zone Identifiers</strong>: Handle <code>%</code> suffix for link-local addresses</li>
<li><strong>Brackets</strong>: Required when specifying ports</li>
<li><strong>IPv4 Mapping</strong>: Special handling for <code>::ffff:</code> prefix</li>
</ol>
          <p><a href="https://rebol.metaeducation.com/t/some-ipv6-address-examples/2496/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/some-ipv6-address-examples/2496/1</link>
        <pubDate>Mon, 23 Jun 2025 22:52:12 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2496-1</guid>
        <source url="https://rebol.metaeducation.com/t/some-ipv6-address-examples/2496.rss">Some IPv6 Address Examples</source>
      </item>
  </channel>
</rss>
