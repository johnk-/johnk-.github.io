<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>REBOL 1.0 Retrospective</title>
    <link>https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788</link>
    <description>I was reading about some of the design choices in REBOL, and came upon Joe Marshall&#39;s writings where he talks about the changes between REBOL 1 and 2 (missing continuations, changed scoping rules, absence of tail recursion, etc.). This made me curious about the differences between the two version; however, I can&#39;t find anything related to REBOL 1 on the internet (save for a Scheme compiler).

Will it be possible to share the manual/guide/documentation for REBOL 1 here? It is a piece of history, and it&#39;ll be a shame if it just disappears.</description>
    
    <lastBuildDate>Sun, 01 Dec 2024 16:14:10 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>REBOL 1.0 Retrospective</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="DefinitionalUsername" data-post="1" data-topic="1788">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/letter_avatar_proxy/v4/letter/d/aeb1de/48.png" class="avatar"> DefinitionalUsername:</div>
<blockquote>
<p>Will it be possible to share the manual/guide/documentation for REBOL 1 here? It is a piece of history, and it'll be a shame if it just disappears.</p>
</blockquote>
</aside>
<p>Here in 2024, I found <strong><a href="https://grumbeer.dyndns.org/ftp/www.ibiblio.org/distributions/redhat-5.1/apps-i386/REBOL/">a download of Rebol 1.0.2</a></strong>, which I could extract with the following commands on a modern Debian Linux:</p>
<pre><code>$ sudo apt install rpm2cpio

$ rpm2cpio rebol-1.0.4-2.i386.rpm | cpio -idmv
</code></pre>
<p>I can't get it to run at the moment, but there's HTML files in the archive.  Because there's already a sunk cost to backing up the forum, I did some ad-hoc conversion of the HTML to MarkDown and put the Guides up here:</p>
<ul>
<li>
<p><strong><a href="https://rebol.metaeducation.com/t/rebol-1-0-2-quick-start-guide/2341">Rebol 1.0.2 Quick Start Guide</a></strong></p>
</li>
<li>
<p><strong><a href="https://rebol.metaeducation.com/t/rebol-1-0-2-users-guide/2340">Rebol 1.0.2 User's Guide</a></strong></p>
</li>
</ul>
<p>And here's a little bit of analysis of what code we do have:</p>
<ul>
<li><a href="https://rebol.metaeducation.com/t/the-rebol-r-boot-file-from-rebol-1-0/2344"><strong>The %rebol.r Boot File From Rebol 1.0</strong></a></li>
</ul>
<aside class="quote no-group" data-username="DefinitionalUsername" data-post="1" data-topic="1788">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/letter_avatar_proxy/v4/letter/d/aeb1de/48.png" class="avatar"> DefinitionalUsername:</div>
<blockquote>
<p>I was reading about some of the design choices in REBOL, and came upon Joe Marshall's writings where he talks about the changes between REBOL 1 and 2 (missing continuations, changed scoping rules, absence of tail recursion, etc.)</p>
</blockquote>
</aside>
<p>Note that I have written some about this here:</p>
<ul>
<li>
<p><strong><a href="https://rebol.metaeducation.com/t/joe-marshall-on-rebol-binding/2074">Joe Marshall on Rebol Binding</a></strong></p>
</li>
<li>
<p><strong><a href="https://rebol.metaeducation.com/t/the-sherman-rebol-to-scheme-compiler/2076">The Sherman Rebol-To-Scheme Compiler</a></strong></p>
</li>
</ul>
<h1><a name="p-7938-quick-impressions-1" class="anchor" href="https://rebol.metaeducation.com#p-7938-quick-impressions-1"></a>Quick Impressions</h1>
<p>Usage-wise, Rebol1 looks closer to Rebol2 than I expected.  I imagined it being weirder...partially because it had vanished and had something of a lore from Joe saying how different Rebol2 was.  But at least from the user's perspective, it looks quite close.</p>
<p>Cynically I'd say: it kind of looks like design of the Rebol language (not counting Ren-C) froze/peaked 26 years ago.  The enduring subsequent work seems to be PARSE and VID, vs. the interpreter itself.</p>
<p>Not a whole lot of surprises, but I'll write a few thoughts.</p>
<ul>
<li>
<p>Biggest observation: it seems like Joe saw functions as the building blocks of most things, including binding.  Remember that Rebol2 trick where COLLECT received a BLOCK!, and inside that block it wanted any references to KEEP to refer to its function that would append to the collected block...so it just said something along the lines of:</p>
<pre><code>keeper: func [item] [append collected item]
do (func [keep] body) :keeper  ; KEEPER becomes KEEP parameter to BODY
</code></pre>
<p>It seems like this is how Rebol1 modeled binding, generally.</p>
<p>That might feel clever, but when the cost of binding is to sequester your structural data away into a black box of a function...then you've lost the currency of the parts that comprise the lists.  The value proposition of Rebol falls off quickly if your solution is made by isolating everything into information-hiding functional parts.  If anything, it's reliant on <em>information-showing</em> and maximizing the value of that.</p>
<p>I can get why Carl wanted to move away from something that was more lambda calculus than it was LEGO.  An alternate way of thinking is needed--in particular regarding binding--but just not a patently naive approach, which is what happened.</p>
</li>
<li>
<p>There don't appear to be any datatype specs in Rebol 1.0.  All arguments accept all types, it seems...and any type checking has to be done inside your function.  That's pretty rough (though it was quite the struggle to <a href="https://rebol.metaeducation.com/t/intrinsics-functions-without-frames/2050">break free of the 64-type limit</a> with a solution that performed at all well).</p>
</li>
<li>
<p>We know that MAKE used to have variable arity, e.g. <strong><code>make function! [spec] [body]</code></strong> vs. <strong><code>make object! [def]</code></strong>.  Rebol2 did something weird with <strong><code>make function! [[spec] [body]]</code></strong> while Ren-C just said <strong><a href="https://rebol.metaeducation.com/t/debunking-the-arity-1-make/1591">"why not have an arity-2 FUNCTION native"</a></strong>?</p>
</li>
<li>
<p>It's strange to find out that the counterpart to NEXT was PAST instead of BACK <em>(though the documentation also mentions BACK, so perhaps they were synonyms?)</em>  The bigger question remains <a href="https://rebol.metaeducation.com/t/de-verbification-noun-of-x-vs-noun-x/1368">whether these should be <strong>next of</strong> and <strong>back of</strong></a>, to let <strong><code>next</code></strong> and <strong><code>back</code></strong> be freed up for variable names.</p>
</li>
<li>
<p>Interesting to see the <strong><code>use [[vars] &lt;code&gt;]</code></strong> syntax instead of <strong><code>use [vars] [&lt;code&gt;]</code></strong>.  I've always been baffled by the lack of discussion of tradeoffs in dialect design--why you would make one choice vs. another...so changes like this are actually much more rare than one would think.</p>
</li>
<li>
<p>To me, it's good to see ELSE in Rebol 1.0... as <a href="https://rebol.metaeducation.com/t/then-and-else-are-essential/1411">I think it's a comfortable and human thing</a> in terms of the rhythm of conditional logic.  The implementation was wrong, but Ren-C has solved that with a generalized evaluative pattern that isn't a "hack".  It's become kind of amusing to me that some devout Redbol people think ELSE is a sin, and everyone should love EITHER for all situations.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/clown_face.png?v=14" title=":clown_face:" class="emoji" alt=":clown_face:" loading="lazy" width="20" height="20"></p>
</li>
<li>
<p>The idea that you pass CATCH the WORD! you want to act as the "throw" is how Ren-C's definitional CATCH works (it defaults to THROW, but you can override it).  It's called a <strong>"continuation"</strong> but I wonder just how generic it is...can these continuations do weird stuff, like goto?</p>
<pre><code>goto: none
catch 'throw [goto: :throw]
print "Will this print twice?"
goto &lt;whatever&gt;
</code></pre>
<p>Ren-C's CATCH is not based on continuations--just throwing up the stack--so it won't do that.  You need to use <strong><a href="https://rebol.metaeducation.com/t/yielder-and-generator-and-thinking-about-coroutines/1311">GENERATOR and YIELD</a></strong> if you want to do continuations.</p>
</li>
</ul>
<p>Anyway... I may have a test or two to throw at it if someone gets it to run.  But I don't think there's anything particular for Ren-C to learn from it, things are... quite far along the road.</p>
          <p><a href="https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788/5</link>
        <pubDate>Sun, 01 Dec 2024 07:14:17 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1788-5</guid>
        <source url="https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788.rss">REBOL 1.0 Retrospective</source>
      </item>
      <item>
        <title>REBOL 1.0 Retrospective</title>
        <dc:creator><![CDATA[DefinitionalUsername]]></dc:creator>
        <description><![CDATA[
            <p>I was reading about some of the design choices in REBOL, and came upon Joe Marshall's writings where he talks about the changes between REBOL 1 and 2 (missing continuations, changed scoping rules, absence of tail recursion, etc.). This made me curious about the differences between the two version; however, I can't find anything related to REBOL 1 on the internet (save for a Scheme compiler).</p>
<p>Will it be possible to share the manual/guide/documentation for REBOL 1 here? It is a piece of history, and it'll be a shame if it just disappears.</p>
          <p><a href="https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788/1</link>
        <pubDate>Mon, 14 Feb 2022 03:29:26 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1788-1</guid>
        <source url="https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788.rss">REBOL 1.0 Retrospective</source>
      </item>
  </channel>
</rss>
