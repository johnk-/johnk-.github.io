<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why Does _ Form As Space, Not Underscore?</title>
    <link>https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455</link>
    <description>The following code has predictable behavior for everything except **`_`**:

```
&gt;&gt; for-each &#39;item [
       ? * + - = |     ; word!s - ordinary
       &lt; &gt; : / . %     ; word!s - special (limited in some contexts)
       _               ; rune! - &quot;space&quot; (?)
       #               ; rune! - &quot;hash&quot;/&quot;octothorpe&quot;/&quot;pound&quot;
   ][
       append string item
   ]

&gt;&gt; string
== &quot;?*+-=&lt;&gt;|:/.% #&quot;
                ^-- NOT an underscore, but a space
```

**Why is **`_`** the RUNE! for &quot;space&quot; instead of the RUNE! for &quot;underscore&quot; (or &quot;blank&quot; if that&#39;s a better name)?**

If it were blank/underscore it could render as an underscore in strings, making this less surprising:

    &gt;&gt; append &quot;abc&quot; _
    == &quot;abc_&quot;

And instead of writing:

    &gt;&gt; parse &quot;a_b_c&quot; [#a #_ #b #_ #c]
    == #c

You could write:

    &gt;&gt; parse &quot;a_b_c&quot; [#a _ #b _ #c]
    == #c</description>
    
    <lastBuildDate>Sun, 20 Jul 2025 17:43:28 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why Does _ Form As Space, Not Underscore?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="7" data-topic="2455">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><code>#</code> as a NEWLINE literal is an unfamiliar concept, and I'd have to experiment with it to see if it starts to feel natural or not.</p>
</blockquote>
</aside>
<p><strong>I'm Leaning Toward Thinking This Is Worth Pushing</strong></p>
<p>I was just looking at some of <a class="mention" href="https://rebol.metaeducation.com/u/gchiu">@gchiu</a>'s code:</p>
<pre><code>let data: unspaced [
    surname "," firstnames space "(" opt title ")" space "DOB:" space dob space "NHI:" space nhi newline
    street newline town newline city newline newline
    "phone:" space opt phone newline
    "mobile:" space opt mobile newline
    "email:" space opt email
]
</code></pre>
<p>And I thought <em>"hey, underscore is finally committed as the space rune, might as well use that"</em>:</p>
<pre><code>let data: unspaced [
    surname "," firstnames _ "(" opt title ")" _ "DOB:" _ dob _ "NHI:" _ nhi newline
    street newline town newline city newline newline
    "phone:" _ opt phone newline
    "mobile:" _ opt mobile newline
    "email:" _ opt email
]
</code></pre>
<p>Which made me think "wow, kind of a shame that the <code>newline</code> is still there, cluttering it up"... so how would it look with the <code>#</code> proposal?</p>
<pre><code>let data: unspaced [
    surname "," firstnames _ "(" opt title ")" _ "DOB:" _ dob _ "NHI:" _ nhi #
    street # town # city # #
    "phone:" _ opt phone #
    "mobile:" _ opt mobile #
    "email:" _ opt email
]
</code></pre>
<p>Yes, it's <em>new</em>... but every idea has to start somewhere...</p>
<p><strong><code>_</code></strong> seems fairly close to the "absence of anything in this spot", while <strong><code>#</code></strong> seems a bit like its nemesis... the "everything is filled in character".</p>
<p>If you were looking for a complement to "I'm actually invisible, and lightly separate" to be "I'm actually invisible, but heavily separate" you can't do too much better than this.</p>
<p>They'd be tied together, in that "the two single character RUNE!s are invisible".</p>
<p>It may be that <code>##</code> is weird enough that it should be escaped as <code>#"#"</code>, because that helps realize it's one hash of intent, and not two... and that #"##" is two hashes of intent, not 3...</p>
<p>You could still quote them for matching, and have something that looked literate if you meant the visible intent:</p>
<pre><code>&gt;&gt; parse "___###" [some '_ some '#]
== #
</code></pre>
<p>Which is a little nicer than using their RUNE! forms:</p>
<pre><code>&gt;&gt; parse "___###" [some #_ some ##]
== #
</code></pre>
<h2><a name="p-8550-of-course-many-cases-want-interpolation-1" class="anchor" href="https://rebol.metaeducation.com#p-8550-of-course-many-cases-want-interpolation-1"></a>Of Course, Many Cases Want Interpolation...</h2>
<p>Graham's code could be tackled with COMPOSE now...modulo some issues with leading whitespace that multiline strings should probably not include by default:</p>
<pre><code>let data: compose2 '{} --[
    {surname}, {firstnames} ({? title}) DOB: {dob} NHI: {nhi}
    {street}
    {town}
    {city}

    phone: {? phone}
    mobile: {? mobile}
    email: {? email}
]--
</code></pre>
<p>There's still some questions about how to get an optional substitution to be able to opt out of its surrounding boilerplate.  For instance: how might <code>({? title})</code> ask to not only opt out of the contents of the parentheses, but opt out of the parentheses themselves... is there an easy way to do that?</p>
<p>But anyway, not all cases will be a fit for turning into interpolation, so I think the <code>#</code> as newline may be a usage that people would come to appreciate.</p>
          <p><a href="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/8">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/8</link>
        <pubDate>Sun, 20 Jul 2025 11:27:02 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2455-8</guid>
        <source url="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455.rss">Why Does _ Form As Space, Not Underscore?</source>
      </item>
      <item>
        <title>Why Does _ Form As Space, Not Underscore?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2455">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The choice to bend the mechanics for SPACE is directly tied to the prevalence of spaces and the objective difficulty of representing them otherwise. On the other hand, underscores are less commonly spoken about... and representing them with <strong><code>#_</code></strong> or <strong><code>'_</code></strong> has minimal distortion.</p>
</blockquote>
</aside>
<p>I've noticed that this exact argument might be applied to the meaning of <strong><code>#</code></strong> w.r.t. NEWLINE.</p>
<p>NEWLINE has the same general problems as SPACE, in that its commonness and unrepresentability makes it a thorn.</p>
<p>Might we argue that <strong><code>##</code></strong> and <strong><code>#_</code></strong> are good enough if you need a literal <code>#</code> or a literal <code>_</code>, such that we can say:</p>
<ul>
<li>
<p><strong><code>_</code></strong> =&gt; SPACE</p>
</li>
<li>
<p><strong><code>#</code></strong> =&gt; NEWLINE</p>
</li>
</ul>
<p>This is a more unfamiliar shorthand.  While underscore has been used as space for some time in many dialects, <code>#</code> has never been used to mean newline.</p>
<p>Rebol2 considers it an "empty issue":</p>
<pre><code>rebol2&gt;&gt; type? #
== issue!

rebol2&gt;&gt; form #
== ""
</code></pre>
<p><em>(If we need that, I don't have a problem with it being <strong><code>#""</code></strong>, though so far I've said there's no such thing and ASCII "NUL" is simply the BINARY! <code>#{00}</code>)</em></p>
<p>Red doesn't define <code>#</code>:</p>
<pre><code>red&gt;&gt; type? #
*** Syntax Error: (line 1) invalid issue at #
</code></pre>
<p>R3-Alpha used it as a representation of NONE!, but didn't commit to it as canon (e.g. MOLD NONE is still "none")</p>
<pre><code>r3-alpha&gt;&gt; type? #
== none!

r3-alpha&gt;&gt; form #
== "none"

r3-alpha&gt;&gt; mold none
== "none"
</code></pre>
<h3><a name="p-8371-as-a-newline-literal-is-an-unfamiliar-concept-and-id-have-to-experiment-with-it-to-see-if-it-starts-to-feel-natural-or-not-1" class="anchor" href="https://rebol.metaeducation.com#p-8371-as-a-newline-literal-is-an-unfamiliar-concept-and-id-have-to-experiment-with-it-to-see-if-it-starts-to-feel-natural-or-not-1"></a><code>#</code> as a NEWLINE literal is an unfamiliar concept, and I'd have to experiment with it to see if it starts to feel natural or not.</h3>
<p>It's odd, but pretty much whatever you do is odd, e.g. historically <strong><code>#"^/"</code></strong></p>
          <p><a href="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/7">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/7</link>
        <pubDate>Thu, 05 Jun 2025 16:10:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2455-7</guid>
        <source url="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455.rss">Why Does _ Form As Space, Not Underscore?</source>
      </item>
      <item>
        <title>Why Does _ Form As Space, Not Underscore?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2455">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It would have also expanded the code so it worked with <strong>all</strong> legal single-character tokens <em>(including the ones that won't implicitly convert to string)</em>:</p>
</blockquote>
</aside>
<p>I thought it would be interesting to mention that except for two cases, the single-character tokens now come in QUASIFORM!</p>
<pre><code>&gt;&gt; for-each 'item [
   ~?~  ~*~  ~+~  ~-~  ~=~  ~|~
   ~&lt;~  ~&gt;~  ~:~  ~/~  ~.~  ~%~
   ~#~
   ~$~  ~^~  ~@~
   ~,~
][
   assert [quasiform? item]
]
</code></pre>
<p>The exceptions are <strong><code>~~~</code></strong> and <strong><code>~_~</code></strong>, which don't exist because <strong><code>~</code></strong> is already the quasiform of <strong><code>_</code></strong>.</p>
<p><em>(We could say that <strong><code>~#_~</code></strong> renders as <strong><code>~_~</code></strong> and <code>~#~~</code> renders as <code>~~~</code>, I'm not sure if that makes things better or worse.)</em></p>
<p>But in the list above, <strong><code>~#~</code></strong> has a valid antiform (it's a labeled TRASH!...) as does <strong><code>~,~</code></strong> (its antiform is GHOST!).</p>
<p><strong><code>~$~</code></strong>, <strong><code>~^~</code></strong>, and  <strong><code>~@~</code></strong> are forbidden from having antiforms in the current thinking (no antiforms with Sigils, and these are sigilized SPACE runes).  That's an empirical rule based on gut feeling, so it could be changed.</p>
<p>The others do not have valid antiforms at this time, but could--they would be KEYWORD!.  If anyone thinks of particularly creative uses for these keyword antiforms, let me know.  (We could use any of these for "null" and "okay", but I think the words work better.)</p>
<p>In any case... more parts for dialecting, related to single-character intent!</p>
          <p><a href="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/6</link>
        <pubDate>Tue, 20 May 2025 06:38:10 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2455-6</guid>
        <source url="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455.rss">Why Does _ Form As Space, Not Underscore?</source>
      </item>
      <item>
        <title>Why Does _ Form As Space, Not Underscore?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rebolbot" data-post="4" data-topic="2455">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p>Is there any <strong><code>x</code></strong> which would give:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; mold x
== " "
</code></pre>
</blockquote>
</aside>
<p>No.  The closest you can get is to mold an empty splice (e.g. BLANK) and produce an empty string:</p>
<pre><code>&gt;&gt; mold _
== "_"

&gt;&gt; blank
== ~()~  ; anti (blank)

&gt;&gt; mold blank
== ""
</code></pre>
<p>So...what would give <strong>(blank =&gt; " ")</strong>, but also <strong>(_ =&gt; "_")</strong> ?  <img src="https://rebol.metaeducation.com/images/emoji/twitter/thinking.png?v=14" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<h2><a name="p-8305-not-hard-to-write-if-you-want-it-1" class="anchor" href="https://rebol.metaeducation.com#p-8305-not-hard-to-write-if-you-want-it-1"></a>Not Hard To Write If You Want It</h2>
<pre><code>???: lambda [x [&lt;opt-out&gt; element? blank?]] [
    if blank? x [copy " "] else [mold x]
]
</code></pre>
<p>That gives you the ability to opt-out with nothing (via void) to get a null, and opt-in with nothing (via blank) to get a space.  (It returns the space as a TEXT! and not a RUNE!, to give consistent output with MOLD.  And it copies it so you get a new string, also for mold parity.)</p>
<pre><code>&gt;&gt; ??? 1
== "1"

&gt;&gt; ??? first [$]
== "$"

&gt;&gt; ??? blank
== " "

&gt;&gt; ??? void
== ~null~  ; anti
</code></pre>
<p>Don't know what to call it if it were be put in the box.</p>
<h2><a name="p-8305-any-builtins-that-could-just-do-this-2" class="anchor" href="https://rebol.metaeducation.com#p-8305-any-builtins-that-could-just-do-this-2"></a>Any Builtins That Could "Just do this"?</h2>
<p>It can't be TO RUNE!, as that must be reversible:</p>
<pre><code>&gt;&gt; to rune! _
== #_  ; illegal... (to (type of x) x) must be (copy x) 
</code></pre>
<p>By contrast, <strong>(make (type of x) x)</strong> has no particular rule saying that it has to give something equal to X back.  But I'm pretty sure that passing INTEGER! to MAKE RUNE! should give runes with that codepoint:</p>
<pre><code>&gt;&gt; make rune! 32
== _  ; not #32

&gt;&gt; {rune! 32}  ; cool shorthand with FENCE!/CONSTRUCT
== _
</code></pre>
<p>Hence <code>(make rune! 0)</code> wouldn't be <code>#0</code>, which is desired for this purpose.</p>
<p>I kind of can't think of anything that fits the idea of producing spaces from thin air out of blanks.  Maybe it will occur to me.</p>
<p>But I'm happy enough with the proposed solution for those who need it.</p>
          <p><a href="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/5</link>
        <pubDate>Sat, 17 May 2025 10:19:16 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2455-5</guid>
        <source url="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455.rss">Why Does _ Form As Space, Not Underscore?</source>
      </item>
      <item>
        <title>Why Does _ Form As Space, Not Underscore?</title>
        <dc:creator><![CDATA[rebolbot]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2455">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Had you written <strong><code>append string mold item</code></strong> instead of just <strong><code>append string item</code></strong> it would have given you the desired result.</p>
</blockquote>
</aside>
<p>Fair enough.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/+1.png?v=14" title=":+1:" class="emoji" alt=":+1:" loading="lazy" width="20" height="20"></p>
<p>But then it seems you would be locked out of producing a space character out of MOLD.</p>
<p>Is there any <strong><code>x</code></strong> which would give:</p>
<pre><code>&gt;&gt; mold x
== " "
</code></pre>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/red_question_mark.png?v=14" title=":red_question_mark:" class="emoji only-emoji" alt=":red_question_mark:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/4</link>
        <pubDate>Sat, 17 May 2025 09:53:42 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2455-4</guid>
        <source url="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455.rss">Why Does _ Form As Space, Not Underscore?</source>
      </item>
      <item>
        <title>Why Does _ Form As Space, Not Underscore?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2455">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The choice to bend the mechanics for SPACE is directly tied to the prevalence of spaces and the objective difficulty of representing them otherwise. On the other hand, underscores are less commonly spoken about... and representing them with <strong><code>#_</code></strong> or <strong><code>'_</code></strong> has minimal distortion.</p>
</blockquote>
</aside>
<p>I'll just mention a curious historical detour... <img src="https://rebol.metaeducation.com/images/emoji/twitter/man_cartwheeling.png?v=14" title=":man_cartwheeling:" class="emoji" alt=":man_cartwheeling:" loading="lazy" width="20" height="20"></p>
<p>For a period of time, the bent-up mechanic to accommodate space was that <strong>#</strong> was space:</p>
<pre><code>&gt;&gt; append "abc" #
== "abc "
</code></pre>
<p>That was because <strong><code>_</code></strong> had another role... which wasn't as a RUNE!, but an entirely distinct datatype <em>("historical BLANK!", unlike the empty-splice-BLANK of today...)</em></p>
<p>But most dialects wanted to treat BLANK! as space.  And as various machinery settled into place, <strong><a href="https://rebol.metaeducation.com/t/reified-unreassignable-nothingness/2457">it became clear that <strong><code>_</code></strong> should actually <em>be</em> the space rune representation</a></strong>.  This allowed <strong><code>#</code></strong> to act as the rune for the pound sign.</p>
<p><em><a href="https://rebol.metaeducation.com/t/how-does-blank-interact-with-strings-binary/2287">(More details in the Archive...)</a></em></p>
          <p><a href="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/3</link>
        <pubDate>Sat, 17 May 2025 09:22:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2455-3</guid>
        <source url="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455.rss">Why Does _ Form As Space, Not Underscore?</source>
      </item>
      <item>
        <title>Why Does _ Form As Space, Not Underscore?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rebolbot" data-post="1" data-topic="2455">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p>The following code has predictable behavior for everything except <strong><code>_</code></strong>:</p>
</blockquote>
</aside>
<p>It's <em>deterministic</em>, and therefore entirely predictable.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<aside class="quote no-group" data-username="rebolbot" data-post="1" data-topic="2455">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p>Why is <strong><code>_</code></strong> the RUNE! for "space" instead of the RUNE! for "underscore" (or "blank" if that's a better name)?</p>
</blockquote>
</aside>
<p>If you look <em>just</em> at this situation... it does seem like it might be a design flaw.</p>
<p>But...</p>
<p><strong>The choice to bend the mechanics for SPACE is directly tied to the prevalence of spaces and the objective difficulty of representing them otherwise.  On the other hand, underscores are less commonly spoken about... and representing them with <strong><code>#_</code></strong> or <strong><code>'_</code></strong> has minimal distortion.</strong></p>
<h2><a name="p-8300-if-you-want-source-representation-use-mold-1" class="anchor" href="https://rebol.metaeducation.com#p-8300-if-you-want-source-representation-use-mold-1"></a>If You Want Source Representation, Use MOLD</h2>
<p>Had you written <strong><code>append string mold item</code></strong> instead of just <strong><code>append string item</code></strong> it would have given you the desired result.</p>
<p>It would have also expanded the code so it worked with <strong>all</strong> legal single-character tokens <em>(including the ones that won't implicitly convert to string)</em>:</p>
<pre><code>&gt;&gt; for-each 'item [
       ? * + - = |     ; word!s - ordinary
       &lt; &gt; : / . %     ; word!s - special (limited in some contexts)
       #               ; rune! - "hash"/"octothorpe"/"pound"
       _               ; rune! - "space"
       $               ; tied! - tied "space" rune (a "tie")
       ^               ; lifted! - lifted "space" rune (a "lift")
       @               ; pinned! - pinned "space" rune (a "pin")
       ~               ; quasiform! - quasi "space" rune (a "quasar")
       ,               ; comma!
   ][
       append string mold item
   ]

&gt;&gt; string
== "?*+-=&lt;&gt;|:/.%#_$^@~,"
</code></pre>
<p>(Do note the situation is still contrived.  You can't expect to put an arbitrary single character into lists and have it work out here.  Consider <strong><code>[</code></strong> or <strong><code>"</code></strong> or <strong><code>)</code></strong> etc.  But I think it's impressive that it covers as much as it does!)</p>
<h2><a name="p-8300-and-mold-is-used-by-quoted-in-string-parse-2" class="anchor" href="https://rebol.metaeducation.com#p-8300-and-mold-is-used-by-quoted-in-string-parse-2"></a>...and MOLD Is Used By QUOTED! in String PARSE</h2>
<p>PARSE is able to match any molded representation when you use the QUOTED! combinator:</p>
<pre><code>&gt;&gt; parse "a(b c)#d" ['a '(b c) '#d]
== #d
</code></pre>
<p>This means your example:</p>
<aside class="quote no-group" data-username="rebolbot" data-post="1" data-topic="2455">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; parse "a_b_c" [#a _ #b _ #c]
== #c
</code></pre>
</blockquote>
</aside>
<p>...could be done as:</p>
<pre><code>&gt;&gt; parse "a_b_c" ['a '_ 'b '_ 'c]
== c
</code></pre>
<p>With the spaced behavior very nicely done with the unquoted space rune:</p>
<pre><code>&gt;&gt; parse "a b c" ['a _ 'b _ 'c]
== c
</code></pre>
<p>I think it shows pretty clearly the usefulness of the choice.</p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/man_teacher.png?v=14" title=":man_teacher:" class="emoji only-emoji" alt=":man_teacher:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/2</link>
        <pubDate>Sat, 17 May 2025 05:03:15 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2455-2</guid>
        <source url="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455.rss">Why Does _ Form As Space, Not Underscore?</source>
      </item>
      <item>
        <title>Why Does _ Form As Space, Not Underscore?</title>
        <dc:creator><![CDATA[rebolbot]]></dc:creator>
        <description><![CDATA[
            <p>The following code has predictable behavior for everything except <strong><code>_</code></strong>:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; for-each 'item [
       ? * + - = |     ; word!s - ordinary
       &lt; &gt; : / . %     ; word!s - special (limited in some contexts)
       _               ; rune! - "space" (?)
       #               ; rune! - "hash"/"octothorpe"/"pound"
   ][
       append string item
   ]

&gt;&gt; string
== "?*+-=&lt;&gt;|:/.% #"
                ^-- NOT an underscore, but a space
</code></pre>
<p><strong>Why is <strong><code>_</code></strong> the RUNE! for "space" instead of the RUNE! for "underscore" (or "blank" if that's a better name)?</strong></p>
<p>If it were blank/underscore it could render as an underscore in strings, making this less surprising:</p>
<pre><code>&gt;&gt; append "abc" _
== "abc_"
</code></pre>
<p>And instead of writing:</p>
<pre><code>&gt;&gt; parse "a_b_c" [#a #_ #b #_ #c]
== #c
</code></pre>
<p>You could write:</p>
<pre><code>&gt;&gt; parse "a_b_c" [#a _ #b _ #c]
== #c
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455/1</link>
        <pubDate>Sat, 17 May 2025 04:29:29 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2455-1</guid>
        <source url="https://rebol.metaeducation.com/t/why-does-form-as-space-not-underscore/2455.rss">Why Does _ Form As Space, Not Underscore?</source>
      </item>
  </channel>
</rss>
