<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>rebSpell() or rebBytes() of NULL in the API</title>
    <link>https://forum.rebol.info/t/rebspell-or-rebbytes-of-null-in-the-api/1887</link>
    <description>For safety reasons, extraction APIs like rebSpell() and rebBytes() would raise errors if the evaluative product was NULL:

    char* my_c_string = rebSpell(&quot;third [a b]&quot;);  // !!! fail/panic/crash

To get around this, the old way of thinking was you would use TRY and it would produce a BLANK!.  The blank would be interpreted as an intentional nothing, and suppress an error:

    char* my_c_string = rebSpell(&quot;try third [a b]&quot;);  // was like rebSpell(&quot;_&quot;)
    assert(my_c_string == nullptr);  // this is what you&#39;d get

But now we&#39;re in the era of **NULL-in-TRY-out**.  Nothing gets converted to blank anymore...a TRY just gives back NULL.  So it won&#39;t work this way.

## What Was Safer About The Old Way?

You might ask what the difference is.  Like if you&#39;re writing JavaScript and get a null back you don&#39;t expect, the JavaScript will raise an error when you try to use it where you shouldn&#39;t.  Why&#39;s it better to make reb.Spell() itself raise the error?

Okay, yes, in JavaScript there&#39;s not really all that strong an argument.  But in C if you use a null incorrectly, you get a crash.  Intercepting it in rebSpell() gives a chance to throw (via longjmp, or now maybe C++ throw) to the error handler of the console...and have it be a non-fatal error.

*(...though in WebAssembly, it&#39;s different... (!)  I noticed something started to happen once we switched to the new C++ throw builds for the web console, and it&#39;s actually recovering from access violations in the native code and the console stays running!  Probably not great to rely on this, but I do find it interesting.)*

## I Was Always On The Fence on This...

If you look at the design ethos of C, it really does kind of try to make it easy to sweep nulls under the rug.

For instance, if you call **free()** on a null pointer, it is a no-op.

Whether you agree with that decision or not, it&#39;s there...and so when you ask for a memory backing buffer (e.g. one that can be used to build a BINARY!) the rebMalloc()/rebFree() pairs are such that rebFree() accepts null.  If it didn&#39;t do so, you couldn&#39;t pass it in as your memory allocator to things like zlib that expect you to obey the malloc()/free() behavior.

So I often wondered if rebSpell() and rebBytes() should be null tolerant, and let the chips fall where they may.

But...hrm.  I don&#39;t know.  I like the error emerging from inside the call.

## What About rebTrySpell() and rebTryBytes() ?

With the new meaning of TRY, this actually makes sense!

It&#39;s a better way to bias it than to say that rebSpell() can give back NULL, where you&#39;d use rebMustSpell() if you want to ensure it isn&#39;t null.

Very well, then.  I&#39;m glad we had this talk.

:no_mouth:</description>
    
    <lastBuildDate>Sat, 16 Jul 2022 14:01:23 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://forum.rebol.info/t/rebspell-or-rebbytes-of-null-in-the-api/1887.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>rebSpell() or rebBytes() of NULL in the API</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>For safety reasons, extraction APIs like rebSpell() and rebBytes() would raise errors if the evaluative product was NULL:</p>
<pre><code>char* my_c_string = rebSpell("third [a b]");  // !!! fail/panic/crash
</code></pre>
<p>To get around this, the old way of thinking was you would use TRY and it would produce a BLANK!.  The blank would be interpreted as an intentional nothing, and suppress an error:</p>
<pre><code>char* my_c_string = rebSpell("try third [a b]");  // was like rebSpell("_")
assert(my_c_string == nullptr);  // this is what you'd get
</code></pre>
<p>But now we're in the era of <strong>NULL-in-TRY-out</strong>.  Nothing gets converted to blank anymore...a TRY just gives back NULL.  So it won't work this way.</p>
<h2>What Was Safer About The Old Way?</h2>
<p>You might ask what the difference is.  Like if you're writing JavaScript and get a null back you don't expect, the JavaScript will raise an error when you try to use it where you shouldn't.  Why's it better to make reb.Spell() itself raise the error?</p>
<p>Okay, yes, in JavaScript there's not really all that strong an argument.  But in C if you use a null incorrectly, you get a crash.  Intercepting it in rebSpell() gives a chance to throw (via longjmp, or now maybe C++ throw) to the error handler of the console...and have it be a non-fatal error.</p>
<p><em>(...though in WebAssembly, it's different... (!)  I noticed something started to happen once we switched to the new C++ throw builds for the web console, and it's actually recovering from access violations in the native code and the console stays running!  Probably not great to rely on this, but I do find it interesting.)</em></p>
<h2>I Was Always On The Fence on This...</h2>
<p>If you look at the design ethos of C, it really does kind of try to make it easy to sweep nulls under the rug.</p>
<p>For instance, if you call <strong>free()</strong> on a null pointer, it is a no-op.</p>
<p>Whether you agree with that decision or not, it's there...and so when you ask for a memory backing buffer (e.g. one that can be used to build a BINARY!) the rebMalloc()/rebFree() pairs are such that rebFree() accepts null.  If it didn't do so, you couldn't pass it in as your memory allocator to things like zlib that expect you to obey the malloc()/free() behavior.</p>
<p>So I often wondered if rebSpell() and rebBytes() should be null tolerant, and let the chips fall where they may.</p>
<p>But...hrm.  I don't know.  I like the error emerging from inside the call.</p>
<h2>What About rebTrySpell() and rebTryBytes() ?</h2>
<p>With the new meaning of TRY, this actually makes sense!</p>
<p>It's a better way to bias it than to say that rebSpell() can give back NULL, where you'd use rebMustSpell() if you want to ensure it isn't null.</p>
<p>Very well, then.  I'm glad we had this talk.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/no_mouth.png?v=9" title=":no_mouth:" class="emoji only-emoji" alt=":no_mouth:"></p>
          <p><a href="https://forum.rebol.info/t/rebspell-or-rebbytes-of-null-in-the-api/1887/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rebspell-or-rebbytes-of-null-in-the-api/1887/1</link>
        <pubDate>Sat, 16 Jul 2022 14:01:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1887-1</guid>
        <source url="https://forum.rebol.info/t/rebspell-or-rebbytes-of-null-in-the-api/1887.rss">rebSpell() or rebBytes() of NULL in the API</source>
      </item>
  </channel>
</rss>
