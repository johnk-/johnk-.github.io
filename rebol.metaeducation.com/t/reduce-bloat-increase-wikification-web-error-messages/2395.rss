<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reduce Bloat, Increase Wikification: Web Error Messages</title>
    <link>https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395</link>
    <description>We have a situation where giving descriptive errors with strings is often very possible.  But each time you write a long string, that&#39;s taking up space:

    if (attr == tail or not Is_Integer(attr))
         return Error_Bad_Value(attr);
    if (*raw_addr != 0)
        return Error_User(&quot;FFI: duplicate raw memory&quot;);
    *raw_addr = cast(uint_64_t, Cell_Int64(attr));
    if (*raw_addr == 0)
        return Error_User(&quot;FFI: void pointer illegal for raw memory&quot;);

It&#39;s also hardcoding the message into the executable.

I&#39;ve been leaning toward the idea that instead of strings embedded into the program or scripts, that instead errors are just their symbol IDs.

    if (attr == tail)
         return ERROR(REACHED_END);
    if (not Is_Integer(attr)
         return ERROR(EXPECTED, CANON(INTEGER_X));
    if (*raw_addr != 0)
        return ERROR_FFI(DUPLICATE_RAW_MEMORY);
    *raw_addr = cast(uint_64_t, Cell_Int64(attr));
    if (*raw_addr == 0)
        return ERROR_FFI(VOID_POINTER_RAW_MEMORY);


Some error IDs would be for built-ins, others would be extension specific.

But the idea here is that:

     ERROR(REACHED_END);
     =&gt; Make_Error(Canon_Symbol(SYM_REACHED_END))

The error creation can be variadic, and take parameters, with validation in debug builds as it does today that the parameter count is right for the error.

So what you&#39;d wind up getting from something like ERROR(EXPECTED, CANON(INTEGER_X)) would be:

    == #[error! [
        id: &#39;expected
        arg1: &#39;integer!
        near: &#39;[...code location...]
        where: &#39;[...call stack...]
        file: %file-name.r
        line: 1020
    ]]

And if you didn&#39;t have an internet connection, the message would be something like:

    ** Error: [/expected integer!]
    ** Near: ...
    ** Where: ...
    ** File: %file-name.r
    ** Line: 1020
    (i) Connect to the internet for more descriptive error messages

## My Theory Is...

* If you have an internet connection, then a message can be pulled from the network on demand for what should be displayed.

    * Ideally you should also have an option to go to a wiki page where people write about things that may cause that error, what it means, and what to do about it.

* If you *don&#39;t* have an internet connection, then you are likely operating in a restricted and spare environment of some kind, in which you won&#39;t see the absence of a long and flowery message to be that big a deal.  Having the ID and the error arguments should be enough.

If you wanted to build an executable that pulled all the known error messages off the network (or from the local files that are used to produce answers on the network) and snapshotted them to ship in the EXE, you could do that.  There&#39;d be an option for it.

## How To Turn Error IDs Into URLs?

This is something that&#39;s been nagging me for a while.

R3-Alpha&#39;s error table **[`%errors.r`](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/boot/errors.r)** has categories in it:

    Throw: [...]
    Note: [...]
    Syntax: [...]
    Script: [...]
    Math: [...]
    Access: [...]
    Command: [...]
    resv700: [...]
    User: [...]
    Internal: [...]

This was based on the idea that giving errors numbers was meaningful or useful.  I don&#39;t think the numbering is meaningful, and the categories may not be either.

It seems to me that the only thing that would be useful would be some way of grouping errors together so that you&#39;d be able to find them on a server.

This all requires some more thinking, but it&#39;s a direction I&#39;ve been leaning in.</description>
    
    <lastBuildDate>Sat, 05 Apr 2025 12:10:58 +0000</lastBuildDate>
    <category>Errors</category>
    <atom:link href="https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reduce Bloat, Increase Wikification: Web Error Messages</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2395">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>In particular this is a mistaken assumption. An Internet connection can be lost for a variety of reasons, none of which necessarily has anything to do with a ‘restricted environment’.</p>
</blockquote>
</aside>
<p>If people are concerned about this, then wherever you get the interpreter from should be able to give you errors as well at that time.</p>
<p>Like I say, it can be a build option to pack things into the EXE (like picking which extensions to build in).  I just think the core should be centered around not building it in.</p>
<p>In particular... the webassembly build on the web, is generally going to be able to pull the error messages it needs on demand...so there's no reason that the core interpreter come packed with a ton of strings embedded in it.  Faster download if not, when you're not going to encounter 99% of those errors in a given run.</p>
<p>The modularization I'm going after will be such that it won't have a console in it by default either--so you can embed the interpreter in a web page and use services from it, and then if you need to break into a console it can <a href="https://emscripten.org/docs/compiling/Dynamic-Linking.html">download the side module</a>.</p>
<p>But again--with that--you can choose to build it in.</p>
<p>I'm just talking about decoupling things, and limiting what's actually required in the source to compile it.  How people package it is up to them.</p>
          <p><a href="https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395/3</link>
        <pubDate>Sat, 05 Apr 2025 12:10:58 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2395-3</guid>
        <source url="https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395.rss">Reduce Bloat, Increase Wikification: Web Error Messages</source>
      </item>
      <item>
        <title>Reduce Bloat, Increase Wikification: Web Error Messages</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>I strongly oppose this. It means that if the user ever loses their Internet connection, they would also lose their error messages. Except that’s exactly the time when error messages are most vital!</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2395">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>If you <em>don't</em> have an internet connection, then you are likely operating in a restricted and spare environment of some kind, in which you won't see the absence of a long and flowery message to be that big a deal. Having the ID and the error arguments should be enough.</p>
</blockquote>
</aside>
<p>In particular this is a mistaken assumption. An Internet connection can be lost for a variety of reasons, none of which necessarily has anything to do with a ‘restricted environment’.</p>
          <p><a href="https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395/2</link>
        <pubDate>Sat, 05 Apr 2025 12:04:47 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2395-2</guid>
        <source url="https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395.rss">Reduce Bloat, Increase Wikification: Web Error Messages</source>
      </item>
      <item>
        <title>Reduce Bloat, Increase Wikification: Web Error Messages</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>We have a situation where giving descriptive errors with strings is often very possible.  But each time you write a long string, that's taking up space:</p>
<pre><code>if (attr == tail or not Is_Integer(attr))
     return Error_Bad_Value(attr);
if (*raw_addr != 0)
    return Error_User("FFI: duplicate raw memory");
*raw_addr = cast(uint_64_t, Cell_Int64(attr));
if (*raw_addr == 0)
    return Error_User("FFI: void pointer illegal for raw memory");
</code></pre>
<p>It's also hardcoding the message into the executable.</p>
<p>I've been leaning toward the idea that instead of strings embedded into the program or scripts, that instead errors are just their symbol IDs.</p>
<pre><code>if (attr == tail)
     return ERROR(REACHED_END);
if (not Is_Integer(attr)
     return ERROR(EXPECTED, CANON(INTEGER_X));
if (*raw_addr != 0)
    return ERROR_FFI(DUPLICATE_RAW_MEMORY);
*raw_addr = cast(uint_64_t, Cell_Int64(attr));
if (*raw_addr == 0)
    return ERROR_FFI(VOID_POINTER_RAW_MEMORY);
</code></pre>
<p>Some error IDs would be for built-ins, others would be extension specific.</p>
<p>But the idea here is that:</p>
<pre><code> ERROR(REACHED_END);
 =&gt; Make_Error(Canon_Symbol(SYM_REACHED_END))
</code></pre>
<p>The error creation can be variadic, and take parameters, with validation in debug builds as it does today that the parameter count is right for the error.</p>
<p>So what you'd wind up getting from something like ERROR(EXPECTED, CANON(INTEGER_X)) would be:</p>
<pre><code>== #[error! [
    id: 'expected
    arg1: 'integer!
    near: '[...code location...]
    where: '[...call stack...]
    file: %file-name.r
    line: 1020
]]
</code></pre>
<p>And if you didn't have an internet connection, the message would be something like:</p>
<pre><code>** Error: [/expected integer!]
** Near: ...
** Where: ...
** File: %file-name.r
** Line: 1020
(i) Connect to the internet for more descriptive error messages
</code></pre>
<h2><a name="p-8111-my-theory-is-1" class="anchor" href="https://rebol.metaeducation.com#p-8111-my-theory-is-1"></a>My Theory Is...</h2>
<ul>
<li>
<p>If you have an internet connection, then a message can be pulled from the network on demand for what should be displayed.</p>
<ul>
<li>Ideally you should also have an option to go to a wiki page where people write about things that may cause that error, what it means, and what to do about it.</li>
</ul>
</li>
<li>
<p>If you <em>don't</em> have an internet connection, then you are likely operating in a restricted and spare environment of some kind, in which you won't see the absence of a long and flowery message to be that big a deal.  Having the ID and the error arguments should be enough.</p>
</li>
</ul>
<p>If you wanted to build an executable that pulled all the known error messages off the network (or from the local files that are used to produce answers on the network) and snapshotted them to ship in the EXE, you could do that.  There'd be an option for it.</p>
<h2><a name="p-8111-how-to-turn-error-ids-into-urls-2" class="anchor" href="https://rebol.metaeducation.com#p-8111-how-to-turn-error-ids-into-urls-2"></a>How To Turn Error IDs Into URLs?</h2>
<p>This is something that's been nagging me for a while.</p>
<p>R3-Alpha's error table <strong><a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/boot/errors.r"><code>%errors.r</code></a></strong> has categories in it:</p>
<pre><code>Throw: [...]
Note: [...]
Syntax: [...]
Script: [...]
Math: [...]
Access: [...]
Command: [...]
resv700: [...]
User: [...]
Internal: [...]
</code></pre>
<p>This was based on the idea that giving errors numbers was meaningful or useful.  I don't think the numbering is meaningful, and the categories may not be either.</p>
<p>It seems to me that the only thing that would be useful would be some way of grouping errors together so that you'd be able to find them on a server.</p>
<p>This all requires some more thinking, but it's a direction I've been leaning in.</p>
          <p><a href="https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395/1</link>
        <pubDate>Sat, 05 Apr 2025 10:49:55 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2395-1</guid>
        <source url="https://rebol.metaeducation.com/t/reduce-bloat-increase-wikification-web-error-messages/2395.rss">Reduce Bloat, Increase Wikification: Web Error Messages</source>
      </item>
  </channel>
</rss>
