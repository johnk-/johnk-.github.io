<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>WASI Encap: Embedding Read-Only Filesystems in .wasm Blobs?</title>
    <link>https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052</link>
    <description>I found this project which looks promising:

  https://github.com/kateinoigakukun/wasi-vfs

It includes a tool which can pack a directory into a .wasm file, and then you can read that directory from within the Wasm code itself.

Right now it&#39;s not a priority to look into, given that I added BASIC-READ and BASIC-WRITE to the WASI build.  If someone can prove the limit to using WASI effectively is that they have to distribute their project as a .zip and grant the runtime directory access (instead of as a single .wasm file) that seems like the time to attack it.

So... far future.  :slight_smile:</description>
    
    <lastBuildDate>Wed, 18 Oct 2023 02:47:11 +0000</lastBuildDate>
    <category>WASM</category>
    <atom:link href="https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>WASI Encap: Embedding Read-Only Filesystems in .wasm Blobs?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Emscripten and WASI don't really mix.  They have a very bare bones support but appear to be mostly delegating it to <a href="https://github.com/WebAssembly/wasi-sdk">wasi-sdk</a>.</p>
<p>Emscripten people on the subject:</p>
<p><a href="https://github.com/emscripten-core/emscripten/issues/12073#issuecomment-683895901" class="inline-onebox">PURE_WASI option · Issue #12073 · emscripten-core/emscripten · GitHub</a></p>
<p>Really Emscripten should be used if you're building web things, and Wasi-SDK if you're building WASI.</p>
          <p><a href="https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052/3</link>
        <pubDate>Wed, 18 Oct 2023 02:47:11 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2052-3</guid>
        <source url="https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052.rss">WASI Encap: Embedding Read-Only Filesystems in .wasm Blobs?</source>
      </item>
      <item>
        <title>WASI Encap: Embedding Read-Only Filesystems in .wasm Blobs?</title>
        <dc:creator><![CDATA[OneArb]]></dc:creator>
        <description><![CDATA[
            <p>emscripten <a href="https://emscripten.org/docs/porting/files/file_systems_overview.html" rel="noopener nofollow ugc">File System Overview</a> supports a similar virtual file system.</p>
          <p><a href="https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052/2</link>
        <pubDate>Wed, 18 Oct 2023 02:42:18 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2052-2</guid>
        <source url="https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052.rss">WASI Encap: Embedding Read-Only Filesystems in .wasm Blobs?</source>
      </item>
      <item>
        <title>WASI Encap: Embedding Read-Only Filesystems in .wasm Blobs?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I found this project which looks promising:</p>
<p><a href="https://github.com/kateinoigakukun/wasi-vfs" class="inline-onebox">GitHub - kateinoigakukun/wasi-vfs: A virtual filesystem layer for WASI.</a></p>
<p>It includes a tool which can pack a directory into a .wasm file, and then you can read that directory from within the Wasm code itself.</p>
<p>Right now it's not a priority to look into, given that I added BASIC-READ and BASIC-WRITE to the WASI build.  If someone can prove the limit to using WASI effectively is that they have to distribute their project as a .zip and grant the runtime directory access (instead of as a single .wasm file) that seems like the time to attack it.</p>
<p>So... far future.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052/1</link>
        <pubDate>Tue, 17 Oct 2023 13:39:20 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2052-1</guid>
        <source url="https://rebol.metaeducation.com/t/wasi-encap-embedding-read-only-filesystems-in-wasm-blobs/2052.rss">WASI Encap: Embedding Read-Only Filesystems in .wasm Blobs?</source>
      </item>
  </channel>
</rss>
