<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How Should `TAKE []` React? Null? Error?</title>
    <link>https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265</link>
    <description>Here is the behavior of TAKE in Rebol2:

    rebol2&gt;&gt; block: compose [1020 (none)]
    == [1020 none]

    rebol2&gt;&gt; take block
    == 1020

    rebol2&gt;&gt; take block
    == none

     rebol2&gt;&gt; take block
     == none

     rebol2&gt;&gt; take block
     == none

One thing I was bothered about was the inability to notice a difference between taking from an empty block and taking from a block containing a NONE!.  Ren-C can resolve that with NULL as a unique response to taking from a block with no elements in it.

But there&#39;s another concern which BrianH expressed, about a routine that you expected to have a side effect that did not.  If you write a line simply like **take block** and it doesn&#39;t take anything away, should it be silent about that fact?

## Early Ren-C introduced `TAKE*` as distinct from `TAKE`...

Experiments at being prescriptive worried that getting back a NULL might not be enough to warn you about a misunderstanding.  So we wound up with this:

    ren-c&gt;&gt; take []
    ** Error: TAKE-ing from an empty block, use TAKE*

    ren-c&gt;&gt; take* []
    ; null

To make things simple, TAKE was just a chained function derived from the lower-level `TAKE*`.  This seemed &quot;safer&quot;...at the time, and addressed BrianH&#39;s (pre-NULL) concern...as well as my general overarching desire to use things that are &quot;more checked&quot;.

**But this may be the wrong place to get paranoid about the user&#39;s intent, and we should just be happy that the NULL offers a unique result that means nothing was taken.**

When I wrote about [&quot;Make Your Own Safety&quot;](https://rebol.metaeducation.com/t/make-your-own-safety/1118/3) I asked what the odds were that we could guess the top pet-peeve that every programmer would have.  

How many times have you been bitten by TAKE on an empty block you didn&#39;t know was empty?  When you did, how likely was it that you blamed yourself vs. the tool?

Not only that, but what if you could get the &quot;hardened&quot; versions of `TAKE` and `TAKE*` in the files where it was bothering you as easily as:

     take*: :lib/take
     take: (=&gt; non null lib/take)

This seems the better angle, and avoids making it feel like there&#39;s any kind of bias toward the &quot;tics&quot; that bother @rgchris, which the `*` may represent.  **Give people the power to bend fast to address the specific concerns that are bothering them with the bent and personalized/customized code they are writing to solve the problem they have *right now*.**</description>
    
    <lastBuildDate>Thu, 28 Sep 2023 21:37:19 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How Should `TAKE []` React? Null? Error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1265">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I think that this is a good example of something that fits in well with TRY, under the new definitional-error-powered conception</p>
</blockquote>
</aside>
<p>I proposed this idea a year ago and have used it as an example many times, in explaining things that could be done with definitional errors (e.g. <a href="https://rebol.metaeducation.com/t/try-parse-parse-except-fail-on-mismatch/1924">changing PARSE to RAISE an error if it couldn't process the rules and get to the end of input</a>)...</p>
<p>...but I hadn't gotten around to switching TAKE to actually use the mechanism.</p>
<p>Today I've done it, and I think it's a good choice.  Having functions RAISE errors instead of returning NULL is a good way of throwing in a "speedbump" to catch situations that are likely to be mistakes...with the simple answer of adding in a TRY if you want to get past the speedbump (or use EXCEPT to catch the error).</p>
<h2><a name="p-6674-this-is-really-only-possible-due-to-definitional-errors-1" class="anchor" href="https://rebol.metaeducation.com#p-6674-this-is-really-only-possible-due-to-definitional-errors-1"></a>This is really only possible due to definitional errors!!</h2>
<p>If you tried to make TAKE cause an error in Rebol2/R3-Alpha/Red, you would have to trap it via the closest thing they have to Ren-C's TRY (called ATTEMPT) which would put the call in a block:</p>
<pre><code>rebol2&gt;&gt; attempt [take []]
== #[none]
</code></pre>
<p>But this would be very dangerous, as it would trap errors that weren't being emitted specifically by the TAKE.  For instance, a typo:</p>
<pre><code> rebol2&gt;&gt; block: [a b c]

 rebol2&gt;&gt; attempt [take blockk]  ; typo
 == #[none]
</code></pre>
<p>Or it would gloss over a variable being of the wrong type:</p>
<pre><code> rebol2&gt;&gt; data: 1020

 rebol2&gt;&gt; attempt [take data]  ; taking an integer!
 == #[none]
</code></pre>
<p>These are simple examples, but there's no limit to how dangerous this is.</p>
<p>But with definitional errors, Ren-C can safely react to errors that are specifically emitted by TAKE...</p>
<p><a href="https://rebol.metaeducation.com/t/fail-vs-return-raise-the-new-age-of-definitional-failures/1852" class="inline-onebox">FAIL vs. RETURN RAISE: The New Age of Definitional Errors!</a></p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/sunglasses.png?v=14" title=":sunglasses:" class="emoji only-emoji" alt=":sunglasses:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265/5</link>
        <pubDate>Fri, 15 Sep 2023 15:20:30 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1265-5</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265.rss">How Should `TAKE []` React? Null? Error?</source>
      </item>
      <item>
        <title>How Should `TAKE []` React? Null? Error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1265">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>Early Ren-C introduced <code>TAKE*</code> as distinct from <code>TAKE</code>...</strong></p>
<p>Experiments at being prescriptive worried that getting back a NULL might not be enough to warn you about a misunderstanding. So we wound up with this:</p>
<pre><code>ren-c&gt;&gt; take []
** Error: TAKE-ing from an empty block, use TAKE*

ren-c&gt;&gt; take* []
; null
</code></pre>
</blockquote>
</aside>
<p>I think that this is a good example of something that fits in well with TRY, under the <a href="https://rebol.metaeducation.com/t/ideas-about-a-more-general-meaning-for-try/1912">new definitional-error-powered conception</a>:</p>
<pre><code>&gt;&gt; block: []

&gt;&gt; take block
** Error: TAKE-ing from an empty block, if intentional use TRY TAKE

&gt;&gt; try take block
; null
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265/4</link>
        <pubDate>Wed, 17 Aug 2022 17:15:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1265-4</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265.rss">How Should `TAKE []` React? Null? Error?</source>
      </item>
      <item>
        <title>How Should `TAKE []` React? Null? Error?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I don't think I have been bitten by that. For my personal preference, having TAKE return NULL from an empty block seems better than throwing an error-- the latter behavior implies that the block! cannot be-empty, which, I don't know, seems un-block-like. Using TAKE then makes a block! less block-like. I can think of all kinds of interesting variants of block! structures (constrained sizes, LIFO/FIFO) which could be convenient and safer for some TAKE scenarios.</p>
          <p><a href="https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265/2</link>
        <pubDate>Tue, 03 Mar 2020 21:14:02 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1265-2</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265.rss">How Should `TAKE []` React? Null? Error?</source>
      </item>
      <item>
        <title>How Should `TAKE []` React? Null? Error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here is the behavior of TAKE in Rebol2:</p>
<pre><code>rebol2&gt;&gt; block: compose [1020 (none)]
== [1020 none]

rebol2&gt;&gt; take block
== 1020

rebol2&gt;&gt; take block
== none

 rebol2&gt;&gt; take block
 == none

 rebol2&gt;&gt; take block
 == none
</code></pre>
<p>One thing I was bothered about was the inability to notice a difference between taking from an empty block and taking from a block containing a NONE!.  Ren-C can resolve that with NULL as a unique response to taking from a block with no elements in it.</p>
<p>But there's another concern which BrianH expressed, about a routine that you expected to have a side effect that did not.  If you write a line simply like <strong>take block</strong> and it doesn't take anything away, should it be silent about that fact?</p>
<h2><a name="p-3729-early-ren-c-introduced-take-as-distinct-from-take-1" class="anchor" href="https://rebol.metaeducation.com#p-3729-early-ren-c-introduced-take-as-distinct-from-take-1"></a>Early Ren-C introduced <code>TAKE*</code> as distinct from <code>TAKE</code>...</h2>
<p>Experiments at being prescriptive worried that getting back a NULL might not be enough to warn you about a misunderstanding.  So we wound up with this:</p>
<pre><code>ren-c&gt;&gt; take []
** Error: TAKE-ing from an empty block, use TAKE*

ren-c&gt;&gt; take* []
; null
</code></pre>
<p>To make things simple, TAKE was just a chained function derived from the lower-level <code>TAKE*</code>.  This seemed "safer"...at the time, and addressed BrianH's (pre-NULL) concern...as well as my general overarching desire to use things that are "more checked".</p>
<p><strong>But this may be the wrong place to get paranoid about the user's intent, and we should just be happy that the NULL offers a unique result that means nothing was taken.</strong></p>
<p>When I wrote about <a href="https://rebol.metaeducation.com/t/make-your-own-safety/1118/3">"Make Your Own Safety"</a> I asked what the odds were that we could guess the top pet-peeve that every programmer would have.</p>
<p>How many times have you been bitten by TAKE on an empty block you didn't know was empty?  When you did, how likely was it that you blamed yourself vs. the tool?</p>
<p>Not only that, but what if you could get the "hardened" versions of <code>TAKE</code> and <code>TAKE*</code> in the files where it was bothering you as easily as:</p>
<pre><code> take*: :lib/take
 take: (=&gt; non null lib/take)
</code></pre>
<p>This seems the better angle, and avoids making it feel like there's any kind of bias toward the "tics" that bother <a class="mention" href="https://rebol.metaeducation.com/u/rgchris">@rgchris</a>, which the <code>*</code> may represent.  <strong>Give people the power to bend fast to address the specific concerns that are bothering them with the bent and personalized/customized code they are writing to solve the problem they have <em>right now</em>.</strong></p>
          <p><a href="https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265/1</link>
        <pubDate>Tue, 03 Mar 2020 20:45:06 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1265-1</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-take-react-null-error/1265.rss">How Should `TAKE []` React? Null? Error?</source>
      </item>
  </channel>
</rss>
