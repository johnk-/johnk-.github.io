<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Does SET/ANY, GET/ANY-thing matter anymore?</title>
    <link>https://rebol.metaeducation.com/t/does-set-any-get-any-thing-matter-anymore/1053</link>
    <description>Historical Rebol uses SET/ANY and GET/ANY to allow you to read and write unset variables:

    rebol2&gt;&gt; unset &#39;foo

    rebol2&gt;&gt; get &#39;foo
    ** Script Error: foo has no value

    rebol2&gt;&gt; unset? get/any &#39;foo
    == true

    rebol2&gt;&gt; set &#39;bar #[unset!]
    ** Script Error: word needs a value

    rebol2&gt;&gt; unset? set/any &#39;bar #[unset!]
    == true

([Note that Ren-C calls the unset variable state &quot;TRASH&quot;](https://rebol.metaeducation.com/t/what-are-null-void-and-trash/2283).)

## Calling a Refinement /ANY May Not Be  A Good Precedent

ANY is a very common construct.  So if people get in the habit of naming their refinements /ANY it would be kind of irritating.  Every time you use it, you have to be careful to use **`lib.any`** for the control construct... or shuffle the names around to put ANY back and move the argument to a new variable.

## The &quot;/ANY&quot; Behavior Is The Default For SET-WORD!

SET-WORD! doesn&#39;t error on &quot;trash&quot; assignments, it just clears the variable.  That&#39;s pretty much firm.

It&#39;s a nice way to clear out variables:

     &gt;&gt; x: ~
     == ~  ; anti

It thus seems to make sense that SET of a WORD! would do what a SET-WORD! would do, and not error.  So the /ANY would be superfluous by that logic.

## GET Returning Nothing Doesn&#39;t Seem That Problematic (?)

Traditionally, the reason plain WORD! errors on unset variables is that you need to stop code from churning along when you thought you made a function call.

    rebol2&gt;&gt; apend [a b c] [d e]
    == [d e]  ; if unsets were ignored

There&#39;s no callee you are passing the value to who can reject the #[unset!].

But GET doesn&#39;t run functions.  So you&#39;re always GET-ing the value to be putting or passing somewhere else.

[A generic checker like MUST](https://rebol.metaeducation.com/t/function-that-errors-on-null-but-passes-thru-everything-else/1250/7?u=hostilefork) could be applied to say **must get** if you really wanted to enforce that you&#39;re getting something that wasn&#39;t nothing (or null? or void?)  This could be useful in an assignment if you were trying to have error locality, since the SET-WORD! would accept a nothing without erroring:

    other-name: must get @original-name

## So... Do We Need The /ANY Switches On GET and SET ?

This has been on the table a long time (I edited this post from 2019 to bring it up to date, but the point remains).

Does anyone want to speak up in defense of their importance?</description>
    
    <lastBuildDate>Sun, 20 Apr 2025 18:24:37 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://rebol.metaeducation.com/t/does-set-any-get-any-thing-matter-anymore/1053.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Does SET/ANY, GET/ANY-thing matter anymore?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historical Rebol uses SET/ANY and GET/ANY to allow you to read and write unset variables:</p>
<pre><code>rebol2&gt;&gt; unset 'foo

rebol2&gt;&gt; get 'foo
** Script Error: foo has no value

rebol2&gt;&gt; unset? get/any 'foo
== true

rebol2&gt;&gt; set 'bar #[unset!]
** Script Error: word needs a value

rebol2&gt;&gt; unset? set/any 'bar #[unset!]
== true
</code></pre>
<p>(<a href="https://rebol.metaeducation.com/t/what-are-null-void-and-trash/2283">Note that Ren-C calls the unset variable state "TRASH"</a>.)</p>
<h2><a name="p-3063-calling-a-refinement-any-may-not-be-a-good-precedent-1" class="anchor" href="https://rebol.metaeducation.com#p-3063-calling-a-refinement-any-may-not-be-a-good-precedent-1"></a>Calling a Refinement /ANY May Not Be  A Good Precedent</h2>
<p>ANY is a very common construct.  So if people get in the habit of naming their refinements /ANY it would be kind of irritating.  Every time you use it, you have to be careful to use <strong><code>lib.any</code></strong> for the control construct... or shuffle the names around to put ANY back and move the argument to a new variable.</p>
<h2><a name="p-3063-the-any-behavior-is-the-default-for-set-word-2" class="anchor" href="https://rebol.metaeducation.com#p-3063-the-any-behavior-is-the-default-for-set-word-2"></a>The "/ANY" Behavior Is The Default For SET-WORD!</h2>
<p>SET-WORD! doesn't error on "trash" assignments, it just clears the variable.  That's pretty much firm.</p>
<p>It's a nice way to clear out variables:</p>
<pre><code> &gt;&gt; x: ~
 == ~  ; anti
</code></pre>
<p>It thus seems to make sense that SET of a WORD! would do what a SET-WORD! would do, and not error.  So the /ANY would be superfluous by that logic.</p>
<h2><a name="p-3063-get-returning-nothing-doesnt-seem-that-problematic-3" class="anchor" href="https://rebol.metaeducation.com#p-3063-get-returning-nothing-doesnt-seem-that-problematic-3"></a>GET Returning Nothing Doesn't Seem That Problematic (?)</h2>
<p>Traditionally, the reason plain WORD! errors on unset variables is that you need to stop code from churning along when you thought you made a function call.</p>
<pre><code>rebol2&gt;&gt; apend [a b c] [d e]
== [d e]  ; if unsets were ignored
</code></pre>
<p>There's no callee you are passing the value to who can reject the #[unset!].</p>
<p>But GET doesn't run functions.  So you're always GET-ing the value to be putting or passing somewhere else.</p>
<p><a href="https://rebol.metaeducation.com/t/function-that-errors-on-null-but-passes-thru-everything-else/1250/7">A generic checker like MUST</a> could be applied to say <strong>must get</strong> if you really wanted to enforce that you're getting something that wasn't nothing (or null? or void?)  This could be useful in an assignment if you were trying to have error locality, since the SET-WORD! would accept a nothing without erroring:</p>
<pre><code>other-name: must get @original-name
</code></pre>
<h2><a name="p-3063-so-do-we-need-the-any-switches-on-get-and-set-4" class="anchor" href="https://rebol.metaeducation.com#p-3063-so-do-we-need-the-any-switches-on-get-and-set-4"></a>So... Do We Need The /ANY Switches On GET and SET ?</h2>
<p>This has been on the table a long time (I edited this post from 2019 to bring it up to date, but the point remains).</p>
<p>Does anyone want to speak up in defense of their importance?</p>
          <p><a href="https://rebol.metaeducation.com/t/does-set-any-get-any-thing-matter-anymore/1053/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/does-set-any-get-any-thing-matter-anymore/1053/1</link>
        <pubDate>Mon, 04 Feb 2019 11:20:31 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1053-1</guid>
        <source url="https://rebol.metaeducation.com/t/does-set-any-get-any-thing-matter-anymore/1053.rss">Does SET/ANY, GET/ANY-thing matter anymore?</source>
      </item>
  </channel>
</rss>
