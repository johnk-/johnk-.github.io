<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The VOID-in-NULL-out Protocol</title>
    <link>https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880</link>
    <description>In traditional Redbol, if you wrote a random chain like like **first select block second options**, there was the question of how you would manage the situation of any of these things failing.

People would request lenience... to say more operations should assume that if they got a NONE! input that they should just return a NONE! output.  But this would give those chains no error locality... you&#39;d get a NONE! at the output and not know what failed.  The FIRST?  The SELECT?  The SECOND...?

You can see [DocKimbel&#39;s response to a request that INDEX? NONE be NONE](https://github.com/red/red/issues/3144):

&gt; &gt; **meijeru**
&gt; &gt; *&quot;There are precedents for built-in functions on series which yield none for none.&quot;*
&gt;
&gt; **DocKimbel**
&gt; *&quot;Yes, but the less of them we have, the better, as they lower the robustness of user code, by making some error cases passing silently. The goal of such none-transparency is to be able to chain calls and do nothing in case of `none`, avoiding an extra `either` construct. In the above case, it still requires an extra conditional construct (`any`), so that is not the same use-case as for other none-transparent functions (like `remove`).&quot;*

## But I Didn&#39;t Give Up So Easily...

The strategy cooked up for Ren-C is called &quot;VOID-in-NULL-out&quot;. 

There is an asymmetry created, in which certain functions take VOID as input, but then just return NULL out.

Then OPT can turn nulls into VOID.

Since (nearly) no function naturally takes NULL as an input, this creates a dynamic where you&#39;d put as many OPT in a chain as you felt was warranted, if you expected any steps could fail.  So perhaps **first opt select block opt second options**.  A reader could tell which operations could potentially fail using this method.

It has shown systemic success:

    &gt;&gt; case [null [[a [b] c]]]
    == \~null~\  ; antiform

    &gt;&gt; second case [null [[a [b] c]]]
    ** Error: SECOND doesn&#39;t take NULL as input (use OPT to opt-out)

    &gt;&gt; opt case [null [[a [b] c]]]
    == \~[]~\  ; antiform &quot;void&quot;

    &gt;&gt; second opt case [null [[a [b] c]]]
    == \~null~\  ; antiform

    &gt;&gt; first second opt case [null [[a [b] c]]]
    ** Error: FIRST doesn&#39;t take NULL as input (use OPT to opt-out)

    &gt;&gt; first opt second opt case [null [[a [b] c]]]
    == \~null~\  ; antiform

    &gt;&gt; first opt second opt case [okay [[a [b] c]]]
    == b

## VOID is a Better Choice Than NULL, SPACE, etc.

Prior to the invention of void, the strategy was tried as &quot;SPACE-in-NULL-out&quot;.  But this created problems since sometimes SPACE was meaningful as input.

VOID has all the properties we&#39;re looking for, here.  It&#39;s basically about as out-of-band as you can get.

* Like NULL, it can&#39;t be stored in blocks

* There&#39;s a nice operator for turning NULL into VOID and pass everything else through called OPT.

* The majority of routines don&#39;t have natural meanings for void arguments, so &quot;no op&quot; is *usually* the best reaction to &quot;hey, you got a void&quot;.

    * There are exceptions, e.g. functions like REPLACE which receive voids can interpret them as a desire to use an empty replacement vs. a no-op: 

          &gt;&gt; replace [a b c] &#39;b void
          == [a c]

          &gt;&gt; replace &quot;abc&quot; &quot;b&quot; void
          == &quot;ac&quot;

* Void has the appealing character of being able to polymorphically mean nothing regardless of what it&#39;s substituting in, so you don&#39;t have to switch between **`spread []`** and **`&quot;&quot;`** when working on blocks vs. strings.</description>
    
    <lastBuildDate>Mon, 02 Jun 2025 14:50:17 +0000</lastBuildDate>
    <category>Errors</category>
    <atom:link href="https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The VOID-in-NULL-out Protocol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In traditional Redbol, if you wrote a random chain like like <strong>first select block second options</strong>, there was the question of how you would manage the situation of any of these things failing.</p>
<p>People would request lenience... to say more operations should assume that if they got a NONE! input that they should just return a NONE! output.  But this would give those chains no error locality... you'd get a NONE! at the output and not know what failed.  The FIRST?  The SELECT?  The SECOND...?</p>
<p>You can see <a href="https://github.com/red/red/issues/3144">DocKimbel's response to a request that INDEX? NONE be NONE</a>:</p>
<blockquote>
<blockquote>
<p><strong>meijeru</strong><br>
<em>"There are precedents for built-in functions on series which yield none for none."</em></p>
</blockquote>
<p><strong>DocKimbel</strong><br>
<em>"Yes, but the less of them we have, the better, as they lower the robustness of user code, by making some error cases passing silently. The goal of such none-transparency is to be able to chain calls and do nothing in case of <code>none</code>, avoiding an extra <code>either</code> construct. In the above case, it still requires an extra conditional construct (<code>any</code>), so that is not the same use-case as for other none-transparent functions (like <code>remove</code>)."</em></p>
</blockquote>
<h2><a name="p-6059-but-i-didnt-give-up-so-easily-1" class="anchor" href="https://rebol.metaeducation.com#p-6059-but-i-didnt-give-up-so-easily-1"></a>But I Didn't Give Up So Easily...</h2>
<p>The strategy cooked up for Ren-C is called "VOID-in-NULL-out".</p>
<p>There is an asymmetry created, in which certain functions take VOID as input, but then just return NULL out.</p>
<p>Then OPT can turn nulls into VOID.</p>
<p>Since (nearly) no function naturally takes NULL as an input, this creates a dynamic where you'd put as many OPT in a chain as you felt was warranted, if you expected any steps could fail.  So perhaps <strong>first opt select block opt second options</strong>.  A reader could tell which operations could potentially fail using this method.</p>
<p>It has shown systemic success:</p>
<pre><code>&gt;&gt; case [null [[a [b] c]]]
== \~null~\  ; antiform

&gt;&gt; second case [null [[a [b] c]]]
** Error: SECOND doesn't take NULL as input (use OPT to opt-out)

&gt;&gt; opt case [null [[a [b] c]]]
== \~[]~\  ; antiform "void"

&gt;&gt; second opt case [null [[a [b] c]]]
== \~null~\  ; antiform

&gt;&gt; first second opt case [null [[a [b] c]]]
** Error: FIRST doesn't take NULL as input (use OPT to opt-out)

&gt;&gt; first opt second opt case [null [[a [b] c]]]
== \~null~\  ; antiform

&gt;&gt; first opt second opt case [okay [[a [b] c]]]
== b
</code></pre>
<h2><a name="p-6059-void-is-a-better-choice-than-null-space-etc-2" class="anchor" href="https://rebol.metaeducation.com#p-6059-void-is-a-better-choice-than-null-space-etc-2"></a>VOID is a Better Choice Than NULL, SPACE, etc.</h2>
<p>Prior to the invention of void, the strategy was tried as "SPACE-in-NULL-out".  But this created problems since sometimes SPACE was meaningful as input.</p>
<p>VOID has all the properties we're looking for, here.  It's basically about as out-of-band as you can get.</p>
<ul>
<li>
<p>Like NULL, it can't be stored in blocks</p>
</li>
<li>
<p>There's a nice operator for turning NULL into VOID and pass everything else through called OPT.</p>
</li>
<li>
<p>The majority of routines don't have natural meanings for void arguments, so "no op" is <em>usually</em> the best reaction to "hey, you got a void".</p>
<ul>
<li>
<p>There are exceptions, e.g. functions like REPLACE which receive voids can interpret them as a desire to use an empty replacement vs. a no-op:</p>
<pre><code>&gt;&gt; replace [a b c] 'b void
== [a c]

&gt;&gt; replace "abc" "b" void
== "ac"
</code></pre>
</li>
</ul>
</li>
<li>
<p>Void has the appealing character of being able to polymorphically mean nothing regardless of what it's substituting in, so you don't have to switch between <strong><code>spread []</code></strong> and <strong><code>""</code></strong> when working on blocks vs. strings.</p>
</li>
</ul>
          <p><a href="https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880/1</link>
        <pubDate>Thu, 14 Jul 2022 04:21:12 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1880-1</guid>
        <source url="https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880.rss">The VOID-in-NULL-out Protocol</source>
      </item>
      <item>
        <title>The VOID-in-NULL-out Protocol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Note that VOID-in-NULL-out can't be followed blindly.  As an obvious-if-you-think-about-it case, LOGIC!-returning routines have to handle void a different way.</p>
<h2><a name="p-7540-getting-tricked-by-inverse-logic-1" class="anchor" href="https://rebol.metaeducation.com#p-7540-getting-tricked-by-inverse-logic-1"></a>Getting Tricked By Inverse LOGIC!</h2>
<p>I wanted to write the following;</p>
<pre><code>if exists? opt some-dir: get-env 'SOME-DIRECTORY [
     ...
]
</code></pre>
<p>If GET-ENV returns null, the OPT turns it to void for EXISTS? to process.  But...<strong>what if the routine were called DOESN'T-EXIST?</strong>, and it followed VOID-in, NULL-out?  It would make it look like void inputs <em>did</em> exist, if you were just checking the result for truthiness or falseyness.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/frowning.png?v=14" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880/8">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880/8</link>
        <pubDate>Mon, 10 Dec 2018 14:21:48 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1880-8</guid>
        <source url="https://rebol.metaeducation.com/t/the-void-in-null-out-protocol/1880.rss">The VOID-in-NULL-out Protocol</source>
      </item>
  </channel>
</rss>
