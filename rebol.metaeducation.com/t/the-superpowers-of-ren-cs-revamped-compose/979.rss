<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Superpowers of Ren-C&#39;s Revamped COMPOSE</title>
    <link>https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979</link>
    <description>COMPOSE is one of Rebol&#39;s most useful and recognizable constructs.  As with most-things-Ren-C, it has evolved to become far more powerful.

## No Splicing By Default, GROUP! Antiforms Request Splicing

One of the immediately noticeable differences is that there is no /ONLY option any longer.  A plain BLOCK! will not splice its evaluative result.  So if **block: [a b c]**, it is different from historical Redbol:

    rebol2/r3-alpha/red&gt;&gt; compose [value: (block)]
    == [value: a b c]

    ren-c&gt;&gt; compose [value: (block)]
    == [value: [a b c]]

If you want to have something splice, you do this with GROUP! isotopes.  For instance, SPREAD produces them:

    ren-c&gt;&gt; compose [value: (block), (spread block)]
    == [value: [a b c], a b c]

* You can mix and match splicing parts and non-splicing parts in the same COMPOSE!

* It gets rid of an instance of /ONLY, which has always been something that causes head-scratching to new users (&quot;only what?&quot;)

**I am convinced that practice has shown that not splicing is a safer and more intuitive default.**  You&#39;re so often dealing with composing several values at a time that the odds of you knowing precisely what data type all of them are become lesser.  There&#39;s no question this is the better behavior for people who are writing and reading the code.

## The (...) Slots will Vaporize Voids!

In my list of [&quot;non-negotiables&quot;](https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244), I&#39;ve always said this *had* to be true, somehow:

    &gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]

For quite some time, a conditional like IF that didn&#39;t run its branch would return NULL.  Because NULL couldn&#39;t be put in a block, it *seemed* like it was a good fit for signaling vaporization of a clause in a COMPOSE.  But I was nervous because as NULL came to mean &quot;soft failure&quot;, this felt like you could be sweeping a failure under the rug.

But with isotopes, we got a menagerie of states that couldn&#39;t be put in blocks (and VOID, with its own antiform).  So when un-taken IF provides another choice of VOID vs. NULL, it provided the best of both worlds, where NULL can give a *specific* error tied to null splicing.

    &gt;&gt; compose [&lt;a&gt; (select [a 10 b 20] &#39;c) &lt;c&gt;]
    ** Script Error: non-NULL value required (see MAYBE, TRY, REIFY)

    &gt;&gt; compose [&lt;a&gt; (maybe select [a 10 b 20] &#39;c) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]

    &gt;&gt; compose [&lt;a&gt; (? select [a 10 b 20] &#39;c) &lt;c&gt;]  ; shorthand for MAYBE
    == [&lt;a&gt; &lt;c&gt;]

That specific error can be used to interesting effects, [see CURTAIL](https://rebol.metaeducation.com/t/making-use-of-definitional-errors-curtail/2118)

## Decorated Groups (including quoted) Apply Their Decorations!

Ren-C has a lot of variations of GROUP!:

* **`(set-group!):`**
* **`:(get-group!)`**
* **`^(meta-group!)`**
* **`@(the-group!)`**
* **`&#39;&#39;&#39;&#39;(quoted!)`**  &lt;sub&gt;[yes, any number of quotes!](https://rebol.metaeducation.com/t/quoted-arrives-formerly-known-as-lit-bit/995)&lt;/sub&gt;

COMPOSE does useful magic for you, and if the type a GROUP! evaluates to supports the decoration, it will be applied!

    &gt;&gt; fruits: [apple banana]
    &gt;&gt; dispositions: [favorite least-favorite]

    &gt;&gt; compose [(dispositions.1): &#39;@(second fruits)]
    == [favorite: &#39;@banana]

**Once you have this, you won&#39;t want to go back.**  The premise of the language is being able to dynamically play with code and generate structures on the fly.  This makes that feel extremely seamless.

## Change the List Type(s) With COMPOSE2

What if you don&#39;t want to use parentheses to point out your compose slots, but brackets?

    &gt;&gt; compose2 [] [(1 + 2) [1 + 2] (1 + 2)]
    == [(1 + 2) 3 (1 + 2)]

Or what about doubled-parentheses, instead of just one pair?

    &gt;&gt; compose2 &#39;(()) [(1 + 2) ((1 + 2)) (1 + 2)]
    == [(1 + 2) 3 (1 + 2)]

How about you still want to use groups, but you want to mark them with there being a signal inside the group to show it&#39;s a substitution site?

    &gt;&gt; compose2 &#39;(&lt;*&gt;) [(1 + 2) (&lt;*&gt; 1 + 2) (1 + 2)]
    == [(1 + 2) 3 (1 + 2)]

Whoa!

## Predicate Functions Can Process the Compose Slots!

We now have the ability to run functions on the groups before you splice them.

So if you want to define COMPOSE that acts historically like Rebol2 (splicing unless you say :ONLY), here&#39;s one way you can do it:

    old-compose: adapt augment compose/ [:only] [
        if not only [
            predicate: func [group &lt;local&gt; product] [
                either any-array? product: eval group [spread product] [:product]
            ]
        ]
    ]

We added the :ONLY refinement, and if you don&#39;t use it then it adds a processing function for arrays.  This gives you the historical result!

:surfing_man:

This only scratches the surface of what&#39;s possible, with these bendable and useful ergonomics.</description>
    
    <lastBuildDate>Wed, 26 Mar 2025 10:24:06 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Superpowers of Ren-C&#39;s Revamped COMPOSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="979">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>How about you still want to use groups, but you want to mark them with there being a signal inside the group to show it's a substitution site?</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; compose2 '(&lt;*&gt;) [(1 + 2) (&lt;*&gt; 1 + 2) (1 + 2)]
== [(1 + 2) 3 (1 + 2)]
</code></pre>
</blockquote>
</aside>
<p>So it comes up sometimes that you want to mark the groups that you <em>don't</em> want to compose:</p>
<pre><code>&gt;&gt; compose??? [(1 + 2) (&lt;!&gt; 1 + 2) (1 + 2) (1 + 2)]
== [3 (1 + 2) 3 3]
</code></pre>
<p>I'm not quite sure how to say this.  It could be a refinement...</p>
<pre><code>&gt;&gt; compose2:anti '(&lt;!&gt;) [(1 + 2) (&lt;!&gt; 1 + 2) (1 + 2) (1 + 2)]
== [3 (1 + 2) 3 3]
</code></pre>
<p>I don't like adding tons of refinements, and this is kind of a weird one semantically.</p>
<p>It would be nice if the pattern could encode it:</p>
<pre><code>&gt;&gt; compose2 '(not &lt;!&gt;) [(1 + 2) (&lt;!&gt; 1 + 2) (1 + 2) (1 + 2)]
== [3 (1 + 2) 3 3]
</code></pre>
<p>This might have to assume that the inside pattern was ordinarily just one non-list thing allowed, so if you saw two things you know the first word is a dialected thing.</p>
<p>Maybe the more general thing is to allow the use of a PARSE rule to decide what to compose?  COMPOSE2:PARSE?</p>
<p>Anyway, this "name the slots you don't want to compose and compose all the rest" is actually something I've had real uses for.  So worth thinking about...</p>
          <p><a href="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/13">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/13</link>
        <pubDate>Wed, 26 Mar 2025 10:24:06 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-979-13</guid>
        <source url="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979.rss">The Superpowers of Ren-C&#39;s Revamped COMPOSE</source>
      </item>
      <item>
        <title>The Superpowers of Ren-C&#39;s Revamped COMPOSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="https://rebol.metaeducation.com/t/doubled-groups-as-a-dialecting-tool/1893">((Doubled Groups)) as a Dialecting Tool</a></p>
          <p><a href="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/11">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/11</link>
        <pubDate>Mon, 18 Jul 2022 21:58:38 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-979-11</guid>
        <source url="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979.rss">The Superpowers of Ren-C&#39;s Revamped COMPOSE</source>
      </item>
      <item>
        <title>The Superpowers of Ren-C&#39;s Revamped COMPOSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>3 posts were merged into an existing topic: <a href="https://rebol.metaeducation.com/t/lkppo-stephane/1289/2">LkpPo (St√©phane)</a></p>
          <p><a href="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/4</link>
        <pubDate>Sun, 19 Jun 2022 14:12:14 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-979-4</guid>
        <source url="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979.rss">The Superpowers of Ren-C&#39;s Revamped COMPOSE</source>
      </item>
      <item>
        <title>The Superpowers of Ren-C&#39;s Revamped COMPOSE</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Scrumptious enhancements here! <img src="https://rebol.metaeducation.com/images/emoji/twitter/tongue.png?v=14" title=":tongue:" class="emoji" alt=":tongue:" loading="lazy" width="20" height="20"><br>
I've used COMPOSE quite a bit in my code previously and was grateful for it, but it was just a normal rebol way of getting things done. The labeling and predicate changes make it much more likely that I'll be building a lot more of my code with this powerful function.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/8">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/8</link>
        <pubDate>Wed, 06 Mar 2019 14:19:26 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-979-8</guid>
        <source url="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979.rss">The Superpowers of Ren-C&#39;s Revamped COMPOSE</source>
      </item>
      <item>
        <title>The Superpowers of Ren-C&#39;s Revamped COMPOSE</title>
        <dc:creator><![CDATA[giuliolunati]]></dc:creator>
        <description><![CDATA[
            <p>Very useful!<br>
Maybe also the FILE! type could be enabled:</p>
<pre><code>compose2 '(%) [(1 + 2) (% 1 + 2)] ...
</code></pre>
<blockquote>
<p><strong>UPDATE:</strong> This feature wish has been granted (arbitrary patterns and list choices were added via COMPOSE2 after the original post, which has been edited for modern conventions).</p>
</blockquote>
          <p><a href="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/2</link>
        <pubDate>Thu, 27 Dec 2018 13:10:00 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-979-2</guid>
        <source url="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979.rss">The Superpowers of Ren-C&#39;s Revamped COMPOSE</source>
      </item>
      <item>
        <title>The Superpowers of Ren-C&#39;s Revamped COMPOSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>COMPOSE is one of Rebol's most useful and recognizable constructs.  As with most-things-Ren-C, it has evolved to become far more powerful.</p>
<h2><a name="p-2859-no-splicing-by-default-group-antiforms-request-splicing-1" class="anchor" href="https://rebol.metaeducation.com#p-2859-no-splicing-by-default-group-antiforms-request-splicing-1"></a>No Splicing By Default, GROUP! Antiforms Request Splicing</h2>
<p>One of the immediately noticeable differences is that there is no /ONLY option any longer.  A plain BLOCK! will not splice its evaluative result.  So if <strong>block: [a b c]</strong>, it is different from historical Redbol:</p>
<pre><code>rebol2/r3-alpha/red&gt;&gt; compose [value: (block)]
== [value: a b c]

ren-c&gt;&gt; compose [value: (block)]
== [value: [a b c]]
</code></pre>
<p>If you want to have something splice, you do this with GROUP! isotopes.  For instance, SPREAD produces them:</p>
<pre><code>ren-c&gt;&gt; compose [value: (block), (spread block)]
== [value: [a b c], a b c]
</code></pre>
<ul>
<li>
<p>You can mix and match splicing parts and non-splicing parts in the same COMPOSE!</p>
</li>
<li>
<p>It gets rid of an instance of /ONLY, which has always been something that causes head-scratching to new users ("only what?")</p>
</li>
</ul>
<p><strong>I am convinced that practice has shown that not splicing is a safer and more intuitive default.</strong>  You're so often dealing with composing several values at a time that the odds of you knowing precisely what data type all of them are become lesser.  There's no question this is the better behavior for people who are writing and reading the code.</p>
<h2><a name="p-2859-the-slots-will-vaporize-voids-2" class="anchor" href="https://rebol.metaeducation.com#p-2859-the-slots-will-vaporize-voids-2"></a>The (...) Slots will Vaporize Voids!</h2>
<p>In my list of <a href="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244">"non-negotiables"</a>, I've always said this <em>had</em> to be true, somehow:</p>
<pre><code>&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]
</code></pre>
<p>For quite some time, a conditional like IF that didn't run its branch would return NULL.  Because NULL couldn't be put in a block, it <em>seemed</em> like it was a good fit for signaling vaporization of a clause in a COMPOSE.  But I was nervous because as NULL came to mean "soft failure", this felt like you could be sweeping a failure under the rug.</p>
<p>But with isotopes, we got a menagerie of states that couldn't be put in blocks (and VOID, with its own antiform).  So when un-taken IF provides another choice of VOID vs. NULL, it provided the best of both worlds, where NULL can give a <em>specific</em> error tied to null splicing.</p>
<pre><code>&gt;&gt; compose [&lt;a&gt; (select [a 10 b 20] 'c) &lt;c&gt;]
** Script Error: non-NULL value required (see MAYBE, TRY, REIFY)

&gt;&gt; compose [&lt;a&gt; (maybe select [a 10 b 20] 'c) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]

&gt;&gt; compose [&lt;a&gt; (? select [a 10 b 20] 'c) &lt;c&gt;]  ; shorthand for MAYBE
== [&lt;a&gt; &lt;c&gt;]
</code></pre>
<p>That specific error can be used to interesting effects, <a href="https://rebol.metaeducation.com/t/making-use-of-definitional-errors-curtail/2118">see CURTAIL</a></p>
<h2><a name="p-2859-decorated-groups-including-quoted-apply-their-decorations-3" class="anchor" href="https://rebol.metaeducation.com#p-2859-decorated-groups-including-quoted-apply-their-decorations-3"></a>Decorated Groups (including quoted) Apply Their Decorations!</h2>
<p>Ren-C has a lot of variations of GROUP!:</p>
<ul>
<li><strong><code>(set-group!):</code></strong></li>
<li><strong><code>:(get-group!)</code></strong></li>
<li><strong><code>^(meta-group!)</code></strong></li>
<li><strong><code>@(the-group!)</code></strong></li>
<li><strong><code>''''(quoted!)</code></strong>  <sub><a href="https://rebol.metaeducation.com/t/quoted-arrives-formerly-known-as-lit-bit/995">yes, any number of quotes!</a></sub></li>
</ul>
<p>COMPOSE does useful magic for you, and if the type a GROUP! evaluates to supports the decoration, it will be applied!</p>
<pre><code>&gt;&gt; fruits: [apple banana]
&gt;&gt; dispositions: [favorite least-favorite]

&gt;&gt; compose [(dispositions.1): '@(second fruits)]
== [favorite: '@banana]
</code></pre>
<p><strong>Once you have this, you won't want to go back.</strong>  The premise of the language is being able to dynamically play with code and generate structures on the fly.  This makes that feel extremely seamless.</p>
<h2><a name="p-2859-change-the-list-types-with-compose2-4" class="anchor" href="https://rebol.metaeducation.com#p-2859-change-the-list-types-with-compose2-4"></a>Change the List Type(s) With COMPOSE2</h2>
<p>What if you don't want to use parentheses to point out your compose slots, but brackets?</p>
<pre><code>&gt;&gt; compose2 [] [(1 + 2) [1 + 2] (1 + 2)]
== [(1 + 2) 3 (1 + 2)]
</code></pre>
<p>Or what about doubled-parentheses, instead of just one pair?</p>
<pre><code>&gt;&gt; compose2 '(()) [(1 + 2) ((1 + 2)) (1 + 2)]
== [(1 + 2) 3 (1 + 2)]
</code></pre>
<p>How about you still want to use groups, but you want to mark them with there being a signal inside the group to show it's a substitution site?</p>
<pre><code>&gt;&gt; compose2 '(&lt;*&gt;) [(1 + 2) (&lt;*&gt; 1 + 2) (1 + 2)]
== [(1 + 2) 3 (1 + 2)]
</code></pre>
<p>Whoa!</p>
<h2><a name="p-2859-predicate-functions-can-process-the-compose-slots-5" class="anchor" href="https://rebol.metaeducation.com#p-2859-predicate-functions-can-process-the-compose-slots-5"></a>Predicate Functions Can Process the Compose Slots!</h2>
<p>We now have the ability to run functions on the groups before you splice them.</p>
<p>So if you want to define COMPOSE that acts historically like Rebol2 (splicing unless you say :ONLY), here's one way you can do it:</p>
<pre><code>old-compose: adapt augment compose/ [:only] [
    if not only [
        predicate: func [group &lt;local&gt; product] [
            either any-array? product: eval group [spread product] [:product]
        ]
    ]
]
</code></pre>
<p>We added the :ONLY refinement, and if you don't use it then it adds a processing function for arrays.  This gives you the historical result!</p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/surfing_man.png?v=14" title=":surfing_man:" class="emoji only-emoji" alt=":surfing_man:" loading="lazy" width="20" height="20"></p>
<p>This only scratches the surface of what's possible, with these bendable and useful ergonomics.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979/1</link>
        <pubDate>Thu, 27 Dec 2018 08:01:33 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-979-1</guid>
        <source url="https://rebol.metaeducation.com/t/the-superpowers-of-ren-cs-revamped-compose/979.rss">The Superpowers of Ren-C&#39;s Revamped COMPOSE</source>
      </item>
  </channel>
</rss>
