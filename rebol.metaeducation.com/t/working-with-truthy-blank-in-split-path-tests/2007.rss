<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Working With Truthy BLANK! (in SPLIT-PATH Tests)</title>
    <link>https://rebol.metaeducation.com/t/working-with-truthy-blank-in-split-path-tests/2007</link>
    <description>The current re-imagining of the concept of truthy/falsey involves the idea that *anything you can put into a block is truthy*.  That includes BLANK!.

~null~ isotopes are falsey, and will REIFY to be **`~null~`** which can be somewhat clumsy-looking.

But consider some test cases for seeing how SPLIT-PATH works, looking a bit like this:

    split-path-tests:  [
        %foo                            [_ %foo]
        %/c/test/test2                  [%/c/test/ %test2]
        %/c/test                        [%/c/ %test]
        %//test                         [%// %test]
        %/test                          [%/ %test]
        %//                             [%// _]
        %./                             [%./ _]
        &lt;...etc...&gt;
    ]

SPLIT-PATH is a multi-return routine, which gives back two values: the path and the filename.  But if one or the other is missing then that component will be null, which is useful for testing with IF (or using DEFAULT with).

But if we just blindly changed the tests to reify, it would become less legible:

    split-path-tests:  [
        %foo                            [~null~ %foo]
        %/c/test/test2                  [%/c/test/ %test2]
        %/c/test                        [%/c/ %test]
        %//test                         [%// %test]
        %/test                          [%/ %test]
        %//                             [%// ~null~]
        %./                             [%./ ~null~]
        &lt;...etc...&gt;
    ]

However...with blanks being truthy, this means you that you can take a variable which may be null and turn it into a blank, like this:

    reduce [any [path _] any [file _]]

That&#39;s rather succinct!  Probably so succinct that it doesn&#39;t need its own native to express.

(I thought it was neat.)</description>
    
    <lastBuildDate>Thu, 22 Jun 2023 20:29:45 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://rebol.metaeducation.com/t/working-with-truthy-blank-in-split-path-tests/2007.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Working With Truthy BLANK! (in SPLIT-PATH Tests)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As a further note, <a href="https://github.com/red/red/issues/5024">I borrowed the tests for SPLIT-PATH from a Red issue</a>.</p>
<p><em>And I want to say how bad historical Rebol/Red SPLIT-PATH seems to be!</em></p>
<p>Instead of giving you a directory and an optional file, you get the last directory fragment if there is no file part:</p>
<pre><code>rebol2&gt;&gt; split-path %/c/rebol/tools/test/test.r
== [%/c/rebol/tools/test/ %test.r]  ; seems reasonable...

rebol2&gt;&gt; split-path %/c/rebol/tools/test/
== [%/c/rebol/tools/ %test/]  ; what?

rebol2&gt;&gt; split-path http://
== [http:/ %/]  ; seriously?
</code></pre>
<p><a href="https://github.com/red/red/issues/5024#issuecomment-1006032330">hiiamboris sums up my opinion</a>, which is that you should never get a directory back for the file part.</p>
<p>So that is the Ren-C behavior:</p>
<pre><code>&gt;&gt; [file dir]: split-path %/c/rebol/tools/test/
== ~null~  ; isotope

&gt;&gt; file
== ~null~  ; isotope

&gt;&gt; dir
== %/c/rebol/tools/test/
</code></pre>
<p>It uses multiple return values instead of returning a block.  So there had to be a decision about which would be the primary and secondary results.  It's a tough call, but I felt like splitting out the filename as the first result was probably the better option.  You can of course use "circling" to get the directory instead without having to name a variable:</p>
<pre><code>&gt;&gt; [_ @]: split-path %/c/rebol/tools/test/
== %/c/rebol/tools/test/
</code></pre>
<p>There was some debate about whether a null (none) signifier was better than coming back with an empty file like <strong>%""</strong> to help with joining the parts back together.  Historical #[none] doesn't have the voidability through MAYBE and just tends to create garbage.  Oldes complains about having to remember to write the likes of <strong>any [file %""]</strong> to work around the problems:</p>
<pre><code>rebol2&gt;&gt; join %/c/rebol/tools/test/ none
== %/c/rebol/tools/test/none  ; d'oh
</code></pre>
<p>But Ren-C has what I believe is just the right mix of caution on this... giving you a null that can be tested for truthiness, as well as alerting you to the absence if you try to use it...all while being able to easily MAYBE it into a void that can systemically act like emptiness:</p>
<pre><code>&gt;&gt; [file dir]: split-path %/c/rebol/tools/test/

&gt;&gt; combined: join dir file
** Script Error: Invalid use of ~null~ isotope

&gt;&gt; combined: join dir maybe file
== %/c/rebol/tools/test/

&gt;&gt; file: join file %".temp"
** Error: JOIN does not allow null for its BASE argument
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/working-with-truthy-blank-in-split-path-tests/2007/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/working-with-truthy-blank-in-split-path-tests/2007/2</link>
        <pubDate>Thu, 22 Jun 2023 20:29:45 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2007-2</guid>
        <source url="https://rebol.metaeducation.com/t/working-with-truthy-blank-in-split-path-tests/2007.rss">Working With Truthy BLANK! (in SPLIT-PATH Tests)</source>
      </item>
      <item>
        <title>Working With Truthy BLANK! (in SPLIT-PATH Tests)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The current re-imagining of the concept of truthy/falsey involves the idea that <em>anything you can put into a block is truthy</em>.  That includes BLANK!.</p>
<p>~null~ isotopes are falsey, and will REIFY to be <strong><code>~null~</code></strong> which can be somewhat clumsy-looking.</p>
<p>But consider some test cases for seeing how SPLIT-PATH works, looking a bit like this:</p>
<pre><code>split-path-tests:  [
    %foo                            [_ %foo]
    %/c/test/test2                  [%/c/test/ %test2]
    %/c/test                        [%/c/ %test]
    %//test                         [%// %test]
    %/test                          [%/ %test]
    %//                             [%// _]
    %./                             [%./ _]
    &lt;...etc...&gt;
]
</code></pre>
<p>SPLIT-PATH is a multi-return routine, which gives back two values: the path and the filename.  But if one or the other is missing then that component will be null, which is useful for testing with IF (or using DEFAULT with).</p>
<p>But if we just blindly changed the tests to reify, it would become less legible:</p>
<pre><code>split-path-tests:  [
    %foo                            [~null~ %foo]
    %/c/test/test2                  [%/c/test/ %test2]
    %/c/test                        [%/c/ %test]
    %//test                         [%// %test]
    %/test                          [%/ %test]
    %//                             [%// ~null~]
    %./                             [%./ ~null~]
    &lt;...etc...&gt;
]
</code></pre>
<p>However...with blanks being truthy, this means you that you can take a variable which may be null and turn it into a blank, like this:</p>
<pre><code>reduce [any [path _] any [file _]]
</code></pre>
<p>That's rather succinct!  Probably so succinct that it doesn't need its own native to express.</p>
<p>(I thought it was neat.)</p>
          <p><a href="https://rebol.metaeducation.com/t/working-with-truthy-blank-in-split-path-tests/2007/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/working-with-truthy-blank-in-split-path-tests/2007/1</link>
        <pubDate>Sat, 14 Jan 2023 15:21:04 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2007-1</guid>
        <source url="https://rebol.metaeducation.com/t/working-with-truthy-blank-in-split-path-tests/2007.rss">Working With Truthy BLANK! (in SPLIT-PATH Tests)</source>
      </item>
  </channel>
</rss>
