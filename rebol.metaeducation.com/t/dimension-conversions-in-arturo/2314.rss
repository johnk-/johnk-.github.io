<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dimension Conversions in Arturo</title>
    <link>https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314</link>
    <description>Here is a table of dimensions used by [Arturo](https://rebol.metaeducation.com/t/arturo-rebol-inspired-language/1370), expressed as a table in the Nim language:

  https://github.com/arturo-lang/arturo/blob/master/src/vm/values/custom/quantities/definitions.nim 

It&#39;s a pretty impressive compendium.  And there&#39;s also some &quot;heavily macro-driven&quot; Nim code that implements conversion operations:

![Screenshot_2024-10-11_at_07.40.49|495x500, 75%](upload://ly8BQYMZcqhc44hu8VlGzNKezNS.jpeg)

@drkameleon cites [Frink](https://frinklang.org/) as the main inspiration for this, though assembling the table and conversion code was original work on the order of months.

## Why Not Use Arturo For The Table...?

The table is Nim code...and as such, beholden to having a lot of repetition and commas.

So of course my first question was *&quot;why not express it as Arturo, and then spit out the Nim table as part of the build process&quot;*?

Instead of:

    #-----------------------------------------------------------------------
    # Length units (base: m)
    #-----------------------------------------------------------------------
    #       name  symbol  prefix?    definition      aliases
    #-----------------------------------------------------------------------
    defUnit &quot;in&quot;,  &quot;in&quot;, false,  &quot;127:5000 m&quot;,      &quot;inch&quot;, &quot;inches&quot;
    defUnit &quot;ang&quot;,  &quot;Å&quot;, false,  &quot;1:10000000000 m&quot;, &quot;angstrom&quot;, &quot;angstroms&quot;
    defUnit &quot;px&quot;,  &quot;px&quot;, true,   &quot;1:96 in&quot;,         &quot;pixel&quot;, &quot;pixels&quot;

It could be reduced down to something more like this:

        === LENGTH (base: m) ===

         in [127:5000 m] inch inches
        ang [1:10000000000 m] angstrom angstroms (&quot;Å&quot;)
       */px [1:96 in] pixel pixels

The meaning of &quot;prefix?&quot; is actually &quot;prefixable?&quot; that a type can have a prefix. e.g. pixels is prefixable because you can say **`Mpx`** for &quot;megapixels&quot;.  So I think some prefixing decoration on the type is a nice way to convey this.  I just threw in **`*/px`** as an example--though I gather that in Arturo that would be **`*\px`**

Though when I first saw some isolated instance of the colon notation I didn&#39;t realize it was a ratio.  Ren-C could do this as a CHAIN! or as a PATH!.  I think my first instinct would have been path: 

         in [127/5000 m] inch inches
        ang [1/10000000000 m] angstrom angstroms (&quot;Å&quot;)
       *.px [1/96 in] pixel pixels

But it actually looks a bit better with the colons I think.

Some notation would be nice for the pluralization.  It&#39;s one of the places where the [FUSED! proposal](https://rebol.metaeducation.com/t/no-interstitial-delimiter-sequence-proposal-fused/1503) might come in handy:

         in [127:5000 m] inch{es}
        ang [1:10000000000 m] angstrom{s} (&quot;Å&quot;)
       */px [1:96 in] pixel{s}

You can use tuples or paths, but it&#39;s not quite as neat...although the paths aren&#39;t terrible:

         in [127:5000 m] inch.es
        ang [1:10000000000 m] angstrom.s (&quot;Å&quot;)
       */px [1:96 in] pixel.s

         in [127:5000 m] inch/es
        ang [1:10000000000 m] angstrom/s (&quot;Å&quot;)
       */px [1:96 in] pixel/s</description>
    
    <lastBuildDate>Sat, 12 Oct 2024 04:26:26 +0000</lastBuildDate>
    <category>Math</category>
    <atom:link href="https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dimension Conversions in Arturo</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2314">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Here is a table of dimensions used by <a href="https://rebol.metaeducation.com/t/arturo-rebol-inspired-language/1370">Arturo </a>, expressed as a table in the Nim language:</p>
</blockquote>
</aside>
<p>Further on this, the most comprehensive units list I know of is that used by the Frink language (which is worth looking at!): <a href="http://frinklang.com/frinkdata/units.txt">http://frinklang.com/frinkdata/units.txt</a></p>
          <p><a href="https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314/3</link>
        <pubDate>Sat, 12 Oct 2024 04:26:26 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2314-3</guid>
        <source url="https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314.rss">Dimension Conversions in Arturo</source>
      </item>
      <item>
        <title>Dimension Conversions in Arturo</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2314">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://rebol.metaeducation.com/uploads/default/original/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0.jpeg" data-download-href="https://rebol.metaeducation.com/uploads/default/970992fb6919f5b8f0bb350bcbff2390f350cab0" title="Screenshot_2024-10-11_at_07.40.49"><img src="https://rebol.metaeducation.com/uploads/default/optimized/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0_2_371x375.jpeg" alt="Screenshot_2024-10-11_at_07.40.49" data-base62-sha1="ly8BQYMZcqhc44hu8VlGzNKezNS" width="371" height="375" srcset="https://rebol.metaeducation.com/uploads/default/optimized/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0_2_371x375.jpeg, https://rebol.metaeducation.com/uploads/default/optimized/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0_2_556x562.jpeg 1.5x, https://rebol.metaeducation.com/uploads/default/original/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0.jpeg 2x" data-dominant-color="312113"></a></div><p></p>
</blockquote>
</aside>
<p>Incidentally, I think the conversion of types is cool, but I do not think doing it implicitly is wise. If I have a variable that I believe is in meters, and somehow a quantity in yards like <strong><code>distance</code></strong> comes along, and I say <strong><code>num_meters: distance + num_meters</code></strong>, the idea that the first argument dictates the type of the result is one of those things that seems like it would yield undesirable surprise behaviors</p>
<p>I'd rather say <strong><code>num_meters: (conform 'm distance) + num_meters</code></strong> or <strong><code>num-meters: (conform num_meters distance) + num_meters</code></strong> and get a type error otherwise.  One of the big selling points of dimensional analysis is that it brings coherence and safety where there is otherwise incoherence, and if you start throwing in implicit conversions then you're diminishing that benefit.</p>
<p>Saying <em>"the rule is it's the type of the first argument"</em> for the operators may seem learnable, and people who get what they don't want can say <em>"oh, I'll fix it"</em> and then make sure all their calculations put what they want first. But I think it's a slippery slope. e.g. let's say someone writes a routine that takes three arguments, and they make a temporary out of the second input and accumulate something into it, then after some snakey code with the other values you get a kind of arbitrary result.</p>
<p>But this is my type-safety bias for programming at scale. What's appropriate for a calculator app is entirely different. I just don't think languages are calculator apps.</p>
<p>Alternately, <strong><code>conform</code></strong> could be a dialect that does conversions, and not the <strong><code>+</code></strong> operator, e.g. <strong><code>num_meters: conform [num_meters + distance]</code></strong> where it would have rules to pick the first thing, convert it, then delegate to <strong><code>+</code></strong> to do the work, with plain <strong><code>+</code></strong> being type-safe.</p>
          <p><a href="https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314/2</link>
        <pubDate>Fri, 11 Oct 2024 14:19:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2314-2</guid>
        <source url="https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314.rss">Dimension Conversions in Arturo</source>
      </item>
      <item>
        <title>Dimension Conversions in Arturo</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here is a table of dimensions used by <a href="https://rebol.metaeducation.com/t/arturo-rebol-inspired-language/1370">Arturo</a>, expressed as a table in the Nim language:</p>
<p><a href="https://github.com/arturo-lang/arturo/blob/master/src/vm/values/custom/quantities/definitions.nim" class="inline-onebox">arturo/src/vm/values/custom/quantities/definitions.nim at master · arturo-lang/arturo · GitHub</a></p>
<p>It's a pretty impressive compendium.  And there's also some "heavily macro-driven" Nim code that implements conversion operations:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://rebol.metaeducation.com/uploads/default/original/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0.jpeg" data-download-href="https://rebol.metaeducation.com/uploads/default/970992fb6919f5b8f0bb350bcbff2390f350cab0" title="Screenshot_2024-10-11_at_07.40.49"><img src="https://rebol.metaeducation.com/uploads/default/optimized/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0_2_371x375.jpeg" alt="Screenshot_2024-10-11_at_07.40.49" data-base62-sha1="ly8BQYMZcqhc44hu8VlGzNKezNS" width="371" height="375" srcset="https://rebol.metaeducation.com/uploads/default/optimized/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0_2_371x375.jpeg, https://rebol.metaeducation.com/uploads/default/optimized/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0_2_556x562.jpeg 1.5x, https://rebol.metaeducation.com/uploads/default/original/1X/970992fb6919f5b8f0bb350bcbff2390f350cab0.jpeg 2x" data-dominant-color="312113"></a></div><p></p>
<p><a class="mention" href="https://rebol.metaeducation.com/u/drkameleon">@drkameleon</a> cites <a href="https://frinklang.org/">Frink</a> as the main inspiration for this, though assembling the table and conversion code was original work on the order of months.</p>
<h2><a name="p-7841-why-not-use-arturo-for-the-table-1" class="anchor" href="https://rebol.metaeducation.com#p-7841-why-not-use-arturo-for-the-table-1"></a>Why Not Use Arturo For The Table...?</h2>
<p>The table is Nim code...and as such, beholden to having a lot of repetition and commas.</p>
<p>So of course my first question was <em>"why not express it as Arturo, and then spit out the Nim table as part of the build process"</em>?</p>
<p>Instead of:</p>
<pre><code>#-----------------------------------------------------------------------
# Length units (base: m)
#-----------------------------------------------------------------------
#       name  symbol  prefix?    definition      aliases
#-----------------------------------------------------------------------
defUnit "in",  "in", false,  "127:5000 m",      "inch", "inches"
defUnit "ang",  "Å", false,  "1:10000000000 m", "angstrom", "angstroms"
defUnit "px",  "px", true,   "1:96 in",         "pixel", "pixels"
</code></pre>
<p>It could be reduced down to something more like this:</p>
<pre><code>    === LENGTH (base: m) ===

     in [127:5000 m] inch inches
    ang [1:10000000000 m] angstrom angstroms ("Å")
   */px [1:96 in] pixel pixels
</code></pre>
<p>The meaning of "prefix?" is actually "prefixable?" that a type can have a prefix. e.g. pixels is prefixable because you can say <strong><code>Mpx</code></strong> for "megapixels".  So I think some prefixing decoration on the type is a nice way to convey this.  I just threw in <strong><code>*/px</code></strong> as an example--though I gather that in Arturo that would be <strong><code>*\px</code></strong></p>
<p>Though when I first saw some isolated instance of the colon notation I didn't realize it was a ratio.  Ren-C could do this as a CHAIN! or as a PATH!.  I think my first instinct would have been path:</p>
<pre><code>     in [127/5000 m] inch inches
    ang [1/10000000000 m] angstrom angstroms ("Å")
   *.px [1/96 in] pixel pixels
</code></pre>
<p>But it actually looks a bit better with the colons I think.</p>
<p>Some notation would be nice for the pluralization.  It's one of the places where the <a href="https://rebol.metaeducation.com/t/no-interstitial-delimiter-sequence-proposal-fused/1503">FUSED! proposal</a> might come in handy:</p>
<pre><code>     in [127:5000 m] inch{es}
    ang [1:10000000000 m] angstrom{s} ("Å")
   */px [1:96 in] pixel{s}
</code></pre>
<p>You can use tuples or paths, but it's not quite as neat...although the paths aren't terrible:</p>
<pre><code>     in [127:5000 m] inch.es
    ang [1:10000000000 m] angstrom.s ("Å")
   */px [1:96 in] pixel.s

     in [127:5000 m] inch/es
    ang [1:10000000000 m] angstrom/s ("Å")
   */px [1:96 in] pixel/s
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314/1</link>
        <pubDate>Fri, 11 Oct 2024 07:09:28 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2314-1</guid>
        <source url="https://rebol.metaeducation.com/t/dimension-conversions-in-arturo/2314.rss">Dimension Conversions in Arturo</source>
      </item>
  </channel>
</rss>
