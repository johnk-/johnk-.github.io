<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</title>
    <link>https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799</link>
    <description>`~null~` isotopes are a novel solution shaped to solve a specific problem.  As a reminder of what the goal is...

# The Goal is to Please @rgchris *AND* Please me

NULL is the signal of &quot;soft failure&quot;.  It&#39;s a unique result reserved for when a branch fails, or when a loop is halted by a BREAK, when PARSE fails...etc.

Its property of not being storable in blocks makes it critical to disambiguating this historical problem:

    redbol&gt;&gt; third [a b #[none]]
    == #[none]

    redbol&gt;&gt; third [a b]
    == #[none]

In a language that prides itself on letting you work with code structure, *this is the tip of the iceberg of the problems that null solves*, and you will find the distinction&#39;s utility across the board (obviously, in tools like COMPOSE).  It facilitates rigorous analysis and rearrangements...without needing to drop to C or write convoluted code:

    &gt;&gt; third [a b _]
    == _

    &gt;&gt; third [a b]
    ; null

Hence NULL and VOID have taken the place of blank (&quot;none!&quot;) in many places.  *(See [BLANK! 2022, Revisiting the Datatype](https://forum.rebol.info/t/blank-2022-revisiting-the-datatype/1942) for a summary.)*

But unlike the elements in a block, a branch that evaluates isn&#39;t required to be non-NULL or non-VOID.  Which leads us to the long running question of what to bend these branches to so they don&#39;t conflate with the branch-not-taken result.

## Chris has (rightly) expressed concern

At times I&#39;ve said that it&#39;s not that big a deal that branches can&#39;t evaluate to NULL and get distorted.  &quot;You didn&#39;t have a NULL before, so why get so worked up about control constructs not returning it?&quot;

But the now-pervasive nature of NULL means it can&#39;t be avoided.  So:

*&quot;How do you express branching code which wants to do some work but also produce NULL as an evaluative product?&quot;*

Conflation was not a problem, e.g. in Rebol2:

    rebol2&gt;&gt; exampler: func [x] [
         print &quot;returning sample or none if not found&quot;
         case [
             x = &lt;string&gt; [print &quot;sample string&quot; {hello}]
             x = &lt;integer&gt; [print &quot;sample integer&quot; 3]
             x = &lt;none&gt; [print &quot;sample none&quot; none]
         ]
      ]

    rebol2&gt;&gt; exampler &lt;string&gt;
    returning sample or none if not found
    sample string
    == &quot;hello&quot;

    rebol2&gt;&gt; exampler &lt;blatz&gt;
    returning sample or none if not found
    == #[none]

    rebol2&gt;&gt; exampler &lt;none&gt;
    returning sample or none if not found
    sample none
    == #[none]

However NULL is now a basic currency of &quot;soft failure&quot;.  As such it would not be uncommon to be in the situation where a branching decision process would want to intentionally return NULL as part of the work it does.

Without a mechanism to address this, unpleasant convolutions would be needed, for instance surrounding anything that wanted to tunnel a NULL with a CATCH and THROW&#39;ing it:

    x: catch [
        throw switch 1 + 2 [
            1 [print &quot;one&quot; 1]
            2 [print &quot;two&quot;, &lt;two&gt;]
            3 [print &quot;three&quot;, throw null]
         ]
    ]

Definitely not good.  But regarding the pleasing-me-part, remember I am trying to avoid this situation:

    &gt;&gt; block [a b]

    &gt;&gt; case [
         true [
              print &quot;case branch&quot;
              item: third block
         ]
       ] else [
         print &quot;else branch&quot;
       ]

    case branch
    else branch  ; ugh

I don&#39;t want the CASE branch to evaluate to NULL just because some expression in the branch was incidentally NULL.  That would mean the ELSE tied to the CASE runs even though the code for the branch ran.

## Enter Isotopes

One thing a ~NULL~ WORD! isotope has in common with NULL is that neither can be put in blocks.  But they have been automatically &quot;decaying&quot; into regular NULL when stored into variables.

    &gt;&gt; ~null~
    == ~null~  ; isotope

    &gt;&gt; x: ~null~
    == ~null~  ; isotope  &lt;-- note the overall expression is still an isotope

    &gt;&gt; x
    ; null

The twist is that they are *different enough* from true NULL such that a THEN or an ELSE can consider them a situation where the branch did not run:

    &gt;&gt; if false [&lt;ignored&gt;]
    ; null

    &gt;&gt; if true [null]
    == ~null~  ; isotope

    &gt;&gt; if true [null] else [print &quot;This won&#39;t run&quot;]
    == ~null~  ; isotope

The reason functions like ELSE can &quot;see&quot; the isotope is that they don&#39;t take an ordinary parameter on their left.  They take a ^META argument.  These can see the distinction between a ~null~ isotope and a &quot;true&quot; NULL.

**I&#39;d largely say this has been working well...certainly better than its conceptual predecessors.**  It makes piping NULL out of branches trivially easy, when the fear of conflation is not a problem.

    &gt;&gt; x: switch 1 + 2 [
         1 [print &quot;one&quot; 1]
         2 [print &quot;two&quot;, &lt;two&gt;]
         3 [print &quot;three&quot;, null]
       ]
    three
    == ~null~

    &gt;&gt; x
    ; null

The automatic decay in variable storage prevents you from needing an explicit operation to turn ~null~ isotopes into pure nulls:

    &gt;&gt; x: decay switch 1 + 2 [
         1 [print &quot;one&quot; 1]
         2 [print &quot;two&quot;, &lt;two&gt;]
         3 [print &quot;three&quot;, null]
       ]
    three
    ; null

# But @rgchris Would Likely Want any *NORMAL* arg decay

At the very moment I am writing this, ~null~ isotopes are like all other BAD-WORD! isotopes and not accepted as normal parameters.

**They *could* decay to pure NULL for all normal args.**  But let me explain a bummer of what we lose in that bargain.

It takes away a safety idea I had with functions like MATCH.

    &gt;&gt; match [&lt;opt&gt; integer!] 3
    == 3

    &gt;&gt; match [&lt;opt&gt; integer!] &quot;notaninteger&quot;
    ; null

    &gt;&gt; match [&lt;opt&gt; integer!] null
    == ~null~  ; isotope

The idea was that it could say &quot;yes, this matched&quot; but if ~null~ isotopes were tested, they&#39;d give an error:

    &gt;&gt; if (match [&lt;opt&gt; integer!] null) [print &quot;Yes it matched!&quot;]
    ** Error: IF does not accept ~null~ isotopes without a ^META condition

Were MATCH to have passed through a plain NULL it would have succeeded in the match but not run the branch.  So it&#39;s nice to get the warning on the isotope.

**Or it could just return a ~matched~ isotope**.  But this loses the following nice isotopic property:

    &gt;&gt; x: match [&lt;opt&gt; integer!] null else [fail &quot;NO MATCH&quot;]
    == ~null~  ; isotope

    &gt;&gt; x
    ; null

In fact I instituted other decaying variants for ~blank~ and ~false~

    &gt;&gt; y: match [blank!] _ else [fail &quot;NO MATCH!&quot;]
    == ~blank~  ; isotope

    &gt;&gt; y
    == _

    &gt;&gt; z: match [logic!] 1 = 2 else [fail &quot;NO MATCH!&quot;]
    == ~false~  ; isotope

    &gt;&gt; z
    == #[false]

# So What To Do About MATCH and its bretheren?

Seems the options are:

1. *Don&#39;t worry about it.*  If you write **match [logic!] 1 = 2** you get back **#[false]** and should you write an expression like **if (match [logic!] 1 = 2) [print &quot;Match!]** you get what you deserve.

2. *Use a different isotope.*  Let&#39;s say that **`match [&lt;opt&gt;] null`** is simply **~matched~ (isotope)**.  It wouldn&#39;t have the decaying property, but would have the invalidness property.

3. *Have a MATCH/FALSEY variant.*  Let plain **match** on a falsey thing trigger an error and if you write **if match/falsey ...** then you clearly do know what you&#39;re doing so it becomes like case (1).

4. *Make all conditional arguments take ^META arguments for their conditions.*  This would put the responsibility for checking for isotopes on them, and they&#39;d uniquely disallow them before UNMETA&#39;ing them and then testing for truth/falsehood.

Option (4) is too taxing...impacting not just the interface to IF but the implementation of CASE and any conditional construct.

**I think I like (3) because it punts the ball down the road a bit.**

But this might still not suit Chris.

# Should Non-Meta Arguments Decay Null isotopes?

The &quot;auto-decay&quot; of ~null~ isotopes means no variable can ever hold a NULL isotope.  And there&#39;s also a rule that no *normal* parameter can ever be passed an isotope, only ^META parameters.

In the beginning, it seemed useful if normal arguments would automatically decay null isotopes:

    &gt;&gt; foo: func [x] [if null? x [print &quot;Yup, it&#39;s null&quot;]]

    &gt;&gt; foo if true [null]
    Yup it&#39;s null

    &gt;&gt; metafoo: func [^x] [
        case [
            null? x [print &quot;regular null&quot;]
            x = &#39;~null~ [print &quot;null isotope&quot;]
            true [print &quot;something else&quot;]
         ]
       ]

    &gt;&gt; metafoo if false [null]
    regular null

    &gt;&gt; metafoo if true [null]
    null isotope

There is a manual DECAY operator which could be used, but would not meet that wish:

    &gt;&gt; ~null~
    == ~null~  ; isotope

    &gt;&gt; decay ~null~
    ; null

    &gt;&gt; ~blank~
    == ~blank~  ; isotope

    &gt;&gt; decay ~blank~
    == _

    &gt;&gt; ~false~
    == ~false~  ; isotope

    &gt;&gt; decay ~false~
    == #[false]

# Should DECAY Conflation Be A Customization?

Another avenue of satisfaction could be to say that you simply customize your environment with some definitions to make auto-decaying constructs:

    switch: chain [:switch | :decay]
    case: chain [:case | :decay]
    ...

    &gt;&gt; case [true [null]]
    ; null

    &gt;&gt; case [false [10]]
    ; null


I don&#39;t like it, but if someone isn&#39;t going to use ELSE (or is willing to accept this very easily unintentional conflation if they do) it could be an option.

**I really do believe the ability to tell from outside the construct if a branch has been taken is an interesting property, which even those who think they won&#39;t use ELSE or THEN can leverage, especially when building constructs atop each other.**  But this isn&#39;t something that can be appreciated without usage, or trying to write something like UPARSE generically in usermode.

# Should function RETURN decay by default?

Continuing along these lines, this has to do with the pattern of:

    foo: func [x] [
        return switch x [
             1 [print &quot;one&quot;, #one]
             2 [print &quot;two&quot;, null]
             3 [print &quot;three&quot;, &lt;three&gt;]
        ]
    ]

    &gt;&gt; foo 1 + 2
    two
    == ???   ; should this be ~null~ isotope or just NULL

Also, should it matter whether there&#39;s a RETURN there or not?  Is this something the type spec should distinguish?

Right now there&#39;s a refinement called /ISOTOPE on RETURN which asks it not to decay.

**If all non-^META parameters decay by default, then it seems isotopic decay is the right default for RETURN even though it takes a ^META parameter and returns non-decaying isotopes.**

## As Always, A Lot To Think About

Want to get this posted because it&#39;s preventing me from making new drafts (Discourse won&#39;t let you have multiple top-level post drafts in-flight for some reason).

Will keep mulling it all over.

*&quot;A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away.&quot;*</description>
    
    <lastBuildDate>Mon, 29 Aug 2022 16:57:34 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="4" data-topic="1799">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>one less case to worry about.</p>
</blockquote>
</aside>
<p>I think we can get all the same errors for catching people who don't know what they're doing... but without the isotopic runaround:</p>
<p><em><strong>Just say MATCH doesn't match NULL at all (have it error on null input)...but then make it follow the VOID-in-NULL-outconvention.</strong></em></p>
<p>So if you want a NULL =&gt; NULL conflation, then instead of writing this:</p>
<pre><code>match [&lt;opt&gt; integer! text!] var-might-be-null
</code></pre>
<p>You write this:</p>
<pre><code>match [integer! text!] maybe var-might-be-null
</code></pre>
<p>On the other hand, if you are doing something like an <strong><code>if match</code></strong> where all you want to know is if it was in the set, you can reify it and test on blank:</p>
<pre><code> if match [blank! integer! text!] reify var-might-be-null [...]
</code></pre>
<p><em>With blank being truthy, that gets you the answer you want.</em></p>
          <p><a href="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/7</link>
        <pubDate>Mon, 29 Aug 2022 15:56:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1799-7</guid>
        <source url="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799.rss">Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</source>
      </item>
      <item>
        <title>Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="https://forum.rebol.info/t/blank-2022-revisiting-the-datatype/1942/2">BLANK! 2022: Revisiting The Datatype</a></p>
          <p><a href="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/6</link>
        <pubDate>Thu, 25 Aug 2022 17:36:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1799-6</guid>
        <source url="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799.rss">Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</source>
      </item>
      <item>
        <title>Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Yup, good point.</p>
<p>Changing DEFAULT to not consider BLANK! is an obvious enough improvement to go ahead and do it--the truthy/falsey status notwithstanding.</p>
          <p><a href="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/5</link>
        <pubDate>Thu, 25 Aug 2022 16:08:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1799-5</guid>
        <source url="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799.rss">Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</source>
      </item>
      <item>
        <title>Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>... and if blank! becomes truthy as per your other post there’s one less case to worry about.</p>
          <p><a href="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/4</link>
        <pubDate>Thu, 25 Aug 2022 15:53:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1799-4</guid>
        <source url="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799.rss">Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</source>
      </item>
      <item>
        <title>Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1799">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>So What To Do About MATCH and its bretheren?</strong></p>
<p>Seems the options are:</p>
<ol>
<li>
<em>Don't worry about it.</em> If you write <strong>match [logic!] 1 = 2</strong> you get back <strong>#[false]</strong> and should you write an expression like <strong>if (match [logic!] 1 = 2) [print "Match!]</strong> you get what you deserve.</li>
<li>
<em>Use a different isotope.</em> Let's say that <strong><code>match [&lt;opt&gt;] null</code></strong> is simply <strong>~matched~ (isotope)</strong>. It wouldn't have the decaying property, but would have the invalidness property.</li>
<li>
<em>Have a MATCH/FALSEY variant.</em> Let plain <strong>match</strong> on a falsey thing trigger an error and if you write <strong>if match/falsey ...</strong> then you clearly do know what you're doing so it becomes like case (1).</li>
<li>
<em>Make all conditional arguments take ^META arguments for their conditions.</em> This would put the responsibility for checking for isotopes on them, and they'd uniquely disallow them before UNMETA'ing them and then testing for truth/falsehood.</li>
</ol>
</blockquote>
</aside>
<h2>Option 5. <a href="https://forum.rebol.info/t/dropping-find-while-if-unless-select-etc/498/2">Adjust <code>(DID ...)</code> as isotope-tolerant <code>(NOT NULL? ...)</code></a>
</h2>
<p>Another answer...</p>
<p>If you find yourself in a situation where isotopes are giving you a problem, switch to <strong>did match</strong> (or decay match, if you're trying to get the value and not test it as a condition)</p>
<p><em>I wouldn't reach for this by default.</em>  You're fine most of the time... if your MATCH doesn't contain <code>[&lt;opt&gt; logic! blank!]</code>.  It's only these quirky edge cases where it's better to let the isotopes give you a localized and clear error than wind up on a wild goose chase for why the program is acting strangely.</p>
<p>Beginners might be cautious and write things like <strong>did match</strong> or <strong>did parse</strong> all over the place, if they're scared of missing a case.  But there's no need to write <strong>if did match integer! value</strong>, because you're testing for a value that can't possibly be false...it's an integer! or null.  Experts would use it sparingly, in cases like <strong>if match typeset value</strong>, in case the typeset gets expanded into things including falsey values, when you're not fully cognizant of that happening.</p>
<p>This broadens the service of DID across the board, to do what it was originally intended to do: transform functions that return non-LOGIC! values and NULL as soft failure to give logic results.  It can handle historical edge cases with an elegant touch, without burdening code that knows itself well enough to not hit those cases.  I'm quite pleased with it!  <img src="https://forum.rebol.info/images/emoji/twitter/man_dancing.png?v=9" title=":man_dancing:" class="emoji" alt=":man_dancing:"></p>
          <p><a href="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/3</link>
        <pubDate>Sun, 15 May 2022 08:44:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1799-3</guid>
        <source url="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799.rss">Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</source>
      </item>
      <item>
        <title>Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Great refresher and summary of the issues.</p>
          <p><a href="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/2</link>
        <pubDate>Thu, 07 Apr 2022 11:58:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1799-2</guid>
        <source url="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799.rss">Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</source>
      </item>
      <item>
        <title>Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><code>~null~</code> isotopes are a novel solution shaped to solve a specific problem.  As a reminder of what the goal is...</p>
<h1>The Goal is to Please <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> <em>AND</em> Please me</h1>
<p>NULL is the signal of "soft failure".  It's a unique result reserved for when a branch fails, or when a loop is halted by a BREAK, when PARSE fails...etc.</p>
<p>Its property of not being storable in blocks makes it critical to disambiguating this historical problem:</p>
<pre><code>redbol&gt;&gt; third [a b #[none]]
== #[none]

redbol&gt;&gt; third [a b]
== #[none]
</code></pre>
<p>In a language that prides itself on letting you work with code structure, <em>this is the tip of the iceberg of the problems that null solves</em>, and you will find the distinction's utility across the board (obviously, in tools like COMPOSE).  It facilitates rigorous analysis and rearrangements...without needing to drop to C or write convoluted code:</p>
<pre><code>&gt;&gt; third [a b _]
== _

&gt;&gt; third [a b]
; null
</code></pre>
<p>Hence NULL and VOID have taken the place of blank ("none!") in many places.  <em>(See <a href="https://forum.rebol.info/t/blank-2022-revisiting-the-datatype/1942">BLANK! 2022, Revisiting the Datatype</a> for a summary.)</em></p>
<p>But unlike the elements in a block, a branch that evaluates isn't required to be non-NULL or non-VOID.  Which leads us to the long running question of what to bend these branches to so they don't conflate with the branch-not-taken result.</p>
<h2>Chris has (rightly) expressed concern</h2>
<p>At times I've said that it's not that big a deal that branches can't evaluate to NULL and get distorted.  "You didn't have a NULL before, so why get so worked up about control constructs not returning it?"</p>
<p>But the now-pervasive nature of NULL means it can't be avoided.  So:</p>
<p><em>"How do you express branching code which wants to do some work but also produce NULL as an evaluative product?"</em></p>
<p>Conflation was not a problem, e.g. in Rebol2:</p>
<pre><code>rebol2&gt;&gt; exampler: func [x] [
     print "returning sample or none if not found"
     case [
         x = &lt;string&gt; [print "sample string" {hello}]
         x = &lt;integer&gt; [print "sample integer" 3]
         x = &lt;none&gt; [print "sample none" none]
     ]
  ]

rebol2&gt;&gt; exampler &lt;string&gt;
returning sample or none if not found
sample string
== "hello"

rebol2&gt;&gt; exampler &lt;blatz&gt;
returning sample or none if not found
== #[none]

rebol2&gt;&gt; exampler &lt;none&gt;
returning sample or none if not found
sample none
== #[none]
</code></pre>
<p>However NULL is now a basic currency of "soft failure".  As such it would not be uncommon to be in the situation where a branching decision process would want to intentionally return NULL as part of the work it does.</p>
<p>Without a mechanism to address this, unpleasant convolutions would be needed, for instance surrounding anything that wanted to tunnel a NULL with a CATCH and THROW'ing it:</p>
<pre><code>x: catch [
    throw switch 1 + 2 [
        1 [print "one" 1]
        2 [print "two", &lt;two&gt;]
        3 [print "three", throw null]
     ]
]
</code></pre>
<p>Definitely not good.  But regarding the pleasing-me-part, remember I am trying to avoid this situation:</p>
<pre><code>&gt;&gt; block [a b]

&gt;&gt; case [
     true [
          print "case branch"
          item: third block
     ]
   ] else [
     print "else branch"
   ]

case branch
else branch  ; ugh
</code></pre>
<p>I don't want the CASE branch to evaluate to NULL just because some expression in the branch was incidentally NULL.  That would mean the ELSE tied to the CASE runs even though the code for the branch ran.</p>
<h2>Enter Isotopes</h2>
<p>One thing a ~NULL~ WORD! isotope has in common with NULL is that neither can be put in blocks.  But they have been automatically "decaying" into regular NULL when stored into variables.</p>
<pre><code>&gt;&gt; ~null~
== ~null~  ; isotope

&gt;&gt; x: ~null~
== ~null~  ; isotope  &lt;-- note the overall expression is still an isotope

&gt;&gt; x
; null
</code></pre>
<p>The twist is that they are <em>different enough</em> from true NULL such that a THEN or an ELSE can consider them a situation where the branch did not run:</p>
<pre><code>&gt;&gt; if false [&lt;ignored&gt;]
; null

&gt;&gt; if true [null]
== ~null~  ; isotope

&gt;&gt; if true [null] else [print "This won't run"]
== ~null~  ; isotope
</code></pre>
<p>The reason functions like ELSE can "see" the isotope is that they don't take an ordinary parameter on their left.  They take a ^META argument.  These can see the distinction between a ~null~ isotope and a "true" NULL.</p>
<p><strong>I'd largely say this has been working well...certainly better than its conceptual predecessors.</strong>  It makes piping NULL out of branches trivially easy, when the fear of conflation is not a problem.</p>
<pre><code>&gt;&gt; x: switch 1 + 2 [
     1 [print "one" 1]
     2 [print "two", &lt;two&gt;]
     3 [print "three", null]
   ]
three
== ~null~

&gt;&gt; x
; null
</code></pre>
<p>The automatic decay in variable storage prevents you from needing an explicit operation to turn ~null~ isotopes into pure nulls:</p>
<pre><code>&gt;&gt; x: decay switch 1 + 2 [
     1 [print "one" 1]
     2 [print "two", &lt;two&gt;]
     3 [print "three", null]
   ]
three
; null
</code></pre>
<h1>But <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> Would Likely Want any <em>NORMAL</em> arg decay</h1>
<p>At the very moment I am writing this, ~null~ isotopes are like all other BAD-WORD! isotopes and not accepted as normal parameters.</p>
<p><strong>They <em>could</em> decay to pure NULL for all normal args.</strong>  But let me explain a bummer of what we lose in that bargain.</p>
<p>It takes away a safety idea I had with functions like MATCH.</p>
<pre><code>&gt;&gt; match [&lt;opt&gt; integer!] 3
== 3

&gt;&gt; match [&lt;opt&gt; integer!] "notaninteger"
; null

&gt;&gt; match [&lt;opt&gt; integer!] null
== ~null~  ; isotope
</code></pre>
<p>The idea was that it could say "yes, this matched" but if ~null~ isotopes were tested, they'd give an error:</p>
<pre><code>&gt;&gt; if (match [&lt;opt&gt; integer!] null) [print "Yes it matched!"]
** Error: IF does not accept ~null~ isotopes without a ^META condition
</code></pre>
<p>Were MATCH to have passed through a plain NULL it would have succeeded in the match but not run the branch.  So it's nice to get the warning on the isotope.</p>
<p><strong>Or it could just return a ~matched~ isotope</strong>.  But this loses the following nice isotopic property:</p>
<pre><code>&gt;&gt; x: match [&lt;opt&gt; integer!] null else [fail "NO MATCH"]
== ~null~  ; isotope

&gt;&gt; x
; null
</code></pre>
<p>In fact I instituted other decaying variants for ~blank~ and ~false~</p>
<pre><code>&gt;&gt; y: match [blank!] _ else [fail "NO MATCH!"]
== ~blank~  ; isotope

&gt;&gt; y
== _

&gt;&gt; z: match [logic!] 1 = 2 else [fail "NO MATCH!"]
== ~false~  ; isotope

&gt;&gt; z
== #[false]
</code></pre>
<h1>So What To Do About MATCH and its bretheren?</h1>
<p>Seems the options are:</p>
<ol>
<li>
<p><em>Don't worry about it.</em>  If you write <strong>match [logic!] 1 = 2</strong> you get back <strong>#[false]</strong> and should you write an expression like <strong>if (match [logic!] 1 = 2) [print "Match!]</strong> you get what you deserve.</p>
</li>
<li>
<p><em>Use a different isotope.</em>  Let's say that <strong><code>match [&lt;opt&gt;] null</code></strong> is simply <strong>~matched~ (isotope)</strong>.  It wouldn't have the decaying property, but would have the invalidness property.</p>
</li>
<li>
<p><em>Have a MATCH/FALSEY variant.</em>  Let plain <strong>match</strong> on a falsey thing trigger an error and if you write <strong>if match/falsey ...</strong> then you clearly do know what you're doing so it becomes like case (1).</p>
</li>
<li>
<p><em>Make all conditional arguments take ^META arguments for their conditions.</em>  This would put the responsibility for checking for isotopes on them, and they'd uniquely disallow them before UNMETA'ing them and then testing for truth/falsehood.</p>
</li>
</ol>
<p>Option (4) is too taxing...impacting not just the interface to IF but the implementation of CASE and any conditional construct.</p>
<p><strong>I think I like (3) because it punts the ball down the road a bit.</strong></p>
<p>But this might still not suit Chris.</p>
<h1>Should Non-Meta Arguments Decay Null isotopes?</h1>
<p>The "auto-decay" of ~null~ isotopes means no variable can ever hold a NULL isotope.  And there's also a rule that no <em>normal</em> parameter can ever be passed an isotope, only ^META parameters.</p>
<p>In the beginning, it seemed useful if normal arguments would automatically decay null isotopes:</p>
<pre><code>&gt;&gt; foo: func [x] [if null? x [print "Yup, it's null"]]

&gt;&gt; foo if true [null]
Yup it's null

&gt;&gt; metafoo: func [^x] [
    case [
        null? x [print "regular null"]
        x = '~null~ [print "null isotope"]
        true [print "something else"]
     ]
   ]

&gt;&gt; metafoo if false [null]
regular null

&gt;&gt; metafoo if true [null]
null isotope
</code></pre>
<p>There is a manual DECAY operator which could be used, but would not meet that wish:</p>
<pre><code>&gt;&gt; ~null~
== ~null~  ; isotope

&gt;&gt; decay ~null~
; null

&gt;&gt; ~blank~
== ~blank~  ; isotope

&gt;&gt; decay ~blank~
== _

&gt;&gt; ~false~
== ~false~  ; isotope

&gt;&gt; decay ~false~
== #[false]
</code></pre>
<h1>Should DECAY Conflation Be A Customization?</h1>
<p>Another avenue of satisfaction could be to say that you simply customize your environment with some definitions to make auto-decaying constructs:</p>
<pre><code>switch: chain [:switch | :decay]
case: chain [:case | :decay]
...

&gt;&gt; case [true [null]]
; null

&gt;&gt; case [false [10]]
; null
</code></pre>
<p>I don't like it, but if someone isn't going to use ELSE (or is willing to accept this very easily unintentional conflation if they do) it could be an option.</p>
<p><strong>I really do believe the ability to tell from outside the construct if a branch has been taken is an interesting property, which even those who think they won't use ELSE or THEN can leverage, especially when building constructs atop each other.</strong>  But this isn't something that can be appreciated without usage, or trying to write something like UPARSE generically in usermode.</p>
<h1>Should function RETURN decay by default?</h1>
<p>Continuing along these lines, this has to do with the pattern of:</p>
<pre><code>foo: func [x] [
    return switch x [
         1 [print "one", #one]
         2 [print "two", null]
         3 [print "three", &lt;three&gt;]
    ]
]

&gt;&gt; foo 1 + 2
two
== ???   ; should this be ~null~ isotope or just NULL
</code></pre>
<p>Also, should it matter whether there's a RETURN there or not?  Is this something the type spec should distinguish?</p>
<p>Right now there's a refinement called /ISOTOPE on RETURN which asks it not to decay.</p>
<p><strong>If all non-^META parameters decay by default, then it seems isotopic decay is the right default for RETURN even though it takes a ^META parameter and returns non-decaying isotopes.</strong></p>
<h2>As Always, A Lot To Think About</h2>
<p>Want to get this posted because it's preventing me from making new drafts (Discourse won't let you have multiple top-level post drafts in-flight for some reason).</p>
<p>Will keep mulling it all over.</p>
<p><em>"A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away."</em></p>
          <p><a href="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/1</link>
        <pubDate>Thu, 07 Apr 2022 04:14:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1799-1</guid>
        <source url="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799.rss">Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</source>
      </item>
  </channel>
</rss>
