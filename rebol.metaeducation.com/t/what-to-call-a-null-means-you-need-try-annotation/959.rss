<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What to Call a &quot;NULL means you need TRY&quot; Annotation?</title>
    <link>https://forum.rebol.info/t/what-to-call-a-null-means-you-need-try-annotation/959</link>
    <description>With the old policy known as &quot;BLANK-in, NULL-out&quot;, it was desirable to keep you from having to manually write this pattern:

    something: function [arg [blank! file!]] [
         if blank? arg [return null]
         ...  ; actual code
    ]

So an annotation with this behavior was needed.  What to call it?

   *  `&lt;nullifies&gt;`

   *  `&lt;revokes&gt;`

   *  `&lt;retracts&gt;`

   * If it were Zen it could be `&lt;unask&gt;` or `&lt;mu&gt;` (or **`&lt;无&gt;`**) for &quot;unasking a question&quot;.  

Because something had to be picked, the suboptimal choice of **`&lt;blank&gt;`** has been used for the past 3 years:

    something: function [arg [&lt;blank&gt; file!]] [
         ...  ; actual code
    ]

It did the job, though it would leave anyone unfamiliar scratching their head about what the difference between **`blank!`** and **`&lt;blank&gt;`** was.

## Now It&#39;s [&quot;NULL in...NULL out&quot; (but the call needs TRY)](https://forum.rebol.info/t/definitional-errors-as-blank-in-null-out-alternative/1880)

This is about as exciting a change as we get around here--and frees BLANK! up for more interesting dialecting without getting entangled in this.

What you want to save time writing is now:

    something: function [arg [&lt;opt&gt; file!]] [
         if null? arg [return raise make error! [id: &#39;try-if-null-meant]]
         ...  ; actual code
    ]

&lt;sub&gt;*(Let&#39;s put aside that `&lt;opt&gt;` should probably be `&lt;null&gt;`.)*&lt;/sub&gt;

One fairly obvious-seeming name for the annotation would be **`&lt;try&gt;`**.

    something: function [arg [&lt;try&gt; file!]] [
         ...  ; actual code
    ]

It&#39;s a little bit weird, because it&#39;s saying &quot;if someone passes a NULL to to ARG, they&#39;re going to have to use TRY SOMETHING&quot;

Although it&#39;s a weird connection, it definitely makes the connection.  So I&#39;m going to go with it.

## Efficiency Note: The Function Isn&#39;t Called At All

Something to know about this trick is that it actually is good for performance.  The function is bypassed completely--it typechecks the arguments but then the frame is discarded!</description>
    
    <lastBuildDate>Thu, 13 Dec 2018 22:40:31 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/what-to-call-a-null-means-you-need-try-annotation/959.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What to Call a &quot;NULL means you need TRY&quot; Annotation?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>No objection here. Seems fine but I'll reserve judgment for those like <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> who are busy absorbing and applying these new conventions.</p>
          <p><a href="https://forum.rebol.info/t/what-to-call-a-null-means-you-need-try-annotation/959/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-a-null-means-you-need-try-annotation/959/2</link>
        <pubDate>Thu, 13 Dec 2018 15:16:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-959-2</guid>
        <source url="https://forum.rebol.info/t/what-to-call-a-null-means-you-need-try-annotation/959.rss">What to Call a &quot;NULL means you need TRY&quot; Annotation?</source>
      </item>
      <item>
        <title>What to Call a &quot;NULL means you need TRY&quot; Annotation?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With the old policy known as "BLANK-in, NULL-out", it was desirable to keep you from having to manually write this pattern:</p>
<pre><code>something: function [arg [blank! file!]] [
     if blank? arg [return null]
     ...  ; actual code
]
</code></pre>
<p>So an annotation with this behavior was needed.  What to call it?</p>
<ul>
<li>
<p><code>&lt;nullifies&gt;</code></p>
</li>
<li>
<p><code>&lt;revokes&gt;</code></p>
</li>
<li>
<p><code>&lt;retracts&gt;</code></p>
</li>
<li>
<p>If it were Zen it could be <code>&lt;unask&gt;</code> or <code>&lt;mu&gt;</code> (or <strong><code>&lt;无&gt;</code></strong>) for "unasking a question".</p>
</li>
</ul>
<p>Because something had to be picked, the suboptimal choice of <strong><code>&lt;blank&gt;</code></strong> has been used for the past 3 years:</p>
<pre><code>something: function [arg [&lt;blank&gt; file!]] [
     ...  ; actual code
]
</code></pre>
<p>It did the job, though it would leave anyone unfamiliar scratching their head about what the difference between <strong><code>blank!</code></strong> and <strong><code>&lt;blank&gt;</code></strong> was.</p>
<h2>Now It's <a href="https://forum.rebol.info/t/definitional-errors-as-blank-in-null-out-alternative/1880">"NULL in...NULL out" (but the call needs TRY)</a>
</h2>
<p>This is about as exciting a change as we get around here--and frees BLANK! up for more interesting dialecting without getting entangled in this.</p>
<p>What you want to save time writing is now:</p>
<pre><code>something: function [arg [&lt;opt&gt; file!]] [
     if null? arg [return raise make error! [id: 'try-if-null-meant]]
     ...  ; actual code
]
</code></pre>
<p><sub><em>(Let's put aside that <code>&lt;opt&gt;</code> should probably be <code>&lt;null&gt;</code>.)</em></sub></p>
<p>One fairly obvious-seeming name for the annotation would be <strong><code>&lt;try&gt;</code></strong>.</p>
<pre><code>something: function [arg [&lt;try&gt; file!]] [
     ...  ; actual code
]
</code></pre>
<p>It's a little bit weird, because it's saying "if someone passes a NULL to to ARG, they're going to have to use TRY SOMETHING"</p>
<p>Although it's a weird connection, it definitely makes the connection.  So I'm going to go with it.</p>
<h2>Efficiency Note: The Function Isn't Called At All</h2>
<p>Something to know about this trick is that it actually is good for performance.  The function is bypassed completely--it typechecks the arguments but then the frame is discarded!</p>
          <p><a href="https://forum.rebol.info/t/what-to-call-a-null-means-you-need-try-annotation/959/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-a-null-means-you-need-try-annotation/959/1</link>
        <pubDate>Thu, 13 Dec 2018 04:11:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-959-1</guid>
        <source url="https://forum.rebol.info/t/what-to-call-a-null-means-you-need-try-annotation/959.rss">What to Call a &quot;NULL means you need TRY&quot; Annotation?</source>
      </item>
  </channel>
</rss>
