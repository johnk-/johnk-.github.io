<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Isotopic WORD!s For More Informative States in TLS</title>
    <link>https://rebol.metaeducation.com/t/isotopic-word-s-for-more-informative-states-in-tls/1933</link>
    <description>When introducing isotopic WORD!s, I wrote:

[quote=&quot;hostilefork, post:1, topic:1383&quot;]
Since these can be used as a kind of deferred error--a bad result that&#39;s only there to be bad if you actually use it--the text in these words could help guide you to what happened.
[/quote]

Today I hit a good example.  I was going over some stuff in the TLS code, and found this:

    ; Each encrypted message in TLS 1.1 and above carry a plaintext
    ; initialization vector, so the ctx does not use one for the whole
    ; session.  Unset it to make sure.
    ;
    unset in ctx &#39;client-iv
    unset in ctx &#39;server-iv

So in TLS 1.0 mode, there is a single &quot;iv&quot; (initialization vector) reused for the client and server over the whole session.  But you don&#39;t want to use those fields in TLS 1.1 and above, because you&#39;re supposed to be using the data from each message.

The historical trick to catch unwanted reads of these fields was to unset them.

  * It was awkward to do so...since UNSET!s couldn&#39;t be assigned via SET-WORD!

  * Also, it didn&#39;t communicate any information besides &quot;unset&quot;

Today, you can painlessly get the effect...with a more meaningful error on access!

    ctx.client-iv: ctx.server-iv: ~per-message~

So if you get an error on trying to access these variables, it will tell you its the isotopic WORD! of **~per-message~**.  You can look that up in the source or get the gist of what it means.

*(I&#39;m still thinking about how we might put the file and line number into the value itself, so you could find this assignment and get at the origin of the value!)*

Using isotopes effectively is a lot of bang for the buck.  Neat stuff!</description>
    
    <lastBuildDate>Sat, 20 Aug 2022 08:34:04 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://rebol.metaeducation.com/t/isotopic-word-s-for-more-informative-states-in-tls/1933.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Isotopic WORD!s For More Informative States in TLS</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When introducing isotopic WORD!s, I wrote:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1383">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/1383/1">On another topic</a></div>
<blockquote>
<p>Since these can be used as a kind of deferred error--a bad result that's only there to be bad if you actually use it--the text in these words could help guide you to what happened.</p>
</blockquote>
</aside>
<p>Today I hit a good example.  I was going over some stuff in the TLS code, and found this:</p>
<pre><code>; Each encrypted message in TLS 1.1 and above carry a plaintext
; initialization vector, so the ctx does not use one for the whole
; session.  Unset it to make sure.
;
unset in ctx 'client-iv
unset in ctx 'server-iv
</code></pre>
<p>So in TLS 1.0 mode, there is a single "iv" (initialization vector) reused for the client and server over the whole session.  But you don't want to use those fields in TLS 1.1 and above, because you're supposed to be using the data from each message.</p>
<p>The historical trick to catch unwanted reads of these fields was to unset them.</p>
<ul>
<li>
<p>It was awkward to do so...since UNSET!s couldn't be assigned via SET-WORD!</p>
</li>
<li>
<p>Also, it didn't communicate any information besides "unset"</p>
</li>
</ul>
<p>Today, you can painlessly get the effect...with a more meaningful error on access!</p>
<pre><code>ctx.client-iv: ctx.server-iv: ~per-message~
</code></pre>
<p>So if you get an error on trying to access these variables, it will tell you its the isotopic WORD! of <strong>~per-message~</strong>.  You can look that up in the source or get the gist of what it means.</p>
<p><em>(I'm still thinking about how we might put the file and line number into the value itself, so you could find this assignment and get at the origin of the value!)</em></p>
<p>Using isotopes effectively is a lot of bang for the buck.  Neat stuff!</p>
          <p><a href="https://rebol.metaeducation.com/t/isotopic-word-s-for-more-informative-states-in-tls/1933/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/isotopic-word-s-for-more-informative-states-in-tls/1933/1</link>
        <pubDate>Sun, 15 Aug 2021 12:44:17 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1933-1</guid>
        <source url="https://rebol.metaeducation.com/t/isotopic-word-s-for-more-informative-states-in-tls/1933.rss">Isotopic WORD!s For More Informative States in TLS</source>
      </item>
  </channel>
</rss>
