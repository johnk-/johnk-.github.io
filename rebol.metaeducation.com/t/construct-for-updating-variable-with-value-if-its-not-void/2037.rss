<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Construct For Updating Variable With Value (If It&#39;s Not Void)</title>
    <link>https://forum.rebol.info/t/construct-for-updating-variable-with-value-if-its-not-void/2037</link>
    <description>This is a construct that I think @gchiu originally suggested, which is kind of a reverse-DEFAULT.  A variable is optionally updated, but left as-is if the value you try to update to is void.

    &gt;&gt; x: &lt;a&gt;
    == &lt;a&gt;

    &gt;&gt; x: perhaps if false [&lt;b&gt;]
    == &lt;a&gt;

    &gt;&gt; x
    == &lt;a&gt;

    &gt;&gt; x: perhaps if true [&lt;c&gt;]
    == &lt;c&gt;

    &gt;&gt; x
    == &lt;c&gt;

An implementation of this would look something like:

    perhaps: enfixed func* [
        &quot;Set word or path to a default value if that value is a value&quot;
        return: [&lt;opt&gt; any-value!]
        &#39;target [set-word! set-path!]
            &quot;The word to which might be set&quot;
        optional [&lt;opt&gt; &lt;void&gt; any-value!]
            &quot;Value to assign only if it is not void&quot;
    ][
        if semiquoted? &#39;optional [
            ;
            ; DEFAULT requires a BLOCK!, PERHAPS does not.  Catch `x: perhaps [...]`
            ;
            fail &#39;optional [
                &quot;Literal&quot; type of :optional &quot;used w/PERHAPS, use () if intentional&quot;
            ]
        ]

        ; Note that right evaluates before left here:
        ; https://github.com/rebol/rebol-issues/issues/2275
        ;
        if null? :optional [return get/any target]
        return set target :optional
    ]

**It&#39;s a nice thing to have, but I&#39;m not sure what to call it.**  Once upon a time it was called MAYBE, before the term was taken for the purpose of converting nulls to voids (which I think is a good fit).

PERHAPS seems too indistinguishable from MAYBE, and I don&#39;t know there&#39;s any clear reasoning as to why it would be called that.

I think UPDATE was suggested:

     &gt;&gt; x: 10
     == 10

     &gt;&gt; x: update void
     == 10

    &gt;&gt; x 
    == 10

    &gt;&gt; x: update 20
    == 20

    &gt;&gt; x
    == 20

But I dunno about that either.  Ideas?</description>
    
    <lastBuildDate>Mon, 26 Jun 2023 00:38:43 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/construct-for-updating-variable-with-value-if-its-not-void/2037.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Construct For Updating Variable With Value (If It&#39;s Not Void)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This is a construct that I think <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a> originally suggested, which is kind of a reverse-DEFAULT.  A variable is optionally updated, but left as-is if the value you try to update to is void.</p>
<pre><code>&gt;&gt; x: &lt;a&gt;
== &lt;a&gt;

&gt;&gt; x: perhaps if false [&lt;b&gt;]
== &lt;a&gt;

&gt;&gt; x
== &lt;a&gt;

&gt;&gt; x: perhaps if true [&lt;c&gt;]
== &lt;c&gt;

&gt;&gt; x
== &lt;c&gt;
</code></pre>
<p>An implementation of this would look something like:</p>
<pre><code>perhaps: enfixed func* [
    "Set word or path to a default value if that value is a value"
    return: [&lt;opt&gt; any-value!]
    'target [set-word! set-path!]
        "The word to which might be set"
    optional [&lt;opt&gt; &lt;void&gt; any-value!]
        "Value to assign only if it is not void"
][
    if semiquoted? 'optional [
        ;
        ; DEFAULT requires a BLOCK!, PERHAPS does not.  Catch `x: perhaps [...]`
        ;
        fail 'optional [
            "Literal" type of :optional "used w/PERHAPS, use () if intentional"
        ]
    ]

    ; Note that right evaluates before left here:
    ; https://github.com/rebol/rebol-issues/issues/2275
    ;
    if null? :optional [return get/any target]
    return set target :optional
]
</code></pre>
<p><strong>It's a nice thing to have, but I'm not sure what to call it.</strong>  Once upon a time it was called MAYBE, before the term was taken for the purpose of converting nulls to voids (which I think is a good fit).</p>
<p>PERHAPS seems too indistinguishable from MAYBE, and I don't know there's any clear reasoning as to why it would be called that.</p>
<p>I think UPDATE was suggested:</p>
<pre><code> &gt;&gt; x: 10
 == 10

 &gt;&gt; x: update void
 == 10

&gt;&gt; x 
== 10

&gt;&gt; x: update 20
== 20

&gt;&gt; x
== 20
</code></pre>
<p>But I dunno about that either.  Ideas?</p>
          <p><a href="https://forum.rebol.info/t/construct-for-updating-variable-with-value-if-its-not-void/2037/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/construct-for-updating-variable-with-value-if-its-not-void/2037/1</link>
        <pubDate>Tue, 17 May 2022 03:39:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2037-1</guid>
        <source url="https://forum.rebol.info/t/construct-for-updating-variable-with-value-if-its-not-void/2037.rss">Construct For Updating Variable With Value (If It&#39;s Not Void)</source>
      </item>
      <item>
        <title>Construct For Updating Variable With Value (If It&#39;s Not Void)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2037">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>if semiquoted? 'optional [
    ;
    ; DEFAULT requires a BLOCK!, PERHAPS does not.  Catch `x: perhaps [...]`
    ;
    fail 'optional [
        "Literal" type of :optional "used w/PERHAPS, use () if intentional"
    ]
]
</code></pre>
</blockquote>
</aside>
<p>For anyone curious about what this is about, it pertains to the use of <a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-value-flag-unevaluated/912">VALUE_FLAG_UNEVALUATED</a>, which remains controversial in terms of how much it complicates the implementation vs. the value it provides.</p>
<p>PERHAPS is similar looking to DEFAULT, so similar that you <em>might</em> think it requires a BLOCK! on its right.  But while DEFAULT conditionally runs the code on the right, PERHAPS always runs it.  So a BLOCK! on the right as a literal would undermine it, as the PERHAPS would always do the assignment.</p>
<pre><code>&gt;&gt; x: null
&gt;&gt; x: default [1000 + 20]
&gt;&gt; x
== 1020

&gt;&gt; x: perhaps [case [1 &gt; 2 [&lt;nope&gt;] 3 &lt; 4 [&lt;yep&gt;]]
== [case [1 &gt; 2 [&lt;nope&gt;] 3 &lt; 4 [&lt;yep&gt;]]] // whoops
</code></pre>
<p>For this reason it put in a protection against literal uses.  That has really been helpful, because it's easy to get wrong.  I definitely do make that mistake, and I wrote PERHAPS--so I'm sure other people would.</p>
<p>Or is the better solve to make PERHAPS take a hard-quoted GROUP! and run it even though it doesn't <em>need</em> to?</p>
<pre><code>&gt;&gt; x: perhaps case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]]
** Error: PERHAPS only takes a GROUP!

&gt;&gt; x: perhaps (case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]])
&gt;&gt; x
== 10

&gt;&gt; code: [case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]]]
&gt;&gt; x: perhaps code // checking evaluated bit wouldn't error on this
** Error: PERHAPS only takes a GROUP!

&gt;&gt; code: [case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]]]
&gt;&gt; x: perhaps (code)
&gt;&gt; x
== [case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;nope&gt;]]]
</code></pre>
<p>That is actually safer.  But where does the protection stop?  What property of IF makes it not require a GROUP!, while PERHAPS does?  In this case, the argument might be that PERHAPS sure looks a lot like DEFAULT...and with it seeming to be in the same family, it's easy to screw up.</p>
<p>Put another way: <em>It's hard to say that PERHAPS doesn't need some kind of protection, and literally quoting its right hand side and expecting a GROUP! there is a way of accomplishing that.  But requiring a GROUP! where it's not necessary has the downside of interfering with COMPOSE operations when it doesn't have to.  Requiring a BLOCK! doesn't convey the "always executed, not conditionally executed" nature.  This makes checking the unevaluated bit an attractive compromise.</em></p>
          <p><a href="https://forum.rebol.info/t/construct-for-updating-variable-with-value-if-its-not-void/2037/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/construct-for-updating-variable-with-value-if-its-not-void/2037/2</link>
        <pubDate>Tue, 20 Nov 2018 08:23:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2037-2</guid>
        <source url="https://forum.rebol.info/t/construct-for-updating-variable-with-value-if-its-not-void/2037.rss">Construct For Updating Variable With Value (If It&#39;s Not Void)</source>
      </item>
  </channel>
</rss>
