<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why No-Argument Refinements Are BLACKHOLE! or NULL</title>
    <link>https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735</link>
    <description>In Rebol2, a refinement&#39;s value would be #[true] or #[none]:

    rebol2&gt;&gt; show-me: func [/bar] [print mold bar]

    rebol2&gt;&gt; show-me/bar
    true  ; actually LOGIC! #[true], not the WORD! true

    rebol2&gt;&gt; foo
    none  ; actually a NONE! value, not the WORD! none

*As a newbie, I was bothered by this from the get-go...* because I couldn&#39;t test refinements with AND/OR.  (they don&#39;t take #[none])  I hadn&#39;t drank the Kool-Aid that ANY/ALL were always a desirable substitute.

---

&gt; **NOTE: I never** drank the ANY/ALL supremacy Kool-Aid.  Of course there are a lot of cool uses for them as larger scale control structures--and it&#39;s important to know how to use them for streamlining program flow.  But for testing flags?  The ability to do it infix and without delimiters can read much better in many places.
&gt;
&gt; So Ren-C has adopted infix AND/OR that [operate conditionally on ANY-VALUE! and return LOGIC!](https://github.com/rebol/rebol-issues/issues/1879) *(they also short-circuit)*
&gt;
&gt;     ren-c&gt;&gt; flag1: flag2: true
&gt;
&gt;     ren-c&gt;&gt; if flag1 and flag2 [print &quot;It allows WORD!s, this comes up often&quot;]
&gt;     It allows WORD!s, this comes up often
&gt;
&gt;     ren-c&gt;&gt; if all [flag1 flag2] [print &quot;Not everyone loves this (e.g. not me)&quot;]
&gt;     Not everyone loves this (e.g. not me)
&gt;
&gt;     ren-c&gt;&gt; if (block? flag1) and (empty? flag1) [print &quot;Short-circuit avoids error&quot;]
&gt;     ; to do this, the second argument to AND/OR is quoted behind the scenes 

---

There were countless debates over whether refinements should just be LOGIC! (as in Red), or if a used refinement should be the WORD! of the refinement (maybe useful for chaining?).  For a time, it seemed murkier when Ren-C introduced NULL...although it all tied up rather nicely in the end!

**But, 2022 UPDATE:** I&#39;ve cleaned up a bunch of historical rambling of me talking to myself in this thread to pare it down to what&#39;s useful.

---

## Evolution Led Ren-C to [Refinements As Their Own Arguments](https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120)

* Multiple-refinement arguments were a fringe feature, used almost nowhere.  Primarily it just created an inconvenience for 1-argument refinements having to come up with some random name for the argument.

* With the existence of non-valued NULL, a single argument could represent the state of being used or not, along with the value itself.

    * The &quot;used&quot; state would be able to hold ANY-VALUE! that could be put in a block.

    * NULL became falsey--so just testing it with IF could cover most &quot;is the refinement used&quot; questions...with specific tests for NULL? when there was risk of conflation with BLANK! or FALSE!

* It simplified the evaluator logic--removing the &quot;refinements pick up every parameter after them&quot; semantic.

    * This paved the way for adding more arguments to functions after-the-fact, without worrying about them getting lumped in with the arguments of the existing last refinement.

## But What About Refinements That *Don&#39;t* Take Arguments?

This question malingered along longer than I would have liked it to.  :zombie: 

For some time it would give you back a WORD! that was the name of the refinement itself:

    old-renc&gt;&gt; show-me: func [/bar] [print mold bar]

    old-renc&gt;&gt; show-me/bar
    bar

    old-renc&gt;&gt; foo
    ; null

I&#39;d advocated for this idea very early on:

* Imagine if one function took `/only` and wrapped another function that also took an `/only`

* If the wrapper got its ONLY variable for the refinement as the WORD! `only`...

    * you could just say **`inner-function/(only)`**

      * If you got the refinement, that acts like **`inner-function/(&#39;only)`**

      * If you didn&#39;t get the refinement, that would act like **`inner-function/(null)`**

* If you squint your eyes and use your imagination a little, this might seem like a useful tool for chaining.

**But the feature was a victim of Ren-C&#39;s other successes.**  It&#39;s much easier and more efficient to wrap functions with things like ADAPT, ENCLOSE, SPECIALIZE.  The need to write this kind of &quot;tunneling&quot; function is rare: and refinement naming overlap is unlikely if the functions weren&#39;t somehow derived from each other.

*(It also made building FRAME!s at a low-level more annoying...the value you put in the frames had to be contingent on the refinement name.  And it forced path dispatch steps to permit NULLs, when it didn&#39;t allow it anywhere else.  More complexity, for little benefit.)*

## So Wouldn&#39;t LOGIC! For Argless Refinements be... *Logical?*

You might think so.  :robot:  But actually... *no*.

There are a number of technical reasons.  Yet an intuitive angle might be to consider how an argument-less refinement contrasts with a refinement that takes an actual LOGIC! argument.

    foo: func [/mutate [logic!]] [...]

This refinement can be NULL (unspecified--e.g. the refinement was not used at all), or #[true] or #[false] when it is specified.  There&#39;s three states.

But an argument-less refinement is really just &quot;used or unused&quot;.  So NULL and then a single truthy state... ideally a state that the system understands as meaning *&quot;I&#39;m opting in&quot;*.

## The Modern Day: [NULL or BLACKHOLE!](https://forum.rebol.info/t/sending-values-into-a-blackhole/1347)  `(#)`

While BLANK! has worked nicely as a falsey reified unit type, we&#39;ve been lacking a truthy unit type.

**But with the unification of issues and characters, the appealing truthy &quot;kind-of-a-unit-type&quot; of # exists.**  And its meaning of &quot;please opt-in&quot; is a good match for refinements.

* Space-wise fits in a single cell with no allocation, like BLANK!
* It&#39;s not a series so it&#39;s not mutable and has very few operations it responds to.
* It&#39;s one easily-visible character.
* And again, it is truthy.

### Simple To Set, Doesn&#39;t Depend on the Refinement Name

     &gt;&gt; f: make frame! :some-function
     
     &gt;&gt; f.argless-refinement: if x = y [#]  ; slot will be either null or #

First reflex might be to make a TO-BLACKHOLE or similar:

     &gt;&gt; f.argless-refinement: to-blackhole x = y

But I actually think the **`if condition [#]`** looks pretty nice.  It&#39;s unambiguous and you get the idea.  &quot;check this box, else leave it empty&quot;.  Short and obvious!

### Blackholes Are Fit For Purpose, and Aligns With Multi-Returns

Blackholes were first invented to help &quot;opt-in&quot; scenarios with multi returns, with patterns like:

    if multireturn-var [  ; request for additional work made
        set multireturn-var do-additional-work
    ]

The truthy nature of **`#`**, along with being a no-op with SET, made it easy to request the additional work be done while not needing to name a variable to store the output.

That&#39;s no longer needed in multi-return, because [it proxies variables for you automatically](https://forum.rebol.info/t/output-variables-in-multi-return/1859), so you don&#39;t need the overhead of SET.

But it&#39;s still a useful feature, and can come in handy with # produced by used refinements!

## Higher Level Functions Can Add Conveniences!

If you think it would be nice to be able to specify an argless refinement with a LOGIC!, guess what... you can!  *(Just not when building low-level frames...)*

Higher level functions like APPLY are happy to turn a LOGIC! into a NULL or # for you.

    &gt;&gt; apply :append [[a b c] [d e] /only 1 = 1]
    == [a b c [d e]]

SPECIALIZE doesn&#39;t do it at time of writing, but maybe it should...

    &gt;&gt; apo: specialize :append [only: 2 = 2]
    ** Script Error: Argless Refinement /only Must be either # or NULL

In any case, I just wanted to explain why an argless refinement to your function is going to be showing up as # or NULL, and that&#39;s more or less the final (?) answer.</description>
    
    <lastBuildDate>Sat, 16 Jul 2022 12:26:33 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why No-Argument Refinements Are BLACKHOLE! or NULL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="735">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>So Wouldn't LOGIC! For Argless Refinements be... <em>Logical?</em></strong></p>
<p>You might think so. <img src="https://forum.rebol.info/images/emoji/twitter/robot.png?v=9" title=":robot:" class="emoji" alt=":robot:"> But actually... <em>no</em>.</p>
<p>There are a number of technical reasons.</p>
</blockquote>
</aside>
<p>To go into a little detail on this...</p>
<p>Unlike in historical Rebol (which type-checked each argument as it went), <em>"Frame fulfillment" and "type checking" are two conceptually separate passes in Ren-C</em></p>
<p>You can ask a frame to be filled by the evaluator--even if the types are all wrong--and then do some adjustment that makes it valid before executing it.</p>
<p>Why is that useful?  Well, just look at this REFRAMER:</p>
<pre><code>intify: reframer func [f [frame!]] [
    for-each [key val] f [
        if val = &lt;one&gt; [f.(key): 1]
    ]
    do f
]

; ADD doesn't accept TAG!...

&gt;&gt; intify add &lt;one&gt; &lt;one&gt;
== 2

; but we were able to take a step to build up a frame for it...
; adjust it...
; and then run it!
</code></pre>
<p>When you look across the pieces of the process, it's clear some guarantee of a frame's canonization is needed.  So when it comes to a refinement-with-no-arg, you don't want some dispatches to the function saying NULL for no refinement use, and some saying #[false], and others using a blank!.  You <em>definitely</em> don't want it to just be some random WORD! or OBJECT!, that happened to be truthy!</p>
<p>But who's responsible for doing the canonization?</p>
<p><strong>I definitely don't want typechecking itself to modify frames.</strong>  That's a disaster.  By the time you get to typechecking, whoever built the frame needed to put it into canon form.  And it just errors if you didn't set up the frame right.</p>
<ul>
<li>
<p>But we don't want it to be a PITA to get that canon!</p>
</li>
<li>
<p>I think the <strong><code>if condition [#]</code></strong> is pretty jive.</p>
</li>
</ul>
<p><strong>When looking to make the mechanics as minimal as possible, a single simple rule is the only frame mutation that is done.</strong>  That is that any unset isotopes (<strong><code>~</code></strong>) that may be lingering from frame creation by MAKE FRAME! are turned into NULL.  They're an illegal parameter state, serving to represent unspecialized parameters (distinct from specializations to NULL).</p>
<p>If we appreciate that rule, then we can appreciate why it's good to put responsibility on the frame builder to load in a NULL vs. a <strong>#</strong>.  If we tried to force canonizing argless refinements to #[false] or true, <em>that would require sensitivity to the kind of argument.</em>  Avoiding that sensitivity is much cleaner--because you don't waste time and introduce complexity by needing to know if the parameter is an argless refinement or not.</p>
<p>So just one rule: ~unset~ isotopes become NULL on frame invocation.  Better than two or more rules...a simpler machine.  Make sense?  <img src="https://forum.rebol.info/images/emoji/twitter/man_teacher.png?v=9" title=":man_teacher:" class="emoji" alt=":man_teacher:"></p>
          <p><a href="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735/4</link>
        <pubDate>Wed, 04 Nov 2020 08:19:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-735-4</guid>
        <source url="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735.rss">Why No-Argument Refinements Are BLACKHOLE! or NULL</source>
      </item>
      <item>
        <title>Why No-Argument Refinements Are BLACKHOLE! or NULL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Note: Lifted this writeup out of another thread that otherwise is useless.)</em></p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="735">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<ul>
<li>With the existence of non-valued NULL, a single argument could represent the state of being used or not, along with the value itself.</li>
</ul>
</blockquote>
</aside>
<p>Note that Ren-C had undergone hard-fought battles to confront problems like:</p>
<pre><code>rebol2&gt;&gt; foo: func [/ref arg] [print ["ref:" mold ref "arg:" mold arg]]

rebol2&gt;&gt; foo
ref: none arg: none

rebol2&gt;&gt; foo/ref &lt;thing&gt;
ref: true arg: &lt;thing&gt;

rebol2&gt;&gt; foo/ref none
ref: true arg: none

rebol2&gt;&gt; condition: false
rebol2&gt;&gt; foo/ref if condition [&lt;thing&gt;]
ref: true arg: none
</code></pre>
<p>The above pattern made it hard for function authors to know if a refinement was in use.  If they tried to go by the <code>arg</code>, they could be ignoring an inconsistent meaning where the caller literally meant to specify a none.  The situation gets worse with multiple refinement arguments.</p>
<p><em>(Think about a case where you allow arbitrary values to be interleaved into a block with an /INTERLEAVE refinement, but no values will be inserted if the refinement is not intended.  NONE! is one of the legal values, since it can be anything.  If the function author heeds the refinement by name, then looks at the argument to see if there's a NONE!, it will work.  But that prevents them from using the argument's status as none or not.  The situation is confusing and you'd find functions making ad-hoc policy decisions, which may-or-may-not allow you to pass none as a way of backing out of a refinement when you used the refinement on the callsite.)</em></p>
<p>Gradually, the evaluator was made to keep the refinements' truth or falsehood in sync with the state of the arguments.  Use of a NULL for <em>all</em> of a refinement's arguments at the callsite would make the refinement appear unused to the function, as if the caller had never specified it.  Using NULL for only some of them would raise an error.  And refinement arguments were never allowed to be themselves NULL... they were only nulled when the refinement was unused, and hence trying to access them would be an error.</p>
<p>This ultimately streamlined even further into the unification of the refinement and the argument itself...reducing the number of random words you'd have to come up with, shrinking call frames, eliminating a "gearshift" in the evaluator that opened doors to AUGMENT-ing frames with new normal arguments <em>after</em> a refinement argument.</p>
<p>But something to point out is that <strong>because these changes were incremental over time, ideas like the necessity of erroring on null accesses were also something that had to be challenged over time.</strong>  I had a bit of uneasiness about things like:</p>
<pre><code>rebol2&gt;&gt; foreach [x y] [1 2 3] [
             print ["x is" x "and y is" y]
         ]

x is 1 and y is 2
x is 3 and y is none
</code></pre>
<p>Something about running off of the edge of the data and not raising so much as a peep was unsetting.  Doubly so because a NONE! might have actually been literally in the array.  It seemed that once you had the power of NULL to distinguish, that not taking advantage of that with error checking would be a waste...</p>
<p>But such checks have upsides and downsides.  Look at R3-Alpha:</p>
<pre><code>r3-alpha&gt;&gt; data: [#[none!] #[unset!] 1020]
== [none unset! 1020]

r3-alpha&gt;&gt; data/1                          
== none

r3-alpha&gt;&gt; data/2  ; Note: prints nothing in console (and no newline)
r3-alpha&gt;&gt; data/3
== 1020

r3-alpha&gt;&gt; data/4
== none
</code></pre>
<p>Here's Ren-C:</p>
<pre><code>&gt;&gt; data: [_ ~ 1020]
== [_ ~ 1020]

&gt;&gt; data.1
== _

&gt;&gt; data.2
== ~

&gt;&gt; data.3
== 1020

&gt;&gt; data.4
; null
</code></pre>
<p>Is this so bad, not to error on <code>data.4</code> or other null cases?  At least a distinct state is being signaled...that you can tell is out of band of what's in a block.</p>
<p>I think that when all angles are examined about how things have progressed, this makes sense, as does the unused-refinements-are-null change.  It may feel a little more unsafe, but if we're using JavaScript...</p>
<pre><code>js&gt;&gt; var data = [null]  // can't put undefined in array literal...
js&gt;&gt; data.push(undefined)  // ...but you can push it (?)
js&gt;&gt; data.push(1020)

js&gt;&gt; data
(3) [null, undefined, 1020]

js&gt;&gt; data[0]
null

js&gt;&gt; data[1]
undefined

js&gt;&gt; data[2]
1020

&gt;&gt; data[3]  // out of bounds (fourth element, indices are 0-based)
undefined
</code></pre>
<p>I think Ren-C is leading the way here, and that it's not worth getting bent out of shape over NULL accesses not triggering errors.  <a href="https://forum.rebol.info/t/definitional-errors-as-blank-in-null-out-alternative/1880">The TRY mechanisms</a> are there to pick up the slack when there are questionable uses of a NULL, to make sure it was intended.</p>
          <p><a href="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735/5</link>
        <pubDate>Fri, 06 Dec 2019 02:35:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-735-5</guid>
        <source url="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735.rss">Why No-Argument Refinements Are BLACKHOLE! or NULL</source>
      </item>
      <item>
        <title>Why No-Argument Refinements Are BLACKHOLE! or NULL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In Rebol2, a refinement's value would be #[true] or #[none]:</p>
<pre><code>rebol2&gt;&gt; show-me: func [/bar] [print mold bar]

rebol2&gt;&gt; show-me/bar
true  ; actually LOGIC! #[true], not the WORD! true

rebol2&gt;&gt; foo
none  ; actually a NONE! value, not the WORD! none
</code></pre>
<p><em>As a newbie, I was bothered by this from the get-go...</em> because I couldn't test refinements with AND/OR.  (they don't take #[none])  I hadn't drank the Kool-Aid that ANY/ALL were always a desirable substitute.</p>
<hr>
<blockquote>
<p><strong>NOTE: I never</strong> drank the ANY/ALL supremacy Kool-Aid.  Of course there are a lot of cool uses for them as larger scale control structures--and it's important to know how to use them for streamlining program flow.  But for testing flags?  The ability to do it infix and without delimiters can read much better in many places.</p>
<p>So Ren-C has adopted infix AND/OR that <a href="https://github.com/rebol/rebol-issues/issues/1879">operate conditionally on ANY-VALUE! and return LOGIC!</a> <em>(they also short-circuit)</em></p>
<pre><code>ren-c&gt;&gt; flag1: flag2: true

ren-c&gt;&gt; if flag1 and flag2 [print "It allows WORD!s, this comes up often"]
It allows WORD!s, this comes up often

ren-c&gt;&gt; if all [flag1 flag2] [print "Not everyone loves this (e.g. not me)"]
Not everyone loves this (e.g. not me)

ren-c&gt;&gt; if (block? flag1) and (empty? flag1) [print "Short-circuit avoids error"]
; to do this, the second argument to AND/OR is quoted behind the scenes 
</code></pre>
</blockquote>
<hr>
<p>There were countless debates over whether refinements should just be LOGIC! (as in Red), or if a used refinement should be the WORD! of the refinement (maybe useful for chaining?).  For a time, it seemed murkier when Ren-C introduced NULL...although it all tied up rather nicely in the end!</p>
<p><strong>But, 2022 UPDATE:</strong> I've cleaned up a bunch of historical rambling of me talking to myself in this thread to pare it down to what's useful.</p>
<hr>
<h2>Evolution Led Ren-C to <a href="https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120">Refinements As Their Own Arguments</a>
</h2>
<ul>
<li>
<p>Multiple-refinement arguments were a fringe feature, used almost nowhere.  Primarily it just created an inconvenience for 1-argument refinements having to come up with some random name for the argument.</p>
</li>
<li>
<p>With the existence of non-valued NULL, a single argument could represent the state of being used or not, along with the value itself.</p>
<ul>
<li>
<p>The "used" state would be able to hold ANY-VALUE! that could be put in a block.</p>
</li>
<li>
<p>NULL became falsey--so just testing it with IF could cover most "is the refinement used" questions...with specific tests for NULL? when there was risk of conflation with BLANK! or FALSE!</p>
</li>
</ul>
</li>
<li>
<p>It simplified the evaluator logic--removing the "refinements pick up every parameter after them" semantic.</p>
<ul>
<li>This paved the way for adding more arguments to functions after-the-fact, without worrying about them getting lumped in with the arguments of the existing last refinement.</li>
</ul>
</li>
</ul>
<h2>But What About Refinements That <em>Don't</em> Take Arguments?</h2>
<p>This question malingered along longer than I would have liked it to.  <img src="https://forum.rebol.info/images/emoji/twitter/zombie.png?v=9" title=":zombie:" class="emoji" alt=":zombie:"></p>
<p>For some time it would give you back a WORD! that was the name of the refinement itself:</p>
<pre><code>old-renc&gt;&gt; show-me: func [/bar] [print mold bar]

old-renc&gt;&gt; show-me/bar
bar

old-renc&gt;&gt; foo
; null
</code></pre>
<p>I'd advocated for this idea very early on:</p>
<ul>
<li>
<p>Imagine if one function took <code>/only</code> and wrapped another function that also took an <code>/only</code></p>
</li>
<li>
<p>If the wrapper got its ONLY variable for the refinement as the WORD! <code>only</code>...</p>
<ul>
<li>
<p>you could just say <strong><code>inner-function/(only)</code></strong></p>
<ul>
<li>
<p>If you got the refinement, that acts like <strong><code>inner-function/('only)</code></strong></p>
</li>
<li>
<p>If you didn't get the refinement, that would act like <strong><code>inner-function/(null)</code></strong></p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>If you squint your eyes and use your imagination a little, this might seem like a useful tool for chaining.</p>
</li>
</ul>
<p><strong>But the feature was a victim of Ren-C's other successes.</strong>  It's much easier and more efficient to wrap functions with things like ADAPT, ENCLOSE, SPECIALIZE.  The need to write this kind of "tunneling" function is rare: and refinement naming overlap is unlikely if the functions weren't somehow derived from each other.</p>
<p><em>(It also made building FRAME!s at a low-level more annoying...the value you put in the frames had to be contingent on the refinement name.  And it forced path dispatch steps to permit NULLs, when it didn't allow it anywhere else.  More complexity, for little benefit.)</em></p>
<h2>So Wouldn't LOGIC! For Argless Refinements be... <em>Logical?</em>
</h2>
<p>You might think so.  <img src="https://forum.rebol.info/images/emoji/twitter/robot.png?v=9" title=":robot:" class="emoji" alt=":robot:">  But actually... <em>no</em>.</p>
<p>There are a number of technical reasons.  Yet an intuitive angle might be to consider how an argument-less refinement contrasts with a refinement that takes an actual LOGIC! argument.</p>
<pre><code>foo: func [/mutate [logic!]] [...]
</code></pre>
<p>This refinement can be NULL (unspecified--e.g. the refinement was not used at all), or #[true] or #[false] when it is specified.  There's three states.</p>
<p>But an argument-less refinement is really just "used or unused".  So NULL and then a single truthy state... ideally a state that the system understands as meaning <em>"I'm opting in"</em>.</p>
<h2>The Modern Day: <a href="https://forum.rebol.info/t/sending-values-into-a-blackhole/1347">NULL or BLACKHOLE!</a>  <code>(#)</code>
</h2>
<p>While BLANK! has worked nicely as a falsey reified unit type, we've been lacking a truthy unit type.</p>
<p><strong>But with the unification of issues and characters, the appealing truthy "kind-of-a-unit-type" of # exists.</strong>  And its meaning of "please opt-in" is a good match for refinements.</p>
<ul>
<li>Space-wise fits in a single cell with no allocation, like BLANK!</li>
<li>It's not a series so it's not mutable and has very few operations it responds to.</li>
<li>It's one easily-visible character.</li>
<li>And again, it is truthy.</li>
</ul>
<h3>Simple To Set, Doesn't Depend on the Refinement Name</h3>
<pre><code> &gt;&gt; f: make frame! :some-function
 
 &gt;&gt; f.argless-refinement: if x = y [#]  ; slot will be either null or #
</code></pre>
<p>First reflex might be to make a TO-BLACKHOLE or similar:</p>
<pre><code> &gt;&gt; f.argless-refinement: to-blackhole x = y
</code></pre>
<p>But I actually think the <strong><code>if condition [#]</code></strong> looks pretty nice.  It's unambiguous and you get the idea.  "check this box, else leave it empty".  Short and obvious!</p>
<h3>Blackholes Are Fit For Purpose, and Aligns With Multi-Returns</h3>
<p>Blackholes were first invented to help "opt-in" scenarios with multi returns, with patterns like:</p>
<pre><code>if multireturn-var [  ; request for additional work made
    set multireturn-var do-additional-work
]
</code></pre>
<p>The truthy nature of <strong><code>#</code></strong>, along with being a no-op with SET, made it easy to request the additional work be done while not needing to name a variable to store the output.</p>
<p>That's no longer needed in multi-return, because <a href="https://forum.rebol.info/t/output-variables-in-multi-return/1859">it proxies variables for you automatically</a>, so you don't need the overhead of SET.</p>
<p>But it's still a useful feature, and can come in handy with # produced by used refinements!</p>
<h2>Higher Level Functions Can Add Conveniences!</h2>
<p>If you think it would be nice to be able to specify an argless refinement with a LOGIC!, guess what... you can!  <em>(Just not when building low-level frames...)</em></p>
<p>Higher level functions like APPLY are happy to turn a LOGIC! into a NULL or # for you.</p>
<pre><code>&gt;&gt; apply :append [[a b c] [d e] /only 1 = 1]
== [a b c [d e]]
</code></pre>
<p>SPECIALIZE doesn't do it at time of writing, but maybe it should...</p>
<pre><code>&gt;&gt; apo: specialize :append [only: 2 = 2]
** Script Error: Argless Refinement /only Must be either # or NULL
</code></pre>
<p>In any case, I just wanted to explain why an argless refinement to your function is going to be showing up as # or NULL, and that's more or less the final (?) answer.</p>
          <p><a href="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735/1</link>
        <pubDate>Thu, 12 Jul 2018 21:05:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-735-1</guid>
        <source url="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735.rss">Why No-Argument Refinements Are BLACKHOLE! or NULL</source>
      </item>
  </channel>
</rss>
