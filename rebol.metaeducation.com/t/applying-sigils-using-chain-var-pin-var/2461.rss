<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Applying Sigils Using CHAIN! (@:var) =&gt; (pin var)</title>
    <link>https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461</link>
    <description>@bradrn had an interesting suggestion here:

[quote=&quot;bradrn, post:1, topic:2460&quot;]
Or `@:x` could get the value of `:x`, then apply `@` to it. (Note that these should probably be unordered, as I mentioned earlier.) Of course, they’re useful in dialects too.
[/quote]

That could be cool.

    &gt;&gt; word: &#39;foo

    &gt;&gt; @:word
    == @foo

I&#39;m hard pressed to think of what else it would do.  The colon and the concept of &quot;chaining&quot; kind of suggests it.

I&#39;ve biased the system to error on applying Sigils to things that already have them, because I think that&#39;s too permissive, and leads to misunderstandings:

    &gt;&gt; x: @foo

    &gt;&gt; lift x
    ** Error...

    &gt;&gt; lift:force x
    == ^foo

So I&#39;d probably suggest this operator error by default as well.

It could work with GROUP!s and evaluate them, but it might be noisier than just using PIN.

    &gt;&gt; stuff: [foo baz bar]

    &gt;&gt; @:(pick stuff 2)
    == @baz

    &gt;&gt; pin pick stuff 2
    == @baz

Same number of characters.  I would usually prefer the latter as the parentheses take it from &quot;slightly and relevantly symbol-y&quot; to &quot;more symbol-y than it need be&quot;.  Also with 4 inline cells it has better locality (vs. a 2-element CHAIN! with a 3-element GROUP! in it.)

But, good to have options.  Also, since you can&#39;t assign Sigils, maybe the operator could stand alone:

    &gt;&gt; @: pick stuff 2
    == @baz

Looks like an assignment, but... :man_shrugging: Someone might like it.  (I don&#39;t :slight_smile:)</description>
    
    <lastBuildDate>Wed, 21 May 2025 08:47:18 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Applying Sigils Using CHAIN! (@:var) =&gt; (pin var)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2461">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Here we also run into ambiguity of what UNLIFT should do:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; unlift first [^:@foo]
== ???  ; should it be :@foo or @foo
</code></pre>
</blockquote>
</aside>
<p>Perhaps this sugguests that <code>:@foo</code> / <code>:^foo</code> / <code>:$foo</code> are all illegal.</p>
<p><em>You can't have a CHAIN! with a BLANK! at the head and an item with a SIGIL! in the second slot.</em></p>
<p>If they were illegal, there'd be no ambiguity on what you get.</p>
<p>(Sequence immutability is good for so many reasons...)</p>
          <p><a href="https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461/4</link>
        <pubDate>Wed, 21 May 2025 08:47:18 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2461-4</guid>
        <source url="https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461.rss">Applying Sigils Using CHAIN! (@:var) =&gt; (pin var)</source>
      </item>
      <item>
        <title>Applying Sigils Using CHAIN! (@:var) =&gt; (pin var)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2461">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Let's say you wanted to get a bound meta-WORD!:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; $:^foo
== ^foo  ; bound
</code></pre>
</blockquote>
</aside>
<p>I will point out that this becomes contentious with "what if you wanted a bound leading-colon meta-word":</p>
<pre><code> &gt;&gt; $:^foo
 == :^foo
</code></pre>
<p>It can't do both.  (This was also a problem with the decoration idea.)</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2461">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; x: @foo

&gt;&gt; lift x
== ^:@foo
</code></pre>
<p>My instincts would be that it should require a refinement, you changed the fundamental type... <strong><code>lift:multi</code></strong> ?</p>
</blockquote>
</aside>
<p>Here we also run into ambiguity of what UNLIFT should do:</p>
<pre><code>&gt;&gt; unlift first [^:@foo]
== ???  ; should it be :@foo or @foo
</code></pre>
<p>This will need some consideration.  I think breaking the uniformity here could very likely be worth it, so I'll start scrutinizing the use cases to determine if that is true.</p>
<p>There are many instances where certain lexical forms do something irregular.  I think it's not as bad if they do it than if the fundamental operations do it (you wouldn't want BIND to break the rules for a specific type).  Though the lines can be fuzzy.</p>
          <p><a href="https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461/3</link>
        <pubDate>Wed, 21 May 2025 08:29:50 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2461-3</guid>
        <source url="https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461.rss">Applying Sigils Using CHAIN! (@:var) =&gt; (pin var)</source>
      </item>
      <item>
        <title>Applying Sigils Using CHAIN! (@:var) =&gt; (pin var)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2461">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<aside class="quote no-group" data-username="bradrn" data-post="1" data-topic="2460">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/differences-between-x-and-x/2460/1">Differences Between ^x: and [^x]:</a></div>
<blockquote>
<p>Or <code>@:x</code> could get the value of <code>:x</code>, then apply <code>@</code> to it. (Note that these should probably be unordered, as I mentioned earlier.) Of course, they’re useful in dialects too.</p>
</blockquote>
</aside>
<p>That could be cool.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; word: 'foo

&gt;&gt; @:word
== @foo
</code></pre>
</blockquote>
</aside>
<p>So I think this actually has to be something different... namely, the sought-after <strong>"Sigil Composition"</strong></p>
<p>Since only one Sigil can be applied on an Element at a time, we could use this to have more than one.  Then, you get the behavior of what the Sigil would have done if it were on the item.</p>
<p>Let's say you wanted to get a bound meta-WORD!:</p>
<pre><code>&gt;&gt; $:^foo
== ^foo  ; bound
</code></pre>
<p>Without this you'd have to do something like use the isolated $ Sigil ("BIND HERE") with a quoted item:</p>
<pre><code>&gt;&gt; $ '^foo
== ^foo  ; bound
</code></pre>
<p>Admittedly it's not much more typing in that case.  But the point isn't the typing... <strong>the point is being able to represent both notions on a single Element</strong>, where if you do one PICK out of a block you can get back a single entity that conveys both ideas.</p>
<p>As discussed, this is important in places like FOR-EACH variables.  Each Sigil means something different, e.g. @ means "reuse the variable, don't create a new one", and ^ means "lift the variable".  What if you need both?</p>
<pre><code>let foo
for-each [@:^foo] [a b c] [...]
assert [foo = the 'c]  ; visible outside loop
</code></pre>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="7" data-topic="2147">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/a-proliferation-of-word-s/2147/7">A proliferation of $#@^':~WORD~:s</a></div>
<blockquote>
<aside class="quote no-group" data-username="bradrn" data-post="1" data-topic="2460">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/differences-between-x-and-x/2460/1">Differences Between ^x: and [^x]:</a></div>
<blockquote>
<p>If anything, I’m now leaning even more in the direction that combining sigils should be possible, because I can see obvious interpretations of those combinations.</p>
</blockquote>
</aside>
<p>there's some combination of <em>I don't know how to do it</em> along with <em>I think the result would wind up being ugly and complicated</em> ... whereas I mostly know where the current path is going and am largely at peace with it.</p>
</blockquote>
</aside>
<p>So <a class="mention" href="https://rebol.metaeducation.com/u/bradrn">@bradrn</a> was correct.  But... I believe I was too: I did not disagree on the need for multiple intents, I just downplayed its importance... saying I simply didn't see a way to do it outside of using structure via BLOCK!, which would work in the cases it came up.</p>
<p>But CHAIN! answered many of the issues.  It's like using BLOCK!, in that it has a defined structure.  But unlike BLOCK! that needs <code>[</code> and a <code>]</code> at a sparse point to decorate, it only needs <code>:</code> to stick a Sigil on, at the location of the Sigil.</p>
<p>It has the property I was maintaining needed to be true, that a value has only one answer for its Sigil.  As such:</p>
<pre><code>&gt;&gt; type of first [@:^foo]
== ~{pinned!}~  ; antiform (datatype)
</code></pre>
<p>It's a PINNED!, and its locus of control in the evaluator comes from what PINNED! does, e.g.</p>
<pre><code>&gt;&gt; @:^foo
== @:^foo  ; bound
</code></pre>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2461">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I've biased the system to error on applying Sigils to things that already have them, because I think that's too permissive, and leads to misunderstandings:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; x: @foo

&gt;&gt; lift x
** Error...
</code></pre>
</blockquote>
</aside>
<p>I don't know if it's a great idea to become too casual about it, but:</p>
<pre><code>&gt;&gt; x: @foo

&gt;&gt; lift x
== ^:@foo
</code></pre>
<p>My instincts would be that it should require a refinement, you changed the fundamental type... <strong><code>lift:multi</code></strong> ?</p>
<p>(I bias things for safety first, usually... because it's easier to relax them later than it is to add the restriction later.)</p>
          <p><a href="https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461/2</link>
        <pubDate>Wed, 21 May 2025 08:26:15 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2461-2</guid>
        <source url="https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461.rss">Applying Sigils Using CHAIN! (@:var) =&gt; (pin var)</source>
      </item>
      <item>
        <title>Applying Sigils Using CHAIN! (@:var) =&gt; (pin var)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://rebol.metaeducation.com/u/bradrn">@bradrn</a> had an interesting suggestion here:</p>
<aside class="quote no-group" data-username="bradrn" data-post="1" data-topic="2460">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/differences-between-x-and-x/2460/1">Differences Between ^x: and [^x]:</a></div>
<blockquote>
<p>Or <code>@:x</code> could get the value of <code>:x</code>, then apply <code>@</code> to it. (Note that these should probably be unordered, as I mentioned earlier.) Of course, they’re useful in dialects too.</p>
</blockquote>
</aside>
<p>That could be cool.</p>
<pre><code>&gt;&gt; word: 'foo

&gt;&gt; @:word
== @foo
</code></pre>
<p>I'm hard pressed to think of what else it would do.  The colon and the concept of "chaining" kind of suggests it.</p>
<p>I've biased the system to error on applying Sigils to things that already have them, because I think that's too permissive, and leads to misunderstandings:</p>
<pre><code>&gt;&gt; x: @foo

&gt;&gt; lift x
** Error...

&gt;&gt; lift:force x
== ^foo
</code></pre>
<p>So I'd probably suggest this operator error by default as well.</p>
<p>It could work with GROUP!s and evaluate them, but it might be noisier than just using PIN.</p>
<pre><code>&gt;&gt; stuff: [foo baz bar]

&gt;&gt; @:(pick stuff 2)
== @baz

&gt;&gt; pin pick stuff 2
== @baz
</code></pre>
<p>Same number of characters.  I would usually prefer the latter as the parentheses take it from "slightly and relevantly symbol-y" to "more symbol-y than it need be".  Also with 4 inline cells it has better locality (vs. a 2-element CHAIN! with a 3-element GROUP! in it.)</p>
<p>But, good to have options.  Also, since you can't assign Sigils, maybe the operator could stand alone:</p>
<pre><code>&gt;&gt; @: pick stuff 2
== @baz
</code></pre>
<p>Looks like an assignment, but... <img src="https://rebol.metaeducation.com/images/emoji/twitter/man_shrugging.png?v=14" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"> Someone might like it.  (I don't <img src="https://rebol.metaeducation.com/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20">)</p>
          <p><a href="https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461/1</link>
        <pubDate>Mon, 19 May 2025 10:23:16 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2461-1</guid>
        <source url="https://rebol.metaeducation.com/t/applying-sigils-using-chain-var-pin-var/2461.rss">Applying Sigils Using CHAIN! (@:var) =&gt; (pin var)</source>
      </item>
  </channel>
</rss>
