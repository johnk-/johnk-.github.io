<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Implicit Escaping To Tiebreak Literal Arguments</title>
    <link>https://rebol.metaeducation.com/t/implicit-escaping-to-tiebreak-literal-arguments/2290</link>
    <description>Imagine a situation where one function takes its right-hand side literally, and another takes its left-hand side literally:

    right-literal: func [&#39;arg] [...]
    left-literal: infix func [&#39;left right] [...]

What happens when I write:

     right-literal X left-literal Y

Seems like an unbreakable tie.  :necktie: 

You&#39;re going to be lying to someone if you don&#39;t trigger an error.  It could be a pretty big lie...e.g. if you let one evaluate and pass their result to the other, then you might be giving an antiform to a function that specifically only expected source-representable things.

## But what if the situation was a bit more...malleable...

Let&#39;s say that one of these lets you escape the argument inside a GROUP! (currently thinking the most semiotic way to represent such a property of a parameter is by...putting it in a group).

    right-escapable: func [&#39;(arg)] [...]  ; `right-esc (&#39;X)` acts like `right-esc X` 
    left-literal: infix func [&#39;left right] [...]

So this means that RIGHT-ESCAPABLE is geared up to accept evaluative products.  If that&#39;s the case, then we might think of ourselves as having a bit more liberty to tiebreak:

    right-escapable X left-literal Y
    =&gt;
    right-escapable (X left-literal Y)

Whether that seems presumptuous or not to you, it definitely is useful, e.g. with lambdas...where requiring a group would be ugly:

    case [...] then x -&gt; [...]

The interface on the function says it was &quot;willing to accept a group at the callsite&quot;.  But it never actually received a group, just the evaluative product, which would then be typechecked.  Given that it&#39;s willing to take that evaluative product, why not throw in the group implicitly vs. giving an error?

You should be convinced.  It&#39;s a good thing.

## Another Case Study: Infix &quot;OF&quot;

First there was **`(type? x)`** in Rebol2

Then **`(type-of x)`** emerged, in the attempts to purge the blight of *&quot;functions that return a result end in question mark&quot;*, reserving it for LOGIC-bearing functions.

It then became **`(type of x)`** to be even more pleasing to the words-separated-by-spaces aesthetic.

But the infix properties of such a left-literal function can&#39;t be the same as ordinary evaluative infix, e.g. math:

    &gt;&gt; 1 + 2 * 3
    == 9  ; e.g. (1 + 2) * 3

Because we used to be able to write:

    &gt;&gt; integer! = type-of 1
    == ~okay~  ; anti

So we&#39;d still like to be able to write:

    &gt;&gt; integer! = type of 1
    == ~okay~  ; anti

Hence that can&#39;t be interpreted as **`(integer! = type) of 1`**

*&quot;Easy enough&quot;* you say... *&quot;make it so literal left infix wins over evaluative right infix.&quot;*

If you think it&#39;s easy, try writing this stuff yourself.  But yes--that is what I did.

However, OF is one of these &quot;escapable&quot; routines.  We want to be able to do this:

    &gt;&gt; integer! = (first [type length]) of 1
    == ~okay~  ; anti

So how does this work out with our tie-breaking?

*It doesn&#39;t count.*  There&#39;s no tie to break.  **`=`** isn&#39;t inescapably quoting its right.  If it *was* inescapably quoting its right, then the escapable left would mean the OF would yield to the hard rightward literal.

## It&#39;s Simpler Than I Had It

Due to some accidents of history and not really having clear thinking on this, there were more parameter conventions than were required... with one hacked in to specifically make the **OF** case work.

It turns out that using the rationale above, the extra parameter convention can be dropped.  It can all be done with just escapability-or-not meeting escapability-or-not.</description>
    
    <lastBuildDate>Sun, 22 Sep 2024 03:59:28 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://rebol.metaeducation.com/t/implicit-escaping-to-tiebreak-literal-arguments/2290.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Implicit Escaping To Tiebreak Literal Arguments</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Imagine a situation where one function takes its right-hand side literally, and another takes its left-hand side literally:</p>
<pre><code>right-literal: func ['arg] [...]
left-literal: infix func ['left right] [...]
</code></pre>
<p>What happens when I write:</p>
<pre><code> right-literal X left-literal Y
</code></pre>
<p>Seems like an unbreakable tie.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/necktie.png?v=14" title=":necktie:" class="emoji" alt=":necktie:" loading="lazy" width="20" height="20"></p>
<p>You're going to be lying to someone if you don't trigger an error.  It could be a pretty big lie...e.g. if you let one evaluate and pass their result to the other, then you might be giving an antiform to a function that specifically only expected source-representable things.</p>
<h2><a name="p-7736-but-what-if-the-situation-was-a-bit-moremalleable-1" class="anchor" href="https://rebol.metaeducation.com#p-7736-but-what-if-the-situation-was-a-bit-moremalleable-1"></a>But what if the situation was a bit more...malleable...</h2>
<p>Let's say that one of these lets you escape the argument inside a GROUP! (currently thinking the most semiotic way to represent such a property of a parameter is by...putting it in a group).</p>
<pre><code>right-escapable: func ['(arg)] [...]  ; `right-esc ('X)` acts like `right-esc X` 
left-literal: infix func ['left right] [...]
</code></pre>
<p>So this means that RIGHT-ESCAPABLE is geared up to accept evaluative products.  If that's the case, then we might think of ourselves as having a bit more liberty to tiebreak:</p>
<pre><code>right-escapable X left-literal Y
=&gt;
right-escapable (X left-literal Y)
</code></pre>
<p>Whether that seems presumptuous or not to you, it definitely is useful, e.g. with lambdas...where requiring a group would be ugly:</p>
<pre><code>case [...] then x -&gt; [...]
</code></pre>
<p>The interface on the function says it was "willing to accept a group at the callsite".  But it never actually received a group, just the evaluative product, which would then be typechecked.  Given that it's willing to take that evaluative product, why not throw in the group implicitly vs. giving an error?</p>
<p>You should be convinced.  It's a good thing.</p>
<h2><a name="p-7736-another-case-study-infix-of-2" class="anchor" href="https://rebol.metaeducation.com#p-7736-another-case-study-infix-of-2"></a>Another Case Study: Infix "OF"</h2>
<p>First there was <strong><code>(type? x)</code></strong> in Rebol2</p>
<p>Then <strong><code>(type-of x)</code></strong> emerged, in the attempts to purge the blight of <em>"functions that return a result end in question mark"</em>, reserving it for LOGIC-bearing functions.</p>
<p>It then became <strong><code>(type of x)</code></strong> to be even more pleasing to the words-separated-by-spaces aesthetic.</p>
<p>But the infix properties of such a left-literal function can't be the same as ordinary evaluative infix, e.g. math:</p>
<pre><code>&gt;&gt; 1 + 2 * 3
== 9  ; e.g. (1 + 2) * 3
</code></pre>
<p>Because we used to be able to write:</p>
<pre><code>&gt;&gt; integer! = type-of 1
== ~okay~  ; anti
</code></pre>
<p>So we'd still like to be able to write:</p>
<pre><code>&gt;&gt; integer! = type of 1
== ~okay~  ; anti
</code></pre>
<p>Hence that can't be interpreted as <strong><code>(integer! = type) of 1</code></strong></p>
<p><em>"Easy enough"</em> you say... <em>"make it so literal left infix wins over evaluative right infix."</em></p>
<p>If you think it's easy, try writing this stuff yourself.  But yes--that is what I did.</p>
<p>However, OF is one of these "escapable" routines.  We want to be able to do this:</p>
<pre><code>&gt;&gt; integer! = (first [type length]) of 1
== ~okay~  ; anti
</code></pre>
<p>So how does this work out with our tie-breaking?</p>
<p><em>It doesn't count.</em>  There's no tie to break.  <strong><code>=</code></strong> isn't inescapably quoting its right.  If it <em>was</em> inescapably quoting its right, then the escapable left would mean the OF would yield to the hard rightward literal.</p>
<h2><a name="p-7736-its-simpler-than-i-had-it-3" class="anchor" href="https://rebol.metaeducation.com#p-7736-its-simpler-than-i-had-it-3"></a>It's Simpler Than I Had It</h2>
<p>Due to some accidents of history and not really having clear thinking on this, there were more parameter conventions than were required... with one hacked in to specifically make the <strong>OF</strong> case work.</p>
<p>It turns out that using the rationale above, the extra parameter convention can be dropped.  It can all be done with just escapability-or-not meeting escapability-or-not.</p>
          <p><a href="https://rebol.metaeducation.com/t/implicit-escaping-to-tiebreak-literal-arguments/2290/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/implicit-escaping-to-tiebreak-literal-arguments/2290/1</link>
        <pubDate>Fri, 20 Sep 2024 17:17:17 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2290-1</guid>
        <source url="https://rebol.metaeducation.com/t/implicit-escaping-to-tiebreak-literal-arguments/2290.rss">Implicit Escaping To Tiebreak Literal Arguments</source>
      </item>
  </channel>
</rss>
