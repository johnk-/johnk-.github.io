<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Naming The Infix APPLY Operator</title>
    <link>https://forum.rebol.info/t/naming-the-infix-apply-operator/2195</link>
    <description>Now that we have the **[Super Duper APPLY Operator Version 2.0](https://forum.rebol.info/t/apply-ii-the-revenge/1834)**, what&#39;s next...?

# Making It Easier To Use!

Imagine if we let **`&lt;-`** be an infix operator...taking the name of the function to apply on the left, and a block on the right:

    &lt;-: enfix func [
        &#39;action [word! tuple! path! group!]
        args [block]
    ][
        apply (if group? action [do action] else [get action]) args
    ]

It&#39;s rather slick!

    &gt;&gt; append &lt;- [[a b c] &lt;d&gt; /dup 2]
    == [a b c &lt;d&gt; &lt;d&gt;]

    &gt;&gt; append/only &lt;- [[a b c] [e f] /dup 2]
    == [a b c [e f] [e f]]

Of course, you can mix it up with your own freaky ideas, even variadic ones!

    &gt;&gt; $: enfixed func [&#39;name [word!] &#39;args [&lt;variadic&gt; &lt;end&gt; any-value!]] [
        args: make block! args
        apply :(get name) args
    ]

    &gt;&gt; data: [a b c]

    &gt;&gt; (append $ /dup 2, data [d e])

    &gt;&gt; print [&quot;data is&quot; mold data]
    data is [a b c d e d e]

While that might kind of suck, it just was to get the point that there are options.  The choice is up to you.  

## We Will Need An Apply Operator, We Just Have To Decide On It

I think the floodgates are pretty much open on &quot;weird words&quot; now.  The fact that you can&#39;t make them into SET-WORD!s or put them in PATH!s will just be life.  Maybe they&#39;ll be their own category distinct from WORD!, like SYMBOL! ?

Among things we&#39;ll get sooner or later are **:** and **::** 

    append :: [data [d e] /dup 2]

That&#39;s good-looking, but maybe too good looking...I think it should be saved for something in the type system as in other languages.

Arrows are associated with functions, and since **`-&gt;`** was being used for lambdas, I said that using leftward arrow for something &quot;function related&quot; made more sense than other things.  Well... APPLY is function-related, is it not?

    append &lt;- [data [d e] /dup 2]

Maybe POINTFREE could be shorthanded with lambda pointing at a GROUP! instead of a BLOCK!, or something along those lines?

    &gt;&gt; ap10: -&gt; (append _ 10)
 
    &gt;&gt; ap10 [a b c]
    == [a b c 10]

    &gt;&gt; mp2: -&gt; (multiply 2)

    &gt;&gt; mp2 10
    == 20

It seems to me that if we&#39;re concerned that someone wants to actually calculate a body to use for a function, they wouldn&#39;t be using the shorthand lambda notation to do that and would use full FUNC.  Or those oddballs would be all right using **-&gt; :(...)** if they wanted that.

There&#39;s only so many keys on the keyboard in this universe.  How about it, &lt;- for APPLY?</description>
    
    <lastBuildDate>Tue, 20 Aug 2024 06:17:16 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Naming The Infix APPLY Operator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>After a bit of usage, I haven't been totally thrilled with terminal slash meaning APPLY.</p>
<p>It's kind of strange and also contentious with what I think are some very interesting and more natural meanings for terminal slash.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2195">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Among things we'll get sooner or later are <strong>:</strong> and <strong>::</strong></p>
<pre><code class="lang-plaintext">append :: [data [d e] /dup 2]
</code></pre>
<p>That's good-looking, but maybe too good looking...I think it should be saved for something in the type system as in other languages.</p>
</blockquote>
</aside>
<p>Well, we now have double-colon as a SIGIL!.  It's not a WORD! so you can't bind it to an arbitrary function.  So giving it a built-in APPLY behavior is one of the limited set of things I can reasonably think for it.</p>
<pre><code class="lang-plaintext">&gt;&gt; append :: [[a b c] &lt;d&gt; /dup 2]
== [a b c &lt;d&gt; &lt;d&gt;]

&gt;&gt; append :: [/dup 2 [a b c] spread [e f]]
== [a b c e f e f]

&gt;&gt; append/dup :: [[a b c] [e f] 2]
== [a b c [e f] [e f]]
</code></pre>
<p>The doubling up makes it pretty noticeable standing out from a plain colon.</p>
<pre><code>thing: append :: [series :value]
</code></pre>
<p>It's strange but also it's a mixture of heavy and light, as a kind of "joiner" or concatenator, almost as if you were sticking the things together into a single thought.</p>
<pre><code>append::[[a b c] &lt;d&gt; /dup 2]
</code></pre>
<p>I know it's not perfect, but nothing will be.  Terminal slash is not working for me and missing more natural opportunities for it.  I don't like an APPLY operator that sits to the left and quotes:</p>
<pre><code>apply append [[a b c] &lt;d&gt; /dup 2]
</code></pre>
<p>Because that makes it look too much like the BLOCK! is the first argument to APPEND.  So you really have to do APPLY with an inert form:</p>
<pre><code>apply :append [[a b c] &lt;d&gt; /dup 2]
</code></pre>
<p>So if no GET-WORD! is to be used and quoting is in play, there has to be something learnable and infix to jolt the flow.  I've tried a <strong>lot</strong> of things at this point, and the intersectionality of this new and unused neutral-looking SIGIL! feels like it might do the trick.</p>
<pre><code>append :: [[a b c] &lt;d&gt; /dup 2]
</code></pre>
<p>I'm giving it a shot for a while to see what I think.</p>
          <p><a href="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/6</link>
        <pubDate>Tue, 20 Aug 2024 03:31:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2195-6</guid>
        <source url="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195.rss">Naming The Infix APPLY Operator</source>
      </item>
      <item>
        <title>Naming The Infix APPLY Operator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Mulling this has led me to a kind of seemingly inevitable conclusion...</p>
<p><strong>I think this should be the behavior of terminal slash</strong></p>
<p>Here it is demonstrated with one of rebmake's <em>"that-sure-is-a-lot-of-refinements"</em> functions:</p>
<pre><code>add-project-flags/ [
    ext-objlib
    /I app-config.includes
    /D compose [
        (either ext.mode = &lt;builtin&gt; ["REB_API"] ["REB_EXT"])
        (spread app-config.definitions)
    ]
    /c app-config.cflags
    /O app-config.optimization
    /g app-config.debug
]
</code></pre>
<p><strong>The slash marks a kind of barrier between the function and its block argument.</strong>   It's like it's saying <em>"whoa, hold up now, you're not actually taking that BLOCK! as a parameter!"</em></p>
<ul>
<li>
<p>This avoids what's upsetting about a quoting <strong>apply add-project-flags [...]</strong> syntax.  It may "look" nice on the surface, but you have to scan backwards to see "oh, there's an APPLY back there"</p>
</li>
<li>
<p>Non-quoting <strong>apply :add-project-flags [...]</strong> has the reverse problem: you think application is being <em>suppressed</em> and have to scan backwards to the APPLY and see "oh, no it's not, it's actually running".</p>
</li>
</ul>
<p>Terminal slash kills two birds with one stone: it keeps things in the range of function application (e.g. APPLY/ONLY has a slash and that's connoted with application), and gives the visual separation we want at the location we want it.</p>
<p>This bakes it into the evaluator a bit more (though I'm proposing evaluator hooks that parallel UPARSE's combinator MAP! to permit varying it).</p>
<p>But the proof of concept that you could write a function doing it has been done.  You can write this form of APPLY yourself with FRAME!, and design other APPLY-like operators.  Just because you <em>can</em> write an apply operator doesn't mean that the evaluator has to avoid giving a foundational notation to this very critical behavior.</p>
<p>This will mean rethinking the other applications for terminal slash that are in the mix right now...</p>
<h2>
<a name="in-the-evaluator-foo-has-been-a-this-is-a-function-annotation-1" class="anchor" href="https://forum.rebol.info#in-the-evaluator-foo-has-been-a-this-is-a-function-annotation-1"></a>In The Evaluator, FOO/ Has Been A "This is a Function" Annotation</h2>
<p>I had it so that if you terminated something with a slash it would run it...but warn you if it wasn't an action:</p>
<pre><code> &gt;&gt; print/ "Hello"
 Hello

 &gt;&gt; mystery: 10

 &gt;&gt; mystery/ "Hello"
 ** Error: MYSTERY is not an action!, can't run with terminal /
</code></pre>
<p>That's been mostly a means of commenting.  A parallel concept I had was that you could ensure things where actions by assigning to paths with terminal slash:</p>
<pre><code>&gt;&gt; x: 10

&gt;&gt; foo/: :print
== #[action! [line]]

&gt;&gt; bar/: x
** Error: Can't assign non-ACTION! using terminal slash
</code></pre>
<h2>
<a name="terminal-slash-has-also-retriggered-action-values-2" class="anchor" href="https://forum.rebol.info#terminal-slash-has-also-retriggered-action-values-2"></a>Terminal Slash Has Also Retriggered ACTION! Values</h2>
<p>Today, this behavior is useful with GROUP!</p>
<pre><code> &gt;&gt; (either true [:print] [:elide])
 == #[action! [line]]

 &gt;&gt; (either true [:print] [:elide])/ "Hello"
 Hello
</code></pre>
<p>This becomes more useful with the ACTION!-vs-isotopic-ACTION! distinction.  That's because plain WORD!s referring to actions wouldn't run in the evaluator.  So <strong>foo/</strong> could be a shorthand for <strong>run foo</strong> when FOO contained a plain  inert action.</p>
<p>But...here's a thought: you probably really should be enclosing things in some kind of array anyway, if you're getting a function value somewhere:</p>
<pre><code> dump-block: func [block [block!] dumper [action!]] [
     for-each item block [
         print "Dumping item..."
         dumper item  ; what if dumper doesn't take exactly 1 argument?
         print "Item was dumped."
     ]
 ]
</code></pre>
<p>When reading some of BrianH's code when first looking at Rebol, I'd notice in cases like this the calls would be in GROUP!s, e.g. <strong><code>(dumper item)</code></strong>.  It would quarantine the function.. and sometimes it would take advantage of the fact that if the function took fewer parameters, that would be tolerated (saying it just wasn't interested in those).</p>
<p>But using <strong><code>dumper/ [item]</code></strong> instead of <strong><code>(dumper item)</code></strong> has advantages, such as that you won't be impacted by parameter conventions like quoting.  So there's no way for the function you are calling to get the name of the variable you're passing--for instance.</p>
<h2>
<a name="in-uparse-a-foo-has-been-running-the-action-combinatorhttpsforumrebolinfotif-action-combinators-dont-impress-i-dont-know-what-will1608-3" class="anchor" href="https://forum.rebol.info#in-uparse-a-foo-has-been-running-the-action-combinatorhttpsforumrebolinfotif-action-combinators-dont-impress-i-dont-know-what-will1608-3"></a>In UPARSE, a FOO/ Has Been Running the <a href="https://forum.rebol.info/t/if-action-combinators-dont-impress-i-dont-know-what-will/1608">ACTION! combinator</a>
</h2>
<p>The implementation is a bit convoluted at the moment.  But that it works at all as a usermode-implemented construct is pretty impressive:</p>
<pre><code>  &gt;&gt; parse [1 2 3] [collect some [
       keep negate/ integer!
  ]]
   == [-1 -2 -3]
</code></pre>
<p>This is not necessarily contentious--given that you are free to kick over into a GROUP! if you want a function invocation that doesn't draw arguments out of the parse stream.  But it could also be done by a RUN combinator that just picked up whatever came next.</p>
<pre><code>  &gt;&gt; parse [1 2 3] [collect some [
       keep run negate integer!
  ]]
   == [-1 -2 -3]
</code></pre>
<p>And we could carry over the apply behavior in case you wanted a midstream application:</p>
<pre><code>  &gt;&gt; parse [[a b] 2 "hello"] [
         series: &lt;any&gt;, n: integer!, append/ [series [c d] /dup n]]  text!
     ]
  == "hello"

  &gt;&gt; series
  == [a b [c d] [c d]]
</code></pre>
<h2>
<a name="at-time-of-writing-terminal-slash-apply-looks-like-a-winner-4" class="anchor" href="https://forum.rebol.info#at-time-of-writing-terminal-slash-apply-looks-like-a-winner-4"></a>At Time Of Writing, Terminal-Slash-APPLY Looks Like a Winner</h2>
<p>I found that <strong><code>&lt;-</code></strong> was no good for me, nor was <strong><code>//</code></strong>.</p>
<p>I think the other purposes terminal slash has been used for can be rethought, certainly for such a big payoff.</p>
<p>There'd still be the option of APPLY if you want it, but I'm now pretty firm that it shouldn't quote.</p>
          <p><a href="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/5</link>
        <pubDate>Tue, 30 Aug 2022 23:12:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2195-5</guid>
        <source url="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195.rss">Naming The Infix APPLY Operator</source>
      </item>
      <item>
        <title>Naming The Infix APPLY Operator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2195">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>For most anything you'd put in that position, it struggles with the question of "why would it mean APPLY". Even if &amp; wasn't hideous (and it is), there's no real tie-in that it has to other uses of &amp; we might imagine...so having it do function application just looks random:</p>
<pre><code>thing: append &amp; [series :value]
</code></pre>
</blockquote>
</aside>
<p>So one possibility that's growing on me is <strong><code>//</code></strong></p>
<pre><code>thing: append // [[a b c] &lt;d&gt; /dup 2]
</code></pre>
<p>It's no longer going to be a PATH!, just because <strong><code>//x</code></strong> and <strong><code>x//</code></strong> are paths.  <em>(It will be a WORD! that has some inter-convertibility to paths for operations like JOIN, e.g. <strong><code>join 'a/b as path! '//</code></strong> would get you the path <strong><code>a/b//</code></strong>)</em></p>
<p>It has a couple of things going for it:</p>
<ul>
<li>
<p>Slashes are now intimately entwined with function application in the core evaluator, so having a slashy thing be APPLY makes some sense</p>
</li>
<li>
<p>It's easy to type...doesn't require hitting shift, flows very naturally.</p>
</li>
<li>
<p>Visually non-disruptive; it's sort of "shapeless"</p>
</li>
</ul>
<p>It's used for comments in JavaScript and C++, but the syntaxes are 99% incompatible anyway.  I've made peace with semicolon as the comment character years ago, so desiring // for comments isn't an issue for me anymore.</p>
<p>I'm leaning a little more to liking this than the left arrow, because the arrow is kind of "noisy" as symbols go...and the idea that it's a meaningful "direction of flow" is a bit forced.</p>
          <p><a href="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/4</link>
        <pubDate>Sun, 05 Jun 2022 07:38:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2195-4</guid>
        <source url="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195.rss">Naming The Infix APPLY Operator</source>
      </item>
      <item>
        <title>Naming The Infix APPLY Operator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="IngoHohmann" data-post="2" data-topic="2195">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I think it's worth trying.<br>
^-- <em>(RE: using <code>&lt;-</code> as infix quoting APPLY)</em></p>
</blockquote>
</aside>
<p>I've been giving it a shot, and trying out other ideas too.</p>
<p>I tried colon, which looks pretty good in isolation:</p>
<pre><code>&gt;&gt; append : [[a b c] &lt;d&gt; /dup 2]
== [a b c &lt;d&gt; &lt;d&gt;]

&gt;&gt; append/only : [[a b c] [e f] /dup 2]
== [a b c [e f] [e f]]
</code></pre>
<p>But it kind of gets lost in the noise of all the other usages of colon:</p>
<pre><code>thing: append : [series :value]
</code></pre>
<p>For most anything you'd put in that position, it struggles with the question of "why would it mean APPLY".  Even if &amp; wasn't hideous (and it is), there's no real tie-in that it has to other uses of &amp; we might imagine...so having it do function application just looks random:</p>
<pre><code>thing: append &amp; [series :value]
</code></pre>
<p>What <strong><code>&lt;-</code></strong> has going for it is that <strong><code>-&gt;</code></strong> is the lambda function generator.  So it looks like it's in the family of "function things".  Pointing right creates a function, pointing left applies it.</p>
<pre><code>&gt;&gt; (x -&gt; [print [x + 20]]) &lt;- [1000]
== 1020
</code></pre>
<p>So I think it's basically the best option.  But...again...configurable for those who want to think differently!</p>
          <p><a href="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/3</link>
        <pubDate>Thu, 02 Jun 2022 00:38:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2195-3</guid>
        <source url="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195.rss">Naming The Infix APPLY Operator</source>
      </item>
      <item>
        <title>Naming The Infix APPLY Operator</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Imagine if we let <strong><code>&lt;-</code></strong> be an infix operator...taking the name of the function to apply on the left, and a block on the right:</p>
</blockquote>
<p>I think it's worth trying.</p>
          <p><a href="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/2</link>
        <pubDate>Fri, 10 Sep 2021 11:14:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2195-2</guid>
        <source url="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195.rss">Naming The Infix APPLY Operator</source>
      </item>
      <item>
        <title>Naming The Infix APPLY Operator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Now that we have the <strong><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834">Super Duper APPLY Operator Version 2.0</a></strong>, what's next...?</p>
<h1>
<a name="making-it-easier-to-use-1" class="anchor" href="https://forum.rebol.info#making-it-easier-to-use-1"></a>Making It Easier To Use!</h1>
<p>Imagine if we let <strong><code>&lt;-</code></strong> be an infix operator...taking the name of the function to apply on the left, and a block on the right:</p>
<pre><code>&lt;-: enfix func [
    'action [word! tuple! path! group!]
    args [block]
][
    apply (if group? action [do action] else [get action]) args
]
</code></pre>
<p>It's rather slick!</p>
<pre><code>&gt;&gt; append &lt;- [[a b c] &lt;d&gt; /dup 2]
== [a b c &lt;d&gt; &lt;d&gt;]

&gt;&gt; append/only &lt;- [[a b c] [e f] /dup 2]
== [a b c [e f] [e f]]
</code></pre>
<p>Of course, you can mix it up with your own freaky ideas, even variadic ones!</p>
<pre><code>&gt;&gt; $: enfixed func ['name [word!] 'args [&lt;variadic&gt; &lt;end&gt; any-value!]] [
    args: make block! args
    apply :(get name) args
]

&gt;&gt; data: [a b c]

&gt;&gt; (append $ /dup 2, data [d e])

&gt;&gt; print ["data is" mold data]
data is [a b c d e d e]
</code></pre>
<p>While that might kind of suck, it just was to get the point that there are options.  The choice is up to you.</p>
<h2>
<a name="we-will-need-an-apply-operator-we-just-have-to-decide-on-it-2" class="anchor" href="https://forum.rebol.info#we-will-need-an-apply-operator-we-just-have-to-decide-on-it-2"></a>We Will Need An Apply Operator, We Just Have To Decide On It</h2>
<p>I think the floodgates are pretty much open on "weird words" now.  The fact that you can't make them into SET-WORD!s or put them in PATH!s will just be life.  Maybe they'll be their own category distinct from WORD!, like SYMBOL! ?</p>
<p>Among things we'll get sooner or later are <strong>:</strong> and <strong>::</strong></p>
<pre><code>append :: [data [d e] /dup 2]
</code></pre>
<p>That's good-looking, but maybe too good looking...I think it should be saved for something in the type system as in other languages.</p>
<p>Arrows are associated with functions, and since <strong><code>-&gt;</code></strong> was being used for lambdas, I said that using leftward arrow for something "function related" made more sense than other things.  Well... APPLY is function-related, is it not?</p>
<pre><code>append &lt;- [data [d e] /dup 2]
</code></pre>
<p>Maybe POINTFREE could be shorthanded with lambda pointing at a GROUP! instead of a BLOCK!, or something along those lines?</p>
<pre><code>&gt;&gt; ap10: -&gt; (append _ 10)

&gt;&gt; ap10 [a b c]
== [a b c 10]

&gt;&gt; mp2: -&gt; (multiply 2)

&gt;&gt; mp2 10
== 20
</code></pre>
<p>It seems to me that if we're concerned that someone wants to actually calculate a body to use for a function, they wouldn't be using the shorthand lambda notation to do that and would use full FUNC.  Or those oddballs would be all right using <strong>-&gt; :(...)</strong> if they wanted that.</p>
<p>There's only so many keys on the keyboard in this universe.  How about it, &lt;- for APPLY?</p>
          <p><a href="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/naming-the-infix-apply-operator/2195/1</link>
        <pubDate>Thu, 09 Sep 2021 22:52:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2195-1</guid>
        <source url="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195.rss">Naming The Infix APPLY Operator</source>
      </item>
  </channel>
</rss>
