<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using LAMBDA/FUNC as a Generalized Binding Tool</title>
    <link>https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100</link>
    <description>I wrote up a bit on how [COLLECT and KEEP](https://rebol.metaeducation.com/t/implementing-collect-keep/2099) are implemented, where the &quot;keeper&quot; function is passed as an argument named KEEP to a function that has been built out of the collect body.

Historical Rebol&#39;s idea of binding in functions is that regardless of where the contents of a function body came from, any arguments or locals will be deeply bound... overriding previous bindings of the word.

So even in examples of a deep composition like this...

     keep: does [print &quot;Outer KEEP&quot;]
     code: [keep &lt;example&gt;]
     collect compose/deep [
         repeat 1 [
             repeat 1 [
                 repeat 1 (code)
             ]
         ]
     ]

...the KEEP composed into the collect body will find the KEEPER supplied by the COLLECT, not the function defined on the top line.

Questions raise about how it is possible to know that this is what was desired.  Preserving the original KEEP&#39;s meaning is another valid intent... and arguably the more conservative intent for composition.

## Biasing Toward Binding Preservation

@bradrn has suggested that if a block is bound, then KEEP would only be overridden in the topmost level.  The reason it would work would be due to a single-step of surgery done to merge the function&#39;s variables into the environment of the lambda&#39;s body block:

     keep: does [print &quot;Outer KEEP&quot;]
     code: [keep &lt;example&gt;]
     collect code  ; would generate [&lt;example&gt;] block

The proposal is that it only works because the KEEP inside of CODE is actually left unbound.  The CODE block itself has a binding on its tip, bestowed upon it when the evaluator passed over it...but this did not descend deeply.

You&#39;d get a different outcome if you bound KEEP itself.  Hypothetical code that would do that:

     keep: does [print &quot;Outer KEEP&quot;]
     code: compose [(bind-to-current &#39;keep) &lt;example&gt;]
     collect code  ; would print &quot;Outer KEEP&quot;

Also, the evaluator would defer to the bindings of blocks or groups found deeper than the topmost level.  They would not get the override:

     keep: does [print &quot;Outer KEEP&quot;]
     code: [keep &lt;example&gt;]
     collect compose [(as group! code)]  ; would print &quot;Outer KEEP&quot;

If you wanted to get already bound items to see the COLLECT&#39;s KEEP, you would need to &quot;punch holes&quot; in the binding.  For the moment, let&#39;s call the hole-punching construct UNUSE:

     keep: does [print &quot;Outer KEEP&quot;]
     code: [keep &lt;example&gt;]
     collect compose [(unuse [keep] as group! code)]  ; gathers [&lt;example&gt;]

## Why One Level of Binding, Not Zero?

It might seem a little random to &quot;override KEEP for one level of depth&quot;.  Why not always need UNUSE if working with bound material?

     keep: does [print &quot;Outer KEEP&quot;]
     code: [keep &lt;example&gt;]
     collect code  ; would print &quot;Outer KEEP&quot;

     keep: does [print &quot;Outer KEEP&quot;]
     code: [keep &lt;example&gt;]
     collect unuse [keep] code  ; would generate [&lt;example&gt;] block

The problem here is that the operating suggestion is that code is unbound by default, but blocks capture a binding in their environment under evaluation (again, just at the tip).  So ordinarily literal code like the following wouldn&#39;t work (nor would a lot of other things, like basic function definitions):

     keep: does [print &quot;Outer KEEP&quot;]
     collect [keep &lt;example&gt;]  ; would print &quot;Outer KEEP&quot;

So the concept of things like COLLECT (via LAMBDA) or FOR-EACH performing &quot;environment surgery&quot; at only the topmost level of a received block is mechanically tied to the notion of a common currency of blocks that have bindings at the tip, but are unbound otherwise.  These would be the most frequently dealt with blocks that are received.  The burden passes to those doing COMPOSE-like operations to be explicit about what holes they punch in the code they use, otherwise the default assumption is that all bindings will be interpreted as is.

In this line of thinking it isn&#39;t the shallow one-level-step of merging a tip-binding that is &quot;weird&quot;, it&#39;s the person composing in already-bound code that wants to give up some of its bindings.  So the burden is shifted to the composer.

## An Alternative To UNUSE of Bound Code: Unbound Code

Today all arrays get bound (and incorporate &quot;overbind&quot; instructions, like LETs).  But another proposal from @bradrn is that quoted code not add any binding under evaluation.  As source code starts out unbound, this would make it easier to create a code fragment that picks up all of its meaning as if it had been written where it is being composed:

     keep: does [print &quot;Outer KEEP&quot;]
     code: &#39;[keep &lt;example&gt;]  ; bypasses evaluator binding &quot;tip&quot; of block
     collect compose/deep [
         repeat 1 [
             repeat 1 [
                 repeat 1 (code)
             ]
         ]
     ]  ; would generate [&lt;example] block

This wouldn&#39;t be appropriate for something like passing a block of code to a function generator in a library.  But it could let some situations avoid needing to do an annoying amount of UNUSE-ing.

Note that this would apply to all quoted things, including quoted WORD!s.  This would make it harder to accidentally put stray bindings into things, meaning you&#39;d inherit the default interpretation of a block:

     keep: does [print &quot;Outer KEEP&quot;]
     code: []  ; tip binds current evaluative context
     collect [
         append code &#39;keep  ; unbound word inserted into bound block
         append code &lt;example&gt;
         do code  ; would print &quot;Outer Keep&quot;
     ]

This would reduce stray bindings in the system significantly, which is a good thing.</description>
    
    <lastBuildDate>Thu, 11 Jan 2024 07:01:23 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using LAMBDA/FUNC as a Generalized Binding Tool</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="4" data-topic="2100">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>And on that point, quoted things aren't unbound from evaluation... <em>they just don't change the binding from what they "contain" when evaluated.</em> […] For me, this is what really drives the <em>"don't bind"</em> rule for quotes... because it needs to be <em>"don't interfere"</em> for cases that don't have a WORD! reference available to shield from the evaluator's influence. Then it just so happens that all scanned material would start off unbound, so quoted source material would evaluate to being unbound.</p>
</blockquote>
</aside>
<p>Indeed, this is precisely what I meant too. When the evaluator encounters a quoted value, I feel it should <em>only</em> reduce the quoting level, and not modify the value in any way. To do otherwise would just confuse the idea of quoting as something which ‘protects’ a value.</p>
<p>This is also why I placed so much emphasis on creation vs evaluation. At first I was thinking that blocks could be bound as soon as they’re created by the scanner… but then I realised that makes no sense. So blocks must be created unbound, and that has the immediate side-effect of making quoted blocks evaluate to being unbound. (That’s why I called it ‘a natural consequence of how this system should be implemented’ above.)</p>
          <p><a href="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/5</link>
        <pubDate>Thu, 11 Jan 2024 07:01:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2100-5</guid>
        <source url="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100.rss">Using LAMBDA/FUNC as a Generalized Binding Tool</source>
      </item>
      <item>
        <title>Using LAMBDA/FUNC as a Generalized Binding Tool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2100">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Quoting to unbind is not really an ‘alternative’ choice… rather, it’s a natural consequence of how this system should be implemented.</p>
</blockquote>
</aside>
<p>When I said <em>"an alternative choice"</em> I meant <em>"an alternative choice to using UNUSE"</em> (clarified) e.g. the choice of using unbound code.</p>
<p>But as for the question of whether quoted code must be unbound... it could also be that all things are bound under evaluation, quoted or not, but you can UNBIND them.</p>
<p>You could write:</p>
<pre><code>keep: does [print "Outer KEEP"]
code: unbind '(keep &lt;example&gt;)
collect compose/deep [
    repeat 1 [
        repeat 1 [
            repeat 1 [(code)]
        ]
    ]
 ]  ; would generate [&lt;example&gt;] block
</code></pre>
<p>It would be easier to make bound non-inert arrays (GROUP!, SET-BLOCK!s, etc)... otherwise you'd need something like <strong>as group! [some block]</strong> or <strong>bind-to-current '(some group)</strong>.</p>
<p>This would let <strong><code>lambda [x] [get 'x]</code></strong> work, and thus be more compatible with today's expectations.</p>
<p><strong>But as I said, I like the idea that <a href="https://rebol.metaeducation.com/t/block-creation-vs-evaluation/2098/3">what happens when a quote level is dropped has parity with what happens when a variable is fetched</a>.</strong></p>
<p>And on that point, quoted things aren't unbound from evaluation... <em>they just don't change the binding from what they "contain" when evaluated.</em></p>
<pre><code>&gt;&gt; original: [print "Hi"]
== [print "Hi"]

&gt;&gt; do original
Hi

&gt;&gt; generated: do compose [(quote original)]  ; or ['(original)]
== [print "Hi"]

&gt;&gt; do generated
Hi
</code></pre>
<p>For me, this is what really drives the <em>"don't bind"</em> rule for quotes... because it needs to be <em>"don't interfere"</em> for cases that don't have a WORD! reference available to shield from the evaluator's influence.  Then it just so happens that all scanned material would start off unbound, so quoted source material would evaluate to being unbound.</p>
<p>Anyway, reducing the amount of stray bindings sounds very appealing, this feels like a good direction to be taking.</p>
          <p><a href="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/4</link>
        <pubDate>Thu, 11 Jan 2024 02:29:32 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2100-4</guid>
        <source url="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100.rss">Using LAMBDA/FUNC as a Generalized Binding Tool</source>
      </item>
      <item>
        <title>Using LAMBDA/FUNC as a Generalized Binding Tool</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>This is a really excellent summary of what I’m proposing; thank you for writing it up!</p>
<p>One minor note: I don’t <em>love</em> the term ‘tip-binding’, because it doesn’t seem quite right to me to call the outermost block the ‘tip’. But that’s a very minor and insignificant objection.</p>
<p>Also, here:</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2100">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>An Alternative Choice: Unbound Code</p>
</blockquote>
</aside>
<p>Quoting to unbind is not really an ‘alternative’ choice… rather, it’s a natural consequence of how this system should be implemented. It happens for the same reason that <code>fifth stuff</code> in your last example is unbound.</p>
          <p><a href="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/3</link>
        <pubDate>Thu, 11 Jan 2024 02:09:08 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2100-3</guid>
        <source url="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100.rss">Using LAMBDA/FUNC as a Generalized Binding Tool</source>
      </item>
      <item>
        <title>Using LAMBDA/FUNC as a Generalized Binding Tool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2100">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>keep: does [print "Outer KEEP"]
code: [keep &lt;example&gt;]
collect code  ; would generate [&lt;example&gt;] block
</code></pre>
<p>The proposal is that it only works because the KEEP inside of CODE is actually left unbound. The CODE block itself has a binding on its tip, bestowed upon it when the evaluator passed over it...but this did not descend deeply.</p>
</blockquote>
</aside>
<p>Echoing <a href="https://rebol.metaeducation.com/t/block-creation-vs-evaluation/2098">this post</a>... to make clear the implications of "tip-binding" under evaluation...</p>
<p>...in this model, the BLOCK! stored in the CODE variable is what has its tip bound (stored in the block specifier), not the BLOCK! literal that was evaluated to make it (that block's specifier is presumably null):</p>
<p>e.g.:</p>
<pre><code>&gt;&gt; stuff: [
       keep: does [print "Outer KEEP"]
       code: [keep &lt;example&gt;]
       collect code
   ]

&gt;&gt; do stuff
== [&lt;example&gt;]

&gt;&gt; fifth stuff
== [keep &lt;example&gt;]

&gt;&gt; do fifth stuff
** Error: KEEP is unbound

&gt;&gt; do code
Outer KEEP
== &lt;example&gt;
</code></pre>
<p>Here the tip binding of the block stored in STUFF would be to the console's context, received when the evaluator processed the block, which inherits from LIB.</p>
<p>The permissive allowance of KEEP and CODE to be assigned via SET-WORD! to that global context here vs. generate an error would mirror today's behavior... basically saying that unbounds default to trying to pop out of the lowest-level context in the "chain" (not counting LIB).  Though I've suggested that might need an analogue to LET that I've called EMERGE when in "strict mode", and that strict mode is probably a better default.</p>
          <p><a href="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/2</link>
        <pubDate>Wed, 10 Jan 2024 20:11:03 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2100-2</guid>
        <source url="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100.rss">Using LAMBDA/FUNC as a Generalized Binding Tool</source>
      </item>
      <item>
        <title>Using LAMBDA/FUNC as a Generalized Binding Tool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I wrote up a bit on how <a href="https://rebol.metaeducation.com/t/implementing-collect-keep/2099">COLLECT and KEEP</a> are implemented, where the "keeper" function is passed as an argument named KEEP to a function that has been built out of the collect body.</p>
<p>Historical Rebol's idea of binding in functions is that regardless of where the contents of a function body came from, any arguments or locals will be deeply bound... overriding previous bindings of the word.</p>
<p>So even in examples of a deep composition like this...</p>
<pre><code> keep: does [print "Outer KEEP"]
 code: [keep &lt;example&gt;]
 collect compose/deep [
     repeat 1 [
         repeat 1 [
             repeat 1 (code)
         ]
     ]
 ]
</code></pre>
<p>...the KEEP composed into the collect body will find the KEEPER supplied by the COLLECT, not the function defined on the top line.</p>
<p>Questions raise about how it is possible to know that this is what was desired.  Preserving the original KEEP's meaning is another valid intent... and arguably the more conservative intent for composition.</p>
<h2><a name="p-6900-biasing-toward-binding-preservation-1" class="anchor" href="https://rebol.metaeducation.com#p-6900-biasing-toward-binding-preservation-1"></a>Biasing Toward Binding Preservation</h2>
<p><a class="mention" href="https://rebol.metaeducation.com/u/bradrn">@bradrn</a> has suggested that if a block is bound, then KEEP would only be overridden in the topmost level.  The reason it would work would be due to a single-step of surgery done to merge the function's variables into the environment of the lambda's body block:</p>
<pre><code> keep: does [print "Outer KEEP"]
 code: [keep &lt;example&gt;]
 collect code  ; would generate [&lt;example&gt;] block
</code></pre>
<p>The proposal is that it only works because the KEEP inside of CODE is actually left unbound.  The CODE block itself has a binding on its tip, bestowed upon it when the evaluator passed over it...but this did not descend deeply.</p>
<p>You'd get a different outcome if you bound KEEP itself.  Hypothetical code that would do that:</p>
<pre><code> keep: does [print "Outer KEEP"]
 code: compose [(bind-to-current 'keep) &lt;example&gt;]
 collect code  ; would print "Outer KEEP"
</code></pre>
<p>Also, the evaluator would defer to the bindings of blocks or groups found deeper than the topmost level.  They would not get the override:</p>
<pre><code> keep: does [print "Outer KEEP"]
 code: [keep &lt;example&gt;]
 collect compose [(as group! code)]  ; would print "Outer KEEP"
</code></pre>
<p>If you wanted to get already bound items to see the COLLECT's KEEP, you would need to "punch holes" in the binding.  For the moment, let's call the hole-punching construct UNUSE:</p>
<pre><code> keep: does [print "Outer KEEP"]
 code: [keep &lt;example&gt;]
 collect compose [(unuse [keep] as group! code)]  ; gathers [&lt;example&gt;]
</code></pre>
<h2><a name="p-6900-why-one-level-of-binding-not-zero-2" class="anchor" href="https://rebol.metaeducation.com#p-6900-why-one-level-of-binding-not-zero-2"></a>Why One Level of Binding, Not Zero?</h2>
<p>It might seem a little random to "override KEEP for one level of depth".  Why not always need UNUSE if working with bound material?</p>
<pre><code> keep: does [print "Outer KEEP"]
 code: [keep &lt;example&gt;]
 collect code  ; would print "Outer KEEP"

 keep: does [print "Outer KEEP"]
 code: [keep &lt;example&gt;]
 collect unuse [keep] code  ; would generate [&lt;example&gt;] block
</code></pre>
<p>The problem here is that the operating suggestion is that code is unbound by default, but blocks capture a binding in their environment under evaluation (again, just at the tip).  So ordinarily literal code like the following wouldn't work (nor would a lot of other things, like basic function definitions):</p>
<pre><code> keep: does [print "Outer KEEP"]
 collect [keep &lt;example&gt;]  ; would print "Outer KEEP"
</code></pre>
<p>So the concept of things like COLLECT (via LAMBDA) or FOR-EACH performing "environment surgery" at only the topmost level of a received block is mechanically tied to the notion of a common currency of blocks that have bindings at the tip, but are unbound otherwise.  These would be the most frequently dealt with blocks that are received.  The burden passes to those doing COMPOSE-like operations to be explicit about what holes they punch in the code they use, otherwise the default assumption is that all bindings will be interpreted as is.</p>
<p>In this line of thinking it isn't the shallow one-level-step of merging a tip-binding that is "weird", it's the person composing in already-bound code that wants to give up some of its bindings.  So the burden is shifted to the composer.</p>
<h2><a name="p-6900-an-alternative-to-unuse-of-bound-code-unbound-code-3" class="anchor" href="https://rebol.metaeducation.com#p-6900-an-alternative-to-unuse-of-bound-code-unbound-code-3"></a>An Alternative To UNUSE of Bound Code: Unbound Code</h2>
<p>Today all arrays get bound (and incorporate "overbind" instructions, like LETs).  But another proposal from <a class="mention" href="https://rebol.metaeducation.com/u/bradrn">@bradrn</a> is that quoted code not add any binding under evaluation.  As source code starts out unbound, this would make it easier to create a code fragment that picks up all of its meaning as if it had been written where it is being composed:</p>
<pre><code> keep: does [print "Outer KEEP"]
 code: '[keep &lt;example&gt;]  ; bypasses evaluator binding "tip" of block
 collect compose/deep [
     repeat 1 [
         repeat 1 [
             repeat 1 (code)
         ]
     ]
 ]  ; would generate [&lt;example] block
</code></pre>
<p>This wouldn't be appropriate for something like passing a block of code to a function generator in a library.  But it could let some situations avoid needing to do an annoying amount of UNUSE-ing.</p>
<p>Note that this would apply to all quoted things, including quoted WORD!s.  This would make it harder to accidentally put stray bindings into things, meaning you'd inherit the default interpretation of a block:</p>
<pre><code> keep: does [print "Outer KEEP"]
 code: []  ; tip binds current evaluative context
 collect [
     append code 'keep  ; unbound word inserted into bound block
     append code &lt;example&gt;
     do code  ; would print "Outer Keep"
 ]
</code></pre>
<p>This would reduce stray bindings in the system significantly, which is a good thing.</p>
          <p><a href="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100/1</link>
        <pubDate>Wed, 10 Jan 2024 17:49:35 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2100-1</guid>
        <source url="https://rebol.metaeducation.com/t/using-lambda-func-as-a-generalized-binding-tool/2100.rss">Using LAMBDA/FUNC as a Generalized Binding Tool</source>
      </item>
  </channel>
</rss>
