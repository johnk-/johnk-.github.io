<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why Doesn&#39;t Ren-C Support LOGIC! for PICK ?</title>
    <link>https://rebol.metaeducation.com/t/why-doesnt-ren-c-support-logic-for-pick/2487</link>
    <description>Rebol2 and Red allow you to pick out of lists with LOGIC!... true gets the first element, false gets the second element:

    &gt;&gt; pick [a b] 1 = 1
    == a

    &gt;&gt; pick [a b] 1 = 2
    == b

Some people find it useful.  It&#39;s a way of turning a logical test into a value that&#39;s a little shorter than with EITHER, and it puts the two elements in juxtaposition:

    pick [thing1 thing2] condition

    either condition [thing1] [thing2]

What would be the harm of supporting it?</description>
    
    <lastBuildDate>Fri, 13 Jun 2025 02:16:30 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://rebol.metaeducation.com/t/why-doesnt-ren-c-support-logic-for-pick/2487.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why Doesn&#39;t Ren-C Support LOGIC! for PICK ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="rebolbot" data-post="1" data-topic="2487">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; pick [a b] 1 = 1
== a

&gt;&gt; pick [a b] 1 = 2
== b
</code></pre>
<p>What would be the harm of supporting it?</p>
</blockquote>
</aside>
<p><a href="https://rebol.metaeducation.com/t/flexible-logic-system-terminology/2252">Ren-C does not have a logic type for <code>#[true]</code> and <code>#[false]</code></a>.</p>
<p>The only falsey state in the system is the null antiform... and it does kind of double duty as "logically false" and "missing thing".</p>
<pre><code>&gt;&gt; 1 = 2
== \~null~\  ; antiform

&gt;&gt; try third [a b]
== \~null~\  ; antiform
</code></pre>
<p>The double-duty presents some opportunities and some challenges.  But it generally means you don't want to be passing nulls places that aren't "conditional".</p>
<p>The argument to PICK doesn't make a particularly good fit as being a "conditional" slot.  Passing NULL is far more likely to be a mistake than be intentional.  Randomly getting the second element of the block doesn't have a strong enough motivation.</p>
<p>Note Rebol2/Red don't let you pick with NONE as an equivalent to <code>#[false]</code>:</p>
<pre><code>rebol2&gt;&gt; pick [a b] none
** Script Error: ....
</code></pre>
<aside class="quote no-group" data-username="rebolbot" data-post="1" data-topic="2487">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p>It's a way of turning a logical test into a value that's a little shorter than:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">pick [thing1 thing2] condition

either condition [thing1] [thing2]
</code></pre>
</blockquote>
</aside>
<p>Note that Ren-C has <a href="https://rebol.metaeducation.com/t/soft-quoted-branching-light-elegant-fast/1020">soft quoted branching</a> so you could quite efficiently write:</p>
<pre><code>either condition 'thing1 'thing2
</code></pre>
<p>I'm not opposed to a construct existing that takes either a ~null~ antiform or an ~okay~ antiform and returns the first or second element of a block.  I just don't think PICK should do that.</p>
          <p><a href="https://rebol.metaeducation.com/t/why-doesnt-ren-c-support-logic-for-pick/2487/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-doesnt-ren-c-support-logic-for-pick/2487/2</link>
        <pubDate>Fri, 13 Jun 2025 02:16:30 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2487-2</guid>
        <source url="https://rebol.metaeducation.com/t/why-doesnt-ren-c-support-logic-for-pick/2487.rss">Why Doesn&#39;t Ren-C Support LOGIC! for PICK ?</source>
      </item>
      <item>
        <title>Why Doesn&#39;t Ren-C Support LOGIC! for PICK ?</title>
        <dc:creator><![CDATA[rebolbot]]></dc:creator>
        <description><![CDATA[
            <p>Rebol2 and Red allow you to pick out of lists with LOGIC!... true gets the first element, false gets the second element:</p>
<pre><code>&gt;&gt; pick [a b] 1 = 1
== a

&gt;&gt; pick [a b] 1 = 2
== b
</code></pre>
<p>Some people find it useful.  It's a way of turning a logical test into a value that's a little shorter than with EITHER, and it puts the two elements in juxtaposition:</p>
<pre><code>pick [thing1 thing2] condition

either condition [thing1] [thing2]
</code></pre>
<p>What would be the harm of supporting it?</p>
          <p><a href="https://rebol.metaeducation.com/t/why-doesnt-ren-c-support-logic-for-pick/2487/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-doesnt-ren-c-support-logic-for-pick/2487/1</link>
        <pubDate>Fri, 13 Jun 2025 02:06:11 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2487-1</guid>
        <source url="https://rebol.metaeducation.com/t/why-doesnt-ren-c-support-logic-for-pick/2487.rss">Why Doesn&#39;t Ren-C Support LOGIC! for PICK ?</source>
      </item>
  </channel>
</rss>
