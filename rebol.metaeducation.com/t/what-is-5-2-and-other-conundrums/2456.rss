<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What Is (5 / 2) ... And Other Conundrums</title>
    <link>https://rebol.metaeducation.com/t/what-is-5-2-and-other-conundrums/2456</link>
    <description>In Rebol2, R3-Alpha, and Red... division produces a DECIMAL!:

    red&gt;&gt; 5 / 2
    == 2.5

I&#39;ve never been crazy about the too-easy production of of DECIMAL!s.

## [Red Added `//` for INTEGER!-Division](https://github.com/red/red/issues/2433)

    &gt;&gt; 5 // 2
    == 1

That thread is very long and GitHub collapses it for some reason, be sure to click the &quot;LOAD MORE&quot; to see the whole thing.  (Note in particular **[@hiiamboris&#39;s modulo tests and graphs](https://gitlab.com/-/snippets/1901617)**.)

Note they might remove it.  It&#39;s a long thread and [hard to know what Nenad&#39;s conclusions are when he doesn&#39;t weigh in](https://github.com/red/red/issues/2433#issuecomment-1126994152).  But he did drop it from a milestone in 2022.

The big carry-away here is that this is a very nuanced topic that is tough to solve simply.  Boris asks:

&gt; &quot;Are we defining `//` as a divide operation *that always produces an integer* (float // float = int; int // float and float // int too) or a divide operation that does not promote the operands when they are both integers (only int // int)? (what will make more sense?)&quot;

Then there&#39;s other datatypes, VECTOR! etc...

## My Leaning Is Almost Always *Less Implicit Behavior*

...and because I like **`//`** very much for APPLY, I&#39;m happy to use DIV instead for infix integer division with no remainder.

    &gt;&gt; 5 / 2
    ** Error: INTEGER! division not even, use DIV or cast to DECIMAL

    &gt;&gt; 5 div 2
    == 2

    &gt;&gt; (to decimal! 5) / 2
    == 2.5

With FENCE! running CONSTRUCT, I&#39;ve proposed what construct does is that if the first expression resolves to a DATATYPE!...it interpret it as an intent to create that type.

This gives a lighter syntax:

    &gt;&gt; (to decimal! 5) / 2
    == 2.5

    &gt;&gt; {decimal! 5} / 2  ; saves 3 characters, but drops an entire word
    == 2.5

**I&#39;m Okay With INTEGER! / INTEGER! Giving An Error If The Result Isn&#39;t An INTEGER!**

A lot of times when I divide things that are integers I *know* they are evenly divisible.

If I don&#39;t know they are, then a decimal dropping out rarely &quot;just works&quot; without some additional code or mitigation, unless I&#39;m printing out some kind of percentage result and the usage stops at the user&#39;s eyes.</description>
    
    <lastBuildDate>Sat, 17 May 2025 11:04:24 +0000</lastBuildDate>
    <category>Math</category>
    <atom:link href="https://rebol.metaeducation.com/t/what-is-5-2-and-other-conundrums/2456.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What Is (5 / 2) ... And Other Conundrums</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In Rebol2, R3-Alpha, and Red... division produces a DECIMAL!:</p>
<pre><code>red&gt;&gt; 5 / 2
== 2.5
</code></pre>
<p>I've never been crazy about the too-easy production of of DECIMAL!s.</p>
<h2><a name="p-8302-red-added-for-integer-divisionhttpsgithubcomredredissues2433-1" class="anchor" href="https://rebol.metaeducation.com#p-8302-red-added-for-integer-divisionhttpsgithubcomredredissues2433-1"></a><a href="https://github.com/red/red/issues/2433">Red Added <code>//</code> for INTEGER!-Division</a></h2>
<pre><code>&gt;&gt; 5 // 2
== 1
</code></pre>
<p>That thread is very long and GitHub collapses it for some reason, be sure to click the "LOAD MORE" to see the whole thing.  (Note in particular <strong><a href="https://gitlab.com/-/snippets/1901617">@hiiamboris's modulo tests and graphs</a></strong>.)</p>
<p>Note they might remove it.  It's a long thread and <a href="https://github.com/red/red/issues/2433#issuecomment-1126994152">hard to know what Nenad's conclusions are when he doesn't weigh in</a>.  But he did drop it from a milestone in 2022.</p>
<p>The big carry-away here is that this is a very nuanced topic that is tough to solve simply.  Boris asks:</p>
<blockquote>
<p>"Are we defining <code>//</code> as a divide operation <em>that always produces an integer</em> (float // float = int; int // float and float // int too) or a divide operation that does not promote the operands when they are both integers (only int // int)? (what will make more sense?)"</p>
</blockquote>
<p>Then there's other datatypes, VECTOR! etc...</p>
<h2><a name="p-8302-my-leaning-is-almost-always-less-implicit-behavior-2" class="anchor" href="https://rebol.metaeducation.com#p-8302-my-leaning-is-almost-always-less-implicit-behavior-2"></a>My Leaning Is Almost Always <em>Less Implicit Behavior</em></h2>
<p>...and because I like <strong><code>//</code></strong> very much for APPLY, I'm happy to use DIV instead for infix integer division with no remainder.</p>
<pre><code>&gt;&gt; 5 / 2
** Error: INTEGER! division not even, use DIV or cast to DECIMAL

&gt;&gt; 5 div 2
== 2

&gt;&gt; (to decimal! 5) / 2
== 2.5
</code></pre>
<p>With FENCE! running CONSTRUCT, I've proposed what construct does is that if the first expression resolves to a DATATYPE!...it interpret it as an intent to create that type.</p>
<p>This gives a lighter syntax:</p>
<pre><code>&gt;&gt; (to decimal! 5) / 2
== 2.5

&gt;&gt; {decimal! 5} / 2  ; saves 3 characters, but drops an entire word
== 2.5
</code></pre>
<p><strong>I'm Okay With INTEGER! / INTEGER! Giving An Error If The Result Isn't An INTEGER!</strong></p>
<p>A lot of times when I divide things that are integers I <em>know</em> they are evenly divisible.</p>
<p>If I don't know they are, then a decimal dropping out rarely "just works" without some additional code or mitigation, unless I'm printing out some kind of percentage result and the usage stops at the user's eyes.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-is-5-2-and-other-conundrums/2456/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-is-5-2-and-other-conundrums/2456/1</link>
        <pubDate>Sat, 17 May 2025 07:18:06 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2456-1</guid>
        <source url="https://rebol.metaeducation.com/t/what-is-5-2-and-other-conundrums/2456.rss">What Is (5 / 2) ... And Other Conundrums</source>
      </item>
  </channel>
</rss>
