<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>MOLD and LOAD parity</title>
    <link>https://rebol.metaeducation.com/t/mold-and-load-parity/1429</link>
    <description>It occurred to me in [this post](https://rebol.metaeducation.com/t/the-simple-things-matter-the-most/1428/8) that MOLD/ONLY appears to work at odds to other /ONLY options:

    &gt;&gt; append [] []
    == []

    â€Œ&gt;&gt; append/only [] []
    == [[]]

    â€Œ&gt;&gt; mold []
    == &quot;[]&quot;

    â€Œ&gt;&gt; mold/only []
    == &quot;&quot;

As [my solution to /ONLY](https://rebol.metaeducation.com/t/cutting-out-only-could-we-make-append-find-etc-only-accept-blocks/1182/10?u=rgchris) is to use an optimized equivalent of [**func [value][reduce [value]]**](), this highlights the discrepency:

    &gt;&gt; append only [] []  ; same as append/only
    == [[]]

    &gt;&gt; mold only []  ; not same as mold/only
    == &quot;[[]]&quot;


How then should MOLD handle blocks, and what are the implications for LOAD? Let&#39;s assume that current MOLD/ONLY is the correct behaviour for BLOCK!:

    &gt;&gt; mold [1 2 3]
    == &quot;1 2 3&quot;

    &gt;&gt; load &quot;1 2 3&quot;
    == [1 2 3]

This seems fine until you get to single-length blocks:

    &gt;&gt; mold [1]
    == &quot;1&quot;

    &gt;&gt; load &quot;1&quot;
    == 1

Clearly this is now an inconsistency in LOAD. LOAD/ALL would get you there:

    &gt;&gt; load/all &quot;1&quot;
    == [1]

Should LOAD/ALL then be the default? Probably. Proposition: MOLD/ONLY and LOAD/ALL become MOLD and LOAD. Yay! There is a parity where it matters most: (de)serialization of a block of values.

The wrinkle is: loading singular values is useful. Lost is the MOLD/LOAD parity when handling non-blocks:

    &gt;&gt; mold 1
    == &quot;1&quot;

    &gt;&gt; load &quot;1&quot;
    == [1]

Where to go with that? Lost is shorthand validation of snippets of text:

    &gt;&gt; type-of load &quot;10-Dec-2020&quot;
    == date!

    &gt;&gt; type-of load &quot;http://rebol.info&quot;
    == url!

I&#39;d argue that this is beyond the scope of LOADâ€”LOAD is an overloaded (ðŸ˜Ž) function and the more critical behaviour is to return a block. It would be more fitting to dedicate a separate wrapper for TRANSCODE that is less likely to use the polymorphic demands of loading from external sources and craps out if, leading/trailing whitespace aside, the content doesn&#39;t conform to a single value (even if that value is a GROUP!). Spitballingâ€”DETECT, DISCERN, whatever:

    &gt;&gt; map-each value [&quot;10-Dec-2020&quot; &quot;http://rebol.info&quot;] [type-of detect value]
    == [date! url!]

    &gt;&gt; detect &quot;1 2 3&quot;
    == ERROR! #!*^!#%@$

Thus MOLD of BLOCK! holds parity with LOAD; MOLD of non-block holds parity with DETECT (or other name).</description>
    
    <lastBuildDate>Tue, 08 Oct 2024 20:39:30 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/mold-and-load-parity/1429.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1429">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>It occurred to me in <a href="https://rebol.metaeducation.com/t/the-simple-things-matter-the-most/1428/8">this post </a> that MOLD/ONLY appears to work at odds to other /ONLY options:</p>
</blockquote>
</aside>
<p>Historical MOLD/ONLY is indeed backwards...</p>
<p>...which motivated making an exception for MOLD not taking antiforms for splices.  MOLD of a splice will <a href="https://rebol.metaeducation.com/t/mold-only-vs-mold-spread/2059">mold the contents with no delimiters</a>:</p>
<pre><code>&gt;&gt; mold [a b c]
== "[a b c]"

&gt;&gt; mold spread [a b c]
== "a b c"
</code></pre>
<p>Nice and neat.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1429">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So you can put together a thought like:</p>
<pre><code>&gt;&gt; something: "1"

&gt;&gt; ensure integer! single of load something
== 1
</code></pre>
<p>Or you could shorthand the <code>single of load</code> behavior as just <strong>LOAD-VALUE</strong> (I'm trying that out...)</p>
</blockquote>
</aside>
<p>I'm going with the concept that <a href="https://rebol.metaeducation.com/t/do-of-text-as-synonym-of-do-of-file-containing-string/2125">DO and LOAD require a script header</a>.</p>
<p>Also: LOAD was previously needed to get an initial binding.  But with pure virtual binding, unbound code is a more practical currency, and you should be getting an unbound value back from "LOAD-VALUE".</p>
<p>So that's two reasons why LOAD-VALUE is badly named in the current world.  It's really TRANSCODE:ONE, plus ensuring that there's no leftover.  Output lacks a binding and input lacks a header, so it's not LOAD-like.</p>
<p>Calling it <strong><code>transcode:one</code></strong> is accurate, though a little wordy...  <img src="https://rebol.metaeducation.com/images/emoji/twitter/frowning.png?v=14" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
<p>I don't know what the alternatives would be.  TO-VALUE?</p>
<pre><code>&gt;&gt; to-value "{abc}"
== {abc}  ; a text! value... but "{abc}" was a text! value too
</code></pre>
<p>Maybe learnable that it really means (STRING-)TO(-TRANSCODED-SINGLE)-VALUE without having to write that all out?  But it's actually TO-ELEMENT if you want to be fully accurate, since you can't get antiforms.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/face_with_spiral_eyes.png?v=14" title=":face_with_spiral_eyes:" class="emoji" alt=":face_with_spiral_eyes:" loading="lazy" width="20" height="20"></p>
<p><strong>I think that <code>TRANSCODE:ONE</code> is probably the best idea for this, for now.</strong>  It puts the functionality in the right place, where people who use it can find more powerful versions (or people using the more powerful versions can realize there's a simpler convenience available).</p>
          <p><a href="https://rebol.metaeducation.com/t/mold-and-load-parity/1429/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/mold-and-load-parity/1429/6</link>
        <pubDate>Fri, 19 Jan 2024 13:54:38 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1429-6</guid>
        <source url="https://rebol.metaeducation.com/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://rebol.metaeducation.com/t/plugging-the-script-header-hole/1430">Plugging The Script Header Hole</a></p>
          <p><a href="https://rebol.metaeducation.com/t/mold-and-load-parity/1429/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/mold-and-load-parity/1429/5</link>
        <pubDate>Fri, 11 Dec 2020 06:37:00 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1429-5</guid>
        <source url="https://rebol.metaeducation.com/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1429">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>LOAD is an overloaded (<img src="https://rebol.metaeducation.com/images/emoji/twitter/sunglasses.png?v=14" title=":sunglasses:" class="emoji" alt=":sunglasses:" loading="lazy" width="20" height="20">) function</p>
</blockquote>
</aside>
<p>One aspect of this overloading is that it's trying to handle arbitrary file formats and codecs as well.</p>
<pre><code>load %whatever.png
</code></pre>
<p>So although I said <strong>LOAD should always return a BLOCK!</strong> that would be understood here to mean <strong>well, at least LOAD of 'rebol code should always return a BLOCK!</strong>.</p>
<p>TRANSCODE is now easy to use.  It handles TEXT! as well as BINARY! (as TEXT! is also UTF-8 underlying):</p>
<pre><code>&gt;&gt; transcode "a &lt;b&gt; 10"
== [a &lt;b&gt; 10]

&gt;&gt; [rest value]: transcode/next "a &lt;b&gt; 10"
== " &lt;b&gt; 10"

&gt;&gt; value
== a
</code></pre>
<p>But even if /ALL goes away, there's always going to be parameterization settings to the underlying "codec" that powers generic loading.  Does the code-loading "codec" have options?  I think it should...policies like allowing or disallowing CR/LF or tabs, etc.  Compatibility options, like BINARY! as #{...} instead of &amp;{...}.</p>
<p><strong>So is there a hard and fast reason why there wouldn't be an option of "load just one value?" in the "code-loading codec"?</strong></p>
<p>...I think it's something that is probably not worth it to include.  But just wanted to point out that LOAD is theorized to do much more, and parameterization <em>will</em> be necessary.</p>
          <p><a href="https://rebol.metaeducation.com/t/mold-and-load-parity/1429/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/mold-and-load-parity/1429/4</link>
        <pubDate>Fri, 11 Dec 2020 01:08:51 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1429-4</guid>
        <source url="https://rebol.metaeducation.com/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1429">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Let's assume that current MOLD/ONLY is the correct behaviour for BLOCK!:</p>
</blockquote>
</aside>
<p><strong>I definitely favor the idea that LOAD always returns a BLOCK!</strong>, and that if you think the load operation will return one-and-only-one item there be an extractor for that:</p>
<pre><code>&gt;&gt; single of [1]
== 1

&gt;&gt; single of [1 2]
** Error: single used on block with more than one item
</code></pre>
<p>So you can put together a thought like:</p>
<pre><code>&gt;&gt; something: "1"

&gt;&gt; ensure integer! single of load something
== 1
</code></pre>
<p>Or you could shorthand the <code>single of load</code> behavior as just <strong>LOAD-VALUE</strong> (I'm trying that out...)</p>
          <p><a href="https://rebol.metaeducation.com/t/mold-and-load-parity/1429/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/mold-and-load-parity/1429/3</link>
        <pubDate>Thu, 10 Dec 2020 23:18:44 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1429-3</guid>
        <source url="https://rebol.metaeducation.com/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>If this were to come to pass, one would need to learn the dissonance between using MOLD on a BLOCK! vs. using MOLD on other values. Shorter, there would <strong>not</strong> be parity between MOLD BLOCK and DETECT*. That dissonance exists everywhere in the post-/ONLY world anyways though.</p>
<p>DETECT should be able to handle a stringified block, thus:</p>
<pre><code class="lang-plaintext">&gt;&gt; mold only [block of things]
== "[block of things]"

&gt;&gt; detect "[block of things]"
== [block of things]
</code></pre>
<p>I believe this proposal and my ONLY one addresses a couple of inconsistencies in the language.</p>
<p>*Not convinced re. the name</p>
          <p><a href="https://rebol.metaeducation.com/t/mold-and-load-parity/1429/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/mold-and-load-parity/1429/2</link>
        <pubDate>Thu, 10 Dec 2020 23:10:40 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1429-2</guid>
        <source url="https://rebol.metaeducation.com/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
      <item>
        <title>MOLD and LOAD parity</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>It occurred to me in <a href="https://rebol.metaeducation.com/t/the-simple-things-matter-the-most/1428/8">this post</a> that MOLD/ONLY appears to work at odds to other /ONLY options:</p>
<pre><code>&gt;&gt; append [] []
== []

â€Œ&gt;&gt; append/only [] []
== [[]]

â€Œ&gt;&gt; mold []
== "[]"

â€Œ&gt;&gt; mold/only []
== ""
</code></pre>
<p>As <a href="https://rebol.metaeducation.com/t/cutting-out-only-could-we-make-append-find-etc-only-accept-blocks/1182/10">my solution to /ONLY</a> is to use an optimized equivalent of <a><strong>func [value][reduce [value]]</strong></a>, this highlights the discrepency:</p>
<pre><code>&gt;&gt; append only [] []  ; same as append/only
== [[]]

&gt;&gt; mold only []  ; not same as mold/only
== "[[]]"
</code></pre>
<p>How then should MOLD handle blocks, and what are the implications for LOAD? Let's assume that current MOLD/ONLY is the correct behaviour for BLOCK!:</p>
<pre><code>&gt;&gt; mold [1 2 3]
== "1 2 3"

&gt;&gt; load "1 2 3"
== [1 2 3]
</code></pre>
<p>This seems fine until you get to single-length blocks:</p>
<pre><code>&gt;&gt; mold [1]
== "1"

&gt;&gt; load "1"
== 1
</code></pre>
<p>Clearly this is now an inconsistency in LOAD. LOAD/ALL would get you there:</p>
<pre><code>&gt;&gt; load/all "1"
== [1]
</code></pre>
<p>Should LOAD/ALL then be the default? Probably. Proposition: MOLD/ONLY and LOAD/ALL become MOLD and LOAD. Yay! There is a parity where it matters most: (de)serialization of a block of values.</p>
<p>The wrinkle is: loading singular values is useful. Lost is the MOLD/LOAD parity when handling non-blocks:</p>
<pre><code>&gt;&gt; mold 1
== "1"

&gt;&gt; load "1"
== [1]
</code></pre>
<p>Where to go with that? Lost is shorthand validation of snippets of text:</p>
<pre><code>&gt;&gt; type-of load "10-Dec-2020"
== date!

&gt;&gt; type-of load "http://rebol.info"
== url!
</code></pre>
<p>I'd argue that this is beyond the scope of LOADâ€”LOAD is an overloaded (<img src="https://rebol.metaeducation.com/images/emoji/twitter/smiling_face_with_sunglasses.png?v=14" title=":smiling_face_with_sunglasses:" class="emoji" alt=":smiling_face_with_sunglasses:" loading="lazy" width="20" height="20">) function and the more critical behaviour is to return a block. It would be more fitting to dedicate a separate wrapper for TRANSCODE that is less likely to use the polymorphic demands of loading from external sources and craps out if, leading/trailing whitespace aside, the content doesn't conform to a single value (even if that value is a GROUP!). Spitballingâ€”DETECT, DISCERN, whatever:</p>
<pre><code>&gt;&gt; map-each value ["10-Dec-2020" "http://rebol.info"] [type-of detect value]
== [date! url!]

&gt;&gt; detect "1 2 3"
== ERROR! #!*^!#%@$
</code></pre>
<p>Thus MOLD of BLOCK! holds parity with LOAD; MOLD of non-block holds parity with DETECT (or other name).</p>
          <p><a href="https://rebol.metaeducation.com/t/mold-and-load-parity/1429/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/mold-and-load-parity/1429/1</link>
        <pubDate>Thu, 10 Dec 2020 23:00:25 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1429-1</guid>
        <source url="https://rebol.metaeducation.com/t/mold-and-load-parity/1429.rss">MOLD and LOAD parity</source>
      </item>
  </channel>
</rss>
