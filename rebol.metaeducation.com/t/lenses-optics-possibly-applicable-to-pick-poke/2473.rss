<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Lenses/Optics Possibly Applicable to PICK/POKE</title>
    <link>https://rebol.metaeducation.com/t/lenses-optics-possibly-applicable-to-pick-poke/2473</link>
    <description>https://rebol.metaeducation.com/t/get-set-vs-pick-poke-whats-the-difference/1719

Reading this, I am reminded *very* strongly of functional optics, as implemented in e.g. Haskell’s [`lens`](https://hackage.haskell.org/package/lens) or [`optics`](https://hackage.haskell.org/package/optics). These are, essentially, first-class encodings of composable ‘locations’ at which you can get or set. For instance:

```
ghci&gt; import Control.Lens
ghci&gt; value = (5,10,(&quot;nested&quot;,&quot;values&quot;))
ghci&gt; view _1 value
5
ghci&gt; view (_3 . _1) value
&quot;nested&quot;
ghci&gt; set _1 6 value
(6,10,(&quot;nested&quot;,&quot;values&quot;))
ghci&gt; set (_3 . _2) &quot;new&quot; value
(5,10,(&quot;nested&quot;,&quot;new&quot;))
```

Here `_1`, `_2` and `_3` are predefined ‘lenses’ for getting elements of a tuple. All lenses can be composed: `_3 . _2` is a lens pointing to the second element of the third element of a tuple.

You can define your own lenses, of course:

```
ghci&gt; data MyRecord = MyRecord { field1 :: Int, field2 :: String } deriving (Show)
ghci&gt; field1Lens = lens field1 (\r v -&gt; r { field1 = v })
ghci&gt; view field1Lens $ MyRecord { field1=10, field2=&quot;test&quot; }
10
ghci&gt; set field1Lens 20 $ MyRecord { field1=10, field2=&quot;test&quot; }
MyRecord {field1 = 20, field2 = &quot;test&quot;}
```

…although there are macros to do it for you (which most people use).

Incidentally, `lens` also comes about as close to dialecting as is possible in Haskell. There are operator versions of everything: `value ^. lens` gets, `value &amp; lens .~ newvalue` sets. Many operators effectively let you simulate imperative programming: e.g. `value &amp; lens +~ 1` increments the value at the `lens`.

There are various ways of actually implementing these things. The simplest is simply by storing a getter and a setter together, defining appropriate functions to manipulate them self-consistently. `lens` uses the [van Laarhoven encoding](https://www.twanvl.nl/blog/haskell/cps-functional-references), which represents them as a higher-order function parameterised over a typeclass. `optics` uses a variation on this, the ‘profunctor encoding’ (for which see the [Glassery](https://oleg.fi/gists/posts/2017-04-18-glassery.html)).

The latter two encodings are in fact immensely powerful, allowing for a number of different generalisations on the basic theme. For instance, a `Traversal` points to multiple values at once:

```
ghci&gt; [1,2,3,4,5] &amp; traverse +~ 10
[11,12,13,14,15]
ghci&gt; [1,2,3,4,5] &amp; taking 3 traverse +~ 10
[11,12,13,4,5]
ghci&gt; [1,2,3,4,5] &amp; dropping 3 traverse +~ 10
[1,2,3,14,15]
ghci&gt; [(1,2),(3,4),(5,6),(7,8),(9,10)] &amp; (dropping 3 traverse . both) +~ 10
[(1,2),(3,4),(5,6),(17,18),(19,20)]
ghci&gt; [(1,2),(3,4),(5,6),(7,8),(9,10)] &amp; dropping 3 (traverse.both) +~ 10
[(1,2),(3,14),(15,16),(17,18),(19,20)]
ghci&gt; [(1,2),(3,4),(5,6),(7,8),(9,10)] &amp; dropping 3 (traverse._1) +~ 10
[(1,2),(3,4),(5,6),(17,8),(19,10)]
```

As you can see, they combine nicely with other traversals and lenses, with a great deal of specificity. Similarly, `Prism`s let you select things which may be present or absent:

```
ghci&gt; Left 1 &amp; _Left +~ 10
Left 11
ghci&gt; Right 1 &amp; _Left +~ 10
Right 1
ghci&gt; isn&#39;t _Left (Left 1)
False
ghci&gt; isn&#39;t _Left (Right 1)
True
```

Of course they too can combine with lenses, traversals, and all the other things defined by `lens` (e.g. the operator `+~`, as above).

I could go on like this for a while but I’ll stop here…!</description>
    
    <lastBuildDate>Wed, 04 Jun 2025 17:20:47 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://rebol.metaeducation.com/t/lenses-optics-possibly-applicable-to-pick-poke/2473.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Lenses/Optics Possibly Applicable to PICK/POKE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="bradrn" data-post="1" data-topic="2473">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p><code>lens</code> also comes about as close to dialecting as is possible in Haskell.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">ghci&gt; [1,2,3,4,5] &amp; traverse +~ 10
[11,12,13,14,15]
ghci&gt; [1,2,3,4,5] &amp; taking 3 traverse +~ 10
[11,12,13,4,5]
ghci&gt; [1,2,3,4,5] &amp; dropping 3 traverse +~ 10
[1,2,3,14,15]
</code></pre>
</blockquote>
</aside>
<p>Thanks for giving some concrete examples.  I read about these once, in cartoon format, but didn't really absorb it:</p>
<p><a href="https://www.adit.io/posts/2013-07-22-lenses-in-pictures.html" class="inline-onebox">Lenses In Pictures - adit.io</a></p>
<p>Where things are going with tuple picking, it's fairly specialized code, e.g.:</p>
<pre><code>map.^field: x  =&gt;  (unlift map.field: lift x)

^map.field: x  =&gt;  (unlift map).field: x

map.(^field): x  =&gt;  map.(unlift field): x

map.('^field): x  =&gt;  map.(the ^field): x

map.'^field: x  =&gt;  map.(the ^field): x
</code></pre>
<p><em>(Hopefully this makes sense, <a href="https://rebol.metaeducation.com/t/did-i-change-the-wrong-name-x-lift-vs-meta/2466">including the META=&gt;LIFT rename</a>, speak up if not.)</em></p>
<p>Other nuanced behavior will likely apply to <code>@</code> and <code>$</code> tuple-members.  So sitting on top of any reading/writing facility is some behavior that will probably be quite hard to generalize.</p>
<p>Also, this is really central to the system's performance, as it's all being interpreted.  Needs tricks to make it perform adequately.  So it's probably going to be just a shadow of a generalization.</p>
<p>But maybe some prototyping of lens-like things in usermode would be worth doing.  Now that there's a pretty good method for adding (and typechecking) arbitrary extension types, dabbling with a persistent vector extension could be interesting...to see if there could be some lensing that generalizes across mutable and immutable structures.</p>
          <p><a href="https://rebol.metaeducation.com/t/lenses-optics-possibly-applicable-to-pick-poke/2473/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/lenses-optics-possibly-applicable-to-pick-poke/2473/2</link>
        <pubDate>Wed, 04 Jun 2025 16:59:22 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2473-2</guid>
        <source url="https://rebol.metaeducation.com/t/lenses-optics-possibly-applicable-to-pick-poke/2473.rss">Lenses/Optics Possibly Applicable to PICK/POKE</source>
      </item>
      <item>
        <title>Lenses/Optics Possibly Applicable to PICK/POKE</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote quote-modified" data-post="1" data-topic="1719">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar">
    <a href="https://rebol.metaeducation.com/t/get-set-vs-pick-poke-whats-the-difference/1719">GET+SET vs PICK+POKE - What's The Difference?</a> <a class="badge-category__wrapper " href="https://rebol.metaeducation.com/c/development/semantics/55"><span data-category-id="55" style="--category-badge-color: #25AAE2; --category-badge-text-color: #FFFFFF; --parent-category-badge-color: #25AAE2;" data-parent-category-id="8" data-drop-close="true" class="badge-category --has-parent" title="While the &quot;Internals&quot; discusses the bits and bytes of how things are implemented, this category is for discussing things design questions of the language... like what do [] should return."><span class="badge-category__name">Semantics</span></span></a>
  </div>
  <blockquote>
    Historically, GET could not get a path: 
rebol2&gt;&gt; obj: make object! [x: 10]

rebol2&gt;&gt; get 'obj/x
** Script Error: get expected word argument of type: any-word object none

That changed in R3-Alpha.  Red followed suit: 
r3-alpha/red&gt;&gt; get 'obj/x
== 10

Which seems like an improvement...but opened the door to something I've complained about: GET having side-effects, such as: 
red&gt;&gt; path: 'obj/(print "Boo!" 'x)
== obj/(print "Boo!" 'x)

red&gt;&gt; get path
Boo!
== 10

When you say that two sequential GE…
  </blockquote>
</aside>

<p>Reading this, I am reminded <em>very</em> strongly of functional optics, as implemented in e.g. Haskell’s <a href="https://hackage.haskell.org/package/lens"><code>lens</code></a> or <a href="https://hackage.haskell.org/package/optics"><code>optics</code></a>. These are, essentially, first-class encodings of composable ‘locations’ at which you can get or set. For instance:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">ghci&gt; import Control.Lens
ghci&gt; value = (5,10,("nested","values"))
ghci&gt; view _1 value
5
ghci&gt; view (_3 . _1) value
"nested"
ghci&gt; set _1 6 value
(6,10,("nested","values"))
ghci&gt; set (_3 . _2) "new" value
(5,10,("nested","new"))
</code></pre>
<p>Here <code>_1</code>, <code>_2</code> and <code>_3</code> are predefined ‘lenses’ for getting elements of a tuple. All lenses can be composed: <code>_3 . _2</code> is a lens pointing to the second element of the third element of a tuple.</p>
<p>You can define your own lenses, of course:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">ghci&gt; data MyRecord = MyRecord { field1 :: Int, field2 :: String } deriving (Show)
ghci&gt; field1Lens = lens field1 (\r v -&gt; r { field1 = v })
ghci&gt; view field1Lens $ MyRecord { field1=10, field2="test" }
10
ghci&gt; set field1Lens 20 $ MyRecord { field1=10, field2="test" }
MyRecord {field1 = 20, field2 = "test"}
</code></pre>
<p>…although there are macros to do it for you (which most people use).</p>
<p>Incidentally, <code>lens</code> also comes about as close to dialecting as is possible in Haskell. There are operator versions of everything: <code>value ^. lens</code> gets, <code>value &amp; lens .~ newvalue</code> sets. Many operators effectively let you simulate imperative programming: e.g. <code>value &amp; lens +~ 1</code> increments the value at the <code>lens</code>.</p>
<p>There are various ways of actually implementing these things. The simplest is simply by storing a getter and a setter together, defining appropriate functions to manipulate them self-consistently. <code>lens</code> uses the <a href="https://www.twanvl.nl/blog/haskell/cps-functional-references">van Laarhoven encoding</a>, which represents them as a higher-order function parameterised over a typeclass. <code>optics</code> uses a variation on this, the ‘profunctor encoding’ (for which see the <a href="https://oleg.fi/gists/posts/2017-04-18-glassery.html">Glassery</a>).</p>
<p>The latter two encodings are in fact immensely powerful, allowing for a number of different generalisations on the basic theme. For instance, a <code>Traversal</code> points to multiple values at once:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">ghci&gt; [1,2,3,4,5] &amp; traverse +~ 10
[11,12,13,14,15]
ghci&gt; [1,2,3,4,5] &amp; taking 3 traverse +~ 10
[11,12,13,4,5]
ghci&gt; [1,2,3,4,5] &amp; dropping 3 traverse +~ 10
[1,2,3,14,15]
ghci&gt; [(1,2),(3,4),(5,6),(7,8),(9,10)] &amp; (dropping 3 traverse . both) +~ 10
[(1,2),(3,4),(5,6),(17,18),(19,20)]
ghci&gt; [(1,2),(3,4),(5,6),(7,8),(9,10)] &amp; dropping 3 (traverse.both) +~ 10
[(1,2),(3,14),(15,16),(17,18),(19,20)]
ghci&gt; [(1,2),(3,4),(5,6),(7,8),(9,10)] &amp; dropping 3 (traverse._1) +~ 10
[(1,2),(3,4),(5,6),(17,8),(19,10)]
</code></pre>
<p>As you can see, they combine nicely with other traversals and lenses, with a great deal of specificity. Similarly, <code>Prism</code>s let you select things which may be present or absent:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">ghci&gt; Left 1 &amp; _Left +~ 10
Left 11
ghci&gt; Right 1 &amp; _Left +~ 10
Right 1
ghci&gt; isn't _Left (Left 1)
False
ghci&gt; isn't _Left (Right 1)
True
</code></pre>
<p>Of course they too can combine with lenses, traversals, and all the other things defined by <code>lens</code> (e.g. the operator <code>+~</code>, as above).</p>
<p>I could go on like this for a while but I’ll stop here…!</p>
          <p><a href="https://rebol.metaeducation.com/t/lenses-optics-possibly-applicable-to-pick-poke/2473/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/lenses-optics-possibly-applicable-to-pick-poke/2473/1</link>
        <pubDate>Wed, 04 Jun 2025 04:31:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2473-1</guid>
        <source url="https://rebol.metaeducation.com/t/lenses-optics-possibly-applicable-to-pick-poke/2473.rss">Lenses/Optics Possibly Applicable to PICK/POKE</source>
      </item>
  </channel>
</rss>
