<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>@earl&#39;s tiny httpd server, circa 2009</title>
    <link>https://rebol.metaeducation.com/t/earls-tiny-httpd-server-circa-2009/1842</link>
    <description>This little httpd server was the basis for our current httpd.  It&#39;s worth looking at to think about what the minimum requirements for a server are...and how our current implementation might be too heavy in places.

But it was in the tests directory, and it hasn&#39;t been used in any test for a long time.  Rather than upgrade it, I decided it better to archive it here.

    REBOL [title: &quot;A tiny static HTTP server&quot; author: &#39;abolka date: 2009-11-04]

    code-map: make map! [200 &quot;OK&quot; 400 &quot;Forbidden&quot; 404 &quot;Not Found&quot;]
    mime-map: make map! [
        &quot;html&quot; &quot;text/html&quot; &quot;css&quot; &quot;text/css&quot; &quot;js&quot; &quot;application/javascript&quot;
        &quot;gif&quot; &quot;image/gif&quot; &quot;jpg&quot; &quot;image/jpeg&quot; &quot;png&quot; &quot;image/png&quot;
        &quot;r&quot; &quot;text/plain&quot; &quot;r3&quot; &quot;text/plain&quot; &quot;reb&quot; &quot;text/plain&quot;
    ]
    error-template: trim/auto {
        &lt;html&gt;&lt;head&gt;&lt;title&gt;$code $text&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$text&lt;/h1&gt;
        &lt;p&gt;Requested URI: &lt;code&gt;$uri&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;i&gt;shttpd.r&lt;/i&gt; on
        &lt;a href=&quot;http://www.rebol.com/rebol3/&quot;&gt;REBOL 3&lt;/a&gt; $r3&lt;/body&gt;&lt;/html&gt;
    }

    error-response: func [code uri &lt;local&gt; values] [
        values: [code (code) text (code-map/:code) uri (uri) r3 (system.version)]
        reduce [code &quot;text/html&quot; reword error-template compose values]
    ]

    start-response: func [port res &lt;local&gt; code text type body] [
        set [code type body] res
        write port unspaced [
            &quot;HTTP/1.0&quot; _ code _ code-map/:code CR LF
            &quot;Content-type:&quot; _ type CR LF
            &quot;Content-length:&quot; _ (length of body) CR LF
            CR LF
        ]
        ; Manual chunking is only necessary because of several bugs in R3&#39;s
        ; networking stack (mainly cc#2098 &amp; cc#2160; in some constellations also
        ; cc#2103). Once those are fixed, we should directly use R3&#39;s internal
        ; chunking instead: `write port body`.
        port.locals: copy body
    ]

    send-chunk: func [port] [
        ; Trying to send data &gt;32&#39;000 bytes at once will trigger R3&#39;s internal
        ; chunking (which is buggy, see above). So we cannot use chunks &gt;32&#39;000
        ; for our manual chunking.
        either empty? port.locals [
            _
        ][
            write port take/part port.locals 32&#39;000
        ]
    ]

    handle-request: function [config req] [
        parse3 to-text req [&quot;get &quot; [&quot;/ &quot; | copy uri: to &quot; &quot;]]
        uri: default [&quot;index.html&quot;]
        print [&quot;URI:&quot; uri]
        parse3 uri [some [thru &quot;.&quot;] copy ext to end (type: mime-map/:ext)]
        type: default [&quot;application/octet-stream&quot;]
        if not exists? file: config/root/:uri [return error-response 404 uri]
        if error? trap [data: read file] [return error-response 400 uri]
        reduce [200 type data]
    ]

    awake-client: function [event] [
        port: event/port
        switch event/type [
            &#39;read [
                either find port.data to-binary unspaced [CR LF CR LF] [
                    res: handle-request port.locals.config port.data
                    start-response port res
                ] [
                    read port
                ]
            ]
            &#39;wrote [if not send-chunk port [close port]]
            &#39;close [close port]
        ]
    ]

    awake-server: func [event &lt;local&gt; client] [
        if event/type = &#39;accept [
            client: first event/port
            client/awake: :awake-client
            read client
        ]
    ]

    serve: func [web-port web-root &lt;local&gt; listen-port] [
        listen-port: open join tcp://: web-port
        listen-port.locals: make object! compose/deep [
            config: [root: (web-root)]
        ]
        listen-port.awake: :awake-server
        wait listen-port
    ]

    serve 8080 system.options.path
    ; vim: set syn=rebol sw=4 ts=4:</description>
    
    <lastBuildDate>Wed, 15 Jun 2022 10:22:48 +0000</lastBuildDate>
    <category>Web</category>
    <atom:link href="https://rebol.metaeducation.com/t/earls-tiny-httpd-server-circa-2009/1842.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>@earl&#39;s tiny httpd server, circa 2009</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This little httpd server was the basis for our current httpd.  It's worth looking at to think about what the minimum requirements for a server are...and how our current implementation might be too heavy in places.</p>
<p>But it was in the tests directory, and it hasn't been used in any test for a long time.  Rather than upgrade it, I decided it better to archive it here.</p>
<pre><code>REBOL [title: "A tiny static HTTP server" author: 'abolka date: 2009-11-04]

code-map: make map! [200 "OK" 400 "Forbidden" 404 "Not Found"]
mime-map: make map! [
    "html" "text/html" "css" "text/css" "js" "application/javascript"
    "gif" "image/gif" "jpg" "image/jpeg" "png" "image/png"
    "r" "text/plain" "r3" "text/plain" "reb" "text/plain"
]
error-template: trim/auto {
    &lt;html&gt;&lt;head&gt;&lt;title&gt;$code $text&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;$text&lt;/h1&gt;
    &lt;p&gt;Requested URI: &lt;code&gt;$uri&lt;/code&gt;&lt;/p&gt;&lt;hr&gt;&lt;i&gt;shttpd.r&lt;/i&gt; on
    &lt;a href="http://www.rebol.com/rebol3/"&gt;REBOL 3&lt;/a&gt; $r3&lt;/body&gt;&lt;/html&gt;
}

error-response: func [code uri &lt;local&gt; values] [
    values: [code (code) text (code-map/:code) uri (uri) r3 (system.version)]
    reduce [code "text/html" reword error-template compose values]
]

start-response: func [port res &lt;local&gt; code text type body] [
    set [code type body] res
    write port unspaced [
        "HTTP/1.0" _ code _ code-map/:code CR LF
        "Content-type:" _ type CR LF
        "Content-length:" _ (length of body) CR LF
        CR LF
    ]
    ; Manual chunking is only necessary because of several bugs in R3's
    ; networking stack (mainly cc#2098 &amp; cc#2160; in some constellations also
    ; cc#2103). Once those are fixed, we should directly use R3's internal
    ; chunking instead: `write port body`.
    port.locals: copy body
]

send-chunk: func [port] [
    ; Trying to send data &gt;32'000 bytes at once will trigger R3's internal
    ; chunking (which is buggy, see above). So we cannot use chunks &gt;32'000
    ; for our manual chunking.
    either empty? port.locals [
        _
    ][
        write port take/part port.locals 32'000
    ]
]

handle-request: function [config req] [
    parse3 to-text req ["get " ["/ " | copy uri: to " "]]
    uri: default ["index.html"]
    print ["URI:" uri]
    parse3 uri [some [thru "."] copy ext to end (type: mime-map/:ext)]
    type: default ["application/octet-stream"]
    if not exists? file: config/root/:uri [return error-response 404 uri]
    if error? trap [data: read file] [return error-response 400 uri]
    reduce [200 type data]
]

awake-client: function [event] [
    port: event/port
    switch event/type [
        'read [
            either find port.data to-binary unspaced [CR LF CR LF] [
                res: handle-request port.locals.config port.data
                start-response port res
            ] [
                read port
            ]
        ]
        'wrote [if not send-chunk port [close port]]
        'close [close port]
    ]
]

awake-server: func [event &lt;local&gt; client] [
    if event/type = 'accept [
        client: first event/port
        client/awake: :awake-client
        read client
    ]
]

serve: func [web-port web-root &lt;local&gt; listen-port] [
    listen-port: open join tcp://: web-port
    listen-port.locals: make object! compose/deep [
        config: [root: (web-root)]
    ]
    listen-port.awake: :awake-server
    wait listen-port
]

serve 8080 system.options.path
; vim: set syn=rebol sw=4 ts=4:
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/earls-tiny-httpd-server-circa-2009/1842/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/earls-tiny-httpd-server-circa-2009/1842/1</link>
        <pubDate>Wed, 15 Jun 2022 10:22:48 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1842-1</guid>
        <source url="https://rebol.metaeducation.com/t/earls-tiny-httpd-server-circa-2009/1842.rss">@earl&#39;s tiny httpd server, circa 2009</source>
      </item>
  </channel>
</rss>
