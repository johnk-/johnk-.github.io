<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Much Ado About A Tiny Email Test &quot;Micro-Dialect&quot;</title>
    <link>https://rebol.metaeducation.com/t/much-ado-about-a-tiny-email-test-micro-dialect/2315</link>
    <description>So there was a &quot;micro dialect&quot; for email address scanning.  A simple idea that you could intermix valid and invalid email addresses...to put groups of related emails together even though some in the group would fail and others would succeed.

It was something along these lines:

    for-each [mode text] [
        + {email@example.com}
        + {firstname.lastname@example.com}
        - {email@example@example.com}
        + {email@subdomain.example.com}
        + {firstname+lastname@example.com}
        - {email@example.com}
        + {email@123.123.123.123}
        - {email@[123.123.123.123]}
        ...
     ][
        assert [mode: select [+ valid - invalid] mode]
        if (mode = &#39;valid) != test-scan-email (...) [
            fail [&quot;Expected&quot; @text &quot;to be&quot; an mode &quot;email&quot;]
        ]
     ]

But for this post, I threw in a couple of &quot;hey that&#39;s neat&quot; aspects, like:

    &gt;&gt; an &quot;valid&quot;
    == &quot;a valid&quot;

    &gt;&gt; an &quot;invalid&quot;
    == &quot;an invalid&quot;

## Enter Dashed Strings

I don&#39;t know that the **`+`** and **`-`** markers were ever the greatest, but they certainly lost their appeal with dashed strings.

        + -{email@example.com}-
        + -{firstname.lastname@example.com}-
        - -{email@example@example.com}-
        + -{email@subdomain.example.com}-

At first I figured I&#39;d just pick an alternative.  There&#39;s Y and N...

        Y -{email@example.com}-
        Y -{firstname.lastname@example.com}-
        N -{email@example@example.com}-
        Y -{email@subdomain.example.com}-

Those are pretty big letterforms that blur together some.  Tilde for trash to differentiate carries the connotation of &quot;something wrong&quot;...

        Y -{email@example.com}-
        Y -{firstname.lastname@example.com}-
        ~ -{email@example@example.com}-
        Y -{email@subdomain.example.com}-

...but it blurs here too much with the dash.

**Really we can ask: why are we decorating the valid things, and not just the invalid things?**

          -{email@example.com}-
          -{firstname.lastname@example.com}-
        # -{email@example@example.com}-
          -{email@subdomain.example.com}-

You could use **`N`** or **`*`** or **`#`** or any other nasty here, and it sort of stands out.  Not as well as **`&lt;bad&gt;`** would.

          -{email@example.com}-
          -{firstname.lastname@example.com}-
    &lt;bad&gt; -{email@example@example.com}-
          -{email@subdomain.example.com}-

**But if you&#39;re going to break the regularity of the structure, you can&#39;t use (today&#39;s) FOR-EACH.**

If you want to regularize it a bit, you could use something like BLOCK! to mark the bad ones:

          -{email@example.com}-
          -{firstname.lastname@example.com}-
         [-{email@example@example.com}-]
          -{email@subdomain.example.com}-

If that didn&#39;t stand out enough, you could use a double-block:

          -{email@example.com}-
          -{firstname.lastname@example.com}-
        [[-{email@example@example.com}-]]
          -{email@subdomain.example.com}-

It&#39;s worth remembering such things are options in some cases, but I don&#39;t think that works very well here.

## `&lt;bad&gt;` Seems Good, But Could It Be Easier?

It would be nice if there were some way to type the FOR-EACH variables, and denote their optionality.

@hiiamboris has done some things in this vein, see his [type filter on FOR-EACH proposal](https://codeberg.org/hiiamboris/red-common/src/branch/master/foreach-design.md).  I feel like the concept of skipping and checking should be separate intents.  I can want to type check something but not want to skip it.

A leading colon could imply optionality, as it does with refinements now:

    for-each [:bad [tag!] text [text!]] [
            -{email@example.com}-
            -{firstname.lastname@example.com}-
      &lt;bad&gt; -{email@example@example.com}-
            -{email@subdomain.example.com}-
            ...
    ][
        ...
    ]

You can even use `&lt;bad&gt;` itself for the type check by quoting it, and enforce/document that more stringently.  Also, for the sake of &quot;how does that look in the generator model&quot; I&#39;ll write it out that way:

    for [:bad [&#39;&lt;bad&gt;] text [text!]] each [
            -{email@example.com}-
            -{firstname.lastname@example.com}-
      &lt;bad&gt; -{email@example@example.com}-
            -{email@subdomain.example.com}-
            ...
    ][
        ...
    ]

Of course you can split this out to a table vs. having the tests inline like that.

Interpreting blocks as type checks seems pretty useful, but that takes away from some other applications which might be used for destructuring.  

Anyway, this is just some thinking inspired by a very small example.</description>
    
    <lastBuildDate>Fri, 11 Oct 2024 21:29:46 +0000</lastBuildDate>
    <category>Testing</category>
    <atom:link href="https://rebol.metaeducation.com/t/much-ado-about-a-tiny-email-test-micro-dialect/2315.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Much Ado About A Tiny Email Test &quot;Micro-Dialect&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So there was a "micro dialect" for email address scanning.  A simple idea that you could intermix valid and invalid email addresses...to put groups of related emails together even though some in the group would fail and others would succeed.</p>
<p>It was something along these lines:</p>
<pre><code>for-each [mode text] [
    + {email@example.com}
    + {firstname.lastname@example.com}
    - {email@example@example.com}
    + {email@subdomain.example.com}
    + {firstname+lastname@example.com}
    - {email@example.com}
    + {email@123.123.123.123}
    - {email@[123.123.123.123]}
    ...
 ][
    assert [mode: select [+ valid - invalid] mode]
    if (mode = 'valid) != test-scan-email (...) [
        fail ["Expected" @text "to be" an mode "email"]
    ]
 ]
</code></pre>
<p>But for this post, I threw in a couple of "hey that's neat" aspects, like:</p>
<pre><code>&gt;&gt; an "valid"
== "a valid"

&gt;&gt; an "invalid"
== "an invalid"
</code></pre>
<h2><a name="p-7845-enter-dashed-strings-1" class="anchor" href="https://rebol.metaeducation.com#p-7845-enter-dashed-strings-1"></a>Enter Dashed Strings</h2>
<p>I don't know that the <strong><code>+</code></strong> and <strong><code>-</code></strong> markers were ever the greatest, but they certainly lost their appeal with dashed strings.</p>
<pre><code>    + -{email@example.com}-
    + -{firstname.lastname@example.com}-
    - -{email@example@example.com}-
    + -{email@subdomain.example.com}-
</code></pre>
<p>At first I figured I'd just pick an alternative.  There's Y and N...</p>
<pre><code>    Y -{email@example.com}-
    Y -{firstname.lastname@example.com}-
    N -{email@example@example.com}-
    Y -{email@subdomain.example.com}-
</code></pre>
<p>Those are pretty big letterforms that blur together some.  Tilde for trash to differentiate carries the connotation of "something wrong"...</p>
<pre><code>    Y -{email@example.com}-
    Y -{firstname.lastname@example.com}-
    ~ -{email@example@example.com}-
    Y -{email@subdomain.example.com}-
</code></pre>
<p>...but it blurs here too much with the dash.</p>
<p><strong>Really we can ask: why are we decorating the valid things, and not just the invalid things?</strong></p>
<pre><code>      -{email@example.com}-
      -{firstname.lastname@example.com}-
    # -{email@example@example.com}-
      -{email@subdomain.example.com}-
</code></pre>
<p>You could use <strong><code>N</code></strong> or <strong><code>*</code></strong> or <strong><code>#</code></strong> or any other nasty here, and it sort of stands out.  Not as well as <strong><code>&lt;bad&gt;</code></strong> would.</p>
<pre><code>      -{email@example.com}-
      -{firstname.lastname@example.com}-
&lt;bad&gt; -{email@example@example.com}-
      -{email@subdomain.example.com}-
</code></pre>
<p><strong>But if you're going to break the regularity of the structure, you can't use (today's) FOR-EACH.</strong></p>
<p>If you want to regularize it a bit, you could use something like BLOCK! to mark the bad ones:</p>
<pre><code>      -{email@example.com}-
      -{firstname.lastname@example.com}-
     [-{email@example@example.com}-]
      -{email@subdomain.example.com}-
</code></pre>
<p>If that didn't stand out enough, you could use a double-block:</p>
<pre><code>      -{email@example.com}-
      -{firstname.lastname@example.com}-
    [[-{email@example@example.com}-]]
      -{email@subdomain.example.com}-
</code></pre>
<p>It's worth remembering such things are options in some cases, but I don't think that works very well here.</p>
<h2><a name="p-7845-bad-seems-good-but-could-it-be-easier-2" class="anchor" href="https://rebol.metaeducation.com#p-7845-bad-seems-good-but-could-it-be-easier-2"></a><code>&lt;bad&gt;</code> Seems Good, But Could It Be Easier?</h2>
<p>It would be nice if there were some way to type the FOR-EACH variables, and denote their optionality.</p>
<p><span class="mention">@hiiamboris</span> has done some things in this vein, see his <a href="https://codeberg.org/hiiamboris/red-common/src/branch/master/foreach-design.md">type filter on FOR-EACH proposal</a>.  I feel like the concept of skipping and checking should be separate intents.  I can want to type check something but not want to skip it.</p>
<p>A leading colon could imply optionality, as it does with refinements now:</p>
<pre><code>for-each [:bad [tag!] text [text!]] [
        -{email@example.com}-
        -{firstname.lastname@example.com}-
  &lt;bad&gt; -{email@example@example.com}-
        -{email@subdomain.example.com}-
        ...
][
    ...
]
</code></pre>
<p>You can even use <code>&lt;bad&gt;</code> itself for the type check by quoting it, and enforce/document that more stringently.  Also, for the sake of "how does that look in the generator model" I'll write it out that way:</p>
<pre><code>for [:bad ['&lt;bad&gt;] text [text!]] each [
        -{email@example.com}-
        -{firstname.lastname@example.com}-
  &lt;bad&gt; -{email@example@example.com}-
        -{email@subdomain.example.com}-
        ...
][
    ...
]
</code></pre>
<p>Of course you can split this out to a table vs. having the tests inline like that.</p>
<p>Interpreting blocks as type checks seems pretty useful, but that takes away from some other applications which might be used for destructuring.</p>
<p>Anyway, this is just some thinking inspired by a very small example.</p>
          <p><a href="https://rebol.metaeducation.com/t/much-ado-about-a-tiny-email-test-micro-dialect/2315/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/much-ado-about-a-tiny-email-test-micro-dialect/2315/1</link>
        <pubDate>Fri, 11 Oct 2024 21:29:46 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2315-1</guid>
        <source url="https://rebol.metaeducation.com/t/much-ado-about-a-tiny-email-test-micro-dialect/2315.rss">Much Ado About A Tiny Email Test &quot;Micro-Dialect&quot;</source>
      </item>
  </channel>
</rss>
