<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>VOID &amp; Definitional Error with SET and SET-GROUP!</title>
    <link>https://rebol.metaeducation.com/t/void-definitional-error-with-set-and-set-group/2258</link>
    <description>I&#39;m doing some refactoring to bring more consistency between the behavior of SET of a group and a SET-XXX!:

    set var expression

    ; vs.

    (var): expression

    ; vs.

    eval compose [(var): expression]

Ideally these should be interchangeable and have the same properties.

## Raised Error Propagation

One of those interesting properties is that definitional errors will skip the assignment and propagate one step, vs be promoted to abrupt failure at the moment you try to SET.  This allows you to write things like:

    &gt;&gt; item: &lt;whatever&gt;
    &gt;&gt; block: []

    &gt;&gt; error: trap [item: take block]
    == make error! [
        type: &#39;Script
        id: &#39;nothing-to-take
        message: &quot;Can&#39;t TAKE, no value available (consider TRY TAKE)&quot;
        near: &#39;[item: take block **]
        where: &#39;[take entrap trap enrescue console]
        file: ~null~
        line: 1
    ]

    &gt;&gt; item
    == &lt;whatever&gt;

This has turned out to be quite useful, because without it you&#39;d basically not be able to use TRAP with assignments.  The only way to deal with them would be EXCEPT:

    var: (...) except e -&gt; [...]

And that&#39;s not always what you want--it could be putting the exception logic in an awkward position, and it also often makes you parenthesize complex expressions on the left of the except.

## Another Cool Feature... Opting Out

I&#39;ve actually had cases where this is useful!  Let&#39;s say you have a variable that&#39;s sometimes null, but something you want to set:

    var: case [
        condition1 [$word1]
        condition1 [$word2]
    ]  ; if none of the cases match, CASE returns null

Okay, now let&#39;s say you want to call SOME-FUNCTION with an expression, and if VAR is not null you want to assign the expression to var too.

Like this:

     if var [
         some-function (var): expression
     ] else [
         some-function expression
     ]

You could factor that out a bit:

     some-function if var [
         (var): expression
     ] else [
         expression
     ]

If your expression is complex you&#39;d probably wind up needing to factor it out vs. repeating it:

     let e: expression
     some-function either var [(var): e] else [e]

**BUT SET-GROUP! of a VOID variable will just propagate the value out!**

    some-function (maybe var): expression

Cool, huh?  Anyway, I&#39;m making sure these things work the same with SET the native.

    some-function set maybe var expression

## You Can&#39;t Do That With COMPOSE, Though

    eval compose [some-function (maybe var): expression]

It could perhaps be argued that would produce either of:

    some-function []: expression
    some-function (): expression

Which we might envision working the same way.  But I think if you want that, you need to ask for it.

    eval compose [some-function (any [var []]): expression]</description>
    
    <lastBuildDate>Sat, 07 Sep 2024 10:16:22 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://rebol.metaeducation.com/t/void-definitional-error-with-set-and-set-group/2258.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>VOID &amp; Definitional Error with SET and SET-GROUP!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm doing some refactoring to bring more consistency between the behavior of SET of a group and a SET-XXX!:</p>
<pre><code>set var expression

; vs.

(var): expression

; vs.

eval compose [(var): expression]
</code></pre>
<p>Ideally these should be interchangeable and have the same properties.</p>
<h2><a name="p-7591-raised-error-propagation-1" class="anchor" href="https://rebol.metaeducation.com#p-7591-raised-error-propagation-1"></a>Raised Error Propagation</h2>
<p>One of those interesting properties is that definitional errors will skip the assignment and propagate one step, vs be promoted to abrupt failure at the moment you try to SET.  This allows you to write things like:</p>
<pre><code>&gt;&gt; item: &lt;whatever&gt;
&gt;&gt; block: []

&gt;&gt; error: trap [item: take block]
== make error! [
    type: 'Script
    id: 'nothing-to-take
    message: "Can't TAKE, no value available (consider TRY TAKE)"
    near: '[item: take block **]
    where: '[take entrap trap enrescue console]
    file: ~null~
    line: 1
]

&gt;&gt; item
== &lt;whatever&gt;
</code></pre>
<p>This has turned out to be quite useful, because without it you'd basically not be able to use TRAP with assignments.  The only way to deal with them would be EXCEPT:</p>
<pre><code>var: (...) except e -&gt; [...]
</code></pre>
<p>And that's not always what you want--it could be putting the exception logic in an awkward position, and it also often makes you parenthesize complex expressions on the left of the except.</p>
<h2><a name="p-7591-another-cool-feature-opting-out-2" class="anchor" href="https://rebol.metaeducation.com#p-7591-another-cool-feature-opting-out-2"></a>Another Cool Feature... Opting Out</h2>
<p>I've actually had cases where this is useful!  Let's say you have a variable that's sometimes null, but something you want to set:</p>
<pre><code>var: case [
    condition1 [$word1]
    condition1 [$word2]
]  ; if none of the cases match, CASE returns null
</code></pre>
<p>Okay, now let's say you want to call SOME-FUNCTION with an expression, and if VAR is not null you want to assign the expression to var too.</p>
<p>Like this:</p>
<pre><code> if var [
     some-function (var): expression
 ] else [
     some-function expression
 ]
</code></pre>
<p>You could factor that out a bit:</p>
<pre><code> some-function if var [
     (var): expression
 ] else [
     expression
 ]
</code></pre>
<p>If your expression is complex you'd probably wind up needing to factor it out vs. repeating it:</p>
<pre><code> let e: expression
 some-function either var [(var): e] else [e]
</code></pre>
<p><strong>BUT SET-GROUP! of a VOID variable will just propagate the value out!</strong></p>
<pre><code>some-function (maybe var): expression
</code></pre>
<p>Cool, huh?  Anyway, I'm making sure these things work the same with SET the native.</p>
<pre><code>some-function set maybe var expression
</code></pre>
<h2><a name="p-7591-you-cant-do-that-with-compose-though-3" class="anchor" href="https://rebol.metaeducation.com#p-7591-you-cant-do-that-with-compose-though-3"></a>You Can't Do That With COMPOSE, Though</h2>
<pre><code>eval compose [some-function (maybe var): expression]
</code></pre>
<p>It could perhaps be argued that would produce either of:</p>
<pre><code>some-function []: expression
some-function (): expression
</code></pre>
<p>Which we might envision working the same way.  But I think if you want that, you need to ask for it.</p>
<pre><code>eval compose [some-function (any [var []]): expression]
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/void-definitional-error-with-set-and-set-group/2258/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/void-definitional-error-with-set-and-set-group/2258/1</link>
        <pubDate>Sat, 07 Sep 2024 09:15:55 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2258-1</guid>
        <source url="https://rebol.metaeducation.com/t/void-definitional-error-with-set-and-set-group/2258.rss">VOID &amp; Definitional Error with SET and SET-GROUP!</source>
      </item>
  </channel>
</rss>
