<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;ISSUECHAR!&quot; (=&gt; TOKEN!) is Hitting It Out of the Park</title>
    <link>https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364</link>
    <description>**[The unification of the ISSUE! and CHAR! types](https://forum.rebol.info/t/removing-issue-from-the-any-word-category/1106/3) is having all kinds of better-than-expected consequences.  It is undeniably a good change.** &lt;sub&gt;(though don&#39;t be surprised if Red finds a way to deny it...they still [don&#39;t even bring up the *existence of the concept of UTF-8 Everywhere*](https://github.com/red/red/issues/4131) :see_no_evil: even as it stares them in the face as the answer to things they need!)&lt;/sub&gt;

---
I&#39;ve kept the ISSUE! name for now, just to not change too many things at once.  And CHAR! is a &quot;type constraint&quot; of a single-character token.  So although the mechanics behind this sort of constraint are destined to change...you can still use CHAR? and match single-character tokens in PARSE via a CHAR! rule:

    &gt;&gt; parse [#a] [&amp;char?]
    == [#a]

    &gt;&gt; parse [#aa] [&amp;char?]
    ** Error: ...

So don&#39;t go changing all your CHAR! to ISSUE!.  If you mean CHAR!, say it.  Just bear in mind that it&#39;s a constraint on tokens... not its own unique data type.

The biggest change is this:

* Use **CODEPOINT OF** to get the codepoint of a single-character ISSUE!, instead of `to integer!`.  *(Currently you can also PICK the codepoints off of a token positionally, so you could also use FIRST.  But that&#39;s not as clear, and I&#39;m also not sure if the behavior is desirable.)*

* There&#39;s a hack in so that MAKE CHAR! of an INTEGER! will still work (for now) to get a single-character issue form.  But TO CHAR! of an INTEGER! no longer works.  There&#39;s also now **AS ISSUE!** to do this...but I&#39;m not 100% confident that this is what &quot;AS&quot; will mean.  Using MAKE CHAR! is probably the best way to keep the callsites identified for migrating to a final solution.

## Putting More &quot;Everywhere&quot; Into &quot;UTF-8 Everywhere&quot;

With the character type actually being an immutable class of string, it&#39;s no longer being stored in a cell as an integer codepoint.  *It&#39;s encoded UTF-8 bytes, living in the memory inside of a cell.*

When all your strings are encoded as UTF-8, you don&#39;t really *need* the codepoint number all that often.  Usually you&#39;re just looking for a character in a string, or appending it to one.  That means having the encoding at hand is more important...and in those rare times you need CODEPOINT OF you pay the cost of decoding the UTF-8 into an integer.

It&#39;s the better option.

## Efficient Storage of Short Issues

There&#39;s 7 bytes of space in a cell on 32-bit platforms for UTF-8 encoding (1 byte for terminator), and 15 bytes on 64-bit platforms.  That&#39;s enough space for all UTF-8 single character codepoints, and if you&#39;re just using ASCII that can be enough for many short strings.

So the benefits aren&#39;t just limited to single characters.  The work done to support encoding in cells supports what would have been short issues too.  Notably, RGB patterns like #FFFFFF come in at 6 characters...so they&#39;ll fit in a cell even on 32-bit platforms.

## Lighter Notation For Characters

Not needing the quotes around most characters makes a much nicer impression:

    ; with quotes

        &gt;&gt; first &quot;abc&quot;
        == #&quot;a&quot;
  
        &gt;&gt; if #&quot;a&quot; = first &quot;abc&quot; [print &quot;match&quot;]
        match

    ; without quotes

        &gt;&gt; first &quot;abc&quot;
        == #a

        &gt;&gt; if #a = first &quot;abc&quot; [print &quot;match&quot;]
        match

We know **`#a=b`** is different from **`#a = b`** due to whitespace significance, and it&#39;s nice to play a card from that hand here.

Of course not all characters fit the pattern, so people will hopefully be sensitive to the idea that **`#]`** is a space token up against a bracket, and **#&quot;]&quot;** is the bracket &quot;token&quot;.  Seems learnable.

## Intuitive Similarity between #&quot;1&quot; and #1 Becomes Actual Similarity

Having TO INTEGER #&quot;1&quot; and TO INTEGER #1 act differently is just one of many examples of why this shouldn&#39;t be a difference.

## Quote Notation Opens Up Forms for &quot;ISSUE!&quot;

Before, **#&quot;a b c&quot;** was an &quot;invalid character&quot;.  Now it&#39;s a valid token.  This enables more dialect usages of a unique stringlike type.

## ...more...

It&#39;s nice being able to solve situations where you want characters in quotes for things like command lines, and can say **`&quot;char: #a&quot;`** instead of **`&quot;char: #\&quot;a\&quot;&quot;`**.  But taking the **#{}** form from BINARY! would be needed to really generalize that victory.

With tokens being generic enough to hold ANY-STRING! content, I observed that they might be able to be used in an answer for what to do when you wanted a map key to be case-sensitive.  But same-cased ISSUE! and strings haven&#39;t compared equal even in Rebol2:

    rebol2&gt;&gt; &quot;abc&quot; = #abc
    == false

This means you&#39;d have to turn your string into a token before looking it up in the map.  But since tokens are immutable, that would force your string to become read-only in that process.

It&#39;s something predicates might solve, by letting you use a different predicate for lookup than common equality.  Yet the whole premise of map lookups is that they are based on a hash function that reliably produces the same result...so if a map was hashed with one notion of lookup, you can&#39;t just pick an arbitrary function...

Anyway, there are things to think through and opportunities that this might create.  I&#39;ll be interested to see.  But already, it&#39;s a win.</description>
    
    <lastBuildDate>Fri, 20 Sep 2024 07:39:25 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;ISSUECHAR!&quot; (=&gt; TOKEN!) is Hitting It Out of the Park</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I never renamed this type to TOKEN! because I've been a chicken.  <img src="https://forum.rebol.info/images/emoji/twitter/chicken.png?v=12" title=":chicken:" class="emoji" alt=":chicken:" loading="lazy" width="20" height="20"></p>
<p>Part of what makes me hesitant is the idea of people working on codebases where they are considering WORD! to be a token in their dialect, and so they would say <strong><code>token: 'foo</code></strong>.</p>
<p>Calling it <strong><code>UTF-8!</code></strong> might seem good, but all strings are in the category <strong><code>ANY-UTF8?</code></strong>  <em>(<a href="https://stackoverflow.com/questions/809620/correct-terminology-between-utf8-and-utf-8">Should that be "ANY-UTF-8?"</a>, with the hyphen?)</em></p>
<p>And ANY-UTF8? as a category does not imply immutability. But these are immutable.</p>
<p>So...CHARS! or CHARACTERS! or CODEPOINTS!?</p>
<p>The term "RUNE" is getting some traction for meaning "codepoint" in Go and C# (excluding some illegal ranges like surrogate pairs).</p>
<h2>
<a name="we-could-call-it-hashtag-but-1" class="anchor" href="https://forum.rebol.info#we-could-call-it-hashtag-but-1"></a>We Could Call It <code>hashtag!</code>... But...</h2>
<p>When we say:</p>
<pre><code>&gt;&gt; second "abc"
== #b
</code></pre>
<p>Do we really want to say that <em>"single-codepoint hashtags are our currency for characters"</em>? <img src="https://forum.rebol.info/images/emoji/twitter/pouting_cat.png?v=12" title=":pouting_cat:" class="emoji" alt=":pouting_cat:" loading="lazy" width="20" height="20"></p>
<p>I don't think so.</p>
<h2>
<a name="maybe-just-go-with-my-gut-like-with-keywordhttpsforumrebolinfotrenaming-antiword-time-to-call-it-keyword2277-2" class="anchor" href="https://forum.rebol.info#maybe-just-go-with-my-gut-like-with-keywordhttpsforumrebolinfotrenaming-antiword-time-to-call-it-keyword2277-2"></a>Maybe Just Go With My Gut... Like With <a href="https://forum.rebol.info/t/renaming-antiword-time-to-call-it-keyword/2277">"Keyword"</a>
</h2>
<p>TOKEN! is what has been on my mind since the beginning of the unification of ISSUE!+CHAR!, and it hasn't gone away.</p>
<p>What we name our fundamental types isn't the end-all-be-all of how a word needs to be used.</p>
          <p><a href="https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364/3</link>
        <pubDate>Fri, 20 Sep 2024 07:30:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1364-3</guid>
        <source url="https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364.rss">&quot;ISSUECHAR!&quot; (=&gt; TOKEN!) is Hitting It Out of the Park</source>
      </item>
      <item>
        <title>&quot;ISSUECHAR!&quot; (=&gt; TOKEN!) is Hitting It Out of the Park</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1364">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's nice being able to solve situations where you want characters in quotes for things like command lines, and can say <strong><code>"char: #a"</code></strong> instead of <strong><code>"char: #\"a\""</code></strong> .</p>
</blockquote>
</aside>
<p>I thought I'd point out a cool example from the console source...where C and Ren-C are getting mixed.</p>
<p>There is a part where WORD!s are being used as virtual keycodes, and then there is C code that wants to react to those codes.  To make it clear/easy/efficient, what happens is that a Rebol SWITCH <a href="https://github.com/metaeducation/ren-c/blob/93cb30376c4c8d79ec01c28c46eb9ac917ac7aed/extensions/stdio/p-stdio.c#L123">translates the WORD!s into char` values</a>, that can be used in a C switch statement.</p>
<pre><code>       uint32_t ch = rebUnboxChar(
            "to char! switch", rebQ(e), "[",
                "'escape ['E]",

                "'up ['U]",
                "'down ['D]",
                "'ctrl-b",  // Backward One Character (bash)
                    "'left ['L]",
                "'ctrl-f",  // Forward One Character (bash)
                    "'right ['R]",
                ...

      switch (ch) {
          case 0:  // Ignored (e.g. unknown Ctrl-XXX)
            break;

          case 'E':  // ESCAPE
            Term_Abandon_Pending_Events(t);
            line = rebBlank();
            break;
</code></pre>
<p>You notice that previously, the branches in the switch() didn't use CHAR!.  They used WORD!s, because the escaping of chars would be too annoying.  (e.g. <code>"'escape [#\"E\"]"</code>)  So the WORD!s are translated to chars outside the switch with TO CHAR!.</p>
<p>Now using the ISSUE!s directly in the SWITCH is painless, and there's no need for the conversion:</p>
<pre><code> uint32_t ch = rebUnboxChar(
        "switch", rebQ(e), "[",
            "'escape [#E]",

            "'up [#U]",
            "'down [#D]",
            "'ctrl-b",  // Backward One Character (bash)
                "'left [#L]",
            "'ctrl-f",  // Forward One Character (bash)
                "'right [#R]",
            ...
</code></pre>
<p>It's a cool and sneaky way to push through that cross-language barrier.  Just a reminder that these design points are "deep thoughts"...not change for the sake of change!</p>
          <p><a href="https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364/2</link>
        <pubDate>Mon, 12 Oct 2020 18:07:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1364-2</guid>
        <source url="https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364.rss">&quot;ISSUECHAR!&quot; (=&gt; TOKEN!) is Hitting It Out of the Park</source>
      </item>
      <item>
        <title>&quot;ISSUECHAR!&quot; (=&gt; TOKEN!) is Hitting It Out of the Park</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong><a href="https://forum.rebol.info/t/removing-issue-from-the-any-word-category/1106/3">The unification of the ISSUE! and CHAR! types</a> is having all kinds of better-than-expected consequences.  It is undeniably a good change.</strong> <sub>(though don't be surprised if Red finds a way to deny it...they still <a href="https://github.com/red/red/issues/4131">don't even bring up the <em>existence of the concept of UTF-8 Everywhere</em></a> <img src="https://forum.rebol.info/images/emoji/twitter/see_no_evil.png?v=12" title=":see_no_evil:" class="emoji" alt=":see_no_evil:" loading="lazy" width="20" height="20"> even as it stares them in the face as the answer to things they need!)</sub></p>
<hr>
<p>I've kept the ISSUE! name for now, just to not change too many things at once.  And CHAR! is a "type constraint" of a single-character token.  So although the mechanics behind this sort of constraint are destined to change...you can still use CHAR? and match single-character tokens in PARSE via a CHAR! rule:</p>
<pre><code>&gt;&gt; parse [#a] [&amp;char?]
== [#a]

&gt;&gt; parse [#aa] [&amp;char?]
** Error: ...
</code></pre>
<p>So don't go changing all your CHAR! to ISSUE!.  If you mean CHAR!, say it.  Just bear in mind that it's a constraint on tokens... not its own unique data type.</p>
<p>The biggest change is this:</p>
<ul>
<li>
<p>Use <strong>CODEPOINT OF</strong> to get the codepoint of a single-character ISSUE!, instead of <code>to integer!</code>.  <em>(Currently you can also PICK the codepoints off of a token positionally, so you could also use FIRST.  But that's not as clear, and I'm also not sure if the behavior is desirable.)</em></p>
</li>
<li>
<p>There's a hack in so that MAKE CHAR! of an INTEGER! will still work (for now) to get a single-character issue form.  But TO CHAR! of an INTEGER! no longer works.  There's also now <strong>AS ISSUE!</strong> to do this...but I'm not 100% confident that this is what "AS" will mean.  Using MAKE CHAR! is probably the best way to keep the callsites identified for migrating to a final solution.</p>
</li>
</ul>
<h2>
<a name="putting-more-everywhere-into-utf-8-everywhere-1" class="anchor" href="https://forum.rebol.info#putting-more-everywhere-into-utf-8-everywhere-1"></a>Putting More "Everywhere" Into "UTF-8 Everywhere"</h2>
<p>With the character type actually being an immutable class of string, it's no longer being stored in a cell as an integer codepoint.  <em>It's encoded UTF-8 bytes, living in the memory inside of a cell.</em></p>
<p>When all your strings are encoded as UTF-8, you don't really <em>need</em> the codepoint number all that often.  Usually you're just looking for a character in a string, or appending it to one.  That means having the encoding at hand is more important...and in those rare times you need CODEPOINT OF you pay the cost of decoding the UTF-8 into an integer.</p>
<p>It's the better option.</p>
<h2>
<a name="efficient-storage-of-short-issues-2" class="anchor" href="https://forum.rebol.info#efficient-storage-of-short-issues-2"></a>Efficient Storage of Short Issues</h2>
<p>There's 7 bytes of space in a cell on 32-bit platforms for UTF-8 encoding (1 byte for terminator), and 15 bytes on 64-bit platforms.  That's enough space for all UTF-8 single character codepoints, and if you're just using ASCII that can be enough for many short strings.</p>
<p>So the benefits aren't just limited to single characters.  The work done to support encoding in cells supports what would have been short issues too.  Notably, RGB patterns like <span class="hashtag">#FFFFFF</span> come in at 6 characters...so they'll fit in a cell even on 32-bit platforms.</p>
<h2>
<a name="lighter-notation-for-characters-3" class="anchor" href="https://forum.rebol.info#lighter-notation-for-characters-3"></a>Lighter Notation For Characters</h2>
<p>Not needing the quotes around most characters makes a much nicer impression:</p>
<pre><code>; with quotes

    &gt;&gt; first "abc"
    == #"a"

    &gt;&gt; if #"a" = first "abc" [print "match"]
    match

; without quotes

    &gt;&gt; first "abc"
    == #a

    &gt;&gt; if #a = first "abc" [print "match"]
    match
</code></pre>
<p>We know <strong><code>#a=b</code></strong> is different from <strong><code>#a = b</code></strong> due to whitespace significance, and it's nice to play a card from that hand here.</p>
<p>Of course not all characters fit the pattern, so people will hopefully be sensitive to the idea that <strong><code>#]</code></strong> is a space token up against a bracket, and <strong>#"]"</strong> is the bracket "token".  Seems learnable.</p>
<h2>
<a name="intuitive-similarity-between-1-and-1-becomes-actual-similarity-4" class="anchor" href="https://forum.rebol.info#intuitive-similarity-between-1-and-1-becomes-actual-similarity-4"></a>Intuitive Similarity between #"1" and <span class="hashtag">#1</span> Becomes Actual Similarity</h2>
<p>Having TO INTEGER #"1" and TO INTEGER <span class="hashtag">#1</span> act differently is just one of many examples of why this shouldn't be a difference.</p>
<h2>
<a name="quote-notation-opens-up-forms-for-issue-5" class="anchor" href="https://forum.rebol.info#quote-notation-opens-up-forms-for-issue-5"></a>Quote Notation Opens Up Forms for "ISSUE!"</h2>
<p>Before, <strong>#"a b c"</strong> was an "invalid character".  Now it's a valid token.  This enables more dialect usages of a unique stringlike type.</p>
<h2>
<a name="more-6" class="anchor" href="https://forum.rebol.info#more-6"></a>...more...</h2>
<p>It's nice being able to solve situations where you want characters in quotes for things like command lines, and can say <strong><code>"char: #a"</code></strong> instead of <strong><code>"char: #\"a\""</code></strong>.  But taking the <strong>#{}</strong> form from BINARY! would be needed to really generalize that victory.</p>
<p>With tokens being generic enough to hold ANY-STRING! content, I observed that they might be able to be used in an answer for what to do when you wanted a map key to be case-sensitive.  But same-cased ISSUE! and strings haven't compared equal even in Rebol2:</p>
<pre><code>rebol2&gt;&gt; "abc" = #abc
== false
</code></pre>
<p>This means you'd have to turn your string into a token before looking it up in the map.  But since tokens are immutable, that would force your string to become read-only in that process.</p>
<p>It's something predicates might solve, by letting you use a different predicate for lookup than common equality.  Yet the whole premise of map lookups is that they are based on a hash function that reliably produces the same result...so if a map was hashed with one notion of lookup, you can't just pick an arbitrary function...</p>
<p>Anyway, there are things to think through and opportunities that this might create.  I'll be interested to see.  But already, it's a win.</p>
          <p><a href="https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364/1</link>
        <pubDate>Mon, 12 Oct 2020 05:29:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1364-1</guid>
        <source url="https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364.rss">&quot;ISSUECHAR!&quot; (=&gt; TOKEN!) is Hitting It Out of the Park</source>
      </item>
  </channel>
</rss>
