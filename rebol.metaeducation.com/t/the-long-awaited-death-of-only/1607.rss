<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Long-Awaited Death of /ONLY</title>
    <link>https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607</link>
    <description>**As of July 2022, /ONLY is no longer a refinement available on APPEND, INSERT, CHANGE, FIND, SELECT, COMPOSE, or similar functions.**  It only appears in the Redbol module [through emulation](https://rebol.metaeducation.com/t/agree-to-disagree-points-places-i-see-both-sides/1862/3?u=hostilefork).

## &quot;AS-IS&quot; Semantics Are Default

It&#39;s easy to empathize with the historical Rebol idea of &quot;splice blocks by default&quot;, if you only look at examples where the code is fully literal:

    append files [%foo.r %bar.r]
    code: compose [... keep [sum: sum + x] ...]

But problems immediately strike when you start using variables that may-or-may-not-be blocks.  You can&#39;t rely on any invariants, and this leads to broken code:

    &gt;&gt; block: [#a {b} [c d e] %f]

    &gt;&gt; pick block 3
    == [c d e]

    &gt;&gt; find block pick block 3
    == \~null~\  ; antiform

Time and experience has proven that &quot;as-is&quot; semantics are the safest and clearest default:

    &gt;&gt; append [a b c] [d e]
    == [a b c [d e]]

Ren-C offers a new tool for &quot;spliced&quot; semantics...which is to pass a GROUP! antiform (&quot;quoting level -1&quot;).  SPREAD is the first function offered which produces them:

    &gt;&gt; spread [d e]
    == ~(d e)~  ; anti

    &gt;&gt; append [a b c] spread [d e]
    == [a b c d e]

But there&#39;s nothing particularly special about SPREAD, and there will be many other options for defining functions that may-or-may-not return group antiforms...which have more parameterization and nuance.

## Making The Value Carry Splicing Intent Brings Systemic Good

The benefits are everywhere, with safer defaults and clear choices...for instance in REPLACE:

    &gt;&gt; replace [[a b] a b a b] [a b] [c d e]
    == [[c d e] a b a b] 

    &gt;&gt; replace [[a b] a b a b] spread [a b] [c d e]
    == [[a b] [c d e] [c d e]]

    &gt;&gt; replace [[a b] a b a b] [a b] spread [c d e]
    == [c d e a b a b]

    &gt;&gt; replace [[a b] a b a b] spread [a b] spread [c d e]
    == [[a b] c d e c d e]

Branching code can make decisions to splice-or-not-splice on a case by case basis:

    &gt;&gt; code: [&lt;splice&gt; [a b] &lt;no-splice&gt; [c d] &lt;no-splice&gt; &#39;x]

    &gt;&gt; map-each [instruction item] code [
           switch instruction [
                &lt;splice&gt; [spread item]
                &lt;no-splice&gt; [item]
                panic [&quot;Bad instruction:&quot; instruction]
           ]
       ]
    == [a b [c d] &#39;x]

And COMPOSE can have some slots that splice and others that do not, within the same operation:

    &gt;&gt; data: [a b]

    &gt;&gt; compose [spliced (spread data) non-spliced (data)]
    == [spliced a b non-spliced [a b]]

(COMPOSE is a case where not splicing by default is glaringly obvious as the right choice for a generic operation.)

## Antiform Parameter Conventions Should Be Used *Sparingly*!

Routines that do not intend to react to an antiform should generally not take them as parameters.

As a good example, REDUCE might seem like the kind of thing that could act on group antiforms:

    &gt;&gt; append [a b c] reduce spread [1 + 2 3 + 4]
    == [a b c 3 7]

But we want to avoid this temptation, to stop the &quot;spread&quot; of antiforms to touching parts of the system that should not be concerned with them.  So exercise restraint here...and shift the burden on the calling code to reshape itself so that antiforms only exist at the points that are very close to the calls they affect:

    &gt;&gt; append [a b c] spread reduce [1 + 2 3 + 4]
    == [a b c 3 7]

## Good Riddance /ONLY

The elimination of /ONLY from the semantic model, and to have it not contaminate the user&#39;s heads, means that people can learn more generic tools that work in more contexts.

Its appearance in Ren-C will be limited to the Redbol compatibility module.</description>
    
    <lastBuildDate>Mon, 21 Jul 2025 05:23:24 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Long-Awaited Death of /ONLY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="rgchris" data-post="2" data-topic="1607">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>A variation on lit-bit decay <img src="https://rebol.metaeducation.com/images/emoji/twitter/grimacing.png?v=14" title=":grimacing:" class="emoji" alt=":grimacing:" loading="lazy" width="20" height="20">.<br>
...<br>
would be nice to ditch the assignation as soon as possible as it's something of a hidden attribute.</p>
</blockquote>
</aside>
<p>We can debate whether a plain WORD! access of a variable containing a group antiform should work or if it should require a special accessor (like GET:ANY).</p>
<p>And we can ask whether you should be able to store group antiforms in words at all, or if that just errors.</p>
<pre><code>&gt;&gt; thing: spread [a b c]
** Error: Can't store group antiforms in WORD!s (use meta)

&gt;&gt; thing: lift spread [a b c]
== ~(a b c)~
</code></pre>
<p>But empirically it seems like being able to treat these as regular variables has enough advantages to allow it.  We'll have to see.</p>
<p>(<strong>UPDATE:</strong> Overwhelmingly it seems that splices being treated as normal variables is better than forcing people through hoops to use metavariables to access them.)</p>
<aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1607">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<pre><code>&gt;&gt; thing: spread [a b c]
== ~(a b c)~  ; anti

&gt;&gt; thing
== [a b c]  ; on second evaluation, decay
</code></pre>
</blockquote>
</aside>
<p>One issue here is that SPREAD things forget about the type of the input that was spread.  If you SPREAD a GROUP!, you get an antiform group... an if you SPREAD a BLOCK!, you get an antiform group as well.  Other operators that are willing to split up PATH! and TUPLE! would make antiform groups out of them too.</p>
<p><em>(The eye-catching "information was lost" aspect was part of what motivated choosing groups instead of blocks for the splice antiform type...since blocks will be the most common input, turning them into a group is a good way of showing it's lossy.)</em></p>
<p>So that kind of would guide us away from thinking about decay here.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607/3</link>
        <pubDate>Thu, 21 Jul 2022 05:46:01 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1607-3</guid>
        <source url="https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607.rss">The Long-Awaited Death of /ONLY</source>
      </item>
      <item>
        <title>The Long-Awaited Death of /ONLY</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1607">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But we want to avoid this temptation, to stop the "spread" of antiforms to touching parts of the system that should not be concerned with them. So exercise restraint here...and shift the burden on the calling code to reshape itself so that antiforms only exist at the points that are very close to the calls they affect:</p>
</blockquote>
</aside>
<p>Can this be addressed in how SPREAD blocks are evaluated? A variation on lit-bit decay <img src="https://rebol.metaeducation.com/images/emoji/twitter/grimacing.png?v=14" title=":grimacing:" class="emoji" alt=":grimacing:" loading="lazy" width="20" height="20">.</p>
<pre><code class="lang-plaintext">&gt;&gt; spread [a b c]
== ~(a b c)~  ; anti

&gt;&gt; thing: spread [a b c]
== ~(a b c)~  ; anti

&gt;&gt; thing
== [a b c]  ; on second evaluation, decay

&gt;&gt; append [] thing: spread [a b c]
== [[a b c]]  ; ^^ is second evaluation, =&gt; decay
</code></pre>
<p>Probably not, but would be nice to ditch the assignation as soon as possible as it's something of a hidden attribute.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607/2</link>
        <pubDate>Thu, 21 Jul 2022 05:46:01 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1607-2</guid>
        <source url="https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607.rss">The Long-Awaited Death of /ONLY</source>
      </item>
      <item>
        <title>The Long-Awaited Death of /ONLY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>As of July 2022, /ONLY is no longer a refinement available on APPEND, INSERT, CHANGE, FIND, SELECT, COMPOSE, or similar functions.</strong>  It only appears in the Redbol module <a href="https://rebol.metaeducation.com/t/agree-to-disagree-points-places-i-see-both-sides/1862/3">through emulation</a>.</p>
<h2><a name="p-5119-as-is-semantics-are-default-1" class="anchor" href="https://rebol.metaeducation.com#p-5119-as-is-semantics-are-default-1"></a>"AS-IS" Semantics Are Default</h2>
<p>It's easy to empathize with the historical Rebol idea of "splice blocks by default", if you only look at examples where the code is fully literal:</p>
<pre><code>append files [%foo.r %bar.r]
code: compose [... keep [sum: sum + x] ...]
</code></pre>
<p>But problems immediately strike when you start using variables that may-or-may-not-be blocks.  You can't rely on any invariants, and this leads to broken code:</p>
<pre><code>&gt;&gt; block: [#a {b} [c d e] %f]

&gt;&gt; pick block 3
== [c d e]

&gt;&gt; find block pick block 3
== \~null~\  ; antiform
</code></pre>
<p>Time and experience has proven that "as-is" semantics are the safest and clearest default:</p>
<pre><code>&gt;&gt; append [a b c] [d e]
== [a b c [d e]]
</code></pre>
<p>Ren-C offers a new tool for "spliced" semantics...which is to pass a GROUP! antiform ("quoting level -1").  SPREAD is the first function offered which produces them:</p>
<pre><code>&gt;&gt; spread [d e]
== ~(d e)~  ; anti

&gt;&gt; append [a b c] spread [d e]
== [a b c d e]
</code></pre>
<p>But there's nothing particularly special about SPREAD, and there will be many other options for defining functions that may-or-may-not return group antiforms...which have more parameterization and nuance.</p>
<h2><a name="p-5119-making-the-value-carry-splicing-intent-brings-systemic-good-2" class="anchor" href="https://rebol.metaeducation.com#p-5119-making-the-value-carry-splicing-intent-brings-systemic-good-2"></a>Making The Value Carry Splicing Intent Brings Systemic Good</h2>
<p>The benefits are everywhere, with safer defaults and clear choices...for instance in REPLACE:</p>
<pre><code>&gt;&gt; replace [[a b] a b a b] [a b] [c d e]
== [[c d e] a b a b] 

&gt;&gt; replace [[a b] a b a b] spread [a b] [c d e]
== [[a b] [c d e] [c d e]]

&gt;&gt; replace [[a b] a b a b] [a b] spread [c d e]
== [c d e a b a b]

&gt;&gt; replace [[a b] a b a b] spread [a b] spread [c d e]
== [[a b] c d e c d e]
</code></pre>
<p>Branching code can make decisions to splice-or-not-splice on a case by case basis:</p>
<pre><code>&gt;&gt; code: [&lt;splice&gt; [a b] &lt;no-splice&gt; [c d] &lt;no-splice&gt; 'x]

&gt;&gt; map-each [instruction item] code [
       switch instruction [
            &lt;splice&gt; [spread item]
            &lt;no-splice&gt; [item]
            panic ["Bad instruction:" instruction]
       ]
   ]
== [a b [c d] 'x]
</code></pre>
<p>And COMPOSE can have some slots that splice and others that do not, within the same operation:</p>
<pre><code>&gt;&gt; data: [a b]

&gt;&gt; compose [spliced (spread data) non-spliced (data)]
== [spliced a b non-spliced [a b]]
</code></pre>
<p>(COMPOSE is a case where not splicing by default is glaringly obvious as the right choice for a generic operation.)</p>
<h2><a name="p-5119-antiform-parameter-conventions-should-be-used-sparingly-3" class="anchor" href="https://rebol.metaeducation.com#p-5119-antiform-parameter-conventions-should-be-used-sparingly-3"></a>Antiform Parameter Conventions Should Be Used <em>Sparingly</em>!</h2>
<p>Routines that do not intend to react to an antiform should generally not take them as parameters.</p>
<p>As a good example, REDUCE might seem like the kind of thing that could act on group antiforms:</p>
<pre><code>&gt;&gt; append [a b c] reduce spread [1 + 2 3 + 4]
== [a b c 3 7]
</code></pre>
<p>But we want to avoid this temptation, to stop the "spread" of antiforms to touching parts of the system that should not be concerned with them.  So exercise restraint here...and shift the burden on the calling code to reshape itself so that antiforms only exist at the points that are very close to the calls they affect:</p>
<pre><code>&gt;&gt; append [a b c] spread reduce [1 + 2 3 + 4]
== [a b c 3 7]
</code></pre>
<h2><a name="p-5119-good-riddance-only-4" class="anchor" href="https://rebol.metaeducation.com#p-5119-good-riddance-only-4"></a>Good Riddance /ONLY</h2>
<p>The elimination of /ONLY from the semantic model, and to have it not contaminate the user's heads, means that people can learn more generic tools that work in more contexts.</p>
<p>Its appearance in Ren-C will be limited to the Redbol compatibility module.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607/1</link>
        <pubDate>Thu, 21 Jul 2022 04:00:00 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1607-1</guid>
        <source url="https://rebol.metaeducation.com/t/the-long-awaited-death-of-only/1607.rss">The Long-Awaited Death of /ONLY</source>
      </item>
  </channel>
</rss>
