<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Console Treatment of VOID vs. NOTHING</title>
    <link>https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045</link>
    <description>Rebol2 and Red both have a console property that when the console sees an UNSET!, it prints nothing:

    &gt;&gt; block: reduce [&lt;a&gt; #[unset!] &lt;b&gt;]
    == [&lt;a&gt; unset &lt;b&gt;]  ; bad rendering, conflates #[unset!] with the word `unset`

    &gt;&gt; first block
    == &lt;a&gt;

    &gt;&gt; second block

    &gt;&gt; third block
    == &lt;b&gt;

This doesn&#39;t provide the best grounding in the console, especially considering that in their world an UNSET! is a reified value that can be found in a block.

However, returning an UNSET! is how functions like PRINT avoid outputting anything with **`==`** in the console:

    rebol2&gt;&gt; print &quot;Notice no == result&quot;
    Notice no == result

    rebol2&gt;&gt; type? print &quot;Test&quot;
    Test
    == unset!

## But What Result Should Ren-C Suppress?

Ren-C has two antiforms which might be considered candidates for not displaying... VOID and NOTHING.

Because voids vanish, it might seem to make the most sense to have voids not print anything, and trashes print out the standard isotopic form:

    &gt;&gt; void

    &gt;&gt; quote void
    == ~void~

    &gt;&gt; ~
    == ~  ; anti

Looking at this, it might seem to make a lot of sense to have functions like PRINT and HELP return VOID.

**BUT** as I explain in [&quot;Why doesn&#39;t PRINT return VOID or NIHIL&quot;](https://forum.rebol.info/t/why-doesnt-print-return-void-or-vaporize-via-nihil/1466), there is a bit of a pitfall.  Voids are friendly in terms of opting out of things:

    &gt;&gt; append [a b c] print &quot;If PRINT returned void...&quot;
    If PRINT returned void...
    == [a b c]

*This seems too friendly to me.*  There&#39;s another possibility of returning NIHIL, which would prohibit use as an argument.  It would wind up making an evaluation appear to be void *if no other expressions were in play*...but if other expressions were involved it would let them fall out

    &gt;&gt; print &quot;If PRINT returned nihil&quot;
    If PRINT returned nihil

    &gt;&gt; append [a b c] &quot;If PRINT returned nihil&quot;
    If PRINT returned nihil
    ** Error: APPEND is missing its VALUE argument

    &gt;&gt; 1 + 2 print &quot;If PRINT returned nihil&quot;
    If PRINT returned nihil
    == 3

So returning NOTHING feels like it makes the most *mechanical* sense...it has the right amount of ornery-ness:

    &gt;&gt; print &quot;Mechanically this works best&quot;
    Mechanically this works best
    == ~  ; anti

But it&#39;s ugly to have that **== ~  ; anti** after every HELP or PRINT or other function.

Historically I&#39;ve gone with NOTHING being invisible, and VOID printing a result.

    &gt;&gt; ~

    &gt;&gt; void
    == ~void~  ; anti

But I&#39;ve given a try at printing the results always to see what my feelings are.</description>
    
    <lastBuildDate>Sat, 24 Aug 2024 22:48:23 +0000</lastBuildDate>
    <category>Console</category>
    <atom:link href="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Console Treatment of VOID vs. NOTHING</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>This behavior has flipped around more times than I can count, but I think when all is taken into consideration the right thing to do is to not display NOTHING.</strong></p>
<p>It's a curious case of going full-circle, to align with historical Rebol's choice that what doesn't show is the same thing as what's in an unset variable.  <em>(Though there really are only so many choices.)</em></p>
<p>This does mean you don't see a "fully instructive feedback" on when something generates nothing.  ...BUT, some cases like unset variables will often error before you even see that:</p>
<pre><code>&gt;&gt; foo: ~

&gt;&gt; foo
** Error: ...
</code></pre>
<p>So that's at least some argument further in favor of it.</p>
<p>Further, now that <a href="https://forum.rebol.info/t/why-shouldnt-void-be-done-with-a-void-word-antiform/2160">voids are word antforms</a>, they are no longer the "lightest" candidates representationally for vanishing, even if their meaning is vanishing-oriented.</p>
<pre><code>&gt;&gt; if false [&lt;a&gt;]
== ~void~  ; anti
</code></pre>
<h2>
<a name="remember-there-are-other-ui-options-in-rich-consoles-1" class="anchor" href="https://forum.rebol.info#remember-there-are-other-ui-options-in-rich-consoles-1"></a>Remember, There Are Other UI Options in Rich Consoles</h2>
<p>I think that if a light gray <strong><code>== ~  ; anti</code></strong> showed up and then faded out of the display, that might make a neat default.  I'd have to see the effect.</p>
          <p><a href="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045/3</link>
        <pubDate>Sun, 03 Mar 2024 19:12:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2045-3</guid>
        <source url="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045.rss">Console Treatment of VOID vs. NOTHING</source>
      </item>
      <item>
        <title>Console Treatment of VOID vs. NOTHING</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2045">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But I've given a try at printing the results always to see what the results are.</p>
</blockquote>
</aside>
<p>I gave a demonstration of Rebol to the <strong><a href="https://kyoss.dev/">KYOSS Group</a></strong> yesterday, and had to sort of wince at that basic first-impression situation:</p>
<pre><code>&gt;&gt; print "Hello"
Hello
== ~  ; anti
</code></pre>
<p>It opens a can of worms right off the bat, by throwing the "anti" at people.</p>
<p>Though outputting nothing at all when you print is far from a universal expectation.  Firefox and Chrome's JavaScript's consoles are explicit about returning undefined from functions like <code>console.log</code>:</p>
<pre><code> &gt; console.log("hello")
   hello                       [VM146:1]
&lt;- undefined
</code></pre>
<p>Clojure prints out nil:</p>
<pre><code>=&gt; (print "Hello World")
 Hello World
 nil
</code></pre>
<p>So utter silence doesn't seem like it's an expectation when you type PRINT.  It's just that something about the <strong><code>; anti</code></strong> part that makes it unsettling to a first-time user.  A simple ~ might seem okay by comparison:</p>
<pre><code>&gt;&gt; print "Hello"
Hello
== ~
</code></pre>
<p>But that's just incorrect.  We have to distinguish ordinary quasi-blank from an antiform blank somehow.</p>
<p>Perhaps instead of <strong><code>; anti</code></strong> it could say <strong><code>; nothing</code></strong></p>
<pre><code>&gt;&gt; first [~]
== ~

&gt;&gt; do [~]
== ~  ; nothing

&gt;&gt; print "Hello"
Hello
== ~  ; nothing
</code></pre>
<p>That isn't much better, and probably does more harm than good in people's "isotopic education".</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2045">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>There's another possibility of returning NIHIL, which would prohibit use as an argument It would wind up making an evaluation appear to be void <em>if no other expressions were in play</em>...but if other expressions were involved it would let them fall out:</p>
<pre><code>&gt;&gt; print "If PRINT returned nihil"
If PRINT returned nihil

&gt;&gt; append [a b c] "If PRINT returned nihil"
If PRINT returned nihil
** Error: APPEND is missing its VALUE argument

&gt;&gt; 1 + 2 print "If PRINT returned nihil"
If PRINT returned nihil
== 3
</code></pre>
</blockquote>
</aside>
<p>This only works if voids are picked as what the console does not display.</p>
<p><strong>I can't avoid the fact that vaporization of PRINT makes me uneasy.  I prefer making you write <code>elide print</code>.</strong></p>
<p>There are downsides to it, but there are also upsides.  It means PRINT would go back to being unusable in assignments:</p>
<pre><code>&gt;&gt; x: print "Hi"
** Script Error: No value in isotopic BLOCK! pack: ~[]~ (nihil)
</code></pre>
<p>But you'd be able to tack it on the tail of expressions:</p>
<pre><code>&gt;&gt; x: (1 + 2 print "Hi")
Hi
== 3
</code></pre>
<p>Maybe more people consider that a feature than bug... <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> and <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a> have repeatedly asked <a href="https://forum.rebol.info/t/why-doesnt-print-return-void-or-vaporize-via-nihil/1466">why can't PRINT vaporize</a> instead of having to write <strong>elide print</strong>.  I've been stubborn about resisting, but mostly because I don't want people to become too casual about making vaporizing functions...the fewer, the better.</p>
<p>It's an immovable-object-meets-unstoppable-force situation...where I don't want to compromise the accuracy of the console, and I also don't want first impressions of the console to slap people in the face with confusion.</p>
          <p><a href="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045/2</link>
        <pubDate>Thu, 14 Sep 2023 18:48:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2045-2</guid>
        <source url="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045.rss">Console Treatment of VOID vs. NOTHING</source>
      </item>
      <item>
        <title>Console Treatment of VOID vs. NOTHING</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol2 and Red both have a console property that when the console sees an UNSET!, it prints nothing:</p>
<pre><code>&gt;&gt; block: reduce [&lt;a&gt; #[unset!] &lt;b&gt;]
== [&lt;a&gt; unset &lt;b&gt;]  ; bad rendering, conflates #[unset!] with the word `unset`

&gt;&gt; first block
== &lt;a&gt;

&gt;&gt; second block

&gt;&gt; third block
== &lt;b&gt;
</code></pre>
<p>This doesn't provide the best grounding in the console, especially considering that in their world an UNSET! is a reified value that can be found in a block.</p>
<p>However, returning an UNSET! is how functions like PRINT avoid outputting anything with <strong><code>==</code></strong> in the console:</p>
<pre><code>rebol2&gt;&gt; print "Notice no == result"
Notice no == result

rebol2&gt;&gt; type? print "Test"
Test
== unset!
</code></pre>
<h2>
<a name="but-what-result-should-ren-c-suppress-1" class="anchor" href="https://forum.rebol.info#but-what-result-should-ren-c-suppress-1"></a>But What Result Should Ren-C Suppress?</h2>
<p>Ren-C has two antiforms which might be considered candidates for not displaying... VOID and NOTHING.</p>
<p>Because voids vanish, it might seem to make the most sense to have voids not print anything, and trashes print out the standard isotopic form:</p>
<pre><code>&gt;&gt; void

&gt;&gt; quote void
== ~void~

&gt;&gt; ~
== ~  ; anti
</code></pre>
<p>Looking at this, it might seem to make a lot of sense to have functions like PRINT and HELP return VOID.</p>
<p><strong>BUT</strong> as I explain in <a href="https://forum.rebol.info/t/why-doesnt-print-return-void-or-vaporize-via-nihil/1466">"Why doesn't PRINT return VOID or NIHIL"</a>, there is a bit of a pitfall.  Voids are friendly in terms of opting out of things:</p>
<pre><code>&gt;&gt; append [a b c] print "If PRINT returned void..."
If PRINT returned void...
== [a b c]
</code></pre>
<p><em>This seems too friendly to me.</em>  There's another possibility of returning NIHIL, which would prohibit use as an argument.  It would wind up making an evaluation appear to be void <em>if no other expressions were in play</em>...but if other expressions were involved it would let them fall out</p>
<pre><code>&gt;&gt; print "If PRINT returned nihil"
If PRINT returned nihil

&gt;&gt; append [a b c] "If PRINT returned nihil"
If PRINT returned nihil
** Error: APPEND is missing its VALUE argument

&gt;&gt; 1 + 2 print "If PRINT returned nihil"
If PRINT returned nihil
== 3
</code></pre>
<p>So returning NOTHING feels like it makes the most <em>mechanical</em> sense...it has the right amount of ornery-ness:</p>
<pre><code>&gt;&gt; print "Mechanically this works best"
Mechanically this works best
== ~  ; anti
</code></pre>
<p>But it's ugly to have that <strong>== ~  ; anti</strong> after every HELP or PRINT or other function.</p>
<p>Historically I've gone with NOTHING being invisible, and VOID printing a result.</p>
<pre><code>&gt;&gt; ~

&gt;&gt; void
== ~void~  ; anti
</code></pre>
<p>But I've given a try at printing the results always to see what my feelings are.</p>
          <p><a href="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045/1</link>
        <pubDate>Thu, 03 Aug 2023 22:48:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2045-1</guid>
        <source url="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045.rss">Console Treatment of VOID vs. NOTHING</source>
      </item>
  </channel>
</rss>
