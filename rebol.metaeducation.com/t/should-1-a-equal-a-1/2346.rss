<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should (1 + #A) Equal (#A + 1) ?</title>
    <link>https://rebol.metaeducation.com/t/should-1-a-equal-a-1/2346</link>
    <description>I ran across this peculiarity:

    rebol2&gt;&gt; 1 + #&quot;A&quot;
    == 66

    rebol2&gt;&gt; #&quot;A&quot; + 1
    == #&quot;B&quot;

Red and R3-Alpha do this too.

Loosely speaking, there&#39;s an internal policy which is something along the lines of *&quot;if the types don&#39;t match, convert the second operand into the type of the first, and then do the add&quot;*.

Because of this, it&#39;s necessary to support the addition of characters to each other to get **(#A + 1)** to work:

    red&gt;&gt; #&quot;A&quot; + #&quot;B&quot;
    == #&quot;^(83)&quot;  ; only useful in implementation of old coercion rule

...which seems nonsensical to me.

## What Do Other Languages Do?

If &quot;implicit type promotion&quot; is supported, many languages, including C, C++, and Java, use a system where the &quot;smaller&quot; type is converted to the &quot;larger&quot; type ([e.g., int to float](https://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap02/exp-2.html)).  Having an idea of what&#39;s bigger and what&#39;s smaller helps avoid the commutativity problem.

And in the specific case of adding characters to integers, Rebol is weird to give a different answer depending on order.

* **Python:** In Python, adding an integer to a character (or vice versa) would raise a TypeError. Python doesn&#39;t implicitly convert between these types.

* **JavaScript:** JavaScript would convert the character to its ASCII value and perform integer addition in both cases, resulting in a number.

* **Ruby:** Similar to Python, Ruby would raise a TypeError when trying to add an integer to a character.

* **Java:** Java doesn&#39;t allow direct addition between char and int types without explicit casting.

I think adding integers to characters and wanting a character back is the more common operation, so if it&#39;s legal, I&#39;d advocate for:

    &gt;&gt; 1 + #A
    == #B

    &gt;&gt; #A + 1
    == #B

But if we want to rule out addition of characters to characters (which I do) this commutative behavior doesn&#39;t fall out from a system of implicit conversion with an ordering on &quot;bigger&quot; types... since characters are smaller.

I don&#39;t see an obvious &quot;rule&quot; besides hardcoding it.

## What About Commutativity In General?

We can imagine decisions on what you would make **`+`** mean that would not be commutative.  For instance, if you were allowed to make it mean &quot;join strings&quot;:

    &gt;&gt; &quot;abc&quot; + &quot;def&quot;
    == &quot;abcdef&quot;

    &gt;&gt; &quot;def&quot; + &quot;abc&quot;
    == &quot;defabc&quot;

So you might try and argue that the rules for **add** are different than the rules for **+**, and it&#39;s only when + is acting as ADD that it enforces commutativity.  However... even in the domain of math, you have exceptions... e.g. matrix multiplication is not commutative.

The more general question of commutativity seems to be that there aren&#39;t any popular languages that do it automatically.  e.g. in C++ you have to overload **`operator+(T1,T2)`** and **`operator+(T2,T1)`** separately...one of them can call the other, but that never happens automatically.</description>
    
    <lastBuildDate>Fri, 06 Dec 2024 14:01:08 +0000</lastBuildDate>
    <category>Math</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-1-a-equal-a-1/2346.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should (1 + #A) Equal (#A + 1) ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I ran across this peculiarity:</p>
<pre><code>rebol2&gt;&gt; 1 + #"A"
== 66

rebol2&gt;&gt; #"A" + 1
== #"B"
</code></pre>
<p>Red and R3-Alpha do this too.</p>
<p>Loosely speaking, there's an internal policy which is something along the lines of <em>"if the types don't match, convert the second operand into the type of the first, and then do the add"</em>.</p>
<p>Because of this, it's necessary to support the addition of characters to each other to get <strong>(<span class="hashtag-raw">#A</span> + 1)</strong> to work:</p>
<pre><code>red&gt;&gt; #"A" + #"B"
== #"^(83)"  ; only useful in implementation of old coercion rule
</code></pre>
<p>...which seems nonsensical to me.</p>
<h2><a name="p-7963-what-do-other-languages-do-1" class="anchor" href="https://rebol.metaeducation.com#p-7963-what-do-other-languages-do-1"></a>What Do Other Languages Do?</h2>
<p>If "implicit type promotion" is supported, many languages, including C, C++, and Java, use a system where the "smaller" type is converted to the "larger" type (<a href="https://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap02/exp-2.html">e.g., int to float</a>).  Having an idea of what's bigger and what's smaller helps avoid the commutativity problem.</p>
<p>And in the specific case of adding characters to integers, Rebol is weird to give a different answer depending on order.</p>
<ul>
<li>
<p><strong>Python:</strong> In Python, adding an integer to a character (or vice versa) would raise a TypeError. Python doesn't implicitly convert between these types.</p>
</li>
<li>
<p><strong>JavaScript:</strong> JavaScript would convert the character to its ASCII value and perform integer addition in both cases, resulting in a number.</p>
</li>
<li>
<p><strong>Ruby:</strong> Similar to Python, Ruby would raise a TypeError when trying to add an integer to a character.</p>
</li>
<li>
<p><strong>Java:</strong> Java doesn't allow direct addition between char and int types without explicit casting.</p>
</li>
</ul>
<p>I think adding integers to characters and wanting a character back is the more common operation, so if it's legal, I'd advocate for:</p>
<pre><code>&gt;&gt; 1 + #A
== #B

&gt;&gt; #A + 1
== #B
</code></pre>
<p>But if we want to rule out addition of characters to characters (which I do) this commutative behavior doesn't fall out from a system of implicit conversion with an ordering on "bigger" types... since characters are smaller.</p>
<p>I don't see an obvious "rule" besides hardcoding it.</p>
<h2><a name="p-7963-what-about-commutativity-in-general-2" class="anchor" href="https://rebol.metaeducation.com#p-7963-what-about-commutativity-in-general-2"></a>What About Commutativity In General?</h2>
<p>We can imagine decisions on what you would make <strong><code>+</code></strong> mean that would not be commutative.  For instance, if you were allowed to make it mean "join strings":</p>
<pre><code>&gt;&gt; "abc" + "def"
== "abcdef"

&gt;&gt; "def" + "abc"
== "defabc"
</code></pre>
<p>So you might try and argue that the rules for <strong>add</strong> are different than the rules for <strong>+</strong>, and it's only when + is acting as ADD that it enforces commutativity.  However... even in the domain of math, you have exceptions... e.g. matrix multiplication is not commutative.</p>
<p>The more general question of commutativity seems to be that there aren't any popular languages that do it automatically.  e.g. in C++ you have to overload <strong><code>operator+(T1,T2)</code></strong> and <strong><code>operator+(T2,T1)</code></strong> separately...one of them can call the other, but that never happens automatically.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-1-a-equal-a-1/2346/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-1-a-equal-a-1/2346/1</link>
        <pubDate>Fri, 06 Dec 2024 12:30:01 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2346-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-1-a-equal-a-1/2346.rss">Should (1 + #A) Equal (#A + 1) ?</source>
      </item>
  </channel>
</rss>
