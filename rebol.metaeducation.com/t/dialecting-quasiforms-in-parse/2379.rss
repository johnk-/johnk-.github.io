<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dialecting Quasiforms In PARSE</title>
    <link>https://rebol.metaeducation.com/t/dialecting-quasiforms-in-parse/2379</link>
    <description>The first thought I had about what quasiforms might be useful for would be to match a series of items as a splice:

    &gt;&gt; parse [a b c d] [&#39;a [&#39;b &#39;c &#39;d]]
    == d

    &gt;&gt; parse [a b c d] [&#39;a ~(b c d)~]
    == ~(b c d)~  ; anti

That&#39;s like the behavior of match literally of a splice:

    &gt;&gt; parse [a b c d] [&#39;a @(spread [b c d])]
    == ~(b c d)~  ; anti

But on the downside... if the behavior of quasiforms is taken to mean &quot;match content&quot;, since antiforms can&#39;t occur in blocks then quasi-group would be the *only* useful antiform.  All the rest would be useless or have to come up with some custom definition.

Another possibility would be if quasiforms synthesized the antiform without matching anything:

    &gt;&gt; parse [a] [&#39;a ~(b c d)~]
    == ~(b c d)~  ; anti

     &gt;&gt; parse &quot;aaa&quot; [let x: ~null~ some &quot;a&quot; (x)]
     == ~null~  ; anti
 
     &gt;&gt; [x y]: parse &quot;aaa&quot; [some &quot;a&quot; ~[&#39;a &#39;10]~ | some &quot;b&quot; ~[&#39;b &#39;20]~]
     == a

     &gt;&gt; y
     == 10

But that&#39;s just a synonym for using GROUP! and code to synthesize the value (e.g. **`let x: (~null~)`** or **`let x: (null)`** instead of **`let x: ~null~`**).  The only advantage here is that it&#39;s faster (no execution required, just drop the quote byte from QUASIFORM_2 down to ANTIFORM_0).  

(I&#39;ve already contemplated the idea of **`x: ~null~`** vs. **`x: null`** as something which could be done in code that you&#39;re trying to micro-optimize.)

## But Dialecting Is Supposed To Be *Powerful*...

Rote production of antiforms seems weak compared to dreaming up useful constructs.

e.g. quasi-TRIPWIRE could raise an error with a string (possibly even an interpolated one!)

    &gt;&gt; letter: #b

    &gt;&gt; parse &quot;aaa&quot; [some letter | ~&lt;Expected all (letter)&gt;~]
    ** Error: Expected all b

That&#39;s quite compelling, and supports the argument that maybe customizing the meanings is worth it.  For instance ~[...]~ could actually run PACK vs. being the literal pack.

    &gt;&gt; [a b]: parse [10 20] [let x: integer! let y: integer! ~[x y]~]
    == 10

    &gt;&gt; a
    == 10

    &gt;&gt; b
    == 20

*&quot;But that&#39;s not what the evaluator does with QUASI-BLOCK!&quot;* you might say.  No, but it&#39;s inside PARSE, nothing is doing what the evaluator does.  That&#39;s the whole premise of the language!

A similar premise could apply to the splicing...and it doesn&#39;t even have to return a splice!

    &gt;&gt; middle-letter: &#39;c

    &gt;&gt; parse [a b c d] [&#39;a ~(&#39;b middle-letter &#39;d)~]
    == [b c d]

All QUASI-words are available, while not all antiforms of words are legal.  Since parse is using quasiforms then it means every word is possible.  It could represent an error ID, or something else... maybe shorthands for things like accepting and rejecting?

    &gt;&gt; parse &quot;aaabbb&quot; [some &quot;a&quot; ~accept~]  ; synonym for [accept &lt;input&gt;]
    == &quot;aaabbb&quot;

**Ok, I really like this idea, of clever applications, vs. simply synthesizing antiforms and not matching!**  It&#39;s clearly much neater.

Ren-C has given Rebol quantum leaps in expressivity.

:frog: :atom_symbol:</description>
    
    <lastBuildDate>Sat, 22 Mar 2025 19:57:19 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://rebol.metaeducation.com/t/dialecting-quasiforms-in-parse/2379.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dialecting Quasiforms In PARSE</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Wicked!!! Love to see the renewed energy and focus yielding big results!</p>
          <p><a href="https://rebol.metaeducation.com/t/dialecting-quasiforms-in-parse/2379/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/dialecting-quasiforms-in-parse/2379/2</link>
        <pubDate>Sat, 22 Mar 2025 19:57:19 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2379-2</guid>
        <source url="https://rebol.metaeducation.com/t/dialecting-quasiforms-in-parse/2379.rss">Dialecting Quasiforms In PARSE</source>
      </item>
      <item>
        <title>Dialecting Quasiforms In PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The first thought I had about what quasiforms might be useful for would be to match a series of items as a splice:</p>
<pre><code>&gt;&gt; parse [a b c d] ['a ['b 'c 'd]]
== d

&gt;&gt; parse [a b c d] ['a ~(b c d)~]
== ~(b c d)~  ; anti
</code></pre>
<p>That's like the behavior of match literally of a splice:</p>
<pre><code>&gt;&gt; parse [a b c d] ['a @(spread [b c d])]
== ~(b c d)~  ; anti
</code></pre>
<p>But on the downside... if the behavior of quasiforms is taken to mean "match content", since antiforms can't occur in blocks then quasi-group would be the <em>only</em> useful antiform.  All the rest would be useless or have to come up with some custom definition.</p>
<p>Another possibility would be if quasiforms synthesized the antiform without matching anything:</p>
<pre><code>&gt;&gt; parse [a] ['a ~(b c d)~]
== ~(b c d)~  ; anti

 &gt;&gt; parse "aaa" [let x: ~null~ some "a" (x)]
 == ~null~  ; anti

 &gt;&gt; [x y]: parse "aaa" [some "a" ~['a '10]~ | some "b" ~['b '20]~]
 == a

 &gt;&gt; y
 == 10
</code></pre>
<p>But that's just a synonym for using GROUP! and code to synthesize the value (e.g. <strong><code>let x: (~null~)</code></strong> or <strong><code>let x: (null)</code></strong> instead of <strong><code>let x: ~null~</code></strong>).  The only advantage here is that it's faster (no execution required, just drop the quote byte from QUASIFORM_2 down to ANTIFORM_0).</p>
<p>(I've already contemplated the idea of <strong><code>x: ~null~</code></strong> vs. <strong><code>x: null</code></strong> as something which could be done in code that you're trying to micro-optimize.)</p>
<h2><a name="p-8057-but-dialecting-is-supposed-to-be-powerful-1" class="anchor" href="https://rebol.metaeducation.com#p-8057-but-dialecting-is-supposed-to-be-powerful-1"></a>But Dialecting Is Supposed To Be <em>Powerful</em>...</h2>
<p>Rote production of antiforms seems weak compared to dreaming up useful constructs.</p>
<p>e.g. quasi-TRIPWIRE could raise an error with a string (possibly even an interpolated one!)</p>
<pre><code>&gt;&gt; letter: #b

&gt;&gt; parse "aaa" [some letter | ~&lt;Expected all (letter)&gt;~]
** Error: Expected all b
</code></pre>
<p>That's quite compelling, and supports the argument that maybe customizing the meanings is worth it.  For instance ~[...]~ could actually run PACK vs. being the literal pack.</p>
<pre><code>&gt;&gt; [a b]: parse [10 20] [let x: integer! let y: integer! ~[x y]~]
== 10

&gt;&gt; a
== 10

&gt;&gt; b
== 20
</code></pre>
<p><em>"But that's not what the evaluator does with QUASI-BLOCK!"</em> you might say.  No, but it's inside PARSE, nothing is doing what the evaluator does.  That's the whole premise of the language!</p>
<p>A similar premise could apply to the splicing...and it doesn't even have to return a splice!</p>
<pre><code>&gt;&gt; middle-letter: 'c

&gt;&gt; parse [a b c d] ['a ~('b middle-letter 'd)~]
== [b c d]
</code></pre>
<p>All QUASI-words are available, while not all antiforms of words are legal.  Since parse is using quasiforms then it means every word is possible.  It could represent an error ID, or something else... maybe shorthands for things like accepting and rejecting?</p>
<pre><code>&gt;&gt; parse "aaabbb" [some "a" ~accept~]  ; synonym for [accept &lt;input&gt;]
== "aaabbb"
</code></pre>
<p><strong>Ok, I really like this idea, of clever applications, vs. simply synthesizing antiforms and not matching!</strong>  It's clearly much neater.</p>
<p>Ren-C has given Rebol quantum leaps in expressivity.</p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/frog.png?v=14" title=":frog:" class="emoji only-emoji" alt=":frog:" loading="lazy" width="20" height="20"> <img src="https://rebol.metaeducation.com/images/emoji/twitter/atom_symbol.png?v=14" title=":atom_symbol:" class="emoji only-emoji" alt=":atom_symbol:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/dialecting-quasiforms-in-parse/2379/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/dialecting-quasiforms-in-parse/2379/1</link>
        <pubDate>Sat, 22 Mar 2025 16:32:34 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2379-1</guid>
        <source url="https://rebol.metaeducation.com/t/dialecting-quasiforms-in-parse/2379.rss">Dialecting Quasiforms In PARSE</source>
      </item>
  </channel>
</rss>
