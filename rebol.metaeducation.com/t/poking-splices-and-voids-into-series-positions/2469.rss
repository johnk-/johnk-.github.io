<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Poking Splices and Voids Into Series Positions</title>
    <link>https://rebol.metaeducation.com/t/poking-splices-and-voids-into-series-positions/2469</link>
    <description>I&#39;m tidying up SET and GET to run on a common infrastructure based on PICK and POKE (generalized via isotopes and &quot;dual representation&quot;).  It&#39;s quite nice!

As I go, I&#39;m improving things left and right.  The POKE handler is now built on the same code as CHANGE, with a :PART of 1.  That means you can do things like this:

    &gt;&gt; list: [a b c]
    == [a b c]

    &gt;&gt; list.2: spread [d e f]
    == \~(d e f)~\  ; antiform (splice!)

    &gt;&gt; list
    == [a d e f c]

    &gt;&gt; list.3: void
    == \~[]~\  ; antiform (pack!) &quot;void&quot;

    &gt;&gt; list
    == [a d f c]

Since strings can&#39;t store lists in them, you don&#39;t have to &quot;spread&quot; strings to splice them...

    &gt;&gt; text: &quot;abc&quot;
    == &quot;abc&quot;

    &gt;&gt; text.2: &quot;def&quot;
    == &quot;def&quot;

    &gt;&gt; text
    == &quot;adefc&quot;

    &gt;&gt; text.3: void
    == \~[]~\  ; antiform (pack!) &quot;void&quot;

    &gt;&gt; text
    == &quot;adfc&quot;

There&#39;s lots of good in the new architecture.  Expect to see historical woes vanish, and more new features...</description>
    
    <lastBuildDate>Fri, 23 May 2025 15:41:36 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://rebol.metaeducation.com/t/poking-splices-and-voids-into-series-positions/2469.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Poking Splices and Voids Into Series Positions</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2469">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; list
== [a d e f c]

&gt;&gt; list.3: void
== \~[]~\  ; antiform (pack!) "void"
</code></pre>
</blockquote>
</aside>
<p>One might ask if VOID should opt out of the assignment entirely, when "opt-in-nothingness" is already covered by BLANK (empty splice):</p>
<p>e.g. why not make it:</p>
<pre><code>&gt;&gt; list
== [a d e f c]

&gt;&gt; list.3: void
== \~null~\  ; antiform

&gt;&gt; list
== [a d e f c]

&gt;&gt; list.3: blank
== \~()~\  ; antiform (splice!) "blank"

&gt;&gt; list
== [a d f c]
</code></pre>
<p>That would give you a way to "opt out" of the assignment, as well as a way to "opt in" but assign nothing.</p>
<p>However... we have to have <em>some</em> way to ask for "remove entirely".that generalizes to places that can meaningfully store BLANK! (e.g. MAP!).</p>
<p>That requires an unstable antiform.  We could invent an ERROR! with this meaning, but today an empty pack is used.  My instincts tell me not to try and do this with something besides OPT.</p>
<p>Maybe there's another way to "un-ask" for a SET/POKE, and keep the code going without doing it.  I'll think about it...</p>
          <p><a href="https://rebol.metaeducation.com/t/poking-splices-and-voids-into-series-positions/2469/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/poking-splices-and-voids-into-series-positions/2469/2</link>
        <pubDate>Fri, 23 May 2025 15:08:20 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2469-2</guid>
        <source url="https://rebol.metaeducation.com/t/poking-splices-and-voids-into-series-positions/2469.rss">Poking Splices and Voids Into Series Positions</source>
      </item>
      <item>
        <title>Poking Splices and Voids Into Series Positions</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm tidying up SET and GET to run on a common infrastructure based on PICK and POKE (generalized via isotopes and "dual representation").  It's quite nice!</p>
<p>As I go, I'm improving things left and right.  The POKE handler is now built on the same code as CHANGE, with a :PART of 1.  That means you can do things like this:</p>
<pre><code>&gt;&gt; list: [a b c]
== [a b c]

&gt;&gt; list.2: spread [d e f]
== \~(d e f)~\  ; antiform (splice!)

&gt;&gt; list
== [a d e f c]

&gt;&gt; list.3: void
== \~[]~\  ; antiform (pack!) "void"

&gt;&gt; list
== [a d f c]
</code></pre>
<p>Since strings can't store lists in them, you don't have to "spread" strings to splice them...</p>
<pre><code>&gt;&gt; text: "abc"
== "abc"

&gt;&gt; text.2: "def"
== "def"

&gt;&gt; text
== "adefc"

&gt;&gt; text.3: void
== \~[]~\  ; antiform (pack!) "void"

&gt;&gt; text
== "adfc"
</code></pre>
<p>There's lots of good in the new architecture.  Expect to see historical woes vanish, and more new features...</p>
          <p><a href="https://rebol.metaeducation.com/t/poking-splices-and-voids-into-series-positions/2469/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/poking-splices-and-voids-into-series-positions/2469/1</link>
        <pubDate>Fri, 23 May 2025 15:04:04 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2469-1</guid>
        <source url="https://rebol.metaeducation.com/t/poking-splices-and-voids-into-series-positions/2469.rss">Poking Splices and Voids Into Series Positions</source>
      </item>
  </channel>
</rss>
