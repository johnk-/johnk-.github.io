<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should ANY-VALUE! Include Isotopes?</title>
    <link>https://forum.rebol.info/t/should-any-value-include-isotopes/2026</link>
    <description>So if you don&#39;t put any type restrictions on a parameter, it will allow isotopes:

     &gt;&gt; foo: func [x] [probe x]

    &gt;&gt; foo null
    ~null~  ; isotope

And right now, that is a synonym for ANY-VALUE!.

     &gt;&gt; foo: func [x [any-value!]] [probe x]

    &gt;&gt; foo null
    ~null~  ; isotope

**But what if you want to exclude isotopes?**  We could have a name for the typeset excluding isotopes (perhaps ANY-CELL!).  Or we could say that ANY-VALUE! doesn&#39;t include isotopes by default, and so you have to write **[any-value! isotope!]** if you want them... or just include the specific ones you intend (like **[null! any-value!]**.

Right now I&#39;m going the route of saying ANY-CELL! is the narrower set of values that do not include isotopes.  Is there a better term for saying something can be put into an array vs. not?

*&quot;10 is an integer! which is legal to use as a cell, while ~null~ isotopes are not legal as cells, but can be variable values&quot;*

It seems shorter and cleaner than ANY-REIFIED!  or something like that.  I don&#39;t know any better options.</description>
    
    <lastBuildDate>Thu, 07 Dec 2023 17:52:42 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/should-any-value-include-isotopes/2026.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should ANY-VALUE! Include Isotopes?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="2026">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So if you don't put any type restrictions on a parameter, right now, that is a synonym for ANY-VALUE!</p>
</blockquote>
</aside>
<p>This wasn't always the case...</p>
<h2>
<a name="originally-any-value-did-not-include-null-1" class="anchor" href="https://forum.rebol.info#originally-any-value-did-not-include-null-1"></a>Originally, ANY-VALUE! did not include NULL</h2>
<p>Typesets were implemented as bitsets based on the cell type byte.  Nulls had a distinguished type byte of zero.  Then the corresponding bit for null was not set in ANY-VALUE!.</p>
<p>So an ANY-VALUE! was considered everything but a null.  If you wanted a function to be able to take a null argument, you'd have to say <strong><code>[&lt;opt&gt; any-value!]</code></strong></p>
<p>Back then I claimed that NULL was a "non-valued state", with the terminology that <em>"it's not a value, because you can't put it in a block"</em>.</p>
<p>Nevertheless, the variables at the time could hold nulls.  This runs up against my new competing terminological idea: <em>"values are anything you can put into variables."</em></p>
<h2>
<a name="excluding-isotopes-by-default-seems-appealing-2" class="anchor" href="https://forum.rebol.info#excluding-isotopes-by-default-seems-appealing-2"></a>Excluding Isotopes By Default Seems Appealing</h2>
<p>When users reach for a type constraint to say "I purposefully mean to accept many values", it's nice if isotopes aren't included in that.</p>
<p>NULL exclusion is a good one, with a historical basis.  Much of the reason for existence of NULL is that it's rejected by most functions (outside of things like IF which are deliberately testing for nulls).  Functions generally shouldn't take them.</p>
<p><strong>Another big-new-cool reason is that it would exclude "ACTIONs".</strong>  If you can't get the activated form of an action by default, your code doesn't have to be paranoid about putting in GET-WORD!s everywhere to disable them.</p>
<p><em>(NONEs are already excluded from normal parameters now, you have to use a ^META parameter to get them.)</em></p>
<p>Excluding isotopes would exclude things like logic ~true~ and ~false~, along with splices and other things.  I don't have a problem personally with routines that care about logic needing to explicitly add LOGIC? to the type constraints.</p>
<h2>
<a name="the-code-sticks-us-with-values-meaning-3" class="anchor" href="https://forum.rebol.info#the-code-sticks-us-with-values-meaning-3"></a>The Code Sticks Us With Value*'s Meaning</h2>
<p>All things being equal, I might say that "variables can hold values -or- stable isotopes (or voids)" would be good for being able to say ANY-VALUE? instead of ANY-ELEMENT?</p>
<p>But the code... has a meaning for Value*, and it really is pretty much literally "the kind of state that can be held by a variable".</p>
<p>The implication here is that all the places that say <strong><code>[&lt;opt&gt; any-value?]</code></strong> right now are redundant...that ANY-VALUE? includes null, and if you want to exclude nulls you have to use ANY-ELEMENT? and add in the isotopes you want from there.</p>
<h2>
<a name="biggest-cold-feet-issue-action-isotopes-by-default-4" class="anchor" href="https://forum.rebol.info#biggest-cold-feet-issue-action-isotopes-by-default-4"></a>Biggest Cold-Feet Issue: ACTION Isotopes By Default</h2>
<p>I started reviewing this point when I was right on the brink of turning all the <code>[&lt;opt&gt; any-value?]</code> into <code>[any-value?]</code> and just moving along...saying what's done is done.</p>
<p>But this means you can be receiving something that will execute when you reference it by word...as a common default.</p>
<p>A bit part of me wants to say that functions won't accept frame isotopes (e.g. actions) and you have to ^META them, the same way you have to do with void isotopes representing unset values.</p>
<p>But features break.  COLLECT is implemented by passing the block you give it to a function with an argument KEEP, and passes the keeper function as that parameter.  The function builder takes care of the binding.  I also use the feature in UPARSE, where the incoming PARSERs are live actions as well as parameters.</p>
<p>Some comfort can be taken that at least this is a place where you have a type block to enforce the policy of your choosing.  What worried me more about things like code enumerating blocks is you didn't get that choice.</p>
<h2>
<a name="long-story-being-short-any-value-includes-isotopes-5" class="anchor" href="https://forum.rebol.info#long-story-being-short-any-value-includes-isotopes-5"></a>Long Story Being Short: ANY-VALUE? Includes Isotopes</h2>
<p>It does make me wonder, though, if a different parameter convention for accepting "live" actions is needed.  GET-WORD! was once proposed as a good visual cue:</p>
<pre><code> foo: func [value [any-value?]] [...]   ; would reject ACTIONs despite ANY-VALUE?
 bar: func [:value [any-value?]] [...]  ; accepts the live action
</code></pre>
<p>This would attack the problem without saying that a live action wasn't an ANY-VALUE... it would just be prohibited by some other rule (much like how NONE is prohibited for another reason contextual to parameters).</p>
<p>But that's a separate design question, and for now the definition stands:</p>
<h3>
<a name="a-value-is-any-state-that-can-be-stored-in-a-variable-6" class="anchor" href="https://forum.rebol.info#a-value-is-any-state-that-can-be-stored-in-a-variable-6"></a><strong>A "Value" is any state that can be stored in a variable</strong>.</h3>
          <p><a href="https://forum.rebol.info/t/should-any-value-include-isotopes/2026/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-any-value-include-isotopes/2026/3</link>
        <pubDate>Thu, 07 Dec 2023 17:52:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2026-3</guid>
        <source url="https://forum.rebol.info/t/should-any-value-include-isotopes/2026.rss">Should ANY-VALUE! Include Isotopes?</source>
      </item>
      <item>
        <title>Should ANY-VALUE! Include Isotopes?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2026">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>But what if you want to exclude isotopes?</strong> We could have a name for the typeset excluding isotopes (perhaps ANY-CELL!). Or we could say that ANY-VALUE! doesn't include isotopes by default, and so you have to write <strong>[any-value! isotope!]</strong> if you want them... or just include the specific ones you intend (like <strong>[null! any-value!]</strong>.</p>
</blockquote>
</aside>
<p>Let me point out that it seems best if typechecking applies to the unescaped form.  So if you have a ^META argument which says it can accept a something unstable like a PACK!, that is written as <strong>func [^arg [integer! pack!]]</strong>, not <strong>func [^arg [quoted-integer! quasi-pack!]]</strong>.</p>
<p>As such, isotope! would have a different meaning for meta and non-meta parameters.  This suggests needing a distinction between <strong>stable-isotope!</strong> and <strong>any-isotope!</strong> <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=12" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
<p>This raises a question about the meaning of <strong>func [^arg [any-value!]]</strong>.  Does that encompass unstable isotopes as well as stable ones?</p>
<p>A term that could subsume stable isotopes and array elements could be ANY-STABLE!, which would then leave ANY-VALUE! exclusively for things you can put in an array.  But I think this runs against the natural usage of the term "value"... if you ask <em>"what is the value of the variable"</em> and something like a ~true~ isotope is legitimate for a variable to hold, that's the variable's value.  I'd also say an object contains "keys" and "values".</p>
<p>But since a variable cannot hold things like a PACK! (block isotope) or a RAISED! (error isotope), it is probably best to avoid saying they are "values".  They're unstable isotopes.  What happens to an unstable isotope is that if they're not in the type checking of a ^META parameter, they decay... e.g. a pack will decay to its first item, and a raised will decay to causing an "untrappable" failure (exempting special functions like sys.util.rescue).</p>
<p>This points to the idea that if you want to take only things that go in BLOCK!s/GROUP!s, those need a name.  At the instant of writing I've called those ANY-CELL!</p>
<h2>
<a name="implementation-naming-issue-cell-datatype-is-superset-1" class="anchor" href="https://forum.rebol.info#implementation-naming-issue-cell-datatype-is-superset-1"></a>Implementation Naming Issue: Cell Datatype is Superset</h2>
<p>In the mechanical implementation itself, I used the name <code>Cell</code> as the base class of <code>Value</code>... not vice versa.  In OOP terms, this suggests all values are cells...but not all cells are values.</p>
<p>The distinction this was intended to draw was the difference between something that has all the information needed for binding (e.g. a variable's value) and a raw array element that can be imaged multiple times and places with different bindings.</p>
<p>This gives you partial type coverage--as a routine for writing an isotope can take the address of a <code>Value</code>, which prevents accidentally writing them into a block! or group!.  While writing something like an integer! can take the address of a <code>Cell</code> and work for either.  However, reading routines like testing to see if a value <em>contains</em> an isotope takes a cell.</p>
<p>So the naming doesn't line up with ANY-CELL! meaning ANY-ARRAY-ITEM!.  I don't feel like going into the code and giving another name to the base class, like <code>Element</code>.  And I don't like the idea of the implementation using the word "cell" to mean something different than what a user of the language would say it means.</p>
<p><em>Perhaps <strong><code>Element</code></strong> is a good name for things you can put in array slots, retaining <strong><code>Cell</code></strong> for the universal base class that applies to <strong><code>Element</code></strong> and <strong><code>Value</code></strong>?</em></p>
<p>I haven't needed in the implementation to specifically call out "Elements" distinctly from "Cells".  If I used my imagination I could probably think up some restrictions...for instance that you can't do pointer math on Cells without casting them to Element.  But really the core issue in the implementation has been that you are restricted from doing variable lookup on cells without combining them with "specifiers" to make "values".</p>
<p><strong>I think I'm happier with ANY-ELEMENT! or ELEMENT!</strong>.  This suggests maybe ANY-CELL! or CELL! could--in compliance with the implementation--subsume unstable isotopes.</p>
<p>I'm scratching my head over the usefulness of an Element subclass in the implementation itself (beyond the exposed typeset).  One of the problems is that Rebol guts are based on using common array routines for objects and function frames...and so even common-sense-sounding ideas like "you can't just increment a pointer to a variable to get to another variable" are subverted all over the place.</p>
<p>I'll have to keep thinking on it, but at least there's a bit of progress with the "element" term.  So append would accept <strong><code>[void! element! splice!]</code></strong>... with void resulting in a no-op, element adding a single item, and splice adding an array itemwise.</p>
          <p><a href="https://forum.rebol.info/t/should-any-value-include-isotopes/2026/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-any-value-include-isotopes/2026/2</link>
        <pubDate>Wed, 21 Jun 2023 16:28:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2026-2</guid>
        <source url="https://forum.rebol.info/t/should-any-value-include-isotopes/2026.rss">Should ANY-VALUE! Include Isotopes?</source>
      </item>
      <item>
        <title>Should ANY-VALUE! Include Isotopes?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So if you don't put any type restrictions on a parameter, it will allow isotopes:</p>
<pre><code> &gt;&gt; foo: func [x] [probe x]

&gt;&gt; foo null
~null~  ; isotope
</code></pre>
<p>And right now, that is a synonym for ANY-VALUE!.</p>
<pre><code> &gt;&gt; foo: func [x [any-value!]] [probe x]

&gt;&gt; foo null
~null~  ; isotope
</code></pre>
<p><strong>But what if you want to exclude isotopes?</strong>  We could have a name for the typeset excluding isotopes (perhaps ANY-CELL!).  Or we could say that ANY-VALUE! doesn't include isotopes by default, and so you have to write <strong>[any-value! isotope!]</strong> if you want them... or just include the specific ones you intend (like <strong>[null! any-value!]</strong>.</p>
<p>Right now I'm going the route of saying ANY-CELL! is the narrower set of values that do not include isotopes.  Is there a better term for saying something can be put into an array vs. not?</p>
<p><em>"10 is an integer! which is legal to use as a cell, while ~null~ isotopes are not legal as cells, but can be variable values"</em></p>
<p>It seems shorter and cleaner than ANY-REIFIED!  or something like that.  I don't know any better options.</p>
          <p><a href="https://forum.rebol.info/t/should-any-value-include-isotopes/2026/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-any-value-include-isotopes/2026/1</link>
        <pubDate>Fri, 14 Apr 2023 21:37:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2026-1</guid>
        <source url="https://forum.rebol.info/t/should-any-value-include-isotopes/2026.rss">Should ANY-VALUE! Include Isotopes?</source>
      </item>
  </channel>
</rss>
