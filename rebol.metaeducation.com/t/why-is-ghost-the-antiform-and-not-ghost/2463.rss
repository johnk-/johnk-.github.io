<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why is Ghost the ~,~ Antiform, and not ~ghost~ ?</title>
    <link>https://rebol.metaeducation.com/t/why-is-ghost-the-antiform-and-not-ghost/2463</link>
    <description>    &gt;&gt; 1 + 2 elide print &quot;GHOST is useful...&quot;
    GHOST is useful
    == 3

**[GHOST is useful](https://rebol.metaeducation.com/t/making-invisible-functions-e-g-comment-elide/2034)**, and most of the time you don&#39;t even know what it looks like because it vanishes.

But it looks very strange in the console in cases where it doesn&#39;t vanish:

    &gt;&gt; elide print &quot;GHOST is useful...&quot;
    GHOST is useful...
    == ~,~  ; antiform (ghost)

Why is it **`~,~`** (a COMMA! antiform) when antiforms like NULL are just antiforms of WORD!?

    &gt;&gt; try pick [a b] 3
    == ~null~  ; anti

Wouldn&#39;t it be more literate if it were just the antiform of **~ghost~** ?

    &gt;&gt; elide print &quot;GHOST is useful...&quot;
    GHOST is useful...
    == ~ghost~  ; antiform</description>
    
    <lastBuildDate>Wed, 21 May 2025 12:22:15 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://rebol.metaeducation.com/t/why-is-ghost-the-antiform-and-not-ghost/2463.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why is Ghost the ~,~ Antiform, and not ~ghost~ ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rebolbot" data-post="1" data-topic="2463">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p>Wouldn't it be more literate if it were just the antiform of <strong>~ghost~</strong> ?</p>
</blockquote>
</aside>
<p>It <em>seems</em> that would look nicer...or at least, be clearer.</p>
<p>Though it's sort-of-interesting that commas vanish in evaluation <em>(when appearing as source)</em>, and ghosts vanish in evaluation <em>(when generated as a product)</em>.</p>
<p>That ties the story of COMMA! and GHOST! together, at least a little.</p>
<p>And once you get used to it, you can feel "in the know" and like it's part of the language aesthetic.  Some things take on that kind of gravitas (<strong><code>&gt;&gt;=</code></strong> in Haskell, etc.)</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://rebol.metaeducation.com/uploads/default/original/1X/337e592bc1aaf7cd44e892d2068a6b7fc65134ac.webp" data-download-href="https://rebol.metaeducation.com/uploads/default/337e592bc1aaf7cd44e892d2068a6b7fc65134ac" title="assets_task_01jvp9hzpbfj3rpyyfakebamjg_1747726210_img_0"><img src="https://rebol.metaeducation.com/uploads/default/optimized/1X/337e592bc1aaf7cd44e892d2068a6b7fc65134ac_2_345x230.webp" alt="assets_task_01jvp9hzpbfj3rpyyfakebamjg_1747726210_img_0" data-base62-sha1="7lx3a9vuLe15fYPyoDYuXC6fNsU" width="345" height="230" srcset="https://rebol.metaeducation.com/uploads/default/optimized/1X/337e592bc1aaf7cd44e892d2068a6b7fc65134ac_2_345x230.webp, https://rebol.metaeducation.com/uploads/default/optimized/1X/337e592bc1aaf7cd44e892d2068a6b7fc65134ac_2_517x345.webp 1.5x, https://rebol.metaeducation.com/uploads/default/optimized/1X/337e592bc1aaf7cd44e892d2068a6b7fc65134ac_2_690x460.webp 2x" data-dominant-color="1B1B1B"></a></div><p></p>
<h2><a name="p-8323-but-using-comes-from-technical-reasons-1" class="anchor" href="https://rebol.metaeducation.com#p-8323-but-using-comes-from-technical-reasons-1"></a>But Using <code>~,~</code> Comes From Technical Reasons</h2>
<p>It's true that GHOST isn't like some antiforms that really need to be related to their basis types (a SPLICE! has to be the antiform of some kind of list, for instance).  There's nothing particularly important about building on the payload of a COMMA! Cell...because a COMMA! Cell <em>has</em> no payload.</p>
<p>But GHOST is an <em>unstable</em> antiform (e.g. it can't be stored in variables).  KEYWORD!s like <code>~null~</code> and <code>~okay~</code> are <em>stable</em> antiforms.  And other keywords proposed so far like <code>~NaN~</code> would be stable as well.</p>
<p>Right now, it's the "heart byte" of the Cell that determines its type, and dictates stability and instability.  WORD! antiforms are all stable, and COMMA! antiforms (of which there's one and only one) are unstable.</p>
<p>(See <strong><a href="https://rebol.metaeducation.com/t/which-antiforms-are-in-use/2276">The Table Of Antiforms In Use</a></strong>)</p>
<h2><a name="p-8323-could-some-keywords-be-stable-others-not-2" class="anchor" href="https://rebol.metaeducation.com#p-8323-could-some-keywords-be-stable-others-not-2"></a>Could Some KEYWORD!s Be Stable, Others Not?</h2>
<p>It's technically possible.  And if it were decided to be worth it to do so, I'd certainly want to weigh if <code>~ghost~</code> should be used as a more "informative" name.</p>
<p>One consequence would be that it would make GHOST a type constraint instead of a <strong>ghost!</strong> type, so you'd have to use <strong>ghost?</strong> in your type signatures.  Not a big deal, just something that would change.</p>
<p>It would also mean that ghosts would take slightly longer to identify.  Right now they can be recognized by comparing the masked header <code>uintptr_t</code> to a hardcoded constant--a combined mask of the antiform quote byte and comma heart byte.  Since every evaluator step has to check if it produces a ghost, being able to do that test quickly vs. needing to check both the header and a symbol has some performance benefit.</p>
<p>A random aspect that would be lost would be that there'd be less space in the GHOST Cell due to storing a Symbol and binding, which it would never use.  That space isn't used right now for anything, but it could be (file/line number where the ghost was generated?)</p>
<h2><a name="p-8323-i-think-will-be-sticking-around-long-term-3" class="anchor" href="https://rebol.metaeducation.com#p-8323-i-think-will-be-sticking-around-long-term-3"></a>I Think <code>~,~</code> Will Be Sticking Around Long-Term</h2>
<p>I don't have good feelings about making some KEYWORD!s stable, and others not.</p>
<p>With everything considered, having the GHOST! be an antiform of a unit type like COMMA! seems to have significantly more upside than downside.</p>
<p>Labeling the antiforms in the console mitigates the impact of the weirdness somewhat.</p>
          <p><a href="https://rebol.metaeducation.com/t/why-is-ghost-the-antiform-and-not-ghost/2463/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-is-ghost-the-antiform-and-not-ghost/2463/2</link>
        <pubDate>Tue, 20 May 2025 07:30:44 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2463-2</guid>
        <source url="https://rebol.metaeducation.com/t/why-is-ghost-the-antiform-and-not-ghost/2463.rss">Why is Ghost the ~,~ Antiform, and not ~ghost~ ?</source>
      </item>
      <item>
        <title>Why is Ghost the ~,~ Antiform, and not ~ghost~ ?</title>
        <dc:creator><![CDATA[rebolbot]]></dc:creator>
        <description><![CDATA[
            <pre><code>&gt;&gt; 1 + 2 elide print "GHOST is useful..."
GHOST is useful
== 3
</code></pre>
<p><strong><a href="https://rebol.metaeducation.com/t/making-invisible-functions-e-g-comment-elide/2034">GHOST is useful</a></strong>, and most of the time you don't even know what it looks like because it vanishes.</p>
<p>But it looks very strange in the console in cases where it doesn't vanish:</p>
<pre><code>&gt;&gt; elide print "GHOST is useful..."
GHOST is useful...
== ~,~  ; antiform (ghost)
</code></pre>
<p>Why is it <strong><code>~,~</code></strong> (a COMMA! antiform) when antiforms like NULL are just antiforms of WORD!?</p>
<pre><code>&gt;&gt; try pick [a b] 3
== ~null~  ; anti
</code></pre>
<p>Wouldn't it be more literate if it were just the antiform of <strong>~ghost~</strong> ?</p>
<pre><code>&gt;&gt; elide print "GHOST is useful..."
GHOST is useful...
== ~ghost~  ; antiform
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/why-is-ghost-the-antiform-and-not-ghost/2463/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-is-ghost-the-antiform-and-not-ghost/2463/1</link>
        <pubDate>Tue, 20 May 2025 07:13:15 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2463-1</guid>
        <source url="https://rebol.metaeducation.com/t/why-is-ghost-the-antiform-and-not-ghost/2463.rss">Why is Ghost the ~,~ Antiform, and not ~ghost~ ?</source>
      </item>
  </channel>
</rss>
