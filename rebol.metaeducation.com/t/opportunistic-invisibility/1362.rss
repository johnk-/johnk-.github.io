<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Opportunistic Invisibility</title>
    <link>https://forum.rebol.info/t/opportunistic-invisibility/1362</link>
    <description>When &quot;Invisibles&quot; were introduced, the evaluator had to establish if a function was either always-invisible or always-not-invisible.  You couldn&#39;t make a function that *&quot;sometimes returned an INTEGER!, and sometimes was invisible.&quot;*

This restriction was eventually lifted.  But then raised the question of how a RETURN statement would return invisibly.

The idea came along that RETURN would detect whether to return invisibly or not based on whether it was arity-0 or arity-1.  Here is the first version of what opportunistic invisibility looked like:

    &gt;&gt; vanish-if-odd: func [return: [&lt;invisible&gt; integer!] x] [
           if even? x [return x]
           return  ; arity-0 return meant invisible
       ]

    &gt;&gt; &lt;test&gt; vanish-if-odd 2
    == 2

    &gt;&gt; &lt;test&gt; vanish-if-odd 1
    == &lt;test&gt;

What was clever about the arity mechanic was that it could be chained.  If you RETURN&#39;d the result of an opportunistic invisible, then if it happened to vanish you&#39;d effectively make an arity-0 RETURN.

    &gt;&gt; vanish-if-even: func [return: [&lt;invisible&gt; integer!] y] [
           return vanish-if-odd y + 1  ; if vanishes, RETURN perceives arity-0
       ]

    &gt;&gt; &lt;test&gt; vanish-if-even 2
    == &lt;test&gt;

    &gt;&gt; &lt;test&gt; vanish-if-even 1
    == 2

## Alas, There Were Problems

One problem is that the variadic return was subject to [line continuation &quot;arity bugs&quot;](https://forum.rebol.info/t/line-continuation-and-arity-bugs-thoughts/1965).

For example, imagine trying to do a return in the middle of a block of code, with the intention to not running the ensuing code:

     foo: func [return: [&lt;invisible&gt; ...]] [
         ... some code here ...
         return  ; temporarily insert a return for debugging 
         ... some more code ...
     ]

A casual reader would think that would return invisibly, when it would actually **return (... some more code ...)**, picking up what&#39;s on the next lines.

Even trickier was that invisibility itself--and especially opportunistic invisibility--had the [power to wreck code structure](https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405/9?u=hostilefork) to where it was completely unpredictable.  The remedy was that invisibility could only apply in &quot;interstitial slots&quot;, meaning that RETURN could not take an invisible as an argument.

## New Mechanics Build On NIHIL (Isotopic Empty BLOCK!)

Years of puzzling over the quirks of how to coherently wrap and process invisible functions led to rebuilding the feature on top of meta-representations and isotopes.  You can read all about that evolution in **[&quot;Invisibility Viewed Through Modern Eyes&quot;](https://forum.rebol.info/t/invisibility-reviewed-through-modern-eyes/2034)**.  :eyes: 

RETURN uses a special ^META parameter convention to allow it to accept the signal for invisibility as an argument.  (Under this convention it receives the quasiform `~[]~`, which is the meta of an empty unstable isotopic parameter pack used by multi-return.)

So an opportunistically invisible function would now look like this:

    &gt;&gt; vanish-if-odd: func [return: [&lt;nihil&gt; integer!] x] [
           if even? x [return x]
           return nihil
       ]

    &gt;&gt; &lt;test&gt; vanish-if-odd 2
    == 2

    &gt;&gt; &lt;test&gt; vanish-if-odd 1
    == &lt;test&gt;

While such constructs can still give rise to tricky situations in code, it&#39;s powerful while being much more under control.</description>
    
    <lastBuildDate>Thu, 27 Jul 2023 17:24:14 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/opportunistic-invisibility/1362.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Opportunistic Invisibility</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When "Invisibles" were introduced, the evaluator had to establish if a function was either always-invisible or always-not-invisible.  You couldn't make a function that <em>"sometimes returned an INTEGER!, and sometimes was invisible."</em></p>
<p>This restriction was eventually lifted.  But then raised the question of how a RETURN statement would return invisibly.</p>
<p>The idea came along that RETURN would detect whether to return invisibly or not based on whether it was arity-0 or arity-1.  Here is the first version of what opportunistic invisibility looked like:</p>
<pre><code>&gt;&gt; vanish-if-odd: func [return: [&lt;invisible&gt; integer!] x] [
       if even? x [return x]
       return  ; arity-0 return meant invisible
   ]

&gt;&gt; &lt;test&gt; vanish-if-odd 2
== 2

&gt;&gt; &lt;test&gt; vanish-if-odd 1
== &lt;test&gt;
</code></pre>
<p>What was clever about the arity mechanic was that it could be chained.  If you RETURN'd the result of an opportunistic invisible, then if it happened to vanish you'd effectively make an arity-0 RETURN.</p>
<pre><code>&gt;&gt; vanish-if-even: func [return: [&lt;invisible&gt; integer!] y] [
       return vanish-if-odd y + 1  ; if vanishes, RETURN perceives arity-0
   ]

&gt;&gt; &lt;test&gt; vanish-if-even 2
== &lt;test&gt;

&gt;&gt; &lt;test&gt; vanish-if-even 1
== 2
</code></pre>
<h2>
<a name="alas-there-were-problems-1" class="anchor" href="https://forum.rebol.info#alas-there-were-problems-1"></a>Alas, There Were Problems</h2>
<p>One problem is that the variadic return was subject to <a href="https://forum.rebol.info/t/line-continuation-and-arity-bugs-thoughts/1965">line continuation "arity bugs"</a>.</p>
<p>For example, imagine trying to do a return in the middle of a block of code, with the intention to not running the ensuing code:</p>
<pre><code> foo: func [return: [&lt;invisible&gt; ...]] [
     ... some code here ...
     return  ; temporarily insert a return for debugging 
     ... some more code ...
 ]
</code></pre>
<p>A casual reader would think that would return invisibly, when it would actually <strong>return (... some more code ...)</strong>, picking up what's on the next lines.</p>
<p>Even trickier was that invisibility itself--and especially opportunistic invisibility--had the <a href="https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405/9">power to wreck code structure</a> to where it was completely unpredictable.  The remedy was that invisibility could only apply in "interstitial slots", meaning that RETURN could not take an invisible as an argument.</p>
<h2>
<a name="new-mechanics-build-on-nihil-isotopic-empty-block-2" class="anchor" href="https://forum.rebol.info#new-mechanics-build-on-nihil-isotopic-empty-block-2"></a>New Mechanics Build On NIHIL (Isotopic Empty BLOCK!)</h2>
<p>Years of puzzling over the quirks of how to coherently wrap and process invisible functions led to rebuilding the feature on top of meta-representations and isotopes.  You can read all about that evolution in <strong><a href="https://forum.rebol.info/t/invisibility-reviewed-through-modern-eyes/2034">"Invisibility Viewed Through Modern Eyes"</a></strong>.  <img src="https://forum.rebol.info/images/emoji/twitter/eyes.png?v=12" title=":eyes:" class="emoji" alt=":eyes:" loading="lazy" width="20" height="20"></p>
<p>RETURN uses a special ^META parameter convention to allow it to accept the signal for invisibility as an argument.  (Under this convention it receives the quasiform <code>~[]~</code>, which is the meta of an empty unstable isotopic parameter pack used by multi-return.)</p>
<p>So an opportunistically invisible function would now look like this:</p>
<pre><code>&gt;&gt; vanish-if-odd: func [return: [&lt;nihil&gt; integer!] x] [
       if even? x [return x]
       return nihil
   ]

&gt;&gt; &lt;test&gt; vanish-if-odd 2
== 2

&gt;&gt; &lt;test&gt; vanish-if-odd 1
== &lt;test&gt;
</code></pre>
<p>While such constructs can still give rise to tricky situations in code, it's powerful while being much more under control.</p>
          <p><a href="https://forum.rebol.info/t/opportunistic-invisibility/1362/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/opportunistic-invisibility/1362/1</link>
        <pubDate>Fri, 09 Oct 2020 15:57:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1362-1</guid>
        <source url="https://forum.rebol.info/t/opportunistic-invisibility/1362.rss">Opportunistic Invisibility</source>
      </item>
  </channel>
</rss>
