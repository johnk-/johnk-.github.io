<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Pending New Meaning of GET-XXX!</title>
    <link>https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901</link>
    <description>If you&#39;ve been following along with things like [The Solution to Block Splicing](https://forum.rebol.info/t/the-long-awaited-death-of-only/1607) or [Activated Actions](https://forum.rebol.info/t/attack-of-the-activated-actions/1900), it seems to suggest that GET-WORD! and friends would no longer be necessary.

* If you have a non-isotopic value (including an ACTION!), you access it with a plain WORD! and it&#39;s fine--*the obvious code just works*.

* If you have an isotopic value, you use a META-WORD! and get its non-isotopic form, and work with that.  (It will be inert, so you &quot;won&#39;t need&quot; GET-WORD! on it...)

**So I&#39;m going through all the non-Redbol code and eliminating the use of GET-WORD!, GET-PATH!, and GET-TUPLE!**

It&#39;s pleasing to see the improvement.

## But Like I Said, You Can&#39;t Wish Away Complexity...

When you have a case that turns out to be complex, there&#39;s a new twist...you get quoted/meta items, not plain items:

    &gt;&gt; unsafeobj: make object! [x: 10, /y: func [] [print &quot;Boo!&quot;]]

    &gt;&gt; for-each [key ^val] unsafeobj [print [&quot;meta&quot; key &quot;is&quot; mold val]]
    meta x is &#39;10
    meta y is #[action! []]

Now you can no longer just test with INTEGER? VAL, because VAL is quoted.

So the new concept I have for **`:val`** is that it mean **unmeta val**.  This way you can say:

    if integer? :val [print &quot;It was an INTEGER! before the ^META&quot;]

## Wait, Isn&#39;t This The Same Situation As Before?

You might ask if we&#39;ve just come full circle, since you have to start using a mark on variables in order to correctly handle situations with active actions.

But you don&#39;t get into this situation unless you consciously ask for it... your code is correct by default, and the active actions can&#39;t just &quot;sneak up on you&quot;.

And it&#39;s nice that the values aren&#39;t active...you&#39;re not risking a function being called without you knowing about it.  Instead you have a QUOTED! value, which has a weird type that will give more obvious errors if you forget to unmeta it.

## It Also Gives A Notation For Splices

I mentioned we need some way to meta a splice, in such a way that it will evaluate back to a splice again.  The block form gives the answer for this:

    &gt;&gt; var: :[d e]
    == :[d e]  ; isotope

    &gt;&gt; temp: ^var
    == :[d e]

    &gt;&gt; do compose [var: (temp)]
    == :[d e]  ; isotope

    &gt;&gt; append [a b c] get/any &#39;var
    == [a b c d e]

## Parameterized Evaluator Will Be Needed For Redbol

I&#39;m pretty gung-ho on keeping the Redbol tests running.  So this really lights a fire under the need to start acting on parameterized evaluation.

When the body of a Redbol &quot;FUNC2&quot; is evaluating, it needs to imbue that body with the behavior that the **`:word`** just gets the value.

I&#39;m not sure what to do about isotopic actions and Redbol emulation.  :-/  It creates an interoperability issue when mixing code.  The &quot;pure&quot; way of doing it would give Redbol a truly separate context, where all of its LIB definitions were plain ACTION!s...that its evaluator would run from word references.  It&#39;s probably better to instead have Redbol only deal with ACTION! isotopes...telling it that they are plain ACTION!s.

## Necessitates A New Name?

In a way, naming the parts for their behaviors has always been a bit of a bad idea.  Because you&#39;re supposed to be able to redefine them to do whatever you want.  (A SET-WORD! doesn&#39;t have to set anything, and a GET-WORD! doesn&#39;t have to get anything.  So why aren&#39;t they COLON-WORD! and WORD-COLON! ?)

And above I talk about Redbol behavior, where they&#39;ll act as before.  :-/

If I could, I&#39;ve said that I&#39;d rather the ^META and :UNMETA operations be noted with up arrows and down arrows, and perhaps be called &quot;UP-WORD!&quot; and &quot;DOWN-WORD!&quot;.

    &gt;&gt; for-each [key ↑val] unsafeobj [if integer? ↓val [print &quot;Integer found!&quot;]]
    Integer found!

But, the ASCII benefits win out:

    &gt;&gt; for-each [key ^val] unsafeobj [if integer? :val [print &quot;Integer found!&quot;]]
    Integer found!

Anyway, the name isn&#39;t the most important thing... but just another thing to work through.</description>
    
    <lastBuildDate>Sun, 27 Nov 2022 21:09:03 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Pending New Meaning of GET-XXX!</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="1901">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1901">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But Like I Said, You Can't Wish Away Complexity...</p>
</blockquote>
</aside>
<p>Indeed you cannot.</p>
</blockquote>
</aside>
<p>Why not? I think you can. It won't work, but you can wish it away.</p>
          <p><a href="https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901/3</link>
        <pubDate>Sun, 27 Nov 2022 21:09:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1901-3</guid>
        <source url="https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901.rss">The Pending New Meaning of GET-XXX!</source>
      </item>
      <item>
        <title>The Pending New Meaning of GET-XXX!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1901">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But Like I Said, You Can't Wish Away Complexity...</p>
</blockquote>
</aside>
<p>Indeed you cannot.</p>
<p><strong>I think the emerging rules are pointing to a better set of answers...</strong></p>
<p>One thing Ren-C sought to avoid was accidental conflation of <strong>:foo</strong> to get an ACTION! without running it with tolerance of unset variables.</p>
<p>You could write something like:</p>
<pre><code>copy-function: :some-function
</code></pre>
<p>And go along blissfully ignorant that you'd just skipped over the protection from an unset variable.</p>
<p>With isotopic actions, this won't be a problem... <em>because the isotope will disallow the assignment.</em>  If you want to get something to run a function, you would do <strong><code>copy-function: runs ^some-function</code></strong></p>
<p>Also, after seeing the damage done to frames by enforcing the ^META convention in a frame, it seems that there will be those who want to work with isotopes directly.  So rolling back to the R3-Alpha rule of <strong>:foo</strong> being the same as <strong>get/any 'foo</strong> has the good property of general substitution.</p>
<p>The only rough edge here is whether getting unset variables should be willing to act as a pure void.  It's powerful, but maybe too easy to make mistakes with... and there should be a GET/ANY/VOID that you use if you really meant that.</p>
          <p><a href="https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901/2</link>
        <pubDate>Mon, 29 Aug 2022 10:42:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1901-2</guid>
        <source url="https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901.rss">The Pending New Meaning of GET-XXX!</source>
      </item>
      <item>
        <title>The Pending New Meaning of GET-XXX!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>If you've been following along with things like <a href="https://forum.rebol.info/t/the-long-awaited-death-of-only/1607">The Solution to Block Splicing</a> or <a href="https://forum.rebol.info/t/attack-of-the-activated-actions/1900">Activated Actions</a>, it seems to suggest that GET-WORD! and friends would no longer be necessary.</p>
<ul>
<li>
<p>If you have a non-isotopic value (including an ACTION!), you access it with a plain WORD! and it's fine--<em>the obvious code just works</em>.</p>
</li>
<li>
<p>If you have an isotopic value, you use a META-WORD! and get its non-isotopic form, and work with that.  (It will be inert, so you "won't need" GET-WORD! on it...)</p>
</li>
</ul>
<p><strong>So I'm going through all the non-Redbol code and eliminating the use of GET-WORD!, GET-PATH!, and GET-TUPLE!</strong></p>
<p>It's pleasing to see the improvement.</p>
<h2>But Like I Said, You Can't Wish Away Complexity...</h2>
<p>When you have a case that turns out to be complex, there's a new twist...you get quoted/meta items, not plain items:</p>
<pre><code>&gt;&gt; unsafeobj: make object! [x: 10, /y: func [] [print "Boo!"]]

&gt;&gt; for-each [key ^val] unsafeobj [print ["meta" key "is" mold val]]
meta x is '10
meta y is #[action! []]
</code></pre>
<p>Now you can no longer just test with INTEGER? VAL, because VAL is quoted.</p>
<p>So the new concept I have for <strong><code>:val</code></strong> is that it mean <strong>unmeta val</strong>.  This way you can say:</p>
<pre><code>if integer? :val [print "It was an INTEGER! before the ^META"]
</code></pre>
<h2>Wait, Isn't This The Same Situation As Before?</h2>
<p>You might ask if we've just come full circle, since you have to start using a mark on variables in order to correctly handle situations with active actions.</p>
<p>But you don't get into this situation unless you consciously ask for it... your code is correct by default, and the active actions can't just "sneak up on you".</p>
<p>And it's nice that the values aren't active...you're not risking a function being called without you knowing about it.  Instead you have a QUOTED! value, which has a weird type that will give more obvious errors if you forget to unmeta it.</p>
<h2>It Also Gives A Notation For Splices</h2>
<p>I mentioned we need some way to meta a splice, in such a way that it will evaluate back to a splice again.  The block form gives the answer for this:</p>
<pre><code>&gt;&gt; var: :[d e]
== :[d e]  ; isotope

&gt;&gt; temp: ^var
== :[d e]

&gt;&gt; do compose [var: (temp)]
== :[d e]  ; isotope

&gt;&gt; append [a b c] get/any 'var
== [a b c d e]
</code></pre>
<h2>Parameterized Evaluator Will Be Needed For Redbol</h2>
<p>I'm pretty gung-ho on keeping the Redbol tests running.  So this really lights a fire under the need to start acting on parameterized evaluation.</p>
<p>When the body of a Redbol "FUNC2" is evaluating, it needs to imbue that body with the behavior that the <strong><code>:word</code></strong> just gets the value.</p>
<p>I'm not sure what to do about isotopic actions and Redbol emulation.  :-/  It creates an interoperability issue when mixing code.  The "pure" way of doing it would give Redbol a truly separate context, where all of its LIB definitions were plain ACTION!s...that its evaluator would run from word references.  It's probably better to instead have Redbol only deal with ACTION! isotopes...telling it that they are plain ACTION!s.</p>
<h2>Necessitates A New Name?</h2>
<p>In a way, naming the parts for their behaviors has always been a bit of a bad idea.  Because you're supposed to be able to redefine them to do whatever you want.  (A SET-WORD! doesn't have to set anything, and a GET-WORD! doesn't have to get anything.  So why aren't they COLON-WORD! and WORD-COLON! ?)</p>
<p>And above I talk about Redbol behavior, where they'll act as before.  :-/</p>
<p>If I could, I've said that I'd rather the ^META and :UNMETA operations be noted with up arrows and down arrows, and perhaps be called "UP-WORD!" and "DOWN-WORD!".</p>
<pre><code>&gt;&gt; for-each [key ↑val] unsafeobj [if integer? ↓val [print "Integer found!"]]
Integer found!
</code></pre>
<p>But, the ASCII benefits win out:</p>
<pre><code>&gt;&gt; for-each [key ^val] unsafeobj [if integer? :val [print "Integer found!"]]
Integer found!
</code></pre>
<p>Anyway, the name isn't the most important thing... but just another thing to work through.</p>
          <p><a href="https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901/1</link>
        <pubDate>Wed, 27 Jul 2022 22:06:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1901-1</guid>
        <source url="https://forum.rebol.info/t/the-pending-new-meaning-of-get-xxx/1901.rss">The Pending New Meaning of GET-XXX!</source>
      </item>
  </channel>
</rss>
