<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>New Names for ^FOO, @FOO, and $FOO</title>
    <link>https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447</link>
    <description>It&#39;s beginning to look inevitable that all types will have versions with &quot;SIGIL!s&quot;.  At the moment it&#39;s looking like there are 3 of these: `[^ $ @]`

So **$&quot;dollar strings&quot;** are coming, as are decorated integers like **^1020**

Like QUASIFORM! and QUOTED!, we need a generic name to cover each Sigil.

METAFORM! for `^XXX` is all right, I guess (?).  But I *don&#39;t* want to continue this pattern and call `@XXX` a THEFORM! and `$XXX` a VARFORM! :nauseated_face:</description>
    
    <lastBuildDate>Wed, 14 May 2025 03:22:30 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>New Names for ^FOO, @FOO, and $FOO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://rebol.metaeducation.com/t/should-sigil-be-a-type-or-just-decorated-blank/2451">Should SIGIL! Be A Type, Or Just Decorated BLANK!</a></p>
          <p><a href="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447/4</link>
        <pubDate>Thu, 15 May 2025 04:54:15 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2447-4</guid>
        <source url="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447.rss">New Names for ^FOO, @FOO, and $FOO</source>
      </item>
      <item>
        <title>New Names for ^FOO, @FOO, and $FOO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://rebol.metaeducation.com/t/what-deserves-to-be-a-datatype/2164" class="inline-onebox">What deserves to be a datatype?</a></p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/up_arrow.png?v=14" title=":up_arrow:" class="emoji" alt=":up_arrow:" loading="lazy" width="20" height="20"> There's the generalization you were looking for, <a class="mention" href="https://rebol.metaeducation.com/u/bradrn">@bradrn</a>.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447/3</link>
        <pubDate>Tue, 13 May 2025 17:09:32 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2447-3</guid>
        <source url="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447.rss">New Names for ^FOO, @FOO, and $FOO</source>
      </item>
      <item>
        <title>New Names for ^FOO, @FOO, and $FOO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://rebol.metaeducation.com/uploads/default/original/1X/a5b41a074e8a3e1bc24753d52411988f86c6fbf1.webp" data-download-href="https://rebol.metaeducation.com/uploads/default/a5b41a074e8a3e1bc24753d52411988f86c6fbf1" title="assets_task_01jvs8hm5we1htzdvvv4c08wvm_1747825870_img_3"><img src="https://rebol.metaeducation.com/uploads/default/optimized/1X/a5b41a074e8a3e1bc24753d52411988f86c6fbf1_2_690x460.webp" alt="assets_task_01jvs8hm5we1htzdvvv4c08wvm_1747825870_img_3" data-base62-sha1="nDSEdwQPw3RRbuAztdGkrUftyQ9" width="690" height="460" srcset="https://rebol.metaeducation.com/uploads/default/optimized/1X/a5b41a074e8a3e1bc24753d52411988f86c6fbf1_2_690x460.webp, https://rebol.metaeducation.com/uploads/default/optimized/1X/a5b41a074e8a3e1bc24753d52411988f86c6fbf1_2_1035x690.webp 1.5x, https://rebol.metaeducation.com/uploads/default/optimized/1X/a5b41a074e8a3e1bc24753d52411988f86c6fbf1_2_1380x920.webp 2x" data-dominant-color="1A525E"></a></div><p></p>
<h2><a name="p-8273-i-think-metaform-is-the-best-choice-for-foo-1" class="anchor" href="https://rebol.metaeducation.com#p-8273-i-think-metaform-is-the-best-choice-for-foo-1"></a>I Think METAFORM! Is The Best Choice For <code>^FOO</code></h2>
<p>I debated whether this should be LIFTED! and ^ a "LIFT", or METAFORM! with ^ a META.</p>
<p>But it's best if we call <strong>(^foo: ...)</strong> a "meta assignment" as opposed to a "lifted assignment".  Then it makes sense if a "meta-fetch" unlifts (vs. a lifted-fetch unlifting... which is confusing.)</p>
<p><em>"meta assignments will store the lifted representation"</em><br>
<em>"meta fetches will unlift the variable contents"</em></p>
<p>It introduces more words, but... more words are better than:</p>
<p><em>"meta assignments will store the meta representation"</em><br>
<em>"meta fetches will unmeta the variable contents"</em></p>
<p>This takes over the META verb:</p>
<pre><code>&gt;&gt; meta [a b c]
== ^[a b c]
</code></pre>
<h2><a name="p-8273-pinned-foo-foo-bar-etc-2" class="anchor" href="https://rebol.metaeducation.com#p-8273-pinned-foo-foo-bar-etc-2"></a>PINNED! =&gt; <code>@foo</code>, <code>@[foo bar]</code> etc</h2>
<p>Verb form PIN:</p>
<pre><code>&gt;&gt; pin first [a]
== @a
</code></pre>
<p>I like it because it's like you've stuck a pin on it, that won't come off in evaluation.</p>
<h2><a name="p-8273-tied-foo-foo-bar-etc-3" class="anchor" href="https://rebol.metaeducation.com#p-8273-tied-foo-foo-bar-etc-3"></a>TIED! =&gt; $foo, $[foo bar] etc.</h2>
<p>Verb form TIE:</p>
<pre><code>&gt;&gt; tie first [(a b c)]
== $(a b c)
</code></pre>
<p>It's a little bit odd, but its evaluative purpose is ultimately "tie" its attachment to a context.</p>
<p>As the emoji shows (<img src="https://rebol.metaeducation.com/images/emoji/twitter/knot.png?v=14" title=":knot:" class="emoji" alt=":knot:" loading="lazy" width="20" height="20">) the dollar sign kind of looks like a knot!</p>
<h2><a name="p-8273-we-can-call-a-tie-a-pin-and-a-meta-4" class="anchor" href="https://rebol.metaeducation.com#p-8273-we-can-call-a-tie-a-pin-and-a-meta-4"></a>We Can Call <code>$</code> a "tie", <code>@</code> a "pin", and <code>^</code> a "meta" !</h2>
<p>That's neat.</p>
<p>It seems that type checking can be sensitive to these, so if you say you take an <code>@word</code>! it will check to see if it's an @ form, and then do the typecheck against it without the Sigil.</p>
<p>But now there has to be generalized type destructuring.  How do you ask if something is an <code>@word!</code> ...?  Well, there's MATCH:</p>
<pre><code>if match [@word!] value [...]
</code></pre>
<p>It's not horrible, compare it to:</p>
<pre><code>if the-word? value [...]
</code></pre>
<p>It's better in several ways I'd say.  Though you can't optimize it to omit the block, e.g.</p>
<pre><code>if match '@word! value [...]  ; word! will be unbound
</code></pre>
<p>But that's probably for the best, because <code>'@word!</code> is too easy to confuse with <em>quoted</em> <code>@word!</code>, which will be typechecked by the quote levels in the new model.  It might be worth it to have intrinsics for PINNED-WORD?, PINNED-BLOCK?, etc. ... just because they're not fundamental types doesn't mean the most useful forms can't have accelerated type checks.</p>
<p>Anyhow, this looks good... I'm especially pleased that it gives us short and effective modifier verbs for adding the Sigil.</p>
<h2><a name="p-8273-credit-to-chatgpt-for-pinned-and-tied-names-robot-5" class="anchor" href="https://rebol.metaeducation.com#p-8273-credit-to-chatgpt-for-pinned-and-tied-names-robot-5"></a>Credit to ChatGPT for PINNED! and TIED! Names <img src="https://rebol.metaeducation.com/images/emoji/twitter/robot.png?v=14" title=":robot:" class="emoji" alt=":robot:" loading="lazy" width="20" height="20"></h2>
<p>Good work, ChatGPT!</p>
          <p><a href="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447/2</link>
        <pubDate>Tue, 13 May 2025 13:17:21 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2447-2</guid>
        <source url="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447.rss">New Names for ^FOO, @FOO, and $FOO</source>
      </item>
      <item>
        <title>New Names for ^FOO, @FOO, and $FOO</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's beginning to look inevitable that all types will have versions with "SIGIL!s".  At the moment it's looking like there are 3 of these: <code>[^ $ @]</code></p>
<p>So <strong>$"dollar strings"</strong> are coming, as are decorated integers like <strong>^1020</strong></p>
<p>Like QUASIFORM! and QUOTED!, we need a generic name to cover each Sigil.</p>
<p>METAFORM! for <code>^XXX</code> is all right, I guess (?).  But I <em>don't</em> want to continue this pattern and call <code>@XXX</code> a THEFORM! and <code>$XXX</code> a VARFORM! <img src="https://rebol.metaeducation.com/images/emoji/twitter/nauseated_face.png?v=14" title=":nauseated_face:" class="emoji" alt=":nauseated_face:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447/1</link>
        <pubDate>Sun, 11 May 2025 19:47:28 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2447-1</guid>
        <source url="https://rebol.metaeducation.com/t/new-names-for-foo-foo-and-foo/2447.rss">New Names for ^FOO, @FOO, and $FOO</source>
      </item>
  </channel>
</rss>
