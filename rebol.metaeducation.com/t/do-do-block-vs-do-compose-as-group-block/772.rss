<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DO [... DO BLOCK ...] vs. DO COMPOSE [... (AS GROUP! BLOCK) ...]</title>
    <link>https://rebol.metaeducation.com/t/do-do-block-vs-do-compose-as-group-block/772</link>
    <description>Imagine that you have something like **block: [a b c]**.  There is today--and probably for the future of binding--a difference between:

    code: [... do block ...]

...and:

    code: compose [... (as group! block) ...]

They might look similar, in that they execute the block through a &quot;link&quot;/&quot;reference&quot;, without making a copy. 
 But the latter makes the contents of the block visible as a group, which means an operation like BIND on the code will affect it.  So imagine if BLOCK contained things like RETURN in it and you tried to use this code as the body of a function.  The first case would leave whatever binding was on the return initially, while the second would pick up the binding for the new function.</description>
    
    <lastBuildDate>Mon, 26 Jun 2023 07:09:00 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/do-do-block-vs-do-compose-as-group-block/772.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>DO [... DO BLOCK ...] vs. DO COMPOSE [... (AS GROUP! BLOCK) ...]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Imagine that you have something like <strong>block: [a b c]</strong>.  There is today--and probably for the future of binding--a difference between:</p>
<pre><code>code: [... do block ...]
</code></pre>
<p>...and:</p>
<pre><code>code: compose [... (as group! block) ...]
</code></pre>
<p>They might look similar, in that they execute the block through a "link"/"reference", without making a copy.<br>
But the latter makes the contents of the block visible as a group, which means an operation like BIND on the code will affect it.  So imagine if BLOCK contained things like RETURN in it and you tried to use this code as the body of a function.  The first case would leave whatever binding was on the return initially, while the second would pick up the binding for the new function.</p>
          <p><a href="https://rebol.metaeducation.com/t/do-do-block-vs-do-compose-as-group-block/772/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/do-do-block-vs-do-compose-as-group-block/772/1</link>
        <pubDate>Fri, 03 Aug 2018 16:34:47 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-772-1</guid>
        <source url="https://rebol.metaeducation.com/t/do-do-block-vs-do-compose-as-group-block/772.rss">DO [... DO BLOCK ...] vs. DO COMPOSE [... (AS GROUP! BLOCK) ...]</source>
      </item>
  </channel>
</rss>
