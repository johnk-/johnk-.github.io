<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>FFI Updates and Notes</title>
    <link>https://rebol.metaeducation.com/t/ffi-updates-and-notes/1201</link>
    <description>Due to some complexities that had to do with the build system, the Ren-C FFI extension ceased being buildable somewhere on Dec 8, 2018.

Despite that, it still got some maintenance.  So when things were being searched and replaced in the codebase at large, I would tinker with the code in the FFI a bit to try and make it roughly reflect what had changed.  But even with that, a year&#39;s worth of drift without running it means it&#39;s going to get out of date.

In the last two days I&#39;ve been able to get the demos back in running condition...including @szeng&#39;s GTK demo:

![EqR43|624x500](upload://bpBDASDn7FumiJxFsdzNXsASGYF.png)


## Cool, but the Build Problems Haven&#39;t Gone Away...

There hasn&#39;t been a lot of time to focus on making Rebmake better at cross-platform inclusion of libraries that aren&#39;t by default available on the platform.  There&#39;s no libffi that ships in Visual Studio, so it becomes something of a manual configuration process.  Also, there&#39;s a bit of configuring that has to be done to get it working in cross-compilation of 32-bit binaries on a 64-bit Linux host.  Similar difficulties for OS X.

Since no one is currently actively using the FFI (in the Ren-C builds at least), it seems the path of least resistance is to just have it building into the 64-bit Linux builds.  That&#39;s where it&#39;s easy for the Travis container to install the package with **sudo apt-get libffi** and link with a simple **`-lffi`**.  This is enough to keep the code compiling and run a couple of little smoke tests to make sure things haven&#39;t gone too far south.

**To be clear: if you have the libraries all set up, then a &quot;sufficiently motivated individual&quot; could get the OS X, 32-bit Linux, and Windows versions to build.**  There&#39;s nothing about the *code* that shouldn&#39;t work (since it works on Linux 64-bit, it&#39;s more or less proven.)  But they&#39;d have to massage Rebmake to get it to spit out the right command lines and find the right files on the right platforms, when they&#39;re not around by default.  It shouldn&#39;t be too hard, as the package setup code was already on Travis...but Rebmake is a bit of a beast and needs some design work vs. just hacking it up more.

## Speaking of Tests...

I&#39;ve been wanting tests that are extension-specific to live in the directory with the extension.  So I&#39;m moving them.  Right now we have:

* **`%printf.r`** - Very simple demonstration of calling printf
* **`%varargs.r`** - More complex examples of calling printf and sprintf 
* **`%qsort.r`** - Simple callback example of C&#39;s `qsort()` function, where the sorting comparison function used by the C code is actually a Rebol function. 
* **`%qsort_r.r`** - More complex example of C&#39;s `qsort_r()` function, that allows passing a value through to the internal function that is not a global variable.  Also makes that value a &quot;tunneled&quot; REBVAL*, so you can actually pass a Rebol value to the C as a pointer and then get it back in the Rebol callback as a REBVAL again.
* **`%gtk.r`** - Gtk demo with toggle button, push button, font picker, and color picker

There was one file hanging around called `%varargs_old.r`.  In Atronix R3 there were no variadics, so the only way to do something like printf was with a block.  This means you&#39;d have to COMPOSE or REDUCE to get your values in:

    printf compose [
        &quot;hello %p%c&quot;
        &quot;ffi&quot; [pointer]
        (to integer! newline) [int8]
    ]

With variadics in Ren-C there was the variadic option, so I changed it to try it.  For instance:

    (printf &quot;hello %p%c&quot; &quot;ffi&quot; [pointer] to integer! newline [int8])

You could also use an expression barrier:

    printf &quot;hello %p%c&quot; &quot;ffi&quot; [pointer] to integer! newline [int8] |

I don&#39;t know what the &quot;right&quot; answer for calling C variadics is.  Maybe the compose was better?  But it&#39;s easy enough to go back and forth that I don&#39;t think we need to preserve two copies of the same file to different conventions.  Hence, instead I&#39;m making a note here.

## And as I mentioned in chat...

The big crazy difference with this FFI from the Atronix R3 is that it&#39;s all an extension. If you look closely you&#39;ll see a bit of an oddity in that it says  **make custom!**  and not  **make struct!** . :-/ There needs to be some work on that particular ecology point.

The  *mechanics*  of having an arbitrary number of datatypes is now in place. So the system is no longer limited to the number of types that fit in a byte...only the built-in types use that for optimization to get use out of all 3 platform pointers (besides the pointer-sized bits used for the header). But a REB_CUSTOM type means that it is sacrificing one of those pointers in the cell for the extension type.

So...there&#39;s now a bunch of policy and ecology to straighten out on top of that.

But again, the good news of all of this is that it means that we aren&#39;t stuck putting a bunch of FFI-specific code in the core; so the WASM build can be lighter. And similarly, we don&#39;t have a bunch of JavaScript support in the core. So things are factoring well for using the language in different configurations.</description>
    
    <lastBuildDate>Wed, 09 Apr 2025 08:56:10 +0000</lastBuildDate>
    <category>FFI</category>
    <atom:link href="https://rebol.metaeducation.com/t/ffi-updates-and-notes/1201.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>FFI Updates and Notes</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1201">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In the last two days I've been able to get the demos back in running condition...including <a class="mention" href="https://rebol.metaeducation.com/u/szeng">@szeng</a>'s GTK demo:</p>
</blockquote>
</aside>
<p>In bringing the FFI out of dormancy, I got this GTK demo working again:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://rebol.metaeducation.com/uploads/default/original/1X/8077a75c04c12e329a9a7283ace3c6a11623fd54.png" data-download-href="https://rebol.metaeducation.com/uploads/default/8077a75c04c12e329a9a7283ace3c6a11623fd54" title="image"><img src="https://rebol.metaeducation.com/uploads/default/optimized/1X/8077a75c04c12e329a9a7283ace3c6a11623fd54_2_281x250.png" alt="image" data-base62-sha1="ikttkWpjF7owmxc5DCGLQug9KcY" width="281" height="250" srcset="https://rebol.metaeducation.com/uploads/default/optimized/1X/8077a75c04c12e329a9a7283ace3c6a11623fd54_2_281x250.png, https://rebol.metaeducation.com/uploads/default/optimized/1X/8077a75c04c12e329a9a7283ace3c6a11623fd54_2_421x375.png 1.5x, https://rebol.metaeducation.com/uploads/default/optimized/1X/8077a75c04c12e329a9a7283ace3c6a11623fd54_2_562x500.png 2x" data-dominant-color="7C8286"></a></div><p></p>
<h2><a name="p-8130-but-this-isnt-the-real-ffi-demo-1" class="anchor" href="https://rebol.metaeducation.com#p-8130-but-this-isnt-the-real-ffi-demo-1"></a>But This Isn't The "REAL" FFI Demo...</h2>
<p>Shixin showed a bigger demo at the 2019 conference.</p>
<p><strong><a href="https://youtu.be/fMeTqPyrNF4?t=1259">https://youtu.be/fMeTqPyrNF4?t=1259</a></strong></p>
<p>What I didn't grasp at that time was that it wasn't just a little bigger demo, but a <em>MUCH</em> bigger demo.</p>
<p>What makes it bigger is that the entirety of glib and gtk were imported using a tool that's based on using the FFI to talk to the Clang C/C++ compiler.  As it compiles the header files, it makes callbacks into Rebol, which produces the MAKE STRUCT! and MAKE ROUTINE! definitions for the interface.</p>
<p>I knew it was automated in some way, but I didn't realize it was a full-on hook into the static analysis capabilities of Clang... and that it even bootstrapped the processing of the APIs for Clang itself.  So it's a pretty intense codebase.  I'm trying to resurrect it, though it's a LOT of code.  (But satisfying to see how much modern Ren-C does for clarifying the circa 2015 methodology!)</p>
          <p><a href="https://rebol.metaeducation.com/t/ffi-updates-and-notes/1201/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/ffi-updates-and-notes/1201/2</link>
        <pubDate>Wed, 09 Apr 2025 08:56:10 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1201-2</guid>
        <source url="https://rebol.metaeducation.com/t/ffi-updates-and-notes/1201.rss">FFI Updates and Notes</source>
      </item>
      <item>
        <title>FFI Updates and Notes</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Due to some complexities that had to do with the build system, the Ren-C FFI extension ceased being buildable somewhere on Dec 8, 2018.</p>
<p>Despite that, it still got some maintenance.  So when things were being searched and replaced in the codebase at large, I would tinker with the code in the FFI a bit to try and make it roughly reflect what had changed.  But even with that, a year's worth of drift without running it means it's going to get out of date.</p>
<p>In the last two days I've been able to get the demos back in running condition...including <a class="mention" href="https://rebol.metaeducation.com/u/szeng">@szeng</a>'s GTK demo:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://rebol.metaeducation.com/uploads/default/original/1X/4ffcf04865ce28f016f80473f549aa428ec9aba9.png" data-download-href="https://rebol.metaeducation.com/uploads/default/4ffcf04865ce28f016f80473f549aa428ec9aba9" title="EqR43"><img src="https://rebol.metaeducation.com/uploads/default/optimized/1X/4ffcf04865ce28f016f80473f549aa428ec9aba9_2_624x500.png" alt="EqR43" data-base62-sha1="bpBDASDn7FumiJxFsdzNXsASGYF" width="624" height="500" srcset="https://rebol.metaeducation.com/uploads/default/optimized/1X/4ffcf04865ce28f016f80473f549aa428ec9aba9_2_624x500.png, https://rebol.metaeducation.com/uploads/default/optimized/1X/4ffcf04865ce28f016f80473f549aa428ec9aba9_2_936x750.png 1.5x, https://rebol.metaeducation.com/uploads/default/optimized/1X/4ffcf04865ce28f016f80473f549aa428ec9aba9_2_1248x1000.png 2x" data-dominant-color="5E6467"></a></div><p></p>
<h2><a name="p-3493-cool-but-the-build-problems-havent-gone-away-1" class="anchor" href="https://rebol.metaeducation.com#p-3493-cool-but-the-build-problems-havent-gone-away-1"></a>Cool, but the Build Problems Haven't Gone Away...</h2>
<p>There hasn't been a lot of time to focus on making Rebmake better at cross-platform inclusion of libraries that aren't by default available on the platform.  There's no libffi that ships in Visual Studio, so it becomes something of a manual configuration process.  Also, there's a bit of configuring that has to be done to get it working in cross-compilation of 32-bit binaries on a 64-bit Linux host.  Similar difficulties for OS X.</p>
<p>Since no one is currently actively using the FFI (in the Ren-C builds at least), it seems the path of least resistance is to just have it building into the 64-bit Linux builds.  That's where it's easy for the Travis container to install the package with <strong>sudo apt-get libffi</strong> and link with a simple <strong><code>-lffi</code></strong>.  This is enough to keep the code compiling and run a couple of little smoke tests to make sure things haven't gone too far south.</p>
<p><strong>To be clear: if you have the libraries all set up, then a "sufficiently motivated individual" could get the OS X, 32-bit Linux, and Windows versions to build.</strong>  There's nothing about the <em>code</em> that shouldn't work (since it works on Linux 64-bit, it's more or less proven.)  But they'd have to massage Rebmake to get it to spit out the right command lines and find the right files on the right platforms, when they're not around by default.  It shouldn't be too hard, as the package setup code was already on Travis...but Rebmake is a bit of a beast and needs some design work vs. just hacking it up more.</p>
<h2><a name="p-3493-speaking-of-tests-2" class="anchor" href="https://rebol.metaeducation.com#p-3493-speaking-of-tests-2"></a>Speaking of Tests...</h2>
<p>I've been wanting tests that are extension-specific to live in the directory with the extension.  So I'm moving them.  Right now we have:</p>
<ul>
<li><strong><code>%printf.r</code></strong> - Very simple demonstration of calling printf</li>
<li><strong><code>%varargs.r</code></strong> - More complex examples of calling printf and sprintf</li>
<li><strong><code>%qsort.r</code></strong> - Simple callback example of C's <code>qsort()</code> function, where the sorting comparison function used by the C code is actually a Rebol function.</li>
<li><strong><code>%qsort_r.r</code></strong> - More complex example of C's <code>qsort_r()</code> function, that allows passing a value through to the internal function that is not a global variable.  Also makes that value a "tunneled" REBVAL*, so you can actually pass a Rebol value to the C as a pointer and then get it back in the Rebol callback as a REBVAL again.</li>
<li><strong><code>%gtk.r</code></strong> - Gtk demo with toggle button, push button, font picker, and color picker</li>
</ul>
<p>There was one file hanging around called <code>%varargs_old.r</code>.  In Atronix R3 there were no variadics, so the only way to do something like printf was with a block.  This means you'd have to COMPOSE or REDUCE to get your values in:</p>
<pre><code>printf compose [
    "hello %p%c"
    "ffi" [pointer]
    (to integer! newline) [int8]
]
</code></pre>
<p>With variadics in Ren-C there was the variadic option, so I changed it to try it.  For instance:</p>
<pre><code>(printf "hello %p%c" "ffi" [pointer] to integer! newline [int8])
</code></pre>
<p>You could also use an expression barrier:</p>
<pre><code>printf "hello %p%c" "ffi" [pointer] to integer! newline [int8] |
</code></pre>
<p>I don't know what the "right" answer for calling C variadics is.  Maybe the compose was better?  But it's easy enough to go back and forth that I don't think we need to preserve two copies of the same file to different conventions.  Hence, instead I'm making a note here.</p>
<h2><a name="p-3493-and-as-i-mentioned-in-chat-3" class="anchor" href="https://rebol.metaeducation.com#p-3493-and-as-i-mentioned-in-chat-3"></a>And as I mentioned in chat...</h2>
<p>The big crazy difference with this FFI from the Atronix R3 is that it's all an extension. If you look closely you'll see a bit of an oddity in that it says  <strong>make custom!</strong>  and not  <strong>make struct!</strong> . :-/ There needs to be some work on that particular ecology point.</p>
<p>The  <em>mechanics</em>  of having an arbitrary number of datatypes is now in place. So the system is no longer limited to the number of types that fit in a byte...only the built-in types use that for optimization to get use out of all 3 platform pointers (besides the pointer-sized bits used for the header). But a REB_CUSTOM type means that it is sacrificing one of those pointers in the cell for the extension type.</p>
<p>So...there's now a bunch of policy and ecology to straighten out on top of that.</p>
<p>But again, the good news of all of this is that it means that we aren't stuck putting a bunch of FFI-specific code in the core; so the WASM build can be lighter. And similarly, we don't have a bunch of JavaScript support in the core. So things are factoring well for using the language in different configurations.</p>
          <p><a href="https://rebol.metaeducation.com/t/ffi-updates-and-notes/1201/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/ffi-updates-and-notes/1201/1</link>
        <pubDate>Thu, 29 Aug 2019 22:05:48 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1201-1</guid>
        <source url="https://rebol.metaeducation.com/t/ffi-updates-and-notes/1201.rss">FFI Updates and Notes</source>
      </item>
  </channel>
</rss>
