<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why Don&#39;t Splices Preserve Their List Type?</title>
    <link>https://rebol.metaeducation.com/t/why-dont-splices-preserve-their-list-type/1953</link>
    <description>The first concept of representing splices out of isotopes was actually to make them as antiform BLOCK!.

You&#39;d get an antiform block regardless of the input to SPREAD:

    &gt;&gt; spread [d e]
    == ~[d e]~  ; anti

    &gt;&gt; spread &#39;(d e)
    == ~[d e]~  ; anti

    &gt;&gt; spread @[d e]
    == ~[d e]~  ; anti

From the perspective of things like APPEND, it doesn&#39;t matter:

    &gt;&gt; append [a b c] spread [d e]
    == [a b c d e]

    &gt;&gt; append [a b c] spread &#39;(d e)
    == [a b c d e]

    &gt;&gt; append [a b c] spread @[d e]
    == [a b c d e]

## Canonization of Splices Is Important

By canonizing splices to just one type, we recover the other list antiforms for other meanings that have nothing to do with splicing.  That subtlety would be lost if people had to think of every list type as being a splice.

It also helps you realize information is being thrown away.  Not only is the subclass of list forgotten, but any binding is removed too (!)

But which canon list form should it take?

## GROUP! Seems The Best Choice

* **It makes the canonization more obvious.**  Since the input to SPREAD will typically be a BLOCK!, people will learn the type is not preserved quickly:

      &gt;&gt; spread [a b c]
      == ~(a b c)~  ; anti

* **Parentheses look softer and more permeable.**  They already are &quot;weaker&quot; in that they do not &quot;block&quot; evaluation in the way a BLOCK! does.  So their softness makes it feel more reasonable to say that the edges aren&#39;t there.

    *(This semiotic permeability exists in other places where brackets and parentheses are juxtaposed... for instance in [interval notation](https://en.wikipedia.org/wiki/Interval_(mathematics)#Notations_for_intervals), where **[10, 20)** means &quot;the numbers from 10 to 20 without including 20&quot;)*</description>
    
    <lastBuildDate>Mon, 24 Mar 2025 14:26:16 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://rebol.metaeducation.com/t/why-dont-splices-preserve-their-list-type/1953.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why Don&#39;t Splices Preserve Their List Type?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The first concept of representing splices out of isotopes was actually to make them as antiform BLOCK!.</p>
<p>You'd get an antiform block regardless of the input to SPREAD:</p>
<pre><code>&gt;&gt; spread [d e]
== ~[d e]~  ; anti

&gt;&gt; spread '(d e)
== ~[d e]~  ; anti

&gt;&gt; spread @[d e]
== ~[d e]~  ; anti
</code></pre>
<p>From the perspective of things like APPEND, it doesn't matter:</p>
<pre><code>&gt;&gt; append [a b c] spread [d e]
== [a b c d e]

&gt;&gt; append [a b c] spread '(d e)
== [a b c d e]

&gt;&gt; append [a b c] spread @[d e]
== [a b c d e]
</code></pre>
<h2><a name="p-6358-canonization-of-splices-is-important-1" class="anchor" href="https://rebol.metaeducation.com#p-6358-canonization-of-splices-is-important-1"></a>Canonization of Splices Is Important</h2>
<p>By canonizing splices to just one type, we recover the other list antiforms for other meanings that have nothing to do with splicing.  That subtlety would be lost if people had to think of every list type as being a splice.</p>
<p>It also helps you realize information is being thrown away.  Not only is the subclass of list forgotten, but any binding is removed too (!)</p>
<p>But which canon list form should it take?</p>
<h2><a name="p-6358-group-seems-the-best-choice-2" class="anchor" href="https://rebol.metaeducation.com#p-6358-group-seems-the-best-choice-2"></a>GROUP! Seems The Best Choice</h2>
<ul>
<li>
<p><strong>It makes the canonization more obvious.</strong>  Since the input to SPREAD will typically be a BLOCK!, people will learn the type is not preserved quickly:</p>
<pre><code>&gt;&gt; spread [a b c]
== ~(a b c)~  ; anti
</code></pre>
</li>
<li>
<p><strong>Parentheses look softer and more permeable.</strong>  They already are "weaker" in that they do not "block" evaluation in the way a BLOCK! does.  So their softness makes it feel more reasonable to say that the edges aren't there.</p>
<p><em>(This semiotic permeability exists in other places where brackets and parentheses are juxtaposed... for instance in <a href="https://en.wikipedia.org/wiki/Interval_(mathematics)#Notations_for_intervals">interval notation</a>, where <strong>[10, 20)</strong> means "the numbers from 10 to 20 without including 20")</em></p>
</li>
</ul>
          <p><a href="https://rebol.metaeducation.com/t/why-dont-splices-preserve-their-list-type/1953/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-dont-splices-preserve-their-list-type/1953/1</link>
        <pubDate>Wed, 31 Aug 2022 21:11:34 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1953-1</guid>
        <source url="https://rebol.metaeducation.com/t/why-dont-splices-preserve-their-list-type/1953.rss">Why Don&#39;t Splices Preserve Their List Type?</source>
      </item>
  </channel>
</rss>
