<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What should evaluating an empty block (`EVAL []`) do?</title>
    <link>https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426</link>
    <description>### *(Related question: https://rebol.metaeducation.com/t/what-should-do-of-empty-string-do-do/2035)*

---
I&#39;ve pointed out that the answer for things like &quot;what should a loop that never runs its body&quot; have varied.

    rebol2/r3-alpha&gt;&gt; type? while [false] [&quot;whatever&quot;]
    == none!

    red&gt;&gt; type? while [false] [&quot;whatever&quot;]
    == unset!

But it&#39;s consistent historically that if something runs **`do []`** (what Ren-C calls EVAL when it&#39;s a BLOCK! you&#39;re evaluating) then you get an &quot;UNSET!&quot;

    rebol2/r3-alpha/red&gt;&gt; type? do []
    == unset!

## New Antiform States Available

Ren-C has a choice most corresponding to UNSET!, which is TRASH.  [Trash does not display in the console](https://rebol.metaeducation.com/t/console-treatment-of-void-vs-nothing/2045), which might be considered an advantage.

    &gt;&gt; eval []  ; imagine this returns TRASH

But if you evaluate to trash during something like REDUCE, it would give you an error.

    &gt;&gt; reduce [1 + 2 ~ 3 + 4]
    ** Script Error: Invalid use of ~ antiform

To get opt-out behavior, it would have to give VOID or GHOST.

    &gt;&gt; 1 + 2 eval []
    == ~[]~  ; anti (void)

    &gt;&gt; 1 + 2 eval []  ; if ghost, vaporizes
    == 3

VOID is what you use to opt out of expressions in COMPOSE, and it&#39;s the established result of an ANY or ALL in which all the expressions opt out:

    &gt;&gt; all [maybe if false [&quot;hello&quot;] comment &quot;world&quot;]
    == ~[]~  ; anti (void)

**Can anyone think of a case where there&#39;s a balance of provable value for something like a `do compose [...]` whose contents have all boiled away to be TRASH instead of VOID or GHOST?**</description>
    
    <lastBuildDate>Sun, 18 May 2025 10:05:02 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What should evaluating an empty block (`EVAL []`) do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1426">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>I don't know how pivotal the particular point of <strong><code>eval []</code></strong> is...</strong></p>
</blockquote>
</aside>
<p>So this turns out to actually be <em>very</em> pivotal, when you are thinking about the coherence of the system as a whole.</p>
<p>For instance:</p>
<pre><code>&gt;&gt; 1 + 2 (comment "vanishes")
== 3
</code></pre>
<p>In order for that to be true, we have to consider that when comment vanishes, it leaves whatever state the evaluation was initialized with in the output cell.  Hence, this must give the same result as:</p>
<pre><code>&gt;&gt; 1 + 2 ()
== 3
</code></pre>
<p>In other words, the evaluation of that empty GROUP! has to be a GHOST!.</p>
<p>More specifically, <strong>it has to be an "unsurprising" GHOST!</strong>  <img src="https://rebol.metaeducation.com/images/emoji/twitter/neutral_face.png?v=14" title=":neutral_face:" class="emoji" alt=":neutral_face:" loading="lazy" width="20" height="20"></p>
<p>"Surprisingness" is a flag which drives whether a ghost will vanish in the evaluator or not.  If a ghost is not surprising, then it will just evaluate to a GHOST! value.  Surprising ghosts are those that come from functions whose type signature indicates that it may return something besides ghosts.</p>
<p><strong>If we believe <code>()</code> and <code>eval []</code> should have parity (and they should), then <code>eval []</code> needs to be a <code>GHOST!</code> ... however, it has to be a <strong>SURPRISING</strong> <code>GHOST!</code></strong></p>
<p>This is because unlike COMMENT, EVAL returns more than just GHOST!... it can return literally any value in the system.</p>
<p>(If you went back in time and said that the outcome of this discussion was not "trash" or "void", but rather <em>"surprising ghost"</em>, that would have sounded pretty strange.  It still sounds strange, but it's the correct and fascinating answer.)</p>
<p>Now that surprising ghosts exists, it raises questions at a lot of the sites that were forcing ghosts to become voids to help avoid accidents.  Surprising ghosts are less accident-prone than unsurprising ones... (if you get too comfortable with ghosts, and start getting complacent, they might do some damage).  But they do introduce a variability that isn't really desirable when vanishing isn't on the table.  Surprising ghosts really should only be used when piping fully arbitrary values around (e.g. combinators).</p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/24">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/24</link>
        <pubDate>Sun, 18 May 2025 10:05:02 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1426-24</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426.rss">What should evaluating an empty block (`EVAL []`) do?</source>
      </item>
      <item>
        <title>What should evaluating an empty block (`EVAL []`) do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Note: I've pared the above conversation down to the minimum, updating it with 2024 terminology and behaviors.)</em></p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1426">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Can anyone think of a case where there's a balance of provable value for something like an <code>eval compose [...]</code> whose contents have all boiled away to be TRASH instead of VOID or GHOST?</p>
</blockquote>
</aside>
<p>There's a few interesting developments that inform the thinking on this...</p>
<h3><a name="p-7353-passing-trash-to-comparison-operations-now-failshttpsrebolmetaeducationcomtmaking-call-raise-a-definitional-error-for-bad-exit-codes20682-1" class="anchor" href="https://rebol.metaeducation.com#p-7353-passing-trash-to-comparison-operations-now-failshttpsrebolmetaeducationcomtmaking-call-raise-a-definitional-error-for-bad-exit-codes20682-1"></a><a href="https://rebol.metaeducation.com/t/making-call-raise-a-definitional-error-for-bad-exit-codes/2068/2">Passing TRASH to Comparison Operations Now Fails</a></h3>
<pre><code>&gt;&gt; if (10 = get/any $asdf) [print "Not legal in Ren-C"]
** Script Error: = expects [something?] for its value2 argument
</code></pre>
<p>This decision aligns with Rebol2's treatment of UNSET! in comparisons (though Red and R3-Alpha allow it).</p>
<h3><a name="p-7353-func-returns-trash-unless-you-use-an-explicit-returnhttpsrebolmetaeducationcomthow-attached-are-we-to-functions-return-last-result1219-2" class="anchor" href="https://rebol.metaeducation.com#p-7353-func-returns-trash-unless-you-use-an-explicit-returnhttpsrebolmetaeducationcomthow-attached-are-we-to-functions-return-last-result1219-2"></a><a href="https://rebol.metaeducation.com/t/how-attached-are-we-to-functions-return-last-result/1219">FUNC returns TRASH unless you use an explicit RETURN</a></h3>
<p>A side effect of this is that it's a lot harder to accidentally return VOID from a function:</p>
<pre><code> whatever: func [x [block! group!]] [
     if block? x [append x spread [a b c]]
     if group? x [append x spread [d e f]]
 ]
</code></pre>
<p>Under the historical behavior, if you pass in a GROUP! the final function result would be the branch result of the APPEND which will be the group with [d e f] added.  But if you passed in a BLOCK! then the IF GROUP? test would be false and the overall return result would be a VOID.</p>
<h3><a name="p-7353-void-is-an-unstable-antiform-3" class="anchor" href="https://rebol.metaeducation.com#p-7353-void-is-an-unstable-antiform-3"></a>VOID Is An Unstable Antiform</h3>
<ul>
<li>
<p>Cannot store in variables</p>
</li>
<li>
<p>Ilegal in comparisons</p>
</li>
<li>
<p>Illegal in isolated conditional testing</p>
</li>
<li>
<p>Opts-out when testing conditionally in aggregate (e.g. ANY and ALL).</p>
</li>
</ul>
<h2><a name="p-7353-func-change-means-the-world-overall-is-more-full-of-trash-4" class="anchor" href="https://rebol.metaeducation.com#p-7353-func-change-means-the-world-overall-is-more-full-of-trash-4"></a>FUNC Change Means The World Overall Is More Full Of Trash</h2>
<p>In this case it's a good thing.  The fewer accidental VOIDs that are being produced in the ecology overall, the better I feel about constructs like EVAL being willing to produce them, or for things like REDUCE (or anything else) being willing to discard them.</p>
<h2><a name="p-7353-honestly-its-barely-come-up-yet-5" class="anchor" href="https://rebol.metaeducation.com#p-7353-honestly-its-barely-come-up-yet-5"></a>Honestly, It's Barely Come Up... Yet</h2>
<p>Which is an indication it doesn't happen on accident.  So the main way it's going to come up is if people know that's the behavior, and start designing code that purposefully uses the pattern.</p>
<p>And if they do that, then that is a good thing, because they're getting use out of it?</p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/20">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/20</link>
        <pubDate>Thu, 22 Aug 2024 00:55:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1426-20</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426.rss">What should evaluating an empty block (`EVAL []`) do?</source>
      </item>
      <item>
        <title>What should evaluating an empty block (`EVAL []`) do?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="1426">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I tried changing <strong><code>eval []</code></strong> to be void (and related places where empty blocks had to have <em>an answer</em>) and I don't really see any particularly obvious bad side to it. Nothing crashed.</p>
</blockquote>
</aside>
<p>So we're through the looking glass then? I think it's the right thing to do, we'll see...</p>
<p>I'd be interested to dig into this a bit more: <em>"Redbol languages are based on denotational semantics, where the meaning of every expression needs to have a representation"</em> / <em>"I suppose he hasn't read Godel, Escher, Bach"</em>. The first statement seems quite inflexible and possibly restrictive.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/7">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/7</link>
        <pubDate>Thu, 10 Dec 2020 19:49:37 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1426-7</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426.rss">What should evaluating an empty block (`EVAL []`) do?</source>
      </item>
      <item>
        <title>What should evaluating an empty block (`EVAL []`) do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="5" data-topic="1426">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I notice that Ren-C (in R3C as well as current) does vaporize in the case of <code>reduce [( )]</code> which to mind is the same thing.</p>
</blockquote>
</aside>
<p>That actually arises from a more universal rule about GROUP!:</p>
<p><a href="https://rebol.metaeducation.com/t/permissive-group-invisibility/1153"><em>"groups just group things, they don't synthesize values of their own."</em></a></p>
<p>I tried changing <strong><code>eval []</code></strong> to be void (and related places where empty blocks had to have <em>an answer</em>) and I don't really see any particularly obvious bad side to it.  Nothing crashed.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/6</link>
        <pubDate>Thu, 10 Dec 2020 18:26:05 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1426-6</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426.rss">What should evaluating an empty block (`EVAL []`) do?</source>
      </item>
      <item>
        <title>What should evaluating an empty block (`EVAL []`) do?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I hadn't pondered the absolutism of REDUCE. I've embraced your concept of vaporization for UNSPACED/SPACED/COMPOSE and don't see why REDUCE would be different. I notice that Ren-C (in R3C as well as current) does vaporize in the case of <code>reduce [( )]</code> which to mind is the same thing.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/5</link>
        <pubDate>Thu, 10 Dec 2020 14:06:24 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1426-5</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426.rss">What should evaluating an empty block (`EVAL []`) do?</source>
      </item>
      <item>
        <title>What should evaluating an empty block (`EVAL []`) do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="rgchris" data-post="1" data-topic="1427">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rgchris/48/14_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/1427/1">On another topic</a></div>
<blockquote>
<p>Either way, I feel <code>eval []</code> should vaporize:</p>
<pre><code>   reduce [eval []] =&gt; []
</code></pre>
</blockquote>
</aside>
<p>The historical rule is that there are no vaporizations by default in REDUCE.  If you have N expressions in, you will have N values out.  <a href="https://rebol.metaeducation.com/t/why-or-why-not-have-unset-in-rebol-like-languages/113/2">There is a religiosity about it in Red</a>.</p>
<p>If you think <strong>reduce [eval []]</strong> should be <strong>[]</strong> then that would require both EVAL [] to be VOID and REDUCE to vaporize them:</p>
<pre><code> &gt;&gt; maybe if false ["not"]
 == ~[]~  ; anti (void)

 &gt;&gt; reduce ["This will" (maybe if false ["not"]) "make you a Red heretic"]
 == ["This will" "make you a Red heretic"]
</code></pre>
<p>(It would still be possible to use REDUCE/PREDICATE and use a predicate function that errors on voids.)</p>
<h2><a name="p-4395-i-dont-know-how-pivotal-the-particular-point-of-eval-is-1" class="anchor" href="https://rebol.metaeducation.com#p-4395-i-dont-know-how-pivotal-the-particular-point-of-eval-is-1"></a>I don't know how pivotal the particular point of <strong><code>eval []</code></strong> is...</h2>
<p>I don't really think we have code examples where this comes up all that often, which is probably why it hasn't been given that much thought.</p>
<p>OTOH the REDUCE default behavior does come up, I just don't tend to use REDUCE that often compared to COMPOSE.  <strong>reduce ['x: 1 + 2]</strong> seems awkward compared to <strong>compose [x: (1 + 2)]</strong>.  So it's like the only time I would use REDUCE would be to build the "block of precisely N values", and the restriction hasn't bothered me so far.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/3</link>
        <pubDate>Thu, 10 Dec 2020 05:19:49 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1426-3</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426.rss">What should evaluating an empty block (`EVAL []`) do?</source>
      </item>
      <item>
        <title>What should evaluating an empty block (`EVAL []`) do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h3><a name="p-4393-related-question-httpsrebolmetaeducationcomtwhat-should-do-of-empty-string-do-do2035-1" class="anchor" href="https://rebol.metaeducation.com#p-4393-related-question-httpsrebolmetaeducationcomtwhat-should-do-of-empty-string-do-do2035-1"></a><em>(Related question: <a href="https://rebol.metaeducation.com/t/what-should-do-of-empty-string-do-do/2035" class="inline-onebox">What should do of empty string (`DO ""`) do?</a>)</em></h3>
<hr>
<p>I've pointed out that the answer for things like "what should a loop that never runs its body" have varied.</p>
<pre><code>rebol2/r3-alpha&gt;&gt; type? while [false] ["whatever"]
== none!

red&gt;&gt; type? while [false] ["whatever"]
== unset!
</code></pre>
<p>But it's consistent historically that if something runs <strong><code>do []</code></strong> (what Ren-C calls EVAL when it's a BLOCK! you're evaluating) then you get an "UNSET!"</p>
<pre><code>rebol2/r3-alpha/red&gt;&gt; type? do []
== unset!
</code></pre>
<h2><a name="p-4393-new-antiform-states-available-2" class="anchor" href="https://rebol.metaeducation.com#p-4393-new-antiform-states-available-2"></a>New Antiform States Available</h2>
<p>Ren-C has a choice most corresponding to UNSET!, which is TRASH.  <a href="https://rebol.metaeducation.com/t/console-treatment-of-void-vs-nothing/2045">Trash does not display in the console</a>, which might be considered an advantage.</p>
<pre><code>&gt;&gt; eval []  ; imagine this returns TRASH
</code></pre>
<p>But if you evaluate to trash during something like REDUCE, it would give you an error.</p>
<pre><code>&gt;&gt; reduce [1 + 2 ~ 3 + 4]
** Script Error: Invalid use of ~ antiform
</code></pre>
<p>To get opt-out behavior, it would have to give VOID or GHOST.</p>
<pre><code>&gt;&gt; 1 + 2 eval []
== ~[]~  ; anti (void)

&gt;&gt; 1 + 2 eval []  ; if ghost, vaporizes
== 3
</code></pre>
<p>VOID is what you use to opt out of expressions in COMPOSE, and it's the established result of an ANY or ALL in which all the expressions opt out:</p>
<pre><code>&gt;&gt; all [maybe if false ["hello"] comment "world"]
== ~[]~  ; anti (void)
</code></pre>
<p><strong>Can anyone think of a case where there's a balance of provable value for something like a <code>do compose [...]</code> whose contents have all boiled away to be TRASH instead of VOID or GHOST?</strong></p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426/1</link>
        <pubDate>Wed, 09 Dec 2020 23:45:38 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1426-1</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-evaluating-an-empty-block-eval-do/1426.rss">What should evaluating an empty block (`EVAL []`) do?</source>
      </item>
  </channel>
</rss>
