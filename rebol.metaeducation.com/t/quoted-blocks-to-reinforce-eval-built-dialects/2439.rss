<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Quoted Blocks To Reinforce Eval-Built Dialects</title>
    <link>https://rebol.metaeducation.com/t/quoted-blocks-to-reinforce-eval-built-dialects/2439</link>
    <description>Rebmake uses TUPLE!s and PATH!s creatively when specifying lists of files to build:

    files: [
        foo.c
        bar.c [&lt;msc:/WD1337&gt; &lt;gcc:-Wno-bad-warning&gt;]  ; options for this file

        subdir/ -&gt; [
           baz.c [
              #no-c++
              ; You can put more compiler settings for this file here
           ]
           mumble.c
       ]

       frotz.c
    ]

I&#39;m turning my attention toward making this even more powerful, and there&#39;s a lot of potential.

## But Sometimes, You Build These Specs With Code

I was looking at this, and had a bit of a thought about how `spread` looks like it&#39;s in a &quot;sea of intertness&quot;

    depends: compose [
        (switch platform-config.os-base [
            &#39;Windows [
                spread [
                    stdio-windows.c
                    readline-windows.c
                ]
            ]
        ] else [
            spread [
                stdio-posix.c
                readline-posix.c
            ]
        ])
    ]

You&#39;re looking at this list of files, that you&#39;re used to seeing dialected.  So you half expect it to be like:

    spread/ -&gt; [  ; would be like spread is a directory
       stdio-windows.c
       readline-windows.c
    ]

    spread [  ; so this looks like a &quot;bug&quot;
       stdio-windows.c
       readline-windows.c
    ]

This gave me a thought, though.  *Since the block is in an evaluative context, why not give a hint to help remind readers that it is?*

    depends: compose [
        (switch platform-config.os-base [
            &#39;Windows [
                spread &#39;[
                    stdio-windows.c
                    readline-windows.c
                ]
            ]
        ] else [
            spread &#39;[
                stdio-posix.c
                readline-posix.c
            ]
        ])
    ]

It gives you a little hint to remind you that you&#39;re looking at something evaluative.  While you *could* use quotes as a signal in a dialect (to put a generic mark on something?) this wouldn&#39;t be too common, so I think this might be a good tool when composing dialect code to know that&#39;s what you&#39;re doing.

(Of course, for binding reasons, you often want to quote blocks anyway...and that&#39;s becoming more important with time!)</description>
    
    <lastBuildDate>Thu, 08 May 2025 12:18:32 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://rebol.metaeducation.com/t/quoted-blocks-to-reinforce-eval-built-dialects/2439.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Quoted Blocks To Reinforce Eval-Built Dialects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebmake uses TUPLE!s and PATH!s creatively when specifying lists of files to build:</p>
<pre><code>files: [
    foo.c
    bar.c [&lt;msc:/WD1337&gt; &lt;gcc:-Wno-bad-warning&gt;]  ; options for this file

    subdir/ -&gt; [
       baz.c [
          #no-c++
          ; You can put more compiler settings for this file here
       ]
       mumble.c
   ]

   frotz.c
]
</code></pre>
<p>I'm turning my attention toward making this even more powerful, and there's a lot of potential.</p>
<h2><a name="p-8223-but-sometimes-you-build-these-specs-with-code-1" class="anchor" href="https://rebol.metaeducation.com#p-8223-but-sometimes-you-build-these-specs-with-code-1"></a>But Sometimes, You Build These Specs With Code</h2>
<p>I was looking at this, and had a bit of a thought about how <code>spread</code> looks like it's in a "sea of intertness"</p>
<pre><code>depends: compose [
    (switch platform-config.os-base [
        'Windows [
            spread [
                stdio-windows.c
                readline-windows.c
            ]
        ]
    ] else [
        spread [
            stdio-posix.c
            readline-posix.c
        ]
    ])
]
</code></pre>
<p>You're looking at this list of files, that you're used to seeing dialected.  So you half expect it to be like:</p>
<pre><code>spread/ -&gt; [  ; would be like spread is a directory
   stdio-windows.c
   readline-windows.c
]

spread [  ; so this looks like a "bug"
   stdio-windows.c
   readline-windows.c
]
</code></pre>
<p>This gave me a thought, though.  <em>Since the block is in an evaluative context, why not give a hint to help remind readers that it is?</em></p>
<pre><code>depends: compose [
    (switch platform-config.os-base [
        'Windows [
            spread '[
                stdio-windows.c
                readline-windows.c
            ]
        ]
    ] else [
        spread '[
            stdio-posix.c
            readline-posix.c
        ]
    ])
]
</code></pre>
<p>It gives you a little hint to remind you that you're looking at something evaluative.  While you <em>could</em> use quotes as a signal in a dialect (to put a generic mark on something?) this wouldn't be too common, so I think this might be a good tool when composing dialect code to know that's what you're doing.</p>
<p>(Of course, for binding reasons, you often want to quote blocks anyway...and that's becoming more important with time!)</p>
          <p><a href="https://rebol.metaeducation.com/t/quoted-blocks-to-reinforce-eval-built-dialects/2439/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/quoted-blocks-to-reinforce-eval-built-dialects/2439/1</link>
        <pubDate>Thu, 08 May 2025 11:58:30 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2439-1</guid>
        <source url="https://rebol.metaeducation.com/t/quoted-blocks-to-reinforce-eval-built-dialects/2439.rss">Quoted Blocks To Reinforce Eval-Built Dialects</source>
      </item>
  </channel>
</rss>
