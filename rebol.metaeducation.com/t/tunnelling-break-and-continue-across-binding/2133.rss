<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Tunnelling BREAK and CONTINUE Across Binding</title>
    <link>https://rebol.metaeducation.com/t/tunnelling-break-and-continue-across-binding/2133</link>
    <description>In `%make-reb-lib.r`, there&#39;s are abstractions for helping you do something for every API definition.  The APIs are in an array of objects, and the idea is to go through all the objects and run some code bound into each one... so you don&#39;t have to specify the object name each time.

So instead of:

    names: map-each api api-objects [
        print [&quot;The API name is&quot; api.name]
        api.name
    ]

You could instead write:

    names: map-each-api [
        print [&quot;The API name is&quot; name]
        name
    ]

## Implementation of MAP-EACH-API

In order to make the API member fields visible to code, we use the OVERBIND instruction, which patches in the object:

    map-each-api: lambda [code [block!]] [
        map-each api api-objects compose [
            eval overbind api (code)
        ]
    ]

## Problem: CONTINUE and BREAK

We&#39;d like to be able to run the CONTINUE and BREAK of the MAP-EACH.  Previously, using a COMPOSE bought that.  Now, because the code block has a binding, those do not override.

If the API&#39;s object&#39;s bindings were on the block passed to MAP-EACH, then it would patch the BREAK and CONTINUE onto them.  But we can&#39;t do that, because the API object is not available until the MAP-EACH is already running and the block has been passed.

Using the current primitive tools for binding at hand, we can try making an object carrying BREAK and CONTINUE and overbind into that as well:

    map-each-api: lambda [code [block!]] [
        map-each api api-objects compose [
            let aux: make object! compose [break: (^break) continue: (^continue)]
            eval overbind aux overbind api (code)
        ]
    ]

It works...and the COMPOSE isn&#39;t really necessary anymore.  But, it certainly leaves a lot to be desired.  If we were to dialect this *(in the spirit of something like [hiiamboris&#39;s WITH](https://codeberg.org/hiiamboris/red-common/src/branch/master/with.red))*, it might look more like:

    map-each-api: lambda [code [block!]] [
        map-each api api-objects [
            eval with [break continue :api] code
        ]
    ]

Overall though, it feels good to have things under more strict control.</description>
    
    <lastBuildDate>Sat, 07 Jun 2025 10:00:03 +0000</lastBuildDate>
    <category>Loops</category>
    <atom:link href="https://rebol.metaeducation.com/t/tunnelling-break-and-continue-across-binding/2133.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Tunnelling BREAK and CONTINUE Across Binding</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In <code>%make-reb-lib.r</code>, there's are abstractions for helping you do something for every API definition.  The APIs are in an array of objects, and the idea is to go through all the objects and run some code bound into each one... so you don't have to specify the object name each time.</p>
<p>So instead of:</p>
<pre><code>names: map-each api api-objects [
    print ["The API name is" api.name]
    api.name
]
</code></pre>
<p>You could instead write:</p>
<pre><code>names: map-each-api [
    print ["The API name is" name]
    name
]
</code></pre>
<h2><a name="p-7026-implementation-of-map-each-api-1" class="anchor" href="https://rebol.metaeducation.com#p-7026-implementation-of-map-each-api-1"></a>Implementation of MAP-EACH-API</h2>
<p>In order to make the API member fields visible to code, we use the OVERBIND instruction, which patches in the object:</p>
<pre><code>map-each-api: lambda [code [block!]] [
    map-each api api-objects compose [
        eval overbind api (code)
    ]
]
</code></pre>
<h2><a name="p-7026-problem-continue-and-break-2" class="anchor" href="https://rebol.metaeducation.com#p-7026-problem-continue-and-break-2"></a>Problem: CONTINUE and BREAK</h2>
<p>We'd like to be able to run the CONTINUE and BREAK of the MAP-EACH.  Previously, using a COMPOSE bought that.  Now, because the code block has a binding, those do not override.</p>
<p>If the API's object's bindings were on the block passed to MAP-EACH, then it would patch the BREAK and CONTINUE onto them.  But we can't do that, because the API object is not available until the MAP-EACH is already running and the block has been passed.</p>
<p>Using the current primitive tools for binding at hand, we can try making an object carrying BREAK and CONTINUE and overbind into that as well:</p>
<pre><code>map-each-api: lambda [code [block!]] [
    map-each api api-objects compose [
        let aux: make object! compose [break: (^break) continue: (^continue)]
        eval overbind aux overbind api (code)
    ]
]
</code></pre>
<p>It works...and the COMPOSE isn't really necessary anymore.  But, it certainly leaves a lot to be desired.  If we were to dialect this <em>(in the spirit of something like <a href="https://codeberg.org/hiiamboris/red-common/src/branch/master/with.red">hiiamboris's WITH</a>)</em>, it might look more like:</p>
<pre><code>map-each-api: lambda [code [block!]] [
    map-each api api-objects [
        eval with [break continue :api] code
    ]
]
</code></pre>
<p>Overall though, it feels good to have things under more strict control.</p>
          <p><a href="https://rebol.metaeducation.com/t/tunnelling-break-and-continue-across-binding/2133/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/tunnelling-break-and-continue-across-binding/2133/1</link>
        <pubDate>Wed, 24 Jan 2024 20:56:51 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2133-1</guid>
        <source url="https://rebol.metaeducation.com/t/tunnelling-break-and-continue-across-binding/2133.rss">Tunnelling BREAK and CONTINUE Across Binding</source>
      </item>
  </channel>
</rss>
