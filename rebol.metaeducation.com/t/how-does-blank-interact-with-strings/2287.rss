<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How Does BLANK! Interact With Strings?</title>
    <link>https://forum.rebol.info/t/how-does-blank-interact-with-strings/2287</link>
    <description>Experiments have run the gamut to where a plain BLANK! once would opt out of appending to a series, and you had to quote it to append it:

    experiment&gt;&gt; append [a b] _
    = [a b]

    experiment&gt;&gt; append [a b] quote _
    == [a b _]

But the satisfying world we have now is that anything you can pick out of a block will append as-is to another block.  So adding a blank is additive:

    &gt;&gt; append [a b] _
    == [a b _]

It feels like a decent fit to say that appending a blank to a string is additive...since VOID and such are available if you want to opt out:

    &gt;&gt; append &quot;ab&quot; _
    == &quot;ab &quot;

Though it raises the question of what BINARY! should do:

    &gt;&gt; append #{0102} _
    == ???

It seems that adding a UTF-8 representation is the story for ASCII:

    &gt;&gt; as binary! &quot;AB&quot;
    == #{4142}

    &gt;&gt; append #{0102} &quot;AB&quot;
    = #{01024142}

But when it comes to integers, strings append the molded form...while binaries just add one byte, not the bytes of the formed string of the integer:

    &gt;&gt; append &quot;ab&quot; 10
    == &quot;ab10&quot;

    &gt;&gt; append #{0102} 10
    == #{01020A}

A bit of a mixed bag, that could support arguments that BLANK! could be &quot;the space of binaries&quot; (e.g. #{00})

    &gt;&gt; append #{0102} _
    == #{010200}

But I think that&#39;s not so useful.  It&#39;s more likely that the character representation of space is useful:

    &gt;&gt; to binary! #&quot; &quot;
    == #{20}

    &gt;&gt; append #{0102} _
    == #{010220}

Ren-C FIND and PARSE mechanics already allows you to search for strings in BINARY!, implicitly looking for the UTF-8 representation.

## What If _ Was Really The Canon Representation of Space Chars?

    &gt;&gt; pick &quot;ab &quot; 3
    == _

    &gt;&gt; #&quot; &quot;
    == _

    &gt;&gt; char? _
    == ~true~  ; isotope

    &gt;&gt; space? _
    == ~true~  ; isotope

I&#39;ve mentioned that single character intents are on the rise... we could call quoted void (apostrophe) &quot;blank&quot; and it could be used in contexts where you want to say there&#39;s no value:

    &gt;&gt; blank? first [&#39;]
    == ~true~  ; isotope

    &gt;&gt; blank
    == &#39;

You&#39;d still have _ as an evaluator-inert dialecting part that can&#39;t be redefined.  You just would need to use something like **#** or **&#39;** or **~** in cases where you had a slot that could be either any character -or- some out of band thing.

Off the top of my head, I can see a few problems.  If _ became a character literal, it shouldn&#39;t be used for vacant spots in paths.  So let&#39;s say paths start using this &quot;new blank&quot;:

    &gt;&gt; as block! first [/a]
    == [&#39; a]

Doesn&#39;t look too bad, but if you want to parse it you need double apostrophes to match those spots:

    parse [/a] [into path! [&#39;&#39; &#39;a]]

This is because a single apostrophe is matched as void, e.g. matches without advancing the parse position.  [And it wouldn&#39;t work if you used a word to reference the blank](https://forum.rebol.info/t/parse-behavior-for-words-that-lookup-to-quoted/2038):

    &gt;&gt; parse [/a] [into path! [blank &#39;a]]
    ** Error: To match a QUOTED! you must use @blank

    &gt;&gt; parse [/a] [into path! [@blank &#39;a]]  ; would need to do this...
    == a

But it&#39;s not awful, and at least it doesn&#39;t silently treat the quote as a vanishing rule.

**It&#39;s still kind of an interesting thought to make _ the literal char! of space.**  Still inert, still usable in dialects.  It would leave **`&#39;`** and **`~`** as &quot;friendly nothing&quot; and &quot;unfriendly nothing&quot;.

    &gt;&gt; spread first [&#39;]  ; would return void

    &gt;&gt; spread first [~]
    ** Error: Cannot spread meta-NONE

Either way, I think the conclusion here is that **append #{0102} _** should be **#{010220}**</description>
    
    <lastBuildDate>Fri, 20 Sep 2024 06:34:01 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/how-does-blank-interact-with-strings/2287.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How Does BLANK! Interact With Strings?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2287">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>What If _ Was Really The Canon Representation of Space Chars?</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; pick "ab " 3
== _

&gt;&gt; #" "
== _
</code></pre>
</blockquote>
</aside>
<p>I've outlined the reasons why this is a bad idea.</p>
<p>But there's another possibility: <strong>What if <strong><code>#</code></strong> was the representation of the space character instead of the NUL (0) character?</strong></p>
<p>It would be a <em>lot</em> more useful.  Space has a particularly ugly representation (<strong><code>#" "</code></strong>).</p>
<p>Because the 0 codepoint can't appear in Ren-C strings (only binaries), it hasn't gotten a lot of use.  Any routine that deals in codepoints can use regular NULL when dealing with situations where there's no codepoint.</p>
<p><strong><code>#</code></strong> is a bit heftier than <strong><code>_</code></strong> but I've perhaps been too harsh about it:</p>
<pre><code>&gt;&gt; print unspaced ["Have I been" # # # "too harsh?"]
Have I been   too harsh?
</code></pre>
<p>Admittedly, it doesn't look particularly "space-like".  But is <strong><code>#" "</code></strong> an improvement?</p>
<h2><a name="p-7706-as-space-feels-pretty-obvious-right-now-1" class="anchor" href="https://forum.rebol.info#p-7706-as-space-feels-pretty-obvious-right-now-1"></a><code>#</code> As Space Feels Pretty Obvious Right Now</h2>
<p>I'll mention that one of the motivations for making # the NUL character was because it was used for a time as the "canon truthy value" (e.g. the value of an argless refinement when used, in juxtaposition to the <code>~null~</code> antiform).  I wanted as few possible accidents by having that value accepted somewhere that didn't mean it, and the lame reason I made it NUL was just to stop a few cases...like appending to strings.</p>
<p><em>So it was intentionally useless.</em>  <img src="https://forum.rebol.info/images/emoji/twitter/face_with_diagonal_mouth.png?v=12" title=":face_with_diagonal_mouth:" class="emoji" alt=":face_with_diagonal_mouth:" loading="lazy" width="20" height="20"></p>
<p>The <code>~okay~</code> antiform does a much better job at that <em>useless-except-branch-triggering</em> role.</p>
<h2><a name="p-7706-so-now-what-about-blank-2" class="anchor" href="https://forum.rebol.info#p-7706-so-now-what-about-blank-2"></a>So Now, What About BLANK! ?</h2>
<p>If we let go of the dream that <strong><code>_</code></strong> represents space--and I make peace with the idea that people can learn that <strong><code>#</code></strong> means space--then it frees up underscore's meaning.</p>
<p>I'll mention that I've noticed a lot of single characters can stand on their own now:</p>
<pre><code>symbols: [
    ? ~ * + - = &lt; &gt; | : / .   ; words
    $ &amp; ' ^ @                 ; sigils (maybe % will be, also?)
    #                         ; now a space...issue (token?) 
    ~                         ; quasi-blank (trash)
    _                         ; blank
]
</code></pre>
<p>Of course there's some you can't do this with (brackets, parentheses, braces).  And comma acts weird enough sticking to what's on its left that you probably don't want to do this unless you're quoting it (<strong><code>',</code></strong>) where it won't have that behavior.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2287">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It feels like a decent fit to say that appending a blank to a string is additive...since VOID and such are available if you want to opt out:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; append "ab" _
== "ab "
</code></pre>
</blockquote>
</aside>
<p>I'm really on the fence here, enough so to say that I'm starting to think this just has to be an error.</p>
<p>If it <em>did</em> work, I think it does have to be additive...because APPEND to a BLOCK! of a blank is additive.  I don't think it can act like an empty string when appending to a string, but append a thing to a block...that makes no sense.</p>
<p>So if you can do this:</p>
<pre><code>&gt;&gt; append "ab" first [+]
== "ab+"
</code></pre>
<p>Then I kind of think that blank's underscore-ness is what we defer to here:</p>
<pre><code>&gt;&gt; append "ab" first [_]
== "ab_"
</code></pre>
<p>But I'm not convinced this is helping anyone.</p>
<p>HOWEVER, I do think it should be what it FORMs to.</p>
<pre><code>&gt;&gt; form _
== "_"
</code></pre>
<p><em>(I have some Big Thought on the meaning of FORM, which I'll write up at some point here.)</em></p>
          <p><a href="https://forum.rebol.info/t/how-does-blank-interact-with-strings/2287/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-does-blank-interact-with-strings/2287/2</link>
        <pubDate>Fri, 20 Sep 2024 06:34:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2287-2</guid>
        <source url="https://forum.rebol.info/t/how-does-blank-interact-with-strings/2287.rss">How Does BLANK! Interact With Strings?</source>
      </item>
      <item>
        <title>How Does BLANK! Interact With Strings?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Experiments have run the gamut to where a plain BLANK! once would opt out of appending to a series, and you had to quote it to append it:</p>
<pre><code>experiment&gt;&gt; append [a b] _
= [a b]

experiment&gt;&gt; append [a b] quote _
== [a b _]
</code></pre>
<p>But the satisfying world we have now is that anything you can pick out of a block will append as-is to another block.  So adding a blank is additive:</p>
<pre><code>&gt;&gt; append [a b] _
== [a b _]
</code></pre>
<p>It feels like a decent fit to say that appending a blank to a string is additive...since VOID and such are available if you want to opt out:</p>
<pre><code>&gt;&gt; append "ab" _
== "ab "
</code></pre>
<p>Though it raises the question of what BINARY! should do:</p>
<pre><code>&gt;&gt; append #{0102} _
== ???
</code></pre>
<p>It seems that adding a UTF-8 representation is the story for ASCII:</p>
<pre><code>&gt;&gt; as binary! "AB"
== #{4142}

&gt;&gt; append #{0102} "AB"
= #{01024142}
</code></pre>
<p>But when it comes to integers, strings append the molded form...while binaries just add one byte, not the bytes of the formed string of the integer:</p>
<pre><code>&gt;&gt; append "ab" 10
== "ab10"

&gt;&gt; append #{0102} 10
== #{01020A}
</code></pre>
<p>A bit of a mixed bag, that could support arguments that BLANK! could be "the space of binaries" (e.g. #{00})</p>
<pre><code>&gt;&gt; append #{0102} _
== #{010200}
</code></pre>
<p>But I think that's not so useful.  It's more likely that the character representation of space is useful:</p>
<pre><code>&gt;&gt; to binary! #" "
== #{20}

&gt;&gt; append #{0102} _
== #{010220}
</code></pre>
<p>Ren-C FIND and PARSE mechanics already allows you to search for strings in BINARY!, implicitly looking for the UTF-8 representation.</p>
<h2>
<a name="what-if-_-was-really-the-canon-representation-of-space-chars-1" class="anchor" href="https://forum.rebol.info#what-if-_-was-really-the-canon-representation-of-space-chars-1"></a>What If _ Was Really The Canon Representation of Space Chars?</h2>
<pre><code>&gt;&gt; pick "ab " 3
== _

&gt;&gt; #" "
== _

&gt;&gt; char? _
== ~true~  ; isotope

&gt;&gt; space? _
== ~true~  ; isotope
</code></pre>
<p>I've mentioned that single character intents are on the rise... we could call quoted void (apostrophe) "blank" and it could be used in contexts where you want to say there's no value:</p>
<pre><code>&gt;&gt; blank? first [']
== ~true~  ; isotope

&gt;&gt; blank
== '
</code></pre>
<p>You'd still have _ as an evaluator-inert dialecting part that can't be redefined.  You just would need to use something like <strong>#</strong> or <strong>'</strong> or <strong>~</strong> in cases where you had a slot that could be either any character -or- some out of band thing.</p>
<p>Off the top of my head, I can see a few problems.  If _ became a character literal, it shouldn't be used for vacant spots in paths.  So let's say paths start using this "new blank":</p>
<pre><code>&gt;&gt; as block! first [/a]
== [' a]
</code></pre>
<p>Doesn't look too bad, but if you want to parse it you need double apostrophes to match those spots:</p>
<pre><code>parse [/a] [into path! ['' 'a]]
</code></pre>
<p>This is because a single apostrophe is matched as void, e.g. matches without advancing the parse position.  <a href="https://forum.rebol.info/t/parse-behavior-for-words-that-lookup-to-quoted/2038">And it wouldn't work if you used a word to reference the blank</a>:</p>
<pre><code>&gt;&gt; parse [/a] [into path! [blank 'a]]
** Error: To match a QUOTED! you must use @blank

&gt;&gt; parse [/a] [into path! [@blank 'a]]  ; would need to do this...
== a
</code></pre>
<p>But it's not awful, and at least it doesn't silently treat the quote as a vanishing rule.</p>
<p><strong>It's still kind of an interesting thought to make _ the literal char! of space.</strong>  Still inert, still usable in dialects.  It would leave <strong><code>'</code></strong> and <strong><code>~</code></strong> as "friendly nothing" and "unfriendly nothing".</p>
<pre><code>&gt;&gt; spread first [']  ; would return void

&gt;&gt; spread first [~]
** Error: Cannot spread meta-NONE
</code></pre>
<p>Either way, I think the conclusion here is that <strong>append #{0102} _</strong> should be <strong>#{010220}</strong></p>
          <p><a href="https://forum.rebol.info/t/how-does-blank-interact-with-strings/2287/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-does-blank-interact-with-strings/2287/1</link>
        <pubDate>Mon, 26 Jun 2023 17:39:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2287-1</guid>
        <source url="https://forum.rebol.info/t/how-does-blank-interact-with-strings/2287.rss">How Does BLANK! Interact With Strings?</source>
      </item>
  </channel>
</rss>
