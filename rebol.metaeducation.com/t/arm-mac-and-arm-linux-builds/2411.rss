<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ARM Mac and ARM Linux Builds</title>
    <link>https://rebol.metaeducation.com/t/arm-mac-and-arm-linux-builds/2411</link>
    <description>I wasn&#39;t looking forward to trying to remote-debug the builds on mac by building them on GitHub containers, downloading the artifacts, pushing to GitHub and repeating again.

So I caved and bought a Macbook Air.

I hacked together a makefile that could build the bootstrap executable, but then I went through the labor of figuring out how to get a legitimate build... with warnings turned up to errors... on Clang under zsh on Mac.

And today I got that to work.

![macrebol|690x275, 75%](upload://wB2hGVKa8jK7kEBclgsAknBHY19.jpeg)

## `&lt;gcc:XXX&gt;` vs `&lt;gnu:XXX&gt;` vs **`&lt;clang:XXX&gt;`**

One of the design ideas Shixin had for Rebmake was that you could specity compiler flags and such either literally as a string, or you could make them conditional by making them tags.

So if you had a file and you wanted to say disable errors pertaining to sign comparison, you might put your file in the files list as:

    [%some-file.c &lt;gcc:-Wno-sign-compare&gt; &lt;msc:/wd4388&gt;]

Then what would happen is that if you were building with gcc you&#39;d get the compiler switch `-Wno-sign-compare` but if you were building with Microsoft CL you&#39;d get `/wd4388` (warning-disable)

This was a pretty good idea, but the problem is that while Clang and GCC share many warnings in common, there are exceptions.

So I subdivided it so that flags which are common to both are `&lt;gcc:XXX&gt;`.  This makes sense given that Clang came after gcc, and adopted their warning lists to begin with.

Then GCC-specific flags are `&lt;gnu:XXX&gt;` and Clang-specific flags are `&lt;clang:XXX&gt;`

## Eliminating Separate Compiler / Linker Abstractions

To make a long story short: in the C world, there are &quot;compiler front ends&quot; and you typically can get away with using the program that does the compiling (e.g. GCC) to delegate to the linker (e.g. LD) to do the linking for you.  In fact: you typically *don&#39;t* want to call the linker explicitly, because there&#39;s a bunch of fiddly stuff the front end figures out for you.

But Rebmake had the idea of trying to call linkers explicitly, and decoupling the linker from the compiler.  This led to repeated work--and things like having to know the minor nuances of how GCC&#39;s LD was different from LLVM-LINK.

I just wiped that code out and gave the compiler abstraction LINK and COMPILE methods, and reduced the number of moving parts considerably.  This was part of making it easier to pare down things to really let the clang vs. gcc share as much code in common as possible, while still differentiating which tags held compiler switches that applied to them.

## Rebmake Gets Less Beastly Every Time...

I&#39;ve always dreaded having to mess with Rebmake.  But I have already credited it with being a huge source of inspiration on how to make the language less inscrutable.  Necessity was the mother of invention, and all the hardships of Rebmake helped make Ren-C better.

Anyway, hacking on it to get it to cleanly support the M4 / zsh / Clang builds led to some improvemnet.  And I think that as string interpolation and other features make their way into it, there might be some light at the end of the Rebmake tunnel...</description>
    
    <lastBuildDate>Sat, 12 Apr 2025 10:33:23 +0000</lastBuildDate>
    <category>Build System</category>
    <atom:link href="https://rebol.metaeducation.com/t/arm-mac-and-arm-linux-builds/2411.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ARM Mac and ARM Linux Builds</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I wasn't looking forward to trying to remote-debug the builds on mac by building them on GitHub containers, downloading the artifacts, pushing to GitHub and repeating again.</p>
<p>So I caved and bought a Macbook Air.</p>
<p>I hacked together a makefile that could build the bootstrap executable, but then I went through the labor of figuring out how to get a legitimate build... with warnings turned up to errors... on Clang under zsh on Mac.</p>
<p>And today I got that to work.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://rebol.metaeducation.com/uploads/default/original/1X/e47559b4a4d9d7a362760df3f101742e6fb6bb4f.jpeg" data-download-href="https://rebol.metaeducation.com/uploads/default/e47559b4a4d9d7a362760df3f101742e6fb6bb4f" title="macrebol"><img src="https://rebol.metaeducation.com/uploads/default/optimized/1X/e47559b4a4d9d7a362760df3f101742e6fb6bb4f_2_517x206.jpeg" alt="macrebol" data-base62-sha1="wB2hGVKa8jK7kEBclgsAknBHY19" width="517" height="206" srcset="https://rebol.metaeducation.com/uploads/default/optimized/1X/e47559b4a4d9d7a362760df3f101742e6fb6bb4f_2_517x206.jpeg, https://rebol.metaeducation.com/uploads/default/optimized/1X/e47559b4a4d9d7a362760df3f101742e6fb6bb4f_2_775x309.jpeg 1.5x, https://rebol.metaeducation.com/uploads/default/optimized/1X/e47559b4a4d9d7a362760df3f101742e6fb6bb4f_2_1034x412.jpeg 2x" data-dominant-color="1F2329"></a></div><p></p>
<h2><a name="p-8138-gccxxx-vs-gnuxxx-vs-clangxxx-1" class="anchor" href="https://rebol.metaeducation.com#p-8138-gccxxx-vs-gnuxxx-vs-clangxxx-1"></a><code>&lt;gcc:XXX&gt;</code> vs <code>&lt;gnu:XXX&gt;</code> vs <strong><code>&lt;clang:XXX&gt;</code></strong></h2>
<p>One of the design ideas Shixin had for Rebmake was that you could specity compiler flags and such either literally as a string, or you could make them conditional by making them tags.</p>
<p>So if you had a file and you wanted to say disable errors pertaining to sign comparison, you might put your file in the files list as:</p>
<pre><code>[%some-file.c &lt;gcc:-Wno-sign-compare&gt; &lt;msc:/wd4388&gt;]
</code></pre>
<p>Then what would happen is that if you were building with gcc you'd get the compiler switch <code>-Wno-sign-compare</code> but if you were building with Microsoft CL you'd get <code>/wd4388</code> (warning-disable)</p>
<p>This was a pretty good idea, but the problem is that while Clang and GCC share many warnings in common, there are exceptions.</p>
<p>So I subdivided it so that flags which are common to both are <code>&lt;gcc:XXX&gt;</code>.  This makes sense given that Clang came after gcc, and adopted their warning lists to begin with.</p>
<p>Then GCC-specific flags are <code>&lt;gnu:XXX&gt;</code> and Clang-specific flags are <code>&lt;clang:XXX&gt;</code></p>
<h2><a name="p-8138-eliminating-separate-compiler-linker-abstractions-2" class="anchor" href="https://rebol.metaeducation.com#p-8138-eliminating-separate-compiler-linker-abstractions-2"></a>Eliminating Separate Compiler / Linker Abstractions</h2>
<p>To make a long story short: in the C world, there are "compiler front ends" and you typically can get away with using the program that does the compiling (e.g. GCC) to delegate to the linker (e.g. LD) to do the linking for you.  In fact: you typically <em>don't</em> want to call the linker explicitly, because there's a bunch of fiddly stuff the front end figures out for you.</p>
<p>But Rebmake had the idea of trying to call linkers explicitly, and decoupling the linker from the compiler.  This led to repeated work--and things like having to know the minor nuances of how GCC's LD was different from LLVM-LINK.</p>
<p>I just wiped that code out and gave the compiler abstraction LINK and COMPILE methods, and reduced the number of moving parts considerably.  This was part of making it easier to pare down things to really let the clang vs. gcc share as much code in common as possible, while still differentiating which tags held compiler switches that applied to them.</p>
<h2><a name="p-8138-rebmake-gets-less-beastly-every-time-3" class="anchor" href="https://rebol.metaeducation.com#p-8138-rebmake-gets-less-beastly-every-time-3"></a>Rebmake Gets Less Beastly Every Time...</h2>
<p>I've always dreaded having to mess with Rebmake.  But I have already credited it with being a huge source of inspiration on how to make the language less inscrutable.  Necessity was the mother of invention, and all the hardships of Rebmake helped make Ren-C better.</p>
<p>Anyway, hacking on it to get it to cleanly support the M4 / zsh / Clang builds led to some improvemnet.  And I think that as string interpolation and other features make their way into it, there might be some light at the end of the Rebmake tunnel...</p>
          <p><a href="https://rebol.metaeducation.com/t/arm-mac-and-arm-linux-builds/2411/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/arm-mac-and-arm-linux-builds/2411/1</link>
        <pubDate>Sat, 12 Apr 2025 10:33:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2411-1</guid>
        <source url="https://rebol.metaeducation.com/t/arm-mac-and-arm-linux-builds/2411.rss">ARM Mac and ARM Linux Builds</source>
      </item>
  </channel>
</rss>
