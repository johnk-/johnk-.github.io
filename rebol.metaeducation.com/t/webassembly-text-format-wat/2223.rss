<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>WebAssembly Text Format (.WAT)</title>
    <link>https://rebol.metaeducation.com/t/webassembly-text-format-wat/2223</link>
    <description>So I&#39;ve been thinking about making a JS-NATIVE variant which makes it so you can write WebAssembly directly as the body of a function.

Looking at the **[WebAssembly Text Format](https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format)**, it seems Ren-C is rather well-geared to be able to just LOAD it.

```
(module
  (table 2 funcref)
  (func $f1 (result i32)
    i32.const 42)
  (func $f2 (result i32)
    i32.const 13)
  (elem (i32.const 0) $f1 $f2)
  (type $return_i32 (func (result i32)))
  (func (export &quot;callByIndex&quot;) (param $i i32) (result i32)
    local.get $i
    call_indirect (type $return_i32))
)
```

It&#39;s cool to be able to have that &quot;just work&quot; and wind up with a code format that you can manipulate, compose, process, analyze... all using mechanisms that are a sunk cost.

Historical Rebol didn&#39;t have **`$var-words`** and **`tu.ple`** (Redbol allows dots in names, so something like **`i32.const`** would be legal, but you&#39;d have no particular conveniences to pick it apart.

[Here&#39;s the full grammar.](https://github.com/WebAssembly/spec/blob/master/interpreter/README.md#s-expression-syntax)

I&#39;ve seen some examples [where the symbols have more embedded $ signs, like **`$FUNCSIG$ii`**](https://medium.com/ax1al/learning-and-trying-to-reverse-web-assembly-for-fun-da98fdf962e8):

    (module
     (type $FUNCSIG$ii (func (param i32) (result i32)))
     (import &quot;env&quot; &quot;puts&quot; (func $puts (param i32) (result i32)))
     (table 0 anyfunc)
     (memory $0 1)
     (data (i32.const 16) &quot;Hello World\00&quot;)
    ..........further text....
    ..........

It occurs to me that we can allow this--kind of like how we allow embedded apostrophes--or apostrophes at the tail of words. 

    &gt;&gt; word: first [f$]
    == f$

    &gt;&gt; word? word
    == ~true~  ; anti

    &gt;&gt; to var-word! word
    == $f$

It&#39;s ugly but if it doesn&#39;t create any mechanical paradoxes or contradictions.

What can&#39;t be legal is things like **`$`** or **`$$`** as a WORD!, because you start down a rabbit hole of asking if **`$$`** is its own WORD! or the VAR-WORD! variation of **`$`**.  So you can&#39;t have a leading $ followed by another $.  But other limits are arbitrary...and here&#39;s a reason to allow them.</description>
    
    <lastBuildDate>Fri, 13 Jun 2025 16:17:16 +0000</lastBuildDate>
    <category>WASM</category>
    <atom:link href="https://rebol.metaeducation.com/t/webassembly-text-format-wat/2223.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>WebAssembly Text Format (.WAT)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>WebAssembly uses semicolons for comments, so it really is darn near loadable.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2223">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><code> (memory $0 1)</code></p>
</blockquote>
</aside>
<p>We now have <code>$0</code> as legal under a different type, which is a "Tied Integer" and not a MONEY!.</p>
<p>But in WebAssembly this is an identifier, and it can be anything like $0Q.</p>
<blockquote>
<p>In WebAssembly text format (WAT), a legal identifier (name) starts with a <code>$</code> and can be followed by any sequence of <strong>UTF-8 characters except whitespace, delimiters, or comment characters</strong>.</p>
<p><strong>Common valid characters:</strong></p>
<ul>
<li>Letters (<code>a-z</code>, <code>A-Z</code>)</li>
<li>Digits (<code>0-9</code>)</li>
<li>Underscore (<code>_</code>)</li>
<li>Hyphen (<code>-</code>)</li>
<li>Most Unicode characters</li>
</ul>
<p><strong>Invalid characters:</strong></p>
<ul>
<li>Whitespace (space, tab, newline)</li>
<li>Parentheses: <code>(</code>, <code>)</code></li>
<li>Semicolon (<code>;</code>)</li>
<li>Double quote (<code>"</code>)</li>
<li>Comment start (<code>;;</code> or <code>(;</code>)</li>
</ul>
<p><strong>Examples of valid identifiers:</strong></p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">$foo
$bar_123
$αβγ
$my-var
</code></pre>
<p><strong>Examples of invalid identifiers:</strong></p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">$foo bar   ; contains space
$foo)      ; contains parenthesis
$foo;      ; contains semicolon
</code></pre>
<p><strong>Reference:</strong><br>
<a href="https://webassembly.github.io/spec/core/text/lexical.html#text-id">WebAssembly spec: Names</a></p>
</blockquote>
<p>WebAssembly also has weird things like:</p>
<pre><code>(f32.const -0x0p+0)
</code></pre>
<p>You can get ugly FUSED! things out of that, or hex denoted like <code>0x10DECAFBAD20</code>, which don't make any real sense but you don't have to make sense.  Just turn the FUSED! into a TEXT! and process it.  (Or TO BINARY!, and if you give TO BINARY! a fused it will see what it can do for you.)</p>
<p>FUSED! seems like a compromise for those who wanted non-LOADable things to load as some mystery thing to decode (what Geomol called KWATZ!).  How it breaks into parts may or may not be meaningful.  If it's meaningful, great--leverage that.  If it's not, convert it and process what you convert it to.</p>
          <p><a href="https://rebol.metaeducation.com/t/webassembly-text-format-wat/2223/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/webassembly-text-format-wat/2223/2</link>
        <pubDate>Mon, 02 Sep 2024 00:06:54 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2223-2</guid>
        <source url="https://rebol.metaeducation.com/t/webassembly-text-format-wat/2223.rss">WebAssembly Text Format (.WAT)</source>
      </item>
      <item>
        <title>WebAssembly Text Format (.WAT)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I've been thinking about making a JS-NATIVE variant which makes it so you can write WebAssembly directly as the body of a function.</p>
<p>Looking at the <strong><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format">WebAssembly Text Format</a></strong>, it seems Ren-C is rather well-geared to be able to just LOAD it.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">(module
  (table 2 funcref)
  (func $f1 (result i32)
    i32.const 42)
  (func $f2 (result i32)
    i32.const 13)
  (elem (i32.const 0) $f1 $f2)
  (type $return_i32 (func (result i32)))
  (func (export "callByIndex") (param $i i32) (result i32)
    local.get $i
    call_indirect (type $return_i32))
)
</code></pre>
<p>It's cool to be able to have that "just work" and wind up with a code format that you can manipulate, compose, process, analyze... all using mechanisms that are a sunk cost.</p>
<p>Historical Rebol didn't have <strong><code>$var-words</code></strong> and <strong><code>tu.ple</code></strong> (Redbol allows dots in names, so something like <strong><code>i32.const</code></strong> would be legal, but you'd have no particular conveniences to pick it apart.</p>
<p><a href="https://github.com/WebAssembly/spec/blob/master/interpreter/README.md#s-expression-syntax">Here's the full grammar.</a></p>
<p>I've seen some examples <a href="https://medium.com/ax1al/learning-and-trying-to-reverse-web-assembly-for-fun-da98fdf962e8">where the symbols have more embedded $ signs, like <strong><code>$FUNCSIG$ii</code></strong></a>:</p>
<pre><code>(module
 (type $FUNCSIG$ii (func (param i32) (result i32)))
 (import "env" "puts" (func $puts (param i32) (result i32)))
 (table 0 anyfunc)
 (memory $0 1)
 (data (i32.const 16) "Hello World\00")
..........further text....
..........
</code></pre>
<p>It occurs to me that we can allow this--kind of like how we allow embedded apostrophes--or apostrophes at the tail of words.</p>
<pre><code>&gt;&gt; word: first [f$]
== f$

&gt;&gt; word? word
== ~true~  ; anti

&gt;&gt; to var-word! word
== $f$
</code></pre>
<p>It's ugly but if it doesn't create any mechanical paradoxes or contradictions.</p>
<p>What can't be legal is things like <strong><code>$</code></strong> or <strong><code>$$</code></strong> as a WORD!, because you start down a rabbit hole of asking if <strong><code>$$</code></strong> is its own WORD! or the VAR-WORD! variation of <strong><code>$</code></strong>.  So you can't have a leading $ followed by another $.  But other limits are arbitrary...and here's a reason to allow them.</p>
          <p><a href="https://rebol.metaeducation.com/t/webassembly-text-format-wat/2223/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/webassembly-text-format-wat/2223/1</link>
        <pubDate>Tue, 27 Aug 2024 13:27:52 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2223-1</guid>
        <source url="https://rebol.metaeducation.com/t/webassembly-text-format-wat/2223.rss">WebAssembly Text Format (.WAT)</source>
      </item>
  </channel>
</rss>
