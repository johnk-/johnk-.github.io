<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dropping RC4 Support from the Crypto Extension</title>
    <link>https://rebol.metaeducation.com/t/dropping-rc4-support-from-the-crypto-extension/1807</link>
    <description>I pretty sure no one out there is using it, but the RC4 cipher has been deprecated for a pretty long time now.  Per Wikipedia:

&gt; In [cryptography](https://en.wikipedia.org/wiki/Cryptography), **RC4** (Rivest Cipher 4 also known as **ARC4** or **ARCFOUR** meaning Alleged RC4, see below) is a [stream cipher](https://en.wikipedia.org/wiki/Stream_cipher). While it is remarkable for its simplicity and speed in software, multiple vulnerabilities have been discovered in RC4, rendering it insecure.

The insecurity of RC4 led the IETF to [prohibit RC4 for TLS use in 2015](https://tools.ietf.org/html/rfc7465)

However, the original cryptography code (mostly from AxTLS) had an RC4 function, and it was in mbedTLS 2.  So I went ahead and kept it working.

It is now dropped from mbedTLS 3.  So in the scheme of things, time to let it go.

## Code Being Dropped

The files arc4.h and arc4.c from mbedTLS are now gone, and this was the crypt module code for supporting it:

    static void cleanup_rc4_ctx(const REBVAL *v)
    {
        struct mbedtls_arc4_context *ctx
            = VAL_HANDLE_POINTER(struct mbedtls_arc4_context, v);
        mbedtls_arc4_free(ctx);
        FREE(struct mbedtls_arc4_context, ctx);
    }


    //
    //  export rc4-key: native [
    //
    //  &quot;Encrypt/decrypt data (modifies) using RC4 algorithm.&quot;
    //
    //      return: [handle!]
    //      key [binary!]
    //  ]
    //
    REBNATIVE(rc4_key)
    //
    // !!! RC4 was originally included for use with TLS.  However, the insecurity
    // of RC4 led the IETF to prohibit RC4 for TLS use in 2015:
    //
    // https://tools.ietf.org/html/rfc7465
    //
    // So it is not in use at the moment.  It isn&#39;t much code, but could probably
    // be moved to its own extension so it could be selected to build in or not,
    // which is how cryptography methods should probably be done.
    {
        CRYPT_INCLUDE_PARAMS_OF_RC4_KEY;

        struct mbedtls_arc4_context *ctx = TRY_ALLOC(struct mbedtls_arc4_context);
        mbedtls_arc4_init(ctx);

        REBSIZ key_len;
        const REBYTE *key = VAL_BINARY_SIZE_AT(&amp;key_len, ARG(key));
        mbedtls_arc4_setup(ctx, key, key_len);

        return Init_Handle_Cdata_Managed(
            D_OUT,
            ctx,
            sizeof(struct mbedtls_arc4_context),
            &amp;cleanup_rc4_ctx
        );
    }


    //
    //  export rc4-stream: native [
    //
    //  &quot;Encrypt/decrypt data (modifies) using RC4 algorithm.&quot;
    //
    //      return: &lt;none&gt;
    //      ctx &quot;Stream cipher context&quot;
    //          [handle!]
    //      data &quot;Data to encrypt/decrypt (modified)&quot;
    //          [binary!]
    //  ]
    //
    REBNATIVE(rc4_stream)
    {
        CRYPT_INCLUDE_PARAMS_OF_RC4_STREAM;

        REBVAL *data = ARG(data);

        if (VAL_HANDLE_CLEANER(ARG(ctx)) != cleanup_rc4_ctx)
            rebJumps (&quot;fail [{Not a RC4 Context:}&quot;, ARG(ctx), &quot;]&quot;);

        struct mbedtls_arc4_context *ctx
            = VAL_HANDLE_POINTER(struct mbedtls_arc4_context, ARG(ctx));

        REBVAL *error = nullptr;

        REBSIZ length;
        REBYTE *output = VAL_BINARY_SIZE_AT_ENSURE_MUTABLE(&amp;length, data);
        const REBYTE *input = output;
        IF_NOT_0(cleanup, error, mbedtls_arc4_crypt(
            ctx,
            length,
            input,  // input &quot;message&quot;
            output  // output (same, since it modifies)
        ));

      cleanup:
         if (error)
            rebJumps (&quot;fail&quot;, error);

        return rebNone();
    }

...and here is the very basic test, also being removed...

    ctx: rc4-key as binary! &quot;Deprecated Algorithm&quot;
    data: as binary! &quot;But Implemented Anyway&quot;
    rc4-stream ctx data
    data = #{0C4E2F3BD157EA7214C33F280BE4D9DF1DFB580563A6}</description>
    
    <lastBuildDate>Mon, 09 May 2022 16:36:30 +0000</lastBuildDate>
    <category>Cryptography</category>
    <atom:link href="https://rebol.metaeducation.com/t/dropping-rc4-support-from-the-crypto-extension/1807.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dropping RC4 Support from the Crypto Extension</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I pretty sure no one out there is using it, but the RC4 cipher has been deprecated for a pretty long time now.  Per Wikipedia:</p>
<blockquote>
<p>In <a href="https://en.wikipedia.org/wiki/Cryptography">cryptography</a>, <strong>RC4</strong> (Rivest Cipher 4 also known as <strong>ARC4</strong> or <strong>ARCFOUR</strong> meaning Alleged RC4, see below) is a <a href="https://en.wikipedia.org/wiki/Stream_cipher">stream cipher</a>. While it is remarkable for its simplicity and speed in software, multiple vulnerabilities have been discovered in RC4, rendering it insecure.</p>
</blockquote>
<p>The insecurity of RC4 led the IETF to <a href="https://tools.ietf.org/html/rfc7465">prohibit RC4 for TLS use in 2015</a></p>
<p>However, the original cryptography code (mostly from AxTLS) had an RC4 function, and it was in mbedTLS 2.  So I went ahead and kept it working.</p>
<p>It is now dropped from mbedTLS 3.  So in the scheme of things, time to let it go.</p>
<h2><a name="p-5820-code-being-dropped-1" class="anchor" href="https://rebol.metaeducation.com#p-5820-code-being-dropped-1"></a>Code Being Dropped</h2>
<p>The files arc4.h and arc4.c from mbedTLS are now gone, and this was the crypt module code for supporting it:</p>
<pre><code>static void cleanup_rc4_ctx(const REBVAL *v)
{
    struct mbedtls_arc4_context *ctx
        = VAL_HANDLE_POINTER(struct mbedtls_arc4_context, v);
    mbedtls_arc4_free(ctx);
    FREE(struct mbedtls_arc4_context, ctx);
}


//
//  export rc4-key: native [
//
//  "Encrypt/decrypt data (modifies) using RC4 algorithm."
//
//      return: [handle!]
//      key [binary!]
//  ]
//
REBNATIVE(rc4_key)
//
// !!! RC4 was originally included for use with TLS.  However, the insecurity
// of RC4 led the IETF to prohibit RC4 for TLS use in 2015:
//
// https://tools.ietf.org/html/rfc7465
//
// So it is not in use at the moment.  It isn't much code, but could probably
// be moved to its own extension so it could be selected to build in or not,
// which is how cryptography methods should probably be done.
{
    CRYPT_INCLUDE_PARAMS_OF_RC4_KEY;

    struct mbedtls_arc4_context *ctx = TRY_ALLOC(struct mbedtls_arc4_context);
    mbedtls_arc4_init(ctx);

    REBSIZ key_len;
    const REBYTE *key = VAL_BINARY_SIZE_AT(&amp;key_len, ARG(key));
    mbedtls_arc4_setup(ctx, key, key_len);

    return Init_Handle_Cdata_Managed(
        D_OUT,
        ctx,
        sizeof(struct mbedtls_arc4_context),
        &amp;cleanup_rc4_ctx
    );
}


//
//  export rc4-stream: native [
//
//  "Encrypt/decrypt data (modifies) using RC4 algorithm."
//
//      return: &lt;none&gt;
//      ctx "Stream cipher context"
//          [handle!]
//      data "Data to encrypt/decrypt (modified)"
//          [binary!]
//  ]
//
REBNATIVE(rc4_stream)
{
    CRYPT_INCLUDE_PARAMS_OF_RC4_STREAM;

    REBVAL *data = ARG(data);

    if (VAL_HANDLE_CLEANER(ARG(ctx)) != cleanup_rc4_ctx)
        rebJumps ("fail [{Not a RC4 Context:}", ARG(ctx), "]");

    struct mbedtls_arc4_context *ctx
        = VAL_HANDLE_POINTER(struct mbedtls_arc4_context, ARG(ctx));

    REBVAL *error = nullptr;

    REBSIZ length;
    REBYTE *output = VAL_BINARY_SIZE_AT_ENSURE_MUTABLE(&amp;length, data);
    const REBYTE *input = output;
    IF_NOT_0(cleanup, error, mbedtls_arc4_crypt(
        ctx,
        length,
        input,  // input "message"
        output  // output (same, since it modifies)
    ));

  cleanup:
     if (error)
        rebJumps ("fail", error);

    return rebNone();
}
</code></pre>
<p>...and here is the very basic test, also being removed...</p>
<pre><code>ctx: rc4-key as binary! "Deprecated Algorithm"
data: as binary! "But Implemented Anyway"
rc4-stream ctx data
data = #{0C4E2F3BD157EA7214C33F280BE4D9DF1DFB580563A6}
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/dropping-rc4-support-from-the-crypto-extension/1807/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/dropping-rc4-support-from-the-crypto-extension/1807/1</link>
        <pubDate>Mon, 09 May 2022 01:32:56 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1807-1</guid>
        <source url="https://rebol.metaeducation.com/t/dropping-rc4-support-from-the-crypto-extension/1807.rss">Dropping RC4 Support from the Crypto Extension</source>
      </item>
  </channel>
</rss>
