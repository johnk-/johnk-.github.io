<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>COMPOSE of TUPLE! and PATH! (and toplevel GROUP!)</title>
    <link>https://rebol.metaeducation.com/t/compose-of-tuple-and-path-and-toplevel-group/2056</link>
    <description>While working on @BlackATTR&#39;s query, I noticed code that was making paths (now tuples) out of components via TO TUPLE! COMPOSE of a BLOCK!.  Like this:

    to tuple! compose [obj clauses (kwd.1)]

But did you know that COMPOSE can act directly on TUPLE! and PATH!  You could instead just write:

    compose $obj.clauses.(kwd.1)

It supports splices as well:

    &gt;&gt; compose $(10 + 20)/a/b/(spread [c d e])/(reverse [g f])
    == 30/a/b/c/d/e/[f g]

And if you remember that TUPLE! can be nested underneath PATH! (not vice versa) then you can COMPOSE/DEEP and handle mixed tuples and paths:

    &gt;&gt; compose/deep $(10 + 20)/a/b.(spread [c d e])
    == 30/a/b.c.d.e

Voids can vanish...so there can be fewer dots in an output tuple than in the input:

    &gt;&gt; compose $a.(if false [b]).c
    == a.c

Empty splices will vanish as well:

    &gt;&gt; compose $a.(spread []).c
    == a.c

You can&#39;t compose in NULLs as an important safety measure...central to the design!

    &gt;&gt; compose $a.(select [x 10 y 20] &#39;b).c
    ** Script Error: non-NULL value required (see MAYBE, TRY, REIFY)
    ** Near: [a ** (select [x 10 y 20] &#39;b) c]

But don&#39;t forget about MAYBE as the way to convert nulls to void when that&#39;s what you meant!

    &gt;&gt; compose $a.(maybe select [x 10 y 20] &#39;b).c
    == a.c

## You can also COMPOSE a GROUP!

In R3-Alpha, only BLOCK! would compose.  Everything else was passed-through as-is, including GROUP!s (PAREN!s in their terminology)

    r3-alpha&gt;&gt; compose quote (1 + (2 + 3))  ; R3-alpha QUOTE (modern THE)
    == (1 + (2 + 3))

Red just doesn&#39;t allow it:

    red&gt;&gt; compose quote (1 + (2 + 3))   ; Red QUOTE (modern THE)
    *** Script Error: compose does not allow paren! for its value argument

So you&#39;d wind up having to make BLOCK!s and then convert them:

    red&gt;&gt; as paren! compose [1 + (2 + 3)]
    == (1 + 5)

But in Ren-C, group composing works... it just leaves the top group as-is.

    &gt;&gt; compose $(1 + (2 + 3))
    == (1 + 5)</description>
    
    <lastBuildDate>Tue, 01 Oct 2024 14:27:24 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://rebol.metaeducation.com/t/compose-of-tuple-and-path-and-toplevel-group/2056.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>COMPOSE of TUPLE! and PATH! (and toplevel GROUP!)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With changes to things like SET-GROUP <a href="https://rebol.metaeducation.com/t/introducingnew-chain-datatype/2226">becoming a CHAIN!</a>, we now have a situation where we are getting this behavior:</p>
<pre><code>&gt;&gt; var: $x

&gt;&gt; compose [(var): 10]
== [(var): 10]  ; hm, no substitution?
</code></pre>
<p>So this would see the <strong><code>(var): 10</code></strong> as a subsequence and require <strong><code>:DEEP</code></strong>.</p>
<p><em>But I don't think DEEP should be necessary for this.</em>  So I imagine that sequences are considered to be part of the same level for the purposes of COMPOSE'ing.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2056">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>And if you remember that TUPLE! can be nested underneath PATH! (not vice versa) then you can COMPOSE/DEEP and handle mixed tuples and paths:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; compose/deep $(10 + 20)/a/b.(spread [c d e])
== 30/a/b.c.d.e
</code></pre>
</blockquote>
</aside>
<p>By that rule, I would imagine this would not require DEEP either.</p>
          <p><a href="https://rebol.metaeducation.com/t/compose-of-tuple-and-path-and-toplevel-group/2056/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/compose-of-tuple-and-path-and-toplevel-group/2056/3</link>
        <pubDate>Tue, 01 Oct 2024 14:02:33 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2056-3</guid>
        <source url="https://rebol.metaeducation.com/t/compose-of-tuple-and-path-and-toplevel-group/2056.rss">COMPOSE of TUPLE! and PATH! (and toplevel GROUP!)</source>
      </item>
      <item>
        <title>COMPOSE of TUPLE! and PATH! (and toplevel GROUP!)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>While working on <a class="mention" href="https://rebol.metaeducation.com/u/blackattr">@BlackATTR</a>'s query, I noticed code that was making paths (now tuples) out of components via TO TUPLE! COMPOSE of a BLOCK!.  Like this:</p>
<pre><code>to tuple! compose [obj clauses (kwd.1)]
</code></pre>
<p>But did you know that COMPOSE can act directly on TUPLE! and PATH!  You could instead just write:</p>
<pre><code>compose $obj.clauses.(kwd.1)
</code></pre>
<p>It supports splices as well:</p>
<pre><code>&gt;&gt; compose $(10 + 20)/a/b/(spread [c d e])/(reverse [g f])
== 30/a/b/c/d/e/[f g]
</code></pre>
<p>And if you remember that TUPLE! can be nested underneath PATH! (not vice versa) then you can COMPOSE/DEEP and handle mixed tuples and paths:</p>
<pre><code>&gt;&gt; compose/deep $(10 + 20)/a/b.(spread [c d e])
== 30/a/b.c.d.e
</code></pre>
<p>Voids can vanish...so there can be fewer dots in an output tuple than in the input:</p>
<pre><code>&gt;&gt; compose $a.(if false [b]).c
== a.c
</code></pre>
<p>Empty splices will vanish as well:</p>
<pre><code>&gt;&gt; compose $a.(spread []).c
== a.c
</code></pre>
<p>You can't compose in NULLs as an important safety measure...central to the design!</p>
<pre><code>&gt;&gt; compose $a.(select [x 10 y 20] 'b).c
** Script Error: non-NULL value required (see MAYBE, TRY, REIFY)
** Near: [a ** (select [x 10 y 20] 'b) c]
</code></pre>
<p>But don't forget about MAYBE as the way to convert nulls to void when that's what you meant!</p>
<pre><code>&gt;&gt; compose $a.(maybe select [x 10 y 20] 'b).c
== a.c
</code></pre>
<h2><a name="p-6705-you-can-also-compose-a-group-1" class="anchor" href="https://rebol.metaeducation.com#p-6705-you-can-also-compose-a-group-1"></a>You can also COMPOSE a GROUP!</h2>
<p>In R3-Alpha, only BLOCK! would compose.  Everything else was passed-through as-is, including GROUP!s (PAREN!s in their terminology)</p>
<pre><code>r3-alpha&gt;&gt; compose quote (1 + (2 + 3))  ; R3-alpha QUOTE (modern THE)
== (1 + (2 + 3))
</code></pre>
<p>Red just doesn't allow it:</p>
<pre><code>red&gt;&gt; compose quote (1 + (2 + 3))   ; Red QUOTE (modern THE)
*** Script Error: compose does not allow paren! for its value argument
</code></pre>
<p>So you'd wind up having to make BLOCK!s and then convert them:</p>
<pre><code>red&gt;&gt; as paren! compose [1 + (2 + 3)]
== (1 + 5)
</code></pre>
<p>But in Ren-C, group composing works... it just leaves the top group as-is.</p>
<pre><code>&gt;&gt; compose $(1 + (2 + 3))
== (1 + 5)
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/compose-of-tuple-and-path-and-toplevel-group/2056/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/compose-of-tuple-and-path-and-toplevel-group/2056/1</link>
        <pubDate>Thu, 19 Oct 2023 06:39:14 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2056-1</guid>
        <source url="https://rebol.metaeducation.com/t/compose-of-tuple-and-path-and-toplevel-group/2056.rss">COMPOSE of TUPLE! and PATH! (and toplevel GROUP!)</source>
      </item>
  </channel>
</rss>
