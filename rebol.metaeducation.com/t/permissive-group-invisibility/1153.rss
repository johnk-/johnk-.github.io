<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Permissive Group Invisibility</title>
    <link>https://rebol.metaeducation.com/t/permissive-group-invisibility/1153</link>
    <description>While messing around with some experimental debugger code, I made BREAKPOINT an invisible that doesn&#39;t take any parameters.  This means you can write **foo + breakpoint bar**.  It would break after foo evaluates as the first argument to +, before bar evaluates as the second arg to +.

But should you be able to say  **foo + (breakpoint) bar** ?

The idea that a GROUP! could simply vaporize away if its contents are empty or invisible *seems* a bit unsettling.  So these cases were errors:

    &gt;&gt; 1 + () 2
    ** Error: + is missing its value2 argument

    &gt;&gt; 1 + (comment &quot;Hi&quot;) 2
    ** Error: + is missing its value2 argument

But how unsettling would it *really* be if those worked?

    &gt;&gt; 1 + () 2
    == 3

    &gt;&gt; 1 + (comment &quot;Hi&quot;) 2
    == 3

I had said this was too weird to be justified &quot;just for some comments&quot;.  But when you think about a interesting multi-parameter breakpoint, wouldn&#39;t it be nice to put it where you want it and group it as well?

    foo + (my-complex-breakpoint #arg1 #arg2) bar

You wouldn&#39;t be able to do this if grouping forced the production of a ~none~ isotope out of that emptiness.  The same would be true for using DUMP today:

    foo + (-- x y z) bar 

As invisibles become more an integral part of the system, it no longer seems like being weird for the sake of being weird.

## Permissive Invisible Groups

An argument for groups not vaporizing is if you think of **`(...)`** as being a synonym for **`do [...]`**.  If your code is coming from an unknown source, and it&#39;s a GROUP!...you may not know if it&#39;s going to vaporize or not.  But...

* **...is that the actual scenario for GROUP!s?**  How often are unknown code bits being passed around as GROUP!, and then executed by being spliced into evaluation?  Aren&#39;t blocks the currency for that?

* **why not just use DO on your groups if you&#39;re worried?**  If you do not know what kind of code is in a GROUP!, it must be coming by way of a variable.  So the way you are getting the evaluator to run it is either DO (where this isn&#39;t an issue, because empty groups return void) or you&#39;ve made an effort to splice it into a block so it evaluates inline.  If you&#39;re forced to splice, why not splice **compose [... do &#39;(my-group) ...]** if you don&#39;t want the ability to vaporize?  It&#39;s a short word, and it liberates GROUP! to a distinct novel usage and behavior.

Of course, it&#39;s a thing you&#39;d have to learn about GROUP!... that they aren&#39;t a synonym for DO of a BLOCK!.  But it&#39;s a nuance... *groups just group things, they don&#39;t synthesize any VOID!s or artificial values of their own*.

The nuance is pleasing, and simple.  I found that I had a preference for:

     case [
         something [...]
         (elide print &quot;Got this far&quot;)
         something-else [...]
     ]

...as opposed to:

     case [
         something [...]
         elide (print &quot;Got this far&quot;)
         something-else [...]
     ]

*(Though technically you don&#39;t really need a GROUP! at all in that case, but the use of groups is often a subjective thing.)*

And if there isn&#39;t permissive group invisibility you won&#39;t get it any other way.  I feel like there&#39;s multiple points in favor of this... expressivity, and a coherent story: &quot;groups only function is to group things, they are ghostly, `() 1 + () (comment &quot;hi&quot;) 2 ()` is 3&quot;

*(Note: Because the GROUP!s are not infix functions themselves, they are not *entirely* ghostly...they are &quot;only as invisible as non-infix invisibles are&quot;.  This is to say that `1 () + 2` can&#39;t be the same as `1 + 2`, because, the 1 doesn&#39;t see the + through the group!.  It can&#39;t start evaluating it either to find out if it&#39;s empty and then have to back out of that...so this is an error.)*

*(Also worth pointing out: if you COMPOSE a GROUP! which has null or splice an empty block via group...not even -invisible-, you get it vaporizing: **`compose [1 + (if false [&lt;not-spliced&gt;]) 2]`** =&gt; [1 + 2])*</description>
    
    <lastBuildDate>Thu, 10 Dec 2020 18:53:56 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://rebol.metaeducation.com/t/permissive-group-invisibility/1153.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Permissive Group Invisibility</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I had an insight for why in Ren-C's world this is a particularly important design decision.</p>
<h2><a name="p-3680-first-the-setup-1" class="anchor" href="https://rebol.metaeducation.com#p-3680-first-the-setup-1"></a>First the setup...</h2>
<p>Historical R3-Alpha/Rebol2/Red had problems with code of the form:</p>
<pre><code>r3-alpha&gt;&gt; parse "abcde" rule: ["a" "b" (clear rule) "c" "d" "e"]
== true
</code></pre>
<p>This may be dismissed as an edge case and "why would you do that" and "if you do that you get what you deserve".  But the only reason it hasn't crashed is you are using stale past-end-marker data in a series that hasn't been GC'd.  And such a situation can be much worse than crashing...<em>not</em> crashing can be silent and go haywire causing arbitrary damage to your data, when those out-of-bounds accesses somehow represent new instructions to the system's internal implementation.</p>
<p>Ren-C locks series against mutability while they are being enumerated--including PARSE rules as they run:</p>
<pre><code>ren-c&gt;&gt; parse "abcde" rule: ["a" "b" (clear rule) "c" "d" "e"]
** Access Error: series has temporary read-only hold for iteration
** Where: clear subparse parse main
** Near: [clear rule ~~]
** Line: 1
</code></pre>
<p>This may sound harsh, but in PARSE's case you have other options.  You can add material to a rule while it's running.  Use a subrule that is not currently itself executing</p>
<pre><code>ren-c&gt;&gt; did parse "abcde" rule: ["a" "b" (append last rule ["c" "d" "e"]) []]
== #[true]
</code></pre>
<p>And you can remove material by a similar token, if you put it in a sub-block to start with:</p>
<pre><code>ren-c&gt;&gt; did parse "ab" rule: ["a" "b" (clear last rule) ["c" "d" "e"]]
== #[true]
</code></pre>
<h2><a name="p-3680-now-the-punchline-2" class="anchor" href="https://rebol.metaeducation.com#p-3680-now-the-punchline-2"></a>Now the punchline...</h2>
<p>Permissive group invisibility gives DO the same power to defeat the mutability lock (where adding is concerned).  Because now you have a way to preserve the result if you <em>don't</em> add anything to the nested group:</p>
<pre><code>ren-c&gt;&gt; do code: [1 + 2 append last code "hi" 3 + 4 ()]
== "hi"

ren-c&gt;&gt; do code: [1 + 2 3 + 4 ()]
== 7
</code></pre>
<p>That's just a simple example, but I'll re-summarize by saying that R3-Alpha had problems with generic mutability <em>(bad invariants at best, potentially arbitrary hacker-level bugs corrupting the evaluator at worst...though in DO's case it used to check the tail index so that <em>particular</em> enumeration was bad-invariants-only)</em>.  And solutions like this--if you thought to use them--would not preserve the last result:</p>
<pre><code>r3-alpha&gt;&gt; do code: [1 + 2 3 + 4 ()]
; prints nothing (e.g. UNSET!), as opposed to 7
</code></pre>
<p>Just interesting to see another argument for why the invisible GROUP! being invisible has leverage, making <code>()</code> as "UNSET! generator" is inferior.</p>
<p><strong>This cannot be changed in Redbol (unless some kind of deeper evaluator hook is introduced).</strong></p>
          <p><a href="https://rebol.metaeducation.com/t/permissive-group-invisibility/1153/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/permissive-group-invisibility/1153/2</link>
        <pubDate>Fri, 17 Jan 2020 13:46:49 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1153-2</guid>
        <source url="https://rebol.metaeducation.com/t/permissive-group-invisibility/1153.rss">Permissive Group Invisibility</source>
      </item>
      <item>
        <title>Permissive Group Invisibility</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>While messing around with some experimental debugger code, I made BREAKPOINT an invisible that doesn't take any parameters.  This means you can write <strong>foo + breakpoint bar</strong>.  It would break after foo evaluates as the first argument to +, before bar evaluates as the second arg to +.</p>
<p>But should you be able to say  <strong>foo + (breakpoint) bar</strong> ?</p>
<p>The idea that a GROUP! could simply vaporize away if its contents are empty or invisible <em>seems</em> a bit unsettling.  So these cases were errors:</p>
<pre><code>&gt;&gt; 1 + () 2
** Error: + is missing its value2 argument

&gt;&gt; 1 + (comment "Hi") 2
** Error: + is missing its value2 argument
</code></pre>
<p>But how unsettling would it <em>really</em> be if those worked?</p>
<pre><code>&gt;&gt; 1 + () 2
== 3

&gt;&gt; 1 + (comment "Hi") 2
== 3
</code></pre>
<p>I had said this was too weird to be justified "just for some comments".  But when you think about a interesting multi-parameter breakpoint, wouldn't it be nice to put it where you want it and group it as well?</p>
<pre><code>foo + (my-complex-breakpoint #arg1 #arg2) bar
</code></pre>
<p>You wouldn't be able to do this if grouping forced the production of a ~none~ isotope out of that emptiness.  The same would be true for using DUMP today:</p>
<pre><code>foo + (-- x y z) bar 
</code></pre>
<p>As invisibles become more an integral part of the system, it no longer seems like being weird for the sake of being weird.</p>
<h2><a name="p-3315-permissive-invisible-groups-1" class="anchor" href="https://rebol.metaeducation.com#p-3315-permissive-invisible-groups-1"></a>Permissive Invisible Groups</h2>
<p>An argument for groups not vaporizing is if you think of <strong><code>(...)</code></strong> as being a synonym for <strong><code>do [...]</code></strong>.  If your code is coming from an unknown source, and it's a GROUP!...you may not know if it's going to vaporize or not.  But...</p>
<ul>
<li>
<p><strong>...is that the actual scenario for GROUP!s?</strong>  How often are unknown code bits being passed around as GROUP!, and then executed by being spliced into evaluation?  Aren't blocks the currency for that?</p>
</li>
<li>
<p><strong>why not just use DO on your groups if you're worried?</strong>  If you do not know what kind of code is in a GROUP!, it must be coming by way of a variable.  So the way you are getting the evaluator to run it is either DO (where this isn't an issue, because empty groups return void) or you've made an effort to splice it into a block so it evaluates inline.  If you're forced to splice, why not splice <strong>compose [... do '(my-group) ...]</strong> if you don't want the ability to vaporize?  It's a short word, and it liberates GROUP! to a distinct novel usage and behavior.</p>
</li>
</ul>
<p>Of course, it's a thing you'd have to learn about GROUP!... that they aren't a synonym for DO of a BLOCK!.  But it's a nuance... <em>groups just group things, they don't synthesize any VOID!s or artificial values of their own</em>.</p>
<p>The nuance is pleasing, and simple.  I found that I had a preference for:</p>
<pre><code> case [
     something [...]
     (elide print "Got this far")
     something-else [...]
 ]
</code></pre>
<p>...as opposed to:</p>
<pre><code> case [
     something [...]
     elide (print "Got this far")
     something-else [...]
 ]
</code></pre>
<p><em>(Though technically you don't really need a GROUP! at all in that case, but the use of groups is often a subjective thing.)</em></p>
<p>And if there isn't permissive group invisibility you won't get it any other way.  I feel like there's multiple points in favor of this... expressivity, and a coherent story: "groups only function is to group things, they are ghostly, <code>() 1 + () (comment "hi") 2 ()</code> is 3"</p>
<p><em>(Note: Because the GROUP!s are not infix functions themselves, they are not <em>entirely</em> ghostly...they are "only as invisible as non-infix invisibles are".  This is to say that <code>1 () + 2</code> can't be the same as <code>1 + 2</code>, because, the 1 doesn't see the + through the group!.  It can't start evaluating it either to find out if it's empty and then have to back out of that...so this is an error.)</em></p>
<p><em>(Also worth pointing out: if you COMPOSE a GROUP! which has null or splice an empty block via group...not even -invisible-, you get it vaporizing: <strong><code>compose [1 + (if false [&lt;not-spliced&gt;]) 2]</code></strong> =&gt; [1 + 2])</em></p>
          <p><a href="https://rebol.metaeducation.com/t/permissive-group-invisibility/1153/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/permissive-group-invisibility/1153/1</link>
        <pubDate>Tue, 30 Apr 2019 20:14:48 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1153-1</guid>
        <source url="https://rebol.metaeducation.com/t/permissive-group-invisibility/1153.rss">Permissive Group Invisibility</source>
      </item>
  </channel>
</rss>
