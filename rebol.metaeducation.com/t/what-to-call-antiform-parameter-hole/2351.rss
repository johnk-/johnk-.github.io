<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What to call Antiform PARAMETER! (&quot;Hole&quot;?)</title>
    <link>https://forum.rebol.info/t/what-to-call-antiform-parameter-hole/2351</link>
    <description>[quote=&quot;hostilefork, post:6, topic:2170&quot;]
antiform parameter! (&quot;unspecialized&quot;) ; required in &quot;unset&quot; FRAME! slots for typechecking
[/quote]

Looking over this, UNSPECIALIZED is a pretty lengthy name.

In a frame, these represent information for parameters that need to be gathered.

Should *this* be what&#39;s called a HOLE?  It almost makes the most sense.  &quot;A frame with holes in it needs to fill those holes from the callsite.&quot;  :face_with_spiral_eyes:

*(Note: It turns out this helps the implementation a lot...because checking for specialization is a particularly narrow function that can only be called on frame variables.  Consequently  I had the distinction between `Is_Unspecialized()` to check for the antiform (regardless of where it appears), and `Is_Unspecialized_Var()` which is constrained to be called on frame variable slots.  Having `Is_Hole()` allows me to drop the _Var() from the commonly called routines.)*

[quote=&quot;hostilefork, post:4, topic:2170&quot;]
VACANT? could be the category of defaultable things (DEFAULTABLE...?)
[/quote]

I don&#39;t like VACANT&#39;s part of speech (kind of like how I don&#39;t like &quot;UNSET&quot; for what I call NOTHING, because *variables* are unset, not the values that signify unsetness).  But. **VACANCY** on the other hand...is appropriate.

Hence nothing, hole, and tripwire could all be `VACANCY?`  FRAME!s are concerned in particular about holes.  Variable access and defaulting are concerned with vacancy.

Well that&#39;s kind of seeming like the best yet.</description>
    
    <lastBuildDate>Tue, 17 Dec 2024 04:33:20 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/what-to-call-antiform-parameter-hole/2351.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What to call Antiform PARAMETER! (&quot;Hole&quot;?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2351">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Looking over this, UNSPECIALIZED is a pretty lengthy name.</p>
<p>In a frame, these represent information for parameters that need to be gathered.</p>
<p>Should <em>this</em> be what's called a HOLE? It almost makes the most sense. "A frame with holes in it needs to fill those holes from the callsite</p>
</blockquote>
</aside>
<p>A lot of things have jumbled around as I've gotten more experience with this.  Notably the idea of making antiform parameters "vacant" in order to let them act as unfulfilled in FRAME! turned out to be a very poor choice in practice.</p>
<p>I've written up how antiform parameters were normalized, and NOTHING is the unspecialized state exclusive to MAKE FRAME!:</p>
<p><a href="https://forum.rebol.info/t/default-values-and-make-frame-2024-edition/2347" class="inline-onebox">Default Values and MAKE FRAME! - 2024 Edition</a></p>
<p>What this means is we have an in-memory FRAME! representation for functions, which is what you get back from UNRUN (all it does is remove the antiform state on the FRAME! by changing the quote byte from ANTIFORM_0 to NOQUOTE_1), which gives a plain frame that looks like this:</p>
<pre><code>&gt;&gt; unrun append/
== #[frame! [
    series: ~#[
        parameter! [~void~ any-series? port! map! object! module! bitset!]
    ]~
    value: ~#[parameter! [~void~ element? splice?]]~
    part: ~#[parameter! :[any-number? any-series? pair!]]~
    dup: ~#[parameter! :[any-number? pair!]]~
    line: ~#[parameter! :[]]~
]]
</code></pre>
<p>But in contexts where you're not just trying to de-antiform an action, but actually inquire about the parameters, you might think to ask it like this:</p>
<pre><code>&gt;&gt; parameters of append/
== #[frame! [
    series: ~#[
        parameter! [~void~ any-series? port! map! object! module! bitset!]
    ]~
    value: ~#[parameter! [~void~ element? splice?]]~
    part: ~#[parameter! :[any-number? any-series? pair!]]~
    dup: ~#[parameter! :[any-number? pair!]]~
    line: ~#[parameter! :[]]~
]]
</code></pre>
<p>There might be some shade of distinction...where UNRUN might give you a mutable view of an action, and PARAMETERS OF gives you a read-only view.  I don't know.</p>
<p>But you might ask: <em>"Why not have PARAMETERS OF give back a frame with <em>plain</em> PARAMETER! instead of the antiforms, so they're 'easier' to work with?"</em></p>
<p>That would be more costly and require a separate allocation.  The thing is, that what you see there is actually just a <em>Lens</em> of the actual frame that contains non-antiform cells also (specializations and locals), but because of the view it's only showing you the antiform parameters.</p>
<p>But also, a frame with non-antiform PARAMETER! in it isn't useful for building functions.</p>
<p>So really this is <strong><code>holes of append/</code></strong> <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=12" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
<h2><a name="p-7973-could-parameter-be-the-antiform-ofsomething-else-1" class="anchor" href="https://forum.rebol.info#p-7973-could-parameter-be-the-antiform-ofsomething-else-1"></a>Could PARAMETER be the antiform of...something else?</h2>
<p>It feels like maybe it should be the case that parameter is the name of the antiform.  But the antiform of <em>what</em> exactly?</p>
<p>It isn't really a TYPESET! because there's more information in it (a textual description, whether it's optional or literal, etc.)  It could be maybe a TYPESPEC!</p>
<p>This is enough information to gather an argument at a callsite.  A GATHER?  Maybe a MATCHER?</p>
<p><em>"parameters are the antiform of matcher!"</em></p>
<p>The problem is that what's in a PARAMETER! cell is so particular to gathering parameters, and for most practical purposes they're always antiforms.</p>
<h2><a name="p-7973-or-is-there-no-real-reason-to-use-antiforms-here-2" class="anchor" href="https://forum.rebol.info#p-7973-or-is-there-no-real-reason-to-use-antiforms-here-2"></a>Or Is There No Real Reason To Use Antiforms Here?</h2>
<p>Things have shaken around, and antiform parameters are legal to pass at callsites as non-^META values.  The only restriction that you get is that you can't specialize frame slots to antiform parameters (without a bit of effort).</p>
<p><strong>So why not just say that plain PARAMETER! is what represents unspecialized slots?</strong></p>
<p>What led me to resist this initially was that whatever represented unspecialized slots couldn't be passed as a plain argument to functions.  This meant if you were going to make some query function for PARAMETER! you had to ^META it, and the meta mechanics are tailored to helping you manage antiforms&lt;-&gt;quasiforms&lt;-&gt;plain.  If PARAMETER! was irregular then it breaks this rhythm, because your meta form is quoted, not quasi...it could be made to work but it would then be rather irregular.</p>
<p><em>Yet things have changed.</em>  You can pass "unspecializeds" normally, you just can't specialize to their value (by definition, since they're a value that represents a lack of specialization).  Though I described a workaround through ENCLOSE-based meta mechanics if you ever <em>really</em> need to do this to a parameter that wasn't already defined ^META.</p>
<p><strong>I think being too invested in the isotope story works against practical usage here.</strong>  If plain PARAMETER! represents unspecialized values in function interfaces, that avoids needing another name for them.  You'll have to learn that they are a little weird, but their weirdness is not "you can't put these in blocks" (which there's a good reason for with other types, but never was a particularly good one for parameter antiforms).</p>
<h2><a name="p-7973-its-really-the-best-option-3" class="anchor" href="https://forum.rebol.info#p-7973-its-really-the-best-option-3"></a>It's Really The Best Option</h2>
<p>Putting aside whether you know what this code is doing or not:</p>
<pre><code>   let f: make frame! make varargs! condition
   for-each [key param] (parameters of f) [
       all [not param.optional, ~end~ = f.(key)] then [
           f.(key): value
           break
       ]
   ]
</code></pre>
<p>vs.</p>
<pre><code>   let f: make frame! make varargs! condition
   for-each [key hole] (holes of f) [
       all [not hole.optional, ~end~ = f.(key)] then [
           f.(key): value
           break
       ]
   ]
</code></pre>
<p>vs.</p>
<pre><code>   let f: make frame! make varargs! condition
   for-each [key unspecialized] (unspecialized of f) [
       all [not unspecialized.optional, ~end~ = f.(key)] then [
           f.(key): value
           break
       ]
   ]
</code></pre>
<p><strong>It needs to be the <code>PARAMETERS OF</code>, and the variable needs to be called <code>PARAM</code>.</strong></p>
<p>So would dropping antiform PARAMETER! be for the best&gt;  Isotopes solve a lot of problems, but once NOTHING moved to the sole unspecialized state in MAKE FRAME! scenarios, having parameter antiforms just seems to be causing mechanical and terminology problems here without adding a lot of benefit...</p>
<h2><a name="p-7973-wed-lose-one-piece-of-terra-firma-maybe-4" class="anchor" href="https://forum.rebol.info#p-7973-wed-lose-one-piece-of-terra-firma-maybe-4"></a>We'd Lose One Piece Of Terra Firma, Maybe?</h2>
<p>If you write a function like:</p>
<pre><code>/specialize-x: func [/action [action?] value] [
    let f: copy unrun action/
    f.x: value
    return runs f
]
</code></pre>
<p>That could specialize any function's X value and give you back a function with X fixed.  Unless you passed an antiform parameter...which is a stable value (by necessity) and would be legal since you didn't give value a type spec.</p>
<p>But in today's antiform-PARAMETER!-is-unspecialized world, if you said:</p>
<pre><code>/specialize-x: func [/action [action?] element [element?]] [
    let f: copy unrun action/
    f.x: element
    return runs f
]
</code></pre>
<p>You'd be able to promise that the specialization would work.  There's arguably a non-zero value to say that the set of things you can put in blocks is a subset of all things you can specialize a value in a frame to.</p>
<p>But what about null, or any of the other antiform states that are legal to specialize to?  That seems kind of arbitrary.</p>
<p>Really, it may just be that there needs to be a SPECIALIZABLE? (or NOT/PARAMETER?) constraint, and that would address this issue without the "maybe not even that useful" guarantee that array elements can always act as specializations.  Who said that specialization-ability and put-in-block-ability had anything to do with each other, anyway?</p>
<p><em>Not only that, there's nothing stopping there being a richer way of saying 'yes I want to specialize with this PARAMETER! explicitly'.</em>*  I've tried to avoid making there be any hidden bits, but SPECIALIZE could offer the feature and implement it however it wanted to.  Which doesn't even have to be hidden, it could be METASPECIALIZE and just fulfill all the arguments as one level meta of what was expected.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/what-to-call-antiform-parameter-hole/2351/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-antiform-parameter-hole/2351/2</link>
        <pubDate>Tue, 17 Dec 2024 02:17:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2351-2</guid>
        <source url="https://forum.rebol.info/t/what-to-call-antiform-parameter-hole/2351.rss">What to call Antiform PARAMETER! (&quot;Hole&quot;?)</source>
      </item>
      <item>
        <title>What to call Antiform PARAMETER! (&quot;Hole&quot;?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="2170">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170/6">Antiform TAG! As "Triggers an Error On Access" Type</a></div>
<blockquote>
<p>antiform parameter! ("unspecialized") ; required in "unset" FRAME! slots for typechecking</p>
</blockquote>
</aside>
<p>Looking over this, UNSPECIALIZED is a pretty lengthy name.</p>
<p>In a frame, these represent information for parameters that need to be gathered.</p>
<p>Should <em>this</em> be what's called a HOLE?  It almost makes the most sense.  "A frame with holes in it needs to fill those holes from the callsite."  <img src="https://forum.rebol.info/images/emoji/twitter/face_with_spiral_eyes.png?v=12" title=":face_with_spiral_eyes:" class="emoji" alt=":face_with_spiral_eyes:" loading="lazy" width="20" height="20"></p>
<p><em>(Note: It turns out this helps the implementation a lot...because checking for specialization is a particularly narrow function that can only be called on frame variables.  Consequently  I had the distinction between <code>Is_Unspecialized()</code> to check for the antiform (regardless of where it appears), and <code>Is_Unspecialized_Var()</code> which is constrained to be called on frame variable slots.  Having <code>Is_Hole()</code> allows me to drop the _Var() from the commonly called routines.)</em></p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="2170">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170/4">Antiform TAG! As "Triggers an Error On Access" Type</a></div>
<blockquote>
<p>VACANT? could be the category of defaultable things (DEFAULTABLE...?)</p>
</blockquote>
</aside>
<p>I don't like VACANT's part of speech (kind of like how I don't like "UNSET" for what I call NOTHING, because <em>variables</em> are unset, not the values that signify unsetness).  But. <strong>VACANCY</strong> on the other hand...is appropriate.</p>
<p>Hence nothing, hole, and tripwire could all be <code>VACANCY?</code>  FRAME!s are concerned in particular about holes.  Variable access and defaulting are concerned with vacancy.</p>
<p>Well that's kind of seeming like the best yet.</p>
          <p><a href="https://forum.rebol.info/t/what-to-call-antiform-parameter-hole/2351/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-to-call-antiform-parameter-hole/2351/1</link>
        <pubDate>Sun, 15 Sep 2024 03:53:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2351-1</guid>
        <source url="https://forum.rebol.info/t/what-to-call-antiform-parameter-hole/2351.rss">What to call Antiform PARAMETER! (&quot;Hole&quot;?)</source>
      </item>
  </channel>
</rss>
