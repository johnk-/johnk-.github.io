<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How &#39; Became Quoted-Void (and ~ Became Quasi-Void)</title>
    <link>https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915</link>
    <description>Prior to modern quasiforms, `~` was a special &quot;BAD-WORD! with no name&quot;, e.g. a null spelling:

    &gt;&gt; type of &#39;~
    == #[datatype! bad-word!]

    &gt;&gt; as text! &#39;~
    ; null

So unlike regular WORD!, it was possible to have a BAD-WORD! that had no UTF-8 representation.  (Yes, this was a sign that something was amiss.)

However, I liked having **`~`** be something that could be reserved by the system, and I thought the &quot;bad-wordness&quot; plus the lack of any associated text made it a good choice for being what we&#39;d call &quot;trash&quot;

    &gt;&gt; if trash? &#39;~ [print &quot;Yup, that&#39;s a trash&quot;]
    Yup, that&#39;s a trash.

    &gt;&gt; &#39;~  ; console would not show by default

    &gt;&gt; mold print &quot;So ~ was the result of things like PRINT&quot;
    So ~ was the result of things like PRINT
    == &quot;~&quot;

*(You can re-read my **[explanation of why void is a bad return value for things like PRINT or HELP.](https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/4?u=hostilefork)**  If you want to communicate to the console that it not print anything, then you need to do that communication through some kind of non-void thing, otherwise that signal is too slippery.)*

You could put these BAD-WORD!s in blocks, which made them kind of a lousy choice for the result of a PRINT.  So when isotopes came on the scene, it seemed a much better idea to say that trash was the *isotopic* form of something.

So in the first cut of generic isotopes, I said ~ was the quasiform of BLANK! (as opposed to ~_~, which looks pretty bad):

    &gt;&gt; quasi _
    == ~

    &gt;&gt; ~
    == ~  ; isotope

    &gt;&gt; quasi? &#39;~
    == ~true~  ; isotope

    &gt;&gt; trash? ~
    == ~true~  ; isotope

## But... Would It Make More Sense Related to Void?

Initially I was at something of a loss for how void fit into the isotopic world.

One of my early reasonings was that VOID was more &quot;etheric&quot; than NULL.  *So perhaps void was actually the isotopic form of null,* and ~ could be null&#39;s quasiform:

     &gt;&gt; quasi null
     == ~

     &gt;&gt; ~
     ; void

But this was confusing, since if `~` was the meta of void, there really isn&#39;t any such thing as a &quot;~ isotope&quot;.  You could never make one, because I thought it needed to vaporize.

    &gt;&gt; 1 + 2 ~
    == 3

I was bothered by taking it for this purpose, because I was pretty attached to **`~`** for representing unset variables.  It looked clean, letting you see the things you&#39;ve set and haven&#39;t:

    &gt;&gt; f: make frame! :append

    &gt;&gt; f.dup: 2
    &gt;&gt; f.value: &quot;a string&quot;

    &gt;&gt; f
    == make frame! [
        series: ~
        value: &quot;a string&quot;
        part: ~
        dup: 2
        line: ~
    ]

If ~ represented voids then unset variables would be something like isotopic blanks, and look significantly crappier:

    &gt;&gt; f
    == make frame! [
        series: ~_~
        value: &quot;a string&quot;
        part: ~_~
        dup: 2
        line: ~_~
    ]

But it wasn&#39;t just in these printouts, also in source.  Being able to simply type **`(x: ~)`** to unset a variable and have that be the right way to do it...in an object field or just in code, was just too good.

That made me feel pretty attached to the idea that ~ is the contents of an unset variable, which is not displayed by the terminal, and which is ornery to things like ANY or ALL.</description>
    
    <lastBuildDate>Thu, 01 Dec 2022 09:02:11 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How &#39; Became Quoted-Void (and ~ Became Quasi-Void)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><img src="https://forum.rebol.info/images/emoji/twitter/arrow_double_up.png?v=9" title=":arrow_double_up:" class="emoji only-emoji" alt=":arrow_double_up:"></p>
<p>I've streamlined the above thread of historical discussion-with-myself to remove the flip-flopping, and just chronicle the actual points.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1915">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One of my early reasonings was that VOID was more "etheric" than NULL. <em>So perhaps void was actually the isotopic form of null,</em> and ~ could be null's quasiform:</p>
<pre><code> &gt;&gt; quasi null
 == ~

 &gt;&gt; ~
 ; void
</code></pre>
<p>But this was confusing, since if <code>~</code> was the meta of void, there really isn't any such thing as a "~ isotope". You could never make one, because I thought it needed to vaporize.</p>
<pre><code>&gt;&gt; 1 + 2 ~
== 3
</code></pre>
</blockquote>
</aside>
<p>This is a curious realization about how an early decision got stuck in my head.  NULL was the first thing I implemented that had "no representation", and I gave it the "privileged" state of being the vaporizing result of a quoted nothing:</p>
<pre><code>&gt;&gt; '
; null  (hmmmm...)
</code></pre>
<p>As the need to print out a comment there shows, it's not like I'd solved the "has no value representation" problem in some general sense by picking this particular choice.  And it turns out to be a pretty bad choice.</p>
<p>It's much better for void.  And having the isotopic state represent unset variables is a real joy in terms of the visuals and ergonomics.  Being able to say <strong><code>(x: ~)</code></strong> and unset a variable, and have that be the rendering in a list of unset variables draws the attention to the things that are set.</p>
          <p><a href="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915/6</link>
        <pubDate>Thu, 01 Dec 2022 09:02:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1915-6</guid>
        <source url="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915.rss">How &#39; Became Quoted-Void (and ~ Became Quasi-Void)</source>
      </item>
      <item>
        <title>How &#39; Became Quoted-Void (and ~ Became Quasi-Void)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1915">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One of my early reasonings was that VOID was more "etheric" than NULL. <em>So perhaps void was actually the isotopic form of null,</em> and ~ could be null's quasiform</p>
</blockquote>
</aside>
<p>Obviously a lot of things got remapped in the design with isotopes.  So I hadn't entered the thinking that it was actually NULL that was isotopic... and VOID was the "more normal" type.</p>
<p><strong>The new conception became that the contents of an unset variable are <em>void isotopes</em>, something that is an ornery form of less than nothing.</strong>  <img src="https://forum.rebol.info/images/emoji/twitter/fire.png?v=12" title=":fire:" class="emoji" alt=":fire:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/hole.png?v=12" title=":hole:" class="emoji" alt=":hole:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/fire.png?v=12" title=":fire:" class="emoji" alt=":fire:" loading="lazy" width="20" height="20"></p>
<p>This would mean <strong>~</strong> isotope could come back for an ornery value, that I called TRASH.  Then voids could be meta'd as just a plain apostrophe instead of NULL:</p>
<pre><code>&gt;&gt; meta void
== '

&gt;&gt; meta trash
== ~
</code></pre>
<p>It's nice to be able to unset variables with a single intent:</p>
<pre><code>&gt;&gt; x: ~
== ~  ; isotope
</code></pre>
<p>Not only did it look good on the surface, it gave COMPOSE slightly more coherence...because you're allowed to compose in voids, not nulls.  So if you've got apostrophes on the outside of a GROUP!, you get the answer you expect:</p>
<pre><code>&gt;&gt; compose ['(void)]
== [']

&gt;&gt; compose ['(null)]
** Error: Can't compose nulls
</code></pre>
<p>Not having a meta-form represented via QUASI! suggests voids not being isotopes.</p>
<p>I don't know if this suggests allowing fetching void variables without an error, but... so long as you deliberately assigned a variable to be void... maybe it's... not that bad?</p>
<pre><code> &gt;&gt; x: if 1 &gt; 2 [print "not run"]

 &gt;&gt; 10 + 20 x

 &gt;&gt; all [10 + 20 x]
 == 30
</code></pre>
<p>The decision to make NULL an isotope of the WORD! null (instead of an isotope of--say--BLANK!) is covered in another thread:</p>
<p><a href="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989" class="inline-onebox">~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</a></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/8555a2e5222dc45cea3ee83ad6b1069b882006b0.jpeg" data-download-href="https://forum.rebol.info/uploads/default/8555a2e5222dc45cea3ee83ad6b1069b882006b0" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/8555a2e5222dc45cea3ee83ad6b1069b882006b0_2_301x249.jpeg" alt="image" data-base62-sha1="j1wYFpyDX7Pew015FWqQtq3Pks0" width="301" height="249" srcset="https://forum.rebol.info/uploads/default/optimized/1X/8555a2e5222dc45cea3ee83ad6b1069b882006b0_2_301x249.jpeg, https://forum.rebol.info/uploads/default/optimized/1X/8555a2e5222dc45cea3ee83ad6b1069b882006b0_2_451x373.jpeg 1.5x, https://forum.rebol.info/uploads/default/optimized/1X/8555a2e5222dc45cea3ee83ad6b1069b882006b0_2_602x498.jpeg 2x" data-dominant-color="524643"></a></div><p></p>
<h1>
<a name="yes-i-sure-hope-so-1" class="anchor" href="https://forum.rebol.info#yes-i-sure-hope-so-1"></a>YES (I sure hope so!)</h1>
          <p><a href="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915/5</link>
        <pubDate>Mon, 03 Oct 2022 12:54:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1915-5</guid>
        <source url="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915.rss">How &#39; Became Quoted-Void (and ~ Became Quasi-Void)</source>
      </item>
      <item>
        <title>How &#39; Became Quoted-Void (and ~ Became Quasi-Void)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/the-meta-of-null-and-void/1941">The ^META of NULL and VOID</a></p>
          <p><a href="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915/2</link>
        <pubDate>Thu, 25 Aug 2022 07:06:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1915-2</guid>
        <source url="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915.rss">How &#39; Became Quoted-Void (and ~ Became Quasi-Void)</source>
      </item>
      <item>
        <title>How &#39; Became Quoted-Void (and ~ Became Quasi-Void)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Prior to modern quasiforms, <code>~</code> was a special "BAD-WORD! with no name", e.g. a null spelling:</p>
<pre><code>&gt;&gt; type of '~
== #[datatype! bad-word!]

&gt;&gt; as text! '~
; null
</code></pre>
<p>So unlike regular WORD!, it was possible to have a BAD-WORD! that had no UTF-8 representation.  (Yes, this was a sign that something was amiss.)</p>
<p>However, I liked having <strong><code>~</code></strong> be something that could be reserved by the system, and I thought the "bad-wordness" plus the lack of any associated text made it a good choice for being what we'd call "trash"</p>
<pre><code>&gt;&gt; if trash? '~ [print "Yup, that's a trash"]
Yup, that's a trash.

&gt;&gt; '~  ; console would not show by default

&gt;&gt; mold print "So ~ was the result of things like PRINT"
So ~ was the result of things like PRINT
== "~"
</code></pre>
<p><em>(You can re-read my <strong><a href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/4">explanation of why void is a bad return value for things like PRINT or HELP.</a></strong>  If you want to communicate to the console that it not print anything, then you need to do that communication through some kind of non-void thing, otherwise that signal is too slippery.)</em></p>
<p>You could put these BAD-WORD!s in blocks, which made them kind of a lousy choice for the result of a PRINT.  So when isotopes came on the scene, it seemed a much better idea to say that trash was the <em>isotopic</em> form of something.</p>
<p>So in the first cut of generic isotopes, I said ~ was the quasiform of BLANK! (as opposed to ~_~, which looks pretty bad):</p>
<pre><code>&gt;&gt; quasi _
== ~

&gt;&gt; ~
== ~  ; isotope

&gt;&gt; quasi? '~
== ~true~  ; isotope

&gt;&gt; trash? ~
== ~true~  ; isotope
</code></pre>
<h2>
<a name="but-would-it-make-more-sense-related-to-void-1" class="anchor" href="https://forum.rebol.info#but-would-it-make-more-sense-related-to-void-1"></a>But... Would It Make More Sense Related to Void?</h2>
<p>Initially I was at something of a loss for how void fit into the isotopic world.</p>
<p>One of my early reasonings was that VOID was more "etheric" than NULL.  <em>So perhaps void was actually the isotopic form of null,</em> and ~ could be null's quasiform:</p>
<pre><code> &gt;&gt; quasi null
 == ~

 &gt;&gt; ~
 ; void
</code></pre>
<p>But this was confusing, since if <code>~</code> was the meta of void, there really isn't any such thing as a "~ isotope".  You could never make one, because I thought it needed to vaporize.</p>
<pre><code>&gt;&gt; 1 + 2 ~
== 3
</code></pre>
<p>I was bothered by taking it for this purpose, because I was pretty attached to <strong><code>~</code></strong> for representing unset variables.  It looked clean, letting you see the things you've set and haven't:</p>
<pre><code>&gt;&gt; f: make frame! :append

&gt;&gt; f.dup: 2
&gt;&gt; f.value: "a string"

&gt;&gt; f
== make frame! [
    series: ~
    value: "a string"
    part: ~
    dup: 2
    line: ~
]
</code></pre>
<p>If ~ represented voids then unset variables would be something like isotopic blanks, and look significantly crappier:</p>
<pre><code>&gt;&gt; f
== make frame! [
    series: ~_~
    value: "a string"
    part: ~_~
    dup: 2
    line: ~_~
]
</code></pre>
<p>But it wasn't just in these printouts, also in source.  Being able to simply type <strong><code>(x: ~)</code></strong> to unset a variable and have that be the right way to do it...in an object field or just in code, was just too good.</p>
<p>That made me feel pretty attached to the idea that ~ is the contents of an unset variable, which is not displayed by the terminal, and which is ornery to things like ANY or ALL.</p>
          <p><a href="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915/1</link>
        <pubDate>Mon, 15 Aug 2022 12:15:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1915-1</guid>
        <source url="https://forum.rebol.info/t/how-became-quoted-void-and-became-quasi-void/1915.rss">How &#39; Became Quoted-Void (and ~ Became Quasi-Void)</source>
      </item>
  </channel>
</rss>
