<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>JUST For Sale - Low Mileage, Original Owner, Like New</title>
    <link>https://forum.rebol.info/t/just-for-sale-low-mileage-original-owner-like-new/1923</link>
    <description>As the /ONLY debacle was chipped away at... slowly... the role of quoting came to the forefront.  Quotes were used to *suppress* splicing (in contrast with today&#39;s isotopic blocks through SPREAD, which *request* the splicing).

So the anti-spread behavior looked something like:

    &gt;&gt; append [a b c] first [[d e]]
    == [a b c d e]

    &gt;&gt; append [a b c] first [&#39;[d e]]
    == [a b c [d e]]

I&#39;m picking out of an outer block there just to avoid confusion, because notice what happens when there&#39;s no container:

    &gt;&gt; append [a b c] [d e]
    == [a b c d e]

    &gt;&gt; append [a b c] &#39;[d e]
    == [a b c d e]

By design, the evaluator strips off quotes, leading to potential confusion when it comes to what people might think they could do with such a system.

You might think that this is all fine and you could just call the function QUOTE instead of putting a quote mark on the value.  Hence the quoted block is an evaluation *product* not an evaluation *input*...and so it makes it to the append:

    &gt;&gt; append [a b c] [d e]
    == [a b c d e]

    &gt;&gt; append [a b c] quote [d e]
    == [a b c [d e]]

But there were protections that were added to try and discern if you were adding non-inert values without quoting them.

    &gt;&gt; append [a b c] &quot;this was presumed okay since it was inert&quot;
    == [a b c &quot;this was presumed okay since it was inert&quot;]

    &gt;&gt; append [a b c] &#39;d
    ** Error: d is a WORD! and evaluative...your callsite might accidentally lose an
        apostrophe if you didn&#39;t know what you were doing.  Quote it to be safe.

*(Note: I always disliked how these errors were working, I just hadn&#39;t gotten to the isotope design yet.  They did afford some protection.)*

This would lead you to a couple of bad options to work with the case when you had something evalutative at source level:

    &gt;&gt; append [a b c] quote &#39;d
    == [a b c d]

    &gt;&gt; append [a b c] &#39;&#39;d
    == [a b c d]

In an attempt to make the &quot;just add a thing at source level&quot; case a slight bit easier, I made JUST.

    &gt;&gt; just d
    == &#39;d

    &gt;&gt; append [a b c] just d
    == [a b c d]

### Let&#39;s Take A Moment To Be Thankful For Isotopes...

All of this is behind us now.

:pray: 

But of course, the mechanics are actually nearly identical.  Just subtract 1 from all the quoting levels, and allow -1 for BLOCK!s.  *(Then build upon years of diligence in bulletproofing the system from leaking -1 quotelevels where they shouldn&#39;t be.)*

## But JUST is Free Again.  Now What?

There was a time when JUST was what I now call THE.

    &gt;&gt; just x
    == x

    &gt;&gt; just &#39;&#39;[foo]
    == &#39;&#39;[foo]

I thought it was a good word for it at the time.  But THE won me over:

    &gt;&gt; the x
    == x

    &gt;&gt; the &#39;&#39;[foo]
    == &#39;&#39;[foo]

### Maybe Something That Limits to One Expression Only?

    &gt;&gt; just add 1 2
    == 3

    &gt;&gt; just add 1 2 10
    ** FAIL: JUST code had residual material: 10

I&#39;ve been wanting a syntax for this at the API level, when you think you&#39;re running one expression:

    REBVAL* sum = rebJust(&quot;add&quot;, value1, value2, &quot;10&quot;);

In that world, it&#39;s not any more typing (actually less typing than rebValue)...but gives you an extra bit of safety.  

With regular (non-API) code, I can see it being very useful in generated code scenarios.

### Perhaps A THE-like Operator With A Shade of Meaning In PARSE?

PARSE needs to keep raw material sometimes, and I&#39;ve pointed out some of the hazards in the past of making you do this with GROUP!s when nested compositions are involved.

So might these be different?  As an example:

    parse ... [x: the &#39;&#39;foo] =&gt; parse ... [x: (the &#39;&#39;foo)]

    parse ... [x: just &#39;&#39;foo] =&gt; parse ... [x: &#39;&#39;&#39;foo]

So above, THE is synthesizing &#39;&#39;foo out of whole cloth with no need to match it in the input.  The other would require a &#39;&#39;foo in the input to be considered a match.

For WORD!s, the above sense of JUST isn&#39;t as necessary, as there&#39;s a decent visual trick:

    parse ... [x: just &#39;&#39;foo] =&gt; parse ... [x: &#39;|&#39;&#39;foo|]

But other datatypes would not have this out, and you&#39;d always be reading the thing you see in the rule as having one more quote level than what you&#39;re matching.

There&#39;s the option of putting it in an @ group:

    parse ... [x: just &#39;&#39;foo] =&gt; parse ... [x: @(the &#39;&#39;foo)]

But this has the problems I mention about nested composition that can be a major hassle when writing rule genreators and you have to weasel something like **`&#39;&#39;foo`** inside a group inside a composed block.

This definition might jibe with keeping the regular evaluator meaning of JUST as it is (literal but add a quoting level).

### Other Ideas?

Hopefully no one wants to fight to swap JUST with THE, because I really like THE as it is.</description>
    
    <lastBuildDate>Fri, 19 Aug 2022 03:09:39 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/just-for-sale-low-mileage-original-owner-like-new/1923.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>JUST For Sale - Low Mileage, Original Owner, Like New</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As the /ONLY debacle was chipped away at... slowly... the role of quoting came to the forefront.  Quotes were used to <em>suppress</em> splicing (in contrast with today's isotopic blocks through SPREAD, which <em>request</em> the splicing).</p>
<p>So the anti-spread behavior looked something like:</p>
<pre><code>&gt;&gt; append [a b c] first [[d e]]
== [a b c d e]

&gt;&gt; append [a b c] first ['[d e]]
== [a b c [d e]]
</code></pre>
<p>I'm picking out of an outer block there just to avoid confusion, because notice what happens when there's no container:</p>
<pre><code>&gt;&gt; append [a b c] [d e]
== [a b c d e]

&gt;&gt; append [a b c] '[d e]
== [a b c d e]
</code></pre>
<p>By design, the evaluator strips off quotes, leading to potential confusion when it comes to what people might think they could do with such a system.</p>
<p>You might think that this is all fine and you could just call the function QUOTE instead of putting a quote mark on the value.  Hence the quoted block is an evaluation <em>product</em> not an evaluation <em>input</em>...and so it makes it to the append:</p>
<pre><code>&gt;&gt; append [a b c] [d e]
== [a b c d e]

&gt;&gt; append [a b c] quote [d e]
== [a b c [d e]]
</code></pre>
<p>But there were protections that were added to try and discern if you were adding non-inert values without quoting them.</p>
<pre><code>&gt;&gt; append [a b c] "this was presumed okay since it was inert"
== [a b c "this was presumed okay since it was inert"]

&gt;&gt; append [a b c] 'd
** Error: d is a WORD! and evaluative...your callsite might accidentally lose an
    apostrophe if you didn't know what you were doing.  Quote it to be safe.
</code></pre>
<p><em>(Note: I always disliked how these errors were working, I just hadn't gotten to the isotope design yet.  They did afford some protection.)</em></p>
<p>This would lead you to a couple of bad options to work with the case when you had something evalutative at source level:</p>
<pre><code>&gt;&gt; append [a b c] quote 'd
== [a b c d]

&gt;&gt; append [a b c] ''d
== [a b c d]
</code></pre>
<p>In an attempt to make the "just add a thing at source level" case a slight bit easier, I made JUST.</p>
<pre><code>&gt;&gt; just d
== 'd

&gt;&gt; append [a b c] just d
== [a b c d]
</code></pre>
<h3>Let's Take A Moment To Be Thankful For Isotopes...</h3>
<p>All of this is behind us now.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/pray.png?v=9" title=":pray:" class="emoji only-emoji" alt=":pray:"></p>
<p>But of course, the mechanics are actually nearly identical.  Just subtract 1 from all the quoting levels, and allow -1 for BLOCK!s.  <em>(Then build upon years of diligence in bulletproofing the system from leaking -1 quotelevels where they shouldn't be.)</em></p>
<h2>But JUST is Free Again.  Now What?</h2>
<p>There was a time when JUST was what I now call THE.</p>
<pre><code>&gt;&gt; just x
== x

&gt;&gt; just ''[foo]
== ''[foo]
</code></pre>
<p>I thought it was a good word for it at the time.  But THE won me over:</p>
<pre><code>&gt;&gt; the x
== x

&gt;&gt; the ''[foo]
== ''[foo]
</code></pre>
<h3>Maybe Something That Limits to One Expression Only?</h3>
<pre><code>&gt;&gt; just add 1 2
== 3

&gt;&gt; just add 1 2 10
** FAIL: JUST code had residual material: 10
</code></pre>
<p>I've been wanting a syntax for this at the API level, when you think you're running one expression:</p>
<pre><code>REBVAL* sum = rebJust("add", value1, value2, "10");
</code></pre>
<p>In that world, it's not any more typing (actually less typing than rebValue)...but gives you an extra bit of safety.</p>
<p>With regular (non-API) code, I can see it being very useful in generated code scenarios.</p>
<h3>Perhaps A THE-like Operator With A Shade of Meaning In PARSE?</h3>
<p>PARSE needs to keep raw material sometimes, and I've pointed out some of the hazards in the past of making you do this with GROUP!s when nested compositions are involved.</p>
<p>So might these be different?  As an example:</p>
<pre><code>parse ... [x: the ''foo] =&gt; parse ... [x: (the ''foo)]

parse ... [x: just ''foo] =&gt; parse ... [x: '''foo]
</code></pre>
<p>So above, THE is synthesizing ''foo out of whole cloth with no need to match it in the input.  The other would require a ''foo in the input to be considered a match.</p>
<p>For WORD!s, the above sense of JUST isn't as necessary, as there's a decent visual trick:</p>
<pre><code>parse ... [x: just ''foo] =&gt; parse ... [x: '|''foo|]
</code></pre>
<p>But other datatypes would not have this out, and you'd always be reading the thing you see in the rule as having one more quote level than what you're matching.</p>
<p>There's the option of putting it in an @ group:</p>
<pre><code>parse ... [x: just ''foo] =&gt; parse ... [x: @(the ''foo)]
</code></pre>
<p>But this has the problems I mention about nested composition that can be a major hassle when writing rule genreators and you have to weasel something like <strong><code>''foo</code></strong> inside a group inside a composed block.</p>
<p>This definition might jibe with keeping the regular evaluator meaning of JUST as it is (literal but add a quoting level).</p>
<h3>Other Ideas?</h3>
<p>Hopefully no one wants to fight to swap JUST with THE, because I really like THE as it is.</p>
          <p><a href="https://forum.rebol.info/t/just-for-sale-low-mileage-original-owner-like-new/1923/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/just-for-sale-low-mileage-original-owner-like-new/1923/1</link>
        <pubDate>Fri, 19 Aug 2022 03:09:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1923-1</guid>
        <source url="https://forum.rebol.info/t/just-for-sale-low-mileage-original-owner-like-new/1923.rss">JUST For Sale - Low Mileage, Original Owner, Like New</source>
      </item>
  </channel>
</rss>
