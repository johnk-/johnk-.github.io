<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should ANY-VALUE! Include Stable Antiforms?</title>
    <link>https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026</link>
    <description>If you don&#39;t put any type restrictions on a parameter, it will allow antiforms:

     &gt;&gt; foo: func [x] [probe x]

    &gt;&gt; foo null
    ~null~  ; anti

And right now, that is a full synonym for ANY-VALUE!.

     &gt;&gt; foo: func [x [any-value!]] [probe x]

    &gt;&gt; foo null
    ~null~  ; isotope

**But what if you want to exclude antiforms, and only accept things that can legally be put in blocks?**

We could have a name for the typeset excluding antiforms.  ANY-ARRAY-ITEM! would be pedantically explicit, but seems accurate enough.

Or we could say that ANY-VALUE! doesn&#39;t include antiforms by default, and so you have to write **[any-value! antiform!]** if you want them.  Or just include the specific ones you intend (like **[null! any-value!]**).

However, the code has a meaning for Value*, and it really is pretty much literally *&quot;the kind of state that can be held by a variable&quot;*.  So I think we need another name.</description>
    
    <lastBuildDate>Wed, 04 Sep 2024 09:50:34 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should ANY-VALUE! Include Stable Antiforms?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2026">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm scratching my head over the usefulness of an Element subclass in the implementation itself (beyond the exposed typeset)</p>
</blockquote>
</aside>
<p>Ultimately I deemed it <em>critical</em> to invent mechanics to stop writes of antiforms into array cells (or of unstable antiforms into variables).</p>
<p>So I broke down the implementation into <strong>Cell</strong>, <strong>Atom</strong>, <strong>Value</strong>, and <strong>Element</strong>.  Cell is an internal concept that doesn't correspond to any direct terms in userspace.  But ANY-ATOM?, ANY-VALUE?, and ANY-ELEMENT? are exposed and correspond to the implementation subclasses.</p>
<p>The C++ build does helpful type-checking to try and make sure everything lines up.  But you can compile the sources as plain C also, which simply defines Atom/Value/Element as synonyms for Cell.</p>
<p>I showed the code to ChatGPT and explained what the motivations were.  It made a summary good enough to put as a comment in the source (edited a bit):</p>
<pre><code>//=//// CELL SUBCLASSES FOR QUARANTINING STABLE AND UNSTABLE ANTIFORMS /////=//
//
// Systemically, we want to stop antiforms from being put into the array
// elements of blocks, groups, paths, and tuples.  We also want to prevent
// unstable antiforms from being the values of variables.  To make it easier
// to do this, the C++ build offers the ability to make `Element` that
// can't hold any antiforms, `Value` that can hold stable antiforms, and
// `Atom` that can hold anything--including unstable isotopes.
//
// * Class Hierarchy: Atom as base, Value derived, Element derived
//   (upside-down for compile-time error preferences--we want passing an
//   Atom to a routine that expects only Element to fail)
//
// * Primary Goal: Prevent passing Atoms/Values to Element-only routines,
//   or Atoms to Value-only routines.
//
// * Secondary Goal: Prevent things like passing Element cells to writing
//   routines that may potentially produce antiforms in that cell.
//
// * Tertiary Goal: Detect things like superfluous Is_Antiform() calls
//   being made on Elements.
//
// The primary goal is achieved by choosing Element as a most-derived type
// instead of a base type.  The next two goals are trickier, and require a
// smart pointer class to wrap the pointers and invert the class hierarchy
// in terms of what are accepted for initialization (see Sink() and Need()).
//
// Additionally, the Cell* class is differentiated by not allowing you to
// ask for its "type".  This makes it useful in passing to routines that
// are supposed to act agnostically regarding the quoting level of the cell,
// such as molding...where the quoting level is accounted for by the core
// molding process, and mold callbacks are only supposed to account for the
// cell payloads.
//
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026/4</link>
        <pubDate>Wed, 04 Sep 2024 09:40:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2026-4</guid>
        <source url="https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026.rss">Should ANY-VALUE! Include Stable Antiforms?</source>
      </item>
      <item>
        <title>Should ANY-VALUE! Include Stable Antiforms?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2026">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But what if you want to exclude antiforms, and only accept things that can legally be put in blocks?</p>
</blockquote>
</aside>
<p>In the mechanics of the implementation, I use the name "Cell" as the base class of "Value".</p>
<p>This was originally a distinction that was made for binding.  A "Value" was something that combined a raw array cell with the information needed to look things up in it.  (e.g. a Cell + a FRAME!). If you had just a WORD! <code>Cell*</code> in your hand, you could not ask to look up its variable... you had to combine it with a "Specifier" to get a <code>Value*</code> first.</p>
<p>Cells are the base class of lots of things.  When you have an antiform ERROR!, that's in something that derives from Cell as well.  Hence I don't think ANY-CELL! is a good name for ANY-ARRAY-ITEM!  The implementation shouldn't be using words incongruently from usermode.</p>
<p>Perhaps <strong><code>Element</code></strong> is a good name for things you can put in array slots?</p>
<p>I'm scratching my head over the usefulness of an Element subclass in the implementation itself (beyond the exposed typeset).  One of the problems is that Rebol guts are based on using common array routines for objects and function frames...and so even common-sense-sounding ideas like "you can't just increment a pointer to a variable to get to another variable" are subverted all over the place.</p>
<p>I'll have to keep thinking on it, but at least there's a bit of progress with the "element" term.  So append would accept <strong><code>[void! any-element! splice!]</code></strong>... with void resulting in a no-op, element adding a single item, and splice adding an array itemwise.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026/2</link>
        <pubDate>Wed, 21 Jun 2023 16:28:46 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2026-2</guid>
        <source url="https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026.rss">Should ANY-VALUE! Include Stable Antiforms?</source>
      </item>
      <item>
        <title>Should ANY-VALUE! Include Stable Antiforms?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>If you don't put any type restrictions on a parameter, it will allow antiforms:</p>
<pre><code> &gt;&gt; foo: func [x] [probe x]

&gt;&gt; foo null
~null~  ; anti
</code></pre>
<p>And right now, that is a full synonym for ANY-VALUE!.</p>
<pre><code> &gt;&gt; foo: func [x [any-value!]] [probe x]

&gt;&gt; foo null
~null~  ; isotope
</code></pre>
<p><strong>But what if you want to exclude antiforms, and only accept things that can legally be put in blocks?</strong></p>
<p>We could have a name for the typeset excluding antiforms.  ANY-ARRAY-ITEM! would be pedantically explicit, but seems accurate enough.</p>
<p>Or we could say that ANY-VALUE! doesn't include antiforms by default, and so you have to write <strong>[any-value! antiform!]</strong> if you want them.  Or just include the specific ones you intend (like <strong>[null! any-value!]</strong>).</p>
<p>However, the code has a meaning for Value*, and it really is pretty much literally <em>"the kind of state that can be held by a variable"</em>.  So I think we need another name.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026/1</link>
        <pubDate>Fri, 14 Apr 2023 21:37:51 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2026-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-any-value-include-stable-antiforms/2026.rss">Should ANY-VALUE! Include Stable Antiforms?</source>
      </item>
  </channel>
</rss>
