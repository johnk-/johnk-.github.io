<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rebol 1.0.2 Quick Start Guide</title>
    <link>https://rebol.metaeducation.com/t/rebol-1-0-2-quick-start-guide/2341</link>
    <description>&gt; Discovered at FTP cache: [https://grumbeer.dyndns.org/ftp/www.ibiblio.org/](https://grumbeer.dyndns.org/ftp/www.ibiblio.org/distributions/redhat-5.1/apps-i386/REBOL/)
&gt;
&gt; *README.txt says Rebol 1.0.2 was released 6-October-1998*
&gt;
&gt; See also:
&gt;
&gt; * [Discussion Thread: **Rebol 1.0 Retrospective**](https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788)
&gt;
&gt; * [**Rebol 1.0.2 User&#39;s Guide**](https://rebol.metaeducation.com/t/rebol-1-0-2-users-guide/2340)
&gt;
&gt; * [**The %rebol.r Boot File From Rebol 1.0**](https://rebol.metaeducation.com/t/the-rebol-r-boot-file-from-rebol-1-0/2344)

---
&gt; **Copyright (c)1998 REBOL Technologies. All Rights Reserved.**
---

# REBOL/Core Quick Start Guide

### About This Guide

This guide includes the facts you need to start using REBOL (pronounced REB-ul) quickly. It offers concise information for installing REBOL on any of numerous computer operating systems. This guide then summarizes the spirit of REBOL: what it is, how it functions, and how to put it to work for you quickly. Finally, this guide offers steps for learning more about the power of REBOL.

No prior knowledge of computer languages is needed to use REBOL. In fact, if you have used other languages, forget what you know because REBOL’s approach to computer language is refreshingly unique. It’s simple.

### How to Install REBOL

Here are the procedures for installing REBOL on your computer:

1. Make a new directory for the files, typically named REBOL.

2. Uncompress the distribution file using the standard method for the operating system.

3. Move the uncompressed files to the new directory.

That’s it. The three REBOL files are **rebol.exe** (executable program), **rebol.r** (initialization file), and **user.r** (your definitions file). You can customize your copy of REBOL using **user.r**, but do not modify **rebol.r**. If you accidentally do modify **rebol.r**, reinstall it.

Also included in the release are documentation files in HTML format: **quick.html**, **users.html**, and **experts.html**. They can be read with a web browser program.

To uninstall REBOL, simply delete the directory and files.

### The REBOL Spirit

Computers are designed to solve problems for people (though it may not always seem that way). The problems are defined using a computer *language* .

REBOL is an acronym for **relative expression-based object language** . That means it’s a language that uses clear expressions rather than cryptic codes to instruct a computer.

A *programming language* communicates between computers and programs. You must understand how computers function to write programs for them. For example, instructing a computer to print the phrase &quot;REBOL World&quot; on the screen would look like this in Java programming language:

    class REBOLWorldApp {
        public static void main(String[] args) {
            System.out.println(&quot;REBOL World!&quot;)
        }
    }

Most computer languages require that you think like a computer rather than a human to communicate with it. REBOL communicates in human terms. The REBOL instruction for &quot;REBOL World&quot; looks like this:

    print &quot;REBOL World&quot;

Much simpler!

Simplicity is power. REBOL can do much more than display phrases on your computer. It can do mathematical calculations, filter and respond to your email, send files to other computers, manage databases, and more. And information isn’t lost if moved to another computer. REBOL is system independent.

That’s because REBOL is a messaging language. A *messaging language* communicates information between applications running on other computers. Unfortunately, most computers don’t communicate well with other computers. Some data from Windows applications, for example, can’t be read on Linux or Macintosh computers, and vise versa. REBOL passes useable data and messages between otherwise incompatible computer systems.

English and other human languages are messaging languages between people. REBOL is a messaging language between computer applications. That makes REBOL easier and more natural to use than other computer languages.

Let’s get started using REBOL!

### Getting Started in REBOL

You write REBOL instructions as a **script** . Think of a REBOL script as the first half of a conversation with REBOL. The second half is the answer that REBOL gives you, called the **result** .

You’ve learned from the &quot;REBOL World&quot; example that **print** requests an output and that **&quot;&quot;** encloses a **string** of characters. Easy enough, but not very useful yet.

What if you could give REBOL data that it works on, then gives back to you? What if it could add up your bills, sort your address book, backup computer files, or handle your email for you? Those tasks would be more useful to you.

To write simple REBOL scripts to handle these and other tasks, you need to know more of the power inside of REBOL. So let’s look at the REBOL language and define some terms.

In REBOL, any *type of data* is called a **value** . A **datatype** can be a

* string (&quot;REBOL World&quot;)
* date (1-Jan-2000)
* integer (1 100 -1000)
* decimal (1.25)
* tuple (1.0.3 255.355.100)
* email address (johnny@rebol.com)
* url (http://www.rebol.com/)
* block ([11 47 26 999])
* file (%rebol.r)
* word (when)

In fact, REBOL knows and uses dozens of datatypes (defined with examples in **[Expert’s Guide](experts.html)** ). **Datatypes** are simply types of data that REBOL already knows how to handle. For example, it sees an *at sign* (@) in a string (johnny@rebol.com), REBOL knows that the string is an email address.

REBOL datatypes are *smart* . Adding an exclamation point after the datatype (date!) tells REBOL to return the result in the standard international date format (day-month-year) — even if you type it in another format.

Smart datatypes make writing REBOL scripts easy.

### Writing a REBOL Script

Now, let’s put REBOL to work!

First, you want to **make** a tool or **function** that actually does the work. Let’s call it when and define it (:) like this:

    when: make date! [30 9 1998]

As you can see, you **make** when a function that changes the given value to a standard date format (!). The block defines what value is used [30 9 1998]. So what else do you have to tell REBOL?

    print when

and REBOL’s result is

    30-Sept-1998

The REBOL script you wrote defined when exactly like the prototype date! using the numbers you put in the block.

A REBOL script is written in expressions. An **expression** is a group of values which REBOL *evaluates* , then returns a new value. In REBOL, to **evaluate** is to interpret a group of values toward a purpose or result.

For example, when: make date! [30 9 1998] is an expression that is evaluated as you tell REBOL to print when and return the **result** of the evaluation: 30-Sept-1998.

REBOL offers numerous built-in datatypes. One of the most powerful is *word* . A REBOL **word** is a symbol used literally *or* as a variable. In the above example, when was a variable that you defined. It was defined with the colon (when: make date!) then evaluated (print when) to produce a result.

*Note: **All** REBOL words can have a different meaning depending on context, just as English words do. The English word &quot;print,&quot; for example, can have different meanings when used in computing, fashion, and graphics. So REBOL words can be recycled. It’s a powerful feature that you can learn more about in the **[User’s Guide](users.html)*** .

So what actually evaluates these expressions? **Native** functions are built-in REBOL functions that you can use right now. They are native to REBOL. In the above example, print and make are natives. Other REBOL natives include load, send, foreach, save, next, and two hundred others. You can get their definitions in the **[Expert’s Guide](experts.html)** and see them at work in the **[User’s Guide](users.html)** .

*Note: You can also get information on any function by simply typing* help *followed by the native (* help load*). REBOL will print a description of the function on the display screen.*

And here’s one of the powerful &quot;secrets&quot; of REBOL: you can use natives to design your own functions. It’s like being able to make up your own words when you speak to people and they know exactly what you mean!

The example REBOL script used the **date** native to make a new function called when with the expression:

    when: make date! [30 9 1998]

Let’s summarize. REBOL is a messaging language that evaluates expressions and returns values. REBOL expressions include values in common datatype formats as well as user-defined words. Does that make sense? If not, please reread the above section.

Congratulations! You’re now writing REBOL scripts.

### Using More REBOL Power

These simple principles for writing REBOL scripts can easily be expanded to solve problems using a computer. Many practical solutions will be described more fully in **[User’s Guide](users.html)** .

Think of writing a REBOL script as you would write anything else. You use words to build phrases (*expressions* ) and sentences (*functions* ) until you have a complete paragraph (*object* ). You may write more paragraphs or simply reuse some you’ve written before until you have a complete document (*script* ).

REBOL scripts are built in the same way. To show you how, let’s define some more REBOL terms.

First is object, just mentioned. A REBOL **object** has values, functions, and even other objects, grouped together within a context. For example,

    headline: make object! [font: &quot;arial&quot; size: 24 color: black]

makes an **object** that defines what a document’s headline should look like.

You can then make another object called text with size: 12 type and REBOL won’t be confused by the two definitions of size.

You can also use REBOL to change the headline size to 18 with

    headline/size: 18

The technique is called *accessing an object variable* . It makes REBOL easy to modify.

One more tip: REBOL is free form. To enhance readability, you can script the headline example like this (once black is defined):

    headline: make object! [ font: &quot;arial&quot; size: 24 color: black ]

This is the preferred format for writing REBOL scripts.

Let’s expand on some earlier definitions so you’re more fluent in REBOL.

The data within the bracket `[]` is called an argument. An **argument** is a value that provides a value to an expression. Some natives don’t require an argument while others can handle many. **Expert’s Guide** will tell you the type and number of arguments that each function uses.

Providing an argument to a function is called **passing** the argument. For example,

    print &quot;REBOL World&quot;

passes a &quot;string&quot; to the print function. From another viewpoint, you could say that you are **applying** the print function to the string.

Here’s a tool that makes REBOL even easier to use. You can make a new function with the native **func.** For example, to make a new function called sum that totals two numbers, designated as a and b:

    sum: func [a b] [a + b]

This expression tells REBOL to define sum by making a new function datatype where a is the first number and b is the second number. Then add (+) the first and second number and give me the result.

To use this function, add the line:

    print sum 50 100

and REBOL returns the value

    150

The length of your script or conversation with REBOL can be just a few lines or a few pages — **but it will be easier to write and understand than with other computer languages.**

### REBOL at Work

Ready for some real-world examples of what REBOL messaging language can do for you? (You’ll meet the *natives* used here in the **[User’s Guide](users.html)** and the **[Expert’s Guide](experts.html)** .)

To grab an Internet web page and save it as a file (%):

    file: read http://www.rebol.com save %rebolpage.html file

or you can write it in a single line:

    save %rebolpage.html read http://www.rebol.com

To email that web page to a friend:

    send friend@domain.com read http://www.rebol.com

To email all the files in a directory to your friend:

    files: load %c:/rebol/* foreach file files [send friend@rebol.com read file]

To build a calendar database that holds things to do (prioritized):

    todo [
        ; PRI TYPE DESCRIPTION
        9 code &quot;Write SAVE function&quot;
        8 fun &quot;Bottle brew for friends&quot;
        8 docs &quot;Write Chapter 1&quot;
        5 yard &quot;Tend the Merlot vines&quot;
        3 code &quot;Parametric search function&quot;
        2 web &quot;Call Microsoft re:problems&quot;
        1 home &quot;Tune-up tractor engine&quot;
        0 yard &quot;Fix the fence near berries&quot;
    ]

    ; Type Descriptions
    [
        code &quot;write code&quot;
        docs &quot;write docs&quot;
        yard &quot;yard work&quot;
        home &quot;house stuff&quot;
        fun &quot;relaxation&quot;
        web &quot;web related&quot;
    ]

To send your stockbroker an important transaction message:

    send broker@stockbroker.com [
        Company: &quot;Microsoft&quot;
        Symbol: MSFT
        Shares: 1000
        Action: sell
    ]

REBOL makes solutions easier!

### What’s Next?

That’s all you really need to know to use the *power of REBOL* ! Of course, there’s much more to know about REBOL to become a *power user* . The remainder of these guides will add to your knowledge and enjoyment of REBOL.

**[User’s Guide](users.html)** will show you how to solve specific problems with REBOL.

**[Expert’s Guide](experts.html)** is your reference manual for REBOL. It includes a description and examples of more than 200 REBOL words and word groups.

Finally, check the REBOL web site for more information and examples on how others are using REBOL messaging language. It’s at [http://www.rebol.com](http://www.rebol.com/).

Have fun, REBOL!</description>
    
    <lastBuildDate>Tue, 06 Oct 1998 04:00:00 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://rebol.metaeducation.com/t/rebol-1-0-2-quick-start-guide/2341.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rebol 1.0.2 Quick Start Guide</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://rebol.metaeducation.com/t/rebol-1-0-2-quick-start-guide/2341/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/rebol-1-0-2-quick-start-guide/2341/2</link>
        <pubDate>Sun, 01 Dec 2024 09:01:30 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2341-2</guid>
        <source url="https://rebol.metaeducation.com/t/rebol-1-0-2-quick-start-guide/2341.rss">Rebol 1.0.2 Quick Start Guide</source>
      </item>
      <item>
        <title>Rebol 1.0.2 Quick Start Guide</title>
        <dc:creator><![CDATA[rebolbot]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Discovered at FTP cache: <a href="https://grumbeer.dyndns.org/ftp/www.ibiblio.org/distributions/redhat-5.1/apps-i386/REBOL/">https://grumbeer.dyndns.org/ftp/www.ibiblio.org/</a></p>
<p><em>README.txt says Rebol 1.0.2 was released 6-October-1998</em></p>
<p>See also:</p>
<ul>
<li>
<p><a href="https://rebol.metaeducation.com/t/rebol-1-0-retrospective/1788">Discussion Thread: <strong>Rebol 1.0 Retrospective</strong></a></p>
</li>
<li>
<p><a href="https://rebol.metaeducation.com/t/rebol-1-0-2-users-guide/2340"><strong>Rebol 1.0.2 User's Guide</strong></a></p>
</li>
<li>
<p><a href="https://rebol.metaeducation.com/t/the-rebol-r-boot-file-from-rebol-1-0/2344"><strong>The %rebol.r Boot File From Rebol 1.0</strong></a></p>
</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p><strong>Copyright (c)1998 REBOL Technologies. All Rights Reserved.</strong></p>
</blockquote>
<hr>
<h1><a name="p-7948-rebolcore-quick-start-guide-1" class="anchor" href="https://rebol.metaeducation.com#p-7948-rebolcore-quick-start-guide-1"></a>REBOL/Core Quick Start Guide</h1>
<h3><a name="p-7948-about-this-guide-2" class="anchor" href="https://rebol.metaeducation.com#p-7948-about-this-guide-2"></a>About This Guide</h3>
<p>This guide includes the facts you need to start using REBOL (pronounced REB-ul) quickly. It offers concise information for installing REBOL on any of numerous computer operating systems. This guide then summarizes the spirit of REBOL: what it is, how it functions, and how to put it to work for you quickly. Finally, this guide offers steps for learning more about the power of REBOL.</p>
<p>No prior knowledge of computer languages is needed to use REBOL. In fact, if you have used other languages, forget what you know because REBOL’s approach to computer language is refreshingly unique. It’s simple.</p>
<h3><a name="p-7948-how-to-install-rebol-3" class="anchor" href="https://rebol.metaeducation.com#p-7948-how-to-install-rebol-3"></a>How to Install REBOL</h3>
<p>Here are the procedures for installing REBOL on your computer:</p>
<ol>
<li>
<p>Make a new directory for the files, typically named REBOL.</p>
</li>
<li>
<p>Uncompress the distribution file using the standard method for the operating system.</p>
</li>
<li>
<p>Move the uncompressed files to the new directory.</p>
</li>
</ol>
<p>That’s it. The three REBOL files are <strong>rebol.exe</strong> (executable program), <strong>rebol.r</strong> (initialization file), and <strong>user.r</strong> (your definitions file). You can customize your copy of REBOL using <strong>user.r</strong>, but do not modify <strong>rebol.r</strong>. If you accidentally do modify <strong>rebol.r</strong>, reinstall it.</p>
<p>Also included in the release are documentation files in HTML format: <strong>quick.html</strong>, <strong>users.html</strong>, and <strong>experts.html</strong>. They can be read with a web browser program.</p>
<p>To uninstall REBOL, simply delete the directory and files.</p>
<h3><a name="p-7948-the-rebol-spirit-4" class="anchor" href="https://rebol.metaeducation.com#p-7948-the-rebol-spirit-4"></a>The REBOL Spirit</h3>
<p>Computers are designed to solve problems for people (though it may not always seem that way). The problems are defined using a computer <em>language</em> .</p>
<p>REBOL is an acronym for <strong>relative expression-based object language</strong> . That means it’s a language that uses clear expressions rather than cryptic codes to instruct a computer.</p>
<p>A <em>programming language</em> communicates between computers and programs. You must understand how computers function to write programs for them. For example, instructing a computer to print the phrase "REBOL World" on the screen would look like this in Java programming language:</p>
<pre><code>class REBOLWorldApp {
    public static void main(String[] args) {
        System.out.println("REBOL World!")
    }
}
</code></pre>
<p>Most computer languages require that you think like a computer rather than a human to communicate with it. REBOL communicates in human terms. The REBOL instruction for "REBOL World" looks like this:</p>
<pre><code>print "REBOL World"
</code></pre>
<p>Much simpler!</p>
<p>Simplicity is power. REBOL can do much more than display phrases on your computer. It can do mathematical calculations, filter and respond to your email, send files to other computers, manage databases, and more. And information isn’t lost if moved to another computer. REBOL is system independent.</p>
<p>That’s because REBOL is a messaging language. A <em>messaging language</em> communicates information between applications running on other computers. Unfortunately, most computers don’t communicate well with other computers. Some data from Windows applications, for example, can’t be read on Linux or Macintosh computers, and vise versa. REBOL passes useable data and messages between otherwise incompatible computer systems.</p>
<p>English and other human languages are messaging languages between people. REBOL is a messaging language between computer applications. That makes REBOL easier and more natural to use than other computer languages.</p>
<p>Let’s get started using REBOL!</p>
<h3><a name="p-7948-getting-started-in-rebol-5" class="anchor" href="https://rebol.metaeducation.com#p-7948-getting-started-in-rebol-5"></a>Getting Started in REBOL</h3>
<p>You write REBOL instructions as a <strong>script</strong> . Think of a REBOL script as the first half of a conversation with REBOL. The second half is the answer that REBOL gives you, called the <strong>result</strong> .</p>
<p>You’ve learned from the "REBOL World" example that <strong>print</strong> requests an output and that <strong>""</strong> encloses a <strong>string</strong> of characters. Easy enough, but not very useful yet.</p>
<p>What if you could give REBOL data that it works on, then gives back to you? What if it could add up your bills, sort your address book, backup computer files, or handle your email for you? Those tasks would be more useful to you.</p>
<p>To write simple REBOL scripts to handle these and other tasks, you need to know more of the power inside of REBOL. So let’s look at the REBOL language and define some terms.</p>
<p>In REBOL, any <em>type of data</em> is called a <strong>value</strong> . A <strong>datatype</strong> can be a</p>
<ul>
<li>string ("REBOL World")</li>
<li>date (1-Jan-2000)</li>
<li>integer (1 100 -1000)</li>
<li>decimal (1.25)</li>
<li>tuple (1.0.3 255.355.100)</li>
<li>email address (<a href="mailto:johnny@rebol.com">johnny@rebol.com</a>)</li>
<li>url (<a href="http://www.rebol.com/">http://www.rebol.com/</a>)</li>
<li>block ([11 47 26 999])</li>
<li>file (%rebol.r)</li>
<li>word (when)</li>
</ul>
<p>In fact, REBOL knows and uses dozens of datatypes (defined with examples in <strong><a>Expert’s Guide</a></strong> ). <strong>Datatypes</strong> are simply types of data that REBOL already knows how to handle. For example, it sees an <em>at sign</em> (@) in a string (<a href="mailto:johnny@rebol.com">johnny@rebol.com</a>), REBOL knows that the string is an email address.</p>
<p>REBOL datatypes are <em>smart</em> . Adding an exclamation point after the datatype (date!) tells REBOL to return the result in the standard international date format (day-month-year) — even if you type it in another format.</p>
<p>Smart datatypes make writing REBOL scripts easy.</p>
<h3><a name="p-7948-writing-a-rebol-script-6" class="anchor" href="https://rebol.metaeducation.com#p-7948-writing-a-rebol-script-6"></a>Writing a REBOL Script</h3>
<p>Now, let’s put REBOL to work!</p>
<p>First, you want to <strong>make</strong> a tool or <strong>function</strong> that actually does the work. Let’s call it when and define it (<img src="https://rebol.metaeducation.com/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"> like this:</p>
<pre><code>when: make date! [30 9 1998]
</code></pre>
<p>As you can see, you <strong>make</strong> when a function that changes the given value to a standard date format (!). The block defines what value is used [30 9 1998]. So what else do you have to tell REBOL?</p>
<pre><code>print when
</code></pre>
<p>and REBOL’s result is</p>
<pre><code>30-Sept-1998
</code></pre>
<p>The REBOL script you wrote defined when exactly like the prototype date! using the numbers you put in the block.</p>
<p>A REBOL script is written in expressions. An <strong>expression</strong> is a group of values which REBOL <em>evaluates</em> , then returns a new value. In REBOL, to <strong>evaluate</strong> is to interpret a group of values toward a purpose or result.</p>
<p>For example, when: make date! [30 9 1998] is an expression that is evaluated as you tell REBOL to print when and return the <strong>result</strong> of the evaluation: 30-Sept-1998.</p>
<p>REBOL offers numerous built-in datatypes. One of the most powerful is <em>word</em> . A REBOL <strong>word</strong> is a symbol used literally <em>or</em> as a variable. In the above example, when was a variable that you defined. It was defined with the colon (when: make date!) then evaluated (print when) to produce a result.</p>
<p><em>Note: <strong>All</strong> REBOL words can have a different meaning depending on context, just as English words do. The English word "print," for example, can have different meanings when used in computing, fashion, and graphics. So REBOL words can be recycled. It’s a powerful feature that you can learn more about in the <strong><a>User’s Guide</a></strong></em> .</p>
<p>So what actually evaluates these expressions? <strong>Native</strong> functions are built-in REBOL functions that you can use right now. They are native to REBOL. In the above example, print and make are natives. Other REBOL natives include load, send, foreach, save, next, and two hundred others. You can get their definitions in the <strong><a>Expert’s Guide</a></strong> and see them at work in the <strong><a>User’s Guide</a></strong> .</p>
<p><em>Note: You can also get information on any function by simply typing</em> help <em>followed by the native (</em> help load*). REBOL will print a description of the function on the display screen.*</p>
<p>And here’s one of the powerful "secrets" of REBOL: you can use natives to design your own functions. It’s like being able to make up your own words when you speak to people and they know exactly what you mean!</p>
<p>The example REBOL script used the <strong>date</strong> native to make a new function called when with the expression:</p>
<pre><code>when: make date! [30 9 1998]
</code></pre>
<p>Let’s summarize. REBOL is a messaging language that evaluates expressions and returns values. REBOL expressions include values in common datatype formats as well as user-defined words. Does that make sense? If not, please reread the above section.</p>
<p>Congratulations! You’re now writing REBOL scripts.</p>
<h3><a name="p-7948-using-more-rebol-power-7" class="anchor" href="https://rebol.metaeducation.com#p-7948-using-more-rebol-power-7"></a>Using More REBOL Power</h3>
<p>These simple principles for writing REBOL scripts can easily be expanded to solve problems using a computer. Many practical solutions will be described more fully in <strong><a>User’s Guide</a></strong> .</p>
<p>Think of writing a REBOL script as you would write anything else. You use words to build phrases (<em>expressions</em> ) and sentences (<em>functions</em> ) until you have a complete paragraph (<em>object</em> ). You may write more paragraphs or simply reuse some you’ve written before until you have a complete document (<em>script</em> ).</p>
<p>REBOL scripts are built in the same way. To show you how, let’s define some more REBOL terms.</p>
<p>First is object, just mentioned. A REBOL <strong>object</strong> has values, functions, and even other objects, grouped together within a context. For example,</p>
<pre><code>headline: make object! [font: "arial" size: 24 color: black]
</code></pre>
<p>makes an <strong>object</strong> that defines what a document’s headline should look like.</p>
<p>You can then make another object called text with size: 12 type and REBOL won’t be confused by the two definitions of size.</p>
<p>You can also use REBOL to change the headline size to 18 with</p>
<pre><code>headline/size: 18
</code></pre>
<p>The technique is called <em>accessing an object variable</em> . It makes REBOL easy to modify.</p>
<p>One more tip: REBOL is free form. To enhance readability, you can script the headline example like this (once black is defined):</p>
<pre><code>headline: make object! [ font: "arial" size: 24 color: black ]
</code></pre>
<p>This is the preferred format for writing REBOL scripts.</p>
<p>Let’s expand on some earlier definitions so you’re more fluent in REBOL.</p>
<p>The data within the bracket <code>[]</code> is called an argument. An <strong>argument</strong> is a value that provides a value to an expression. Some natives don’t require an argument while others can handle many. <strong>Expert’s Guide</strong> will tell you the type and number of arguments that each function uses.</p>
<p>Providing an argument to a function is called <strong>passing</strong> the argument. For example,</p>
<pre><code>print "REBOL World"
</code></pre>
<p>passes a "string" to the print function. From another viewpoint, you could say that you are <strong>applying</strong> the print function to the string.</p>
<p>Here’s a tool that makes REBOL even easier to use. You can make a new function with the native <strong>func.</strong> For example, to make a new function called sum that totals two numbers, designated as a and b:</p>
<pre><code>sum: func [a b] [a + b]
</code></pre>
<p>This expression tells REBOL to define sum by making a new function datatype where a is the first number and b is the second number. Then add (+) the first and second number and give me the result.</p>
<p>To use this function, add the line:</p>
<pre><code>print sum 50 100
</code></pre>
<p>and REBOL returns the value</p>
<pre><code>150
</code></pre>
<p>The length of your script or conversation with REBOL can be just a few lines or a few pages — <strong>but it will be easier to write and understand than with other computer languages.</strong></p>
<h3><a name="p-7948-rebol-at-work-8" class="anchor" href="https://rebol.metaeducation.com#p-7948-rebol-at-work-8"></a>REBOL at Work</h3>
<p>Ready for some real-world examples of what REBOL messaging language can do for you? (You’ll meet the <em>natives</em> used here in the <strong><a>User’s Guide</a></strong> and the <strong><a>Expert’s Guide</a></strong> .)</p>
<p>To grab an Internet web page and save it as a file (%):</p>
<pre><code>file: read http://www.rebol.com save %rebolpage.html file
</code></pre>
<p>or you can write it in a single line:</p>
<pre><code>save %rebolpage.html read http://www.rebol.com
</code></pre>
<p>To email that web page to a friend:</p>
<pre><code>send friend@domain.com read http://www.rebol.com
</code></pre>
<p>To email all the files in a directory to your friend:</p>
<pre><code>files: load %c:/rebol/* foreach file files [send friend@rebol.com read file]
</code></pre>
<p>To build a calendar database that holds things to do (prioritized):</p>
<pre><code>todo [
    ; PRI TYPE DESCRIPTION
    9 code "Write SAVE function"
    8 fun "Bottle brew for friends"
    8 docs "Write Chapter 1"
    5 yard "Tend the Merlot vines"
    3 code "Parametric search function"
    2 web "Call Microsoft re:problems"
    1 home "Tune-up tractor engine"
    0 yard "Fix the fence near berries"
]

; Type Descriptions
[
    code "write code"
    docs "write docs"
    yard "yard work"
    home "house stuff"
    fun "relaxation"
    web "web related"
]
</code></pre>
<p>To send your stockbroker an important transaction message:</p>
<pre><code>send broker@stockbroker.com [
    Company: "Microsoft"
    Symbol: MSFT
    Shares: 1000
    Action: sell
]
</code></pre>
<p>REBOL makes solutions easier!</p>
<h3><a name="p-7948-whats-next-9" class="anchor" href="https://rebol.metaeducation.com#p-7948-whats-next-9"></a>What’s Next?</h3>
<p>That’s all you really need to know to use the <em>power of REBOL</em> ! Of course, there’s much more to know about REBOL to become a <em>power user</em> . The remainder of these guides will add to your knowledge and enjoyment of REBOL.</p>
<p><strong><a>User’s Guide</a></strong> will show you how to solve specific problems with REBOL.</p>
<p><strong><a>Expert’s Guide</a></strong> is your reference manual for REBOL. It includes a description and examples of more than 200 REBOL words and word groups.</p>
<p>Finally, check the REBOL web site for more information and examples on how others are using REBOL messaging language. It’s at <a href="http://www.rebol.com/">http://www.rebol.com</a>.</p>
<p>Have fun, REBOL!</p>
          <p><a href="https://rebol.metaeducation.com/t/rebol-1-0-2-quick-start-guide/2341/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/rebol-1-0-2-quick-start-guide/2341/1</link>
        <pubDate>Tue, 06 Oct 1998 04:00:00 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2341-1</guid>
        <source url="https://rebol.metaeducation.com/t/rebol-1-0-2-quick-start-guide/2341.rss">Rebol 1.0.2 Quick Start Guide</source>
      </item>
  </channel>
</rss>
