<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should Antiforms Be Legal in MAP! (Keys, Values?)</title>
    <link>https://rebol.metaeducation.com/t/should-antiforms-be-legal-in-map-keys-values/1995</link>
    <description>In the pre-isotopic era, there was a concept that MAP! would not allow you to store nulls.  Because null was the signal of not being in a map.  Assigning a key null was a way of removing items from that map.

    &gt;&gt; m: to map! [x 20]
    == &amp;[map! [
        x 20
    ]]

    &gt;&gt; m.x
    == 20

    &gt;&gt; m.y
    ; null

    &gt;&gt; m.x: null
    ; null

    &gt;&gt; m
    == &amp;[map! [
    ]]

Additionally, NULL was not allowed as a key.

## How Should This Change In The Isotopic Era?

We still have the case that mapping to null (or void, that causes null retrieval?) would conflate with testing for presence or absence in the map.

I&#39;ll make the point that not allowing you to store antiforms as keys or values isn&#39;t a fundamental problem, because you can LIFT a value to put it in, and then UNLIFT it when taking it out.

## Disallowing Widens The Gap With Objects

There have been questions about what the difference is between maps and objects, and this would be another: objects must be able to have members that are antiforms: action isotopes that can run implicitly, okay and null and other word antiforms, and I&#39;m presuming splices and other stable forms as well.

It would mean a map has more in common with a block...more easily being converted to or from it.

**I don&#39;t know right now whether to allow or disallow.  So for starters I am going ahead with the premise that antiforms can&#39;t be stored in maps, as either keys or values.**  We&#39;ll see how it goes.  If it is relaxed, it will be relaxed only for the values...in order to have parity with objects.</description>
    
    <lastBuildDate>Mon, 02 Jun 2025 19:36:21 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-antiforms-be-legal-in-map-keys-values/1995.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should Antiforms Be Legal in MAP! (Keys, Values?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1995">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>We still have the case that mapping to null (or void, that causes null retrieval?) would conflate with testing for presence or absence in the map.</p>
</blockquote>
</aside>
<p>In order to align with the rest of the system, "removing" keys from the map is done by assigning them VOID.</p>
<p>Accessing a key that is not in a map (or removed from it) requires you to use TRY if you want a null out of it:</p>
<pre><code> &gt;&gt; map.foo: void

 &gt;&gt; map.foo
 ** Error: ...

 &gt;&gt; try map.foo
 == ~null~  ; anti
</code></pre>
<p>If you want to know if the map has the key present, there's HAS to answer that question:</p>
<pre><code> &gt;&gt; has map 'foo
 == ~null~
</code></pre>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1995">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>For starters I am going ahead with the premise that antiforms can't be stored in maps, as either keys or values. We'll see how it goes.</p>
</blockquote>
</aside>
<p>Having seen how it goes: one of the big places that MAP! is used right now is in UPARSE, as the combinator map.  And it's a thorn to have to LIFT the DATATYPE! instances just to put them into or out of the map.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1995">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>If it is relaxed, it will be relaxed only for the values...in order to have parity with objects.</p>
</blockquote>
</aside>
<p>But the DATATYPE! is being used as a key. I think it should be able to do it.</p>
<p>However, I don't think this should work:</p>
<pre><code>&gt;&gt; m: to map! []

&gt;&gt; m.(null): 10
== 10

&gt;&gt; m.(null)
== 10
</code></pre>
<p>You lose the safety of catching nulls.  I think we could probably avoid problems by ruling out KEYWORD! antiforms in the key slot, and allow other stable antiform types (maybe not trash, but they might have use cases too).</p>
<p>But letting you map TO things like null, or trash, or whatever would make MAP! more similar to OBJECT!.  You could possibly even use the maps for binding.</p>
<h2><a name="p-8275-i-think-im-gonna-do-it-1" class="anchor" href="https://rebol.metaeducation.com#p-8275-i-think-im-gonna-do-it-1"></a>I Think I'm Gonna Do It...</h2>
<p>The contortions that are necessary to make a mapping from a datatype to other things are annoying.</p>
<p>I can imagine applications of mapping to antiform actions as opposed to non-antiform frames, and it's more direct if you're allowed to do it vs having to meta everything going in and out.</p>
<p>Really, UPARSE is a kind of calibration exercise where if I look at something like having to lift things to use them as keys or values, I can say "that feels like make-work, and it makes the source look bad, when it would look nice otherwise..."</p>
          <p><a href="https://rebol.metaeducation.com/t/should-antiforms-be-legal-in-map-keys-values/1995/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-antiforms-be-legal-in-map-keys-values/1995/3</link>
        <pubDate>Tue, 13 May 2025 18:01:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1995-3</guid>
        <source url="https://rebol.metaeducation.com/t/should-antiforms-be-legal-in-map-keys-values/1995.rss">Should Antiforms Be Legal in MAP! (Keys, Values?)</source>
      </item>
      <item>
        <title>Should Antiforms Be Legal in MAP! (Keys, Values?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the pre-isotopic era, there was a concept that MAP! would not allow you to store nulls.  Because null was the signal of not being in a map.  Assigning a key null was a way of removing items from that map.</p>
<pre><code>&gt;&gt; m: to map! [x 20]
== &amp;[map! [
    x 20
]]

&gt;&gt; m.x
== 20

&gt;&gt; m.y
; null

&gt;&gt; m.x: null
; null

&gt;&gt; m
== &amp;[map! [
]]
</code></pre>
<p>Additionally, NULL was not allowed as a key.</p>
<h2><a name="p-6517-how-should-this-change-in-the-isotopic-era-1" class="anchor" href="https://rebol.metaeducation.com#p-6517-how-should-this-change-in-the-isotopic-era-1"></a>How Should This Change In The Isotopic Era?</h2>
<p>We still have the case that mapping to null (or void, that causes null retrieval?) would conflate with testing for presence or absence in the map.</p>
<p>I'll make the point that not allowing you to store antiforms as keys or values isn't a fundamental problem, because you can LIFT a value to put it in, and then UNLIFT it when taking it out.</p>
<h2><a name="p-6517-disallowing-widens-the-gap-with-objects-2" class="anchor" href="https://rebol.metaeducation.com#p-6517-disallowing-widens-the-gap-with-objects-2"></a>Disallowing Widens The Gap With Objects</h2>
<p>There have been questions about what the difference is between maps and objects, and this would be another: objects must be able to have members that are antiforms: action isotopes that can run implicitly, okay and null and other word antiforms, and I'm presuming splices and other stable forms as well.</p>
<p>It would mean a map has more in common with a block...more easily being converted to or from it.</p>
<p><strong>I don't know right now whether to allow or disallow.  So for starters I am going ahead with the premise that antiforms can't be stored in maps, as either keys or values.</strong>  We'll see how it goes.  If it is relaxed, it will be relaxed only for the values...in order to have parity with objects.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-antiforms-be-legal-in-map-keys-values/1995/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-antiforms-be-legal-in-map-keys-values/1995/1</link>
        <pubDate>Fri, 02 Dec 2022 09:28:15 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1995-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-antiforms-be-legal-in-map-keys-values/1995.rss">Should Antiforms Be Legal in MAP! (Keys, Values?)</source>
      </item>
  </channel>
</rss>
