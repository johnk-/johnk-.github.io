<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Correct Formulation of ME and MY</title>
    <link>https://rebol.metaeducation.com/t/correct-formulation-of-me-and-my/2020</link>
    <description>The ME function is used with infix to allow you to avoid repeating the name of a variable:

    &gt;&gt; variable: 10

    &gt;&gt; variable: me + 1
    == 11

    &gt;&gt; variable
    == 11

So that&#39;s the same as if you&#39;d written **variable: variable + 1**.

There&#39;s an analogous operation for non-infix functions called MY.

    &gt;&gt; block: [a b c]

    &gt;&gt; block: my next
    == [b c]

    &gt;&gt; block
    == [b c]

So the same if you had written **block: next block**.

## Here Is The &quot;Naive&quot; Macro Implementation of ME

    me: infixed macro [
        &#39;left [set-word! set-tuple!]
        &#39;right [word! tuple! path!]
    ][
        reduce [left, plain left, right]
    ]

So the macro is looking for a SET-WORD! or SET-TUPLE! on the left, and then something indicating the action to run on the right.  It replaces the whole sequence with what was on the left, then a plain WORD! or TUPLE! version of what was on the left, and then what&#39;s on the right.

MY is done similarly, just with **reduce [left, right, plain left]** to put the repeated term after the call.

This is naive for two reasons:

* It doesn&#39;t check that what the RIGHT parameter looks up to is an action

* If the SET-TUPLE! in LEFT has a GROUP! in it, then it will be executed twice.

## Here is A &quot;Non-Naive&quot; Implementation of ME

    macro [
        &#39;left [set-word! set-tuple!]
        &#39;right [word! tuple! path!]
        &lt;local&gt; value
    ][
        [left value]: resolve left  ; avoid double-evaluation
        :[&#39;set left meta value ensure action! get right]
    ]

The RESOLVE function is used to turn a TUPLE! or PATH! with groups in it into an inert representation:

     &gt;&gt; blk: [a b [c d]]

     &gt;&gt; resolve &#39;blk.(print &quot;hi&quot;, 1 + 2).2
     hi
     == @[blk 3 2]

GET and SET accept these blocks as an alternative to words/tuples to be used to describe what to set or get.

It has to use a BLOCK! representation because not all things can be represented in paths that can be used with picking (note this implies you cannot pick with isotopes, otherwise not all blocks would be resolvable).

So long as RESOLVE is walking the path, you can ask it to give you back the value of what&#39;s there.

## But the non-naive version triggers a binding bug...

It&#39;s also rather slow.  In trying to prioritize, it may be better to just document the right answer, as I&#39;ve done here... :-/</description>
    
    <lastBuildDate>Fri, 03 Mar 2023 21:23:09 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/correct-formulation-of-me-and-my/2020.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Correct Formulation of ME and MY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The ME function is used with infix to allow you to avoid repeating the name of a variable:</p>
<pre><code>&gt;&gt; variable: 10

&gt;&gt; variable: me + 1
== 11

&gt;&gt; variable
== 11
</code></pre>
<p>So that's the same as if you'd written <strong>variable: variable + 1</strong>.</p>
<p>There's an analogous operation for non-infix functions called MY.</p>
<pre><code>&gt;&gt; block: [a b c]

&gt;&gt; block: my next
== [b c]

&gt;&gt; block
== [b c]
</code></pre>
<p>So the same if you had written <strong>block: next block</strong>.</p>
<h2><a name="p-6586-here-is-the-naive-macro-implementation-of-me-1" class="anchor" href="https://rebol.metaeducation.com#p-6586-here-is-the-naive-macro-implementation-of-me-1"></a>Here Is The "Naive" Macro Implementation of ME</h2>
<pre><code>me: infixed macro [
    'left [set-word! set-tuple!]
    'right [word! tuple! path!]
][
    reduce [left, plain left, right]
]
</code></pre>
<p>So the macro is looking for a SET-WORD! or SET-TUPLE! on the left, and then something indicating the action to run on the right.  It replaces the whole sequence with what was on the left, then a plain WORD! or TUPLE! version of what was on the left, and then what's on the right.</p>
<p>MY is done similarly, just with <strong>reduce [left, right, plain left]</strong> to put the repeated term after the call.</p>
<p>This is naive for two reasons:</p>
<ul>
<li>
<p>It doesn't check that what the RIGHT parameter looks up to is an action</p>
</li>
<li>
<p>If the SET-TUPLE! in LEFT has a GROUP! in it, then it will be executed twice.</p>
</li>
</ul>
<h2><a name="p-6586-here-is-a-non-naive-implementation-of-me-2" class="anchor" href="https://rebol.metaeducation.com#p-6586-here-is-a-non-naive-implementation-of-me-2"></a>Here is A "Non-Naive" Implementation of ME</h2>
<pre><code>macro [
    'left [set-word! set-tuple!]
    'right [word! tuple! path!]
    &lt;local&gt; value
][
    [left value]: resolve left  ; avoid double-evaluation
    :['set left meta value ensure action! get right]
]
</code></pre>
<p>The RESOLVE function is used to turn a TUPLE! or PATH! with groups in it into an inert representation:</p>
<pre><code> &gt;&gt; blk: [a b [c d]]

 &gt;&gt; resolve 'blk.(print "hi", 1 + 2).2
 hi
 == @[blk 3 2]
</code></pre>
<p>GET and SET accept these blocks as an alternative to words/tuples to be used to describe what to set or get.</p>
<p>It has to use a BLOCK! representation because not all things can be represented in paths that can be used with picking (note this implies you cannot pick with isotopes, otherwise not all blocks would be resolvable).</p>
<p>So long as RESOLVE is walking the path, you can ask it to give you back the value of what's there.</p>
<h2><a name="p-6586-but-the-non-naive-version-triggers-a-binding-bug-3" class="anchor" href="https://rebol.metaeducation.com#p-6586-but-the-non-naive-version-triggers-a-binding-bug-3"></a>But the non-naive version triggers a binding bug...</h2>
<p>It's also rather slow.  In trying to prioritize, it may be better to just document the right answer, as I've done here... :-/</p>
          <p><a href="https://rebol.metaeducation.com/t/correct-formulation-of-me-and-my/2020/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/correct-formulation-of-me-and-my/2020/1</link>
        <pubDate>Fri, 03 Mar 2023 21:23:09 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2020-1</guid>
        <source url="https://rebol.metaeducation.com/t/correct-formulation-of-me-and-my/2020.rss">Correct Formulation of ME and MY</source>
      </item>
  </channel>
</rss>
