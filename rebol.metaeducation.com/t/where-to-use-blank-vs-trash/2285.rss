<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Where to use BLANK vs TRASH</title>
    <link>https://forum.rebol.info/t/where-to-use-blank-vs-trash/2285</link>
    <description>I realized while thinking about what the right default for ARRAY would be, that there are two potentially sensible choices for a default... both of them single-character reified placeholders:

    [1]  &gt;&gt; array 3
         == [_ _ _]  ; BLANK!s

    [2]  &gt;&gt; array 3
         == [~ ~ ~]  ; Quasi-BLANK!s (&quot;TRASH!&quot;)

## This Offers Us Some Nuance Even If A State Must Be Reified!

When it comes to the direct behavior of APPEND to a block, these states have to work the same.  In the era of isotopes, all reified values are appended as-is... it cannot (and should not) be any more complex:

    &gt;&gt; append [a b] second [c _]
    == [a b _]

    &gt;&gt; append [a b] second [c ~]
    == [a b ~]

    &gt;&gt; append [a b] second [c [d e]]
    == [a b [d e]]

**But when we throw in an extra operation, we can imagine a difference.**  For instance, we could make BLANK! semantically equivalent to an empty array for the purposes of things like SPREAD or EMPTY?

    &gt;&gt; spread second [c []]
    == ~()~  ; anti

    &gt;&gt; spread second [c _]
    == ~()~  ; anti

    &gt;&gt; append [a b] spread second [c _]
    == [a b]

    &gt;&gt; empty? second [c _]
    == ~true~  ; anti

...and then we&#39;d say that if you tried to do such things with a &quot;meta-nothing&quot; trash state, it would be an error:

    &gt;&gt; spread second [c ~]
    ** Error: SPREAD does not accept ~ as an argument

*I think this suggests that `~` makes a better choice for the default value of ARRAY elements!*  We can&#39;t default to an antiform like the one representing unset variables, but it&#39;s the closest thing.

*Ultimately it came to seem that having only the antiform ~null~ be a &quot;branch inhibitor&quot; was more valuable than having BLANK! be a &quot;branch inhibitor&quot;.*  Simply being able to assume that anything you can find in an array will run a branch offered more leverage.  So blanks are &quot;branch triggers&quot; now, BUT they&#39;re empty.

## What About Opting Out Of As-Is Appends, etc?

I mentioned that all items that can be found in a block have to act mechanically identically when it comes to TAKE-ing and APPEND-ing them.  But what would XXX be if you wanted the following?

    &gt;&gt; append [a b] xxx second [c [d e]]
    == [a b [d e]]

    &gt;&gt; append [a b] xxx second [c _]
    == [a b _]

    &gt;&gt; append [a b] xxx second [c ~]
    ** Error: Cannot append NOTHING (~ antiform) to a block

I&#39;m trying having this operator [be called DEGRADE](https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163).  It would turn all quasiforms into their corresponding antiform:

    &gt;&gt; degrade first [~null~]
    == ~null~  ; anti

    &gt;&gt; degrade first [&#39;foo]
    == &#39;foo

    &gt;&gt; degrade first [123]
    == 123

The reverse of this operator would be REIFY.

## What About FOR-EACH Variations?

I think an additionally neat spin on how these can be treated differently can be how FOR-EACH responds.

    &gt;&gt; for-each x (second [c []]) [
           print &quot;Loop never runs&quot;
       ]
    == ~void~  ; anti

    &gt;&gt; for-each x (second [c _]) [
           print &quot;Loop never runs&quot;
       ]
    == ~void~  ; anti

    &gt;&gt; for-each x (degrade second [c ~void~]) [
           print &quot;Loop never runs&quot;
       ]
    == ~null~  ; anti (like a void in, null out... or if a BREAK was hit)

    &gt;&gt; for-each x (second [c ~]) [
           print &quot;Loop never runs&quot;
       ]
    ** Error: FOR-EACH does not accept TRASH as its data argument

This is a bit more speculative, but I like the general idea that a quasi void could let you have a kind of nothing that gave you the &quot;opt out&quot; ability in places where it could... and quasi blank could give you an error, while blank acts like an empty series.  This seems to offer some nice invariants that reduce overall code you have to write handling edge cases.</description>
    
    <lastBuildDate>Wed, 18 Sep 2024 02:13:19 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/where-to-use-blank-vs-trash/2285.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Where to use BLANK vs TRASH</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I realized while thinking about what the right default for ARRAY would be, that there are two potentially sensible choices for a default... both of them single-character reified placeholders:</p>
<pre><code>[1]  &gt;&gt; array 3
     == [_ _ _]  ; BLANK!s

[2]  &gt;&gt; array 3
     == [~ ~ ~]  ; Quasi-BLANK!s ("TRASH!")
</code></pre>
<h2>
<a name="this-offers-us-some-nuance-even-if-a-state-must-be-reified-1" class="anchor" href="https://forum.rebol.info#this-offers-us-some-nuance-even-if-a-state-must-be-reified-1"></a>This Offers Us Some Nuance Even If A State Must Be Reified!</h2>
<p>When it comes to the direct behavior of APPEND to a block, these states have to work the same.  In the era of isotopes, all reified values are appended as-is... it cannot (and should not) be any more complex:</p>
<pre><code>&gt;&gt; append [a b] second [c _]
== [a b _]

&gt;&gt; append [a b] second [c ~]
== [a b ~]

&gt;&gt; append [a b] second [c [d e]]
== [a b [d e]]
</code></pre>
<p><strong>But when we throw in an extra operation, we can imagine a difference.</strong>  For instance, we could make BLANK! semantically equivalent to an empty array for the purposes of things like SPREAD or EMPTY?</p>
<pre><code>&gt;&gt; spread second [c []]
== ~()~  ; anti

&gt;&gt; spread second [c _]
== ~()~  ; anti

&gt;&gt; append [a b] spread second [c _]
== [a b]

&gt;&gt; empty? second [c _]
== ~true~  ; anti
</code></pre>
<p>...and then we'd say that if you tried to do such things with a "meta-nothing" trash state, it would be an error:</p>
<pre><code>&gt;&gt; spread second [c ~]
** Error: SPREAD does not accept ~ as an argument
</code></pre>
<p><em>I think this suggests that <code>~</code> makes a better choice for the default value of ARRAY elements!</em>  We can't default to an antiform like the one representing unset variables, but it's the closest thing.</p>
<p><em>Ultimately it came to seem that having only the antiform ~null~ be a "branch inhibitor" was more valuable than having BLANK! be a "branch inhibitor".</em>  Simply being able to assume that anything you can find in an array will run a branch offered more leverage.  So blanks are "branch triggers" now, BUT they're empty.</p>
<h2>
<a name="what-about-opting-out-of-as-is-appends-etc-2" class="anchor" href="https://forum.rebol.info#what-about-opting-out-of-as-is-appends-etc-2"></a>What About Opting Out Of As-Is Appends, etc?</h2>
<p>I mentioned that all items that can be found in a block have to act mechanically identically when it comes to TAKE-ing and APPEND-ing them.  But what would XXX be if you wanted the following?</p>
<pre><code>&gt;&gt; append [a b] xxx second [c [d e]]
== [a b [d e]]

&gt;&gt; append [a b] xxx second [c _]
== [a b _]

&gt;&gt; append [a b] xxx second [c ~]
** Error: Cannot append NOTHING (~ antiform) to a block
</code></pre>
<p>I'm trying having this operator <a href="https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163">be called DEGRADE</a>.  It would turn all quasiforms into their corresponding antiform:</p>
<pre><code>&gt;&gt; degrade first [~null~]
== ~null~  ; anti

&gt;&gt; degrade first ['foo]
== 'foo

&gt;&gt; degrade first [123]
== 123
</code></pre>
<p>The reverse of this operator would be REIFY.</p>
<h2>
<a name="what-about-for-each-variations-3" class="anchor" href="https://forum.rebol.info#what-about-for-each-variations-3"></a>What About FOR-EACH Variations?</h2>
<p>I think an additionally neat spin on how these can be treated differently can be how FOR-EACH responds.</p>
<pre><code>&gt;&gt; for-each x (second [c []]) [
       print "Loop never runs"
   ]
== ~void~  ; anti

&gt;&gt; for-each x (second [c _]) [
       print "Loop never runs"
   ]
== ~void~  ; anti

&gt;&gt; for-each x (degrade second [c ~void~]) [
       print "Loop never runs"
   ]
== ~null~  ; anti (like a void in, null out... or if a BREAK was hit)

&gt;&gt; for-each x (second [c ~]) [
       print "Loop never runs"
   ]
** Error: FOR-EACH does not accept TRASH as its data argument
</code></pre>
<p>This is a bit more speculative, but I like the general idea that a quasi void could let you have a kind of nothing that gave you the "opt out" ability in places where it could... and quasi blank could give you an error, while blank acts like an empty series.  This seems to offer some nice invariants that reduce overall code you have to write handling edge cases.</p>
          <p><a href="https://forum.rebol.info/t/where-to-use-blank-vs-trash/2285/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/where-to-use-blank-vs-trash/2285/1</link>
        <pubDate>Wed, 30 Nov 2022 04:00:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2285-1</guid>
        <source url="https://forum.rebol.info/t/where-to-use-blank-vs-trash/2285.rss">Where to use BLANK vs TRASH</source>
      </item>
  </channel>
</rss>
