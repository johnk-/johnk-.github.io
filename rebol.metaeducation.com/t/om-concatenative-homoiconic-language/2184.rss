<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Om: concatenative homoiconic language</title>
    <link>https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184</link>
    <description>https://www.om-language.org/

This was a one hit wonder on hackernews a couple years ago. Probably the thing of greatest relevance is its &quot;panmorphic&quot; data representation: 3 terminal types of

- Separators, which compose any utf8 whitespace characters
- Operator, essentially symbols of `any-other-utf8-text`.
- Operand, a quoted program in `{curlie braces}` containing operators or `{{other} {operands} and operators}` with separators between.

The evaluator can define a vocabulary of base &quot;operations&quot; tied to an operator symbol. Every operation takes the rest of the program as input and appends its output. For instance, `quote` and `dequote` wrap or unwrap the next term of the program in an enclosing operand. (using `-&gt;` to indicate output)

```
quote {A}
-&gt; {{A}}
```

```
dequote {A}
-&gt; A
```

More examples on the website</description>
    
    <lastBuildDate>Tue, 24 Sep 2024 17:42:22 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Om: concatenative homoiconic language</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>FWIW, I ran across the fact that the Rebolish <a href="https://rebol.metaeducation.com/t/rye-language/1768">Rye Language</a> there is a <a href="https://www.reddit.com/r/ryelang/comments/1d4bxin/eyr_is_a_stack_based_concatenative_dialect_in_rye/">"concatenative dialect"</a> called "Eyr" (Rye backwards).</p>
<p>Eyr is apparently native code (or "BFunction", builtin function).  So it's written in Go, that is able to examine and produce Rye values.</p>
<p><strong><a href="https://github.com/refaktor/rye/blob/625283fd05334a293889cf803b8c0daed48103a9/evaldo/builtins_eyr.go">Rye evaldo/builtins_eyr.go</a></strong></p>
<p>It's used in the implementation of a MATH dialect.  Here are the Eyr evaluations that are in the reddit page:</p>
<pre><code>x&gt; 2 3 4 + 5 +
[Block: ^[Integer: 2] [Integer: 12] ]

x&gt; +
[Block: ^[Integer: 14] ]

x&gt; { 100 200 300 } 2 tail
[Block: ^[Integer: 14] [Block: ^[Integer: 200] [Integer: 300] ] ]

x&gt; sum
[ Block: ^[Integer 14] [Integer: 500] ]

x&gt; * 777 +
[ Block: ^[Integer: 7777] ]

; left set-words
x&gt; "ena" "tive" concat :x
[Block: ^[Integer: 7777] ]

x&gt; "concat" x concat to-upper print
CONCATENATIVE
[Block: ^[Integer: 7777] [String: CONCATENATIVE] ]

; we can also invoke regular rye dialect
x&gt; { print 101 + 10 } do
111
[Block: ^[Integer: 7777] [String: CONCATENATIVE] [Integer: 111] ]
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184/3</link>
        <pubDate>Tue, 24 Sep 2024 17:42:22 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2184-3</guid>
        <source url="https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184.rss">Om: concatenative homoiconic language</source>
      </item>
      <item>
        <title>Om: concatenative homoiconic language</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><sub>Sorry, long delay to look at this.  Personal distractions, then technical issues with the DNS, etc. but we're back...</sub></p>
<hr>
<blockquote>
<p>This was a one hit wonder on hackernews a couple years ago.</p>
</blockquote>
<p>Finally sat down to read over this.  And having not even heard the term "concatenative language" before... I also read the essay <strong><a href="http://evincarofautumn.blogspot.com/2012/02/why-concatenative-programming-matters.html">Why Concatenative Programming Matters</a></strong>.</p>
<p>Forth is claimed to be in this concatenative family, and oft cited as a Rebol influence.  I think <a class="mention" href="https://rebol.metaeducation.com/u/gchiu">@gchiu</a> is the only person around here who still (maybe?) messes with Forth.  He follows the <a href="https://www.reddit.com/r/Forth/comments/573lmq/8th_is_it_forth/">pariah variant "8th"</a>, or at least used to.  I look at Forth programs and can't reasonably consider them "source code" in any kind of human sense...an illegible <a href="http://weblog.raganwald.com/2004/10/beware-of-turing-tar-pit.html">Turing Tarpit</a> <em>" …in which everything is possible but nothing of interest is easy."</em>  At best it's compiler output, you can never find a place in the program that corresponds to intent...just implementation.  Someone's off-the-cuff crafting of a bytecode.</p>
<p>My reading is that Om sought to be a "prefix-based lambda calculus of concatenative programming" (or something?) where expressions that lack enough operands to evaluate become... uh, pointfree, I think?</p>
<p><em>"If the computation cannot be completed (due to insufficient operands), the operator that names the operation is pushed onto the output program, followed by all remaining input terms."</em></p>
<p>The pitch seems like a purist prefix Forth that I'm less likely to be able to use than the Forth I already refuse to use.</p>
<aside class="quote no-group" data-username="jjsullivan5196" data-post="1" data-topic="2184">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/jjsullivan5196/48/379_2.png" class="avatar"> jjsullivan5196:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">quote {A}
-&gt; {{A}}
</code></pre>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">dequote {A}
-&gt; A
</code></pre>
</blockquote>
</aside>
<p>I'll mention the odd terminology thing we got into, where the question of removing one level of quoting was distinguished from removing all levels of quoting.</p>
<p><a class="mention" href="https://rebol.metaeducation.com/u/iarnold">@iArnold</a> had his moment to shine <a href="https://rebol.metaeducation.com/t/unquote-and-dequote-too-similar/1626/2">in suggesting NOQUOTE</a>, because DEQUOTE was too ambiguous.</p>
<pre><code>&gt;&gt; unquote first ['''abc]
== ''abc

&gt;&gt; noquote first ['''abc]
== abc
</code></pre>
<p>So we simply avoid the term DEQUOTE.</p>
<p>Of course, the craziest thing to absorb in Ren-C is the existence of "antiforms" (quoting level of -1) and quasiforms, which just show we're not in Kansas anymore.</p>
<p><a href="https://rebol.metaeducation.com/t/a-justification-of-generalized-isotopes/1918" class="inline-onebox">A Justification of Generalized Isotopes</a></p>
<p>Rightly or wrongly, I'm now anchored to the semantics of an isotopic system.</p>
<blockquote>
<p><em>"unicode-correct: any UTF-8 text (without byte-order marker) defines a valid Om program."</em><br>
...<br>
<em>"Strings are automatically normalized to NFD, but can be explicitly normalized to NFKD using the <strong>normalize</strong> operation"</em></p>
</blockquote>
<p>There is curious attention to Unicode-isms for a project that is so... otherwise minimal.  I note that the implementation uses the obscenely complex dependency of <a href="https://en.wikipedia.org/wiki/International_Components_for_Unicode">ICU4C</a>--which is not something that would be considered for the purposes of our project.</p>
<p>Ren-C also <a href="https://rebol.metaeducation.com/t/realistically-migrating-rebol-to-utf8-everywhere/374">standardizes on UTF-8... but uses "UTF-8 Everywhere"</a>.  This means it doesn't just enforce UTF-8 source code, but the runtime representation of strings.  <em>(As far as I can tell, Om uses fixed-sized codepoints at runtime for strings, despite linking to the UTF-8 Everywhere manifesto.)</em></p>
<p>Normalization is something that so far we have not addressed, though I've written about the topic:</p>
<p><strong><a href="https://rebol.metaeducation.com/t/o-noes-unicode-normalization/1322">O Noes, Unicode Normalization</a></strong></p>
<p>Om only mentions the decomposed formats NFD/NFKD.  This is to say that if you had a single codepoint in your file on disk like an e with an accent (<strong>é</strong>) then it would be loaded into memory as the two codepoint sequence, of an e and then an accent.</p>
<p>This got me to dig deeper and I seriously don't know at this point where we should plant our Amish stake when it comes to Unicode.  I got in arguments with ChatGPT and Claude about why combining characters would ever be <em>after</em> the characters they modify, as it breaks anyone's chances of writing a stream sink.  Despite the fact that Unicode was being designed in a relatively modern time where you would assume people had learned their lessons and ran their ideas through some kind of filter of intelligent people.  But apparently no.</p>
          <p><a href="https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184/2</link>
        <pubDate>Thu, 13 Jun 2024 04:11:19 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2184-2</guid>
        <source url="https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184.rss">Om: concatenative homoiconic language</source>
      </item>
      <item>
        <title>Om: concatenative homoiconic language</title>
        <dc:creator><![CDATA[jjsullivan5196]]></dc:creator>
        <description><![CDATA[
            <aside class="onebox allowlistedgeneric" data-onebox-src="https://www.om-language.com/">
  <header class="source">

      <a href="https://www.om-language.com/" target="_blank" rel="noopener nofollow ugc">om-language.com</a>
  </header>

  <article class="onebox-body">
    

<h3><a href="https://www.om-language.com/" target="_blank" rel="noopener nofollow ugc">Om: Main Page</a></h3>



  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>This was a one hit wonder on hackernews a couple years ago. Probably the thing of greatest relevance is its "panmorphic" data representation: 3 terminal types of</p>
<ul>
<li>Separators, which compose any utf8 whitespace characters</li>
<li>Operator, essentially symbols of <code>any-other-utf8-text</code>.</li>
<li>Operand, a quoted program in <code>{curlie braces}</code> containing operators or <code>{{other} {operands} and operators}</code> with separators between.</li>
</ul>
<p>The evaluator can define a vocabulary of base "operations" tied to an operator symbol. Every operation takes the rest of the program as input and appends its output. For instance, <code>quote</code> and <code>dequote</code> wrap or unwrap the next term of the program in an enclosing operand. (using <code>-&gt;</code> to indicate output)</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">quote {A}
-&gt; {{A}}
</code></pre>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">dequote {A}
-&gt; A
</code></pre>
<p>More examples on the website</p>
          <p><a href="https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184/1</link>
        <pubDate>Thu, 23 May 2024 02:44:11 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2184-1</guid>
        <source url="https://rebol.metaeducation.com/t/om-concatenative-homoiconic-language/2184.rss">Om: concatenative homoiconic language</source>
      </item>
  </channel>
</rss>
