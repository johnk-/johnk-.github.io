<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rethinking The Stale Bit: Invisibility In The Isotopic Age</title>
    <link>https://rebol.metaeducation.com/t/rethinking-the-stale-bit-invisibility-in-the-isotopic-age/1963</link>
    <description>Every evaluation step is asked to target an output cell.  Before the evaluation, a single bit is set on that cell to say it is &quot;stale&quot;.  So if the evaluation doesn&#39;t write to it--and confirms that wasn&#39;t a mistake--then the old result is left around to recover.

The ability to recover the previous result with the flip of a bit is used for invisibility.  It&#39;s used not just in the evaluator when it goes step by step, but also in things like ANY and ALL.

    &gt;&gt; 1 + 2 comment &quot;in the evaluator&quot;
    == 3

    &gt;&gt; all [1 + 2 comment &quot;here too&quot;]
    == 3

*Doing it this way has sacrificed some features.*  For instance, you can&#39;t make an &quot;invisible&quot; infix function:

    &gt;&gt; foo: infix func [left] [
           print [&quot;Left was&quot; left]
           return void
       ]

    &gt;&gt; 304 1020 foo
    Left was 1020
    == 1020

The 1020 from the previous evaluation was used as an argument.  But after &quot;consuming all its arguments&quot; the product of FOO could not leave the 304 there.  If each evaluation step was to a temporary cell, that temporary cell could be used to fill the infix slot of FOO... and 304 could be left.

*Doing it this way has also required acrobatics to accomplish non-negotiable features.*  The related problem of making it possible for an infix function to perceive voidness on the left hand side requires stale bit mechanics that aren&#39;t for the faint of heart... e.g. to differentiate these two cases:

    &gt;&gt; (else [print &quot;Won&#39;t work&quot;])
    ** Error

    &gt;&gt; () else [print &quot;Will work&quot;]
    Will work

## Is All The Bit-Fiddling Worth It Vs. Copying?

Considering the small size of cells (4 platform pointers), the logic to test and clear the &quot;stale&quot; bit may seem to add overhead and complexity that isn&#39;t saving that much.  Instead, every evaluation could be done into a temporary slot...and then if not invisible, the 4 pointers could be moved.

This is actually a bit misleading--because copying cells is actually a bit more expensive in the general case.  Cell format flags have to be checked, bindings may need to be managed, and if a reference count mechanic is implemented this could make it all worse.

Less copying is desirable, and it seems neat to have achieved invisibility thus far without needing an extra eval per-eval-step.

&gt; *&quot;So if the evaluation doesn&#39;t write to it--and confirms that wasn&#39;t a mistake...&quot;*

This is one of the main reasons I&#39;ve stuck with the current method.  It&#39;s useful for debug purposes to know if a native just forgot to write an output cell anyway.  So I figured: *&quot;so long as the output cell is going to have a flag on it saying it hasn&#39;t been written to yet, why not make that flag able to coexist with the previous value...and hence avoid a mechanic of needing to copy every time?&quot;*

## But Isotopes Mean It&#39;s Time For Change

Early on I observed that there was no way to get this to work:

    &gt;&gt; 1000 + 20 if true [comment &quot;hi&quot;]
    == 1020  ; not possible

The IF had to produce something as a proxy for VOID that wasn&#39;t void... in order to signal a taken branch (we want THEN to run).

But even if that proxy was able to *decay* to a void state, it was too late.  It had overwritten the output.  Today that proxy is a parameter pack with a meta-void in it: **`~[~]~`**.

There&#39;s more stuff with parameter packs that *should* work, like this:

     &gt;&gt; 1000 + 20 [x @y]: pack [304 void]
     == 1020

*And isotopic objects that represent lazy evaluations should be able to produce void, too.*  They&#39;re a proxy for behavior, and if you pick and choose behaviors that could be accomplished with a normal result that a REIFY method on a lazy object can&#39;t, you&#39;re saying they&#39;re not as powerful.

**These features tip the scales.**  And really, the circuitous nature of void infix handling was already tipping them.

The concerns over copying are mostly addressed by something I&#39;m calling &quot;cell movement&quot;; this means we can really get closer to the 4 platform pointer copies, because you&#39;re destroying the old cell in the process.  So if techniques like reference counting came along, you&#39;re not adding and removing them--you&#39;re just letting the new cell take over the resources of the old.

Plus, detecting whether a cell has been written to or not is a generic debug feature now that has easy coverage.

*The stale bit is thus on the chopping block.*  So expect more robust void-related behavior coming soonish.</description>
    
    <lastBuildDate>Thu, 08 Sep 2022 21:34:37 +0000</lastBuildDate>
    <category>Optimization</category>
    <atom:link href="https://rebol.metaeducation.com/t/rethinking-the-stale-bit-invisibility-in-the-isotopic-age/1963.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rethinking The Stale Bit: Invisibility In The Isotopic Age</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Every evaluation step is asked to target an output cell.  Before the evaluation, a single bit is set on that cell to say it is "stale".  So if the evaluation doesn't write to it--and confirms that wasn't a mistake--then the old result is left around to recover.</p>
<p>The ability to recover the previous result with the flip of a bit is used for invisibility.  It's used not just in the evaluator when it goes step by step, but also in things like ANY and ALL.</p>
<pre><code>&gt;&gt; 1 + 2 comment "in the evaluator"
== 3

&gt;&gt; all [1 + 2 comment "here too"]
== 3
</code></pre>
<p><em>Doing it this way has sacrificed some features.</em>  For instance, you can't make an "invisible" infix function:</p>
<pre><code>&gt;&gt; foo: infix func [left] [
       print ["Left was" left]
       return void
   ]

&gt;&gt; 304 1020 foo
Left was 1020
== 1020
</code></pre>
<p>The 1020 from the previous evaluation was used as an argument.  But after "consuming all its arguments" the product of FOO could not leave the 304 there.  If each evaluation step was to a temporary cell, that temporary cell could be used to fill the infix slot of FOO... and 304 could be left.</p>
<p><em>Doing it this way has also required acrobatics to accomplish non-negotiable features.</em>  The related problem of making it possible for an infix function to perceive voidness on the left hand side requires stale bit mechanics that aren't for the faint of heart... e.g. to differentiate these two cases:</p>
<pre><code>&gt;&gt; (else [print "Won't work"])
** Error

&gt;&gt; () else [print "Will work"]
Will work
</code></pre>
<h2><a name="p-6386-is-all-the-bit-fiddling-worth-it-vs-copying-1" class="anchor" href="https://rebol.metaeducation.com#p-6386-is-all-the-bit-fiddling-worth-it-vs-copying-1"></a>Is All The Bit-Fiddling Worth It Vs. Copying?</h2>
<p>Considering the small size of cells (4 platform pointers), the logic to test and clear the "stale" bit may seem to add overhead and complexity that isn't saving that much.  Instead, every evaluation could be done into a temporary slot...and then if not invisible, the 4 pointers could be moved.</p>
<p>This is actually a bit misleading--because copying cells is actually a bit more expensive in the general case.  Cell format flags have to be checked, bindings may need to be managed, and if a reference count mechanic is implemented this could make it all worse.</p>
<p>Less copying is desirable, and it seems neat to have achieved invisibility thus far without needing an extra eval per-eval-step.</p>
<blockquote>
<p><em>"So if the evaluation doesn't write to it--and confirms that wasn't a mistake..."</em></p>
</blockquote>
<p>This is one of the main reasons I've stuck with the current method.  It's useful for debug purposes to know if a native just forgot to write an output cell anyway.  So I figured: <em>"so long as the output cell is going to have a flag on it saying it hasn't been written to yet, why not make that flag able to coexist with the previous value...and hence avoid a mechanic of needing to copy every time?"</em></p>
<h2><a name="p-6386-but-isotopes-mean-its-time-for-change-2" class="anchor" href="https://rebol.metaeducation.com#p-6386-but-isotopes-mean-its-time-for-change-2"></a>But Isotopes Mean It's Time For Change</h2>
<p>Early on I observed that there was no way to get this to work:</p>
<pre><code>&gt;&gt; 1000 + 20 if true [comment "hi"]
== 1020  ; not possible
</code></pre>
<p>The IF had to produce something as a proxy for VOID that wasn't void... in order to signal a taken branch (we want THEN to run).</p>
<p>But even if that proxy was able to <em>decay</em> to a void state, it was too late.  It had overwritten the output.  Today that proxy is a parameter pack with a meta-void in it: <strong><code>~[~]~</code></strong>.</p>
<p>There's more stuff with parameter packs that <em>should</em> work, like this:</p>
<pre><code> &gt;&gt; 1000 + 20 [x @y]: pack [304 void]
 == 1020
</code></pre>
<p><em>And isotopic objects that represent lazy evaluations should be able to produce void, too.</em>  They're a proxy for behavior, and if you pick and choose behaviors that could be accomplished with a normal result that a REIFY method on a lazy object can't, you're saying they're not as powerful.</p>
<p><strong>These features tip the scales.</strong>  And really, the circuitous nature of void infix handling was already tipping them.</p>
<p>The concerns over copying are mostly addressed by something I'm calling "cell movement"; this means we can really get closer to the 4 platform pointer copies, because you're destroying the old cell in the process.  So if techniques like reference counting came along, you're not adding and removing them--you're just letting the new cell take over the resources of the old.</p>
<p>Plus, detecting whether a cell has been written to or not is a generic debug feature now that has easy coverage.</p>
<p><em>The stale bit is thus on the chopping block.</em>  So expect more robust void-related behavior coming soonish.</p>
          <p><a href="https://rebol.metaeducation.com/t/rethinking-the-stale-bit-invisibility-in-the-isotopic-age/1963/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/rethinking-the-stale-bit-invisibility-in-the-isotopic-age/1963/1</link>
        <pubDate>Thu, 08 Sep 2022 21:34:37 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1963-1</guid>
        <source url="https://rebol.metaeducation.com/t/rethinking-the-stale-bit-invisibility-in-the-isotopic-age/1963.rss">Rethinking The Stale Bit: Invisibility In The Isotopic Age</source>
      </item>
  </channel>
</rss>
