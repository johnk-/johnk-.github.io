<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What&#39;s Up With That PERCENT! Datatype?</title>
    <link>https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368</link>
    <description>So the PERCENT! datatype didn&#39;t exist in Rebol2:

    rebol2&gt;&gt; 10%
    ** Syntax Error: Invalid integer -- 10%

But it was added to R3-Alpha, and then included in Red.  Both of which seem to believe that percents are actually just a rendering of an equivalent decimal number, divided by 100:

    r3-alpha/red&gt;&gt; to percent! 10
    == 1000%

    r3-alpha/red&gt;&gt; to percent! 10.0
    == 1000%

    r3-alpha&gt;&gt; to decimal! 10%
    == 0.1

    red&gt;&gt; to float! 10%  ; Red calls decimal &quot;float&quot;, but same difference
    == 0.1

This shows a kind of mathematical invariant in R3-Alpha, e.g. that 10% will act like decimal 0.1 in math... so that&#39;s what it &quot;is&quot;:

    r3-alpha&gt;&gt; 2 * 10%
    == 0.2

    r3-alpha&gt;&gt; 10% * 2
    == 0.2

Red of course throws in a curve ball... it will either double the percent or apply it to the non-percent, depending on the order... :roll_eyes: 

    red&gt;&gt; 10% * 2
    == 20%

    red&gt;&gt; 2 * 10%
    == 0.2

How about some other math...?

    r3-alpha&gt;&gt; 10% * 10%
    == 1.0000000000000002%

    red&gt;&gt; 10% * 10%
    == 1%

    r3-alpha&gt;&gt; 10% + 2
    == 2.1  ; same for 2 + 10%

    red&gt;&gt; 10% + 2
    == 210%

    red&gt;&gt; 2 + 10%
    == 2.1

## Thoughts On That TO Conversion

One thing is that if we follow my &quot;useless&quot; reversible model of TO conversions **`to percent! 10`** should fairly clearly be 10%.

    &gt;&gt; to percent! 10
    == 10%

    &gt;&gt; to integer! 10%
    == 10

    &gt;&gt; to text! 10%
    == &quot;10&quot;

    &gt;&gt; to percent! &quot;10&quot;
    == 10%

    &gt;&gt; to block! 10%
    == [10]

**[I have explained why I have been promoting this perhaps-strange idea](https://rebol.metaeducation.com/t/embracing-a-useless-definition-of-to/2325)**.  You get &quot;if ten were a block, what would it look like&quot;... &quot;if ten were a percent, what would it look like&quot;... with an emphasis on &quot;look like&quot;.

Consider the challenge question: how would you turn a variable containing the integer 10 into 10% in R3-Alpha or Red today?

    red&gt;&gt; num: 10

    red&gt;&gt; what-operation-here num 
    == 10%

Your answers are things like:

    red&gt;&gt; to percent! num / 100
    == 10%

    red&gt;&gt; load rejoin [num &quot;%&quot;]
    == 10%

    red&gt;&gt; num * 1%
    == 10%

But I think there should be an operation that just *does that*.  In the system I&#39;ve described, TO seems to fill this need, in a way that you can predict.  Of course, that means TO is not the end-all be-all operation, and I&#39;ve discussed how breaking operations out into things like JOIN and ROUND and FORM can step in for other intents.

One operation that might be an example of something that could fill in a gap here could be **`AS`**.  AS allows us to ask &quot;what if the memory or guts of the thing we&#39;re looking at were viewed through a different lens&quot;?

    &gt;&gt; as binary! &quot;ABC&quot;
    == #{414243}

    &gt;&gt; as text! #{414243}
    == &quot;ABC&quot;

    &gt;&gt; as decimal! 10%
    == 0.1

    &gt;&gt; as percent! 0.1
    == 10%

It&#39;s one possibility of an operator that wouldn&#39;t be constrained by the equivalence classes of TO.

## What About That Math?

Red&#39;s policy of making the result match the first operand feels confusing.  It seems easier if there&#39;s some pecking order of type promotions, and you get the same result regardless of order.  *(Of course, things like matrix multiplication throw a wrench in the idea that you can say multiplication is always commutative... so, exceptions exist.  Unless you do like Python and make matrix multiplication a separate operator, and reserve `*` for element-wise multiplication.)*  

Regarding picking behaviors: percent is a pretty strange situation, because there are of course different questions:

* What happens when you double 20% ?
* What is 20% of 2?

My default mindset would be to imagine that multiplying 20% times 2 is meant to double it, and produce 40% (which Red *half* agrees with).  If I expected to actually take 20% of 2, I wouldn&#39;t think it unreasonable to be asked to first convert the percent to a decimal...

    &gt;&gt; 20% * 2
    == 40%

    &gt;&gt; 2 * 20%
    == 40%

    &gt;&gt; (as decimal! 20%) * 2
    == 0.4

    &gt;&gt; 2 * (as decimal 20%)
    == 0.4

Furthermore...from a perspective of dimensional analysis, I would say you shouldn&#39;t be able to do things like:

    &gt;&gt; 20% + 1
    ** Error: Can&#39;t add PERCENT! and INTEGER!

But if you *could* do it, I would probably lean to it being more generally useful to give back 21% than 120%...which seems to be a behavior straight out of the annals of improbable usefulness.

**I don&#39;t really use the percent type, but it seems to me there&#39;s simply too much guessing what people want out of it.**  I imagine that it best serves its purpose as just kind of a source-level lexical convenience, and your code has to decide when it wants to convert it to a decimal for the purposes of some kind of measurement.

Red&#39;s first answer here makes sense to me, the second does not--I don&#39;t see the order as distinguishing &quot;give me half of 10 percent&quot; and the second &quot;give me 10% of 0.5&quot;:

    red&gt;&gt; 10% * 0.5
    == 5%

    red&gt;&gt; 0.5 * 10%
    == 0.05

**So my plan is to pretty much pare down the percent type to bare bones, try to make the math commutative, and favor the idea that you have to explicitly convert a percentage to a decimal to get it to behave like a decimal... probably via the AS operator, doing the TO operator as described.**</description>
    
    <lastBuildDate>Wed, 12 Mar 2025 02:16:26 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What&#39;s Up With That PERCENT! Datatype?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2368">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Imagine you have a slider control, on some user interface, where the slider lets you go from 0% to 100%. But the slider itself has integer bounds and doesn't understand the percent type.</p>
</blockquote>
</aside>
<p>Fair enough, this would be a valid usecase for it. (Though personally I’d have no problem with explicitly writing <code>as percent (output / 100)</code>, to make it clear that the output is treated as a fraction of 100.)</p>
          <p><a href="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/6</link>
        <pubDate>Wed, 12 Mar 2025 02:16:26 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2368-6</guid>
        <source url="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368.rss">What&#39;s Up With That PERCENT! Datatype?</source>
      </item>
      <item>
        <title>What&#39;s Up With That PERCENT! Datatype?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2368">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>‘converting’ <code>10%</code> to <code>10</code> makes as little sense to me as does ‘converting’ <code>0.1</code> to <code>10</code></p>
</blockquote>
</aside>
<p>Imagine you have a slider control, on some user interface, where the slider lets you go from 0% to 100%.  But the slider itself has integer bounds and doesn't understand the percent type.</p>
<p>It seems reasonable to me in such a world where the "0" to "100" is the range of what you get, that it is meaningful to say "but I mean this as a percent".</p>
<p>The question of what TO means--as I've said--is historically fraught.  But I've been wrestling with the idea that it's fundamentally reversible, with a principal usage of pushing things "out of band" in a dialect, e.g. where there was already a meaning for the type you were using.</p>
<p>INTEGER! is already taken in your dialect?  Ok, <strong><code>to tag! 10</code></strong> =&gt; <strong><code>&lt;10&gt;</code></strong> for whatever other integer-valued idea you have.</p>
<p>Want your number back?  <strong><code>to integer! &lt;10&gt;</code></strong> guaranteed to give you back 10, because all TO operations (that succeed) are reversible.</p>
<p>Historical TO has done many things, sometimes along those lines, and sometimes not.  Enforcing reversibility and the "triviality" so people could count on TO was the thesis of this post:</p>
<p><a href="https://rebol.metaeducation.com/t/embracing-a-useless-definition-of-to/2325" class="inline-onebox">Embracing A "Useless" Definition of TO</a></p>
<p>Working with that idea makes me feel like <strong><code>to percent! 10</code></strong> would be <strong><code>10%</code></strong>... for example, applicable in these integer-slider-bar-to-a-percent types of scenarios.</p>
          <p><a href="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/5</link>
        <pubDate>Wed, 12 Mar 2025 01:50:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2368-5</guid>
        <source url="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368.rss">What&#39;s Up With That PERCENT! Datatype?</source>
      </item>
      <item>
        <title>What&#39;s Up With That PERCENT! Datatype?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2368">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>So yes, for once, Red has actually made a coherent design decision!</p>
</blockquote>
</aside>
<p>Errr... <img src="https://rebol.metaeducation.com/images/emoji/twitter/face_with_diagonal_mouth.png?v=14" title=":face_with_diagonal_mouth:" class="emoji" alt=":face_with_diagonal_mouth:" loading="lazy" width="20" height="20">  well, coherence for me would have commutativity for addition and multiplication.  And if something needed to be non-commutative it could be another operator.</p>
<p>The not-likely-to-be-original idea I had was to order the "heart bytes" in the types.r table for numeric types based loosely on "complexity" (where integers are simpler than decimals, decimals are simpler than pairs or percents etc.).  Then have some pre-dispatch code for ADD and MULTIPLY which will if necessary swap the arguments to put the more complex argument in the first position.</p>
<p>So roughly:</p>
<pre><code>//
//  /multiply: native [
//
//  "Returns the multiplicative product of two values (commutative)"
//
//      return: [any-scalar?]
//      value1 [any-scalar?]
//      value2 [any-scalar?]
//  ]
//
DECLARE_NATIVE(multiply)
{
    INCLUDE_PARAMS_OF_MULTIPLY;  // for ARG(value1) vs. ARG(1), etc.

    Value* v1 = ARG(value1);
    Value* v2 = ARG(value2);

    if (HEART_BYTE(v1) &lt; HEART_BYTE(v2)) {
        Move_Cell(SPARE, v2);
        Move_Cell(v2, v1);  // ...move simpler type to be on the right
        Move_Cell(v1, SPARE);
    }

    return Run_Generic_Dispatch(v1, SYM_MULTIPLY);
}
</code></pre>
<p><em>(I've rethought "generics" so they all basically work like this, allowing some common prelude/postscript code. Still just dispatch on one argument's type, but it can be any argument...or a synthesized value chosen based on the arguments.  <a href="https://en.wikipedia.org/wiki/Multiple_dispatch">Multiple dispatch</a> would be nice but have no idea how to graft that in.)</em></p>
<p>Hence integers would only be asked to multiply other integers, decimals would only be asked to multiply decimals or integers, etc.  More policies could be enforced in the prelude code if that makes it easier as well.</p>
<p>According to ChatGPT, a similar approach for type ordering is used in "SymPy" for commutativity:</p>
<aside class="onebox allowlistedgeneric" data-onebox-src="https://chatgpt.com/share/67d0dc73-55c8-8004-8778-09efcaea5a71">
  <header class="source">
      <img src="https://cdn.oaistatic.com/assets/favicon-miwirzcw.ico" class="site-icon" width="48" height="48">

      <a href="https://chatgpt.com/share/67d0dc73-55c8-8004-8778-09efcaea5a71" target="_blank" rel="noopener">ChatGPT</a>
  </header>

  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/388;"><img src="https://cdn.oaistatic.com/assets/chatgpt-share-og-u7j5uyao.webp" class="thumbnail" width="690" height="388"></div>

<h3><a href="https://chatgpt.com/share/67d0dc73-55c8-8004-8778-09efcaea5a71" target="_blank" rel="noopener">ChatGPT - Matrix Multiplication in Python</a></h3>

  <p>Shared via ChatGPT</p>


  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>I'm not completely crazy about ordering the types based on small integers in a table, but I'm beginning to kind of see the boundaries of how far this project is going to be able to get... and extensible datatypes may just not be the research space it gets to.  I'd like to show off the isotopes and other novel features and think there's a lot of material there, without breaking some new ground in generic programming.</p>
          <p><a href="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/4</link>
        <pubDate>Wed, 12 Mar 2025 01:20:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2368-4</guid>
        <source url="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368.rss">What&#39;s Up With That PERCENT! Datatype?</source>
      </item>
      <item>
        <title>What&#39;s Up With That PERCENT! Datatype?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2368">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So my plan is to pretty much pare down the percent type to bare bones, try to make the math commutative, and favor the idea that you have to explicitly convert a percentage to a decimal to get it to behave like a decimal... probably via the AS operator, doing the TO operator as described.</p>
</blockquote>
</aside>
<p>I agree with this design. From my perspective as a physicist, I really hate systems which try to get clever with percentages. They’re just too ambiguous — as you note, everything has multiple interpretations, and in this situation it is simply impossible to create a coherent system which ‘does what I mean’ in all circumstances.</p>
<p>In fact I would suggest going further… if someone tries to combine percentages and decimals in a single operation, that should be an error. Percentages should be convertible only to the decimal fraction they are an alternate representation of — ‘converting’ <code>10%</code> to <code>10</code> makes as little sense to me as does ‘converting’ <code>0.1</code> to <code>10</code>. (For more on this see below; also I don’t like the <code>as</code> vs <code>to</code> distinction.) Perhaps also add new functions specifically for doing addition and subtraction of percentages from a base number, say <code>add-perc</code> and <code>sub-perc</code>. These could even be made infix, so you can write <code>2 add-perc 10%</code>.</p>
<p>Basically, what I’m getting at is that percentages are annoying and easy to misuse, so make the correspondences as straightforward and difficult to misuse as possible.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2368">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But generally speaking, I feel math shouldn't mix units or discard them, and percent is a "unit".</p>
</blockquote>
</aside>
<p>On the other hand: to me, the symbol <code>%</code> is nothing more than a synonym for <code>÷100</code> (or <code>×10⁻²</code> if you prefer). This works in much the same way as, say, a prefix like <code>m</code> being a synonym for <code>×10⁻³</code> (or <code>÷1000</code>), so <code>mg</code> are really <code>×10⁻³ g</code>. Or, for that matter, <code>°</code> being a synonym for <code>×π/180</code> — which, despite being slightly strange the first time it’s encountered, remains the most coherent way to define degrees as a unit of angle). Thus, <code>20% == 0.2</code> is not a case of ‘discarding’ units: it’s simply that both sides of the equality are unitless to start off with.</p>
<p>From which perspective:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2368">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">red&gt;&gt; 10% * 2
== 20%

red&gt;&gt; 2 * 10%
== 0.2
</code></pre>
</blockquote>
</aside>
<p>It’s worth noting that these are <em>the same number</em>: <code>20% == 0.2</code>. (So yes, for once, Red has actually made a coherent design decision! But of course it has the potential to cause massive confusion down the line once you start combining it with other operators.)</p>
          <p><a href="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/3</link>
        <pubDate>Mon, 10 Mar 2025 09:20:41 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2368-3</guid>
        <source url="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368.rss">What&#39;s Up With That PERCENT! Datatype?</source>
      </item>
      <item>
        <title>What&#39;s Up With That PERCENT! Datatype?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In framing how I think of the type, I see something like <code>10%</code> as carrying a unit... as if it were <code>10pct</code> (similar to <code>10px</code> or <code>10in</code>).</p>
<p>It doesn't seem to me that units should be dropped by ordinary math operations.</p>
<p>One compromise might be that if a function takes a <code>decimal!</code> but does not take a <code>percent!</code>, that the system would be willing to automatically convert the percent to its decimal equivalent as a convenience.</p>
<p>(A similar argument might be made that a function that takes a <code>decimal!</code> but doesn't take <code>integer!</code> would be willing to convert <code>1</code> to <code>1.0</code> in that call.)</p>
<p>But generally speaking, I feel math shouldn't mix units or discard them, and percent is a "unit".</p>
          <p><a href="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/2</link>
        <pubDate>Sat, 08 Mar 2025 15:10:13 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2368-2</guid>
        <source url="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368.rss">What&#39;s Up With That PERCENT! Datatype?</source>
      </item>
      <item>
        <title>What&#39;s Up With That PERCENT! Datatype?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So the PERCENT! datatype didn't exist in Rebol2:</p>
<pre><code>rebol2&gt;&gt; 10%
** Syntax Error: Invalid integer -- 10%
</code></pre>
<p>But it was added to R3-Alpha, and then included in Red.  Both of which seem to believe that percents are actually just a rendering of an equivalent decimal number, divided by 100:</p>
<pre><code>r3-alpha/red&gt;&gt; to percent! 10
== 1000%

r3-alpha/red&gt;&gt; to percent! 10.0
== 1000%

r3-alpha&gt;&gt; to decimal! 10%
== 0.1

red&gt;&gt; to float! 10%  ; Red calls decimal "float", but same difference
== 0.1
</code></pre>
<p>This shows a kind of mathematical invariant in R3-Alpha, e.g. that 10% will act like decimal 0.1 in math... so that's what it "is":</p>
<pre><code>r3-alpha&gt;&gt; 2 * 10%
== 0.2

r3-alpha&gt;&gt; 10% * 2
== 0.2
</code></pre>
<p>Red of course throws in a curve ball... it will either double the percent or apply it to the non-percent, depending on the order... <img src="https://rebol.metaeducation.com/images/emoji/twitter/roll_eyes.png?v=14" title=":roll_eyes:" class="emoji" alt=":roll_eyes:" loading="lazy" width="20" height="20"></p>
<pre><code>red&gt;&gt; 10% * 2
== 20%

red&gt;&gt; 2 * 10%
== 0.2
</code></pre>
<p>How about some other math...?</p>
<pre><code>r3-alpha&gt;&gt; 10% * 10%
== 1.0000000000000002%

red&gt;&gt; 10% * 10%
== 1%

r3-alpha&gt;&gt; 10% + 2
== 2.1  ; same for 2 + 10%

red&gt;&gt; 10% + 2
== 210%

red&gt;&gt; 2 + 10%
== 2.1
</code></pre>
<h2><a name="p-8026-thoughts-on-that-to-conversion-1" class="anchor" href="https://rebol.metaeducation.com#p-8026-thoughts-on-that-to-conversion-1"></a>Thoughts On That TO Conversion</h2>
<p>One thing is that if we follow my "useless" reversible model of TO conversions <strong><code>to percent! 10</code></strong> should fairly clearly be 10%.</p>
<pre><code>&gt;&gt; to percent! 10
== 10%

&gt;&gt; to integer! 10%
== 10

&gt;&gt; to text! 10%
== "10"

&gt;&gt; to percent! "10"
== 10%

&gt;&gt; to block! 10%
== [10]
</code></pre>
<p><strong><a href="https://rebol.metaeducation.com/t/embracing-a-useless-definition-of-to/2325">I have explained why I have been promoting this perhaps-strange idea</a></strong>.  You get "if ten were a block, what would it look like"... "if ten were a percent, what would it look like"... with an emphasis on "look like".</p>
<p>Consider the challenge question: how would you turn a variable containing the integer 10 into 10% in R3-Alpha or Red today?</p>
<pre><code>red&gt;&gt; num: 10

red&gt;&gt; what-operation-here num 
== 10%
</code></pre>
<p>Your answers are things like:</p>
<pre><code>red&gt;&gt; to percent! num / 100
== 10%

red&gt;&gt; load rejoin [num "%"]
== 10%

red&gt;&gt; num * 1%
== 10%
</code></pre>
<p>But I think there should be an operation that just <em>does that</em>.  In the system I've described, TO seems to fill this need, in a way that you can predict.  Of course, that means TO is not the end-all be-all operation, and I've discussed how breaking operations out into things like JOIN and ROUND and FORM can step in for other intents.</p>
<p>One operation that might be an example of something that could fill in a gap here could be <strong><code>AS</code></strong>.  AS allows us to ask "what if the memory or guts of the thing we're looking at were viewed through a different lens"?</p>
<pre><code>&gt;&gt; as binary! "ABC"
== #{414243}

&gt;&gt; as text! #{414243}
== "ABC"

&gt;&gt; as decimal! 10%
== 0.1

&gt;&gt; as percent! 0.1
== 10%
</code></pre>
<p>It's one possibility of an operator that wouldn't be constrained by the equivalence classes of TO.</p>
<h2><a name="p-8026-what-about-that-math-2" class="anchor" href="https://rebol.metaeducation.com#p-8026-what-about-that-math-2"></a>What About That Math?</h2>
<p>Red's policy of making the result match the first operand feels confusing.  It seems easier if there's some pecking order of type promotions, and you get the same result regardless of order.  <em>(Of course, things like matrix multiplication throw a wrench in the idea that you can say multiplication is always commutative... so, exceptions exist.  Unless you do like Python and make matrix multiplication a separate operator, and reserve <code>*</code> for element-wise multiplication.)</em></p>
<p>Regarding picking behaviors: percent is a pretty strange situation, because there are of course different questions:</p>
<ul>
<li>What happens when you double 20% ?</li>
<li>What is 20% of 2?</li>
</ul>
<p>My default mindset would be to imagine that multiplying 20% times 2 is meant to double it, and produce 40% (which Red <em>half</em> agrees with).  If I expected to actually take 20% of 2, I wouldn't think it unreasonable to be asked to first convert the percent to a decimal...</p>
<pre><code>&gt;&gt; 20% * 2
== 40%

&gt;&gt; 2 * 20%
== 40%

&gt;&gt; (as decimal! 20%) * 2
== 0.4

&gt;&gt; 2 * (as decimal 20%)
== 0.4
</code></pre>
<p>Furthermore...from a perspective of dimensional analysis, I would say you shouldn't be able to do things like:</p>
<pre><code>&gt;&gt; 20% + 1
** Error: Can't add PERCENT! and INTEGER!
</code></pre>
<p>But if you <em>could</em> do it, I would probably lean to it being more generally useful to give back 21% than 120%...which seems to be a behavior straight out of the annals of improbable usefulness.</p>
<p><strong>I don't really use the percent type, but it seems to me there's simply too much guessing what people want out of it.</strong>  I imagine that it best serves its purpose as just kind of a source-level lexical convenience, and your code has to decide when it wants to convert it to a decimal for the purposes of some kind of measurement.</p>
<p>Red's first answer here makes sense to me, the second does not--I don't see the order as distinguishing "give me half of 10 percent" and the second "give me 10% of 0.5":</p>
<pre><code>red&gt;&gt; 10% * 0.5
== 5%

red&gt;&gt; 0.5 * 10%
== 0.05
</code></pre>
<p><strong>So my plan is to pretty much pare down the percent type to bare bones, try to make the math commutative, and favor the idea that you have to explicitly convert a percentage to a decimal to get it to behave like a decimal... probably via the AS operator, doing the TO operator as described.</strong></p>
          <p><a href="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368/1</link>
        <pubDate>Fri, 07 Mar 2025 06:32:46 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2368-1</guid>
        <source url="https://rebol.metaeducation.com/t/whats-up-with-that-percent-datatype/2368.rss">What&#39;s Up With That PERCENT! Datatype?</source>
      </item>
  </channel>
</rss>
