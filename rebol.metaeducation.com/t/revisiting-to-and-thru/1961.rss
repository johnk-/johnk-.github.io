<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Revisiting TO and THRU</title>
    <link>https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961</link>
    <description>If you asked someone to count &quot;from 1 to 10&quot;, how many people would stop at 9?

I&#39;d say most wouldn&#39;t.  So if you wrote:

    for x [1 to 10] [print [x]]

What should that do?  I think if you showed it to people they would expect 10 to be included.

But PARSE has historically discerned this via TO (not including the limit) and THRU (including the limit).

Is that right?  Should TO be inclusive, and some other word along the lines of &quot;UPTO&quot; be used?

I almost feel like the words are slippery enough that we could bend them so that THRU was the *non*-inclusive version.  :-/

In PARSE, if TO included the limit, you could go up-to-but-not-include by using AHEAD with it: **`to ahead &quot;A&quot;`**

We could say that UNTIL would keep advancing until it hit the rule and then stopped short of it: **`until &quot;A&quot;`**.

Would that convey the right thing in the FOR case?

    &gt;&gt; for x [1 until 10] [print [x]]
    1
    2
    3
    4
    5
    6
    7
    8
    9</description>
    
    <lastBuildDate>Wed, 07 Sep 2022 15:58:28 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Revisiting TO and THRU</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>How about <em>yet</em> ?</p>
<p>For [1 yet 10] [•••]</p>
<p>Or, borrowing from another language</p>
<p>For [1 nyet 10] [•••]</p>
          <p><a href="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/6</link>
        <pubDate>Wed, 07 Sep 2022 15:58:28 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1961-6</guid>
        <source url="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961.rss">Revisiting TO and THRU</source>
      </item>
      <item>
        <title>Revisiting TO and THRU</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Well that doesn't read clearly standalone:</p>
<pre><code>for [1 before 10] [...]  ; huh?
</code></pre>
<p>If you combine it with TO, it does:</p>
<pre><code>for [1 to before 10] [...]
</code></pre>
<p>This could be used in PARSE if we rename AHEAD as BEFORE, which seems pretty coherent:</p>
<pre><code>&gt;&gt; parse "aaabbb" [to "b", tally "b"]
== 2

&gt;&gt; parse "aaabbb" [to before "b", tally "b"]
== 3
</code></pre>
<p>UNTIL as a shortcut for TO BEFORE seems reasonable as well.</p>
<p>Although arguably... all numbers 9 and less are before 10.  So a loop talking about a "BEFORE" condition when it's at 1 could reasonably not run at all.</p>
          <p><a href="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/5</link>
        <pubDate>Wed, 07 Sep 2022 15:55:16 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1961-5</guid>
        <source url="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961.rss">Revisiting TO and THRU</source>
      </item>
      <item>
        <title>Revisiting TO and THRU</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Before seems more explicit</p>
          <p><a href="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/4</link>
        <pubDate>Wed, 07 Sep 2022 15:50:31 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1961-4</guid>
        <source url="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961.rss">Revisiting TO and THRU</source>
      </item>
      <item>
        <title>Revisiting TO and THRU</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>True.  Any feelings about "count until 10" not including 10?</p>
          <p><a href="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/3</link>
        <pubDate>Wed, 07 Sep 2022 12:19:07 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1961-3</guid>
        <source url="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961.rss">Revisiting TO and THRU</source>
      </item>
      <item>
        <title>Revisiting TO and THRU</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>If you count upto 10 you don't stop at 9 either</p>
          <p><a href="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/2</link>
        <pubDate>Wed, 07 Sep 2022 04:05:57 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1961-2</guid>
        <source url="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961.rss">Revisiting TO and THRU</source>
      </item>
      <item>
        <title>Revisiting TO and THRU</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>If you asked someone to count "from 1 to 10", how many people would stop at 9?</p>
<p>I'd say most wouldn't.  So if you wrote:</p>
<pre><code>for x [1 to 10] [print [x]]
</code></pre>
<p>What should that do?  I think if you showed it to people they would expect 10 to be included.</p>
<p>But PARSE has historically discerned this via TO (not including the limit) and THRU (including the limit).</p>
<p>Is that right?  Should TO be inclusive, and some other word along the lines of "UPTO" be used?</p>
<p>I almost feel like the words are slippery enough that we could bend them so that THRU was the <em>non</em>-inclusive version.  :-/</p>
<p>In PARSE, if TO included the limit, you could go up-to-but-not-include by using AHEAD with it: <strong><code>to ahead "A"</code></strong></p>
<p>We could say that UNTIL would keep advancing until it hit the rule and then stopped short of it: <strong><code>until "A"</code></strong>.</p>
<p>Would that convey the right thing in the FOR case?</p>
<pre><code>&gt;&gt; for x [1 until 10] [print [x]]
1
2
3
4
5
6
7
8
9
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961/1</link>
        <pubDate>Tue, 06 Sep 2022 16:56:05 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1961-1</guid>
        <source url="https://rebol.metaeducation.com/t/revisiting-to-and-thru/1961.rss">Revisiting TO and THRU</source>
      </item>
  </channel>
</rss>
