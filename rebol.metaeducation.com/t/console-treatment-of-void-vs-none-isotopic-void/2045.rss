<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Console Treatment of VOID vs. NONE (isotopic void)</title>
    <link>https://forum.rebol.info/t/console-treatment-of-void-vs-none-isotopic-void/2045</link>
    <description>Rebol2 and Red both have a console property that when the console sees an UNSET!, it prints nothing:

    &gt;&gt; block: reduce [&lt;a&gt; #[unset!] &lt;b&gt;]
    == [&lt;a&gt; unset &lt;b&gt;]  ; bad rendering, conflates #[unset!] with the word `unset`

    &gt;&gt; first block
    == &lt;a&gt;

    &gt;&gt; second block

    &gt;&gt; third block
    == &lt;b&gt;

This doesn&#39;t provide the best grounding in the console, especially considering that in their world an UNSET! is a reified value that can be found in a block.

However, returning an UNSET! is how functions like PRINT avoid outputting anything with **`==`** in the console:

    rebol2&gt;&gt; print &quot;Notice no == result&quot;
    Notice no == result

    rebol2&gt;&gt; type? print &quot;Test&quot;
    Test
    == unset!

## But What Result Should Ren-C Suppress?

Ren-C has the concept of VOID which has an isotopic form known as &quot;NONE&quot;, that is used as the unfriendly contents of an unset variable.

For educational purposes, I feel it makes the most sense to have voids not print anything, and nones print out the standard isotopic form:

    &gt;&gt; void

    &gt;&gt; quote void
    == &#39;

    &gt;&gt; quasi void
    == ~

    &gt;&gt; ~
    == ~  ; isotope

Looking at this it might seem to make a lot of sense to have functions like PRINT and HELP return VOID.

But as I explain in [&quot;Why doesn&#39;t PRINT return VOID or NIHIL&quot;](https://forum.rebol.info/t/why-doesnt-print-return-void-or-vaporize-via-nihil/1466), there is a bit of a pitfall.  Voids are friendly in terms of opting out of things:

    &gt;&gt; append [a b c] print &quot;If PRINT returned void...&quot;
    If PRINT returned void...
    == [a b c]

*This seems too friendly to me.*  There&#39;s another possibility of returning NIHIL, which would be void if no other expressions were in play...and would prohibit use as an argument.  But it would let previous results fall out:

    &gt;&gt; print &quot;If PRINT returned nihil&quot;
    If PRINT returned nihil

    &gt;&gt; append [a b c] &quot;If PRINT returned nihil&quot;
    If PRINT returned nihil
    ** Error: APPEND is missing its VALUE argument

    &gt;&gt; 1 + 2 print &quot;If PRINT returned nihil&quot;
    If PRINT returned nihil
    == 3

So returning NONE mechanically feels like it makes the most sense...it has the right amount of ornery-ness:

    &gt;&gt; print &quot;Mechanically this works best&quot;
    Mechanically this works best
    == ~  ; isotope

But it&#39;s ugly to have that **== ~  ; isotope** after every HELP or PRINT or other function.

Previously I had it so that voids printed out a comment, and nones printed nothing:

    &gt;&gt; ~

    &gt;&gt; void
    ; void

But this is making the console pretty at the cost of obfuscation.  I&#39;ll point out that the web console can make the **== ~  ; isotope** some kind of light gray so it&#39;s less noticeable.

## People Always Bend To Get What They Want...

I might not like the idea of returning a &quot;friendly&quot; void to get invisibility, and try forcing everyone to use NONE for console commands.  But if they see VOID/NIHIL as the better way to get what they want, they&#39;ll choose that in their own commands to cut down on the clutter.

It seems there&#39;s at least a rationale here for why isotopic void would output nothing, while void would give a comment.  If you consider the fact that isotopic void is &quot;less than&quot; a void, then giving it the special nothing-printed status makes some amount of sense.</description>
    
    <lastBuildDate>Thu, 14 Sep 2023 19:28:10 +0000</lastBuildDate>
    <category>Console</category>
    <atom:link href="https://forum.rebol.info/t/console-treatment-of-void-vs-none-isotopic-void/2045.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Console Treatment of VOID vs. NONE (isotopic void)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I gave a demonstration of Rebol to the <strong><a href="https://kyoss.dev/">KYOSS Group</a></strong> yesterday, and had to sort of wince at that basic first-impression situation:</p>
<pre><code>&gt;&gt; print "Hello"
Hello
== ~  ; isotope
</code></pre>
<p>It opens a can of worms right off the bat, by throwing the "isotope" term at people.</p>
<p>Though outputting nothing at all when you print is far from a universal expectation.  Firefox and Chrome's JavaScript's consoles are explicit about returning undefined from functions like <code>console.log</code>:</p>
<pre><code> &gt; console.log("hello")
   hello                       [VM146:1]
&lt;- undefined
</code></pre>
<p>Clojure prints out nil:</p>
<pre><code>=&gt; (print "Hello World")
 Hello World
 nil
</code></pre>
<p>So utter silence doesn't seem like it's an expectation when you type PRINT.  It's just that something about the <strong><code>; isotope</code></strong> part that makes it unsettling to a first-time user.  A simple ~ might seem okay by comparison:</p>
<pre><code>&gt;&gt; print "Hello"
Hello
== ~
</code></pre>
<p>But that's just incorrect.  We have to distinguish ordinary quasi-void from an isotopic-void somehow.</p>
<p>There could be a special rendering just for the none case, perhaps instead of <strong><code>; isotope</code></strong> it could say <strong><code>; none</code></strong></p>
<pre><code>&gt;&gt; first [~]
== ~

&gt;&gt; do [~]
== ~  ; none

&gt;&gt; print "Hello"
Hello
== ~  ; none
</code></pre>
<p>That isn't much better, and probably does more harm than good in people's "isotopic education".</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2045">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>There's another possibility of returning NIHIL, which would be void if no other expressions were in play...and would prohibit use as an argument. But it would let previous results fall out:</p>
<pre><code>&gt;&gt; print "If PRINT returned nihil"
If PRINT returned nihil

&gt;&gt; append [a b c] "If PRINT returned nihil"
If PRINT returned nihil
** Error: APPEND is missing its VALUE argument

&gt;&gt; 1 + 2 print "If PRINT returned nihil"
If PRINT returned nihil
== 3
</code></pre>
</blockquote>
</aside>
<p><strong>I can't avoid the fact that vaporization of PRINT makes me uneasy.  I prefer making you write <code>elide print</code>.  But it may be simply the correct choice from a marketing angle.</strong></p>
<p>There are downsides to it, but there are also upsides.  It means PRINT would go back to being unusable in assignments:</p>
<pre><code>&gt;&gt; x: print "Hi"
** Script Error: No value in isotopic BLOCK! pack: ~[]~ (nihil)
</code></pre>
<p>But you'd be able to tack it on the tail of expressions:</p>
<pre><code>&gt;&gt; x: (1 + 2 print "Hi")
Hi
== 3
</code></pre>
<p>Maybe more people consider that a feature than bug... <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> and <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a> have repeatedly asked <a href="https://forum.rebol.info/t/why-doesnt-print-return-void-or-vaporize-via-nihil/1466">why can't PRINT vaporize</a> instead of having to write <strong>elide print</strong>.  I've been stubborn about resisting, but mostly because I don't want people to become too casual about making vaporizing functions...the fewer, the better.  But I guess that's a point that just belongs in the documentation for NIHIL.</p>
<p>It's an immovable-object-meets-unstoppable-force situation...where I don't want to compromise the accuracy of the console, and I also don't want first impressions of the console to slap people in the face with confusion.</p>
<p>Yesterday's presentation convinced me.  Vaporizing PRINT wins.</p>
          <p><a href="https://forum.rebol.info/t/console-treatment-of-void-vs-none-isotopic-void/2045/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/console-treatment-of-void-vs-none-isotopic-void/2045/2</link>
        <pubDate>Thu, 14 Sep 2023 18:48:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2045-2</guid>
        <source url="https://forum.rebol.info/t/console-treatment-of-void-vs-none-isotopic-void/2045.rss">Console Treatment of VOID vs. NONE (isotopic void)</source>
      </item>
      <item>
        <title>Console Treatment of VOID vs. NONE (isotopic void)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol2 and Red both have a console property that when the console sees an UNSET!, it prints nothing:</p>
<pre><code>&gt;&gt; block: reduce [&lt;a&gt; #[unset!] &lt;b&gt;]
== [&lt;a&gt; unset &lt;b&gt;]  ; bad rendering, conflates #[unset!] with the word `unset`

&gt;&gt; first block
== &lt;a&gt;

&gt;&gt; second block

&gt;&gt; third block
== &lt;b&gt;
</code></pre>
<p>This doesn't provide the best grounding in the console, especially considering that in their world an UNSET! is a reified value that can be found in a block.</p>
<p>However, returning an UNSET! is how functions like PRINT avoid outputting anything with <strong><code>==</code></strong> in the console:</p>
<pre><code>rebol2&gt;&gt; print "Notice no == result"
Notice no == result

rebol2&gt;&gt; type? print "Test"
Test
== unset!
</code></pre>
<h2>
<a name="but-what-result-should-ren-c-suppress-1" class="anchor" href="https://forum.rebol.info#but-what-result-should-ren-c-suppress-1"></a>But What Result Should Ren-C Suppress?</h2>
<p>Ren-C has the concept of VOID which has an isotopic form known as "NONE", that is used as the unfriendly contents of an unset variable.</p>
<p>For educational purposes, I feel it makes the most sense to have voids not print anything, and nones print out the standard isotopic form:</p>
<pre><code>&gt;&gt; void

&gt;&gt; quote void
== '

&gt;&gt; quasi void
== ~

&gt;&gt; ~
== ~  ; isotope
</code></pre>
<p>Looking at this it might seem to make a lot of sense to have functions like PRINT and HELP return VOID.</p>
<p>But as I explain in <a href="https://forum.rebol.info/t/why-doesnt-print-return-void-or-vaporize-via-nihil/1466">"Why doesn't PRINT return VOID or NIHIL"</a>, there is a bit of a pitfall.  Voids are friendly in terms of opting out of things:</p>
<pre><code>&gt;&gt; append [a b c] print "If PRINT returned void..."
If PRINT returned void...
== [a b c]
</code></pre>
<p><em>This seems too friendly to me.</em>  There's another possibility of returning NIHIL, which would be void if no other expressions were in play...and would prohibit use as an argument.  But it would let previous results fall out:</p>
<pre><code>&gt;&gt; print "If PRINT returned nihil"
If PRINT returned nihil

&gt;&gt; append [a b c] "If PRINT returned nihil"
If PRINT returned nihil
** Error: APPEND is missing its VALUE argument

&gt;&gt; 1 + 2 print "If PRINT returned nihil"
If PRINT returned nihil
== 3
</code></pre>
<p>So returning NONE mechanically feels like it makes the most sense...it has the right amount of ornery-ness:</p>
<pre><code>&gt;&gt; print "Mechanically this works best"
Mechanically this works best
== ~  ; isotope
</code></pre>
<p>But it's ugly to have that <strong>== ~  ; isotope</strong> after every HELP or PRINT or other function.</p>
<p>Previously I had it so that voids printed out a comment, and nones printed nothing:</p>
<pre><code>&gt;&gt; ~

&gt;&gt; void
; void
</code></pre>
<p>But this is making the console pretty at the cost of obfuscation.  I'll point out that the web console can make the <strong>== ~  ; isotope</strong> some kind of light gray so it's less noticeable.</p>
<h2>
<a name="people-always-bend-to-get-what-they-want-2" class="anchor" href="https://forum.rebol.info#people-always-bend-to-get-what-they-want-2"></a>People Always Bend To Get What They Want...</h2>
<p>I might not like the idea of returning a "friendly" void to get invisibility, and try forcing everyone to use NONE for console commands.  But if they see VOID/NIHIL as the better way to get what they want, they'll choose that in their own commands to cut down on the clutter.</p>
<p>It seems there's at least a rationale here for why isotopic void would output nothing, while void would give a comment.  If you consider the fact that isotopic void is "less than" a void, then giving it the special nothing-printed status makes some amount of sense.</p>
          <p><a href="https://forum.rebol.info/t/console-treatment-of-void-vs-none-isotopic-void/2045/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/console-treatment-of-void-vs-none-isotopic-void/2045/1</link>
        <pubDate>Thu, 03 Aug 2023 22:48:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2045-1</guid>
        <source url="https://forum.rebol.info/t/console-treatment-of-void-vs-none-isotopic-void/2045.rss">Console Treatment of VOID vs. NONE (isotopic void)</source>
      </item>
  </channel>
</rss>
