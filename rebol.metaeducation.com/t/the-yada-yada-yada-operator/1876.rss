<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The &quot;Yada Yada Yada&quot; Operator (...)</title>
    <link>https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876</link>
    <description>It seemed we could have a shorter way to say **`to &lt;end&gt;`** (or **`thru &lt;end&gt;`**, they act the same).

     &gt;&gt; parse &quot;aabbcc&quot; [some &quot;a&quot; to &lt;end&gt;]
     == &quot;&quot;

In fact, what you want more often is probably **`elide to &lt;end&gt;`**.  Because the **`&lt;end&gt;`** combinator currently evaluates to the end position of the series (hence the &quot;&quot; you see above, as the TO returns what its argument evaluates to.)

     &gt;&gt; parse &quot;aabbbcc&quot; [some &quot;a&quot; elide to &lt;end&gt;]
     == &quot;a&quot;

A kind of obvious choice for meaning this would be **`...`**

     &gt;&gt; parse &quot;aabbbcc&quot; [some &quot;a&quot; ...]
     == &quot;a&quot;

&lt;sub&gt;*(Initially I was skeptical of using `...` without some decoration, and did this with the TAG! of `&lt;...&gt;`, but I think the reasons I was skeptical are probably not good reasons, and we should go ahead and make it  easier on the eyes and easier to type.)*&lt;/sub&gt;

## But Why Should It Only Work At The End?

This seems useful:

     &gt;&gt; parse &quot;aabbbcc&quot; [... some &quot;b&quot; ...]
     == &quot;b&quot;

But isn&#39;t that just a synonym for THRU, with the exception that if there&#39;s nothing to go THRU it assumes you mean `&lt;end&gt;` ?

*Well, a synonym for THRU isn&#39;t really what you want.*  You&#39;d probably like this to work:

     &gt;&gt; parse &quot;aabbbcc&quot; [... some &quot;x&quot; | some &quot;b&quot; ...]
     == &quot;b&quot;

In essence, you want it to implicitly wrap anything to the right--up to the next `&lt;...&gt;`--in a BLOCK!, so act equivalently to:

     &gt;&gt; parse &quot;aabbbcc&quot; [thru [some &quot;x&quot; | some &quot;b&quot;] elide to &lt;end&gt;]
     == &quot;b&quot;

That&#39;s not possible for a normal combinator, you&#39;d need a variadic one.

Today&#39;s approximation of variadic combinators is to just special-case the implementation directly in the BLOCK! combinator.

**So...that&#39;s what I&#39;ve done!**

A more elegant way of writing the feature may come down the pipe someday.  But this gives us a version we can use in the here and now.

It&#39;s experimental, so use with caution.

:man_scientist:</description>
    
    <lastBuildDate>Wed, 13 Jul 2022 19:55:22 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The &quot;Yada Yada Yada&quot; Operator (...)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="1876">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>[&lt;...&gt; some "x" | some "b" &lt;...&gt;]
</code></pre>
<p>Could mean either of these two things:</p>
<pre><code>[[&lt;...&gt; some "x"] | [some "b" &lt;...&gt;]]

[&lt;...&gt; [some "x" | some "b"] &lt;...&gt;]
</code></pre>
</blockquote>
</aside>
<p>One argument for having it mean the latter is that the former can be accomplished with THRU.</p>
<p>Consider trying to write something that would match file extensions:</p>
<pre><code>is-rebol: did parse filename [thru [".reb" | ".r3" | ".r"]]
</code></pre>
<p>If <strong><code>...</code></strong> were able to subsume <strong><code>|</code></strong>, you can get something briefer:</p>
<pre><code>is-rebol: did parse filename [... ".reb" | ".r3" | ".r"]
</code></pre>
<p>But it has a downside, in that if we were to write it as a more well-behaved variadic combinator, it may be that out-prioritizing the <strong><code>|</code></strong> is not an approved behavior.</p>
<p>I kind of feel now, looking at it, that the <strong><code>|</code></strong> divides things into sections...and it seems like the <code>&lt;...&gt;</code> is visually bounded within the first section.  So we wouldn't think of it as having a connection to the others.</p>
<p>So if we're going just based on the visuals, it probably needs to stop variadic consumption when it hits a vertical bar.  :-/</p>
<p>But hey, we have a lot of tools these days!</p>
<pre><code>is-rebol: did parse filename [... any [%.reb %.r3 %.r]]
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876/3</link>
        <pubDate>Tue, 12 Jul 2022 17:05:14 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1876-3</guid>
        <source url="https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876.rss">The &quot;Yada Yada Yada&quot; Operator (...)</source>
      </item>
      <item>
        <title>The &quot;Yada Yada Yada&quot; Operator (...)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1876">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><em>Well, a synonym for THRU isn't really what you want.</em> You'd probably like this to work:</p>
<pre><code>&gt;&gt; parse "aabbbcc" [... some "x" | some "b" ...]
== "b"
</code></pre>
<p>In essence, you want it to implicitly wrap anything to the right--up to the next <code>...</code>--in a BLOCK!, so act equivalently to:</p>
<pre><code>&gt;&gt; parse "aabbbcc" [thru [some "x" | some "b"] elide to &lt;end&gt;]
== "b"
</code></pre>
</blockquote>
</aside>
<p>This particular point is actually debatable: the question is kind of one about precedence.  e.g. does <strong><code>...</code></strong> outrank <strong>|</strong></p>
<pre><code>[... some "x" | some "b" ...]
</code></pre>
<p>Could mean either of these two things:</p>
<pre><code>[[... some "x"] | [some "b" ...]]

[... [some "x" | some "b"] ...]
</code></pre>
<p>But then we have to look at the situation where there is no | involved:</p>
<pre><code>[... some "x" some "b" ...]
</code></pre>
<p>I feel like <em>that</em> shouldn't be up for debate.  e.g. I don't think that should be read as equivalent to:</p>
<pre><code>[[... some "x"] some "b" ...]
</code></pre>
<p>Because then it would fail on:</p>
<pre><code>"aaaxxxxaaaaxxxbbbccc"
</code></pre>
<p>I feel like the <code>...</code> should not be finding some "x", consider it a match, and then kick over to some "b" and fail... when there were [some "x" some "b"] still to be found in the series.</p>
<p>So the point stands that <strong><code>...</code></strong> shouldn't be thought of as "taking a parameter of the next rule" but has to be variadic.  The question is should that variadicness stop when it sees a <code>|</code> or just another <code>...</code></p>
          <p><a href="https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876/2</link>
        <pubDate>Tue, 12 Jul 2022 16:21:08 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1876-2</guid>
        <source url="https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876.rss">The &quot;Yada Yada Yada&quot; Operator (...)</source>
      </item>
      <item>
        <title>The &quot;Yada Yada Yada&quot; Operator (...)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It seemed we could have a shorter way to say <strong><code>to &lt;end&gt;</code></strong> (or <strong><code>thru &lt;end&gt;</code></strong>, they act the same).</p>
<pre><code> &gt;&gt; parse "aabbcc" [some "a" to &lt;end&gt;]
 == ""
</code></pre>
<p>In fact, what you want more often is probably <strong><code>elide to &lt;end&gt;</code></strong>.  Because the <strong><code>&lt;end&gt;</code></strong> combinator currently evaluates to the end position of the series (hence the "" you see above, as the TO returns what its argument evaluates to.)</p>
<pre><code> &gt;&gt; parse "aabbbcc" [some "a" elide to &lt;end&gt;]
 == "a"
</code></pre>
<p>A kind of obvious choice for meaning this would be <strong><code>...</code></strong></p>
<pre><code> &gt;&gt; parse "aabbbcc" [some "a" ...]
 == "a"
</code></pre>
<p><sub><em>(Initially I was skeptical of using <code>...</code> without some decoration, and did this with the TAG! of <code>&lt;...&gt;</code>, but I think the reasons I was skeptical are probably not good reasons, and we should go ahead and make it  easier on the eyes and easier to type.)</em></sub></p>
<h2><a name="p-6050-but-why-should-it-only-work-at-the-end-1" class="anchor" href="https://rebol.metaeducation.com#p-6050-but-why-should-it-only-work-at-the-end-1"></a>But Why Should It Only Work At The End?</h2>
<p>This seems useful:</p>
<pre><code> &gt;&gt; parse "aabbbcc" [... some "b" ...]
 == "b"
</code></pre>
<p>But isn't that just a synonym for THRU, with the exception that if there's nothing to go THRU it assumes you mean <code>&lt;end&gt;</code> ?</p>
<p><em>Well, a synonym for THRU isn't really what you want.</em>  You'd probably like this to work:</p>
<pre><code> &gt;&gt; parse "aabbbcc" [... some "x" | some "b" ...]
 == "b"
</code></pre>
<p>In essence, you want it to implicitly wrap anything to the right--up to the next <code>&lt;...&gt;</code>--in a BLOCK!, so act equivalently to:</p>
<pre><code> &gt;&gt; parse "aabbbcc" [thru [some "x" | some "b"] elide to &lt;end&gt;]
 == "b"
</code></pre>
<p>That's not possible for a normal combinator, you'd need a variadic one.</p>
<p>Today's approximation of variadic combinators is to just special-case the implementation directly in the BLOCK! combinator.</p>
<p><strong>So...that's what I've done!</strong></p>
<p>A more elegant way of writing the feature may come down the pipe someday.  But this gives us a version we can use in the here and now.</p>
<p>It's experimental, so use with caution.</p>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/man_scientist.png?v=14" title=":man_scientist:" class="emoji only-emoji" alt=":man_scientist:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876/1</link>
        <pubDate>Tue, 12 Jul 2022 14:55:42 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1876-1</guid>
        <source url="https://rebol.metaeducation.com/t/the-yada-yada-yada-operator/1876.rss">The &quot;Yada Yada Yada&quot; Operator (...)</source>
      </item>
  </channel>
</rss>
