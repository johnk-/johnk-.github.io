<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should RESCUE and CATCH return null if no fails/throws?</title>
    <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940</link>
    <description>R3-Alpha&#39;s TRY added a refinement /EXCEPT for passing in a block or function to act as a handler in the case of an error being raised.

RESCUE was created to be a seemingly better name than &quot;TRY&quot;.  It appeared to have more parity with CATCH, and RESCUE:WITH paralleled CATCH:WITH.

I think the name is an improvement.  And it paved the way for the short word TRY to fill another important role.

But there&#39;s a pattern in both of these constructs which is that they return a result whether something is caught or rescued or not.

    &gt;&gt; catch [10 + 20]
    == 30

    &gt;&gt; warning? rescue [make warning! &quot;this is *not* a rescued error&quot;]
    == \~okay~\  ; antiform

That particular behavior of rescue is particularly tricky because many cases check if a result is an ERROR? and use that as a detection of if a FAIL ran...and here we see that&#39;s not actually happening.

But I&#39;ve been questioning the value of this mixing-up-of-return-results.  If you want to get a value out of the block, why not do that by setting a variable?  You&#39;re usually trying to set a variable anyway, e.g. `value: rescue [...]`, what&#39;s wrong with moving it into the code?

     rescue [
         value: some-calculation-that-may-fail ...
     ] then warning -&gt; [
         ... code to handle the error ...
     ] else [
         ... stuff to do if there was no error ...
         ... assume value is good ...
     ]

This cleanly separates out the code paths, allowing usage of null-sensitive constructs.  So it means getting rid of the :WITH refinement on RESCUE and CATCH, instead using normal THEN/ELSE/etc. constructs with them:

    &gt;&gt; catch [10 + 20]
    == \~null~\  ; antiform

    &gt;&gt; rescue [make warning! &quot;not an antiform error&quot;]
    == \~null~\  ; antiform

In the case of CATCH, you can always just throw your final result, to get it to conflate with an ordinary throw (this is inexpensive.)

RESCUE can&#39;t do that (since it would only be able to return errors).  Though you could piggy-back on CATCH if you really wanted to avoid variable declaration with a RESCUE...just throw your result:

     catch [rescue [... throw result] then e -&gt; [e]]

I&#39;m not opposed to the idea of code-golf-friendly constructs which could go ahead and do this squashing of results together.  (CATCH-DO, RESCUE-DO?)  But the clean expression with only returning the caught or trapped thing--and null otherwise--seems quite appealing to me for the primitive building block.

## Also note: the existence of ENRESCUE

I made ENRESCUE to address the problem of distinguishing errors from other values, by returning the lfited form of the value in the case of no errors.  So if your result is QUOTED! or QUASIFORM!, then you know it succeeded and all you have to do is UNLIFT it to get the result.  WARNING! is the only plain value returned...so it is an unambiguous signal of a rescued failure.

    &gt;&gt; null
    == \~null~\  ; antiform

    &gt;&gt; enrescue [null]
    == ~null~

    &gt;&gt; enrescue [10 + 20]
    == &#39;30

    &gt;&gt; warning? enrescue [1 / 0]
    == \~okay~\  ; anti  (it&#39;s just a plain WARNING! value, not quoted or quasi)

    &gt;&gt; quoted? enrescue [make warning! &quot;abc&quot;]
    == \~okay~\  ; antiform  (quoted warning, since it wasn&#39;t FAIL&#39;d)

I don&#39;t know how that fits into the naming and scheme of things, but mentioning it.</description>
    
    <lastBuildDate>Thu, 10 Jul 2025 11:06:12 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should RESCUE and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="10" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>"I'm Returning Nothing (Oh, But Here's What I Return)"</strong>*</p>
<p>Is ENRESCUE The Best We Can Do?</p>
</blockquote>
</aside>
<p><a href="https://rebol.metaeducation.com/t/discouraging-the-interception-of-divergent-panics/1871/4">Thinking about the same problem with SYS.UTIL/RECOVER</a>, I realized it's kind of a matter of phrasing... in that if your construct is phrased in the affirmative (e.g. SANDBOX), you can use EXCEPT.</p>
<p>So if instead of calling it RESCUE it was called something else, like... I dunno, for the sake of argument let's just call it SEQUENTIAL:</p>
<pre><code>value: sequential [
    expr1
    expr2
    expr3
] except e -&gt; [
    ; one of those expressions returned an ERROR!
]
</code></pre>
<p>If you haven't realized it until now--that's what RESCUE is doing that's different from EVAL.  EVAL will give you a definitional error but <em>only from the last operation</em>.</p>
<p>This does imply that maybe RESCUE could be phrased as a refinement to EVAL, to say "return an error early from steps that give ERROR!".</p>
<h2><a name="p-8503-evaltrap-may-actually-kind-of-make-sense-here-1" class="anchor" href="https://rebol.metaeducation.com#p-8503-evaltrap-may-actually-kind-of-make-sense-here-1"></a><strong>EVAL:TRAP</strong> may actually kind of make sense here.</h2>
<p>When you think about what TRAP does, it's a tool for functions when you are in the middle of them in an execution step, and you want that step to bubble the error out.</p>
<p>You don't need to use TRAP on the RETURN of a function, the ERROR! just gets passed to the RETURN.</p>
<p>So if you're asking an EVAL to TRAP, you wouldn't mean "on the last step".  You must mean on its intermediate steps.</p>
<p>There's probably other options like EVAL:INTERCEPT or EVAL:ABRUPT but at the moment I kind of like EVAL:TRAP.</p>
<p>I definitely like the idea of getting rid of ENRESCUE, so this direction is appealing.  More as the situation evolves.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/11">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/11</link>
        <pubDate>Thu, 10 Jul 2025 11:06:12 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-940-11</guid>
        <source url="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss">Should RESCUE and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should RESCUE and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>There's no particular reason why RESCUE couldn't do a multi-return with the block's synthesized result as the second value.</p>
</blockquote>
</aside>
<p>Well, yes there is... <img src="https://rebol.metaeducation.com/images/emoji/twitter/frowning.png?v=14" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
<p>Because if the non-erroring case isn't returned as a "light" null antiform, you won't be able to signal ELSE.</p>
<p>A PACK! that has null in its first slot and something else in its second slot is not considered "nothing" in the way that an unboxed null antiform is.</p>
<h2><a name="p-8500-im-returning-nothing-oh-but-heres-what-i-return-1" class="anchor" href="https://rebol.metaeducation.com#p-8500-im-returning-nothing-oh-but-heres-what-i-return-1"></a>"I'm Returning Nothing (Oh, But Here's What I Return)"</h2>
<p>So this problem is kind of a general pattern where you ask for something... NULL is the signal of "no I couldn't do that"... and you still try to tunnel more information back in despite saying you returned nothing.</p>
<p>The unstable PACK! antiform is the escape mechanism that lets you say "I'm returning something, and it's nothing".  That's the loophole that powers ELSE while still letting you return something that is equivalent to null in <em>most</em> circumstances (the "isotope" concept at work... "it's hydrogen to most people, but if you have a special sensor...")</p>
<p>But if you use the escape, you're returning something.  No THEN/ELSE...which RESCUE needs.</p>
<h2><a name="p-8500-is-enrescue-the-best-we-can-do-2" class="anchor" href="https://rebol.metaeducation.com#p-8500-is-enrescue-the-best-we-can-do-2"></a>Is ENRESCUE The Best We Can Do?</h2>
<p>It's definitely not the best name.  It originated when this was the function of TRAP, and ENTRAP seemed like a "enclosed trap" worked as a name.  But with RESCUE, ENRESCUE lacks that ring.</p>
<p>It could be RESCUE:LIFT ... but that doesn't quite convey what's going on.  It's more of RESCUE:MULTIPLEX or something of that ilk.</p>
<p>I'm not sure if my term "DUAL" should be used here, because that's coming to mean something fairly specific pertaining to the fundamental representation of variables.</p>
<p><strong>It doesn't come up as much because if you want a dual overlay of an error with other things, you can just use a ^META assignment.</strong></p>
<pre><code> try ^var: eval code
 if error? ^var [...]
</code></pre>
<p>So it may be a solution in search of a problem.</p>
<h2><a name="p-8500-long-story-short-rescue-is-not-a-multi-return-function-3" class="anchor" href="https://rebol.metaeducation.com#p-8500-long-story-short-rescue-is-not-a-multi-return-function-3"></a>Long story short, RESCUE is not a multi-return function</h2>
          <p><a href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/10">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/10</link>
        <pubDate>Thu, 10 Jul 2025 02:10:31 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-940-10</guid>
        <source url="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss">Should RESCUE and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should RESCUE and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In the case of CATCH, you can always just throw your final result, to get it to conflate with an ordinary throw (this is inexpensive.)</p>
</blockquote>
</aside>
<p>So CATCH is fundamentally different from RESCUE here, in that RESCUE is trapping error antiforms that are sort of arising out of the blue and <em>very well may not happen most of the time</em>.  But CATCH's raison 'd-etre is to synthesize a value up out of a block.</p>
<p>The argument "why don't you just put a THROW at the bottom" could be equally spun around to say that if you <em>don't</em> want the value to fall out, why not put the value that you <em>do</em> want to fall out as the last line of the CATCH?</p>
<p>In practice, I think that a CATCH that returns the block product when there's no throw is more generally useful than a CATCH that arbitrarily decides to give back NULL if you had no throw.  Why not TRASH! ?  I think asking the question "did you throw" is rarely what's of interest... and when it does come up, making null the last evaluation in the block (or <code>throw null</code> if you feel it's more obvious) likely works fine.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="8" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So there's a competing application for multi-returns, which is the ability to throw a multi-return...</p>
</blockquote>
</aside>
<p>This competition doesn't apply to RESCUE.</p>
<p>There's no particular reason why RESCUE couldn't do a multi-return with the block's synthesized result as the second value.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/9">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/9</link>
        <pubDate>Wed, 25 Jun 2025 17:49:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-940-9</guid>
        <source url="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss">Should RESCUE and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should RESCUE and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Looks like we may get the best of both worlds now, with <a href="https://rebol.metaeducation.com/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/2">multiple returns</a>! The RESCUE and CATCH could offer a second output which is the value that "falls out" of the evaluation.</p>
</blockquote>
</aside>
<h2><a name="p-6571-throwing-multi-returns-is-very-useful-1" class="anchor" href="https://rebol.metaeducation.com#p-6571-throwing-multi-returns-is-very-useful-1"></a>Throwing Multi-Returns Is Very Useful</h2>
<p>So there's a competing application for multi-returns, which is the ability to throw a multi-return... which is more useful:</p>
<pre><code>&gt;&gt; [x fallthrough?]: catch [
       if false [throw pack [1 null]]
       throw pack [2 okay]
   ]
== 2

&gt;&gt; x
== 2

&gt;&gt; fallthrough?
== \~okay~\  ; antiform
</code></pre>
<p>This seems like a much better use of the multi-return ability.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/8">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/8</link>
        <pubDate>Wed, 01 Feb 2023 11:01:08 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-940-8</guid>
        <source url="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss">Should RESCUE and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should RESCUE and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="3" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/ingohohmann/48/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>Being able to use then/else is great, but I don't particularly like having to move assignments into the code.</p>
</blockquote>
</aside>
<p>Looks like we may get the best of both worlds now, with <a href="https://rebol.metaeducation.com/t/the-history-of-multi-return-in-ren-c/1134">multiple returns</a>!  The RESCUE and CATCH could offer a second output which is the value that "falls out" of the evaluation.</p>
<pre><code>&gt;&gt; [error value]: rescue [1 + 1]
== ~null~  ; anti

&gt;&gt; error
== ~null~  ; anti

&gt;&gt; value
== 2

&gt;&gt; [_ value]: rescue [1 + 1] then [print "error!"]

&gt;&gt; value
== 2

&gt;&gt; [_ value]: rescue [1 / 0] then [print "error!"]
error!
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/6</link>
        <pubDate>Thu, 09 Apr 2020 15:43:49 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-940-6</guid>
        <source url="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss">Should RESCUE and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should RESCUE and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>It seems, that my comment wasn't completely thought through.<br>
You have convinced me.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/5</link>
        <pubDate>Tue, 04 Dec 2018 15:50:34 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-940-5</guid>
        <source url="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss">Should RESCUE and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should RESCUE and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="IngoHohmann" data-post="3" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/ingohohmann/48/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>Makes it clear, that this is an assignment, which, by the way, may error so I’m handling this.</p>
</blockquote>
</aside>
<p>Compare:</p>
<pre><code>if warning? data: rescue [	              
    inflate:max data uncompressed-size	           
][
    info "^- -&gt; failed [deflate]^/"
    throw blank
]
</code></pre>
<p>With:</p>
<pre><code>rescue [	              
    data: inflate/max data uncompressed-size	           
] then [
    info "^- -&gt; failed [deflate]^/"
    throw blank
]
</code></pre>
<p>What makes the assignment clearer?  I think the second case, in particular because it doesn't conflate <code>data</code> as a variable which "may hold a warning, or may hold the data".  If you wanted to be "clear" you'd have to call it <code>data-or-warning</code>, which is too wordy.</p>
<p>It seems to me the second way puts the <code>data:</code> closer to what's being assigned to it, instead of separating it in an awkward and artificial way.  The first case doesn't make it that obvious that <code>inflate:max</code> returns a value at all--maybe only RESCUE does?  The only hint you have that you're not just capturing an error is the misleading name "data".  If you mix up the data with the error that means you're going to need a test, and <code>if warning? data: rescue</code> is a lot of noise to see through.</p>
<p>(And that's a simple case that doesn't mention the specific error when it probably should.  You could use ATTEMPT ... ELSE for this, which would just give you a null if it was an error otherwise the value.  But I worry about today's ATTEMPT because it can make typographical errors or other changes hard to find, so it seems it should be improved to at least not scuttle some common errors of words not being bound.)</p>
<p>More complicated examples which are rescuing a section of code that doesn't just do a single assignment are even better.</p>
<p>What makes me feel better about it as a primitive is that it prevents mistakes in generic code like:</p>
<pre><code>if warning? item: rescue [
    someone-elses-array: get-array-may-fail x y z
    pick someone-elses-array index
][
     ; may be a WARNING! value that just was in someone-elses-array
]
</code></pre>
<p>Again--I don't object to there existing some construct that conflates raised errors with plain error values, and has all the concerns which go with that.  But it seems the best way is to give a solid routine with no holes in it to build on.  Then let people do what they like with that.</p>
<p>Being able to get rid of RESCUE:WITH is clean, and you can also use use ELSE to provide clauses easily for the non-erroring case.  I think it's an improvement.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/4</link>
        <pubDate>Tue, 04 Dec 2018 09:22:29 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-940-4</guid>
        <source url="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss">Should RESCUE and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should RESCUE and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I am not sure I like this. Being able to use then/else is great, but I don't particularly like having to move assignments into the code.</p>
<pre><code>var: rescue [...]
</code></pre>
<p>Makes it clear, that this is an assignment, which, by the way, may error so I'm handling this.</p>
<pre><code>rescue [var: ...]
</code></pre>
<p>looks like it is mostly error handling code, and the assignment is easily overlooked.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/3</link>
        <pubDate>Tue, 04 Dec 2018 06:14:57 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-940-3</guid>
        <source url="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss">Should RESCUE and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should RESCUE and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>R3-Alpha's TRY added a refinement /EXCEPT for passing in a block or function to act as a handler in the case of an error being raised.</p>
<p>RESCUE was created to be a seemingly better name than "TRY".  It appeared to have more parity with CATCH, and RESCUE:WITH paralleled CATCH:WITH.</p>
<p>I think the name is an improvement.  And it paved the way for the short word TRY to fill another important role.</p>
<p>But there's a pattern in both of these constructs which is that they return a result whether something is caught or rescued or not.</p>
<pre><code>&gt;&gt; catch [10 + 20]
== 30

&gt;&gt; warning? rescue [make warning! "this is *not* a rescued error"]
== \~okay~\  ; antiform
</code></pre>
<p>That particular behavior of rescue is particularly tricky because many cases check if a result is an ERROR? and use that as a detection of if a FAIL ran...and here we see that's not actually happening.</p>
<p>But I've been questioning the value of this mixing-up-of-return-results.  If you want to get a value out of the block, why not do that by setting a variable?  You're usually trying to set a variable anyway, e.g. <code>value: rescue [...]</code>, what's wrong with moving it into the code?</p>
<pre><code> rescue [
     value: some-calculation-that-may-fail ...
 ] then warning -&gt; [
     ... code to handle the error ...
 ] else [
     ... stuff to do if there was no error ...
     ... assume value is good ...
 ]
</code></pre>
<p>This cleanly separates out the code paths, allowing usage of null-sensitive constructs.  So it means getting rid of the :WITH refinement on RESCUE and CATCH, instead using normal THEN/ELSE/etc. constructs with them:</p>
<pre><code>&gt;&gt; catch [10 + 20]
== \~null~\  ; antiform

&gt;&gt; rescue [make warning! "not an antiform error"]
== \~null~\  ; antiform
</code></pre>
<p>In the case of CATCH, you can always just throw your final result, to get it to conflate with an ordinary throw (this is inexpensive.)</p>
<p>RESCUE can't do that (since it would only be able to return errors).  Though you could piggy-back on CATCH if you really wanted to avoid variable declaration with a RESCUE...just throw your result:</p>
<pre><code> catch [rescue [... throw result] then e -&gt; [e]]
</code></pre>
<p>I'm not opposed to the idea of code-golf-friendly constructs which could go ahead and do this squashing of results together.  (CATCH-DO, RESCUE-DO?)  But the clean expression with only returning the caught or trapped thing--and null otherwise--seems quite appealing to me for the primitive building block.</p>
<h2><a name="p-2774-also-note-the-existence-of-enrescue-1" class="anchor" href="https://rebol.metaeducation.com#p-2774-also-note-the-existence-of-enrescue-1"></a>Also note: the existence of ENRESCUE</h2>
<p>I made ENRESCUE to address the problem of distinguishing errors from other values, by returning the lfited form of the value in the case of no errors.  So if your result is QUOTED! or QUASIFORM!, then you know it succeeded and all you have to do is UNLIFT it to get the result.  WARNING! is the only plain value returned...so it is an unambiguous signal of a rescued failure.</p>
<pre><code>&gt;&gt; null
== \~null~\  ; antiform

&gt;&gt; enrescue [null]
== ~null~

&gt;&gt; enrescue [10 + 20]
== '30

&gt;&gt; warning? enrescue [1 / 0]
== \~okay~\  ; anti  (it's just a plain WARNING! value, not quoted or quasi)

&gt;&gt; quoted? enrescue [make warning! "abc"]
== \~okay~\  ; antiform  (quoted warning, since it wasn't FAIL'd)
</code></pre>
<p>I don't know how that fits into the naming and scheme of things, but mentioning it.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940/1</link>
        <pubDate>Mon, 03 Dec 2018 18:04:50 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-940-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-rescue-and-catch-return-null-if-no-fails-throws/940.rss">Should RESCUE and CATCH return null if no fails/throws?</source>
      </item>
  </channel>
</rss>
