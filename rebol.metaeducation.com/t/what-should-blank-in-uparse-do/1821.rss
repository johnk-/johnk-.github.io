<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What Should BLANK! in UPARSE Do?</title>
    <link>https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821</link>
    <description>It&#39;s always good to look at history first.  So let&#39;s compare and contrast #[none] vs. empty block in old Redbols.

**In Rebol2 and R3-Alpha, both are no-ops.**  The input type doesn&#39;t matter.

    r2/r3&gt;&gt; parse &quot;ab&quot; [[] &quot;a&quot; [] &quot;b&quot; []]
    == true

    r2/r3&gt;&gt; parse &quot;ab&quot; [#[none] &quot;a&quot; #[none] &quot;b&quot; #[none]]
    == true

    r2/r3&gt;&gt; parse [a b] [[] &#39;a [] &#39;b []]
    == true

    r2/r3&gt;&gt; parse [a b] [#[none] &#39;a #[none] &#39;b #[none]]
    == true

**In Red, #[none]s are expected to be literal.**  However, you don&#39;t get an error on string inputs...just a failure.

    red&gt;&gt; parse &quot;ab&quot; [[] &quot;a&quot; [] &quot;b&quot; []]
    == true

    red&gt;&gt; parse &quot;ab&quot; [#[none] &quot;a&quot; #[none] &quot;b&quot; #[none]]
    == false

    red&gt;&gt; parse [a b] [[] &#39;a [] &#39;b []]
    == true

    red&gt;&gt; parse [a b] [#[none] &#39;a #[none] &#39;b #[none]]
    == false

    red&gt;&gt; parse [#[none] a #[none] b #[none]] [#[none] &#39;a #[none] &#39;b #[none]]
    == true</description>
    
    <lastBuildDate>Thu, 15 May 2025 10:00:30 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What Should BLANK! in UPARSE Do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h3><a name="p-8284-i-think-i-have-squared-the-strikecirclestrike-underscore-1" class="anchor" href="https://rebol.metaeducation.com#p-8284-i-think-i-have-squared-the-strikecirclestrike-underscore-1"></a>I Think I Have Squared The <strike>...Circle...</strike> Underscore</h3>
<h1><a name="p-8284-h-_-is-simply-the-representation-of-spacehttpsrebolmetaeducationcomthow-does-blank-interact-with-strings-binary22873uhostilefork-2" class="anchor" href="https://rebol.metaeducation.com#p-8284-h-_-is-simply-the-representation-of-spacehttpsrebolmetaeducationcomthow-does-blank-interact-with-strings-binary22873uhostilefork-2"></a><a href="https://rebol.metaeducation.com/t/how-does-blank-interact-with-strings-binary/2287/3"><code>_</code> is Simply The Representation Of SPACE?</a></h1>
<p>Things have evolved to where this is the perfect answer.</p>
<aside class="quote no-group quote-modified" data-username="IngoHohmann" data-post="4" data-topic="1821" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/ingohohmann/48/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>That's how I see Blank (...) nothing interesting here (yet), but no need to worry, this is not an error.</p>
</blockquote>
</aside>
<p>So if we put this together, then empty splice serves "BLANK"'s purpose...</p>
<p>Like a VOID, it doesn't do anything when you append it to a series:</p>
<pre><code>&gt;&gt; opt null
== ~[]~  ; anti (void, unstable)

&gt;&gt; append [a b c] opt null
== [a b c]

&gt;&gt; spread []
== ~()~  ; anti (empty splice, stable)

&gt;&gt; append [a b c] spread []
== [a b c]

&gt;&gt; append "abc" spread []
== "abc"
</code></pre>
<p>NULL would error if you tried that.</p>
<p>But unlike VOID, empty splice is something you can put in a variable:</p>
<pre><code>&gt;&gt; var: void
** PANIC: VOID is unstable empty pack, no value for variable

&gt;&gt; var: spread []
== ~()~  ; anti

&gt;&gt; append [a b c] var
== [a b c]
</code></pre>
<p>There's not any particularly good reason why FOR-EACH shouldn't let you enumerate a splice, and if it does, then we could give it the desired behavior of returning void instead of null:</p>
<pre><code>&gt;&gt; for-each 'x (opt null) [...]
== ~null~  ; anti

&gt;&gt; for-each 'x (spread []) [...]
== ~[]~  ; anti (void)
</code></pre>
<h2><a name="p-8284-so-i-think-empty-splice-is-new-blank-3" class="anchor" href="https://rebol.metaeducation.com#p-8284-so-i-think-empty-splice-is-new-blank-3"></a>So I Think Empty Splice Is "New BLANK" !!!</h2>
<p>It seems deserving of the name, and has the properties we've been looking for!</p>
<pre><code>&gt;&gt; blank
== ~()~  ; anti
</code></pre>
<p>It's a better name than what I've been calling it ("HOLE").</p>
<p>This is the solution the world has been waiting for!</p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/7">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/7</link>
        <pubDate>Thu, 15 May 2025 10:00:30 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1821-7</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821.rss">What Should BLANK! in UPARSE Do?</source>
      </item>
      <item>
        <title>What Should BLANK! in UPARSE Do?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>That's how I see Blank as well. As a generic place holder: nothing interesting here (yet), but no need to worry, this is not an error.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/4</link>
        <pubDate>Mon, 05 Dec 2022 08:50:57 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1821-4</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821.rss">What Should BLANK! in UPARSE Do?</source>
      </item>
      <item>
        <title>What Should BLANK! in UPARSE Do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1821">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>That's a slam dunk. So now we have the behavior tied up. <img src="https://rebol.metaeducation.com/images/emoji/twitter/relieved.png?v=14" title=":relieved:" class="emoji" alt=":relieved:" loading="lazy" width="20" height="20"></p>
</blockquote>
</aside>
<p><em>I'm...pretty sure (?) this is still the best plan.</em></p>
<p>So there's a new philosophy I've outlined for why BLANK! exists at all, and its purposes as being a kind of generic "nothing to see, here" is distinct from what might be thought of more as a disruptor like null or an unset variable.  It is not related at all to soft failure.  Blank is simply a wildcard that you can choose to treat equivalently to an empty series or missing value, without committing to being anything in particular.</p>
<p>I've also mentioned that in some mechanical contexts (like APPEND), we are simply more interested in blank's "thingness" than in its representation of nothingness.  So you have to SPREAD it or otherwise modify it to get it to not act mechanically.</p>
<p><em>PARSE strikes me as one of the more mechanical contexts.</em></p>
<pre><code>parse [_ _ _] [repeat 3 _]
</code></pre>
<p>And I think the value of having it to represent space in string contexts is quite high.</p>
<p>It may be one of those things where to prevent accidents where you didn't mean it to be interpreted as a space, it shouldn't allow you to use it fetched from a WORD! in the rules.  You either use <code>@var</code> to say "I mean literally a blank" or you can make the rule contain a quoted value.</p>
<hr>
<h3><a name="p-6515-update-2025-just-want-to-to-point-out-there-are-other-tools-1" class="anchor" href="https://rebol.metaeducation.com#p-6515-update-2025-just-want-to-to-point-out-there-are-other-tools-1"></a>UPDATE 2025: Just Want To To Point Out There Are Other Tools</h3>
<p>A quasi-splice acts like an empty rule in source:</p>
<pre><code>&gt;&gt; parse "abc" ["a" ~()~ "b" "c"]
== "c"
</code></pre>
<p>And you can fetch splices out of variables also:</p>
<pre><code>&gt;&gt; rule: ~()~

&gt;&gt; parse "abc" ["a" rule "b" "c"]
== "c"
</code></pre>
<p>You can think of there being infinitely many empty splices at any position in a block.</p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/3</link>
        <pubDate>Thu, 01 Dec 2022 09:51:02 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1821-3</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821.rss">What Should BLANK! in UPARSE Do?</source>
      </item>
      <item>
        <title>What Should BLANK! in UPARSE Do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>What Should BLANK! in UPARSE Do?</strong></p>
</blockquote>
<p><strong>I've really found that I like BLANK! literally at source level as a way to say SPACE in string operations.</strong></p>
<p>So it could be useful in PARSE for this purpose:</p>
<pre><code>&gt;&gt; parse "aaa bbb" [some "a" _ some "b"]
== "b"
</code></pre>
<p>We haven't talked about the "blank and space" duality for a while, but I'd even gone as far to suggest that when you do something like TO BLOCK! of a string it might transform the spaces into blanks:</p>
<pre><code>&gt;&gt; to block! "the cat"
== [#t #h #e _ #c #a #t]
</code></pre>
<p><em>(People might not recall why I was mentioning this, but around the time of UTF-8 Everywhere it was pointed out that since we had non-fixed-size codepoints, seeking in strings and mutating them could be costly.  So if you had a string algorithm you might want to "explode" a string into a BLOCK! representation to work on it.  This would give you great flexibility to do things like put in substitutions with full strings, or mark the cells with intermediate states for your algorithm...and then you would collapse it all down at the end by turning it back into a string.)</em></p>
<h2><a name="p-6042-the-literal-interpretation-is-also-compelling-in-arrayssequences-1" class="anchor" href="https://rebol.metaeducation.com#p-6042-the-literal-interpretation-is-also-compelling-in-arrayssequences-1"></a>The Literal Interpretation Is Also Compelling in Arrays/Sequences</h2>
<p>I've thought of BLANK! as being the analogue to space in blocks, so matching them literally there makes sense:</p>
<pre><code>&gt;&gt; parse [a a a _ b b b] [some 'a _ some 'b]
== 'b
</code></pre>
<p>But where it really shines is in processing things like paths and tuples, to match the gaps in them:</p>
<pre><code>&gt;&gt; refinement-rule: [subparse path! [_ word!]]

&gt;&gt; parse [/foo] [refinement-rule]
== 'foo
</code></pre>
<p>That's a slam dunk.  So now we have the behavior tied up.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/relieved.png?v=14" title=":relieved:" class="emoji" alt=":relieved:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/2</link>
        <pubDate>Mon, 11 Jul 2022 19:38:50 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1821-2</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821.rss">What Should BLANK! in UPARSE Do?</source>
      </item>
      <item>
        <title>What Should BLANK! in UPARSE Do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's always good to look at history first.  So let's compare and contrast #[none] vs. empty block in old Redbols.</p>
<p><strong>In Rebol2 and R3-Alpha, both are no-ops.</strong>  The input type doesn't matter.</p>
<pre><code>r2/r3&gt;&gt; parse "ab" [[] "a" [] "b" []]
== true

r2/r3&gt;&gt; parse "ab" [#[none] "a" #[none] "b" #[none]]
== true

r2/r3&gt;&gt; parse [a b] [[] 'a [] 'b []]
== true

r2/r3&gt;&gt; parse [a b] [#[none] 'a #[none] 'b #[none]]
== true
</code></pre>
<p><strong>In Red, #[none]s are expected to be literal.</strong>  However, you don't get an error on string inputs...just a failure.</p>
<pre><code>red&gt;&gt; parse "ab" [[] "a" [] "b" []]
== true

red&gt;&gt; parse "ab" [#[none] "a" #[none] "b" #[none]]
== false

red&gt;&gt; parse [a b] [[] 'a [] 'b []]
== true

red&gt;&gt; parse [a b] [#[none] 'a #[none] 'b #[none]]
== false

red&gt;&gt; parse [#[none] a #[none] b #[none]] [#[none] 'a #[none] 'b #[none]]
== true
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821/1</link>
        <pubDate>Sun, 15 May 2022 22:35:24 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1821-1</guid>
        <source url="https://rebol.metaeducation.com/t/what-should-blank-in-uparse-do/1821.rss">What Should BLANK! in UPARSE Do?</source>
      </item>
  </channel>
</rss>
