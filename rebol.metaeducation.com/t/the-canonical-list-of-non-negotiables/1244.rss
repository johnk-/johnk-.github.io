<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Canonical List of Non-Negotiables</title>
    <link>https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244</link>
    <description>I realized this is something that maybe hasn&#39;t been attempted, but would be very useful.  That is **a list of concrete code samples where if Rebol won&#39;t run that code looking that way, *then it is dead to you*.**

I&#39;d imagine it&#39;s easier to say things like *&quot;it&#39;s dead to me if it requires me to install Java&quot;*.  But there must be something other than the meta-properties of the language which people consider foundational?  Actual code--looking and acting an actual way?

I&#39;m not looking for *controversial* things here--rather things generally agreed on as good.    But naming some of them out loud might have benefit.  I&#39;ll start.

## COMPOSE, UNSPACED, ETC. VAPORIZING CONDITIONALS

The lack of conditional vaporization bugged me to no end about Rebol2:

    rebol2&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
    == [&lt;a&gt; none &lt;c&gt;]  ; actually NONE! #[none], poorly rendered as WORD! `none`

    rebol2&gt;&gt; rejoin [&quot;a&quot; if false [&quot;b&quot;] &quot;c&quot;]
    == &quot;anonec&quot;

You had to throw in an EITHER with an empty branch, to get an UNSET!.

    rebol2&gt;&gt; compose [&lt;a&gt; (either false [&lt;b&gt;] []) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]

    rebol2&gt;&gt; rejoin [&quot;a&quot; either false [&quot;b&quot;] [] &quot;c&quot;]
    == &quot;ac&quot;

So I advocated vaporizing NONE! by default for a while...facing resistance from those wanting to use them as placeholders in blocks, adamant that NONE! *was a value*.

Hence the idea was moved around to being more like a failed conditional would return an UNSET!.  But because UNSET! was &quot;a value&quot;, it could legitimately be put into blocks.

Hence Ren-C rethought the playing field to have &quot;non-valued&quot; states...like NULL (which raised errors when you try to put in blocks, but could assign to a variable) and the VOID state (which would be a no-op when appended to blocks).

So failed conditionals were re-tuned to return VOID:

    &gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]

    &gt;&gt; unspaced [&quot;a&quot; if false [&quot;b&quot;] &quot;c&quot;]
    == &quot;ac&quot;

Since NULL state was an error in these situations, you can&#39;t go directly from a NULL variable to a vanishing slot without something that turns it into VOID.   The construct that does so is called MAYBE.

    &gt;&gt; var: null
    == ~null~  ; isotope

    &gt;&gt; compose [&lt;a&gt; (var) &lt;c&gt;]
    ** Error: need non-~null~ isotope value in COMPOSE slot

    &gt;&gt; compose [&lt;a&gt; (maybe var) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]


## [DEFINITIONAL RETURNS](https://rebol.metaeducation.com/t/what-are-definitional-returns/2191)

Definitely non-negotiable!

## ...and...

That&#39;s only two off the top of my head.  But my idea was that we can keep adding posts to this thread whenever someone thinks of something.  What *has* to work else it&#39;s &quot;dead to you&quot;?  @IngoHohmann, @rgchris, @gchiu, @Mark-hi, @BlackAttr... ?

Like I say: please avoid functionality concepts like &quot;has to talk to ODBC&quot;...unless you have a very specific code sample that looks *exactly* right for how it needs to look for some case.</description>
    
    <lastBuildDate>Thu, 17 Apr 2025 09:12:25 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://rebol.metaeducation.com/t/bad-ideas-failed-if-returning-null/2419">Bad Ideas: Failed IF Returning NULL</a></p>
          <p><a href="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/10">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/10</link>
        <pubDate>Thu, 17 Apr 2025 20:54:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1244-10</guid>
        <source url="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2><a name="p-6548-atomicity-of-elements-in-blocks-and-groups-1" class="anchor" href="https://rebol.metaeducation.com#p-6548-atomicity-of-elements-in-blocks-and-groups-1"></a>ATOMICITY OF ELEMENTS IN BLOCK!s AND GROUP!s</h2>
<p>A new non-negotiable for Ren-C is that for <em>any</em> BLOCK! (or blocklike thing) the following property holds:</p>
<pre><code>block2: copy []

for-each item block1 [append block2 item]

assert [block1 = block2]
</code></pre>
<p>Prior to isotopes, <em>it wasn't conceivable that such rules could hold.</em>  But after years scaling a mountain of design... I concluded this could be achieved, if all the tricky behaviors came from values "at quoting level -1" that could not be put into blocks.</p>
<ul>
<li>
<p>There are no isotopic actions to implicitly execute; you'd get an error trying to put them in the block.</p>
</li>
<li>
<p>There are no blocks/groups/paths that will splice into the target, because splicing requires an explicit conversion to an isotope.</p>
</li>
<li>
<p>There are no "unsets" to trip on that you can find in a block, because the state conveying "unsetness" (trash) is an isotope.</p>
</li>
</ul>
          <p><a href="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/9">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/9</link>
        <pubDate>Sat, 07 Jan 2023 23:35:01 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1244-9</guid>
        <source url="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were merged into an existing topic: <a href="https://rebol.metaeducation.com/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1858/7">The R3C Branch ("Chris's Rebol" or "Rebol 3 Conservative")</a></p>
          <p><a href="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/3</link>
        <pubDate>Mon, 15 Aug 2022 01:25:36 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1244-3</guid>
        <source url="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I don't have any non-negotiables at this stage of things. In the R2 past I've had minor annoyances, and I'm sure as I use Ren-C there will be things that I wish were more simple or compact.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/2</link>
        <pubDate>Mon, 02 Dec 2019 16:25:41 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1244-2</guid>
        <source url="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I realized this is something that maybe hasn't been attempted, but would be very useful.  That is <strong>a list of concrete code samples where if Rebol won't run that code looking that way, <em>then it is dead to you</em>.</strong></p>
<p>I'd imagine it's easier to say things like <em>"it's dead to me if it requires me to install Java"</em>.  But there must be something other than the meta-properties of the language which people consider foundational?  Actual code--looking and acting an actual way?</p>
<p>I'm not looking for <em>controversial</em> things here--rather things generally agreed on as good.    But naming some of them out loud might have benefit.  I'll start.</p>
<h2><a name="p-3618-compose-unspaced-etc-vaporizing-conditionals-1" class="anchor" href="https://rebol.metaeducation.com#p-3618-compose-unspaced-etc-vaporizing-conditionals-1"></a>COMPOSE, UNSPACED, ETC. VAPORIZING CONDITIONALS</h2>
<p>The lack of conditional vaporization bugged me to no end about Rebol2:</p>
<pre><code>rebol2&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; none &lt;c&gt;]  ; actually NONE! #[none], poorly rendered as WORD! `none`

rebol2&gt;&gt; rejoin ["a" if false ["b"] "c"]
== "anonec"
</code></pre>
<p>You had to throw in an EITHER with an empty branch, to get an UNSET!.</p>
<pre><code>rebol2&gt;&gt; compose [&lt;a&gt; (either false [&lt;b&gt;] []) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]

rebol2&gt;&gt; rejoin ["a" either false ["b"] [] "c"]
== "ac"
</code></pre>
<p>So I advocated vaporizing NONE! by default for a while...facing resistance from those wanting to use them as placeholders in blocks, adamant that NONE! <em>was a value</em>.</p>
<p>Hence the idea was moved around to being more like a failed conditional would return an UNSET!.  But because UNSET! was "a value", it could legitimately be put into blocks.</p>
<p>Hence Ren-C rethought the playing field to have "non-valued" states...like NULL (which raised errors when you try to put in blocks, but could assign to a variable) and the VOID state (which would be a no-op when appended to blocks).</p>
<p>So failed conditionals were re-tuned to return VOID:</p>
<pre><code>&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]

&gt;&gt; unspaced ["a" if false ["b"] "c"]
== "ac"
</code></pre>
<p>Since NULL state was an error in these situations, you can't go directly from a NULL variable to a vanishing slot without something that turns it into VOID.   The construct that does so is called MAYBE.</p>
<pre><code>&gt;&gt; var: null
== ~null~  ; isotope

&gt;&gt; compose [&lt;a&gt; (var) &lt;c&gt;]
** Error: need non-~null~ isotope value in COMPOSE slot

&gt;&gt; compose [&lt;a&gt; (maybe var) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]
</code></pre>
<h2><a name="p-3618-definitional-returnshttpsrebolmetaeducationcomtwhat-are-definitional-returns2191-2" class="anchor" href="https://rebol.metaeducation.com#p-3618-definitional-returnshttpsrebolmetaeducationcomtwhat-are-definitional-returns2191-2"></a><a href="https://rebol.metaeducation.com/t/what-are-definitional-returns/2191">DEFINITIONAL RETURNS</a></h2>
<p>Definitely non-negotiable!</p>
<h2><a name="p-3618-and-3" class="anchor" href="https://rebol.metaeducation.com#p-3618-and-3"></a>...and...</h2>
<p>That's only two off the top of my head.  But my idea was that we can keep adding posts to this thread whenever someone thinks of something.  What <em>has</em> to work else it's "dead to you"?  <a class="mention" href="https://rebol.metaeducation.com/u/ingohohmann">@IngoHohmann</a>, <a class="mention" href="https://rebol.metaeducation.com/u/rgchris">@rgchris</a>, <a class="mention" href="https://rebol.metaeducation.com/u/gchiu">@gchiu</a>, <a class="mention" href="https://rebol.metaeducation.com/u/mark-hi">@Mark-hi</a>, <a class="mention" href="https://rebol.metaeducation.com/u/blackattr">@BlackAttr</a>... ?</p>
<p>Like I say: please avoid functionality concepts like "has to talk to ODBC"...unless you have a very specific code sample that looks <em>exactly</em> right for how it needs to look for some case.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244/1</link>
        <pubDate>Fri, 29 Nov 2019 05:04:33 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1244-1</guid>
        <source url="https://rebol.metaeducation.com/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
  </channel>
</rss>
