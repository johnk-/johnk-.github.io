<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Synthesizing Parse Values From Thin Air: JUST</title>
    <link>https://rebol.metaeducation.com/t/synthesizing-parse-values-from-thin-air-just/2328</link>
    <description>I&#39;ve defined **JUST** to synthesize the value after it:

    &gt;&gt; uparse &quot;a&quot; [collect [keep just keep, keep &lt;any&gt;]]
    == [keep &quot;a&quot;]

So it&#39;s acting like this:

    &gt;&gt; uparse &quot;a&quot; [collect [keep (&#39;keep), keep &lt;any&gt;]]
    == [keep &quot;a&quot;]

This can be helpful when you&#39;re trying to build a rule with COMPOSE and the contention over GROUP! and trying to nest inside of it becomes a bummer.

As an example, let&#39;s say you&#39;re trying to build a KEEP parse rule inside a parse rule *(which I am actually at this moment trying to do in the whitespace interpreter project)*:

    name: &quot;Binky&quot;
    uparse ... [... collect [
         keep (compose [keep (to word! name)])
    ] ...]

Okay so that gives you **[keep Binky]**.  Not what you wanted since it will give an error that Binky is not defined.  You can quote it...

    keep (compose [keep &#39;(to word! name)])

Now you&#39;ve got **[keep &#39;Binky]**.  But you&#39;re not trying to match Binky in the input, you&#39;re trying to synthesize it out of thin air.  Imagine we need it in a GROUP!... let&#39;s just go ahead and use the wacky engroup operator to do that:

    keep (compose [keep (engroup quote to word! name)])

So we got our **[keep (&#39;Binky)]**... but that was annoying.  :cloud_with_rain:

Since JUST can literally synthesize a value without matching in parse, we can make something less head-scratchy:

    keep (compose [keep just (to word! name)])

And that gives us **[keep just Binky]** which is much nicer.  The key to seeing why this breaks us out of the problem is that it lets us get at literal values without a GROUP!, which means we aren&#39;t trying to COMPOSE inside of COMPOSE groups.</description>
    
    <lastBuildDate>Sun, 20 Jul 2025 02:17:37 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://rebol.metaeducation.com/t/synthesizing-parse-values-from-thin-air-just/2328.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Synthesizing Parse Values From Thin Air: JUST</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2328">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I've defined <strong>JUST</strong> to synthesize the value after it:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; uparse "a" [collect [keep just keep, keep &lt;any&gt;]]
== [keep "a"]
</code></pre>
</blockquote>
</aside>
<p><strong>Changes have made it so that <code>@FOO</code> is now a PINNED!, and not a THE-WORD!</strong>.</p>
<p>This frees up the word THE to have less baggage, and be used in these circumstances.</p>
<p>One idea on the difference in meaning between THE and JUST might be whether or not a binding is considered, e.g. THE will bind, but JUST gives you "just" the value with no binding.</p>
<p>On balance, I think probably the LIT/LITERAL/LITERALLY is likely still the best choice for "match this thing literally", because it implies a quote is involved (e.g. 'foo is still called a "lit-word") and if a quoted item occurs it's expected to match in the input.</p>
          <p><a href="https://rebol.metaeducation.com/t/synthesizing-parse-values-from-thin-air-just/2328/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/synthesizing-parse-values-from-thin-air-just/2328/2</link>
        <pubDate>Sun, 20 Jul 2025 02:17:37 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2328-2</guid>
        <source url="https://rebol.metaeducation.com/t/synthesizing-parse-values-from-thin-air-just/2328.rss">Synthesizing Parse Values From Thin Air: JUST</source>
      </item>
      <item>
        <title>Synthesizing Parse Values From Thin Air: JUST</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've defined <strong>JUST</strong> to synthesize the value after it:</p>
<pre><code>&gt;&gt; uparse "a" [collect [keep just keep, keep &lt;any&gt;]]
== [keep "a"]
</code></pre>
<p>So it's acting like this:</p>
<pre><code>&gt;&gt; uparse "a" [collect [keep ('keep), keep &lt;any&gt;]]
== [keep "a"]
</code></pre>
<p>This can be helpful when you're trying to build a rule with COMPOSE and the contention over GROUP! and trying to nest inside of it becomes a bummer.</p>
<p>As an example, let's say you're trying to build a KEEP parse rule inside a parse rule <em>(which I am actually at this moment trying to do in the whitespace interpreter project)</em>:</p>
<pre><code>name: "Binky"
uparse ... [... collect [
     keep (compose [keep (to word! name)])
] ...]
</code></pre>
<p>Okay so that gives you <strong>[keep Binky]</strong>.  Not what you wanted since it will give an error that Binky is not defined.  You can quote it...</p>
<pre><code>keep (compose [keep '(to word! name)])
</code></pre>
<p>Now you've got <strong>[keep 'Binky]</strong>.  But you're not trying to match Binky in the input, you're trying to synthesize it out of thin air.  Imagine we need it in a GROUP!... let's just go ahead and use the wacky engroup operator to do that:</p>
<pre><code>keep (compose [keep (engroup quote to word! name)])
</code></pre>
<p>So we got our <strong>[keep ('Binky)]</strong>... but that was annoying.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/cloud_with_rain.png?v=14" title=":cloud_with_rain:" class="emoji" alt=":cloud_with_rain:" loading="lazy" width="20" height="20"></p>
<p>Since JUST can literally synthesize a value without matching in parse, we can make something less head-scratchy:</p>
<pre><code>keep (compose [keep just (to word! name)])
</code></pre>
<p>And that gives us <strong>[keep just Binky]</strong> which is much nicer.  The key to seeing why this breaks us out of the problem is that it lets us get at literal values without a GROUP!, which means we aren't trying to COMPOSE inside of COMPOSE groups.</p>
          <p><a href="https://rebol.metaeducation.com/t/synthesizing-parse-values-from-thin-air-just/2328/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/synthesizing-parse-values-from-thin-air-just/2328/1</link>
        <pubDate>Sun, 15 Aug 2021 02:05:07 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2328-1</guid>
        <source url="https://rebol.metaeducation.com/t/synthesizing-parse-values-from-thin-air-just/2328.rss">Synthesizing Parse Values From Thin Air: JUST</source>
      </item>
  </channel>
</rss>
