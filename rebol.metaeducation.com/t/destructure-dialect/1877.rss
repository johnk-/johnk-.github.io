<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DESTRUCTURE Dialect</title>
    <link>https://rebol.metaeducation.com/t/destructure-dialect/1877</link>
    <description>I&#39;ve talked about this.  But there&#39;s no excuse not to write it, when there&#39;s so much power in modern PARSE *(the engine we up until recently called UPARSE)*.

A simple motivating case was a desire for different behavior from PARSE alternates with **`|`**.  So while **[word! | word! word!]** is always considered to be a badly-written parse rule, you could get a different treatment in destructure...because it always assumes you mean to go to `&lt;end&gt;`

    &gt;&gt; destructure [banana] [
          [word!] =&gt; [print &quot;Just one word&quot;]
          [word! word!] =&gt; [print &quot;Two words&quot;]
       ]
    Just one word

    &gt;&gt; destructure [apple banana] [
          [word!] =&gt; [print &quot;Just one word&quot;]  ; not complete, so no match
          [word! word!] =&gt; [print &quot;Two words&quot;]
       ]
    Two words

But the dialect concept is more ambitious than that, allowing you to give names to capture rules.  Then when you use those names, that&#39;s the variable that is set:

    &gt;&gt; destructure [apple banana] [
          w1: [word!] w2: [word!]

          [w1] =&gt; [print [&quot;One:&quot; w1]]
          [w1 w2] =&gt; [print [&quot;Two:&quot; w1 w2]]
       ]
    Two: apple banana

And because what&#39;s actually powering this behind the scenes is PARSE, you have all those tools at your disposal...including the just-added [ellipsis operator](https://rebol.metaeducation.com/t/the-yada-yada-yada-combinator/1876)!

    &gt;&gt; destructure [1 2 apple banana 3 4 5] [
          w1: [word!] w2: [word!]

          [w1] =&gt; [print [&quot;One:&quot; w1]]
          [w1 w2] =&gt; [print [&quot;Two:&quot; w1 w2]]
          [... w1 w2 ...] =&gt; [print [&quot;Words and more stuff:&quot; w1 w2]]
       ]
    Words and more stuff: apple banana

## A Crazy Short Implementation!

I&#39;m sure it will receive some enhancements, but... this is pretty badass for something I wrote that worked more or less the first time!

    destructure: func [
        input [any-series?]
        dialect [block!]
        :multi &quot;Run multiple branches&quot;
    ][
        let ^result: null
        let combinators: copy default-combinators
        parse dialect [until &lt;end&gt; [
            let set-word: *in* set-word?/, let rule: *in* block! (
                combinators.(unchain set-word): compose [(set-word) (rule)]
            )
            |
            let pattern: *in* block!, &#39;=&gt;, let branch: *in* block!
            (
                if parse-match:combinators input pattern combinators (
                    branch
                ) also ^r -&gt; [
                    if not multi [
                        return ^r
                    ]
                    result: r
                ]
            )
            |
            panic &quot;Invalid DESTRUCTURE dialect entry&quot;
        ]]
        return ^result
    ]

## And It&#39;s Composable, Too!

That&#39;s right... you can use DESTRUCTURE with ELSE and THEN.

It follows the rules; a destructure that does not match anything is null

    &gt;&gt; null? destructure [a] [[integer!] =&gt; [print &quot;Not happening&quot;]]
    == \~null~\  ; antiform

Notice I even threw a :MULTI feature in there, so you can match multiple ways!

    &gt;&gt; destructure:multi [apple banana] [
          w1: [word!] w2: [word!]

          [w1] =&gt; [print [&quot;One:&quot; w1]]
          [w1 w2] =&gt; [print [&quot;Two:&quot; w1 w2]]
          [repeat 2 &lt;any&gt;] =&gt; [print &quot;Matching any two values also counts&quot;]
       ]
    Two: apple banana
    Matching any two values also counts

---

# :boom: :raised_hand_with_fingers_splayed: :electric_plug:  POWER, IN YOUR HANDS! :electric_plug: :raised_hand_with_fingers_splayed:  :boom:</description>
    
    <lastBuildDate>Mon, 02 Jun 2025 20:29:04 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://rebol.metaeducation.com/t/destructure-dialect/1877.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>DESTRUCTURE Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1877">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>   let set-word: set-word!, let rule: block! (
        combinators.(to word! set-word): compose [(set-word) (rule)]
    )
    |
    let pattern: block!, '=&gt;, let branch: block!
</code></pre>
</blockquote>
</aside>
<p>So DESTRUCTURE was a victim of the new policy of extracting unbound structural data by default, and stopped working:</p>
<p><a href="https://rebol.metaeducation.com/t/how-to-capture-binding-of-parse-items/2137" class="inline-onebox">How to Capture Binding Of PARSE Items</a></p>
<p>But impressively, changing the above to use a binding operation that runs IN on the current input block made it work!  (Calling this <strong><code>*in*</code></strong> temporarily until a name is decided)</p>
<pre><code>   let set-word: *in* set-word!, let rule: *in* block! (
        combinators.(to word! set-word): compose [(set-word) (rule)]
    )
    |
    let pattern: *in* block!, '=&gt;, let branch: *in* block!
</code></pre>
<p>The <code>*in*</code> combinator was trivial to write:</p>
<pre><code>combinator [
    return: "Argument binding gotten INSIDE the current input"
        [any-value?]
    parser [action?]
    &lt;local&gt; ^result
][
    [^result remainder]: parser input except e -&gt; [
        return fail e
    ]

    return inside state.input ^result
]
</code></pre>
<p>And that's all it took.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/clap.png?v=14" title=":clap:" class="emoji" alt=":clap:" loading="lazy" width="20" height="20"></p>
<p>This is encouraging, and seeing this work out makes me more comfortable with merging <a href="https://rebol.metaeducation.com/t/rebol-and-scopes-well-why-not/1751/11">Pure Virtual Binding II</a> sooner rather than later.</p>
          <p><a href="https://rebol.metaeducation.com/t/destructure-dialect/1877/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/destructure-dialect/1877/3</link>
        <pubDate>Mon, 29 Jan 2024 20:16:42 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1877-3</guid>
        <source url="https://rebol.metaeducation.com/t/destructure-dialect/1877.rss">DESTRUCTURE Dialect</source>
      </item>
      <item>
        <title>DESTRUCTURE Dialect</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Awesome! Standing ovation!</p>
<p><img src="https://rebol.metaeducation.com/uploads/default/original/1X/7a491567ca291da1a3c64b4eec2bd643095bb8bc.gif" alt="applause-futurama" data-base62-sha1="hrMPBqBJar2oaCzFKe4Sxlbf43q" width="498" height="380" class="animated"></p>
          <p><a href="https://rebol.metaeducation.com/t/destructure-dialect/1877/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/destructure-dialect/1877/2</link>
        <pubDate>Tue, 12 Jul 2022 16:25:37 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1877-2</guid>
        <source url="https://rebol.metaeducation.com/t/destructure-dialect/1877.rss">DESTRUCTURE Dialect</source>
      </item>
      <item>
        <title>DESTRUCTURE Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've talked about this.  But there's no excuse not to write it, when there's so much power in modern PARSE <em>(the engine we up until recently called UPARSE)</em>.</p>
<p>A simple motivating case was a desire for different behavior from PARSE alternates with <strong><code>|</code></strong>.  So while <strong>[word! | word! word!]</strong> is always considered to be a badly-written parse rule, you could get a different treatment in destructure...because it always assumes you mean to go to <code>&lt;end&gt;</code></p>
<pre><code>&gt;&gt; destructure [banana] [
      [word!] =&gt; [print "Just one word"]
      [word! word!] =&gt; [print "Two words"]
   ]
Just one word

&gt;&gt; destructure [apple banana] [
      [word!] =&gt; [print "Just one word"]  ; not complete, so no match
      [word! word!] =&gt; [print "Two words"]
   ]
Two words
</code></pre>
<p>But the dialect concept is more ambitious than that, allowing you to give names to capture rules.  Then when you use those names, that's the variable that is set:</p>
<pre><code>&gt;&gt; destructure [apple banana] [
      w1: [word!] w2: [word!]

      [w1] =&gt; [print ["One:" w1]]
      [w1 w2] =&gt; [print ["Two:" w1 w2]]
   ]
Two: apple banana
</code></pre>
<p>And because what's actually powering this behind the scenes is PARSE, you have all those tools at your disposal...including the just-added <a href="https://rebol.metaeducation.com/t/the-yada-yada-yada-combinator/1876">ellipsis operator</a>!</p>
<pre><code>&gt;&gt; destructure [1 2 apple banana 3 4 5] [
      w1: [word!] w2: [word!]

      [w1] =&gt; [print ["One:" w1]]
      [w1 w2] =&gt; [print ["Two:" w1 w2]]
      [... w1 w2 ...] =&gt; [print ["Words and more stuff:" w1 w2]]
   ]
Words and more stuff: apple banana
</code></pre>
<h2><a name="p-6051-a-crazy-short-implementation-1" class="anchor" href="https://rebol.metaeducation.com#p-6051-a-crazy-short-implementation-1"></a>A Crazy Short Implementation!</h2>
<p>I'm sure it will receive some enhancements, but... this is pretty badass for something I wrote that worked more or less the first time!</p>
<pre><code>destructure: func [
    input [any-series?]
    dialect [block!]
    :multi "Run multiple branches"
][
    let ^result: null
    let combinators: copy default-combinators
    parse dialect [until &lt;end&gt; [
        let set-word: *in* set-word?/, let rule: *in* block! (
            combinators.(unchain set-word): compose [(set-word) (rule)]
        )
        |
        let pattern: *in* block!, '=&gt;, let branch: *in* block!
        (
            if parse-match:combinators input pattern combinators (
                branch
            ) also ^r -&gt; [
                if not multi [
                    return ^r
                ]
                result: r
            ]
        )
        |
        panic "Invalid DESTRUCTURE dialect entry"
    ]]
    return ^result
]
</code></pre>
<h2><a name="p-6051-and-its-composable-too-2" class="anchor" href="https://rebol.metaeducation.com#p-6051-and-its-composable-too-2"></a>And It's Composable, Too!</h2>
<p>That's right... you can use DESTRUCTURE with ELSE and THEN.</p>
<p>It follows the rules; a destructure that does not match anything is null</p>
<pre><code>&gt;&gt; null? destructure [a] [[integer!] =&gt; [print "Not happening"]]
== \~null~\  ; antiform
</code></pre>
<p>Notice I even threw a :MULTI feature in there, so you can match multiple ways!</p>
<pre><code>&gt;&gt; destructure:multi [apple banana] [
      w1: [word!] w2: [word!]

      [w1] =&gt; [print ["One:" w1]]
      [w1 w2] =&gt; [print ["Two:" w1 w2]]
      [repeat 2 &lt;any&gt;] =&gt; [print "Matching any two values also counts"]
   ]
Two: apple banana
Matching any two values also counts
</code></pre>
<hr>
<h1><a name="p-6051-boom-raised_hand_with_fingers_splayed-electric_plug-power-in-your-hands-electric_plug-raised_hand_with_fingers_splayed-boom-3" class="anchor" href="https://rebol.metaeducation.com#p-6051-boom-raised_hand_with_fingers_splayed-electric_plug-power-in-your-hands-electric_plug-raised_hand_with_fingers_splayed-boom-3"></a><img src="https://rebol.metaeducation.com/images/emoji/twitter/boom.png?v=14" title=":boom:" class="emoji" alt=":boom:" loading="lazy" width="20" height="20"> <img src="https://rebol.metaeducation.com/images/emoji/twitter/raised_hand_with_fingers_splayed.png?v=14" title=":raised_hand_with_fingers_splayed:" class="emoji" alt=":raised_hand_with_fingers_splayed:" loading="lazy" width="20" height="20"> <img src="https://rebol.metaeducation.com/images/emoji/twitter/electric_plug.png?v=14" title=":electric_plug:" class="emoji" alt=":electric_plug:" loading="lazy" width="20" height="20">  POWER, IN YOUR HANDS! <img src="https://rebol.metaeducation.com/images/emoji/twitter/electric_plug.png?v=14" title=":electric_plug:" class="emoji" alt=":electric_plug:" loading="lazy" width="20" height="20"> <img src="https://rebol.metaeducation.com/images/emoji/twitter/raised_hand_with_fingers_splayed.png?v=14" title=":raised_hand_with_fingers_splayed:" class="emoji" alt=":raised_hand_with_fingers_splayed:" loading="lazy" width="20" height="20">  <img src="https://rebol.metaeducation.com/images/emoji/twitter/boom.png?v=14" title=":boom:" class="emoji" alt=":boom:" loading="lazy" width="20" height="20"></h1>
          <p><a href="https://rebol.metaeducation.com/t/destructure-dialect/1877/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/destructure-dialect/1877/1</link>
        <pubDate>Tue, 12 Jul 2022 15:52:39 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1877-1</guid>
        <source url="https://rebol.metaeducation.com/t/destructure-dialect/1877.rss">DESTRUCTURE Dialect</source>
      </item>
  </channel>
</rss>
