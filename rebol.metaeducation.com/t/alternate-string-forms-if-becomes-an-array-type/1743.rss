<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Alternate String Forms if {...} Becomes An Array Type</title>
    <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743</link>
    <description>&gt; I&#39;ve brought up in earnest something I call **[&quot;The FENCE! Proposal&quot;](https://rebol.metaeducation.com/t/rethinking-braces-as-an-array-type/1727)**.  It involves retaking **{...}** for an *object-like-purpose*.
&gt;
&gt; The twist is that it&#39;s really another ANY-ARRAY! type, peer to [...] and (...) - but geared toward being a [shorthand for dialected MAKE](https://rebol.metaeducation.com/t/make-should-be-using-dialected-constructors/2196) (defaulting toward representing key/value stores).  Then as with [...] and (...), dialects would be free to override {...} in their own way.
&gt;
&gt; A sad consequence of this would be the loss of the alternative string form {...}.  Discussions of what to use instead were lengthier than the discussion of the proposal itself, so I&#39;ve moved them onto their own thread here...starting with my initial musing...

## What Other Asymmetric String Technique Might Be Used?

Some languages have weird techniques, like even letting you make up your own delimiters by whatever you use in front of the quote:

    str: ?&quot;This says &quot;quote followed by question mark&quot; terminates&quot;?
    str: |&quot;This says &quot;quote followed by bar&quot; terminates&quot;|
    str: xyz&quot;This says &quot;quote followed by zyx&quot; terminates&quot;zyx 

(Not making that up.)

The risk of using a symbol like | is that even if it looks good in isolation, you might not like it in a parse rule, like **rule1 | |&quot;some string&quot;| | rule2**.  A less-used character might be better.

Or perhaps those who really feel the need for another asymmetric string delimiter should assign a couple keys in their editor to unicode:

    str: «Maybe People «who really care» could use &quot;Chevrons&quot;?»

Who knows.  **[One place to look is the topic of &quot;HEREDOC&quot;](https://en.wikipedia.org/wiki/Here_document)**

Another place to look is the **[List of open/close paired braces/brackets/quotes in Unicode](https://stackoverflow.com/questions/13535172/list-of-all-unicodes-open-close-brackets)**</description>
    
    <lastBuildDate>Tue, 03 Sep 2024 09:27:56 +0000</lastBuildDate>
    <category>Lexer</category>
    <atom:link href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="giuliolunati" data-post="12" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/giuliolunati/48/203_2.png" class="avatar"> giuliolunati:</div>
<blockquote>
<p>This could be</p>
<pre><code>Rights: --"
   Copyright 2012 REBOL Technologies
   Copyright 2017-2021 Ren-C Open Source Contributors
"--
</code></pre>
</blockquote>
</aside>
<h2><a name="p-7536-i-think-giulios-direction-wins-out-here-1" class="anchor" href="https://rebol.metaeducation.com#p-7536-i-think-giulios-direction-wins-out-here-1"></a>I Think Giulio's Direction Wins Out Here</h2>
<pre><code>&gt;&gt; print -{Dashes on the edges to {build an "asymmetric delimiter}-
Dashes on the edges to {build an "asymmetric delimiter

&gt;&gt; --{Add more dashes }- to go a meta level -{ of capturing}--
Add more dashes }- to go a meta level -{ of capturing

&gt;&gt; --{Or just add more dashes if you want the string to stand out}--
Or just add more dashes if you want the string to stand out

&gt;&gt; print -{By default strings are raw \ ^ with no escaping}-
By default strings are raw \ ^ with no escaping}-

&gt;&gt; print \{Support backslash-style escaping...\n...using this syntax}\
Support backslash-style escaping...
...using this syntax

&gt;&gt; print ^{Rebol caret-style escaping...^/...using this syntax}^
Rebol caret-style escaping...
...using this syntax

&gt;&gt; print -\{Add dashes to escaped }syntax{...\n...if you need them}\-
Add dashes to escaped }syntax{...
...if you need them
</code></pre>
<h2><a name="p-7536-two-dashes-may-be-better-than-one-sometimes-2" class="anchor" href="https://rebol.metaeducation.com#p-7536-two-dashes-may-be-better-than-one-sometimes-2"></a>Two Dashes May Be Better Than One Sometimes!</h2>
<p>Making things stand out a bit actually helps some of the worse looking places!</p>
<pre><code>Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module
    Rights: --{
        Copyright 2012 REBOL Technologies
        Copyright 2017-2024 Ren-C Open Source Contributors
    }--
    License: --{
        Licensed under the Apache License, Version 2.0
        See: http://www.apache.org/licenses/LICENSE-2.0
    }--
    Description: --{
        It almost feels like "cut along dotted line".
        I'm surprisingly liking it.

        Defaulting to this makes it easy to stick in mentions
        of the }- construct used in code, without having to go
        touch up your delimiters when you introduce it.
   }--
]
</code></pre>
<h2><a name="p-7536-quoted-strings-and-tag-would-get-it-too-3" class="anchor" href="https://rebol.metaeducation.com#p-7536-quoted-strings-and-tag-would-get-it-too-3"></a>Quoted Strings And TAG! Would Get It Too</h2>
<pre><code>&gt;&gt; "You'll still have old quoted strings of course"
== "You'll still have old quoted strings of course"

&gt;&gt; -"Escape your quoted "string" like this"-
== Escape your quoted "string" like this

&gt;&gt; -&lt;your weird tag &gt; can have close tag in it now&gt;- 
== -&lt;your weird tag &gt; can have close tag in it now&gt;-
</code></pre>
<h2><a name="p-7536-its-taken-time-for-me-to-get-used-to-this-but-i-have-4" class="anchor" href="https://rebol.metaeducation.com#p-7536-its-taken-time-for-me-to-get-used-to-this-but-i-have-4"></a>It's Taken Time For Me To Get Used To This, But I Have</h2>
<p>I've gone from idly wondering if we should have FENCE! to wondering how we lived without it.</p>
<p>And I've been gradually picking and poking at examples to see how I like the new format.</p>
<p>Sometimes things just need to settle.</p>
<p>But anyway, I am on board with it, and I'll be using two dashes in module headers.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/30">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/30</link>
        <pubDate>Tue, 03 Sep 2024 09:20:17 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-30</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="giuliolunati" data-post="16" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/giuliolunati/48/203_2.png" class="avatar"> giuliolunati:</div>
<blockquote>
<p>Well, having<br>
"..." as multiline quasi-raw (with "" representing ")</p>
</blockquote>
</aside>
<p>I'm definitely liking the raw-by-default concept.  It makes the most sense.</p>
<p>I'm still leery of <strong>"..."</strong> being multiline (or even <strong>-"..."-</strong>).  With the <strong><code>-{...}-</code></strong> option available I think being able to rein in the frustration of unclosed quotes would be a benefit to having the choice.  Making the jump to the braced form would go hand in hand with having to be more vigilant/tolerant of the potentially mysterious errors that happen when multiline strings aren't correctly terminated and wind up coupling with a later delimiter than expected, making a larger-than-expected string.</p>
<p>Using <strong>""</strong> for escaping a single quote in a raw string vs. being an error is something to ponder ...as keeping from forcing you to a different string choice or the ugly <strong><code>\""\</code></strong> just to get a quote inside a quoted string.  But I still feel it's more logical to say:</p>
<pre><code>&gt;&gt; print """"
""
</code></pre>
<p>Instead of:</p>
<pre><code>&gt;&gt; print """"
== "
</code></pre>
<p>The idea of starting the quotes-look-for-pairs process when a quote is seen followed by a non-closing-delimiter seems novel and useful.</p>
<pre><code>&gt;&gt; print "I think "(this seems cool)" and would be useful."
I think "(this seems cool)" and would be useful.
</code></pre>
<p>So you wouldn't have to jump to the 2-character delimiter format of  <strong><code>-{...}-</code></strong> for common quoted material cases, making the fence transition introduce somewhat less "noise".</p>
<p>This strategy doesn't cut you any breaks if you want lone quotes inside a lone quoted string.  Since it's raw, there's no representation for that.  You have to go to more than one character for your delimiter...to use a different delimiter that doesn't conflict with quote, or to add the ability to escape.  So <strong><code>-{"}-</code></strong> or <strong><code>-"""-</code></strong> would be your only reasonable choices for a lone quote string... given that <strong><code>\"\""\</code></strong> is unreadable.</p>
<p>If doing something in C, the choice would clearly be the braced form, giving you the "about as good as it's going to get" option of:</p>
<pre><code>rebElide("print -{\"}-");  // backslash is for the C literal, not seen by Rebol
</code></pre>
<p>I was going to say it's not as "nice" as it was in the pre-FENCE! era:</p>
<pre><code>rebElide("print {\"}");
</code></pre>
<p>But actually it feels like there's a bit more guidance with that compound delimiter to know what you're looking at, fences or not.</p>
<aside class="quote no-group quote-modified" data-username="bradrn" data-post="27" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<aside class="quote no-group" data-username="hostilefork" data-post="26" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Regarding quote doubling... given the space-significance of Rebol, I wonder if a rule about nested quotes could be that if a quote isn't followed by a terminating delimiter character (space, <code>)</code> <code>]</code>, <code>}</code>, comma, newline) then it starts a paired quote?</p>
</blockquote>
</aside>
<p>I greatly dislike this approach — I think it’s a bad idea to make this work with some embedded quotes, but not others. That feels like it could get a bit confusing in practice.</p>
</blockquote>
</aside>
<p>If single quoted strings are confined to one line, it helps mitigate how out of hand this could get.  It's something that I think should be given a chance before dismissing it out of hand.</p>
<p>Everything about the practice of escaping strings comes down to tradeoff situations.  This just would be the case that if you are going to deal with putting quotes inside of single quoted strings, you would have to ask yourself <em>"am I doing a simple quote pair that doesn't clearly conflict with what looks like single-quoted string termination"</em>.  If the answer is no, choose another method.</p>
<p>I don't know if the deeper nuance to make closing delimiters legal under some situations but not others is worth it:</p>
<pre><code>"this would ") be illegal"  ; thinks the ) with space after is a closing delimiter 
"this could ")" be legal"  ; looks ahead and sees ), but then looks and sees "
</code></pre>
<p>But again, I wouldn't dismiss that out of hand either.  It may follow a simple-enough-to-articulate implementation rule, that is learnable in practice.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/29">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/29</link>
        <pubDate>Wed, 21 Feb 2024 23:29:20 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-29</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="25" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Out of those proposed, I don’t hate <code>#{…}</code> as a possible solution. <code>&lt;{…}&gt;</code> isn’t bad either.</p>
</blockquote>
</aside>
<p>With FENCE! existing, I think it's a given that anything that reuses <code>{}</code> needs to have the delimiter on both ends.  Not only is it an important visual cue after a long read to know you're not dealing with a fence, but it gives you the benefit of not having to escape lone <code>}</code>.</p>
<p>So we can look at the options like <strong><code>&lt;{...}&gt;</code></strong> or <strong><code>#{...}#</code></strong> or whatever.  And these stand out as a visual cue.</p>
<p>But perhaps the goal should often be to be more <em>slight</em>?  And if the goal is "distinguishibility but slightness", you can't get too much more slight than <strong><code>-</code></strong>.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module
    Rights: -{
        Copyright 2012 REBOL Technologies
        Copyright 2017-2021 Ren-C Open Source Contributors
    }-
    License: -{
        Licensed under the Apache License, Version 2.0
        See: http://www.apache.org/licenses/LICENSE-2.0
    }-
    Description: -{
       Note this reclaims the benefit of braces not escaping:
       
            printf("The char is } and it need not be escaped\n");

       So that's good.
   }-
]
</code></pre>
<p>If that's <em>too</em> slight to the point of being "too fency", then = is another option whose sleek horizontalness doesn't break the visual flow as much...though it does certainly break the flow.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module
    Rights: ={
        Copyright 2012 REBOL Technologies
        Copyright 2017-2021 Ren-C Open Source Contributors
    }=
    License: ={
        Licensed under the Apache License, Version 2.0
        See: http://www.apache.org/licenses/LICENSE-2.0
    }=
    Description: ={
       Note this reclaims the benefit of braces not escaping:
       
            printf("The char is } and it need not be escaped\n");

       So that's good.
   }=
]
</code></pre>
<p>My use of <strong>===</strong> as a section divider leads me to not wanting to see something this heavy in such positions.</p>
<p>Red has adopted <code>%{...}% </code> for "raw strings", e.g. those that you don't need to use escaping inside.  Which compromises the FILE! string type <strong>%file.txt</strong>, which would want to use <strong>%{...}%</strong> for spanning spaced filenames I'd imagine.</p>
<p>I believe I agree with <a class="mention" href="https://rebol.metaeducation.com/u/giuliolunati">@giuliolunati</a> that not using escaping makes the best <em>default</em>.  if you wanted escaping, then maybe backslash is the way to go.  Ugly, but it would call attention to the fact that you're using escaping...and you'd be able to notice if you took the escaping out and could drop the backslashes at that point.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module
    Rights: -{
        Copyright 2012 REBOL Technologies
        Copyright 2017-2021 Ren-C Open Source Contributors
    }-
    License: -{
        Licensed under the Apache License, Version 2.0
        See: http://www.apache.org/licenses/LICENSE-2.0
    }-
    Description: -\{
       Note this reclaims the benefit of braces not escaping:
       
            printf("The char is } and it need not be escaped\n");

       So that's good.  And here we can do \n\n\n for escaped lines.
   }\-
]
</code></pre>
<p>The slightness argument makes the <strong><code>-{...}-</code></strong> and <strong><code>-\{...}\-</code></strong> idea actually kind of compelling to me.  It wouldn't cause confusion with TAG! (and would leave <code>&lt;{...}&gt;</code> and <code>&lt;\{...}\&gt;</code> as an option for a tag that wouldn't need to escape &gt; inside of it.)</p>
<p>It's a pattern which could be used with quoted strings too.</p>
<pre><code>&gt;&gt; print "I'm a \n not escaped string"
I'm a \n not escaped string

&gt;&gt; print \"I'm an \nescaped string"\
I'm an
escaped string

&gt;&gt; print -"I'm a quote " safe string"-
I'm a quote " safe string

&gt;&gt; print -\"I'm a quote " safe\nescaped string"\-
I'm a quote " safe
escaped string
</code></pre>
<p>Gives you options.  <strong><code>-{"}-</code></strong> isn't a fantastic way to say "single quote" but it's better than <strong><code>-"""-</code></strong> and definitely better than <strong><code>\"\""\</code></strong></p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/28">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/28</link>
        <pubDate>Wed, 21 Feb 2024 21:08:44 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-28</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="26" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Regarding quote doubling... given the space-significance of Rebol, I wonder if a rule about nested quotes could be that if a quote isn't followed by a terminating delimiter character (space, <code>)</code> <code>]</code>, <code>}</code>, comma, newline) then it starts a paired quote?</p>
</blockquote>
</aside>
<p>I greatly dislike this approach — I think it’s a bad idea to make this work with some embedded quotes, but not others. That feels like it could get a bit confusing in practice.</p>
<p>Also, that doesn’t solve the problem of passing strings in the C API.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/27">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/27</link>
        <pubDate>Fri, 02 Feb 2024 00:02:15 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-27</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="giuliolunati" data-post="3" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/giuliolunati/48/203_2.png" class="avatar"> giuliolunati:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">^"I'm an ^"^^-escaped^" string, ^^ and ^" must be escaped, \ is literal!"

\\"I'm an \\"\\\\-escaped\\" string, \\\\ and \\" must be escaped, ^ is literal!"

"I'm a ""raw"" string, ^ and \\ are literal, but "" must be doubled!"
</code></pre>
</blockquote>
</aside>
<p>So I'm actually probably more concerned about the need to escape in the &lt;{ }&gt; notation than I am about needing to escape in the plain string notation.  Because the &lt;{ }&gt; is designed for just spanning a bunch of freeform text... quite possibly from another programming language.</p>
<p>Regarding quote doubling... given the space-significance of Rebol, I wonder if a rule about nested quotes could be that if a quote isn't followed by a terminating delimiter character (space, <code>)</code> <code>]</code>, <code>}</code>, comma, newline) then it starts a paired quote?</p>
<pre><code> "I'm an "example" string and my quotes work fine"
</code></pre>
<p>So the rule being that <strong><code>"e</code></strong>  wasn't a string termination sequence because the quote wasn't followed by a delimiter, and so instead it cued a "nested quote mode" where it will consume the next quote.</p>
<p>When in nested quote mode, the next quote would have to end the nest, regardless of what was after it.</p>
<p>It wouldn't work for:</p>
<pre><code> "My favorite symbol is the " " symbol"
 "My favorite symbol is the "," symbol"
 "My favorite symbol is the "]" symbol"
 "My favorite symbol is the "}" symbol"
 "My favorite symbol is the ")" symbol"
 "My favorite symbol is the "
 " symbol"
</code></pre>
<p>But I think it would cover most of the nested quote situations that occur in practice.  (And actually, we could in theory make the middle cases work if we said that a nested quote followed by delimiters but no spaces or newlines until the next quote are still part of the same string, which might be a good rule)</p>
<p>After having seen an opening quote, then seeing a quote followed by another quote could be considered to be one of the non-terminating conditions (treat <strong><code>""</code></strong> as if you'd seen <strong><code>"e</code></strong> or whatever) such that:</p>
<pre><code>&gt;&gt; print """"
== ""
</code></pre>
<p>That seems natural to me.  I think the idea of doubling quotes inside strings to get one quote feels less natural, and if we have to use an escape sequence to get an unpaired or weird quote it doesn't bother me so much if the common desire is covered.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/26">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/26</link>
        <pubDate>Thu, 01 Feb 2024 20:51:01 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-26</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>Ah, I didn’t realise this thread existed already, sorry! I do see the issues with <code>"…"</code> now.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="24" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>What I really want is a clean way to embed strings-in-strings for API usage, and it's woeful that none of the solutions feel good.</p>
</blockquote>
</aside>
<p>Out of those proposed, I don’t hate <code>#{…}</code> as a possible solution. <code>&lt;{…}&gt;</code> isn’t bad either.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/25">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/25</link>
        <pubDate>Wed, 31 Jan 2024 04:32:54 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-25</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="23" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>could the usual <code>""</code> strings be made multiline? I don’t see any reason they <em>couldn’t</em> contain newlines. And it seems to be a <a href="http://rigaux.org/language-study/syntax-across-languages/Strng.html#StrngMltLine">pretty popular choice</a> amongst programming languages.</p>
</blockquote>
</aside>
<p>Giuilio mentions it at the top of this thread, and I don't know that I have super strong opinions on it... though I'm slightly biased against it.</p>
<p>What I really want is a clean way to embed strings-in-strings for API usage, and it's woeful that none of the solutions feel good.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/24">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/24</link>
        <pubDate>Wed, 31 Jan 2024 01:35:52 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-24</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-post-not-found" data-username="hostilefork" data-post="32" data-topic="1727">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/rethinking-braces-as-an-array-type/1727/32">{ Rethinking Braces }... as an array type?</a></div>
<blockquote>
<p>Losing braces as an alternative string notation will hurt some, forcing us to choose another option. <strong><code>-{this could be a string}-</code></strong> for instance, and not only would it not look that bad but it could also embed unpaired braces.</p>
</blockquote>
</aside>
<p>A small suggestion: could the usual <code>""</code> strings be made multiline? I don’t see any reason they <em>couldn’t</em> contain newlines. And it seems to be a <a href="http://rigaux.org/language-study/syntax-across-languages/Strng.html#StrngMltLine">pretty popular choice</a> amongst programming languages. (Curiously, it seems particularly popular amongst the ‘minimalistic’ bunch: Lisps, Smalltalk, Io, etc.)</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/23">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/23</link>
        <pubDate>Wed, 31 Jan 2024 01:26:51 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-23</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[johnk]]></dc:creator>
        <description><![CDATA[
            <p>A tricky decision indeed.<br>
I can see the value of the API use case and it is a very good cause. Would it be an option to support both? That way <code>"""</code> is easier for new users and the <code>&lt;{</code> <code>}&gt;</code> is great for APIs? I agree that this is still not ideal, but might be worth considering if the implementation effort is low. Thanks, John</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/22">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/22</link>
        <pubDate>Tue, 19 Oct 2021 01:05:46 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-22</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="johnk" data-post="20" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/johnk/48/229_2.png" class="avatar"> johnk:</div>
<blockquote>
<p>Given all the options my vote would be for the triple quote - <code>"""</code></p>
</blockquote>
</aside>
<p>Note that triple quotes doesn't help as a new answer for the API example (it makes it exponentially worse if you tried to use them!)</p>
<pre><code>rebElide("print {If braces are given up, how to replace this?}");
</code></pre>
<p>Remembering that I'm trying to avoid a lot of ugly API calls like:</p>
<pre><code>rebElide("print \"If braces are given up, how to replace this?\"");
</code></pre>
<p>C doesn't have any alternatives there besides quotes.  And JavaScript has apostrophe-delimited strings as an alternative, but we use apostrophe a lot inside code so that's not good either.</p>
<p>Rebol is so saturated in its use of symbols that creative choices are unavailable.</p>
<pre><code>obj: (|x: 10, y:20|)  ; for instance, (| "banana clips" |)
</code></pre>
<p>We believe | and || are legal symbol in arrays, and <code>(||)</code> is a 1-element GROUP! with || in it, while <code>(| |)</code> is a 2-element GROUP! of two |'s</p>
<p>It's tough here, and <strong>&lt;{</strong> and <strong>}&gt;</strong> so far still seem like a practical answer which allows braces to take on a new role.  But we don't really know if that role will pay off yet, so it's worth continuing to think.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/21">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/21</link>
        <pubDate>Tue, 19 Oct 2021 00:51:29 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-21</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[johnk]]></dc:creator>
        <description><![CDATA[
            <p>Given all the options my vote would be for the triple quote - <code>"""</code><br>
The majority of languages use <code>"</code> for strings and the triple makes the fact that it is a "special" string stand out. It also makes it easier to spot the closing quotes in long multi-line strings. Python uses <code>"""</code> and is very popular which will aid readability for new users.<br>
Thanks, John</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/20">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/20</link>
        <pubDate>Tue, 19 Oct 2021 00:39:00 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-20</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>I've brought up in earnest something I call <strong><a href="https://rebol.metaeducation.com/t/rethinking-braces-as-an-array-type/1727">"The FENCE! Proposal"</a></strong>.  It involves retaking <strong>{...}</strong> for an <em>object-like-purpose</em>.</p>
<p>The twist is that it's really another ANY-ARRAY! type, peer to [...] and (...) - but geared toward being a <a href="https://rebol.metaeducation.com/t/make-should-be-using-dialected-constructors/2196">shorthand for dialected MAKE</a> (defaulting toward representing key/value stores).  Then as with [...] and (...), dialects would be free to override {...} in their own way.</p>
<p>A sad consequence of this would be the loss of the alternative string form {...}.  Discussions of what to use instead were lengthier than the discussion of the proposal itself, so I've moved them onto their own thread here...starting with my initial musing...</p>
</blockquote>
<h2><a name="p-5578-what-other-asymmetric-string-technique-might-be-used-1" class="anchor" href="https://rebol.metaeducation.com#p-5578-what-other-asymmetric-string-technique-might-be-used-1"></a>What Other Asymmetric String Technique Might Be Used?</h2>
<p>Some languages have weird techniques, like even letting you make up your own delimiters by whatever you use in front of the quote:</p>
<pre><code>str: ?"This says "quote followed by question mark" terminates"?
str: |"This says "quote followed by bar" terminates"|
str: xyz"This says "quote followed by zyx" terminates"zyx 
</code></pre>
<p>(Not making that up.)</p>
<p>The risk of using a symbol like | is that even if it looks good in isolation, you might not like it in a parse rule, like <strong>rule1 | |"some string"| | rule2</strong>.  A less-used character might be better.</p>
<p>Or perhaps those who really feel the need for another asymmetric string delimiter should assign a couple keys in their editor to unicode:</p>
<pre><code>str: «Maybe People «who really care» could use "Chevrons"?»
</code></pre>
<p>Who knows.  <strong><a href="https://en.wikipedia.org/wiki/Here_document">One place to look is the topic of "HEREDOC"</a></strong></p>
<p>Another place to look is the <strong><a href="https://stackoverflow.com/questions/13535172/list-of-all-unicodes-open-close-brackets">List of open/close paired braces/brackets/quotes in Unicode</a></strong></p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/1</link>
        <pubDate>Mon, 18 Oct 2021 01:06:44 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-1</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="iArnold" data-post="17" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/iarnold/48/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>Why again did Rebol choose to separate single-line strings from multi-line strings?</p>
</blockquote>
</aside>
<p>Double-quoted strings are fairly universal so supporting them was to look familiar, and because having two forms of string delimiter means you can write <strong>"}"</strong> and <strong>{"}</strong>...picking the best one for your content.</p>
<p>Having double-quoted strings not be multi-line means you'll get easier to interpret errors when you forget the closing quotes.  Odds are you have another set of quotes somewhere in your program to pair with, so you'll get a closed string no matter what...and so your error will be something weirder than "no close quote for string".  It will be the result of trying to scan what was supposed to be the insides of another string.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/18">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/18</link>
        <pubDate>Thu, 07 Oct 2021 03:39:07 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-18</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Why again did Rebol choose to separate single-line strings from multi-line strings?<br>
A string is a string, even if it contains newlines.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/17">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/17</link>
        <pubDate>Wed, 06 Oct 2021 20:50:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-17</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[giuliolunati]]></dc:creator>
        <description><![CDATA[
            <p>Well, having<br>
"..." as multiline quasi-raw (with "" representing ")<br>
\"..." as multiline \-escaped<br>
(and maybe ^"..." as multiline ^-escaped ?)<br>
would be good enough for me<br>
(And I think I'll never need to use &lt;{ ... }&gt;)</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/16">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/16</link>
        <pubDate>Mon, 04 Oct 2021 09:22:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-16</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="giuliolunati" data-post="3" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/giuliolunati/48/203_2.png" class="avatar"> giuliolunati:</div>
<blockquote>
<p><code>"I'm a ""raw"" string, ^ and \\ are literal, but "" must be doubled!"</code></p>
</blockquote>
</aside>
<p>The raw string idea, along with no escaping by default, seems good.  I like the doubled quotes being an option.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/15">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/15</link>
        <pubDate>Mon, 04 Oct 2021 08:55:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-15</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>All this is showing just how valuable and rare the ASCII-range asymmetric delimiters really are.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/ring.png?v=14" title=":ring:" class="emoji" alt=":ring:" loading="lazy" width="20" height="20"></p>
<aside class="quote no-group" data-username="giuliolunati" data-post="12" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/giuliolunati/48/203_2.png" class="avatar"> giuliolunati:</div>
<blockquote>
<p>This could be</p>
<pre><code>Rights: --"
    Copyright 2012 REBOL Technologies
    Copyright 2017-2021 Ren-C Open Source Contributors
"--
</code></pre>
</blockquote>
</aside>
<p>I'll mention that we're using <strong>--</strong> for dumping abstractions at the moment, and it's been pretty good for that:</p>
<pre><code>&gt;&gt; block: [a b c]

&gt;&gt; -- block
== [a b c]
</code></pre>
<p>We'd have to use something else, but I guess there's nothing wrong with going back to <strong><code>??</code></strong></p>
<aside class="quote no-group quote-post-not-found" data-username="giuliolunati" data-post="17" data-topic="1727">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/giuliolunati/48/203_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/rethinking-braces-as-an-array-type/1727/17">{ Rethinking Braces }... as an array type?</a></div>
<blockquote>
<p>and with ++"..."++</p>
</blockquote>
</aside>
<p>If we introduce multiple delimiter kinds, we start getting problems on the representation...</p>
<p>What happens when someone appends a <strong>--"..."--</strong> string to a <strong>++"..."++</strong> string?  How should the appended result be molded?</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/14">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/14</link>
        <pubDate>Mon, 04 Oct 2021 08:52:40 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-14</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Another possibility is to have a character that means "make a string to the end of line", and then putting these in BLOCK!s:</p>
<pre><code>Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module
    Rights: [
      \ Copyright 2012 REBOL Technologies
      \ Copyright 2017-2021 Ren-C Open Source Contributors
    ]
    License: [
      \ Licensed under the Apache License, Version 2.0
      \ See: http://www.apache.org/licenses/LICENSE-2.0
    ]
    Description: [
      \ We've gotten used to writing anything we want inside of braced
      \ strings...this gives us more freedom with single braces:
      \
      \      printf("The char is } and that's okay\n");
      \
      \ So there's a benefit to it.
   ]
]
</code></pre>
<p>Several languages (like Haskell) basically don't have better answers for multi-line strings vs. <em>"apply an operator that inserts newlines onto an array of strings"</em>.  There's a specialization of DELIMIT/TAIL that does that, and it's called NEWLINED.</p>
<pre><code>&gt;&gt; newlined ["one" "two"]
== "one^/two^/"
</code></pre>
<p>It looks kind of jarring to use a character that is not straight up-and-down.</p>
<pre><code>; We're used to seeing multiple lines like this,
; and I think it's more comfortable because of the verticality.
</code></pre>
<p>Perhaps lone exclamation mark?  We might even argue that if a FENCE! sees strings inside of it, then the evaluator will make a string out of what it gets...</p>
<pre><code>Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module
    Rights: {
      ! Copyright 2012 REBOL Technologies
      ! Copyright 2017-2021 Ren-C Open Source Contributors
    }
    License: {
      ! Licensed under the Apache License, Version 2.0
      ! See: http://www.apache.org/licenses/LICENSE-2.0
    }
    Description: {
      ! We've gotten used to writing anything we want inside of braced
      ! strings...this gives us more freedom with single braces:
      !
      !      printf("The char is } and that's okay\n");
      !
      ! So there's a benefit to it.
   }
]
</code></pre>
<p>So imagine FENCE! having this reaction:</p>
<pre><code>&gt;&gt; {x: 10 y: 10 + 10}
== object!##{x: 10 y: 20}

&gt;&gt; {"one" "two"}
== "one^/two^/"
</code></pre>
<p>This would mean that FENCE! alone wouldn't represent a MAP!, but maybe you make mappings with "double-fences" ?</p>
<pre><code>&gt;&gt; {{"one" "two"}}
== map!##{{"one" "two"}}
</code></pre>
<p>We've talked about how some serializations would turn in-memory representations into source code, and maybe that could be true of this as well.</p>
<pre><code>&gt;&gt; var: {
    ! Line one
    ! Line two
}
== text!{
    ! Line one
    ! Line two
}

&gt;&gt; serialize var
== {
    ! Line one
    ! Line two
}
</code></pre>
<p>It knows that the data produced by evaluation is no longer a FENCE! but a TEXT!, however you can use operations that go back to source...just like with OBJECT!s.</p>
<p>This has the slight advantage of being Redbol compatible, although it doesn't address single-line braced strings.</p>
<p>Weird, yes, but it's good to just make sure all the options are examined.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/13">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/13</link>
        <pubDate>Mon, 04 Oct 2021 07:50:19 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-13</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[giuliolunati]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">Rights: &lt;{
        Copyright 2012 REBOL Technologies
        Copyright 2017-2021 Ren-C Open Source Contributors
    }&gt;
</code></pre>
</blockquote>
</aside>
<p>This could be</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">Rights: --"
        Copyright 2012 REBOL Technologies
        Copyright 2017-2021 Ren-C Open Source Contributors
"--
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/12">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/12</link>
        <pubDate>Sun, 03 Oct 2021 18:30:31 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-12</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[giuliolunati]]></dc:creator>
        <description><![CDATA[
            <p>I'd like "named quotes":<br>
WORD"..."WORD<br>
e.g. with --"..."--</p>
<pre><code>--"2^3
"string""--
=
"2^^3^/^"string^""
</code></pre>
<p>and with ++"..."++</p>
<pre><code>++" --"string"-- "++
=
" --^"string^"-- "
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/11">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/11</link>
        <pubDate>Sun, 03 Oct 2021 18:25:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-11</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[giuliolunati]]></dc:creator>
        <description><![CDATA[
            <p>No syntactic indentation please, keep the freeform style of Rebol !!</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/10">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/10</link>
        <pubDate>Sun, 03 Oct 2021 13:46:33 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-10</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2><a name="p-5550-angle-bracket-1" class="anchor" href="https://rebol.metaeducation.com#p-5550-angle-bracket-1"></a>Angle + Bracket</h2>
<aside class="quote no-group quote-post-not-found" data-username="giuliolunati" data-post="7" data-topic="1727" data-full="true">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/giuliolunati/48/203_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/rethinking-braces-as-an-array-type/1727/7">{ Rethinking Braces }... as an array type?</a></div>
<blockquote>
<p>I prefer ` over &lt;{ }&gt;</p>
<p>Another use of {...} is in command line:</p>
<pre><code>`bash&gt; r3 script.reb string: {the-string}`
 &lt;{...}&gt; would need quoting:
`bash&gt; r3 script.reb string: "&lt;{the-string}&gt;"`
</code></pre>
</blockquote>
</aside>
<p>As you point out, backticks have the same problem.  But as I've said, one of the potentially nice things about calling the new array type FENCE! could be that we stay fluid on its dialecting purpose...and sometimes it's used for things that could be text but contain quoted items.  Like I say--that won't help you with semicolons or anything non-LOADable, but it may cover a lot of cases.</p>
<p>If you look at things like module headers, I think the <strong>&lt;{ }&gt;</strong> is not the worst thing in the world:</p>
<pre><code>Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module
    Rights: &lt;{
        Copyright 2012 REBOL Technologies
        Copyright 2017-2021 Ren-C Open Source Contributors
    }&gt;
    License: &lt;{
        Licensed under the Apache License, Version 2.0
        See: http://www.apache.org/licenses/LICENSE-2.0
    }&gt;
    Description: &lt;{
       We've gotten used to writing anything we want inside of braced
       strings...this gives us more freedom with single braces:
       
            printf("The char is } and that's okay\n");

       So there's a benefit to it.
   }&gt;
]
</code></pre>
<p>Compare with a backtick, which I do find to be worse, personally.  It looks like... there's dirt on the screen.  <em>(So actually agreeing with <a class="mention" href="https://rebol.metaeducation.com/u/iarnold">@iArnold</a> on that, it's a bad character.)</em></p>
<p>One other advantage of is that <em>it is LOAD-compatible</em> with R3-Alpha (more relevantly, older Ren-Cs), which would consider it to be a TAG!.</p>
<p>Red scans <code>&lt;{}&gt;</code> as <code>&lt; {} &gt;</code> at this time, but perhaps they'd decide that having curly braces in tags is more valuable than that compression.  Probably not.</p>
<h2><a name="p-5550-backticks-2" class="anchor" href="https://rebol.metaeducation.com#p-5550-backticks-2"></a>Backticks</h2>
<pre><code>Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module
    Rights: `
        Copyright 2012 REBOL Technologies
        Copyright 2017-2021 Ren-C Open Source Contributors
    `
    License: `
        Licensed under the Apache License, Version 2.0
        See: http://www.apache.org/licenses/LICENSE-2.0
    `
    Description: `
       We've gotten used to writing anything we want inside of braced
       strings...this gives us more freedom with single braces:
       
            printf("The char is } and that's okay\n");

       So there's a benefit to it.
   `
]
</code></pre>
<p>Double-quotes just doesn't fit the bill because quotes are used too freely inside both text and code samples, and we've gotten too used to that.</p>
<h2><a name="p-5550-backslash-with-indentation-3" class="anchor" href="https://rebol.metaeducation.com#p-5550-backslash-with-indentation-3"></a>Backslash with Indentation?</h2>
<p>I've really been wishing multiline text literals could have something like Yaml does, where indentation drives it.  They use | which is clean, but we'd hate to lose the symbol for other purposes.  Maybe backslash?</p>
<pre><code>Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module

    Rights: \
        Copyright 2012 REBOL Technologies
        Copyright 2017-2021 Ren-C Open Source Contributors

    License: \
        Licensed under the Apache License, Version 2.0
        See: http://www.apache.org/licenses/LICENSE-2.0

    Description: \
       We've gotten used to writing anything we want inside of braced
       strings...this gives us more freedom with single braces:
       
            printf("The char is } and that's okay\n");

       So there's a benefit to it.
]
</code></pre>
<p>Indentation-driven answers have the benefit of not needing to worry about escape sequences.</p>
<h2><a name="p-5550-pound-sign-plus-braces-4" class="anchor" href="https://rebol.metaeducation.com#p-5550-pound-sign-plus-braces-4"></a>Pound Sign Plus Braces</h2>
<p>I'll also point out that I'd been talking about a new notation for BINARY!, e.g. <strong>&amp;{...}</strong> in order to free up <strong>#{...}</strong> as an ISSUE!+TOKEN!+CHAR! notation, so that would be an immutable string literal.  (Note that ASON suggests Carl wanted to make all string literals immutable.)  But I think #{} looks pretty bad for the above:</p>
<pre><code>Rebol [
    Title: "Your module title here"
    Type: module
    Name: your-module
    Rights: #{
        Copyright 2012 REBOL Technologies
        Copyright 2017-2021 Ren-C Open Source Contributors
    }
    License: #{
        Licensed under the Apache License, Version 2.0
        See: http://www.apache.org/licenses/LICENSE-2.0
    }
    Description: #{
       Note that this would not have the benefit of braces not escaping:
       
            printf("The char is ^} and must be escaped\n");

       So that's a drawback.
   }
]
</code></pre>
<p>Something about that I find more jarring than <strong>&lt;{...}&gt;</strong>, but it also doesn't have the advantage of not needing to escape single braces.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/9">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/9</link>
        <pubDate>Sun, 03 Oct 2021 12:29:37 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-9</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[giuliolunati]]></dc:creator>
        <description><![CDATA[
            <p>Another use of {...} is in command line:<br>
<code>bash&gt; r3 script.reb string: {the-string}</code><br>
&lt;{...}&gt; would need quoting:<br>
<code>bash&gt; r3 script.reb string: "&lt;{the-string}&gt;"</code></p>
<p>Same issue for backticks.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/8">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/8</link>
        <pubDate>Fri, 01 Oct 2021 11:40:24 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-8</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="iArnold" data-post="6" data-topic="1743">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/iarnold/48/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>Braces are bad otherwise because of their similarity with parenthesis, sometimes it is hard to see they are used.</p>
</blockquote>
</aside>
<p>I've never had a problem distinguishing them.</p>
<p>Do note that in dialects, the "sea of words" means that this new FENCE! could be used as a kind of string.</p>
<pre><code>&gt;&gt; thing: '{"Almost anything" you write, it's possible to LOAD now.}

&gt;&gt; type of thing
== #[datatype! fence!]

&gt;&gt; first thing
== "Almost anything"

&gt;&gt; last thing
== now.

&gt;&gt; type of last thing
== #[datatype! tuple!]

&gt;&gt; print thing  ; let's say it interprets FENCE! as needing to be FORM'd
"Almost anything" you write, it's possible to LOAD now.
</code></pre>
<p><em><strong>Very interestingly... this can be made compatible...</strong></em> because <strong><code>'{quoted braces}</code></strong> drops the quote under evaluation in historical Ren-C and gives you a TEXT!.  So a construct could be rigged to take what quoted braces produce either way, so long as it was LOAD-able.</p>
<p>Of course some things don't work, like semicolons.  And unless something changes in the plan, parentheses directly adjoining words wouldn't work either, like <strong><code>{foo()}</code></strong></p>
<p>It does mean that in things like module headers or function specs, there could be a rule like saying that fences are handled like strings.</p>
<pre><code>foo: func [
    {Maybe this still works, with "strings" in it, if you want it to?}
    return: [integer!]
    args...
][...]
</code></pre>
<p>Certainly tolerance of this would be needed as a compatibility measure.  But maybe it's more than compatibility.  Maybe it's an enduring duality of what <em>"fences"</em> are for.</p>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/7">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/7</link>
        <pubDate>Fri, 01 Oct 2021 06:58:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-7</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
      <item>
        <title>Alternate String Forms if {...} Becomes An Array Type</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Oh please no backticks, that key should be removed from all keyboards worldwide as far as I am concerned.</p>
<p>I am also "attached" to our use of braces.</p>
<p>Braces are bad otherwise because of their similarity with parenthesis, sometimes it is hard to see they are used.<br>
They use of the curly brackets in this language is one of the things I particularly like about Rebol.</p>
<p>The small list of Rebol features that kept me:</p>
<ul>
<li>1-based</li>
<li>case insensitive</li>
<li>no curly braces, only for multiline string</li>
<li>no parentheses needed for function call / parameter passing</li>
<li>many data types, no need to recreate all those trivial ones over and over again</li>
<li>Almost all functionality out of the box, no import needed even for much used "library" things</li>
<li>pleasing syntax, flexibility</li>
</ul>
          <p><a href="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743/6</link>
        <pubDate>Fri, 01 Oct 2021 06:35:49 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1743-6</guid>
        <source url="https://rebol.metaeducation.com/t/alternate-string-forms-if-becomes-an-array-type/1743.rss">Alternate String Forms if {...} Becomes An Array Type</source>
      </item>
  </channel>
</rss>
