<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Replacing HANDLE! with Extension Types</title>
    <link>https://rebol.metaeducation.com/t/replacing-handle-with-extension-types/2390</link>
    <description>I&#39;ve made big progress on resurrecting the concept of [&quot;Extension Types&quot;](https://rebol.metaeducation.com/t/extension-types-implementation/1203).

The first implementation of them was creaky and I was just learning how the system would have to be shaped and redesigned to support them.  But now they&#39;re starting to work, and work *really well*.  This means we can basically have tons of datatypes and not break a sweat.

## I Think They Can Completely Replace HANDLE!

The idea behind HANDLE! historically was just that you had some piece of data... like a pointer... and you needed a type to put it in.

In R3-Alpha it was basically an alias for INTEGER! such that you didn&#39;t confuse it for thinking it was an integer.  Also, since integers were always signed, it meant you weren&#39;t representing pointers with negative numbers.

So when you did something like open an ODBC database, you&#39;d get a HANDLE!.  If you created a statement in that database, you&#39;d get a HANDLE! representing the ODBC statement.  If you were doing FFI and you were talking about some memory address, you&#39;d get a HANDLE!.

Beyond that you had no information to distinguish them.  Ren-C added the concept of putting a pointer to a function inside the handle that represented what would be called when the GC was garbage collecting it... and that could serve as something of an identity.  This way the handle you passed ODBC could say &quot;oh, the cleanup function is the cleanup function for ODBC Statements... hence the handle must be an ODBC statement...&quot;

*Screw all that.*   Just make ODBC-STATEMENT! and ODBC-DATABASE! extension types, and the world is a better place.

## Can Extension Types Replace PORT! ?

It seems to me that PORT! has many of the same problems as HANDLE!.  It was just this black box.

Extension types are handling this much better, and I think they&#39;re going to be taking over!</description>
    
    <lastBuildDate>Sun, 30 Mar 2025 21:34:03 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://rebol.metaeducation.com/t/replacing-handle-with-extension-types/2390.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Replacing HANDLE! with Extension Types</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've made big progress on resurrecting the concept of <a href="https://rebol.metaeducation.com/t/extension-types-implementation/1203">"Extension Types"</a>.</p>
<p>The first implementation of them was creaky and I was just learning how the system would have to be shaped and redesigned to support them.  But now they're starting to work, and work <em>really well</em>.  This means we can basically have tons of datatypes and not break a sweat.</p>
<h2><a name="p-8093-i-think-they-can-completely-replace-handle-1" class="anchor" href="https://rebol.metaeducation.com#p-8093-i-think-they-can-completely-replace-handle-1"></a>I Think They Can Completely Replace HANDLE!</h2>
<p>The idea behind HANDLE! historically was just that you had some piece of data... like a pointer... and you needed a type to put it in.</p>
<p>In R3-Alpha it was basically an alias for INTEGER! such that you didn't confuse it for thinking it was an integer.  Also, since integers were always signed, it meant you weren't representing pointers with negative numbers.</p>
<p>So when you did something like open an ODBC database, you'd get a HANDLE!.  If you created a statement in that database, you'd get a HANDLE! representing the ODBC statement.  If you were doing FFI and you were talking about some memory address, you'd get a HANDLE!.</p>
<p>Beyond that you had no information to distinguish them.  Ren-C added the concept of putting a pointer to a function inside the handle that represented what would be called when the GC was garbage collecting it... and that could serve as something of an identity.  This way the handle you passed ODBC could say "oh, the cleanup function is the cleanup function for ODBC Statements... hence the handle must be an ODBC statement..."</p>
<p><em>Screw all that.</em>   Just make ODBC-STATEMENT! and ODBC-DATABASE! extension types, and the world is a better place.</p>
<h2><a name="p-8093-can-extension-types-replace-port-2" class="anchor" href="https://rebol.metaeducation.com#p-8093-can-extension-types-replace-port-2"></a>Can Extension Types Replace PORT! ?</h2>
<p>It seems to me that PORT! has many of the same problems as HANDLE!.  It was just this black box.</p>
<p>Extension types are handling this much better, and I think they're going to be taking over!</p>
          <p><a href="https://rebol.metaeducation.com/t/replacing-handle-with-extension-types/2390/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/replacing-handle-with-extension-types/2390/1</link>
        <pubDate>Sun, 30 Mar 2025 21:34:03 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2390-1</guid>
        <source url="https://rebol.metaeducation.com/t/replacing-handle-with-extension-types/2390.rss">Replacing HANDLE! with Extension Types</source>
      </item>
  </channel>
</rss>
