<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should Refinement Callsites Use VOID-in-NULL-out?</title>
    <link>https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363</link>
    <description>The concept behind NULL is that it&#39;s a somewhat-ornery state, that most functions don&#39;t take by default.  So it helps catch mistakes.

This makes me feel it&#39;s a bit haphazard to accept it at callsites:

    &gt;&gt; count: null  ; remember to assign this later...
    == ~null~  ; anti 

    ...

    &gt;&gt; append:dup [a b c] [d e] count
    == [a b c [d e]]

You got the same behavior as **`append [a b c] [d e]`**, e.g. the refinement was &quot;revoked&quot; by being null.

But you&#39;ve lost that protection idea.  Would it be safer if VOID were what was used?

    &gt;&gt; append:dup [a b c] [d e] count
    ** Error: APPEND expects INTEGER! for its DUP argument, not ~null~

    &gt;&gt; append:dup [a b c] [d e] opt count
    == [a b c [d e]]

This strikes me as a bit safer.

## Related Issue: NULLs and Normal Arguments

What&#39;s been stopping me from changing this is just a general question regarding argument-tampering, and what the &quot;smooth curve&quot; would be from a normal argument to a refinement.

If you define a normal argument as accepting **`[~null~ integer!]`** then it doesn&#39;t seem right to say that a callsite can&#39;t take null.  It would have to be another flag, like **`[&lt;opt&gt; integer!]`** which would trigger the void-means-null callsite convention... where null would be an error.</description>
    
    <lastBuildDate>Wed, 16 Jul 2025 15:18:55 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should Refinement Callsites Use VOID-in-NULL-out?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="2363">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>And with <strong><code>&lt;opt&gt;</code></strong> as a parameter option, you have a smooth curve for converting a parameter between being a refinement and not a refinement. You get it as null internally to the function either way, making it pleasant to handle while preventing accidents on the interface.</p>
</blockquote>
</aside>
<p>The premise this thread started on was that this seems risky:</p>
<pre><code>&gt;&gt; count: null  ; remember to assign this later...
== ~null~  ; anti 

...

&gt;&gt; append:dup [a b c] [d e] count
== [a b c [d e]]
</code></pre>
<p>But what if you're building a frame?  What goes in the slot?  There seem to be two answers</p>
<pre><code>&gt;&gt; f: make frame! append/

&gt;&gt; f.series: [a b c]
&gt;&gt; f.value: [d e]

&gt;&gt; f.count: null  ; answer #1
&gt;&gt; f.^count: null  ; same behavior as answer #1

&gt;&gt; f.^count: void  ; answer #2 (the ^META is required for void storage)
</code></pre>
<p>If we live in a world of answer <span class="hashtag-raw">#2</span> being how to forcibly say a refinement is not in use, what about refinements that don't take arguments?  Their values are either ~null~ or ~okay~ antiforms.  Should you have to put an OPT on a logic, and store it in a meta-variable?</p>
<pre><code>&gt;&gt; f: make frame! transcode/

&gt;&gt; f.source: "[a b c]"
&gt;&gt; f.^step: opt transcode-mode = 'step
</code></pre>
<p>That doesn't <em>seem</em> like it should be necessary.  You'd have to do it in things like apply too:</p>
<pre><code>transcode // ["[a b c]" step: opt transcode-mode = step]  ; ick
</code></pre>
<p>It may be that refinements without arguments are either [~null~ or ~okay~] antiforms, and don't behave the same as refinements with arguments, that expect VOID to forcibly opt out of them.</p>
<p>In which case, should argument-less refinements treat VOID as null also?</p>
<p>Hard to say, but I think the upshot here is that argument-less refinements are just different beasts, and do not have a clear parallel or migration path to <code>&lt;opt&gt;</code> arguments.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363/3</link>
        <pubDate>Fri, 06 Jun 2025 17:43:52 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2363-3</guid>
        <source url="https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363.rss">Should Refinement Callsites Use VOID-in-NULL-out?</source>
      </item>
      <item>
        <title>Should Refinement Callsites Use VOID-in-NULL-out?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2363">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Would it be safer if VOID were what was used?</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; append:dup [a b c] [d e] count
** Error: APPEND expects INTEGER! for its DUP argument, not ~null~

&gt;&gt; append:dup [a b c] [d e] opt count
== [a b c [d e]]
</code></pre>
<p>This strikes me as a bit safer.</p>
</blockquote>
</aside>
<p>So yes, this turns out to be the best idea.</p>
<p>And with <strong><code>&lt;opt&gt;</code></strong> as a parameter option, you have a smooth curve for converting a parameter between being a refinement and not a refinement.  You get it as null internally to the function either way, making it pleasant to handle while preventing accidents on the interface:</p>
<pre><code>foo: func [x [&lt;opt&gt; integer!]] [
    if null? x [print "null"] else [print ["integer:" x]]
]

&gt;&gt; foo 10
integer: x

&gt;&gt; foo void
null

&gt;&gt; foo null
** Error: FOO doesn't accept NULL for its X argment
</code></pre>
<p>So now if you change X to be a refinement, you have the same VOID-in-NULL-out behavior.</p>
<p>What this means is that if you want either a refinement or an <code>&lt;opt&gt;</code> argument to be specialized out to null, you have to do a ^META-variable assignment of void when constructing the frame.  You don't actually pass null.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363/2</link>
        <pubDate>Sun, 11 May 2025 12:33:42 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2363-2</guid>
        <source url="https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363.rss">Should Refinement Callsites Use VOID-in-NULL-out?</source>
      </item>
      <item>
        <title>Should Refinement Callsites Use VOID-in-NULL-out?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The concept behind NULL is that it's a somewhat-ornery state, that most functions don't take by default.  So it helps catch mistakes.</p>
<p>This makes me feel it's a bit haphazard to accept it at callsites:</p>
<pre><code>&gt;&gt; count: null  ; remember to assign this later...
== ~null~  ; anti 

...

&gt;&gt; append:dup [a b c] [d e] count
== [a b c [d e]]
</code></pre>
<p>You got the same behavior as <strong><code>append [a b c] [d e]</code></strong>, e.g. the refinement was "revoked" by being null.</p>
<p>But you've lost that protection idea.  Would it be safer if VOID were what was used?</p>
<pre><code>&gt;&gt; append:dup [a b c] [d e] count
** Error: APPEND expects INTEGER! for its DUP argument, not ~null~

&gt;&gt; append:dup [a b c] [d e] opt count
== [a b c [d e]]
</code></pre>
<p>This strikes me as a bit safer.</p>
<h2><a name="p-8014-related-issue-nulls-and-normal-arguments-1" class="anchor" href="https://rebol.metaeducation.com#p-8014-related-issue-nulls-and-normal-arguments-1"></a>Related Issue: NULLs and Normal Arguments</h2>
<p>What's been stopping me from changing this is just a general question regarding argument-tampering, and what the "smooth curve" would be from a normal argument to a refinement.</p>
<p>If you define a normal argument as accepting <strong><code>[~null~ integer!]</code></strong> then it doesn't seem right to say that a callsite can't take null.  It would have to be another flag, like <strong><code>[&lt;opt&gt; integer!]</code></strong> which would trigger the void-means-null callsite convention... where null would be an error.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363/1</link>
        <pubDate>Wed, 15 Jan 2025 21:10:49 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2363-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-refinement-callsites-use-void-in-null-out/2363.rss">Should Refinement Callsites Use VOID-in-NULL-out?</source>
      </item>
  </channel>
</rss>
