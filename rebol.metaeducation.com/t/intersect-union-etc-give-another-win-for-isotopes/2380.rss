<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>INTERSECT/UNION/etc. Give Another Win For Isotopes!</title>
    <link>https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380</link>
    <description>The set (collection) operations in Rebol are useful.

    rebol2&gt;&gt; set1: [a b c]
    rebol2&gt;&gt; set2: [b c d]

    rebol2&gt;&gt; intersect set1 set2
    == [b c]

When I first encountered it, I thought it strange that it wasn&#39;t mutating the first argument.

    rebol2&gt;&gt; set1
    == [a b c]  ; not modified by INTERSECT

Everywhere else in Rebol it seemed when you had a verb like that (APPEND, REVERSE, etc.) it was modifying.  What was special about INTERSECT that it didn&#39;t?

Anyway, that was just the first thing I noticed.  But digging around in the code there were questions... such as, why should it only take block lists?

    rebol2&gt;&gt; intersect [a b c] quote (b c d)
    ** Script Error: Expected one of: block! - not: paren!

    red&gt;&gt; intersect [a b c] quote (b c d)
    *** Script Error: intersect does not allow paren! for its set2 argument

I raised the question to @BlackATTR who suggested that maybe single elements should just go in the list, as whole items:

    &gt;&gt; intersect [a b c] &#39;(b c d)
    == []

    &gt;&gt; union [a b c] &#39;(b c d)
    == [a b c (b c d)]

And then I noticed... **splices could draw the distinction!**

    &gt;&gt; union [a b c] [b c d]
    == [a b c [b c d]]

    &gt;&gt; union [a b c] spread [b c d]
    == [a b c d]

    &gt;&gt; union [a b c] spread &#39;(b c d)
    == [a b c d]

    &gt;&gt; union &#39;(a b c) spread [b c d]
    == (a b c d)

This gives you the power to easily do set operations with single elements, and splices with SPREAD dispel the type information so there&#39;s no question what the return type should be: the type of the first set!

And I think to be consistent with the rest of the language, the operations should modify the first set argument by default.  But if you use the OF operations you get a copy.

Then, the OF operations might have different parts of speech:

     intersection of set1 set2
     =&gt; intersect (copy set1) set2

     union of set1 set2
     =&gt; unite (copy set1) set2

This would open up things like union and intersection to be nouns.

     union: union of set1 set2

This seems to me to be much better and a lot more consistent!</description>
    
    <lastBuildDate>Tue, 25 Mar 2025 10:51:29 +0000</lastBuildDate>
    <category>Math</category>
    <atom:link href="https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>INTERSECT/UNION/etc. Give Another Win For Isotopes!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2380">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>To me this is highly confusing and contradicts the meaning of the term <a href="https://en.wikipedia.org/wiki/Union_(set_theory)">union</a></p>
</blockquote>
</aside>
<p>The difference is not adding it if it's already there.</p>
<pre><code>&gt;&gt; union of [a b [b c d] c] [b c d]
== [a b [b c d] c]
</code></pre>
<aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2380">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>So then, what to do with cases like <code>intersect [a b c] '(b c d)</code>?</p>
</blockquote>
</aside>
<pre><code>&gt;&gt; intersect [a b c] '(b c d)
== []

&gt;&gt; intersect [a (b c d) c] '(b c d)
== [(b c d)]
</code></pre>
<p><em>(As usual, binding questions arise... what if the bindings are different... <img src="https://rebol.metaeducation.com/images/emoji/twitter/thinking.png?v=14" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20">)</em></p>
<p>Though I feel like there needs to be canonization of the order of the sets somehow, otherwise you can't do comparisons, like:</p>
<pre><code> &gt;&gt; data: [a b 2 d]

 &gt;&gt; i1: intersection of data spread [2 d e]
 == [2 d]

 &gt;&gt; i2: intersection of data spread [e 2 d]
 == [d 2]
 
 &gt;&gt; i1 = i2
 == ~false~  ; anti
</code></pre>
<p>So you need something that would turn both [2 d] and [d 2] into the same order.</p>
<p>I don't think this is "sorting".  I feel like sorting should require the items be comparable.  It's canonization, and I don't think there's any way to do this that would guarantee it would give the same order in different versions of the interpreter (or outside of the same run, e.g. things might get different pointers and it has to canonize on the pointer value).</p>
<p>I haven't "sorted out" my thoughts on this yet.</p>
          <p><a href="https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380/3</link>
        <pubDate>Tue, 25 Mar 2025 10:13:05 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2380-3</guid>
        <source url="https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380.rss">INTERSECT/UNION/etc. Give Another Win For Isotopes!</source>
      </item>
      <item>
        <title>INTERSECT/UNION/etc. Give Another Win For Isotopes!</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2380">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; union [a b c] [b c d]
== [a b c [b c d]]
</code></pre>
</blockquote>
</aside>
<p>To me this is highly confusing and contradicts the meaning of the term <a href="https://en.wikipedia.org/wiki/Union_(set_theory)">union</a>, which can only mean ‘take these two lists/sets and merge them together’. The operation shown here is simply appending an item to the end of a list, which Python calls <code>add</code> (for sets) / <code>append</code> (for lists) and which JavaScript calls <code>push</code>.</p>
<p>So then, what to do with cases like <code>intersect [a b c] '(b c d)</code>? I think the only consistent behaviour is to throw an error: any other choice is leads to an inconsistency either with the case of a list, or with the case of an atomic value.</p>
          <p><a href="https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380/2</link>
        <pubDate>Tue, 25 Mar 2025 06:05:08 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2380-2</guid>
        <source url="https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380.rss">INTERSECT/UNION/etc. Give Another Win For Isotopes!</source>
      </item>
      <item>
        <title>INTERSECT/UNION/etc. Give Another Win For Isotopes!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The set (collection) operations in Rebol are useful.</p>
<pre><code>rebol2&gt;&gt; set1: [a b c]
rebol2&gt;&gt; set2: [b c d]

rebol2&gt;&gt; intersect set1 set2
== [b c]
</code></pre>
<p>When I first encountered it, I thought it strange that it wasn't mutating the first argument.</p>
<pre><code>rebol2&gt;&gt; set1
== [a b c]  ; not modified by INTERSECT
</code></pre>
<p>Everywhere else in Rebol it seemed when you had a verb like that (APPEND, REVERSE, etc.) it was modifying.  What was special about INTERSECT that it didn't?</p>
<p>Anyway, that was just the first thing I noticed.  But digging around in the code there were questions... such as, why should it only take block lists?</p>
<pre><code>rebol2&gt;&gt; intersect [a b c] quote (b c d)
** Script Error: Expected one of: block! - not: paren!

red&gt;&gt; intersect [a b c] quote (b c d)
*** Script Error: intersect does not allow paren! for its set2 argument
</code></pre>
<p>I raised the question to <a class="mention" href="https://rebol.metaeducation.com/u/blackattr">@BlackATTR</a> who suggested that maybe single elements should just go in the list, as whole items:</p>
<pre><code>&gt;&gt; intersect [a b c] '(b c d)
== []

&gt;&gt; union [a b c] '(b c d)
== [a b c (b c d)]
</code></pre>
<p>And then I noticed... <strong>splices could draw the distinction!</strong></p>
<pre><code>&gt;&gt; union [a b c] [b c d]
== [a b c [b c d]]

&gt;&gt; union [a b c] spread [b c d]
== [a b c d]

&gt;&gt; union [a b c] spread '(b c d)
== [a b c d]

&gt;&gt; union '(a b c) spread [b c d]
== (a b c d)
</code></pre>
<p>This gives you the power to easily do set operations with single elements, and splices with SPREAD dispel the type information so there's no question what the return type should be: the type of the first set!</p>
<p>And I think to be consistent with the rest of the language, the operations should modify the first set argument by default.  But if you use the OF operations you get a copy.</p>
<p>Then, the OF operations might have different parts of speech:</p>
<pre><code> intersection of set1 set2
 =&gt; intersect (copy set1) set2

 union of set1 set2
 =&gt; unite (copy set1) set2
</code></pre>
<p>This would open up things like union and intersection to be nouns.</p>
<pre><code> union: union of set1 set2
</code></pre>
<p>This seems to me to be much better and a lot more consistent!</p>
          <p><a href="https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380/1</link>
        <pubDate>Mon, 24 Mar 2025 13:23:58 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2380-1</guid>
        <source url="https://rebol.metaeducation.com/t/intersect-union-etc-give-another-win-for-isotopes/2380.rss">INTERSECT/UNION/etc. Give Another Win For Isotopes!</source>
      </item>
  </channel>
</rss>
