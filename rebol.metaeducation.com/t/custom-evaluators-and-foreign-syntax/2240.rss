<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Custom Evaluators and Foreign Syntax</title>
    <link>https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240</link>
    <description>Excuse my random comment here. But I&#39;ve often wondered whether support (beyond parse) for user defined foreign syntaxes would be feasible, useful and not horribly painful. The idea coming from the number of syntaxes I&#39;ve attempted to deconstruct using parse, manipulate, evaluate and sometimes re-form over my time with rebol. It&#39;s using rebol as the rosetta stone of playing with data/code stored in foreign syntax - not necessarily always validly (as in a parse tree), but perhaps usefully.

Perhaps I misunderstood and that&#39;s what you&#39;re saying with fused!.

The follow on from that being whether custom evaluators are a possibility, for the standard rebol types in a dialect, say as an attribute of a function (frame or block?) as way of making dialects a bit more first class rather than fringe interest and perhaps leverage more of the lego box parts of evaluation in custom dialect evaluation.

Not thought through, just random musings from someone who is perhaps out-of-date, and certainly not requests for functionality since these days I&#39;m playing with photos rather than code.  :slight_smile:</description>
    
    <lastBuildDate>Fri, 20 Sep 2024 07:38:25 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Custom Evaluators and Foreign Syntax</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="7" data-topic="2240">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>What’s the practical advantage over a simple block <code>[button "push me"]</code>?</p>
</blockquote>
</aside>
<p>A generalized DO command wouldn't know what to make of that.  You'd have to have use a special command, like <strong><code>view</code></strong> (or some potentially awkward refinement/parameterization of DO).</p>
<p>This would keep us from having to make up a name for every dialect-do-er, as well as have a generalized  currency for associating the dialect with a value.</p>
<p>In the Web build when we want to execute JavaScript or CSS we need special commands for that (CSS-DO, JS-DO). The DO command could detect from a filename what you might want to run (e.g. <strong><code>do %layout.css</code></strong>)  but we couldn't tell from just a string.  We could say <strong><code>do @css:".box {...}"</code></strong> and it would let you use the same DO that detected the filename.</p>
<p>There are of course other ways to go about it.  <strong><code>do [@css ".box {...}"]</code></strong> (I'm taking away BLOCK! from DO as a synonym for EVALUATE.)</p>
<p>But <a class="mention" href="https://rebol.metaeducation.com/u/brett">@Brett</a>'s idea of letting the marker travel in a more special position that would effectively create a new "typed" entity--that wouldn't be passable anywhere that just takes a plain old block--would enable some different usage patterns.</p>
<p>I don't know all the applications as we haven't had the means to try this in the past.</p>
          <p><a href="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/8">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/8</link>
        <pubDate>Fri, 20 Sep 2024 05:36:13 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2240-8</guid>
        <source url="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240.rss">Custom Evaluators and Foreign Syntax</source>
      </item>
      <item>
        <title>Custom Evaluators and Foreign Syntax</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>I’m not sure I see the point of this proposal. What’s the practical advantage over a simple block <code>[button "push me"]</code>?</p>
<aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="2240">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>We might be in the situation of needing to have qualified names if there's contention, and a fully-qualified name. So <strong><code>@web.css</code></strong> maybe if you loaded two separate systems that registered the name <code>"css"</code> into your project.</p>
</blockquote>
</aside>
<p>If I understand the situation correctly, I think it would be simplest to say that the thing after the <code>@</code> must be an evaluation function. (Well, a value which is bound to an evaluation function, that is.)</p>
          <p><a href="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/7">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/7</link>
        <pubDate>Fri, 20 Sep 2024 01:16:20 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2240-7</guid>
        <source url="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240.rss">Custom Evaluators and Foreign Syntax</source>
      </item>
      <item>
        <title>Custom Evaluators and Foreign Syntax</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2240">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; @vid:[button "push me"]
== @vid:[button "push me"]

&gt;&gt; kind of @vid:[button "push me"]
== @vid  ; or just vid ?
</code></pre>
</blockquote>
</aside>
<p>So I actually wonder if this should be <strong><code>dialect of</code></strong>, along with a test of <strong><code>dialected?</code></strong> to ask if a value is a CHAIN! with a WORD! at the head.</p>
<p>I don't know if we should restrict that to being length 2.  But I do know that <strong><code>@css:".box {background-color: blue;}"</code></strong> would be a string and not a block.</p>
<p>We might be in the situation of needing to have qualified names if there's contention, and a fully-qualified name.  So <strong><code>@web.css</code></strong> maybe if you loaded two separate systems that registered the name <code>"css"</code> into your project.</p>
          <p><a href="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/6</link>
        <pubDate>Thu, 19 Sep 2024 14:19:16 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2240-6</guid>
        <source url="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240.rss">Custom Evaluators and Foreign Syntax</source>
      </item>
      <item>
        <title>Custom Evaluators and Foreign Syntax</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Brett" data-post="2" data-topic="2240">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/brett/48/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>Operations like DO and REDUCE on a block is so nice. I'd like that niceness to extend to dialects, my intuition is that perhaps by raising a usermode evaluator to plug in to the system operations such as DO and REDUCE can apply to a dialect and produce useful outcomes and sane errors.</p>
</blockquote>
</aside>
<p>So this seems to tie into your other post about <a href="https://rebol.metaeducation.com/t/kinds-of-values/466">"Kinds" of Values</a></p>
<aside class="quote no-group" data-username="Brett" data-post="1" data-topic="466">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/brett/48/177_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/kinds-of-values/466/1">Kinds of values?</a></div>
<blockquote>
<p>For demonstration I thought Kind could be a word followed by a #, followed by the existing syntax. E.g:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">vid#[button "push me"] ; A block of VID dialect.
vector#[1 2 3]
kind of markdown#{*This* could be interesting.} ; Would yield MARKDOWN
</code></pre>
<p>Kind would be optional so existing forms would be unaffected:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">kind of {simple string} ; would return _
kind of [simple block] ; would return _
</code></pre>
</blockquote>
</aside>
<p>I've mentioned that we now have inert forms, and this is possible...and I think the idea seems sound.</p>
<pre><code>&gt;&gt; @vid:[button "push me"]
== @vid:[button "push me"]

&gt;&gt; kind of @vid:[button "push me"]
== @vid  ; or just vid ?
</code></pre>
<p>The name "KIND" was taken for a while to be the underlying type of an item regardless of quoting:</p>
<pre><code>&gt;&gt; type of first ['''10]
== &amp;[quoted]

&gt;&gt; kind of first ['''10]
== &amp;[integer]
</code></pre>
<p>But I am now calling that "HEART".  So KIND is available for this purpose now!</p>
<h2><a name="p-7513-do-could-have-a-registry-to-dispatch-these-1" class="anchor" href="https://rebol.metaeducation.com#p-7513-do-could-have-a-registry-to-dispatch-these-1"></a>DO Could Have a Registry To Dispatch These</h2>
<p><em>(I don't think we want to dispatch by binding, because things like <code>vector</code> are too likely used by variable names.)</em></p>
<p>This is interesting in terms of the DO vs. EVAL distinction.  DO would be able to handle this, but EVAL would expect a block of Rebol.</p>
<p>I like it.  Also, the polymorphism of DO with things like different languages.</p>
<pre><code>&gt;&gt; code: @javascript:-{function () { console.log "your JavaScript here" }}-

&gt;&gt; do code
; would be able to work in the Web Console
</code></pre>
<p>If you had your string in a variable, just JOIN it...</p>
<pre><code>&gt;&gt; js-source: -{function () { console.log "your JavaScript here" }}-

&gt;&gt; do join @javascript: js-source
</code></pre>
<p>That's awesome.  I look forward to wiping out CSS-DO and JS-DO, and letting DO be polymorphic!</p>
<aside class="quote quote-modified" data-post="1" data-topic="1846">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar">
    <a href="https://rebol.metaeducation.com/t/pushing-the-potential-of-polyglot-polymorphic-do/1846">Pushing the Potential of Polyglot Polymorphic DO</a> <a class="badge-category__wrapper " href="https://rebol.metaeducation.com/c/development/semantics/55"><span data-category-id="55" style="--category-badge-color: #25AAE2; --category-badge-text-color: #FFFFFF; --parent-category-badge-color: #25AAE2;" data-parent-category-id="8" data-drop-close="true" class="badge-category --has-parent" title="While the &quot;Internals&quot; discusses the bits and bytes of how things are implemented, this category is for discussing things design questions of the language... like what do [] should return."><span class="badge-category__name">Semantics</span></span></a>
  </div>
  <blockquote>
    The brevity of DO is a strength that makes it seem natural to be polymorphic. 
I thought it was very wasteful that when Rebol2 and Red's DO saw something it didn't recognize, it would just drop out: 
rebol2&gt;&gt; do 1020
== 1020

rebol2&gt;&gt; do &lt;useless&gt;
== &lt;useless&gt;

Pinning people's expections to this behavior--to where they write code that relies on it--is awful. 
There are plenty of things we can imagine for this undiscovered space.  (Soon it's planned that the ReplPad will use shorthands like do 3 …
  </blockquote>
</aside>

<p>Hopefully this will fulfill your wish!</p>
          <p><a href="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/5</link>
        <pubDate>Sun, 01 Sep 2024 16:56:01 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2240-5</guid>
        <source url="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240.rss">Custom Evaluators and Foreign Syntax</source>
      </item>
      <item>
        <title>Custom Evaluators and Foreign Syntax</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Brett" data-post="1" data-topic="2240">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/brett/48/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>just random musings from someone who is perhaps out-of-date, and certainly not requests for functionality since these days I'm playing with photos rather than code.</p>
</blockquote>
</aside>
<p>Hey Brett, good to hear you're out there having fun somewhere.  You're probably making a good choice avoiding code!</p>
<p>The fact that people are commenting on <a href="https://rebol.metaeducation.com/t/no-interstitial-delimiter-sequence-proposal-fused/1503">the FUSED! proposal</a>--and even beaming messages from retirement--is indicative of...something.  Probably that Rebol notation simply leaves a lot to be desired.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/roll_eyes.png?v=14" title=":roll_eyes:" class="emoji" alt=":roll_eyes:" loading="lazy" width="20" height="20"></p>
<p>Rebol's PARSE isn't the only game in town for people looking for alternatives to RegEx, and I've talked about how <a href="https://rebol.metaeducation.com/t/parse-vs-haskells-x-parsec/1321">parser combinators in languages like Haskell</a> offer a quite a lot...with tons of infrastructure to assist in real world tasks.</p>
<p>So before trying to extend the syntax of Rebol's medium, I'd side with the idea of shoring up PARSE when you're <em>not</em> trying to use it to mix full-on representations from different languages in the same source file.  Until that really demonstrates "bringing the magic" reliably, then getting entangled in syntax extensions for LOAD just adds other layers of complication.</p>
<p><a class="mention" href="https://rebol.metaeducation.com/u/blackattr">@BlackATTR</a> brings up the <a href="https://rebol.metaeducation.com/t/whitespace-interpreter-revisited/1482/5">Whitespace Dialect</a> and I think that really hitting home-runs on problems like that is a prerequisite to getting too much further out in ambition.</p>
<p>I think FUSED! might be able to be a relatively low-cost way to get a little more satisfaction for people.  Little things like that <a href="https://rebol.metaeducation.com/t/the-language-worlds-weirdest-comma-mechanic/1387">and COMMA!</a> may help get closer to a sweet spot where it feels "flexible enough".</p>
<aside class="quote no-group" data-username="Brett" data-post="1" data-topic="2240">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/brett/48/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>as way of making dialects a bit more first class rather than fringe interest and perhaps leverage more of the lego box parts of evaluation in custom dialect evaluation.</p>
</blockquote>
</aside>
<p>The question of how to make the evaluator "hookable" is definitely on my mind.  One big step of this has been trying to make FRAME! a very reusable part...and to unify services across PARSE and plain DO for things like single stepping and debug stacks.</p>
<p>And yes, all of this is hard...as my notes show.  It's especially hard when it's all on the backdrop of a weird dependency game where you're writing it all yourself in C89.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/frowning.png?v=14" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/4</link>
        <pubDate>Sun, 14 Feb 2021 04:44:26 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2240-4</guid>
        <source url="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240.rss">Custom Evaluators and Foreign Syntax</source>
      </item>
      <item>
        <title>Custom Evaluators and Foreign Syntax</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Thanks. I think concrete examples are helpful. Maybe a custom evaluators conversation can continue with <a class="mention" href="https://rebol.metaeducation.com/u/hostilefork">@hostilefork</a> in his Whitespace Interpreter forum topic.</p>
          <p><a href="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/3</link>
        <pubDate>Sun, 14 Feb 2021 01:35:18 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2240-3</guid>
        <source url="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240.rss">Custom Evaluators and Foreign Syntax</source>
      </item>
      <item>
        <title>Custom Evaluators and Foreign Syntax</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>We have custom evaluators today in the form of functions we write.  To process a dialect we must use Parse or specially craft our "dialect" to accommodate Ren-c's evaluation process.  Parse is good at recognition, terrible at building structures, it's aimed at step by step evaluation, which is fine but leaves the heavy lifting to the dialect writer to build context as required from scratch for every new dialect.</p>
<p>It would be good if evaluators by user's feel more first class.  Operations like DO and REDUCE on a block is so nice. I'd like that niceness to extend to dialects, my intuition is that perhaps by raising a usermode evaluator to plug in to the system operations such as DO and REDUCE can apply to a dialect and produce useful outcomes and sane errors. Maybe there would be an opportunity to "compile" them upon load for performance.</p>
<p>Writing an evaluator is hard as Hostilefork has so nicely documented, and he is striving to create orthogonal parts that can be stuck together by users for powerful expression. I'm wondering how that work can be leveraged even further for dialects.</p>
<p>Coming back to foreign syntax and your datatype question, if one has broken text into tokens with parse or whatever, I see a need to be able to distinguish/annotate them. Objects might be ok if they were performant and were not saddled with the terrible baggage of "make object" they have when saved out, but I suspect a more lightweight system would be better - more equivalent to rebol words - something with spellings and bindings. I guess I'm suggesting supporting multiple syntaxes that map onto ren-c datatypes and user datatypes where the default sytnax is ren-c.</p>
<p>I think back to the C-lexicals of the build process. I feel these other elements could make that process so much better. We don't need to evaluate C as C, but being able to edit it or interpret it as symbols in a linear or tree structures would be very useful.</p>
<p>All very intuitive and light on answers I know...But being able to talk pidgin with other languages might be a really useful trick.</p>
          <p><a href="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/2</link>
        <pubDate>Sun, 14 Feb 2021 01:11:47 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2240-2</guid>
        <source url="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240.rss">Custom Evaluators and Foreign Syntax</source>
      </item>
      <item>
        <title>Custom Evaluators and Foreign Syntax</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>Excuse my random comment here. But I've often wondered whether support (beyond parse) for user defined foreign syntaxes would be feasible, useful and not horribly painful. The idea coming from the number of syntaxes I've attempted to deconstruct using parse, manipulate, evaluate and sometimes re-form over my time with rebol. It's using rebol as the rosetta stone of playing with data/code stored in foreign syntax - not necessarily always validly (as in a parse tree), but perhaps usefully.</p>
<p>Perhaps I misunderstood and that's what you're saying with fused!.</p>
<p>The follow on from that being whether custom evaluators are a possibility, for the standard rebol types in a dialect, say as an attribute of a function (frame or block?) as way of making dialects a bit more first class rather than fringe interest and perhaps leverage more of the lego box parts of evaluation in custom dialect evaluation.</p>
<p>Not thought through, just random musings from someone who is perhaps out-of-date, and certainly not requests for functionality since these days I'm playing with photos rather than code.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240/1</link>
        <pubDate>Sat, 13 Feb 2021 07:52:27 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2240-1</guid>
        <source url="https://rebol.metaeducation.com/t/custom-evaluators-and-foreign-syntax/2240.rss">Custom Evaluators and Foreign Syntax</source>
      </item>
  </channel>
</rss>
