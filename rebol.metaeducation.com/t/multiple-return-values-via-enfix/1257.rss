<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Multiple Return Values Via Enfix</title>
    <link>https://forum.rebol.info/t/multiple-return-values-via-enfix/1257</link>
    <description>&gt; Note: Before multi-returns had an implementation in the C code of the evaluator, I observed they could be implemented by means of enfix and skippable parameters.  This was that implementation.
&gt;
&gt; It&#39;s still cool to look back at just in terms of the wild things you can prototype!

---

Imagine you want to make something where it returns the sum of two values and the difference...but only the sum if you aren&#39;t using a multi-return.

    sum-and-difference: enfixed func [:left [&lt;skip&gt; set-block!] arg1 arg2] [
        let sum: arg1 + arg2  ; always returned, only calculate once
        if set? &#39;left [
            switch length of left [
                1 [  ; we have `[x]: ...` act the same as `x: ...` 
                   set left.1 sum
                ]
                2 [  ; only calculate difference for multiple returns
                   set left.1 sum
                   set left.2 arg1 - arg2
                ]
                fail &quot;sum-and-difference can only return 1 or 2 values&quot;
            ]
        ]
        return sum
    ]

## and presto...

    &gt;&gt; x: sum-and-difference 20 10
    == 30  ; handled by plain evaluator mechanics

    &gt;&gt; [y z]: sum-and-difference 20 10
    == 30  ; handled by the enfix quoting

    &gt;&gt; y
    == 30

    &gt;&gt; z
    == 10

Notice that adopts the principle that it doesn&#39;t actually try to return a BLOCK! with the multiple return values, but only the first value.  But the interesting bit is that when you go about it this way, the convention is not really enforced.

## What&#39;s Wrong With Doing It This Way?

A disadvantage of this technique is it means you cannot make enfixed functions that have multiple return values (in the sense they&#39;ve already used their enfixedness for the purpose of the multiple return value itself).

That may or may not be bad.  :-/  This offers a lot of flexibility to people for designing how their multiple return values work.

* They could decide that blanks mean skip the assignment, so for **[_ z]: sum-and-difference 20 10** it could be decided not to calculate the sum at all, and to return the difference.

    * UPDATE: The information is not available in the system multi returns to know about whether the *main* result was requested or not...only the additional returns.  So the enfix function would have this edge.

* People who disagree with my philosophy about return the first thing could come up with their own rules...returning blocks that voidify, or maybe even the ability to mark which thing to return like **[y @z]: sum-and-difference 20 10** could calculate both but return the difference.

    * UPDATE: [This feature exists in modern multi-returns offered by the system!](https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587)

Telling people they are their own boss and can design multi return features however they want is a powerful idea that is a bit unnerving.  Though Rebol has a lot of those.  Truly a strange way of looking at multiple return value mechanics!</description>
    
    <lastBuildDate>Wed, 21 Feb 2024 11:51:01 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/multiple-return-values-via-enfix/1257.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Multiple Return Values Via Enfix</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Note: Before multi-returns had an implementation in the C code of the evaluator, I observed they could be implemented by means of enfix and skippable parameters.  This was that implementation.</p>
<p>It's still cool to look back at just in terms of the wild things you can prototype!</p>
</blockquote>
<hr>
<p>Imagine you want to make something where it returns the sum of two values and the difference...but only the sum if you aren't using a multi-return.</p>
<pre><code>sum-and-difference: enfixed func [:left [&lt;skip&gt; set-block!] arg1 arg2] [
    let sum: arg1 + arg2  ; always returned, only calculate once
    if set? 'left [
        switch length of left [
            1 [  ; we have `[x]: ...` act the same as `x: ...` 
               set left.1 sum
            ]
            2 [  ; only calculate difference for multiple returns
               set left.1 sum
               set left.2 arg1 - arg2
            ]
            fail "sum-and-difference can only return 1 or 2 values"
        ]
    ]
    return sum
]
</code></pre>
<h2>
<a name="and-presto-1" class="anchor" href="https://forum.rebol.info#and-presto-1"></a>and presto...</h2>
<pre><code>&gt;&gt; x: sum-and-difference 20 10
== 30  ; handled by plain evaluator mechanics

&gt;&gt; [y z]: sum-and-difference 20 10
== 30  ; handled by the enfix quoting

&gt;&gt; y
== 30

&gt;&gt; z
== 10
</code></pre>
<p>Notice that adopts the principle that it doesn't actually try to return a BLOCK! with the multiple return values, but only the first value.  But the interesting bit is that when you go about it this way, the convention is not really enforced.</p>
<h2>
<a name="whats-wrong-with-doing-it-this-way-2" class="anchor" href="https://forum.rebol.info#whats-wrong-with-doing-it-this-way-2"></a>What's Wrong With Doing It This Way?</h2>
<p>A disadvantage of this technique is it means you cannot make enfixed functions that have multiple return values (in the sense they've already used their enfixedness for the purpose of the multiple return value itself).</p>
<p>That may or may not be bad.  :-/  This offers a lot of flexibility to people for designing how their multiple return values work.</p>
<ul>
<li>
<p>They could decide that blanks mean skip the assignment, so for <strong>[_ z]: sum-and-difference 20 10</strong> it could be decided not to calculate the sum at all, and to return the difference.</p>
<ul>
<li>UPDATE: The information is not available in the system multi returns to know about whether the <em>main</em> result was requested or not...only the additional returns.  So the enfix function would have this edge.</li>
</ul>
</li>
<li>
<p>People who disagree with my philosophy about return the first thing could come up with their own rules...returning blocks that voidify, or maybe even the ability to mark which thing to return like <strong>[y <span class="mention">@z</span>]: sum-and-difference 20 10</strong> could calculate both but return the difference.</p>
<ul>
<li>UPDATE: <a href="https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587">This feature exists in modern multi-returns offered by the system!</a>
</li>
</ul>
</li>
</ul>
<p>Telling people they are their own boss and can design multi return features however they want is a powerful idea that is a bit unnerving.  Though Rebol has a lot of those.  Truly a strange way of looking at multiple return value mechanics!</p>
          <p><a href="https://forum.rebol.info/t/multiple-return-values-via-enfix/1257/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/multiple-return-values-via-enfix/1257/1</link>
        <pubDate>Sat, 01 Feb 2020 05:04:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1257-1</guid>
        <source url="https://forum.rebol.info/t/multiple-return-values-via-enfix/1257.rss">Multiple Return Values Via Enfix</source>
      </item>
  </channel>
</rss>
