<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Show the Love for SHOVE</title>
    <link>https://rebol.metaeducation.com/t/show-the-love-for-shove/1039</link>
    <description>## `&gt;-`

Despite having a bit tricky to implement, it&#39;s very easy to understand.  **It just pushes the argument on its left to be the first argument of the operation on its right:**

    &gt;&gt; 1 &gt;- add 2 * 3
    == 7  ; as if you&#39;d written `add 1 2 * 3`

Simple, right?  You might think it&#39;s not something you would use... *but you&#39;d be thinking wrong!*

## Invoke infix functions in modules or libraries

Infix execution cannot work with paths ([this isn&#39;t a bug, it *shouldn&#39;t* work](https://rebol.metaeducation.com/t/letting-go-of-infix-path-dreams-but-fixing-it-with-magic/794)):

    r3-alpha&gt;&gt; 1 lib/+ 2 * 3
    ** Script error: op! type is not allowed here

But shove has your back:

    &gt;&gt; 1 &gt;- lib/+ 2 * 3
    == 9  ; as if you&#39;d written `1 + 2 * 3`

*(Note the result is different from what you get with add, since + is infix.)*

**This is only going to get more critical as modules and namespacing move forward.** And anyone who&#39;s redefined an operator--but wants to temporarily reach for another implementation--will want this.

## Invoke refinements on infix executions

Historically there aren&#39;t really refinements on infix functions, because you&#39;d never be able to use them.  Now you can:

    &gt;&gt; ++: infixed func [a b /double] [a + either double [2 * b] [b]]

    &gt;&gt; 10 ++ 20
    == 30

    &gt;&gt; 10 &gt;- ++/double 20
    == 50

In the common case, you hope that your operator doesn&#39;t need refinements.  But when a special case comes up, it&#39;s nice to not have to define a prefix form just for that one instance. (which means coming up with a new name that people need to know also).  Now you can take for granted that shove is there when you need it.

## Symbol-y, but not symbol soup: it communicates!

Being an &quot;arrow word&quot; is crucial to showing its disruption of the evaluation order.  That&#39;s not going to be conveyed by a short alphabetic name:

    &gt;&gt; 1 shove lib/+ 2 * 3   ; lame and wordy
    == 9

Invoking infix functions from modules/namespaces and using refinements with them is *fundamental behavior*.  So it needs to be very short and light.  You want people to take this thing for granted!

## Extra credit: tweak the argument precedence

Rebol is well known for having a difference in interpretation when you use an infix operator vs. not:

    &gt;&gt; add 1 2 * 3
    == 7

    &gt;&gt; 1 + 2 * 3
    == 9

*(If you don&#39;t know why that is--and wonder why such a &quot;quirk&quot; hasn&#39;t been changed despite a lot of thought--[you can read more than you ever wanted to about it](https://rebol.metaeducation.com/t/the-beta-one-infix-covenant/1023))*.

Above I showed that shove takes its cue on how to act based on the infixedness of what you&#39;re shoving into:

    &gt;&gt; 1 &gt;- lib/add 2 * 3
    == 7  ; as if you&#39;d said `add 1 2 * 3`

    &gt;&gt; 1 &gt;- lib/+ 2 * 3
    == 9  ; as if you&#39;d said `1 + 2 * 3`

**But it might be argued that since `&gt;-` is infix, the overall operation is always infix, which intuitively would suggest both of the above should be 9.**

It&#39;s tough to say.  But I liked the simple definition of *&quot;shove uses the value on the left as the first argument&quot;*.  Imagine what the &quot;as if you&#39;d said&quot; would have to be if the shove into ADD above gave 9, if you couldn&#39;t take for granted another known another name for the operation (like `+`):

    &gt;&gt; 1 &gt;- lib/add 2 * 3  ; let&#39;s say it&#39;s the hypothetical infix-always version
    == 9  ; as if you&#39;d said `temp: infixed :add | 1 temp 2 * 3`

But for sake of completeness...I introduced &quot;force infix behavior (**-&gt;-**)&quot; and  &quot;force prefix behavior (**&gt;--**)&quot; forms:

    &gt;&gt; 1 -&gt;- lib/add 2 * 3
    == 9  ; as if you&#39;d said `1 + 2 * 3`

    &gt;&gt; 1 &gt;-- lib/+ 2 * 3
    == 7  ; as if you&#39;d said `add 1 2 * 3`

I think it&#39;s cute that **`-&gt;-`** looks like a picture of args on the left and right of an operator, suggesting infix... while **`&gt;--`** looks like no args on the left with two args on the right!

But you could also just use parentheses:

    &gt;&gt; (1 &gt;- lib/add 2) * 3
    == 9

    &gt;&gt; 1 &gt;- lib/+ (2 * 3)
    == 7

So whether `-&gt;-` and `&gt;--` survive or not is an open question.  If anyone actually uses them, I&#39;d be interested to know.</description>
    
    <lastBuildDate>Tue, 24 Sep 2024 12:04:37 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Show the Love for SHOVE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="1039">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It turns out there was some odd postponing variant too:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">|&gt;: runs tweak infix copy get $shove 'postpone 'on
</code></pre>
<p>I cannot imagine when that would be useful:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; x: add 1 add 2 3 |&gt; lib/* 4
== 24
</code></pre>
<p>Certainly there's a better idea for what to do with that "right flag" operator.</p>
</blockquote>
</aside>
<p>So as it turns out, <a href="https://rebol.metaeducation.com/t/rye-language/1768">the Rye language</a> is centrally based on this idea...so much so that it builds in a symbol type for doing it, when there's a leading vertical bar.</p>
<p>Something in the vein of:</p>
<pre><code>rye-like&gt;&gt; x: add 1 add 2 3 |lib/* 4
== 24
</code></pre>
<p>You could imagine paring the operator down to just be what vertical bar means:</p>
<pre><code>rye-like&gt;&gt; x: add 1 add 2 3 | lib/* 4
== 24
</code></pre>
<p>But I don't particularly like that.  And the style of programming which this is supposed to be useful for is done better--I believe--<a href="https://rebol.metaeducation.com/t/quick-and-dirty-flow-example/2270">by something like FLOW</a>.</p>
<p>So I don't know if I want to add <strong><code>|&gt;</code></strong> back for this meaning, vs something else, or just not have anything that means this in the box.</p>
          <p><a href="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/10">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/10</link>
        <pubDate>Tue, 24 Sep 2024 12:04:37 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1039-10</guid>
        <source url="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039.rss">Show the Love for SHOVE</source>
      </item>
      <item>
        <title>Show the Love for SHOVE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here's some of the fever dream of the previous <strong><code>&gt;--</code></strong> and <strong><code>-&gt;-</code></strong> variations, allowing a degree of freedom that's too subtle for anyone to wield usefully:</p>
<pre><code>; &gt;- is the SHOVE operator.  It uses the item immediately to its left for
; the first argument to whatever operation is on its right hand side.
; Parameter conventions of that first argument apply when processing the
; value, e.g. quoted arguments will act quoted.
;
; By default, the evaluation rules proceed according to the infix mode of
; the operation being shoved into:
;
;    &gt;&gt; 10 &gt;- lib/= 5 + 5  ; as if you wrote `10 = 5 + 5`
;    ** Script Error: + does not allow logic? for its value1 argument
;
;    &gt;&gt; 10 &gt;- equal? 5 + 5  ; as if you wrote `equal? 10 5 + 5`
;    ; nothing, e.g. branch trigger
;
; You can force processing to be infix using `-&gt;-` (an infix-looking "icon"):
;
;    &gt;&gt; 1 -&gt;- lib/add 2 * 3  ; as if you wrote `1 + 2 * 3`
;    == 9
;
; Or force prefix processing using `&gt;--` (multi-arg prefix "icon"):
;
;    &gt;&gt; 10 &gt;-- lib/+ 2 * 3  ; as if you wrote `add 1 2 * 3`
;    == 7
;
&gt;-: infix :shove
&gt;--: infix specialize get $&gt;- [prefix: 'yes]
-&gt;-: infix specialize get $&gt;- [prefix: 'no]
</code></pre>
<p>It turns out there was some odd postponing variant too:</p>
<pre><code>|&gt;: runs tweak infix copy get $shove 'postpone 'on
</code></pre>
<p>I cannot imagine when that would be useful:</p>
<pre><code>&gt;&gt; x: add 1 add 2 3 |&gt; lib/* 4
== 24
</code></pre>
<p>Certainly there's a better idea for what to do with that "right flag" operator.  (I probably didn't think it was useful, just testing the postpone feature mixed with shove.)</p>
<h2><a name="p-7741-old-tests-1" class="anchor" href="https://rebol.metaeducation.com#p-7741-old-tests-1"></a>Old Tests</h2>
<p>Going to rework these, not sure which of them are actually coherent.</p>
<pre><code>; NORMAL parameter
;
(9 = (1 + 2 -&gt;- multiply 3))
(7 = (add 1 2 -&gt;- multiply 3))
(7 = (add 1 2 -&gt;- (:multiply) 3))

; :HARD-QUOTE parameter
(
    x: null
    x: -&gt;- default [10 + 20]
    x: -&gt;- default [1000000]
    x = 30
)

; SHOVE should be able to handle refinements and contexts.
[
    (did obj: make object! [
        magic: infix lambda [a b /minus] [
            either minus [a - b] [a + b]
        ]
    ])

    ~???~ !! (1 obj/magic 2)  ; must use shove

    (3 = (1 -&gt;- obj.magic 2))
    (-1 = (1 -&gt;- obj.magic/minus 2))
]


; PATH! cannot be directly quoted left, must use -&gt;-

[
    (
        left-the: infix :the
        o: make object! [i: 10 f: does [20]]
        ok
    )

    ('o.i = o.i left-the)
    (o.i -&gt;- left-the = 'o.i)

    ~literal-left-path~ !! (o/f left-the)
    (o/f -&gt;- left-the = 'o/f)
]


; Right infix always wins over left, unless the right is at list end

((the -&gt;-) = first [-&gt;-])
((the -&gt;- the) = 'the)
('x = (x &gt;- the))
(1 = (1 -&gt;- the))

(1 = (1 &gt;- the))
('x = (x &gt;- the))

; "Precedence" manipulation via &gt;- and -&gt;-

(9 = (1 + 2 -&gt;- multiply 3))
(9 = (1 + 2 &gt;- multiply 3))
(9 = (1 + 2 &gt;-- lib/* 3))
(9 = (1 + 2 -&gt;- lib/* 3))

(7 = (add 1 2 * 3))
(7 = (add 1 2 -&gt;- lib/* 3))
(7 = (add 1 2 &gt;- lib/* 3))

~expect-arg~ !! (10 -&gt;- lib/= 5 + 5)
~expect-arg~ !! (10 &gt;- lib/= 5 + 5)
(10 &gt;-- lib/= 5 + 5)
(10 &gt;- = (5 + 5))

~no-arg~ !! (
    add 1 + 2 &gt;- multiply 3
)
(
    x: add 1 + 2 3 + 4 &gt;- multiply 5
    x = 38
)
(-38 = (negate x: add 1 + 2 3 + 4 &gt;- multiply 5))

~no-arg~ !! (
    divide negate x: add 1 + 2 3 + 4 &gt;- multiply 5
)
(-1 = (divide negate x: add 1 + 2 3 + 4  2 &gt;- multiply 5))

; Predicates allow the specification of an additional constraint, which if
; not met, will also lead to defaulting.
(
    x: "not an integer"
    x: &gt;- default/predicate [10 + 20] :integer?
    x = 30
)(
    x: 304
    x: &gt;- default/predicate [10 + 20] :integer?
    x = 304
)
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/9">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/9</link>
        <pubDate>Sat, 21 Sep 2024 11:50:14 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1039-9</guid>
        <source url="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039.rss">Show the Love for SHOVE</source>
      </item>
      <item>
        <title>Show the Love for SHOVE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1039">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; 1 &gt;- lib/add 2 * 3
== 7  ; as if you'd said `add 1 2 * 3`

&gt;&gt; 1 &gt;- lib/+ 2 * 3
== 9  ; as if you'd said `1 + 2 * 3`
</code></pre>
</blockquote>
</aside>
<h2><a name="p-7740-so-the-2019-idea-of-shove-got-a-bit-out-of-control-1" class="anchor" href="https://rebol.metaeducation.com#p-7740-so-the-2019-idea-of-shove-got-a-bit-out-of-control-1"></a>So the 2019 idea of SHOVE... got a bit out of control.</h2>
<p>It was at one point used to implement ME and MY:</p>
<pre><code>&gt;&gt; some-variable: 10

&gt;&gt; some-variable: me + 20
== 30
</code></pre>
<p>The idea was that ME would take its left hand side literally, and then be variadic on the right to <strong><code>[+ 20]</code></strong>.  It would GET the variable, then pass it to SHOVE, along with the variadic feed on the right.</p>
<p>Binding bugs in the too-complicated shove code led to scrapping that and expressing ME and MY as macros:</p>
<pre><code>me: infix macro [@left [set-word! set-tuple!] @right [word! tuple! path!]] [
    return reduce [left, plain left, right]
]

my: infix macro [@left [set-word! set-tuple!] @right [word! tuple! path!]] [
    return reduce [left, right, plain left]
]
</code></pre>
<p>So that just turns <strong><code>[some-variable: me +]</code></strong> into <strong><code>[some-variable: some-variable +]</code></strong></p>
<p>And <strong><code>[some-variable: my append]</code></strong> becomes <strong><code>[some-variable: append some-variable]</code></strong></p>
<p><em>(Though I suppose technically, there's no reason ME needs to enforce an argument on the right... <strong><code>(some-variable: me)</code></strong> could be legal, although useless.)</em></p>
<h2><a name="p-7740-anyway-without-me-and-my-shove-had-no-uses-2" class="anchor" href="https://rebol.metaeducation.com#p-7740-anyway-without-me-and-my-shove-had-no-uses-2"></a>Anyway, Without ME and MY, SHOVE Had No Uses</h2>
<p>Once ME and MY no longer used SHOVE, the only place it appeared was in tests, that broke often and caused me grief.</p>
<p>Due to a recent change they're all completely broken</p>
<p>At frustrated moments, I've wanted to delete it completely.  But... I'll try to not be hasty, and keep any useful parts.</p>
<h2><a name="p-7740-infix-no-longer-a-necessary-applicatoin-3" class="anchor" href="https://rebol.metaeducation.com#p-7740-infix-no-longer-a-necessary-applicatoin-3"></a>Infix No Longer A Necessary Applicatoin</h2>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1039">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Invoke refinements on infix executions</p>
</blockquote>
</aside>
<p>So this isn't going to be an issue SHOVE needs to solve any longer, thanks to <a href="https://rebol.metaeducation.com/t/big-alien-proposal-word-runs-functions/1905/13">The Big Alien Proposal <img src="https://rebol.metaeducation.com/images/emoji/twitter/flying_saucer.png?v=14" title=":flying_saucer:" class="emoji" alt=":flying_saucer:" loading="lazy" width="20" height="20"></a></p>
<p>You will be able to freely use infix operations with refinements, because they will be done with CHAIN!s, and the head of the chain can be tested for infix in a way that's no more or less broken than testing a word for infix.</p>
<p>This might not seem too palatable for operators:</p>
<pre><code> a =:strict b
</code></pre>
<p>But not so useless: <a href="https://rebol.metaeducation.com/t/a-dream-for-debugging-generalized-accessors/2259">what about things like ACCESSOR</a>?  These take a SET-WORD! on their left, and I can reasonably see them taking refinements.</p>
<pre><code>a: alias:weak $var
</code></pre>
<p>Anyway, you won't need shove to give refinements to infix functions anymore.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1039">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Above I showed that shove takes its cue on how to act based on the infixedness of what you're shoving into:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; 1 &gt;- lib/add 2 * 3
== 7  ; as if you'd said `add 1 2 * 3`

&gt;&gt; 1 &gt;- lib/+ 2 * 3
== 9  ; as if you'd said `1 + 2 * 3`
</code></pre>
</blockquote>
</aside>
<p>So the most logical implementation of this is to have SHOVE take <em>one</em> unit of material on the left as a hard literal... and then decide what to do with it.</p>
<p>But if it takes its left as hard (or even soft) literal, then consider this:</p>
<pre><code>&gt;&gt; 1 + 2 * 3
== 9   ; e.g. (1 + 2) * 3

&gt;&gt; 1 + 2 &gt;- lib/* 3
== ???
</code></pre>
<p>The nature of literal arguments means that <strong><code>&gt;-</code></strong> will out-prioritize the <strong><code>1 +</code></strong> on the left, and act like:</p>
<pre><code>&gt;&gt; 1 + (2 &gt;- lib/* 3)
== 7
</code></pre>
<p>So what are the options, here?</p>
<ol>
<li>
<p>The main version of SHOVE (<strong><code>&gt;-</code></strong>) takes its left hand side as a hard literal, and then treats the parameter how the right hand side wants (hard literal, soft literal, evalative).  A second version of SHOVE (<strong><code>-&gt;-</code></strong>) takes its left hand side evaluatively...and either does not work with functions that take their first argument literally, or gives them the evaluative product (like an APPLY would).</p>
</li>
<li>
<p>Flip that around: the main version of SHOVE (<strong>&gt;-</strong>) takes its left hand side evaluatively, and you use a special version to take the left hand side literally.</p>
</li>
<li>
<p>Say screw it: SHOVE isn't used that often and you should get used to the fact that it may take the left more tightly than you're used to.  Be glad you have it at all, and just write <strong><code>(1 + 2) &gt;- lib/* 3</code></strong> if getting 9 out is so important.</p>
</li>
<li>
<p>Ignore reality and try to make one native that incoherently attempts to serve all the purposes and then is specialized as three distinct operators.</p>
</li>
</ol>
<p>For reasons that elude me now, in 2019 I went with [4].</p>
<p>From where I stand today, [3] is the obvious answer.  Think about it: if people are going to have to modify their callsite, what's lower cost:</p>
<ul>
<li>
<p>to teach them what a new alternative operator is called and how it works, and add one or more symbols to the callsite to get it... or...</p>
</li>
<li>
<p>to have them add exactly two symbols of <strong><code>(</code></strong> and <strong><code>)</code></strong> which they already understand fully?</p>
</li>
</ul>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1039">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<h2>&gt;-</h2>
<p>Symbol-y, but not symbol soup: it communicates!</p>
<p>Being an "arrow word" is crucial to showing its disruption of the evaluation order. That's not going to be conveyed by a short alphabetic name:</p>
</blockquote>
</aside>
<p>Given the new string proposal for using <strong><code>-{...}-</code></strong> and <strong><code>--{...}--</code></strong> etc. for strings (alongside <strong><code>-"..."-</code></strong> and <strong><code>--"..."--</code></strong>), it seems to me that <strong><code>-&lt;...&gt;-</code></strong> is going to make more sense as a form of TAG! which allows embedded <strong><code>&lt;</code></strong> and <strong><code>&gt;</code></strong>, as well as spaces at the head and tail.</p>
<pre><code>tag: -&lt;
    My modern multi-line tag,
    which can have &gt; and &lt; in it
&gt;-
</code></pre>
<p>So SHOVE will need another syntax.  <strong><code>-&gt;-</code></strong> is still available, I guess.</p>
<pre><code>&gt;&gt; 1 + 2 -&gt;- lib/* 3
== 7
</code></pre>
<p>Thanks to TAG!, arrow words are pretty scarce.  I hate to use something important like <code>&lt;-</code> or <code>&gt;&gt;</code> or <code>&gt;&gt;=</code> for something this niche.</p>
<p>I'll mention that I still have a vague wish for <strong><code>&gt;&gt;</code></strong> as a "console operator", for some kind of <a href="https://rebol.metaeducation.com/t/console-transcript-replay-i-want-it/1711">wild trick that enables copy and paste replaying of console transcripts.</a></p>
<p>Anyway, I'll go with <strong><code>-&gt;-</code></strong> for now, just to get things moving.</p>
          <p><a href="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/8">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/8</link>
        <pubDate>Sat, 21 Sep 2024 11:18:22 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1039-8</guid>
        <source url="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039.rss">Show the Love for SHOVE</source>
      </item>
      <item>
        <title>Show the Love for SHOVE</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>You always manage to amaze. The only downside is, that it gets harder and harder to keep track of all the new features.</p>
          <p><a href="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/4</link>
        <pubDate>Tue, 29 Jan 2019 07:37:08 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1039-4</guid>
        <source url="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039.rss">Show the Love for SHOVE</source>
      </item>
      <item>
        <title>Show the Love for SHOVE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2><a name="p-3029-h-1" class="anchor" href="https://rebol.metaeducation.com#p-3029-h-1"></a><code>&gt;-</code></h2>
<p>Despite having a bit tricky to implement, it's very easy to understand.  <strong>It just pushes the argument on its left to be the first argument of the operation on its right:</strong></p>
<pre><code>&gt;&gt; 1 &gt;- add 2 * 3
== 7  ; as if you'd written `add 1 2 * 3`
</code></pre>
<p>Simple, right?  You might think it's not something you would use... <em>but you'd be thinking wrong!</em></p>
<h2><a name="p-3029-invoke-infix-functions-in-modules-or-libraries-2" class="anchor" href="https://rebol.metaeducation.com#p-3029-invoke-infix-functions-in-modules-or-libraries-2"></a>Invoke infix functions in modules or libraries</h2>
<p>Infix execution cannot work with paths (<a href="https://rebol.metaeducation.com/t/letting-go-of-infix-path-dreams-but-fixing-it-with-magic/794">this isn't a bug, it <em>shouldn't</em> work</a>):</p>
<pre><code>r3-alpha&gt;&gt; 1 lib/+ 2 * 3
** Script error: op! type is not allowed here
</code></pre>
<p>But shove has your back:</p>
<pre><code>&gt;&gt; 1 &gt;- lib/+ 2 * 3
== 9  ; as if you'd written `1 + 2 * 3`
</code></pre>
<p><em>(Note the result is different from what you get with add, since + is infix.)</em></p>
<p><strong>This is only going to get more critical as modules and namespacing move forward.</strong> And anyone who's redefined an operator--but wants to temporarily reach for another implementation--will want this.</p>
<h2><a name="p-3029-invoke-refinements-on-infix-executions-3" class="anchor" href="https://rebol.metaeducation.com#p-3029-invoke-refinements-on-infix-executions-3"></a>Invoke refinements on infix executions</h2>
<p>Historically there aren't really refinements on infix functions, because you'd never be able to use them.  Now you can:</p>
<pre><code>&gt;&gt; ++: infixed func [a b /double] [a + either double [2 * b] [b]]

&gt;&gt; 10 ++ 20
== 30

&gt;&gt; 10 &gt;- ++/double 20
== 50
</code></pre>
<p>In the common case, you hope that your operator doesn't need refinements.  But when a special case comes up, it's nice to not have to define a prefix form just for that one instance. (which means coming up with a new name that people need to know also).  Now you can take for granted that shove is there when you need it.</p>
<h2><a name="p-3029-symbol-y-but-not-symbol-soup-it-communicates-4" class="anchor" href="https://rebol.metaeducation.com#p-3029-symbol-y-but-not-symbol-soup-it-communicates-4"></a>Symbol-y, but not symbol soup: it communicates!</h2>
<p>Being an "arrow word" is crucial to showing its disruption of the evaluation order.  That's not going to be conveyed by a short alphabetic name:</p>
<pre><code>&gt;&gt; 1 shove lib/+ 2 * 3   ; lame and wordy
== 9
</code></pre>
<p>Invoking infix functions from modules/namespaces and using refinements with them is <em>fundamental behavior</em>.  So it needs to be very short and light.  You want people to take this thing for granted!</p>
<h2><a name="p-3029-extra-credit-tweak-the-argument-precedence-5" class="anchor" href="https://rebol.metaeducation.com#p-3029-extra-credit-tweak-the-argument-precedence-5"></a>Extra credit: tweak the argument precedence</h2>
<p>Rebol is well known for having a difference in interpretation when you use an infix operator vs. not:</p>
<pre><code>&gt;&gt; add 1 2 * 3
== 7

&gt;&gt; 1 + 2 * 3
== 9
</code></pre>
<p><em>(If you don't know why that is--and wonder why such a "quirk" hasn't been changed despite a lot of thought--<a href="https://rebol.metaeducation.com/t/the-beta-one-infix-covenant/1023">you can read more than you ever wanted to about it</a>)</em>.</p>
<p>Above I showed that shove takes its cue on how to act based on the infixedness of what you're shoving into:</p>
<pre><code>&gt;&gt; 1 &gt;- lib/add 2 * 3
== 7  ; as if you'd said `add 1 2 * 3`

&gt;&gt; 1 &gt;- lib/+ 2 * 3
== 9  ; as if you'd said `1 + 2 * 3`
</code></pre>
<p><strong>But it might be argued that since <code>&gt;-</code> is infix, the overall operation is always infix, which intuitively would suggest both of the above should be 9.</strong></p>
<p>It's tough to say.  But I liked the simple definition of <em>"shove uses the value on the left as the first argument"</em>.  Imagine what the "as if you'd said" would have to be if the shove into ADD above gave 9, if you couldn't take for granted another known another name for the operation (like <code>+</code>):</p>
<pre><code>&gt;&gt; 1 &gt;- lib/add 2 * 3  ; let's say it's the hypothetical infix-always version
== 9  ; as if you'd said `temp: infixed :add | 1 temp 2 * 3`
</code></pre>
<p>But for sake of completeness...I introduced "force infix behavior (<strong>-&gt;-</strong>)" and  "force prefix behavior (<strong>&gt;--</strong>)" forms:</p>
<pre><code>&gt;&gt; 1 -&gt;- lib/add 2 * 3
== 9  ; as if you'd said `1 + 2 * 3`

&gt;&gt; 1 &gt;-- lib/+ 2 * 3
== 7  ; as if you'd said `add 1 2 * 3`
</code></pre>
<p>I think it's cute that <strong><code>-&gt;-</code></strong> looks like a picture of args on the left and right of an operator, suggesting infix... while <strong><code>&gt;--</code></strong> looks like no args on the left with two args on the right!</p>
<p>But you could also just use parentheses:</p>
<pre><code>&gt;&gt; (1 &gt;- lib/add 2) * 3
== 9

&gt;&gt; 1 &gt;- lib/+ (2 * 3)
== 7
</code></pre>
<p>So whether <code>-&gt;-</code> and <code>&gt;--</code> survive or not is an open question.  If anyone actually uses them, I'd be interested to know.</p>
          <p><a href="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/show-the-love-for-shove/1039/1</link>
        <pubDate>Mon, 28 Jan 2019 01:32:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1039-1</guid>
        <source url="https://rebol.metaeducation.com/t/show-the-love-for-shove/1039.rss">Show the Love for SHOVE</source>
      </item>
  </channel>
</rss>
