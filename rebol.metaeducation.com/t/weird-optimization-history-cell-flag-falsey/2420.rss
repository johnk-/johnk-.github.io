<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Weird Optimization History: CELL_FLAG_FALSEY</title>
    <link>https://rebol.metaeducation.com/t/weird-optimization-history-cell-flag-falsey/2420</link>
    <description>In the very, very early times of Ren-C, there was no QUOTE_BYTE chewing 8 bits out of the header.  So CELL_FLAG_XXX were more plentiful in the remaining header space.  Because they were so plentiful, it was picked to use one to say whether a cell was &quot;falsey&quot;.

At first, falsey types would be blank, and LOGIC! false.  This which expanded to blank, null, and logic false.  And LOGIC! could use the flag as its payload.

Today&#39;s world with &quot;flexible logic&quot; only has null as &quot;falsey&quot; (though we call it &quot;branch inhibitor&quot; when we want to be technical, since false is a word under that worlview).  And LOGIC! is gone as a fundamental type.  So even if we had bits to spare, it wouldn&#39;t be spent on CELL_FLAG_FALSEY.

In any case, the bootstrap executable has been patched to modern conventions of BLANK! being truthy and such.  So this little piece of history is going away.  I felt like giving it a goodbye post...

    //=//// CELL_FLAG_FALSEY //////////////////////////////////////////////////=//
    //
    // This flag is used as a quick cache on NULL, BLANK! or LOGIC! false values.
    // These are the only three values that return true from the NOT native
    // (a.k.a. &quot;conditionally false&quot;).  All other types return true from TO-LOGIC
    // or its synonym, &quot;DID&quot;.
    //
    // (It&#39;s also placed on END cells and TRASH cells, to speed up the Type_Of()
    // check for finding illegal types...by only checking falsey types.)
    //
    // Because of this cached bit, LOGIC! does not need to store any data in its
    // payload... its data of being true or false is already covered by this
    // header bit.
    //
    #define CELL_FLAG_FALSEY \
        FLAG_LEFT_BIT(18)</description>
    
    <lastBuildDate>Sun, 20 Apr 2025 18:39:59 +0000</lastBuildDate>
    <category>Optimization</category>
    <atom:link href="https://rebol.metaeducation.com/t/weird-optimization-history-cell-flag-falsey/2420.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Weird Optimization History: CELL_FLAG_FALSEY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the very, very early times of Ren-C, there was no QUOTE_BYTE chewing 8 bits out of the header.  So CELL_FLAG_XXX were more plentiful in the remaining header space.  Because they were so plentiful, it was picked to use one to say whether a cell was "falsey".</p>
<p>At first, falsey types would be blank, and LOGIC! false.  This which expanded to blank, null, and logic false.  And LOGIC! could use the flag as its payload.</p>
<p>Today's world with "flexible logic" only has null as "falsey" (though we call it "branch inhibitor" when we want to be technical, since false is a word under that worlview).  And LOGIC! is gone as a fundamental type.  So even if we had bits to spare, it wouldn't be spent on CELL_FLAG_FALSEY.</p>
<p>In any case, the bootstrap executable has been patched to modern conventions of BLANK! being truthy and such.  So this little piece of history is going away.  I felt like giving it a goodbye post...</p>
<pre><code>//=//// CELL_FLAG_FALSEY //////////////////////////////////////////////////=//
//
// This flag is used as a quick cache on NULL, BLANK! or LOGIC! false values.
// These are the only three values that return true from the NOT native
// (a.k.a. "conditionally false").  All other types return true from TO-LOGIC
// or its synonym, "DID".
//
// (It's also placed on END cells and TRASH cells, to speed up the Type_Of()
// check for finding illegal types...by only checking falsey types.)
//
// Because of this cached bit, LOGIC! does not need to store any data in its
// payload... its data of being true or false is already covered by this
// header bit.
//
#define CELL_FLAG_FALSEY \
    FLAG_LEFT_BIT(18)
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/weird-optimization-history-cell-flag-falsey/2420/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/weird-optimization-history-cell-flag-falsey/2420/1</link>
        <pubDate>Fri, 18 Apr 2025 23:49:45 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2420-1</guid>
        <source url="https://rebol.metaeducation.com/t/weird-optimization-history-cell-flag-falsey/2420.rss">Weird Optimization History: CELL_FLAG_FALSEY</source>
      </item>
  </channel>
</rss>
