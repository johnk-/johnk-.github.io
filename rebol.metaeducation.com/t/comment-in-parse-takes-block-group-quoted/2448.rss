<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>COMMENT in PARSE takes BLOCK!/GROUP! quoted</title>
    <link>https://rebol.metaeducation.com/t/comment-in-parse-takes-block-group-quoted/2448</link>
    <description>Something I did long ago to the regular COMMENT was made it so you could only comment out lists, e.g. you couldn&#39;t just comment out a WORD!.

If you could, this would happen:

    &gt;&gt; eval [comment print &quot;hi&quot;]
    == &quot;hi&quot;

That&#39;s no good... so you can only use things that would evaluate as single elements.

    &gt;&gt; eval [comment print &quot;hi&quot;]
    !! PANIC: `comment` does not take `word!` for its `ignored` argument

PARSE has a similar issue, though it *could* combinate a parser and just not call it:

    &gt;&gt; parse &quot;aaa&quot; [3 &quot;a&quot; comment across some &quot;b&quot;]
    == &quot;a&quot;

But that&#39;s of questionable benefit.

In any case, forming a parser rule that&#39;s not going to be run is less efficient than just quoting material, which can be done on rules with illegal content:

    &gt;&gt; parse &quot;a&quot; [comment [across some &quot;a&quot; ~illegal~] &quot;a&quot;]
    == &quot;a&quot;

So the COMMENT combinator takes its argument literally, and you can&#39;t COMMENT a WORD!...</description>
    
    <lastBuildDate>Sun, 11 May 2025 23:19:00 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://rebol.metaeducation.com/t/comment-in-parse-takes-block-group-quoted/2448.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>COMMENT in PARSE takes BLOCK!/GROUP! quoted</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Something I did long ago to the regular COMMENT was made it so you could only comment out lists, e.g. you couldn't just comment out a WORD!.</p>
<p>If you could, this would happen:</p>
<pre><code>&gt;&gt; eval [comment print "hi"]
== "hi"
</code></pre>
<p>That's no good... so you can only use things that would evaluate as single elements.</p>
<pre><code>&gt;&gt; eval [comment print "hi"]
!! PANIC: `comment` does not take `word!` for its `ignored` argument
</code></pre>
<p>PARSE has a similar issue, though it <em>could</em> combinate a parser and just not call it:</p>
<pre><code>&gt;&gt; parse "aaa" [3 "a" comment across some "b"]
== "a"
</code></pre>
<p>But that's of questionable benefit.</p>
<p>In any case, forming a parser rule that's not going to be run is less efficient than just quoting material, which can be done on rules with illegal content:</p>
<pre><code>&gt;&gt; parse "a" [comment [across some "a" ~illegal~] "a"]
== "a"
</code></pre>
<p>So the COMMENT combinator takes its argument literally, and you can't COMMENT a WORD!...</p>
          <p><a href="https://rebol.metaeducation.com/t/comment-in-parse-takes-block-group-quoted/2448/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/comment-in-parse-takes-block-group-quoted/2448/1</link>
        <pubDate>Sun, 11 May 2025 20:08:44 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2448-1</guid>
        <source url="https://rebol.metaeducation.com/t/comment-in-parse-takes-block-group-quoted/2448.rss">COMMENT in PARSE takes BLOCK!/GROUP! quoted</source>
      </item>
  </channel>
</rss>
