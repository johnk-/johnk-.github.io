<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why shouldn&#39;t VOID be done with a ~void~ WORD! Antiform?</title>
    <link>https://forum.rebol.info/t/why-shouldnt-void-be-done-with-a-void-word-antiform/2160</link>
    <description>[quote=&quot;hostilefork, post:1, topic:1989&quot;]
[Why Is NULL Done With a `~null~` WORD! Antiform?](https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989)
[/quote]

I might as well throw in the adjunct question of: **&quot;Why *shouldn&#39;t* VOID be done with ~void~ antiform?&quot;**

It used to be said of NULL that it had &quot;no representation&quot;.  That&#39;s true of antiforms also, but there&#39;s been a standard that the interface shows an antiforms by printing the quasiform and then commenting it as *&quot;oh, it&#39;s actually an antiform state&quot;*

At that time, the console had a special exception for displaying nulls.  And the &quot;quoted&quot; form of null was just a single apostrophe with nothing after it:

    &gt;&gt; null
    ; null

    &gt;&gt; quote null
    == &#39;

    &gt;&gt; &#39;
    ; null

This was all conceived before the idea of having a meta state for void, because voids just vanished.  But as things shuffled around, I came to think that this &quot;no representation&quot; made more sense for voids...

    &gt;&gt; &#39;

    &gt;&gt; quote void
    == &#39;

    &gt;&gt; meta void
    == &#39;

Having a META state that is quoted vs. quasi puts VOID in a bizarre middle ground of not being an antiform.  Yet void can&#39;t be put in a block.  Though I&#39;ve argued that we might also see it as that you can put infinitely many voids in a block...

    &gt;&gt; append [a b c] &#39;
    == [a b c]

     &gt;&gt; append [a b c] if false [&#39;d]
     == [a b c]

     &gt;&gt; first []
     == ~null~  ; anti

     &gt;&gt; append [a b c] first []
     ** Error: Can&#39;t append ~null~ antiform (see MAYBE)

     &gt;&gt; maybe first []

     &gt;&gt; append [a b c] maybe first []
     == [a b c]

Generally speaking I&#39;m pleased with that.  Though it means if you wind up setting a variable to void, it will look kind of slight:

     &gt;&gt; make object! [x: comment &quot;hi&quot;]  ; might require a SET/ANY or similar
     == make object! [
         x: &#39;
     ]

## Why not push ithe other way, and say that voids are antiforms?

One key value of saying that void states are &quot;ordinary&quot; is that it means they have an isotopic form, and that isotopic form is rendered as just `~`.

This isotopic void state of **`~`** is being used as the &quot;truly unset&quot; state.  An even meaner idea of complete absence of value than void.  I&#39;m of the belief that it&#39;s important to have this not be the same thing as void, because the tolerance of void by so many constructs (including things like ANY and ALL to skip them, or opting out of APPENDs, or making SELECTs just return a null).

The design of the system is such that the quote byte of 0 means isotopic status (e.g. &quot;quote level negative 1&quot; is represented by 0), and the void type is a 0 byte.  So you can memset() an area to 0 and get all unset states (typically an optimized operation).  And the operating system clears all memory to 0 before giving it to your application as well.  It&#39;s kind of pleasing that such a representation gives you a nice unset state.

It seems to me that the pieces of the puzzle fit together better this way.</description>
    
    <lastBuildDate>Sun, 25 Aug 2024 00:09:42 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/why-shouldnt-void-be-done-with-a-void-word-antiform/2160.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why shouldn&#39;t VOID be done with a ~void~ WORD! Antiform?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2160">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One key value of saying that void states are "ordinary" is that it means they have an antiform, and that antiform is rendered as just <code>~</code>.</p>
</blockquote>
</aside>
<p>So as it turns out, you can get all the same benefit here if <strong>~</strong> is the anti/quasi form of BLANK!.</p>
<p>(There's no particular reason it should have to render as <strong>~_~</strong>, and that looks terrible anyway.)</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2160">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The design of the system is such that the quote byte of 0 means isotopic status (e.g. "quote level negative 1" is represented by 0), and the void type is a 0 byte. So you can memset() an area to 0 and get all unset states (typically an optimized operation).</p>
</blockquote>
</aside>
<p>To the extent this matters, you <em>could</em> get all the same benefit here if BLANK! is the 0 heart byte.  (The 0 byte is probably used for other purposes.)</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2160">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I might as well throw in the adjunct question of: <strong>"Why <em>shouldn't</em> VOID be done with a ~void~ WORD! antiform?"</strong></p>
</blockquote>
</aside>
<h2>
<a name="real-answer-it-should-be-1" class="anchor" href="https://forum.rebol.info#real-answer-it-should-be-1"></a>Real Answer: <strong>It should be.</strong>
</h2>
<p>It's become apparent that as a practical matter, void's status as "not an antiform, not a regular value either" is a thorn in usage and implementation.</p>
<ul>
<li>
<p>It complicates checking for when you're putting illegal states into cells that the type system has declared are "safe for blocks".  You can't just check for the quote byte being -1 for an antiform.  You have to check for quote byte 0 and heart byte of void as well.</p>
</li>
<li>
<p>It means that if you're trying to put a void in suspended animation, your suspended state is a plain quoted value.  But there's a function I need which I've been calling DEGRADE which changes all quasiforms into their antiforms, passing through everything else.  The need to degrade voids is common, and it means degrade would have to break the pattern... taking in a non-quasiform (a quoted) and returning a non-antiform (a void).</p>
</li>
<li>
<p>The isotopic era solution to a "weird" thing to put in the typecheck specs for NULL is <strong><code>[~null~ integer!]</code></strong>, instead of <strong><code>[&lt;opt&gt; integer!]</code></strong>.  That's a nice solution to a longstanding problem of wanting to make nulls stand out, leaving tags free for other things.  But the trick couldn't supplant <strong><code>[&lt;void&gt; integer!]</code></strong> because that would come out looking like <strong><code>[' integer!]</code></strong> ... which is no good, and again the problem of a different "part of speech".</p>
</li>
<li>
<p>A single tick mark is pretty slight visually for an element you can put in blocks.  The "chunkier" representation of voids as <code>~void~</code> vs. being absolutely invisible may feel a bit strange for something that  intends to vanish, but in the world of isotopes... all antiforms are abstractions with no actual representation.  It's just a concept, and having the concept be a full English word has advantages in handling and comprehension.</p>
</li>
</ul>
<h2>
<a name="hence-a-minor-but-important-change-2" class="anchor" href="https://forum.rebol.info#hence-a-minor-but-important-change-2"></a>Hence, a "Minor" but Important Change...</h2>
<ul>
<li>
<p>VOID is a WORD! quasi/antiform, <strong><code>~void~</code></strong></p>
</li>
<li>
<p>NOTHING is the BLANK! quasi/antiform, <strong><code>~</code></strong></p>
</li>
</ul>
<p>This ties in with finalizing <sub>one can hope</sub> another decision: <a href="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045">to make the console treat nothing invisibly, but show voids</a>.</p>
<pre><code>&gt;&gt; if false [&lt;something&gt;]
== ~void~  ; anti

&gt;&gt; meta if false [&lt;something&gt;]
== ~void~

&gt;&gt; unset 'x

&gt;&gt; get/any 'x

&gt;&gt; meta get/any 'x
== ~
</code></pre>
<p>Implementation-wise it doesn't change a lot...but what it does change is pleasing and simplifying.</p>
          <p><a href="https://forum.rebol.info/t/why-shouldnt-void-be-done-with-a-void-word-antiform/2160/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-shouldnt-void-be-done-with-a-void-word-antiform/2160/3</link>
        <pubDate>Fri, 01 Mar 2024 10:28:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2160-3</guid>
        <source url="https://forum.rebol.info/t/why-shouldnt-void-be-done-with-a-void-word-antiform/2160.rss">Why shouldn&#39;t VOID be done with a ~void~ WORD! Antiform?</source>
      </item>
      <item>
        <title>Why shouldn&#39;t VOID be done with a ~void~ WORD! Antiform?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1989">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989/1">~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</a>
</div>
<blockquote>
<p><a href="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989">Why Is NULL Done With a <code>~null~</code> WORD! Antiform?</a></p>
</blockquote>
</aside>
<p>I might as well throw in the adjunct question of: <strong>"Why <em>shouldn't</em> VOID be done with ~void~ antiform?"</strong></p>
<p>It used to be said of NULL that it had "no representation".  That's true of antiforms also, but there's been a standard that the interface shows an antiforms by printing the quasiform and then commenting it as <em>"oh, it's actually an antiform state"</em></p>
<p>At that time, the console had a special exception for displaying nulls.  And the "quoted" form of null was just a single apostrophe with nothing after it:</p>
<pre><code>&gt;&gt; null
; null

&gt;&gt; quote null
== '

&gt;&gt; '
; null
</code></pre>
<p>This was all conceived before the idea of having a meta state for void, because voids just vanished.  But as things shuffled around, I came to think that this "no representation" made more sense for voids...</p>
<pre><code>&gt;&gt; '

&gt;&gt; quote void
== '

&gt;&gt; meta void
== '
</code></pre>
<p>Having a META state that is quoted vs. quasi puts VOID in a bizarre middle ground of not being an antiform.  Yet void can't be put in a block.  Though I've argued that we might also see it as that you can put infinitely many voids in a block...</p>
<pre><code>&gt;&gt; append [a b c] '
== [a b c]

 &gt;&gt; append [a b c] if false ['d]
 == [a b c]

 &gt;&gt; first []
 == ~null~  ; anti

 &gt;&gt; append [a b c] first []
 ** Error: Can't append ~null~ antiform (see MAYBE)

 &gt;&gt; maybe first []

 &gt;&gt; append [a b c] maybe first []
 == [a b c]
</code></pre>
<p>Generally speaking I'm pleased with that.  Though it means if you wind up setting a variable to void, it will look kind of slight:</p>
<pre><code> &gt;&gt; make object! [x: comment "hi"]  ; might require a SET/ANY or similar
 == make object! [
     x: '
 ]
</code></pre>
<h2>
<a name="why-not-push-ithe-other-way-and-say-that-voids-are-antiforms-1" class="anchor" href="https://forum.rebol.info#why-not-push-ithe-other-way-and-say-that-voids-are-antiforms-1"></a>Why not push ithe other way, and say that voids are antiforms?</h2>
<p>One key value of saying that void states are "ordinary" is that it means they have an isotopic form, and that isotopic form is rendered as just <code>~</code>.</p>
<p>This isotopic void state of <strong><code>~</code></strong> is being used as the "truly unset" state.  An even meaner idea of complete absence of value than void.  I'm of the belief that it's important to have this not be the same thing as void, because the tolerance of void by so many constructs (including things like ANY and ALL to skip them, or opting out of APPENDs, or making SELECTs just return a null).</p>
<p>The design of the system is such that the quote byte of 0 means isotopic status (e.g. "quote level negative 1" is represented by 0), and the void type is a 0 byte.  So you can memset() an area to 0 and get all unset states (typically an optimized operation).  And the operating system clears all memory to 0 before giving it to your application as well.  It's kind of pleasing that such a representation gives you a nice unset state.</p>
<p>It seems to me that the pieces of the puzzle fit together better this way.</p>
          <p><a href="https://forum.rebol.info/t/why-shouldnt-void-be-done-with-a-void-word-antiform/2160/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-shouldnt-void-be-done-with-a-void-word-antiform/2160/1</link>
        <pubDate>Tue, 25 Oct 2022 13:14:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2160-1</guid>
        <source url="https://forum.rebol.info/t/why-shouldnt-void-be-done-with-a-void-word-antiform/2160.rss">Why shouldn&#39;t VOID be done with a ~void~ WORD! Antiform?</source>
      </item>
  </channel>
</rss>
