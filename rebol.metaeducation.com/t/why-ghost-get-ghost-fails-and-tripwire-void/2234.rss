<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</title>
    <link>https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234</link>
    <description>If you use GHOST in an expression, it works:

    &gt;&gt; ghost
    == \~,~\  ; antiform (&quot;ghost&quot;)

    &gt;&gt; 1 + 2 ghost
    == 3

And you can test it to see that it is a GHOST!

    &gt;&gt; ghost? ghost
    == \~okay~\  ; antiform

But if you fetch GHOST it&#39;s not a GHOST!, it&#39;s an ACTION!:

    &gt;&gt; ghost? get $ghost
    == \~null~\  ; antiform

    &gt;&gt; action? ghost/
    == \~okay~\  ; antiform

This is true of VOID as well... and also TRIPWIRE:

    &gt;&gt; tripwire
    == \~\  ; antiform

    &gt;&gt; trash? tripwire
    == \~okay~\  ; antiform

    &gt;&gt; trash? get:any $tripwire
    == \~null~\  ; antiform

If I create a trash variable myself, it errors when you try to reference it via word.  But it does respond that it&#39;s trash:

    &gt;&gt; my-trash: ~

    &gt;&gt; trash? get:any $my-trash
    == \~okay~\  ; antiform

**Is there any way that GHOST, VOID and TRIPWIRE could not be ACTION!, such that e.g. **`(ghost? get $ghost)`** would be true?**</description>
    
    <lastBuildDate>Sat, 12 Jul 2025 22:04:03 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This does mean that some pretty demos become a little uglier:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; replace [a b [a b] a b] spread [a b] ^void
== [[a b]]
</code></pre>
</blockquote>
</aside>
<p>Another thing to consider is how this affects dialects.</p>
<p>For a time, VOID was a stable antiform of a word, as ~void~.  PARSE would let you fetch it with an @ rule:</p>
<pre><code>&gt;&gt; void? parse [a b] ['a 'b @void]
== \~okay~\  ; antiform
</code></pre>
<p>When it had to become a function, this stopped working.</p>
<p>Should it work?  I don't know.  But if it's going to work, it makes more sense to have it work for any variable that happens to have been meta-assigned void, than to make a loophole for one particular function that returns void.</p>
<p>I'm not sure if it <em>should</em> work, because one of the big premises of voids is that they are accepted casually in many places to mean opt-out because you can't get void from a simple variable reference.  So having void variables wasn't supposed to be a thing... this may have been misguided feature.</p>
<p>In any case, I haven't taken action on this, but I am feeling like the metavariables are likely to replace the functions.</p>
          <p><a href="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/7">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/7</link>
        <pubDate>Sat, 12 Jul 2025 22:04:03 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2234-7</guid>
        <source url="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234.rss">Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</source>
      </item>
      <item>
        <title>Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>The caret may be ugly, but it's sincere.</strong> I think it's better than making these functions.</p>
</blockquote>
</aside>
<p>This does mean that some pretty demos become a little uglier:</p>
<pre><code>&gt;&gt; replace [a b [a b] a b] spread [a b] ^void
== [[a b]]
</code></pre>
<p>Though note that empty SPLICE! antiform <code>\~()~\</code> has a name now (BLANK) and is stable and can be fetched from a normal word:</p>
<pre><code>&gt;&gt; replace [a b [a b] a b] spread [a b] blank
== [[a b]]
</code></pre>
<p>There aren't enough users to vote on this issue <img src="https://rebol.metaeducation.com/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"> so I'll avoid moving on it immediately... leave <code>[void tripwire ghost]</code> as action! and ponder it a while longer.</p>
          <p><a href="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/6">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/6</link>
        <pubDate>Tue, 10 Jun 2025 17:09:28 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2234-6</guid>
        <source url="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234.rss">Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</source>
      </item>
      <item>
        <title>Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>But then I saw the light.</strong> <img src="https://rebol.metaeducation.com/images/emoji/twitter/flashlight.png?v=14" title=":flashlight:" class="emoji" alt=":flashlight:" loading="lazy" width="20" height="20"> It's the variable that should be meta-annotated, not the quantity generator.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext"> ^result: void  ; writing metavariables LIFTs them, result gets lifted void
</code></pre>
</blockquote>
</aside>
<p>I saw an even brighter light <img src="https://rebol.metaeducation.com/images/emoji/twitter/sun.png?v=14" title=":sun:" class="emoji" alt=":sun:" loading="lazy" width="20" height="20">, and the new concepts of <a href="https://rebol.metaeducation.com/t/solving-the-pox-of-the-lift-the-universe/2477">"LIFT the UNVERSE"</a> have produced an unusual situation, where "metavariables" hold what is <em>in effect</em> an unstable antiform.  <em>It's stored lifted... but in an automatic way.</em></p>
<p>Ordinary assignments work the same as always, and store the <em>decayed</em> lifted representation, so you get the same fetch whether you use <code>^</code> or not:</p>
<pre><code>&gt;&gt; ordinary: pack [1 null]
== \~['1 ~null~]~\  ; antiform (pack!)

&gt;&gt; ordinary
== 1

&gt;&gt; ^ordinary
== 1
</code></pre>
<p>But ^META-assignments <em>don't</em> decay, and under the hood save the lifted unstable form.  Plain WORD! fetches will decay, but ^META fetches will not!</p>
<pre><code>&gt;&gt; ^special: pack [1 null]
== \~['1 ~null~]~\  ; antiform (pack!)

&gt;&gt; special
== 1

&gt;&gt; ^special
== \~['1 ~null~]~\  ; antiform (pack!)
</code></pre>
<p>This presents us with the possibility of saying:</p>
<pre><code>&gt;&gt; ^void: ~[]~
== \~[]~\  ; antiform (pack!) "void"

&gt;&gt; void
** PANIC: No value in antiform PACK! to decay to (void)

&gt;&gt; ^void
== \~[]~\  ; antiform (pack!) "void"
</code></pre>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<aside class="quote no-group quote-modified" data-username="rebolbot" data-post="1" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p><em>"Is there any way that GHOST, VOID and TRIPWIRE could not be ACTION!, such that e.g. <strong><code>(ghost? get $ghost)</code></strong> would be true?"</em></p>
</blockquote>
</aside>
<p>It may not be completely out of the question.</p>
</blockquote>
</aside>
<p><strong>I'm certainly feeling like the balance toward authenticity here may be worth it, to use <code>[^void ^tripwire ^ghost]</code> with the true stored states instead of <code>[void tripwire ghost]</code> as action!</strong></p>
<p>In terms of the long-term education of people understanding how the system works, giving them words defined to an illusion of constant literals of the state doesn't really provide that much value.</p>
<p>The new formulation of using the true states would mean all three would panic on plain WORD! access.  What you'd get by learning to use the caret would be a lesson in how to handle <em>any</em> variable that happened to hold one of these states.</p>
<p>Also, it's faster to do these meta-fetches than calling even an intrinsic function (not that this should drive decisions, but, it's true.)</p>
<p><strong>The caret may be ugly, but it's sincere.</strong>  I think it's better than making these functions.</p>
<aside class="quote no-group" data-username="rebolbot" data-post="1" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p>If you use GHOST in an expression, it works:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; ghost
== \~,~\  ; antiform ("ghost")

&gt;&gt; 1 + 2 ghost
== 3
</code></pre>
</blockquote>
</aside>
<p>So one issue is that if you use this technique for e.g. <strong><code>^ghost</code></strong> <a href="https://rebol.metaeducation.com/t/surprising-ghosts-what-combinators-vanish/2437">it would be a <em>surprising</em> ghost</a>, because it's a generic fetch operation of an arbitrary word.  So it wouldn't vanish.</p>
<p>I don't have any legitimate uses of <code>ghost</code> as an arity-0 COMMENT... (just some fabricated tests).  In actual practice, usage of ghost literals is typically e.g. <code>(^var: ghost)</code>...so this wouldn't disrupt any known <em>real</em> uses.  It would just say <code>(^var: ^ghost)</code> now.</p>
<p>If you want an arity-0 COMMENT, you can use <code>~,~</code> directly.  Or we could come up with a name for an arity-0 function whose type signature only returned GHOST.  Naming it something different from GHOST has the advantage of not conflating with a variable holding a ghost.</p>
<p>So what to call the function?  I don't think NOOP should vanish... so it returns trash.</p>
<p>NIHIL is still available.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/slight_smile.png?v=14" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/5</link>
        <pubDate>Tue, 10 Jun 2025 16:31:59 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2234-5</guid>
        <source url="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234.rss">Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</source>
      </item>
      <item>
        <title>Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="rebolbot" data-post="1" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p>But if you fetch GHOST it's not a GHOST!, it's an ACTION!:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; ghost? get $ghost
== \~null~\  ; anti

&gt;&gt; action? ghost/
== \~okay~\  ; antiform  
</code></pre>
</blockquote>
</aside>
<p>So this is indeed a bit of a wrinkle.</p>
<p>I've gone back and forth on thinking that we might be doing a disservice to offer these as WORD!s that look up to something "deceptive".</p>
<p>For a time, the words weren't defined... and I prescribed just using the quasiforms:</p>
<pre><code>voider: func [...] [... return ~[]~]  ; instead of (return void)

ghostly: func [...] [... return ~,~]  ; instead of (return ghost)

trasher: func [...] [... return ~]  ; instead of (return tripwire)
</code></pre>
<p>There are indeed situations where I think it makes more sense to use these shorthands.</p>
<p><em>(Something I don't want to get too hung up on--although it is true--is that it's technically faster to use the quasiform than it is to look up a WORD! and run a function.  These functions can be optimized very well, but you still have to pay for word lookups.)</em></p>
<h2><a name="p-7772-but-the-biggest-reason-to-not-define-the-words-went-away-1" class="anchor" href="https://rebol.metaeducation.com#p-7772-but-the-biggest-reason-to-not-define-the-words-went-away-1"></a>But The Biggest Reason To Not Define The Words Went Away</h2>
<p>I was concerned about people doing meta-representations of these states, and using ^WORD's at-the-time-behavior of META'ing its argument</p>
<p>There was a lot of code that looked something like this:</p>
<pre><code> result': ^blank  ; want to initialize result' to meta-blank

 ...(maybe overwrite result', maybe not)...

 return unlift result'  ; want to return plain blank if not overwritten
</code></pre>
<p>So I was worried that people might follow the pattern with things like unstable antiforms:</p>
<pre><code> result': ^void  ; want to initialize result' to meta-void
</code></pre>
<p>That's broken if VOID is defined as a function.  Instead of meta-void, you get a quasiform FRAME! of a function that produces voids.</p>
<p><strong>But then I saw the light.</strong>  <img src="https://rebol.metaeducation.com/images/emoji/twitter/flashlight.png?v=14" title=":flashlight:" class="emoji" alt=":flashlight:" loading="lazy" width="20" height="20">  It's the variable that should be meta-annotated, not the quantity generator.</p>
<pre><code> ^result: void  ; writing metavariables LIFTs them, result gets lifted void

 ...(maybe overwrite ^result, maybe not)...

 return ^result  ; want to return plain void if not overwritten
</code></pre>
<p>With this being the case, you'd never see someone writing <strong><code>^void</code></strong> because that would try to unlift an antiform frame, and (properly) give an error.  So this safety issue went away.</p>
<p>Once this was resolved, I was dramatically less concerned about the words being functions... and felt the words made quite a lot of code easier to read.</p>
<aside class="quote no-group quote-modified" data-username="rebolbot" data-post="1" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/rebolbot/48/40_2.png" class="avatar"> rebolbot:</div>
<blockquote>
<p><em>"Is there any way that GHOST, VOID and TRASH could not be ACTION!, such that e.g. <strong><code>(ghost? get $ghost)</code></strong> would be true?"</em></p>
</blockquote>
</aside>
<p>It may not be completely out of the question.</p>
<p>We're saying now that you can <strong>GET</strong> something like <strong>^RESULT</strong>, and the GET operation can come back with an unstable antiform.  So while variable slots are still limited to holding stable antiforms, GET itself isn't subject to that limitation.</p>
<p><strong><a href="https://rebol.metaeducation.com/t/a-dream-for-debugging-generalized-accessors/2259">Perhaps ACCESSOR can evolve to be willing to provide unstable antiform states</a></strong>, and it could push the problem further to the edges?</p>
<p>But it's hard for me to predict how damaging it would be to lose the assumption that GET of a plain WORD never comes back as an unstable antiform.  I'll keep an open mind, but it's not a high priority at the moment.</p>
          <p><a href="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/2</link>
        <pubDate>Tue, 24 Sep 2024 14:55:17 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2234-2</guid>
        <source url="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234.rss">Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</source>
      </item>
      <item>
        <title>Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</title>
        <dc:creator><![CDATA[rebolbot]]></dc:creator>
        <description><![CDATA[
            <p>If you use GHOST in an expression, it works:</p>
<pre><code>&gt;&gt; ghost
== \~,~\  ; antiform ("ghost")

&gt;&gt; 1 + 2 ghost
== 3
</code></pre>
<p>And you can test it to see that it is a GHOST!</p>
<pre><code>&gt;&gt; ghost? ghost
== \~okay~\  ; antiform
</code></pre>
<p>But if you fetch GHOST it's not a GHOST!, it's an ACTION!:</p>
<pre><code>&gt;&gt; ghost? get $ghost
== \~null~\  ; antiform

&gt;&gt; action? ghost/
== \~okay~\  ; antiform
</code></pre>
<p>This is true of VOID as well... and also TRIPWIRE:</p>
<pre><code>&gt;&gt; tripwire
== \~\  ; antiform

&gt;&gt; trash? tripwire
== \~okay~\  ; antiform

&gt;&gt; trash? get:any $tripwire
== \~null~\  ; antiform
</code></pre>
<p>If I create a trash variable myself, it errors when you try to reference it via word.  But it does respond that it's trash:</p>
<pre><code>&gt;&gt; my-trash: ~

&gt;&gt; trash? get:any $my-trash
== \~okay~\  ; antiform
</code></pre>
<p><strong>Is there any way that GHOST, VOID and TRIPWIRE could not be ACTION!, such that e.g. <strong><code>(ghost? get $ghost)</code></strong> would be true?</strong></p>
          <p><a href="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234/1</link>
        <pubDate>Fri, 30 Aug 2024 18:12:18 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2234-1</guid>
        <source url="https://rebol.metaeducation.com/t/why-ghost-get-ghost-fails-and-tripwire-void/2234.rss">Why (ghost? get $ghost) Fails (and TRIPWIRE, VOID)</source>
      </item>
  </channel>
</rss>
