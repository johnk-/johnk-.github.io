<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>TRIPWIRE in The Wild</title>
    <link>https://forum.rebol.info/t/tripwire-in-the-wild/2278</link>
    <description>If you access an unset variable, you don&#39;t get a lot of information back:

    &gt;&gt; state: ~

    &gt;&gt; state
    ** Script Error: state is ~ antiform
    ** See ^(...) and GET/ANY

But with **[antiform tags](https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170)**, you can embed a message into the unset variable:

    &gt;&gt; state: ~&lt;INITIALIZE-STATE hasn&#39;t been called yet&gt;~

    &gt;&gt; state
    ** Script Error: state is ~&lt;INITIALIZE-STATE hasn&#39;t been called yet&gt;~ antiform
    ** See ^(...) and GET/ANY

This new concept is called a **TRIPWIRE**.

DEFAULT reacts to it, considering the variable to be &quot;vacant&quot;

    &gt;&gt; vacancy? get/any $state
    == ~okay~  ; anti

    &gt;&gt; state: default [10 + 20]
    == 30

    &gt;&gt; state
    == 30

## Can Be Better Than A Meandering Comment!

A comment won&#39;t direct people to the relevant issue at runtime.  But a well-chosen tripwire can.

Compare:

    ; !!! UPARSE is not available in SYS because it is higher level.  We hack it
    ; up so that when %uparse.r runs it pokes itself into sys.util/parse
    ;
    parse: ~

With:

    parse: ~&lt;higher-level %uparse.r hasn&#39;t set SYS.UTIL/PARSE yet&gt;~

Much better!  Gives you the information you need, when you need it!

*(Note: I was inspired to this concept by a style of usage @rgchris had in his scripts, using TAG!s to provide guidance for what was supposed to be filled into certain slots.  I just wanted to give that some teeth, to know that the variable was conceptually unset.)*</description>
    
    <lastBuildDate>Sun, 10 Nov 2024 13:44:52 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/tripwire-in-the-wild/2278.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>TRIPWIRE in The Wild</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2><a name="p-7883-tripwires-catch-bugs-failing-functions-wont-1" class="anchor" href="https://forum.rebol.info#p-7883-tripwires-catch-bugs-failing-functions-wont-1"></a>Tripwires Catch Bugs Failing Functions Won't</h2>
<p>Prior to the existence of tripwires, there were some functions in LIB for things like RETURN, CONTINUE, THROW, etc. to give you messages when you tried to use these definitional constructs in places that didn't provide them:</p>
<pre><code>/return: func [] [
    fail:blame "RETURN called when no generator is providing it" $return
]

/continue: func [] [
    fail:blame "CONTINUE called when no loop is providing it" $return
]

/throw: func [] [
    fail:blame "THROW called when no catch is providing it" $return
]

...
</code></pre>
<p>Passing the <code>$return</code> bound word as the <code>:BLAME</code> argument is a bit awkward to write.  But it means the error will blame the callsite, showing the error there--instead of implicating the FAIL itself inside the stub function.  That makes the error much more useful.</p>
<p><strong>But this still makes it look like the functions are available.</strong>  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=12" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
<p>You won't get an error if you say <strong><code>return/</code></strong> to try and get a RETURN function.  You'll get a function--and it will pass the rule that things ending in slash must look up to functions--but it's not the kind of RETURN function you actually wanted.</p>
<p>This led to confusing downstream bugs when some code wasn't binding correctly, but proceeded merrily along as if it had gotten a RETURN function.</p>
<p><strong>Tripwires make it nice and tidy!</strong></p>
<pre><code>return: ~&lt;RETURN used when no function generator is providing it&gt;~

continue: ~&lt;CONTINUE used when no loop is providing it&gt;~

throw: ~&lt;THROW used when no catch is providing it&gt;~

...
</code></pre>
<p>You get the "blame" of the callsite for free, because tripwires aren't function instantiations.</p>
<p>And if you say <strong><code>return/</code></strong> then that's an error, because it's not a function.</p>
<p><em>This is quite an improvement!</em></p>
          <p><a href="https://forum.rebol.info/t/tripwire-in-the-wild/2278/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tripwire-in-the-wild/2278/3</link>
        <pubDate>Sun, 10 Nov 2024 13:44:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2278-3</guid>
        <source url="https://forum.rebol.info/t/tripwire-in-the-wild/2278.rss">TRIPWIRE in The Wild</source>
      </item>
      <item>
        <title>TRIPWIRE in The Wild</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2><a name="p-7832-is-signaling-with-tripwires-good-or-bad-1" class="anchor" href="https://forum.rebol.info#p-7832-is-signaling-with-tripwires-good-or-bad-1"></a>Is Signaling With Tripwires Good Or Bad?</h2>
<p>I don't totally remember the motivation, but I came up with a feature of ASSERT where you could give it a handler...to receive the assertion condition that failed, and process it in some way:</p>
<pre><code>&gt;&gt; h: func [cond] [print ["condition is:" @cond]]

&gt;&gt; assert:handler [1 = 1, 2 = 3, 3 = 4] get $h
condition is [2 = 3]
** Error: Assertion Failure....
</code></pre>
<p>Maybe it's interesting.  I dunno.  But something I had in it was that ASSERT would check the return value from the function, and if it was an <strong><code>~ignore~</code></strong> WORD! antiform it would not raise an error, but would continue processing the conditions.</p>
<p>We don't allow arbitrary keywords any longer, but the feature could still be approximated with a tripwire as <strong><code>~&lt;ignore&gt;~</code></strong>.</p>
<pre><code>&gt;&gt; h: func [cond] [print ["condition is:" @cond] return ~&lt;ignore&gt;~]

&gt;&gt; assert:handler [1 = 1, 2 = 3, 3 = 4] get $h
condition is [2 = 3]
condition is [3 = 4]

&gt;&gt;
</code></pre>
<p>There have been some changes to where functions <a href="https://forum.rebol.info/t/implicit-execution-of-return-in-functions-bad/1656">return nothing by default, if you don't have a return statement</a>.  But this doesn't apply to lambdas.</p>
<p>So some of the idea here is to let you use a thing like a lambda and have a weird/ornery out-of-band kind of result that signals a behavior, while other values (blocks, integers, anything you might randomly synthesize) won't.  e.g.  <strong><code>h: cond -&gt; [append log cond]</code></strong> as a handler would log the assert but still fail, while <strong><code>h: cond -&gt; [append log cond, ~&lt;ignore&gt;~]</code></strong> would log and not fail.</p>
<p>Obviously there's potential for failure or conflation if you call a function that just so happens to evaluate to <strong><code>~&lt;ignore&gt;~</code></strong> and you didn't mean to ignore.  But eh.  It is what it is, and it's kind of cool.</p>
<p>Making this kind of thing somewhat tractable is the fact that tripwires allow comparisons (while nothings don't).  So they are more readily used in this way, despite being "ornery".</p>
<p>I'll keep this around for now.</p>
          <p><a href="https://forum.rebol.info/t/tripwire-in-the-wild/2278/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tripwire-in-the-wild/2278/2</link>
        <pubDate>Tue, 08 Oct 2024 01:54:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2278-2</guid>
        <source url="https://forum.rebol.info/t/tripwire-in-the-wild/2278.rss">TRIPWIRE in The Wild</source>
      </item>
      <item>
        <title>TRIPWIRE in The Wild</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>If you access an unset variable, you don't get a lot of information back:</p>
<pre><code>&gt;&gt; state: ~

&gt;&gt; state
** Script Error: state is ~ antiform
** See ^(...) and GET/ANY
</code></pre>
<p>But with <strong><a href="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170">antiform tags</a></strong>, you can embed a message into the unset variable:</p>
<pre><code>&gt;&gt; state: ~&lt;INITIALIZE-STATE hasn't been called yet&gt;~

&gt;&gt; state
** Script Error: state is ~&lt;INITIALIZE-STATE hasn't been called yet&gt;~ antiform
** See ^(...) and GET/ANY
</code></pre>
<p>This new concept is called a <strong>TRIPWIRE</strong>.</p>
<p>DEFAULT reacts to it, considering the variable to be "vacant"</p>
<pre><code>&gt;&gt; vacancy? get/any $state
== ~okay~  ; anti

&gt;&gt; state: default [10 + 20]
== 30

&gt;&gt; state
== 30
</code></pre>
<h2>
<a name="can-be-better-than-a-meandering-comment-1" class="anchor" href="https://forum.rebol.info#can-be-better-than-a-meandering-comment-1"></a>Can Be Better Than A Meandering Comment!</h2>
<p>A comment won't direct people to the relevant issue at runtime.  But a well-chosen tripwire can.</p>
<p>Compare:</p>
<pre><code>; !!! UPARSE is not available in SYS because it is higher level.  We hack it
; up so that when %uparse.r runs it pokes itself into sys.util/parse
;
parse: ~
</code></pre>
<p>With:</p>
<pre><code>parse: ~&lt;higher-level %uparse.r hasn't set SYS.UTIL/PARSE yet&gt;~
</code></pre>
<p>Much better!  Gives you the information you need, when you need it!</p>
<p><em>(Note: I was inspired to this concept by a style of usage <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> had in his scripts, using TAG!s to provide guidance for what was supposed to be filled into certain slots.  I just wanted to give that some teeth, to know that the variable was conceptually unset.)</em></p>
          <p><a href="https://forum.rebol.info/t/tripwire-in-the-wild/2278/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tripwire-in-the-wild/2278/1</link>
        <pubDate>Sun, 15 Sep 2024 07:46:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2278-1</guid>
        <source url="https://forum.rebol.info/t/tripwire-in-the-wild/2278.rss">TRIPWIRE in The Wild</source>
      </item>
  </channel>
</rss>
