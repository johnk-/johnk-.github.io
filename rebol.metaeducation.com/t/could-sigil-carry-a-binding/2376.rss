<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Could SIGIL! Carry A Binding?</title>
    <link>https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376</link>
    <description>[quote=&quot;hostilefork, post:2, topic:2294&quot;]
```
&gt;&gt; code: compose2 @() &#39;[x + (var)]
== [x + y]  ; worked even though we passed in an unbound block!
```
[/quote]

So I&#39;m rigging it up that COMPOSE2 works with SIGIL!:

    &gt;&gt; var: &#39;x

    &gt;&gt; compose2 &#39;$ [x + $var]
    == [x + y]

I&#39;m assuming that since no lists are in the pattern, it would leave lists alone:

    &gt;&gt; compose2 &#39;$ [x + $var $(1 + 2)]
    == [x + y $(1 + 2)]

Otherwise you&#39;d get some kind of meaningless mixing and matching:

    &gt;&gt; compose2 &#39;@ &#39;[[some stuff] @[spread [a b]] (other stuff) @(reverse [c d])]
    == [[some stuff] a b (other stuff) [d c]]

## But What If You Want To Use The Pattern&#39;s Context?

The above works great when you want to use the binding of the template block.  But how would you say you wanted to use the binding of the calling environment?

So let&#39;s say the block is quoted, and unbound.  This isn&#39;t legal today:

    &gt;&gt; var: &#39;x

    &gt;&gt; compose2 @$ &#39;[x + $var]
    == [x + y]   ; idea is to work even though we passed an unbound block

There&#39;s no THE-SIGIL! and no binding on sigils, so it won&#39;t work.  BUT I WANT IT!  :pouting_cat: 

## Could SIGIL!s Carry a Context, like an ANY-LIST Can?

Basically this means getting THE-SIGIL!, VAR-SIGIL!, META-SIGIL!, etc.

    &gt;&gt; $$
    == $  ; bound

    &gt;&gt; @@
    == @@  ; bound

This would make SIGIL! more similar to WORD!.  But there&#39;s a catch... today&#39;s WORD! doesn&#39;t retain the environment it&#39;s bound to the way lists do, it binds specifically to the thing it looks up at the moment of binding.  Hence if you bind in an environment where a variable isn&#39;t defined the word remains unbound even if the symbol becomes defined later in that environment.

So to be useful here, the SIGIL! would have to be like a BLOCK! or other list, and retain the entire environment.  Hence not like today&#39;s words.

Maybe just being a magical outlier is all right.  It is called &quot;SIGIL&quot; after all:

&gt; A **sigil** (/ˈsɪdʒɪl/) is a type of symbol used in magic. The term usually refers to a pictorial signature of a deity or spirit (such as an angel or demon. In modern usage, especially in the context of chaos magic, a sigil refers to a symbolic representation of the practitioner&#39;s desired outcome.

![Heptameron_magic_circle|518x500, 50%](upload://4jSCSNo1ndqkp8DwwHr3yrMrxEC.jpeg)</description>
    
    <lastBuildDate>Sat, 22 Mar 2025 15:42:21 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Could SIGIL! Carry A Binding?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2376">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>(Not sure how happy I am with bindings on sigils, though. That feels like it may open up the same can of worms as bindings on strings do.)</p>
</blockquote>
</aside>
<p>It wouldn't be the case that sigils would get bound too often, since they have evaluator behavior which is not driven by binding.</p>
<pre><code>&gt;&gt; @ x
== x  ; bound

&gt;&gt; $ first [x]
== x  ; bound
</code></pre>
<p>In neither case did the @ or the $ become bound.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2376">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But there's a catch... today's WORD! doesn't retain the environment it's bound to the way lists do, it binds specifically to the thing it looks up at the moment of binding. Hence if you bind in an environment where a variable isn't defined the word remains unbound even if the symbol becomes defined later in that environment.</p>
</blockquote>
</aside>
<p>This is actually the big question, because I'm starting to think that words should retain the whole binding environment the way lists do.  In which case it would be no particular problem to let SIGIL! do that too.</p>
<p>That has some unfortunate-seeming implications for performance--that words don't have a way to memorize the exact thing they look up to, to quickly fetch that same value every time.</p>
<p>But living in a mostly-unbound world, that's kind of already the case.  I think it is probably a change that has to be made.</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2376">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Basically this means getting THE-SIGIL!, VAR-SIGIL!, META-SIGIL!, etc.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; $
== $  ; bound

&gt;&gt; @@
== @@  ; bound
</code></pre>
</blockquote>
</aside>
<p>I'll point out that this would mean killing the SIGIL! for quoted and quasiforms, as <strong><code>@'</code></strong> and <strong><code>$~~</code></strong> are clearly illegal-looking things.</p>
<p>This is probably for the best.  Those sigils don't make sense.</p>
<pre><code>&gt;&gt; quotes of first [']
== 0

&gt;&gt; sigil of first [~abc~]
== ~~
</code></pre>
<p>Only non-quoted, non-quasi (and non-antiform types) should respond to SIGIL OF.</p>
<p>However, <a href="https://rebol.metaeducation.com/t/canonical-list-of-illegal-but-interesting-tokens/2378">this means these patterns may be repurposed...</a>!</p>
          <p><a href="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376/4</link>
        <pubDate>Sat, 22 Mar 2025 14:27:04 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2376-4</guid>
        <source url="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376.rss">Could SIGIL! Carry A Binding?</source>
      </item>
      <item>
        <title>Could SIGIL! Carry A Binding?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>4 posts were split to a new topic: <a href="https://rebol.metaeducation.com/t/worrying-over-the-arity-of-compose/2377">Worrying Over the Arity Of Compose</a></p>
          <p><a href="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376/2</link>
        <pubDate>Sat, 22 Mar 2025 13:53:43 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2376-2</guid>
        <source url="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376.rss">Could SIGIL! Carry A Binding?</source>
      </item>
      <item>
        <title>Could SIGIL! Carry A Binding?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="2294">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/envelop-and-compose-by-example/2294/2">ENVELOP (and COMPOSE!) By Example</a></div>
<blockquote>
<p><a href="https://rebol.metaeducation.com/t/envelop-and-compose-by-example/2294">This is all quite cool.</a> Agree, <a class="mention" href="https://rebol.metaeducation.com/u/bradrn">@bradrn</a>?</p>
</blockquote>
</aside>
<p>Yep, this looks good!</p>
<p>(Not sure how happy I am with bindings on sigils, though. That feels like it may open up the same can of worms as bindings on strings do.)</p>
          <p><a href="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376/3</link>
        <pubDate>Tue, 24 Sep 2024 01:14:35 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2376-3</guid>
        <source url="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376.rss">Could SIGIL! Carry A Binding?</source>
      </item>
      <item>
        <title>Could SIGIL! Carry A Binding?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2294">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"><a href="https://rebol.metaeducation.com/t/envelop-and-compose-by-example/2294/2">ENVELOP (and COMPOSE!) By Example</a></div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; code: compose2 @() '[x + (var)]
== [x + y]  ; worked even though we passed in an unbound block!
</code></pre>
</blockquote>
</aside>
<p>So I'm rigging it up that COMPOSE2 works with SIGIL!:</p>
<pre><code>&gt;&gt; var: 'x

&gt;&gt; compose2 '$ [x + $var]
== [x + y]
</code></pre>
<p>I'm assuming that since no lists are in the pattern, it would leave lists alone:</p>
<pre><code>&gt;&gt; compose2 '$ [x + $var $(1 + 2)]
== [x + y $(1 + 2)]
</code></pre>
<p>Otherwise you'd get some kind of meaningless mixing and matching:</p>
<pre><code>&gt;&gt; compose2 '@ '[[some stuff] @[spread [a b]] (other stuff) @(reverse [c d])]
== [[some stuff] a b (other stuff) [d c]]
</code></pre>
<h2><a name="p-7762-but-what-if-you-want-to-use-the-patterns-context-1" class="anchor" href="https://rebol.metaeducation.com#p-7762-but-what-if-you-want-to-use-the-patterns-context-1"></a>But What If You Want To Use The Pattern's Context?</h2>
<p>The above works great when you want to use the binding of the template block.  But how would you say you wanted to use the binding of the calling environment?</p>
<p>So let's say the block is quoted, and unbound.  This isn't legal today:</p>
<pre><code>&gt;&gt; var: 'x

&gt;&gt; compose2 @$ '[x + $var]
== [x + y]   ; idea is to work even though we passed an unbound block
</code></pre>
<p>There's no THE-SIGIL! and no binding on sigils, so it won't work.  BUT I WANT IT!  <img src="https://rebol.metaeducation.com/images/emoji/twitter/pouting_cat.png?v=14" title=":pouting_cat:" class="emoji" alt=":pouting_cat:" loading="lazy" width="20" height="20"></p>
<h2><a name="p-7762-could-sigils-carry-a-context-like-an-any-list-can-2" class="anchor" href="https://rebol.metaeducation.com#p-7762-could-sigils-carry-a-context-like-an-any-list-can-2"></a>Could SIGIL!s Carry a Context, like an ANY-LIST Can?</h2>
<p>Basically this means getting THE-SIGIL!, VAR-SIGIL!, META-SIGIL!, etc.</p>
<pre><code>&gt;&gt; $$
== $  ; bound

&gt;&gt; @@
== @@  ; bound
</code></pre>
<p>This would make SIGIL! more similar to WORD!.  But there's a catch... today's WORD! doesn't retain the environment it's bound to the way lists do, it binds specifically to the thing it looks up at the moment of binding.  Hence if you bind in an environment where a variable isn't defined the word remains unbound even if the symbol becomes defined later in that environment.</p>
<p>So to be useful here, the SIGIL! would have to be like a BLOCK! or other list, and retain the entire environment.  Hence not like today's words.</p>
<p>Maybe just being a magical outlier is all right.  It is called "SIGIL" after all:</p>
<blockquote>
<p>A <strong>sigil</strong> (/ˈsɪdʒɪl/) is a type of symbol used in magic. The term usually refers to a pictorial signature of a deity or spirit (such as an angel or demon. In modern usage, especially in the context of chaos magic, a sigil refers to a symbolic representation of the practitioner's desired outcome.</p>
</blockquote>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://rebol.metaeducation.com/uploads/default/original/1X/1e48053a72b28f541530f40fb06fa17973ef7122.jpeg" data-download-href="https://rebol.metaeducation.com/uploads/default/1e48053a72b28f541530f40fb06fa17973ef7122" title="Heptameron_magic_circle"><img src="https://rebol.metaeducation.com/uploads/default/optimized/1X/1e48053a72b28f541530f40fb06fa17973ef7122_2_259x250.jpeg" alt="Heptameron_magic_circle" data-base62-sha1="4jSCSNo1ndqkp8DwwHr3yrMrxEC" width="259" height="250" srcset="https://rebol.metaeducation.com/uploads/default/optimized/1X/1e48053a72b28f541530f40fb06fa17973ef7122_2_259x250.jpeg, https://rebol.metaeducation.com/uploads/default/optimized/1X/1e48053a72b28f541530f40fb06fa17973ef7122_2_388x375.jpeg 1.5x, https://rebol.metaeducation.com/uploads/default/optimized/1X/1e48053a72b28f541530f40fb06fa17973ef7122_2_518x500.jpeg 2x" data-dominant-color="D3D3D3"></a></div><p></p>
          <p><a href="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376/1</link>
        <pubDate>Mon, 23 Sep 2024 16:47:29 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2376-1</guid>
        <source url="https://rebol.metaeducation.com/t/could-sigil-carry-a-binding/2376.rss">Could SIGIL! Carry A Binding?</source>
      </item>
  </channel>
</rss>
