<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should SET-WORD!s Propagate Undecayed Packs?</title>
    <link>https://rebol.metaeducation.com/t/should-set-word-s-propagate-undecayed-packs/2178</link>
    <description>Packs are antiform blocks, which decay if not specifically handled.

    &gt;&gt; pack [1 2]
    == \~[&#39;1 &#39;2]~\  ; antiform (pack!)

    &gt;&gt; a: pack [1 2]
    == 1

    &gt;&gt; a
    == 1

From time to time, I&#39;ve wondered if there&#39;s a good reason why the plain SET-WORD! shouldn&#39;t propagate the pack:

    &gt;&gt; a: pack [1 2]
    == \~[&#39;1 &#39;2]~\  ; antiform (pack!)

    &gt;&gt; a
    == 1

One rationale is that intuitively, **a:** should be a synonym for **[a]:**, e.g. &quot;unpack one item&quot; is implicit.

But that just bumps the question to the next one we might ask: why doesn&#39;t a multi-return without a &quot;circled&quot; result just evaluate to the whole pack?

It looks to make some sense at first, it allows you to chain indefinitely:

    &gt;&gt; [a b]: [c d]: pack [1 2]
    == \~[&#39;1 &#39;2]~\  ; antiform (pack!)

    &gt;&gt; a
    == 1

    &gt;&gt; b
    == 2

    &gt;&gt; c
    == 1

    &gt;&gt; d
    == 2

Though it feels a little bit unsettling when you drop it down:

    &gt;&gt; [a b]: [c]: pack [1 2]
    == \~[&#39;1 &#39;2]~\  ; antiform (pack!)

    &gt;&gt; a
    == 1

    &gt;&gt; b
    == 2

    &gt;&gt; c
    == 1

But we could argue that if you&#39;re bothered, then you use circling.  Note in the below example you&#39;d have to use `:b` in order to indicate you were okay with unpacking fewer values than available.

    &gt;&gt; [a :b]: [{c}]: pack [1 2]
    == 1

    &gt;&gt; a
    == 1

    &gt;&gt; b
    == \~null~\  ; antiform

    &gt;&gt; c
    == 1

We could then make a choice if **a:** was a synonym for **[a]:** or for **[{a}]:**

## Most Recent Motivation For Thinking About This

I rewrote [some code in an example](https://rebol.metaeducation.com/t/speed-of-uparse/2177/3?u=hostilefork) from this:

    [^result remainder]: parser input except e -&gt; [
        remainder: input  ; succeed on parser fail but don&#39;t advance input
        return null
    ]
    return ^result  ; return successful parser result

...to this:

    return [{^} remainder]: parser input except [
        remainder: input  ; succeed on parser fail but don&#39;t advance input
        return null
    ]

The idea is that the parser being called has multiple return results... the first is the synthesized value, the second is the amount it advanced.  *(There&#39;s a third result on some parsers of &quot;pending items&quot;, but this OPTIONAL combinator has an &quot;autopipe&quot; which is just bubbling the pending items through in the order of successful parsers called...so the third result is specialized out on its interface and on the parsers it calls.)*

**However, the synthesized value can itself be a pack.**  This means that if we named a variable in the slot where the `^` is, then that pack would be decayed to store in the variable unless we used a ^META result.

So does the act of not-naming and just circling subvert the decay?  Or should the circled result not be decayed even if the variable is?

    &gt;&gt; [{a} b]: pack [pack [1 2] 3]
    == ~[&#39;1 &#39;2]~  ; anti  (or should it be decayed to 1?)

    &gt;&gt; a
    == 1

    &gt;&gt; b
    == 3

It&#39;s a different--but related--question.  It seems it should align with the behavior of plain assignments:

    &gt;&gt; a: pack [1 2]
    == \~[&#39;1 &#39;2]~\  ; antiform  (implied if the above behavior is chosen)

    &gt;&gt; a
    == 1

## Not 100% Certain, But I Think Undecayed Propagation Is Good

I&#39;ll point out that it&#39;s possible to DECAY things pretty easily, but you can&#39;t recover a pack after it has been decayed.

So I&#39;m getting the feeling that it&#39;s probably best to decay the assignments, but propagate the undecayed pack.  It looks like the more general and useful behavior...even if it seems a bit confusing.</description>
    
    <lastBuildDate>Mon, 02 Jun 2025 16:59:51 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/should-set-word-s-propagate-undecayed-packs/2178.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should SET-WORD!s Propagate Undecayed Packs?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Packs are antiform blocks, which decay if not specifically handled.</p>
<pre><code>&gt;&gt; pack [1 2]
== \~['1 '2]~\  ; antiform (pack!)

&gt;&gt; a: pack [1 2]
== 1

&gt;&gt; a
== 1
</code></pre>
<p>From time to time, I've wondered if there's a good reason why the plain SET-WORD! shouldn't propagate the pack:</p>
<pre><code>&gt;&gt; a: pack [1 2]
== \~['1 '2]~\  ; antiform (pack!)

&gt;&gt; a
== 1
</code></pre>
<p>One rationale is that intuitively, <strong>a:</strong> should be a synonym for <strong>[a]:</strong>, e.g. "unpack one item" is implicit.</p>
<p>But that just bumps the question to the next one we might ask: why doesn't a multi-return without a "circled" result just evaluate to the whole pack?</p>
<p>It looks to make some sense at first, it allows you to chain indefinitely:</p>
<pre><code>&gt;&gt; [a b]: [c d]: pack [1 2]
== \~['1 '2]~\  ; antiform (pack!)

&gt;&gt; a
== 1

&gt;&gt; b
== 2

&gt;&gt; c
== 1

&gt;&gt; d
== 2
</code></pre>
<p>Though it feels a little bit unsettling when you drop it down:</p>
<pre><code>&gt;&gt; [a b]: [c]: pack [1 2]
== \~['1 '2]~\  ; antiform (pack!)

&gt;&gt; a
== 1

&gt;&gt; b
== 2

&gt;&gt; c
== 1
</code></pre>
<p>But we could argue that if you're bothered, then you use circling.  Note in the below example you'd have to use <code>:b</code> in order to indicate you were okay with unpacking fewer values than available.</p>
<pre><code>&gt;&gt; [a :b]: [{c}]: pack [1 2]
== 1

&gt;&gt; a
== 1

&gt;&gt; b
== \~null~\  ; antiform

&gt;&gt; c
== 1
</code></pre>
<p>We could then make a choice if <strong>a:</strong> was a synonym for <strong>[a]:</strong> or for <strong>[{a}]:</strong></p>
<h2><a name="p-7278-most-recent-motivation-for-thinking-about-this-1" class="anchor" href="https://rebol.metaeducation.com#p-7278-most-recent-motivation-for-thinking-about-this-1"></a>Most Recent Motivation For Thinking About This</h2>
<p>I rewrote <a href="https://rebol.metaeducation.com/t/speed-of-uparse/2177/3">some code in an example</a> from this:</p>
<pre><code>[^result remainder]: parser input except e -&gt; [
    remainder: input  ; succeed on parser fail but don't advance input
    return null
]
return ^result  ; return successful parser result
</code></pre>
<p>...to this:</p>
<pre><code>return [{^} remainder]: parser input except [
    remainder: input  ; succeed on parser fail but don't advance input
    return null
]
</code></pre>
<p>The idea is that the parser being called has multiple return results... the first is the synthesized value, the second is the amount it advanced.  <em>(There's a third result on some parsers of "pending items", but this OPTIONAL combinator has an "autopipe" which is just bubbling the pending items through in the order of successful parsers called...so the third result is specialized out on its interface and on the parsers it calls.)</em></p>
<p><strong>However, the synthesized value can itself be a pack.</strong>  This means that if we named a variable in the slot where the <code>^</code> is, then that pack would be decayed to store in the variable unless we used a ^META result.</p>
<p>So does the act of not-naming and just circling subvert the decay?  Or should the circled result not be decayed even if the variable is?</p>
<pre><code>&gt;&gt; [{a} b]: pack [pack [1 2] 3]
== ~['1 '2]~  ; anti  (or should it be decayed to 1?)

&gt;&gt; a
== 1

&gt;&gt; b
== 3
</code></pre>
<p>It's a different--but related--question.  It seems it should align with the behavior of plain assignments:</p>
<pre><code>&gt;&gt; a: pack [1 2]
== \~['1 '2]~\  ; antiform  (implied if the above behavior is chosen)

&gt;&gt; a
== 1
</code></pre>
<h2><a name="p-7278-not-100-certain-but-i-think-undecayed-propagation-is-good-2" class="anchor" href="https://rebol.metaeducation.com#p-7278-not-100-certain-but-i-think-undecayed-propagation-is-good-2"></a>Not 100% Certain, But I Think Undecayed Propagation Is Good</h2>
<p>I'll point out that it's possible to DECAY things pretty easily, but you can't recover a pack after it has been decayed.</p>
<p>So I'm getting the feeling that it's probably best to decay the assignments, but propagate the undecayed pack.  It looks like the more general and useful behavior...even if it seems a bit confusing.</p>
          <p><a href="https://rebol.metaeducation.com/t/should-set-word-s-propagate-undecayed-packs/2178/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/should-set-word-s-propagate-undecayed-packs/2178/1</link>
        <pubDate>Fri, 29 Mar 2024 21:22:15 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2178-1</guid>
        <source url="https://rebol.metaeducation.com/t/should-set-word-s-propagate-undecayed-packs/2178.rss">Should SET-WORD!s Propagate Undecayed Packs?</source>
      </item>
  </channel>
</rss>
