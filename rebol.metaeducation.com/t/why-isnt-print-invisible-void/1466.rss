<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</title>
    <link>https://forum.rebol.info/t/why-isnt-print-invisible-void/1466</link>
    <description>&gt; **2022 UPDATE:** Modern thinking in Ren-C is that void states [only vanish in &quot;interstitial&quot; slots](https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582).  They can be recorded in variables, just not be put in blocks:
&gt; 
&gt;        &gt;&gt; x: void
&gt;        ; void
&gt;
&gt; The question of how permissive to be is still open, and at time of writing it does this:
&gt;
&gt;       &gt;&gt; x
&gt;       ; void
&gt;
&gt;       &gt;&gt; 1 + 2 x
&gt;       == 3
&gt;
&gt; This impacted some elements of the discussion, so I edited the post accordingly to bring it up to date.

----

Since PRINT doesn&#39;t have an interesting return value, we might ask what the harm would be in making it invisible, vs give back something that trips up things like ANY and ALL.

But let&#39;s generalize the question to SOME-FUNCTION where the key point is that at the time you write it, you haven&#39;t thought of a meaningful result for it.

## Limiting Interface Flexibility

If at the time of writing a function you know that it doesn&#39;t have a meaningful return value, then making it void--instead of returning a trash value--ties your hands in changing it.

People will start writing things like:

    all [
        ...
        some-function ...  ; user assumes no effect, because invisible
        ...
    ]

But if SOME-FUNCTION had returned a trash value, then they could have gotten the same effect more obviously with:

    all [
        ...
        elide some-function ...
        ...
    ]

This also gives more freedom to change the interface later, if you think of an interesting value to return.  You can progressively add more return types after the fact.  But once people assume you always return void, this trap will happen...you&#39;re locked in forever in a way that was pretty much completely avoidable.

## In PRINT&#39;s Case, a Differentiated NULL Output Has Value

Having a return value from PRINT that is either an ornery value or nothing lets you offer the neat option of returning NULL if the result of the print was nothing.

     &gt;&gt; line: &quot;some text&quot;
     &gt;&gt; (print line) then [print &quot;We had output!&quot;]
     some text
     We had output!

     &gt;&gt; line: null
     &gt;&gt; (print maybe line) then [print &quot;We had output!&quot;]
     ; null

To do this kind of thing requires having an output value that wouldn&#39;t trigger THEN when there is output.  So not null, and not void.  The none isotope works for this.

I might be convinced that how people want to use PRINT is universally enough that they would rather it be invisible.  But that would involve a very specific understanding of a very common function...similar to how **elide** and **comment** and **assert** and **--** are known to have no result.

I don&#39;t think the average &quot;no meaningful result&quot; function fits in this category, and I&#39;d say I&#39;m fairly skeptical if PRINT belongs in it.

## I Think &quot;Void&quot; Functions Should Be Used Sparingly

I think the feature should be *discoverable*, because how it&#39;s done is unique...and we are giving it a more normal name (&quot;void function&quot;)

And it&#39;s all right that these forms of RETURN generate void functions:

    f1: func [x] [return void]
    f2: func [x] [return comment x]
    f3: func [x] [return ()]
    f4: func [x] [return (void)]
    f5: func [x] [return (comment x)]

But this arity-0 return should *not* be a void function:

    f6: func [x] [return]

Instead it should be either an error, or act like **return none** (e.g. `return ~[]~`, an isotopic block representing an empty parameter pack).  While the latter *sounds* neat, it creates problems if people depend on it and start thinking they can throw a plain `return` in on its own line and not bother commenting things out after it... but the return picks it up:

  https://forum.rebol.info/t/line-continuation-and-arity-bugs-thoughts/1965

So it&#39;s something that should not be allowed, or that has mitigation for this &quot;return put on its own line in the middle of code&quot; vulnerability.</description>
    
    <lastBuildDate>Tue, 29 Nov 2022 11:39:39 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1466">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>On a tangential note: I'm not sure why PRINT returns a ~none~ isotope, and wonder if it wouldn't be better to have it be silent like ELIDE?</p>
</blockquote>
</aside>
<p>This is worth revisiting, since <a href="https://forum.rebol.info/t/pure-vs-impure-invisibility-do-we-need-both/1782/3">mechanics have changed significantly with voids</a></p>
<p>Let's pretend PRINT returned void for a second:</p>
<pre><code> &gt;&gt; print "voids are currently shown by the console (good info!)"
 ; void

 &gt;&gt; 1 + 2 print "but they vanish in interstitial slots"
 == 3

&gt;&gt; void? print "Targeting argument, won't vanish"
== ~true~  ; isotope
</code></pre>
<p>If PRINT returned void in its average success case, then an ELSE would treat the void as not having run... same as NULL.  So the distinction wouldn't work.</p>
<pre><code>&gt;&gt; item1: null, item2: null

&gt;&gt; print [maybe item1 maybe item2] else [print "No output!"]
No output!

&gt;&gt; item1: "Something!", item2: null

&gt;&gt; print [maybe item2 maybe item2] else [print "No output!"]
No output!
</code></pre>
<h2>No Console Feedback Desired</h2>
<p>One thing about voids is that you get feedback about them in the console that you don't get with the "none" indicator:</p>
<pre><code>&gt;&gt; print "if this makes void, the console tells you"
; void
</code></pre>
<p>That's kind of annoying.  So we must ask the question: <strong>Why doesn't the console pick the void state--the one that has no reifying value at all--as the true emptiness that it does not print?</strong></p>
<p>That sounds nice in theory.  But in practice, you wind up with this kind of thing:</p>
<pre><code>&gt;&gt; 1 + 2 print "Hi"
Hi
== 3
</code></pre>
<p>You might think you could invent something that erases that product, maybe it's what a vertical bar would do:</p>
<pre><code>&gt;&gt; 1 + 2 | print "Hi"
Hi
</code></pre>
<p>But... how would you write it?  It either returns something (which makes it print out that thing) or it returns void (and has no effect, letting the previous evaluation seep through).</p>
<p><strong>This is kind of the proof case for why the signal to the console to not display a result has to be "a thing".</strong>  If it's not a thing, then the intent can't be expressed persistently.</p>
<p>Now that "none" is simply the <strong>~[]~</strong> isotope, we have a slightly greater justification on why it doesn't print.</p>
          <p><a href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/4</link>
        <pubDate>Thu, 02 Jun 2022 01:28:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1466-4</guid>
        <source url="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466.rss">Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</source>
      </item>
      <item>
        <title>Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>2022 UPDATE:</strong> Modern thinking in Ren-C is that void states <a href="https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582">only vanish in "interstitial" slots</a>.  They can be recorded in variables, just not be put in blocks:</p>
<pre><code>   &gt;&gt; x: void
   ; void
</code></pre>
<p>The question of how permissive to be is still open, and at time of writing it does this:</p>
<pre><code>  &gt;&gt; x
  ; void

  &gt;&gt; 1 + 2 x
  == 3
</code></pre>
<p>This impacted some elements of the discussion, so I edited the post accordingly to bring it up to date.</p>
</blockquote>
<hr>
<p>Since PRINT doesn't have an interesting return value, we might ask what the harm would be in making it invisible, vs give back something that trips up things like ANY and ALL.</p>
<p>But let's generalize the question to SOME-FUNCTION where the key point is that at the time you write it, you haven't thought of a meaningful result for it.</p>
<h2>Limiting Interface Flexibility</h2>
<p>If at the time of writing a function you know that it doesn't have a meaningful return value, then making it void--instead of returning a trash value--ties your hands in changing it.</p>
<p>People will start writing things like:</p>
<pre><code>all [
    ...
    some-function ...  ; user assumes no effect, because invisible
    ...
]
</code></pre>
<p>But if SOME-FUNCTION had returned a trash value, then they could have gotten the same effect more obviously with:</p>
<pre><code>all [
    ...
    elide some-function ...
    ...
]
</code></pre>
<p>This also gives more freedom to change the interface later, if you think of an interesting value to return.  You can progressively add more return types after the fact.  But once people assume you always return void, this trap will happen...you're locked in forever in a way that was pretty much completely avoidable.</p>
<h2>In PRINT's Case, a Differentiated NULL Output Has Value</h2>
<p>Having a return value from PRINT that is either an ornery value or nothing lets you offer the neat option of returning NULL if the result of the print was nothing.</p>
<pre><code> &gt;&gt; line: "some text"
 &gt;&gt; (print line) then [print "We had output!"]
 some text
 We had output!

 &gt;&gt; line: null
 &gt;&gt; (print maybe line) then [print "We had output!"]
 ; null
</code></pre>
<p>To do this kind of thing requires having an output value that wouldn't trigger THEN when there is output.  So not null, and not void.  The none isotope works for this.</p>
<p>I might be convinced that how people want to use PRINT is universally enough that they would rather it be invisible.  But that would involve a very specific understanding of a very common function...similar to how <strong>elide</strong> and <strong>comment</strong> and <strong>assert</strong> and <strong>--</strong> are known to have no result.</p>
<p>I don't think the average "no meaningful result" function fits in this category, and I'd say I'm fairly skeptical if PRINT belongs in it.</p>
<h2>I Think "Void" Functions Should Be Used Sparingly</h2>
<p>I think the feature should be <em>discoverable</em>, because how it's done is unique...and we are giving it a more normal name ("void function")</p>
<p>And it's all right that these forms of RETURN generate void functions:</p>
<pre><code>f1: func [x] [return void]
f2: func [x] [return comment x]
f3: func [x] [return ()]
f4: func [x] [return (void)]
f5: func [x] [return (comment x)]
</code></pre>
<p>But this arity-0 return should <em>not</em> be a void function:</p>
<pre><code>f6: func [x] [return]
</code></pre>
<p>Instead it should be either an error, or act like <strong>return none</strong> (e.g. <code>return ~[]~</code>, an isotopic block representing an empty parameter pack).  While the latter <em>sounds</em> neat, it creates problems if people depend on it and start thinking they can throw a plain <code>return</code> in on its own line and not bother commenting things out after it... but the return picks it up:</p>
<p><a href="https://forum.rebol.info/t/line-continuation-and-arity-bugs-thoughts/1965" class="inline-onebox">Line Continuation and Arity Bugs: Thoughts?</a></p>
<p>So it's something that should not be allowed, or that has mitigation for this "return put on its own line in the middle of code" vulnerability.</p>
          <p><a href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/1</link>
        <pubDate>Mon, 18 Jan 2021 01:40:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1466-1</guid>
        <source url="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466.rss">Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</source>
      </item>
      <item>
        <title>Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1466">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm not sure why PRINT returns a ~none~ isotope, and wonder if it wouldn't be better to have it be silent like ELIDE?</p>
</blockquote>
</aside>
<p>The usefulness of the return result is that it isn't always a none (~[]~) isotope, but NULL if nothing--not even a newline--was printed.  This lets you use it with the likes of ELSE.</p>
<pre><code>&gt;&gt; label: null
&gt;&gt; message: null

&gt;&gt; block: compose [((label)) ((message))]
== []  ; if you print this it outputs nothing--not even a newline

&gt;&gt; print block else [
       print "Here you can handle that there was no output."
   ]

&gt;&gt; if didn't print block [
       print "DID and DIDN'T are pure NULL-reactive if you don't like THEN/ELSE"
   ]
</code></pre>
<p><em>(Note: Performance dictates that returning the aggregated printed string itself is probably wasteful, since it is used so infrequently.)</em></p>
<p>Being able to <strong>elide print [...]</strong> covers the case where you want an invisible usage somewhere in the middle of an evaluation, which is nice and general...and not so strange once you get used to using it.</p>
          <p><a href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/3</link>
        <pubDate>Tue, 30 Jun 2020 22:58:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1466-3</guid>
        <source url="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466.rss">Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</source>
      </item>
      <item>
        <title>Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Note: This pertinent question moved from a topic culled by curation.</p>
<p><em>(The topic was "should you be able to assign ~unset~ isotopes via SET-WORD! without getting an error, and the answer is obviously yes in light of new features...so the old conversation was just a jumble of outdated terminology which would confuse anyone finding it.)</em></p>
</blockquote>
<p>On a tangential note: I'm not sure why PRINT returns a ~none~ isotope, and wonder if it wouldn't be better to have it be silent like ELIDE? Would that create havoc if new users did confuse its usage?</p>
          <p><a href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/2</link>
        <pubDate>Mon, 29 Jun 2020 15:03:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1466-2</guid>
        <source url="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466.rss">Why Isn&#39;t PRINT Invisible (&quot;void&quot;)?</source>
      </item>
  </channel>
</rss>
