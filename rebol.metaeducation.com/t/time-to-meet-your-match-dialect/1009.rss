<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Time to Meet Your MATCH... (...dialect)</title>
    <link>https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009</link>
    <description>**MATCH** is a handy tool for testing a value against some basic rules, and passing it through if they match...or evaluating to null if they don&#39;t.

It uses the *&quot;match dialect&quot;*, which is the same thing that typechecking function parameters uses!  

### Datatypes match instances of the type

    &gt;&gt; match [integer! tag!] 1020
    == 1020

    &gt;&gt; match [integer! tag!] &quot;this text value won&#39;t match&quot;
    == ~null~  ; anti

    &gt;&gt; match [integer! tag!] &lt;matches!&gt;
    == &lt;matches!&gt;

### Quoted items match the quoted thing

    &gt;&gt; match [&#39;on &#39;off] second [echo on]
    == on

    &gt;&gt; match [&#39;on &#39;off] first [potato]
    == ~null~  ; anti

This works for quasiforms:

    &gt;&gt; match [&#39;~alpha~ &#39;~[beta gamma]~] second [a ~alpha~ #a]
    == ~alpha~

Multiply-quoted items match the quote level minus one:

    &gt;&gt; match [&#39;&#39;a] first [&#39;&#39;a]
    == ~null~  ; anti

    &gt;&gt; match [&#39;&#39;a] first [&#39;a]
    == &#39;a

 
### Single arity actions that return logic can be used

     &gt;&gt; match odd?/ 304
     == ~null~  ; anti

     &gt;&gt; match lib.even?/ 1020
     == 1020

If they&#39;re inside a block, you don&#39;t need to use a terminal slash to extract them.

     &gt;&gt; match [even? block!] 1020
     == 1020

## MATCH has an automatic erroring form, called ENSURE

If you want a quick and dirty way to typecheck something and pass it through, but error otherwise, use ENSURE.

    &gt;&gt; ensure empty?/ [a b]
    ** Script Error: ...

    &gt;&gt; ensure empty?/ []
    == []

## There&#39;s also TYPECHECK which returns ~null~ or ~okay~

If you just want a yes or no answer, then you can use TYPECHECK

    &gt;&gt; typecheck [integer! tag!] &lt;abc&gt;
    == ~okay~  ; anti

    &gt;&gt; typecheck [integer! tag!] [a b c]
    == ~null~  ; anti

This is useful if you want to test for things like NULL itself, because MATCH gives an error in these cases:

    &gt;&gt; match [~null~ integer!] null
    ** Error: MATCH can&#39;t match null (reserved to mean non-match)

    &gt;&gt; typecheck [~null~ integer!] null
    == ~okay~  ; anti

## The Opposite of MATCH is NON

    &gt;&gt; non integer! &lt;abc&gt;
    == &lt;abc&gt;

    &gt;&gt; non integer! 1020
    == ~null~  ; anti

## The negated analogue of ENSURE is PROHIBIT

    &gt;&gt; prohibit tag! &quot;abc&quot;
    == &quot;abc&quot;

    &gt;&gt; prohibit tag! &lt;abc&gt;
    ** Error: PROHIBIT of TAG! received &lt;abc&gt;</description>
    
    <lastBuildDate>Thu, 23 Sep 2021 01:33:42 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Time to Meet Your MATCH... (...dialect)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>3 posts were split to a new topic: <a href="https://rebol.metaeducation.com/t/quirky-ideas-from-original-match-dialect/2382">Quirky Ideas From Original MATCH Dialect</a></p>
          <p><a href="https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009/3</link>
        <pubDate>Tue, 25 Mar 2025 11:00:09 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1009-3</guid>
        <source url="https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009.rss">Time to Meet Your MATCH... (...dialect)</source>
      </item>
      <item>
        <title>Time to Meet Your MATCH... (...dialect)</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Very cool. Should be muy bueno for simple lexing and tokenizing values of a dialect-- as well as the handling of syntax errors.</p>
          <p><a href="https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009/2</link>
        <pubDate>Fri, 11 Jan 2019 17:15:23 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1009-2</guid>
        <source url="https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009.rss">Time to Meet Your MATCH... (...dialect)</source>
      </item>
      <item>
        <title>Time to Meet Your MATCH... (...dialect)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>MATCH</strong> is a handy tool for testing a value against some basic rules, and passing it through if they match...or evaluating to null if they don't.</p>
<p>It uses the <em>"match dialect"</em>, which is the same thing that typechecking function parameters uses!</p>
<h3><a name="p-2954-datatypes-match-instances-of-the-type-1" class="anchor" href="https://rebol.metaeducation.com#p-2954-datatypes-match-instances-of-the-type-1"></a>Datatypes match instances of the type</h3>
<pre><code>&gt;&gt; match [integer! tag!] 1020
== 1020

&gt;&gt; match [integer! tag!] "this text value won't match"
== ~null~  ; anti

&gt;&gt; match [integer! tag!] &lt;matches!&gt;
== &lt;matches!&gt;
</code></pre>
<h3><a name="p-2954-quoted-items-match-the-quoted-thing-2" class="anchor" href="https://rebol.metaeducation.com#p-2954-quoted-items-match-the-quoted-thing-2"></a>Quoted items match the quoted thing</h3>
<pre><code>&gt;&gt; match ['on 'off] second [echo on]
== on

&gt;&gt; match ['on 'off] first [potato]
== ~null~  ; anti
</code></pre>
<p>This works for quasiforms:</p>
<pre><code>&gt;&gt; match ['~alpha~ '~[beta gamma]~] second [a ~alpha~ #a]
== ~alpha~
</code></pre>
<p>Multiply-quoted items match the quote level minus one:</p>
<pre><code>&gt;&gt; match [''a] first [''a]
== ~null~  ; anti

&gt;&gt; match [''a] first ['a]
== 'a
</code></pre>
<h3><a name="p-2954-single-arity-actions-that-return-logic-can-be-used-3" class="anchor" href="https://rebol.metaeducation.com#p-2954-single-arity-actions-that-return-logic-can-be-used-3"></a>Single arity actions that return logic can be used</h3>
<pre><code> &gt;&gt; match odd?/ 304
 == ~null~  ; anti

 &gt;&gt; match lib.even?/ 1020
 == 1020
</code></pre>
<p>If they're inside a block, you don't need to use a terminal slash to extract them.</p>
<pre><code> &gt;&gt; match [even? block!] 1020
 == 1020
</code></pre>
<h2><a name="p-2954-match-has-an-automatic-erroring-form-called-ensure-4" class="anchor" href="https://rebol.metaeducation.com#p-2954-match-has-an-automatic-erroring-form-called-ensure-4"></a>MATCH has an automatic erroring form, called ENSURE</h2>
<p>If you want a quick and dirty way to typecheck something and pass it through, but error otherwise, use ENSURE.</p>
<pre><code>&gt;&gt; ensure empty?/ [a b]
** Script Error: ...

&gt;&gt; ensure empty?/ []
== []
</code></pre>
<h2><a name="p-2954-theres-also-typecheck-which-returns-null-or-okay-5" class="anchor" href="https://rebol.metaeducation.com#p-2954-theres-also-typecheck-which-returns-null-or-okay-5"></a>There's also TYPECHECK which returns ~null~ or ~okay~</h2>
<p>If you just want a yes or no answer, then you can use TYPECHECK</p>
<pre><code>&gt;&gt; typecheck [integer! tag!] &lt;abc&gt;
== ~okay~  ; anti

&gt;&gt; typecheck [integer! tag!] [a b c]
== ~null~  ; anti
</code></pre>
<p>This is useful if you want to test for things like NULL itself, because MATCH gives an error in these cases:</p>
<pre><code>&gt;&gt; match [~null~ integer!] null
** Error: MATCH can't match null (reserved to mean non-match)

&gt;&gt; typecheck [~null~ integer!] null
== ~okay~  ; anti
</code></pre>
<h2><a name="p-2954-the-opposite-of-match-is-non-6" class="anchor" href="https://rebol.metaeducation.com#p-2954-the-opposite-of-match-is-non-6"></a>The Opposite of MATCH is NON</h2>
<pre><code>&gt;&gt; non integer! &lt;abc&gt;
== &lt;abc&gt;

&gt;&gt; non integer! 1020
== ~null~  ; anti
</code></pre>
<h2><a name="p-2954-the-negated-analogue-of-ensure-is-prohibit-7" class="anchor" href="https://rebol.metaeducation.com#p-2954-the-negated-analogue-of-ensure-is-prohibit-7"></a>The negated analogue of ENSURE is PROHIBIT</h2>
<pre><code>&gt;&gt; prohibit tag! "abc"
== "abc"

&gt;&gt; prohibit tag! &lt;abc&gt;
** Error: PROHIBIT of TAG! received &lt;abc&gt;
</code></pre>
          <p><a href="https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009/1</link>
        <pubDate>Fri, 11 Jan 2019 08:59:24 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-1009-1</guid>
        <source url="https://rebol.metaeducation.com/t/time-to-meet-your-match-dialect/1009.rss">Time to Meet Your MATCH... (...dialect)</source>
      </item>
  </channel>
</rss>
