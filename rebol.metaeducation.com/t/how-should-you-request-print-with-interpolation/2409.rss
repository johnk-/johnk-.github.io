<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How Should You Request PRINT With Interpolation?</title>
    <link>https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409</link>
    <description>So it&#39;s been settled, I think, that COMPOSE is allowed to use the context of its callsite.

This makes it suitable for string interpolation: even though strings don&#39;t have bindings, COMPOSE can just use any variables visible to its frame:

    &gt;&gt; num: 1000

    &gt;&gt; print compose &quot;Number is (num + 20), so there.&quot;
    Number is 1020, so there.

It&#39;s very useful, and even this trivial case shows a benefit of being able to put the comma right up against the number if you want to.  Traditionally that&#39;s hard to do as PRINT typically adds spaces around everything.  So you have to do something like this:

    &gt;&gt; print unspaced [&quot;Number is&quot; _ num &quot;, so there.&quot;]
    Number is 10, so there.

Wacky experiments of the past tried to make it nicer by interpreting BLOCK! inside the PRINT&#39;s block as grouping things tightly:

    &gt;&gt; print [&quot;Number is&quot; [num &quot;,&quot;] &quot;so there.&quot;]
    Number is 10, so there.

But that&#39;s lousy compared to interpolation.

Can we do better than PRINT COMPOSE for how you request interpolation?

## PRINT STRING Interpolates, PRINT [STRING] Does Not?

We *could* make it so that PRINT presumes you want interpolation if you pass it a string:

    &gt;&gt; num: 10

    &gt;&gt; print &quot;Number is (num), so there.&quot;
    Number is 10, so there.

Then we could say that if you don&#39;t want that, you can put the string in a block:

    &gt;&gt; print [&quot;When using a block, (...) would not interpolate.&quot;]
    When using a block, (...) would not interpolate.

There&#39;s another option to pass PRINT an `@var`, and if you did then that would suppress interpolation as well.

    &gt;&gt; str: &quot;Number is (num), so there.&quot;

    &gt;&gt; print str
    Number is 10, so there.

    &gt;&gt; print [str]
    Number is {{num}}, so there.
    
    &gt;&gt; print @str
    Number is {{num}}, so there.

## Other Names...?

This could be a different word like **`echo`** or **`say`** or something like that, though I&#39;m not crazy about either of those.

## A Really Brief Operator?

    print op &quot;Number is {{num}}, so there.&quot;

But I don&#39;t know there&#39;s anything on the [list of short words](https://rebol.metaeducation.com/t/tapping-the-untapped-potential-of-short-words/395) that would make the cut for &quot;very short way to ask for COMPOSE&quot;

## Different String Type... e.g. TAG! ?

    &gt;&gt; print &lt;Number is (num), so there.&gt;
    == Number is 10, so there.

TAG! doesn&#39;t seem completely crazy, though I have other ideas for what TAG! means inside of PRINT as a formatting instruction.

Out of all these suggestions I probably like the TAG! one the best, so far.</description>
    
    <lastBuildDate>Sat, 12 Apr 2025 15:38:42 +0000</lastBuildDate>
    <category>Console</category>
    <atom:link href="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How Should You Request PRINT With Interpolation?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2409">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<h2>Different String Type... e.g. TAG! ?</h2>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; print &lt;Number is (num), so there.&gt;
== Number is 10, so there.
</code></pre>
</blockquote>
</aside>
<p>In the "radical ideas" category...</p>
<p>We have TEXT! with hyphens, as <strong><code>-{...}-</code></strong> or <strong><code>--{...}--</code></strong> etc. even though <code>{...}</code> means something else.</p>
<p>TAG! is headed toward using <strong><code>-&lt;...&gt;-</code></strong> and <strong><code>--&lt;...&gt;--</code></strong> etc. as a supplement to <code>&lt;...&gt;</code> (and possibly required for multi-line tag)</p>
<p>As of yet, there's no meaning for <strong><code>-(...)-</code></strong> or <strong><code>--(...)--</code></strong> OR <strong><code>-[...]-</code></strong> or <strong><code>--[...]--</code></strong> but it seems to me the most sensible thing would be if it they were string types.</p>
<p><em>What if it we had a string type that evaluated the groups in it as an interpolation?</em></p>
<pre><code>&gt;&gt; -(What about (1000 + 20) this?)-
== "What about 1020 this?"

&gt;&gt; -[Or perhaps (1000 + 20) this?]-
== "Or perhaps 1020 this?"
</code></pre>
<p>The <strong><code>-(...)-</code></strong> version might be vaguely semiotic, that the parentheses give a hint that it is evaluative.  A string type that evaluated using the "block" brackets seems a bit less consistent.</p>
<p>Since it handles things in evaluation, that means you don't have to worry about slipstreaming environmental sensitivity into every construct... PRINT can work with it, FAIL can work with it, etc.</p>
<p>It does have the advantage of being a 2-character asymmetric delimiter, so you can put not just parentheses inside but quotes and such also...</p>
<p>It's a little weird, and if you didn't like it you wouldn't have to use it, but it's a nontrivial savings on typing and clutter:</p>
<pre><code>&gt;&gt; print -(Number is (num), "so there".)-
== Number is 10, "so there".

&gt;&gt; print compose -{Number is (num), "so there".}-
== Number is 10, "so there".
</code></pre>
<p>8 characters.</p>
          <p><a href="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/5">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/5</link>
        <pubDate>Sat, 12 Apr 2025 11:21:28 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2409-5</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409.rss">How Should You Request PRINT With Interpolation?</source>
      </item>
      <item>
        <title>How Should You Request PRINT With Interpolation?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://rebol.metaeducation.com/t/why-parentheses-as-default-compose-escape/2410">Why Parentheses As Default COMPOSE Escape?</a></p>
          <p><a href="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/4">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/4</link>
        <pubDate>Sat, 12 Apr 2025 09:53:45 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2409-4</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409.rss">How Should You Request PRINT With Interpolation?</source>
      </item>
      <item>
        <title>How Should You Request PRINT With Interpolation?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The key is making it very light, and not to break the readability flow.</p>
<p><strong><code>print*</code></strong> might be light enough, with the <code>*</code> warning "I'm doing extra processing on this string" (and "I'm doing implicit environment capture"?)</p>
<pre><code>&gt;&gt; print* "Number is (num)"
Number is 10
</code></pre>
<p>There's also <strong><code>print+</code></strong>... a little less noisy, but maybe too much so... the <code>+</code> blends a bit and looks like a T, right against a T.</p>
<pre><code>&gt;&gt; print+ "Number is (num)"
Number is 10
</code></pre>
<p>I can empathize that there needs to be <em>something</em> there to clue you into the extra work going on.</p>
<p>It may look nicer--but it is less efficient to have to scan the code every time.  (Though investing on making that scan fast helps the whole system.)</p>
          <p><a href="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/3</link>
        <pubDate>Thu, 21 Nov 2024 01:41:19 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2409-3</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409.rss">How Should You Request PRINT With Interpolation?</source>
      </item>
      <item>
        <title>How Should You Request PRINT With Interpolation?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>On PRINT, I tend towards not doing implicit interpolation there. But it could work quite well as a refinement: <code>print:interpolate "Number is (num)"</code>.</p>
          <p><a href="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/2</link>
        <pubDate>Thu, 21 Nov 2024 01:38:47 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2409-2</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409.rss">How Should You Request PRINT With Interpolation?</source>
      </item>
      <item>
        <title>How Should You Request PRINT With Interpolation?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So it's been settled, I think, that COMPOSE is allowed to use the context of its callsite.</p>
<p>This makes it suitable for string interpolation: even though strings don't have bindings, COMPOSE can just use any variables visible to its frame:</p>
<pre><code>&gt;&gt; num: 1000

&gt;&gt; print compose "Number is (num + 20), so there."
Number is 1020, so there.
</code></pre>
<p>It's very useful, and even this trivial case shows a benefit of being able to put the comma right up against the number if you want to.  Traditionally that's hard to do as PRINT typically adds spaces around everything.  So you have to do something like this:</p>
<pre><code>&gt;&gt; print unspaced ["Number is" _ num ", so there."]
Number is 10, so there.
</code></pre>
<p>Wacky experiments of the past tried to make it nicer by interpreting BLOCK! inside the PRINT's block as grouping things tightly:</p>
<pre><code>&gt;&gt; print ["Number is" [num ","] "so there."]
Number is 10, so there.
</code></pre>
<p>But that's lousy compared to interpolation.</p>
<p>Can we do better than PRINT COMPOSE for how you request interpolation?</p>
<h2><a name="p-7918-print-string-interpolates-print-string-does-not-1" class="anchor" href="https://rebol.metaeducation.com#p-7918-print-string-interpolates-print-string-does-not-1"></a>PRINT STRING Interpolates, PRINT [STRING] Does Not?</h2>
<p>We <em>could</em> make it so that PRINT presumes you want interpolation if you pass it a string:</p>
<pre><code>&gt;&gt; num: 10

&gt;&gt; print "Number is (num), so there."
Number is 10, so there.
</code></pre>
<p>Then we could say that if you don't want that, you can put the string in a block:</p>
<pre><code>&gt;&gt; print ["When using a block, (...) would not interpolate."]
When using a block, (...) would not interpolate.
</code></pre>
<p>There's another option to pass PRINT an <code>@var</code>, and if you did then that would suppress interpolation as well.</p>
<pre><code>&gt;&gt; str: "Number is (num), so there."

&gt;&gt; print str
Number is 10, so there.

&gt;&gt; print [str]
Number is {{num}}, so there.

&gt;&gt; print @str
Number is {{num}}, so there.
</code></pre>
<h2><a name="p-7918-other-names-2" class="anchor" href="https://rebol.metaeducation.com#p-7918-other-names-2"></a>Other Names...?</h2>
<p>This could be a different word like <strong><code>echo</code></strong> or <strong><code>say</code></strong> or something like that, though I'm not crazy about either of those.</p>
<h2><a name="p-7918-a-really-brief-operator-3" class="anchor" href="https://rebol.metaeducation.com#p-7918-a-really-brief-operator-3"></a>A Really Brief Operator?</h2>
<pre><code>print op "Number is {{num}}, so there."
</code></pre>
<p>But I don't know there's anything on the <a href="https://rebol.metaeducation.com/t/tapping-the-untapped-potential-of-short-words/395">list of short words</a> that would make the cut for "very short way to ask for COMPOSE"</p>
<h2><a name="p-7918-different-string-type-eg-tag-4" class="anchor" href="https://rebol.metaeducation.com#p-7918-different-string-type-eg-tag-4"></a>Different String Type... e.g. TAG! ?</h2>
<pre><code>&gt;&gt; print &lt;Number is (num), so there.&gt;
== Number is 10, so there.
</code></pre>
<p>TAG! doesn't seem completely crazy, though I have other ideas for what TAG! means inside of PRINT as a formatting instruction.</p>
<p>Out of all these suggestions I probably like the TAG! one the best, so far.</p>
          <p><a href="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409/1</link>
        <pubDate>Wed, 20 Nov 2024 20:17:37 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2409-1</guid>
        <source url="https://rebol.metaeducation.com/t/how-should-you-request-print-with-interpolation/2409.rss">How Should You Request PRINT With Interpolation?</source>
      </item>
  </channel>
</rss>
