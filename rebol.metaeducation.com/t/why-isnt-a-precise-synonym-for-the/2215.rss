<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why @ Isn&#39;t A Precise Synonym For THE</title>
    <link>https://rebol.metaeducation.com/t/why-isnt-a-precise-synonym-for-the/2215</link>
    <description>The SIGIL! @ has non-overrideable behavior in the evaluator.  It acts like THE (Ren-C&#39;s parallel to Redbol&#39;s QUOTE)

    &gt;&gt; @ foo
    == foo

    &gt;&gt; @ (1 + 2)
    == (1 + 2)

    &gt;&gt; the foo
    == foo

    &gt;&gt; the (1 + 2)
    == (1 + 2)

But it does something a normal function can&#39;t...which is to effectively put antiforms in suspended animation in the API.

If it worked in the main language, it would be like this:

    &gt;&gt; eval impossible-compose [@ (&#39;~null~)]
    == ~null~

    &gt;&gt; eval impossible-compose [@ (null)]
    == ~null~  ; anti

You might imagine the @ operator doing a little cheat, by turning quasiform null into antiform null.  Then IMPOSSIBLE-COMPOSE could just do this:

    &gt;&gt; block: impossible-compose [@ (null)]
    == [@ ~null~]

    &gt;&gt; eval block
    == ~null~  ; anti

For a time this is exactly what it did.  But then...how would you literally get a quasiform null?  It can&#39;t do both.

Today, using some magic in the evaluator, this API code works:

    Value* result1 = rebValue(&quot;eval [@&quot;, nullptr, &quot;]);
    assert(result1 == nullptr);

    Value* result2 = rebValue(&quot;eval [@ ~null~&quot;]);
    rebElide(&quot;assert [&#39;~null~ = first [&quot;, result2, &quot;]]&quot;);
 
It depends on @ not being overrideable and always using the special evaluator magic that lets this work, when you can&#39;t do it inside Rebol.

## Why Let The API Do Something The Language Can&#39;t?

Because quite simply... **rebQ(thing)** in the API is uglier than **`&#39;thing`** which you can do if you&#39;re in the language.

And which would you rather read?

    Value* result1 = rebValue(&quot;eval [&quot;, rebQ(nullptr), &quot;]);

    Value* result1 = rebValue(&quot;eval [@&quot;, nullptr, &quot;]);

 The second is also faster.

Anyway, there are other ways of doing it that don&#39;t use a literalizing operator.  But here, a literalizing operator is what we generally want.  We just want it to reconstruct antiforms, and a hack lets us do it.

## Is This Dangerous?

The hack has the slightly undesirable property that if you asked for the API code you are running as a block, you couldn&#39;t get a legitimate block out of it.

So if you were stepping in a debugger or something, there&#39;s an impossible situation in play... something that&#39;s not a legal array element is sitting in a slot where the antiform is.  And when the evaluator hits that thing it will almost always give an API error saying &quot;you can&#39;t do that&quot;.

So this would fail:

    rebElide(&quot;block: [@&quot;, nullptr, &quot;]&quot;)

There&#39;s no evaluation going on inside that block here, so no exception.  You can&#39;t put antiforms in blocks and receive that block as a normal value.

But as long as it is in an evaluative context immediately after @, then the action is to reconstitute the antiform as an evaluative product.

A debugger would have to have special awareness of this if it were to show you the array, and never let it leak out from the API feed.  If you copied it out you would have to get a warning that the antiforms had all been converted to quasiforms and the code wouldn&#39;t work.

My belief is that this is worth it.  I couldn&#39;t justify it (or even figure out how it would be done) when @ was just running an ordinary function, because it would create a crazy parameter convention exception, and leak the mechanic to places it should never be seen.  But this isolates it to where it&#39;s a built-in evaluator capability that you mostly don&#39;t need to know how it works.</description>
    
    <lastBuildDate>Sat, 24 Aug 2024 07:32:16 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://rebol.metaeducation.com/t/why-isnt-a-precise-synonym-for-the/2215.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why @ Isn&#39;t A Precise Synonym For THE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2215">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><code>Value* result1 = rebValue("eval [@", nullptr, "]);</code></p>
</blockquote>
</aside>
<p>Having noticed that <a href="https://rebol.metaeducation.com/t/just-the-apostrophe-sigil/2213">@ will bind what it gets</a>, and that apostrophe is the operator for getting things not bound, I hope binding is what is usually desired.</p>
<p>Because apostrophe is not going to work very well here.</p>
<pre><code>Value* result1 = rebValue("eval ['", nullptr, "]);
</code></pre>
<p>Maybe a good syntax highlighter could help you with that.  :-/</p>
<p>Or...I guess you could throw a space in there to make it clearer:</p>
<pre><code>Value* result1 = rebValue("eval [' ", nullptr, "]);
</code></pre>
<p>For whatever it is worth, <strong><code>@</code></strong> has been binding in Pure Virtual Binding II and all the API code is working.  In fact it had to bind for anything to work, when I was wondering if it should or not.</p>
<p>So this hopefully shouldn't be a problem.</p>
          <p><a href="https://rebol.metaeducation.com/t/why-isnt-a-precise-synonym-for-the/2215/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-isnt-a-precise-synonym-for-the/2215/2</link>
        <pubDate>Sat, 24 Aug 2024 07:32:16 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2215-2</guid>
        <source url="https://rebol.metaeducation.com/t/why-isnt-a-precise-synonym-for-the/2215.rss">Why @ Isn&#39;t A Precise Synonym For THE</source>
      </item>
      <item>
        <title>Why @ Isn&#39;t A Precise Synonym For THE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The SIGIL! @ has non-overrideable behavior in the evaluator.  It acts like THE (Ren-C's parallel to Redbol's QUOTE)</p>
<pre><code>&gt;&gt; @ foo
== foo

&gt;&gt; @ (1 + 2)
== (1 + 2)

&gt;&gt; the foo
== foo

&gt;&gt; the (1 + 2)
== (1 + 2)
</code></pre>
<p>But it does something a normal function can't...which is to effectively put antiforms in suspended animation in the API.</p>
<p>If it worked in the main language, it would be like this:</p>
<pre><code>&gt;&gt; eval impossible-compose [@ ('~null~)]
== ~null~

&gt;&gt; eval impossible-compose [@ (null)]
== ~null~  ; anti
</code></pre>
<p>You might imagine the @ operator doing a little cheat, by turning quasiform null into antiform null.  Then IMPOSSIBLE-COMPOSE could just do this:</p>
<pre><code>&gt;&gt; block: impossible-compose [@ (null)]
== [@ ~null~]

&gt;&gt; eval block
== ~null~  ; anti
</code></pre>
<p>For a time this is exactly what it did.  But then...how would you literally get a quasiform null?  It can't do both.</p>
<p>Today, using some magic in the evaluator, this API code works:</p>
<pre><code>Value* result1 = rebValue("eval [@", nullptr, "]);
assert(result1 == nullptr);

Value* result2 = rebValue("eval [@ ~null~"]);
rebElide("assert ['~null~ = first [", result2, "]]");
</code></pre>
<p>It depends on @ not being overrideable and always using the special evaluator magic that lets this work, when you can't do it inside Rebol.</p>
<h2><a name="p-7375-why-let-the-api-do-something-the-language-cant-1" class="anchor" href="https://rebol.metaeducation.com#p-7375-why-let-the-api-do-something-the-language-cant-1"></a>Why Let The API Do Something The Language Can't?</h2>
<p>Because quite simply... <strong>rebQ(thing)</strong> in the API is uglier than <strong><code>'thing</code></strong> which you can do if you're in the language.</p>
<p>And which would you rather read?</p>
<pre><code>Value* result1 = rebValue("eval [", rebQ(nullptr), "]);

Value* result1 = rebValue("eval [@", nullptr, "]);
</code></pre>
<p>The second is also faster.</p>
<p>Anyway, there are other ways of doing it that don't use a literalizing operator.  But here, a literalizing operator is what we generally want.  We just want it to reconstruct antiforms, and a hack lets us do it.</p>
<h2><a name="p-7375-is-this-dangerous-2" class="anchor" href="https://rebol.metaeducation.com#p-7375-is-this-dangerous-2"></a>Is This Dangerous?</h2>
<p>The hack has the slightly undesirable property that if you asked for the API code you are running as a block, you couldn't get a legitimate block out of it.</p>
<p>So if you were stepping in a debugger or something, there's an impossible situation in play... something that's not a legal array element is sitting in a slot where the antiform is.  And when the evaluator hits that thing it will almost always give an API error saying "you can't do that".</p>
<p>So this would fail:</p>
<pre><code>rebElide("block: [@", nullptr, "]")
</code></pre>
<p>There's no evaluation going on inside that block here, so no exception.  You can't put antiforms in blocks and receive that block as a normal value.</p>
<p>But as long as it is in an evaluative context immediately after @, then the action is to reconstitute the antiform as an evaluative product.</p>
<p>A debugger would have to have special awareness of this if it were to show you the array, and never let it leak out from the API feed.  If you copied it out you would have to get a warning that the antiforms had all been converted to quasiforms and the code wouldn't work.</p>
<p>My belief is that this is worth it.  I couldn't justify it (or even figure out how it would be done) when @ was just running an ordinary function, because it would create a crazy parameter convention exception, and leak the mechanic to places it should never be seen.  But this isolates it to where it's a built-in evaluator capability that you mostly don't need to know how it works.</p>
          <p><a href="https://rebol.metaeducation.com/t/why-isnt-a-precise-synonym-for-the/2215/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/why-isnt-a-precise-synonym-for-the/2215/1</link>
        <pubDate>Sat, 24 Aug 2024 07:07:09 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2215-1</guid>
        <source url="https://rebol.metaeducation.com/t/why-isnt-a-precise-synonym-for-the/2215.rss">Why @ Isn&#39;t A Precise Synonym For THE</source>
      </item>
  </channel>
</rss>
