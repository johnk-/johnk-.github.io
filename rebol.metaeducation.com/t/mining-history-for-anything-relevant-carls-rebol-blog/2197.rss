<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Mining History For Anything Relevant: Carl&#39;s Rebol Blog</title>
    <link>https://rebol.metaeducation.com/t/mining-history-for-anything-relevant-carls-rebol-blog/2197</link>
    <description>Carl maintained two Rebol blogs.  One was specifically for [Rebol 3.0 development issues](https://rebol.metaeducation.com/t/more-history-mining-rebol-3-0-front-line-blog/2199).  But the other was for more general topics, essays, thoughts.

Here is the first post from February 5, 2008:

  [https://www.rebol.com/article/0001.html : **&quot;Ok, Let&#39;s Try It&quot;**](https://www.rebol.com/article/0001.html)

That blog apparently made it up to 554 posts, stalling out on February 25, 2018:

  [https://www.rebol.com/article/0554.html : **Website Update, New Projects, Fresh Thoughts&quot;**](https://www.rebol.com/article/0554.html)

But it had been stalling out long before that (post #553 was in January of 2016 as part of a little spurt of notes.)

## I Decided To Skim Through It For Anything Useful

It&#39;s a lot of material, but many of them are short (or obviously not relevant to Ren-C&#39;s interests).  I&#39;m in a mode of feeling like I&#39;m seeing answers to old questions through the lens of what Ren-C can do today, so I thought I&#39;d flip through them to see if anything caught my attention.

Here are some notes on any thoughts triggered...

* **[IO Redirection](https://www.rebol.com/article/0004.html)** - Rebol2 and R3-Alpha had many quirks and broken aspects in IO redirection.  Ren-C actually does a pretty good job and [has tests of it](https://github.com/metaeducation/ren-c-stdio/blob/main/.github/workflows/test-stdio.yml) in various shells.  At least a bit in part due to my hassling them, PowerShell actually changed the way they did IO to accommodate making binary redirection accommodate us ([many other people wanted it too](https://github.com/PowerShell/PowerShell/issues/1908)).

* **[MakeDoc](https://www.rebol.com/article/0015.html)** - I have never touched Rebol&#39;s MakeDoc, and pretty much only use MarkDown.  Maybe someone who uses MakeDoc needs to write a post about it and if it matters at all in the modern ecology of such standards.

* **[HASH!](https://www.rebol.com/article/0020.html)** - The predecessor to Rebol&#39;s MAP! was a sort of optimization layer on top of blocks, where you still could enumerate them and experience them as blocks.  But people insisted that a conventional key/value store which was dissociated from any order or enumeration structure was better.  But in light of some recent findings about [Python&#39;s Dict becoming order-preserving and deterministic](https://rebol.metaeducation.com/t/how-much-determinism-should-be-pursued/2057/3?u=hostilefork), I wonder if MAP! was a wrong turn after all.  Hmm.

* **[Async Ports](https://www.rebol.com/article/0050.html)** - Oh my, the [beginnings of the nightmare](https://rebol.metaeducation.com/t/semantics-of-read-and-tcp-streams-past-and-future/1733/2?u=hostilefork).  Thankfully that&#39;s over.

* **[NEW-LINE](https://www.rebol.com/article/0059.html)** - Naming a function NEW-LINE when NEWLINE is a character constant is pretty confusing.  Ren-C has made a lot of progress here (including controlling terminal newlines in blocks) but never really came up with a good answer for how to better define functions to tweak the meta-formatting information.  There&#39;s also a lot to be said about [newline marker significance in dialects](https://rebol.metaeducation.com/t/testing-generic-tuple-and-path-structuring/1353).

* **[Mixed Dialects and REDUCE/ONLY](https://www.rebol.com/article/0059.html)** - The idea of providing constructs that are more careful about executing code is something I&#39;ve gone after, but more in terms of primitives like GET and SET not running code in GROUP!s in paths or tuples unless you say so.  It&#39;s good to see Carl was thinking about &quot;security&quot; (or clarity).  Ren-C sort of [drifted away from thinking there&#39;s much hope in guessing what people will care about](https://rebol.metaeducation.com/t/make-your-own-safety/1118).

* **[No Style Guide](https://www.rebol.com/article/0102.html)** and **[Deep Lake](https://www.rebol.com/article/0103.html)** - The idea that you use the style that fits you is very critical I think.

* **[Context-Dependent Language](https://www.rebol.com/article/0104.html)** - Hadn&#39;t seen this particular post before.

* **[Was XML Flawed From The Start](https://www.rebol.com/article/0108.html)** - Yes.  I didn&#39;t know it but there is apparently a [follow-up post](https://www.rebol.com/article/0110.html).

* **[Building in a DIFF Function](https://www.rebol.com/article/0126.html)** - Hmmm.  Not necessarily the worst idea to have one... dialected diff sounds interesting.  But should probably be a module or extension.

* **[Rebol Internationalization](https://www.rebol.com/article/0130.html)** - In the past I&#39;ve said it might be interesting to &quot;skin&quot; Rebol in usermode to be in other languages.  Spanish or Chinese PARSE dialect, etc.  UPARSE would let you map the combinators to different words.  It&#39;s still interesting, but I think when it comes to stuff like internationalizing messages and error strings... it&#39;s probably time to just assume AI will be good enough for that.  I don&#39;t think this project is going to do any localization in my lifetime.

* **[Modules](https://www.rebol.com/article/0144.html)** - *&quot;I should mention that modules are the main point of the REBOL 3.0 version.&quot;* ... so unfortunate they [more or less did not work at all](https://rebol.metaeducation.com/t/the-real-story-about-user-and-lib-contexts/764).  Ren-C has made great progress and things are much more promising, but there sure is a long way to go on the vision of a completely usermode module system that people can customize or override at will.

* **[SET and GET on Objects](https://www.rebol.com/article/0153.html)** - I dropped this feature, but it does raise another question of determinism in field ordering, as to whether you should even be able to do such a thing.  It seems to me someone needs to lay down the fundamental philosophy about basic issues that persist in Redbols today, like:

      red&gt;&gt; obj1: make object! [a: 10 b: 20]
      == make object! [
          a: 10
          b: 20
      ]

      red&gt;&gt; obj2: make object! [b: 20 a: 10]
      == make object! [
          b: 20
          a: 10
      ]

      red&gt;&gt; obj1 = obj2
      == false

* **[Consistency in POKE](https://www.rebol.com/article/0177.html)** - Aaah, this reminds me of all the [&quot;what is picking and poking and setting and getting&quot;](https://rebol.metaeducation.com/t/get-set-vs-pick-poke-whats-the-difference/1719) semantics issues.  The code is going to need to be revisited for the plan of **obj.method** passing the OBJ to the method as a &quot;coupling&quot;.  It was a nightmare to work on, but maybe enough time has passed to where going in and cleaning it up will be &quot;fun&quot;.

* **[PARSE words are &quot;commands&quot;?](https://www.rebol.com/article/0188.html)** - Hm.  Well, I like &quot;combinators&quot;.  In any case, I don&#39;t know that I&#39;ve used the word &quot;command&quot; much if ever.  Should I?

* **[Is Rebol a Pure Functional Language?](https://www.rebol.com/article/0206.html)** - No, but it does remind me that I was thinking of making a PURE designator where any function marked pure could only call other pure functions.  Could be a fun experiment.

* **[Rebcode](https://www.rebol.com/article/0214.html)** - I don&#39;t think I ever heard of this (or if I did, confused it with the binary storage REBBIN format or something).  If I had infinite time I&#39;d tinker with something like putting Red/System in the WebAssembly build and generating Wasm, but I don&#39;t.  It seems clear in retrospect that this tendency to drift off from language design issues really burned up RebolTech&#39;s time.

* **[BIND?](https://www.rebol.com/article/0229.html)** - While Ren-C&#39;s Pure Virtual Binding is humming along running most code, being able to inquire and reflect the compounding environments is going to need a lot of deeper answers than this.  And I still don&#39;t know exactly what to do about [attached words](https://rebol.metaeducation.com/t/caching-binding-lookup-and-attachment-binding/2128)...they&#39;re just there to keep the ship afloat for the moment.  But worth pointing out that Rebol was pretty far along before it had the ability to query binding (AFAIK Red still doesn&#39;t have it, there&#39;s no BIND?)

* **[Extending Objects](https://www.rebol.com/article/0233.html)** - Thought is needed on this.  It should definitely be a different operation than APPEND.  My feeling is that APPEND on an OBJECT! should be reserved for interacting with that object&#39;s concept of what APPEND means (but does that mean it can&#39;t have its own idea of what EXTEND means?)

* **[Checksum Ports](https://www.rebol.com/article/0278.html)** - We have all the encryption code to do this but understanding what PORT!s are supposed to be keeps this on a very far back burner.

* **[RebolTech Priorities](https://www.rebol.com/article/0284.html)** - Interesting in light of [my own writing on the topic](https://rebol.metaeducation.com/t/re-the-ordering-and-priorities-of-the-ren-c-project/2179).  It&#39;s a different era, where people have so many free tools to choose from... where the *only* relevance I see is whether the language design offers something truly unique and notable.

* **[Source For Carl&#39;s Blog](https://www.rebol.com/article/0288.html)** - I didn&#39;t know he&#39;d published it.  The link is dead, but the Internet Archive has it: **[`blog.r`](https://web.archive.org/web/20061218060625/http://www.rebol.net/cgi-bin/blog.r?get-source=1)**.  I never used the CGI facilities but it&#39;s interesting to see that it is indeed just one long single file.  (I&#39;m idly curious about how this would compare to someone trying to do the same thing in PHP.)

* **[Anthropomorphizing Errors](https://www.rebol.com/article/0294.html)** - Interesting topic.

* **[Two Year Rebol Blog Anniversary](https://www.rebol.com/article/0316.html)** - In two years from 2008-2010 the Rebol blog got to 316 out of its 554 total posts.

* **[FOLLOW was the original name of ALSO](https://www.rebol.com/article/0338.html)** - Who knew.  [Either way, I don&#39;t like it.](https://rebol.metaeducation.com/t/infixing-also-stylizing-it-after-then-and-else/402)

* **[PICK with LOGIC!](https://www.rebol.com/article/0367.html)** - I never really cared for this.  It&#39;s not obvious to me if true is the first item or the second one.  Ren-C has [soft-quoted branching](https://rebol.metaeducation.com/t/soft-quoted-branching-light-elegant-fast/1020), so you can do **`either (cond) &#39;this &#39;that`** and I find it a lot clearer.  Now that logic is an antiform, it means the whole picking system gets messed up by needing to support antiforms.  Not sure why I didn&#39;t kill this off yet...

* **[Reacting to Complaints About Not Communicating](https://www.rebol.com/article/0372.html)** - Seems the natives are getting restless around August 2008.

* **[Rebol: Not For Everyone](https://www.rebol.com/article/0374.html)** - [I wrote a bit here about this post in 2018](https://rebol.metaeducation.com/t/rebols-target-market-newbies-experts-or-other/581).  Should probably see if I have any updated thoughts now that I know more.

* **[The GUI: Harder Than It Seems](https://www.rebol.com/article/0377.html)** - I&#39;ve often been puzzled by the obsession the Rebol community has on the cross-platform GUI.  Here we see an admission from Carl that it&#39;s harder than it seemed and eating up time.  A prelude to today, where Red seems to drag along indefinitely with it.  I&#39;m pretty well-versed in Rebol design points, yet I find what they&#39;re making to largely be gibberish.  HTML and CSS are pervasive, have been modernized with time, and I don&#39;t really think the GUI work has shown to be markedly ahead for any non-trivial task.  :man_shrugging:

* **[The suffix of Rebol Files](https://www.rebol.com/article/0382.html)** - After having campaigned a bit on the side of saying Rebol should accept it doesn&#39;t own the &quot;R&quot; language term and use **`.reb`** [I changed my mind.](https://rebol.metaeducation.com/t/revisiting-the-riddle-of-the-r/1664)  I think it should be **`.r`**.  The reason I haven&#39;t gone around renaming things is because the disruption it would create doesn&#39;t make much sense to do until there&#39;s a good reason to go around and muck with all the file organization.

* **[Infix DEFAULT Before Infix existed](https://www.rebol.com/article/0388.html)** - I didn&#39;t know this had been considered, much less that you do it in Rebol2.  That&#39;s surprising.  The idea of making DEFAULT a dialect taking a BLOCK! is actually not something I had considered, and I&#39;m not completely sure I hate.  You get advantages in the sense that you could potentially default more than one thing...[I&#39;m going to have to think about it.](https://rebol.metaeducation.com/t/default-as-dialect/2198)

* **[Announcement of PowerMezz](https://www.rebol.com/article/0459.html)** - @rgchris had at one time undertaken a porting of this to Rebol3, and don&#39;t really remember what was in it.  I didn&#39;t look too closely.  But it could be a very good place to look for challenging problems in binding and parsing to ask *&quot;has Ren-C raised the bar so people trying to do these things can do them more clearly&quot;*.

* **[CALL/SHOW](https://www.rebol.com/article/0467.html)** - Never saw this.  I do think that for a GUI program, /SHOW should be the default.  Worth looking at.  I notice that [`call &quot;explorer&quot;` returns an exit code of 1](https://github.com/microsoft/WSL/issues/6565), which is now [reported by CALL unless you do CALL/RELAX](https://rebol.metaeducation.com/t/making-call-raise-a-definitional-error-for-bad-exit-codes/2068) (or intercept it with EXCEPT).

* **[LIB and SYS](https://www.rebol.com/article/0489.html)** - Since I started using Rebol only after R3-Alpha, I&#39;m often surprised to find things that you can&#39;t do in Rebol2... such as get the original version of a function if you overwrite it.  I gather that to this day, in Red, if you say `append: func [] [print &quot;Hi&quot;]` without saving the old-append there&#39;s no way to get it back!

* **[Fight Software Complexity Pollution](https://www.rebol.com/article/0497.html)** - I cite this one a lot, I should cache it here on the forum and add some comments.

* **[Common PARSE Patterns](https://www.rebol.com/article/0508.html)** - Link is broken, and internet archive is down, look these up when it comes back.  (Ok it&#39;s back and... [well, not much there](https://web.archive.org/web/20110228053052/http://www.rebol.net/wiki/Common_Parse_Patterns)).

* **[Simplicity Defined](https://www.rebol.com/article/0509.html)** - While I respect that Carl certainly has thrown some unique vision into the mix of computing, no one knows the R3-Alpha code better than I do, and so sometimes these posts ring a bit hollow.  It may have been easier to ramble from on high before the code was open sourced, but really R3-Alpha is every bit the ball of mud he is critiquing!  But it is certainly the case that in its ideal form, Rebol is a rich-enough substrate for expressing one&#39;s domain knowledge simply... whereas other mediums (like say, bash) just are unsuitable...but people use them out of expedience or pragmatism.

* **[Carl Announces Giving Up](https://www.rebol.com/article/0510.html)** - August 2012 solicits opinions on the future, stating: *&quot;I also need to tell you that I don&#39;t have much time to help out with whatever the REBOL future may be.&quot;*

* **[Open-Sourcing Announcement](https://www.rebol.com/article/0511.html)** - There was a bunch of debate over licensing, I said use the LGPL, it was made Apache to &quot;appeal to more contributors&quot;.  Yeah, right.  [Ren-C has been LGPL since September 2020](https://rebol.metaeducation.com/t/ren-c-license-changed-to-lgpl-3-0/1342)

* **[Rebol C Documentation Style](https://www.rebol.com/article/0515.html)** - Comments in R3-Alpha weren&#39;t particularly copious.  Ren-C has tons of them.  I&#39;m pretty pleased with how they&#39;re done, and have been adopting a kind of &quot;headnote&quot; style where I don&#39;t mix too much commenting directly into the code, but just tack on the end of the line **`// don&#39;t accept groups [3]`** and then have a section above somewhere that says `// 3. The reason that we don&#39;t accept groups here is...`  Of course, Ren-C has much improved embedding of native function specs directly in the comments above natives as well.

* **[&quot;We Need a New Rebol Forum&quot;](https://www.rebol.com/article/0518.html)** - I have to wonder how things would have gone if we&#39;d used Discourse earlier.  This question was asked in November of 2012, and Discourse was released in August 2014.

* **[Comparing Rebol and JSON](https://www.rebol.com/article/0522.html)** - This is interesting because he is using BLOCK! for both arrays and key/value stores.  He glosses over what that winds up meaning for systems interpreting the data.  I&#39;m suspicious that it is insignificant, [I wrote a bit about this](https://rebol.metaeducation.com/t/json-envy-serialization-dialect-in-rebol/2140).

* **[Calling REBOL, Rebol](https://www.rebol.com/article/0525.html)** - Yes.

* **[Rebol Conference, Montreal, 2013](https://www.rebol.com/article/0537.html)** - If not for me recording and editing the videos, there wouldn&#39;t be much left of it!

* **[FUNCTION and CLOSURE](https://www.rebol.com/article/0543.html)** - There&#39;s no more CLOSURE in Ren-C [because all the good parts of it are subsumed into every function](https://rebol.metaeducation.com/t/relative-binding-and-frame-internals/1344) *(at reasonable cost)*.  Now I worry over LETs.  Kind of funny to think how much I take for granted these days...

---

## And That&#39;s About It...

So that took me a few hours, and feels worth it to have done so.  He started a separate Rebol 3.0 tech blog, and after that it was mostly philosophy and administrivia posts.  I&#39;ll do a similar survey of the tech blog.

While it seems to me the GUI is the killer of Redbols, it probably is what allowed Rebol2 to get the popularity that it did.  Probably they shouldn&#39;t have made any changes to VID or the graphics.  I think there&#39;s this tendency to want to go deep and burn time on grid controls or whatever the &quot;one missing thing&quot; is, when if an application is truly of any sophistication then it&#39;s always going to run up against the limit of what Rebol can offer.

---

I&#39;ll do some posts on the follow-up items here at some point.</description>
    
    <lastBuildDate>Wed, 16 Apr 2025 22:30:52 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://rebol.metaeducation.com/t/mining-history-for-anything-relevant-carls-rebol-blog/2197.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Mining History For Anything Relevant: Carl&#39;s Rebol Blog</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2197">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="24" height="24" src="https://rebol.metaeducation.com/user_avatar/rebol.metaeducation.com/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong><a href="https://www.rebol.com/article/0459.html">Announcement of PowerMezz</a></strong> - <a class="mention" href="https://rebol.metaeducation.com/u/rgchris">@rgchris</a> had at one time undertaken a porting of this to Rebol3, and don't really remember what was in it.</p>
</blockquote>
</aside>
<p>My main interest in this was the included HTML parser (interest which later shifted to my own efforts at a more conventional <a href="https://github.com/rgchris/Scripts/blob/master/experimental/markup.reb">HTML parser</a> ... one day ...). The challenge I had in porting this is that it created an intermediary function system aimed at optimizing access to native functions by obviating word lookup (that is to say, instead of writing <code>insert thing other-thing</code> the mechanisms in place have the operative code be <code>#[native! ...copy...] thing other-thing</code>). It was effective as an optimization, but the layers that made the code coherent I found to be quite difficult to debug, particularly in figuring out how Rebol 3 changes broke it.</p>
<p>I think it would be a challenge to get it working in Ren-C, but I'm not sure of the value of it other than the exercise in itself. I'd speculate that there's more value in figuring out how to optimize conventional idioms.</p>
          <p><a href="https://rebol.metaeducation.com/t/mining-history-for-anything-relevant-carls-rebol-blog/2197/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/mining-history-for-anything-relevant-carls-rebol-blog/2197/2</link>
        <pubDate>Wed, 16 Apr 2025 22:30:52 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2197-2</guid>
        <source url="https://rebol.metaeducation.com/t/mining-history-for-anything-relevant-carls-rebol-blog/2197.rss">Mining History For Anything Relevant: Carl&#39;s Rebol Blog</source>
      </item>
      <item>
        <title>Mining History For Anything Relevant: Carl&#39;s Rebol Blog</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Carl maintained two Rebol blogs.  One was specifically for <a href="https://rebol.metaeducation.com/t/more-history-mining-rebol-3-0-front-line-blog/2199">Rebol 3.0 development issues</a>.  But the other was for more general topics, essays, thoughts.</p>
<p>Here is the first post from February 5, 2008:</p>
<p><a href="https://www.rebol.com/article/0001.html">https://www.rebol.com/article/0001.html : <strong>"Ok, Let's Try It"</strong></a></p>
<p>That blog apparently made it up to 554 posts, stalling out on February 25, 2018:</p>
<p><a href="https://www.rebol.com/article/0554.html">https://www.rebol.com/article/0554.html : <strong>Website Update, New Projects, Fresh Thoughts"</strong></a></p>
<p>But it had been stalling out long before that (post <span class="hashtag-raw">#553</span> was in January of 2016 as part of a little spurt of notes.)</p>
<h2><a name="p-7334-i-decided-to-skim-through-it-for-anything-useful-1" class="anchor" href="https://rebol.metaeducation.com#p-7334-i-decided-to-skim-through-it-for-anything-useful-1"></a>I Decided To Skim Through It For Anything Useful</h2>
<p>It's a lot of material, but many of them are short (or obviously not relevant to Ren-C's interests).  I'm in a mode of feeling like I'm seeing answers to old questions through the lens of what Ren-C can do today, so I thought I'd flip through them to see if anything caught my attention.</p>
<p>Here are some notes on any thoughts triggered...</p>
<ul>
<li>
<p><strong><a href="https://www.rebol.com/article/0004.html">IO Redirection</a></strong> - Rebol2 and R3-Alpha had many quirks and broken aspects in IO redirection.  Ren-C actually does a pretty good job and <a href="https://github.com/metaeducation/ren-c-stdio/blob/main/.github/workflows/test-stdio.yml">has tests of it</a> in various shells.  At least a bit in part due to my hassling them, PowerShell actually changed the way they did IO to accommodate making binary redirection accommodate us (<a href="https://github.com/PowerShell/PowerShell/issues/1908">many other people wanted it too</a>).</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0015.html">MakeDoc</a></strong> - I have never touched Rebol's MakeDoc, and pretty much only use MarkDown.  Maybe someone who uses MakeDoc needs to write a post about it and if it matters at all in the modern ecology of such standards.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0020.html">HASH!</a></strong> - The predecessor to Rebol's MAP! was a sort of optimization layer on top of blocks, where you still could enumerate them and experience them as blocks.  But people insisted that a conventional key/value store which was dissociated from any order or enumeration structure was better.  But in light of some recent findings about <a href="https://rebol.metaeducation.com/t/how-much-determinism-should-be-pursued/2057/3">Python's Dict becoming order-preserving and deterministic</a>, I wonder if MAP! was a wrong turn after all.  Hmm.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0050.html">Async Ports</a></strong> - Oh my, the <a href="https://rebol.metaeducation.com/t/semantics-of-read-and-tcp-streams-past-and-future/1733/2">beginnings of the nightmare</a>.  Thankfully that's over.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0059.html">NEW-LINE</a></strong> - Naming a function NEW-LINE when NEWLINE is a character constant is pretty confusing.  Ren-C has made a lot of progress here (including controlling terminal newlines in blocks) but never really came up with a good answer for how to better define functions to tweak the meta-formatting information.  There's also a lot to be said about <a href="https://rebol.metaeducation.com/t/testing-generic-tuple-and-path-structuring/1353">newline marker significance in dialects</a>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0059.html">Mixed Dialects and REDUCE/ONLY</a></strong> - The idea of providing constructs that are more careful about executing code is something I've gone after, but more in terms of primitives like GET and SET not running code in GROUP!s in paths or tuples unless you say so.  It's good to see Carl was thinking about "security" (or clarity).  Ren-C sort of <a href="https://rebol.metaeducation.com/t/make-your-own-safety/1118">drifted away from thinking there's much hope in guessing what people will care about</a>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0102.html">No Style Guide</a></strong> and <strong><a href="https://www.rebol.com/article/0103.html">Deep Lake</a></strong> - The idea that you use the style that fits you is very critical I think.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0104.html">Context-Dependent Language</a></strong> - Hadn't seen this particular post before.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0108.html">Was XML Flawed From The Start</a></strong> - Yes.  I didn't know it but there is apparently a <a href="https://www.rebol.com/article/0110.html">follow-up post</a>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0126.html">Building in a DIFF Function</a></strong> - Hmmm.  Not necessarily the worst idea to have one... dialected diff sounds interesting.  But should probably be a module or extension.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0130.html">Rebol Internationalization</a></strong> - In the past I've said it might be interesting to "skin" Rebol in usermode to be in other languages.  Spanish or Chinese PARSE dialect, etc.  UPARSE would let you map the combinators to different words.  It's still interesting, but I think when it comes to stuff like internationalizing messages and error strings... it's probably time to just assume AI will be good enough for that.  I don't think this project is going to do any localization in my lifetime.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0144.html">Modules</a></strong> - <em>"I should mention that modules are the main point of the REBOL 3.0 version."</em> ... so unfortunate they <a href="https://rebol.metaeducation.com/t/the-real-story-about-user-and-lib-contexts/764">more or less did not work at all</a>.  Ren-C has made great progress and things are much more promising, but there sure is a long way to go on the vision of a completely usermode module system that people can customize or override at will.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0153.html">SET and GET on Objects</a></strong> - I dropped this feature, but it does raise another question of determinism in field ordering, as to whether you should even be able to do such a thing.  It seems to me someone needs to lay down the fundamental philosophy about basic issues that persist in Redbols today, like:</p>
<pre><code>red&gt;&gt; obj1: make object! [a: 10 b: 20]
== make object! [
    a: 10
    b: 20
]

red&gt;&gt; obj2: make object! [b: 20 a: 10]
== make object! [
    b: 20
    a: 10
]

red&gt;&gt; obj1 = obj2
== false
</code></pre>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0177.html">Consistency in POKE</a></strong> - Aaah, this reminds me of all the <a href="https://rebol.metaeducation.com/t/get-set-vs-pick-poke-whats-the-difference/1719">"what is picking and poking and setting and getting"</a> semantics issues.  The code is going to need to be revisited for the plan of <strong>obj.method</strong> passing the OBJ to the method as a "coupling".  It was a nightmare to work on, but maybe enough time has passed to where going in and cleaning it up will be "fun".</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0188.html">PARSE words are "commands"?</a></strong> - Hm.  Well, I like "combinators".  In any case, I don't know that I've used the word "command" much if ever.  Should I?</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0206.html">Is Rebol a Pure Functional Language?</a></strong> - No, but it does remind me that I was thinking of making a PURE designator where any function marked pure could only call other pure functions.  Could be a fun experiment.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0214.html">Rebcode</a></strong> - I don't think I ever heard of this (or if I did, confused it with the binary storage REBBIN format or something).  If I had infinite time I'd tinker with something like putting Red/System in the WebAssembly build and generating Wasm, but I don't.  It seems clear in retrospect that this tendency to drift off from language design issues really burned up RebolTech's time.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0229.html">BIND?</a></strong> - While Ren-C's Pure Virtual Binding is humming along running most code, being able to inquire and reflect the compounding environments is going to need a lot of deeper answers than this.  And I still don't know exactly what to do about <a href="https://rebol.metaeducation.com/t/caching-binding-lookup-and-attachment-binding/2128">attached words</a>...they're just there to keep the ship afloat for the moment.  But worth pointing out that Rebol was pretty far along before it had the ability to query binding (AFAIK Red still doesn't have it, there's no BIND?)</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0233.html">Extending Objects</a></strong> - Thought is needed on this.  It should definitely be a different operation than APPEND.  My feeling is that APPEND on an OBJECT! should be reserved for interacting with that object's concept of what APPEND means (but does that mean it can't have its own idea of what EXTEND means?)</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0278.html">Checksum Ports</a></strong> - We have all the encryption code to do this but understanding what PORT!s are supposed to be keeps this on a very far back burner.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0284.html">RebolTech Priorities</a></strong> - Interesting in light of <a href="https://rebol.metaeducation.com/t/re-the-ordering-and-priorities-of-the-ren-c-project/2179">my own writing on the topic</a>.  It's a different era, where people have so many free tools to choose from... where the <em>only</em> relevance I see is whether the language design offers something truly unique and notable.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0288.html">Source For Carl's Blog</a></strong> - I didn't know he'd published it.  The link is dead, but the Internet Archive has it: <strong><a href="https://web.archive.org/web/20061218060625/http://www.rebol.net/cgi-bin/blog.r?get-source=1"><code>blog.r</code></a></strong>.  I never used the CGI facilities but it's interesting to see that it is indeed just one long single file.  (I'm idly curious about how this would compare to someone trying to do the same thing in PHP.)</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0294.html">Anthropomorphizing Errors</a></strong> - Interesting topic.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0316.html">Two Year Rebol Blog Anniversary</a></strong> - In two years from 2008-2010 the Rebol blog got to 316 out of its 554 total posts.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0338.html">FOLLOW was the original name of ALSO</a></strong> - Who knew.  <a href="https://rebol.metaeducation.com/t/infixing-also-stylizing-it-after-then-and-else/402">Either way, I don't like it.</a></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0367.html">PICK with LOGIC!</a></strong> - I never really cared for this.  It's not obvious to me if true is the first item or the second one.  Ren-C has <a href="https://rebol.metaeducation.com/t/soft-quoted-branching-light-elegant-fast/1020">soft-quoted branching</a>, so you can do <strong><code>either (cond) 'this 'that</code></strong> and I find it a lot clearer.  Now that logic is an antiform, it means the whole picking system gets messed up by needing to support antiforms.  Not sure why I didn't kill this off yet...</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0372.html">Reacting to Complaints About Not Communicating</a></strong> - Seems the natives are getting restless around August 2008.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0374.html">Rebol: Not For Everyone</a></strong> - <a href="https://rebol.metaeducation.com/t/rebols-target-market-newbies-experts-or-other/581">I wrote a bit here about this post in 2018</a>.  Should probably see if I have any updated thoughts now that I know more.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0377.html">The GUI: Harder Than It Seems</a></strong> - I've often been puzzled by the obsession the Rebol community has on the cross-platform GUI.  Here we see an admission from Carl that it's harder than it seemed and eating up time.  A prelude to today, where Red seems to drag along indefinitely with it.  I'm pretty well-versed in Rebol design points, yet I find what they're making to largely be gibberish.  HTML and CSS are pervasive, have been modernized with time, and I don't really think the GUI work has shown to be markedly ahead for any non-trivial task.  <img src="https://rebol.metaeducation.com/images/emoji/twitter/man_shrugging.png?v=14" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0382.html">The suffix of Rebol Files</a></strong> - After having campaigned a bit on the side of saying Rebol should accept it doesn't own the "R" language term and use <strong><code>.reb</code></strong> <a href="https://rebol.metaeducation.com/t/revisiting-the-riddle-of-the-r/1664">I changed my mind.</a>  I think it should be <strong><code>.r</code></strong>.  The reason I haven't gone around renaming things is because the disruption it would create doesn't make much sense to do until there's a good reason to go around and muck with all the file organization.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0388.html">Infix DEFAULT Before Infix existed</a></strong> - I didn't know this had been considered, much less that you do it in Rebol2.  That's surprising.  The idea of making DEFAULT a dialect taking a BLOCK! is actually not something I had considered, and I'm not completely sure I hate.  You get advantages in the sense that you could potentially default more than one thing...<a href="https://rebol.metaeducation.com/t/default-as-dialect/2198">I'm going to have to think about it.</a></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0459.html">Announcement of PowerMezz</a></strong> - <a class="mention" href="https://rebol.metaeducation.com/u/rgchris">@rgchris</a> had at one time undertaken a porting of this to Rebol3, and don't really remember what was in it.  I didn't look too closely.  But it could be a very good place to look for challenging problems in binding and parsing to ask <em>"has Ren-C raised the bar so people trying to do these things can do them more clearly"</em>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0467.html">CALL/SHOW</a></strong> - Never saw this.  I do think that for a GUI program, /SHOW should be the default.  Worth looking at.  I notice that <a href="https://github.com/microsoft/WSL/issues/6565"><code>call "explorer"</code> returns an exit code of 1</a>, which is now <a href="https://rebol.metaeducation.com/t/making-call-raise-a-definitional-error-for-bad-exit-codes/2068">reported by CALL unless you do CALL/RELAX</a> (or intercept it with EXCEPT).</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0489.html">LIB and SYS</a></strong> - Since I started using Rebol only after R3-Alpha, I'm often surprised to find things that you can't do in Rebol2... such as get the original version of a function if you overwrite it.  I gather that to this day, in Red, if you say <code>append: func [] [print "Hi"]</code> without saving the old-append there's no way to get it back!</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0497.html">Fight Software Complexity Pollution</a></strong> - I cite this one a lot, I should cache it here on the forum and add some comments.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0508.html">Common PARSE Patterns</a></strong> - Link is broken, and internet archive is down, look these up when it comes back.  (Ok it's back and... <a href="https://web.archive.org/web/20110228053052/http://www.rebol.net/wiki/Common_Parse_Patterns">well, not much there</a>).</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0509.html">Simplicity Defined</a></strong> - While I respect that Carl certainly has thrown some unique vision into the mix of computing, no one knows the R3-Alpha code better than I do, and so sometimes these posts ring a bit hollow.  It may have been easier to ramble from on high before the code was open sourced, but really R3-Alpha is every bit the ball of mud he is critiquing!  But it is certainly the case that in its ideal form, Rebol is a rich-enough substrate for expressing one's domain knowledge simply... whereas other mediums (like say, bash) just are unsuitable...but people use them out of expedience or pragmatism.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0510.html">Carl Announces Giving Up</a></strong> - August 2012 solicits opinions on the future, stating: <em>"I also need to tell you that I don't have much time to help out with whatever the REBOL future may be."</em></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0511.html">Open-Sourcing Announcement</a></strong> - There was a bunch of debate over licensing, I said use the LGPL, it was made Apache to "appeal to more contributors".  Yeah, right.  <a href="https://rebol.metaeducation.com/t/ren-c-license-changed-to-lgpl-3-0/1342">Ren-C has been LGPL since September 2020</a></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0515.html">Rebol C Documentation Style</a></strong> - Comments in R3-Alpha weren't particularly copious.  Ren-C has tons of them.  I'm pretty pleased with how they're done, and have been adopting a kind of "headnote" style where I don't mix too much commenting directly into the code, but just tack on the end of the line <strong><code>// don't accept groups [3]</code></strong> and then have a section above somewhere that says <code>// 3. The reason that we don't accept groups here is...</code>  Of course, Ren-C has much improved embedding of native function specs directly in the comments above natives as well.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0518.html">"We Need a New Rebol Forum"</a></strong> - I have to wonder how things would have gone if we'd used Discourse earlier.  This question was asked in November of 2012, and Discourse was released in August 2014.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0522.html">Comparing Rebol and JSON</a></strong> - This is interesting because he is using BLOCK! for both arrays and key/value stores.  He glosses over what that winds up meaning for systems interpreting the data.  I'm suspicious that it is insignificant, <a href="https://rebol.metaeducation.com/t/json-envy-serialization-dialect-in-rebol/2140">I wrote a bit about this</a>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0525.html">Calling REBOL, Rebol</a></strong> - Yes.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0537.html">Rebol Conference, Montreal, 2013</a></strong> - If not for me recording and editing the videos, there wouldn't be much left of it!</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0543.html">FUNCTION and CLOSURE</a></strong> - There's no more CLOSURE in Ren-C <a href="https://rebol.metaeducation.com/t/relative-binding-and-frame-internals/1344">because all the good parts of it are subsumed into every function</a> <em>(at reasonable cost)</em>.  Now I worry over LETs.  Kind of funny to think how much I take for granted these days...</p>
</li>
</ul>
<hr>
<h2><a name="p-7334-and-thats-about-it-2" class="anchor" href="https://rebol.metaeducation.com#p-7334-and-thats-about-it-2"></a>And That's About It...</h2>
<p>So that took me a few hours, and feels worth it to have done so.  He started a separate Rebol 3.0 tech blog, and after that it was mostly philosophy and administrivia posts.  I'll do a similar survey of the tech blog.</p>
<p>While it seems to me the GUI is the killer of Redbols, it probably is what allowed Rebol2 to get the popularity that it did.  Probably they shouldn't have made any changes to VID or the graphics.  I think there's this tendency to want to go deep and burn time on grid controls or whatever the "one missing thing" is, when if an application is truly of any sophistication then it's always going to run up against the limit of what Rebol can offer.</p>
<hr>
<p>I'll do some posts on the follow-up items here at some point.</p>
          <p><a href="https://rebol.metaeducation.com/t/mining-history-for-anything-relevant-carls-rebol-blog/2197/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/mining-history-for-anything-relevant-carls-rebol-blog/2197/1</link>
        <pubDate>Tue, 20 Aug 2024 11:01:54 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2197-1</guid>
        <source url="https://rebol.metaeducation.com/t/mining-history-for-anything-relevant-carls-rebol-blog/2197.rss">Mining History For Anything Relevant: Carl&#39;s Rebol Blog</source>
      </item>
  </channel>
</rss>
