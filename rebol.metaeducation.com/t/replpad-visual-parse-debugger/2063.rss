<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ReplPad Visual PARSE Debugger</title>
    <link>https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063</link>
    <description>Hey!  I&#39;ve gotten UPARSE hooked up to a debugger:

https://www.youtube.com/watch?v=doS7NgajRxI

The ability to step in at every level shows just how granular the hook is.  It&#39;s not a terrible lot of code:

  https://github.com/hostilefork/replpad-js/blob/eb8a62054d345f798b3b87364943df3534a7b92e/eparse.reb#L334

It&#39;s barely tested, but it is public on the ReplPad if anyone wants to throw something at it.

## What Concerns Did Writing This Raise?

Having the debugger in the ReplPad gives an immediate user annoyance: *Why can&#39;t I type in the console while the debugger is running?*  (That&#39;s a huge can of worms and requires several posts of its own to talk about.)

The design of UPARSE is that you can provide your own set of combinators to use.  You can give it a new WORD! combinator that does something besides fetch what the word looks up to and &quot;act like it would if it were written there&quot;.  While this simple tracing facility can handle generic interpretations, the generality could subvert the usefulness of higher level tools.

Beyond that problem of &quot;words may not look things up at all&quot;, there&#39;s also the problem of &quot;discovery&quot;.  Everything is &quot;discovered&quot; as you go along--there&#39;s not a list supplied up front.  That may not be a fit for some tools, so they could end up asking you to pass in the names of all the rules of interest even though they don&#39;t need to be &quot;instrumented&quot;.

I thought of adding a BREAKPOINT combinator, so you could break in mid-parse.  But I was only building up a list modeling the stack for frames while you were interacting with the buttons.  Having the stack always available at an arbitrary moment would mean that the stack model would have to be updated on every call to the hook.  Effectively this duplicates information held in the &quot;real stack&quot;--the subset of function calls that represent combinators.  So it&#39;s tempting to find a way to label stack frames and enumerate them generically, vs. expecting all debuggers like this to maintain their own.

There&#39;s a lot to think about, here.  But as Rebol in the browser goes, this really is the only game in town, and it&#39;s holding up pretty well whenever I exercise it!</description>
    
    <lastBuildDate>Fri, 08 Dec 2023 18:41:18 +0000</lastBuildDate>
    <category>Debugger</category>
    <atom:link href="https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ReplPad Visual PARSE Debugger</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Great video. A pity I will not be able to watch it (again) because of YT's crusade against ad-blockers. I stopped using YT and started to boycot its advertisers and gave them notice of why I returned my orders.</p>
          <p><a href="https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063/3">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063/3</link>
        <pubDate>Fri, 27 Oct 2023 20:31:13 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2063-3</guid>
        <source url="https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063.rss">ReplPad Visual PARSE Debugger</source>
      </item>
      <item>
        <title>ReplPad Visual PARSE Debugger</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Bravo ! Nicely done !</p>
          <p><a href="https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063/2">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063/2</link>
        <pubDate>Thu, 26 Oct 2023 14:47:22 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2063-2</guid>
        <source url="https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063.rss">ReplPad Visual PARSE Debugger</source>
      </item>
      <item>
        <title>ReplPad Visual PARSE Debugger</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Hey!  I've gotten UPARSE hooked up to a debugger:</p>
<p><a href="https://www.youtube.com/watch?v=doS7NgajRxI">Ren-C PARSE Hook Demo: Debugging</a></p>

<p>The ability to step in at every level shows just how granular the hook is.  It's not a terrible lot of code:</p>
<p><a href="https://github.com/hostilefork/replpad-js/blob/eb8a62054d345f798b3b87364943df3534a7b92e/eparse.reb#L334" class="inline-onebox">replpad-js/eparse.reb at eb8a62054d345f798b3b87364943df3534a7b92e · hostilefork/replpad-js · GitHub</a></p>
<p>It's barely tested, but it is public on the ReplPad if anyone wants to throw something at it.</p>
<h2><a name="p-6718-what-concerns-did-writing-this-raise-1" class="anchor" href="https://rebol.metaeducation.com#p-6718-what-concerns-did-writing-this-raise-1"></a>What Concerns Did Writing This Raise?</h2>
<p>Having the debugger in the ReplPad gives an immediate user annoyance: <em>Why can't I type in the console while the debugger is running?</em>  (That's a huge can of worms and requires several posts of its own to talk about.)</p>
<p>The design of UPARSE is that you can provide your own set of combinators to use.  You can give it a new WORD! combinator that does something besides fetch what the word looks up to and "act like it would if it were written there".  While this simple tracing facility can handle generic interpretations, the generality could subvert the usefulness of higher level tools.</p>
<p>Beyond that problem of "words may not look things up at all", there's also the problem of "discovery".  Everything is "discovered" as you go along--there's not a list supplied up front.  That may not be a fit for some tools, so they could end up asking you to pass in the names of all the rules of interest even though they don't need to be "instrumented".</p>
<p>I thought of adding a BREAKPOINT combinator, so you could break in mid-parse.  But I was only building up a list modeling the stack for frames while you were interacting with the buttons.  Having the stack always available at an arbitrary moment would mean that the stack model would have to be updated on every call to the hook.  Effectively this duplicates information held in the "real stack"--the subset of function calls that represent combinators.  So it's tempting to find a way to label stack frames and enumerate them generically, vs. expecting all debuggers like this to maintain their own.</p>
<p>There's a lot to think about, here.  But as Rebol in the browser goes, this really is the only game in town, and it's holding up pretty well whenever I exercise it!</p>
          <p><a href="https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063/1</link>
        <pubDate>Thu, 26 Oct 2023 02:19:17 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2063-1</guid>
        <source url="https://rebol.metaeducation.com/t/replpad-visual-parse-debugger/2063.rss">ReplPad Visual PARSE Debugger</source>
      </item>
  </channel>
</rss>
