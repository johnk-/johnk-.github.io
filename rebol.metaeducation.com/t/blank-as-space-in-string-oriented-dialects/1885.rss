<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
    <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885</link>
    <description>*(Note: I&#39;m kicking off this discussion with a conclusion from an otherwise outdated thread, circa 2020.)*

---

&gt; Having had a fair amount of time to reflect on the evolution of things, I think we need to make undecorated word fetches not produce an error with NULL.  I&#39;ve outlined the history of why they were erroring at the outset, and walking through it I think there&#39;s a coherent plan for when there is tolerance and when there is not (e.g. function arguments by default).
&gt;
&gt; But today I realized something particularly pleasing about this.  We had a concept that BLANK!...due to its non-erroring status, would be the way of &quot;disarming&quot; a null assignment to a variable.  It&#39;s still going to be a way of disarming parameters for &quot;blank in, null out&quot;, but not needed for a plain assignment.
&gt;
&gt; **That frees up blank for dialect uses distinct from NULL.**
&gt;
&gt; In particular, it recovers it for something that was tried for a time... being synonymous with space (**`#&quot; &quot;`**).  The concept emerged when it was called into question whether PRINT should default to adding implicit spaces, and how you should avoid it doing so.  **print [&quot;It&quot; _ was _ &quot;ugly&quot;]** if the common case didn&#39;t have implicit spaces, so ultimately we went with SPACED by default and you could write **print unspaced [...]** if that&#39;s what you wanted.
&gt;
&gt; Yet `_` was deemed to need to behave just as NULL did, as you couldn&#39;t put a NULL in a variable.  So when you needed to, you would use blank, and it would be the non-erroring synonym.  It was a sad loss for when you wanted a nice way to note spaces, but seemed to be the way it had to be.
&gt;
&gt; ## Well, not any more!
&gt;
&gt; With non-erroring NULLs, dialects are free to distinguish the behavior of blanks and nulls.  NULL being the most obvious &quot;nothing&quot;.  So why not bring back BLANK! as being a synonym for space?
&gt;
&gt; It still has the &quot;no delimiters applied&quot; status of a CHAR!.  So **spaced [&quot;a&quot; _ _ &quot;b&quot;]** would still be just two spaces between the **a** and the **b**... not five.
&gt;
&gt; Looking good!</description>
    
    <lastBuildDate>Mon, 26 Jun 2023 21:32:06 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Experiments have run the gamut to where a plain BLANK! once would opt out of appending to a series, and you had to quote it to append it:</p>
<pre><code>experiment&gt;&gt; append [a b] _
= [a b]

experiment&gt;&gt; append [a b] quote _
== [a b _]
</code></pre>
<p>But the satisfying world we have now is that anything you can pick out of a block will append as-is to another block.  So adding a blank is additive:</p>
<pre><code>&gt;&gt; append [a b] _
== [a b _]
</code></pre>
<p>It feels like a decent fit to say that appending a blank to a string is additive...since VOID and such are available if you want to opt out:</p>
<pre><code>&gt;&gt; append "ab" _
== "ab "
</code></pre>
<p>Though it raises the question of what BINARY! should do:</p>
<pre><code>&gt;&gt; append #{0102} _
== ???
</code></pre>
<p>It seems that adding a UTF-8 representation is the story for ASCII:</p>
<pre><code>&gt;&gt; as binary! "AB"
== #{4142}

&gt;&gt; append #{0102} "AB"
= #{01024142}
</code></pre>
<p>But when it comes to integers, strings append the molded form...while binaries just add one byte, not the bytes of the formed string of the integer:</p>
<pre><code>&gt;&gt; append "ab" 10
== "ab10"

&gt;&gt; append #{0102} 10
== #{01020A}
</code></pre>
<p>A bit of a mixed bag, that could support arguments that BLANK! could be "the space of binaries" (e.g. #{00})</p>
<pre><code>&gt;&gt; append #{0102} _
== #{010200}
</code></pre>
<p>But I think that's not so useful.  It's more likely that the character representation of space is useful:</p>
<pre><code>&gt;&gt; to binary! #" "
== #{20}

&gt;&gt; append #{0102} _
== #{010220}
</code></pre>
<p>Ren-C FIND and PARSE mechanics already allows you to search for strings in BINARY!, implicitly looking for the UTF-8 representation.</p>
<h2>
<a name="what-if-_-was-really-the-canon-representation-of-space-chars-1" class="anchor" href="https://forum.rebol.info#what-if-_-was-really-the-canon-representation-of-space-chars-1"></a>What If _ Was Really The Canon Representation of Space Chars?</h2>
<pre><code>&gt;&gt; pick "ab " 3
== _

&gt;&gt; #" "
== _

&gt;&gt; char? _
== ~true~  ; isotope

&gt;&gt; space? _
== ~true~  ; isotope
</code></pre>
<p>I've mentioned that single character intents are on the rise... we could call quoted void (apostrophe) "blank" and it could be used in contexts where you want to say there's no value:</p>
<pre><code>&gt;&gt; blank? first [']
== ~true~  ; isotope

&gt;&gt; blank
== '
</code></pre>
<p>You'd still have _ as an evaluator-inert dialecting part that can't be redefined.  You just would need to use something like <strong>#</strong> or <strong>'</strong> or <strong>~</strong> in cases where you had a slot that could be either any character -or- some out of band thing.</p>
<p>Off the top of my head, I can see a few problems.  If _ became a character literal, it shouldn't be used for vacant spots in paths.  So let's say paths start using this "new blank":</p>
<pre><code>&gt;&gt; as block! first [/a]
== [' a]
</code></pre>
<p>Doesn't look too bad, but if you want to parse it you need double apostrophes to match those spots:</p>
<pre><code>parse [/a] [into path! ['' 'a]]
</code></pre>
<p>This is because a single apostrophe is matched as void, e.g. matches without advancing the parse position.  <a href="https://forum.rebol.info/t/parse-behavior-for-words-that-lookup-to-quoted/2038">And it wouldn't work if you used a word to reference the blank</a>:</p>
<pre><code>&gt;&gt; parse [/a] [into path! [blank 'a]]
** Error: To match a QUOTED! you must use @blank

&gt;&gt; parse [/a] [into path! [@blank 'a]]  ; would need to do this...
== a
</code></pre>
<p>But it's not awful, and at least it doesn't silently treat the quote as a vanishing rule.</p>
<p><strong>It's still kind of an interesting thought to make _ the literal char! of space.</strong>  Still inert, still usable in dialects.  It would leave <strong><code>'</code></strong> and <strong><code>~</code></strong> as "friendly nothing" and "unfriendly nothing".</p>
<pre><code>&gt;&gt; spread first [']  ; would return void

&gt;&gt; spread first [~]
** Error: Cannot spread meta-NONE
</code></pre>
<p>Either way, I think the conclusion here is that <strong>append #{0102} _</strong> should be <strong>#{010220}</strong></p>
          <p><a href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/6</link>
        <pubDate>Mon, 26 Jun 2023 17:39:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1885-6</guid>
        <source url="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss">BLANK! (_) as SPACE in String-Oriented Dialects</source>
      </item>
      <item>
        <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Makes sense for me like this.</p>
          <p><a href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/5</link>
        <pubDate>Fri, 02 Dec 2022 10:03:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1885-5</guid>
        <source url="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss">BLANK! (_) as SPACE in String-Oriented Dialects</source>
      </item>
      <item>
        <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>With some of my observations on how we can use "single character intents of nothing" (<strong><code>[_ ' ~]</code></strong>), I think it's worth coming back to look at this BLANK!-as-space question one more time...<sub><em>(It's almost never just one more time, is it.  <img src="https://forum.rebol.info/images/emoji/twitter/man_facepalming.png?v=12" title=":man_facepalming:" class="emoji" alt=":man_facepalming:" loading="lazy" width="20" height="20"> )</em><sub></sub></sub></p>
<p><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/3" class="inline-onebox">Shades of Distinction In Non-Valued Intents - #3 by hostilefork</a></p>
<p>I suggest that it would be nice if anywhere that <em>would</em> take a series, BLANK! acting like an empty series would be a cool behavior.</p>
<p><strong>So... how necessary is it that we give DELIMIT behavior for BLOCK!s or GROUP!s--empty or otherwise--that we would want to have parity with empty block for blanks?</strong></p>
<p>Looking at just what's there right now, today, we have this behavior:</p>
<pre><code>&gt;&gt; c: 1020
&gt;&gt; d: 304

&gt;&gt; unspaced ["a" ["b" c] d]
== "abc304"

&gt;&gt; spaced ["a" ["b" c] d]
== "a bc 304"
</code></pre>
<p>So it uses the contents of the block as raw material, but doesn't reduce it or obey the delimiter.  With GET-BLOCK! you have a shorthand to reduce it, if you like:</p>
<pre><code>&gt;&gt; unspaced ["a" :["b" c] d]
== "ab1020304"

&gt;&gt; spaced ["a" :["b" c] d]
== "a b1020 304"
</code></pre>
<p><strong>I've always tended to think that having automatic behavior for BLOCK! here does more harm than good.</strong>   More often than not, you just get nonsense when you wanted something else:</p>
<pre><code>&gt;&gt; block: [1 2 &lt;x&gt; hello]

&gt;&gt; print ["Your block is:" block]
Your block is: 12&lt;x&gt;hello  ; ugh.
</code></pre>
<p>It's bad enough when the results get printed and you see the garbage.  But worse when it just affects some string you're writing somewhere accidentally.</p>
<p>There's some efficiency gain if the enumeration of the block gets folded recursively into the process because you're not generating large intermediate strings and merging them... you're just building one big long string as you go.  So that led me to think it <em>might</em> have value, and implemented it.  But I've remained a skeptic... and...</p>
<h2>
<a name="i-dont-think-delimit-should-have-a-block-behavior-1" class="anchor" href="https://forum.rebol.info#i-dont-think-delimit-should-have-a-block-behavior-1"></a>...I Don't Think DELIMIT Should Have a BLOCK! Behavior</h2>
<p>The case above shows the kind of nonsense I'm tired of.</p>
<p>Now that <a href="https://forum.rebol.info/t/should-reduce-heed-spread/1917">DLIMIT Could Heed SPREAD</a> that gives other ways to optimize the situation of wanting to fold a block's contents into a string formation.</p>
<p>There's a weird but kind of cool behavior that quoting an item will mold it.  And you can use ^META to take most types up a quoting level:</p>
<pre><code>&gt;&gt; str: "abc"
&gt;&gt; blk: [a b c]

&gt;&gt; print ["String is" ^str "and Block is" ^blk]
String is "abc" and Block is [a b c]
</code></pre>
<p>If you're wondering why not to use <span class="mention">@str</span> and <span class="mention">@blk</span>, it's because ECHO semantics used those for non-mold-oriented splicing, e.g. if you just had a plain string it would echo it:</p>
<pre><code>&gt;&gt; echo [String is @str]
String is abc
</code></pre>
<p>Not that PRINT and ECHO need to line up, but it's something to think about.</p>
<p><strong>I guess the long story short here being that I am not all <em>that</em> worked up over the loss of synonymousness between an empty block and blank in the DELIMIT dialect.</strong></p>
<p>If BLANK! did anything besides act as a space, it would probably need to be an error.  I guess I'll have to keep my eyes open for what the opportunities are for blank being synonymous with an empty block in these stringification scenarios... but my instinct is to say those aren't particularly interesting.</p>
<p>I think the apostrophe case could be used for when you really mean nothing--as a reified proxy for void--instead of blank.</p>
<p><strong>The big question may actually be at the topmost level of FORM, e.g. FORM of an empty block vs. FORM of a blank.</strong></p>
<pre><code>&gt;&gt; form [a b]
== "a b"

&gt;&gt; form [_]
== " "  ; we are presuming this direction

&gt;&gt; form []
== ""  ; (or possibly null ?)

&gt;&gt; form _
== " "  ; or should it be forced to match what empty block is?
</code></pre>
<p>But there's no rule that <strong>form [_]</strong> has to match <strong>form _</strong> any more than there is that <strong>form [[]]</strong> has to do the same thing as <strong>form []</strong>, so this needs to be weighed.</p>
          <p><a href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/4</link>
        <pubDate>Wed, 30 Nov 2022 12:28:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1885-4</guid>
        <source url="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss">BLANK! (_) as SPACE in String-Oriented Dialects</source>
      </item>
      <item>
        <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1885">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's still going to be a way of disarming parameters for "blank in, null out", but not needed for a plain assignment.</p>
</blockquote>
</aside>
<h2>
<a name="even-better-news-here-in-2022-1" class="anchor" href="https://forum.rebol.info#even-better-news-here-in-2022-1"></a>Even better news here in 2022...</h2>
<p><strong>...it's not even used for <em>that</em> anymore!</strong></p>
<p>*BLANK!-in-NULL-out has been replaced by VOID-in-NULL-out.  This is good.  Because it had been uncomfortable dealing with the difference in meaning for a literal blank vs. a fetched blank:</p>
<pre><code>&gt;&gt; maybe-unused-var: _

&gt;&gt; unspaced ["a" maybe-unused-var "b"]
== "ab"

&gt;&gt; unspaced ["a" _ "b"]
== "a b"
</code></pre>
<p>I tried various ways of rationalizing this (for instance, "a WORD! doesn't act like a fetched version of itself, why should BLANK! have to?")  But I'll freely admit this was coming from a place of <em>"I want blank for space in string dialects--so I'll keep justifying it until I find a good-enough sounding excuse, even if it's kind of broken."</em></p>
<p>Of course, I'm only hurting myself when I do that.  This bit me when I was trying to factor the internals so that DELIMIT was based on the same code as REDUCE.  Because if I thought of DELIMIT as being a kind of post-processing pass on what a reduce was doing, it wouldn't have enough information to accomplish the distinction above:</p>
<pre><code>unspaced ["a" _ "b"]

Step 1: reduce ["a" _ "b"]
== ["a" _ "b"]
Step 2: ...
Step 3:
== "a b"
</code></pre>
<p>vs.</p>
<pre><code>unspaced ["a" maybe-unused-var "b"]

Step 1: reduce ["a" maybe-unused-var "b"]
== ["a" _ "b"]
Step 2: ...
Step 3:
== "ab" 
</code></pre>
<p><img src="https://forum.rebol.info/images/emoji/twitter/raised_hand.png?v=12" title=":raised_hand:" class="emoji" alt=":raised_hand:" loading="lazy" width="20" height="20"> <em>"What's step 2?"</em></p>
<h2>
<a name="everything-changed-2" class="anchor" href="https://forum.rebol.info#everything-changed-2"></a>Everything Changed...</h2>
<p>Now any transitions from blanks to NULL-ness or VOID-ness or SPACE-ness (or anything else) will be conscious acts of a dialect.  It can do that without being beholden to some idea that BLANK! has to be reserved for an implementation mechanic of something like MAYBE.</p>
<p>You would really make a variable NULL, and to have it disappear in something like a REDUCE or UNSPACED you'd literally use MAYBE to do that.</p>
<pre><code>&gt;&gt; var: null

&gt;&gt; reduce ["a" var "b"]
** Error: var is NULL and REDUCE doesn't like that  ; paraphrased :-)

&gt;&gt; reduce ["a" maybe var "b"]  ; MAYBE turns NULL into VOID
== "ab"
</code></pre>
<p>With BLANK! now freed up, I think if the string conversions interpret it as space, that's great!</p>
<pre><code>&gt;&gt; to text! [Hello _ New _ Blank _ World!]
== "Hello New Blank World!"
</code></pre>
<p>Armed with GET-BLOCK! as REDUCE, you have some great shorthand:</p>
<pre><code>&gt;&gt; var1: "Hello"
&gt;&gt; var2: 'World!

&gt;&gt; to text! reduce [var1 _ 'New _ "Blank" _ var2]
== "Hello New Blank World!"

&gt;&gt; to text! :[var1 _ 'New _ "Blank" _ var2]
== "Hello New Blank World!"
</code></pre>
<p>Pleasing and solid.  And the internals benefit--as I mentioned--by being able to do things like build DELIMIT on top of REDUCE.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/broom.png?v=12" title=":broom:" class="emoji only-emoji" alt=":broom:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/sparkles.png?v=12" title=":sparkles:" class="emoji only-emoji" alt=":sparkles:" loading="lazy" width="20" height="20"></p>
<p><sub><em>And it should go without saying at this point... but... Redbol and your own ideas could come in and do all this differently.</em></sub></p>
          <p><a href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/2</link>
        <pubDate>Sat, 16 Jul 2022 12:18:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1885-2</guid>
        <source url="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss">BLANK! (_) as SPACE in String-Oriented Dialects</source>
      </item>
      <item>
        <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Note: I'm kicking off this discussion with a conclusion from an otherwise outdated thread, circa 2020.)</em></p>
<hr>
<blockquote>
<p>Having had a fair amount of time to reflect on the evolution of things, I think we need to make undecorated word fetches not produce an error with NULL.  I've outlined the history of why they were erroring at the outset, and walking through it I think there's a coherent plan for when there is tolerance and when there is not (e.g. function arguments by default).</p>
<p>But today I realized something particularly pleasing about this.  We had a concept that BLANK!...due to its non-erroring status, would be the way of "disarming" a null assignment to a variable.  It's still going to be a way of disarming parameters for "blank in, null out", but not needed for a plain assignment.</p>
<p><strong>That frees up blank for dialect uses distinct from NULL.</strong></p>
<p>In particular, it recovers it for something that was tried for a time... being synonymous with space (<strong><code>#" "</code></strong>).  The concept emerged when it was called into question whether PRINT should default to adding implicit spaces, and how you should avoid it doing so.  <strong>print ["It" _ was _ "ugly"]</strong> if the common case didn't have implicit spaces, so ultimately we went with SPACED by default and you could write <strong>print unspaced [...]</strong> if that's what you wanted.</p>
<p>Yet <code>_</code> was deemed to need to behave just as NULL did, as you couldn't put a NULL in a variable.  So when you needed to, you would use blank, and it would be the non-erroring synonym.  It was a sad loss for when you wanted a nice way to note spaces, but seemed to be the way it had to be.</p>
<h2>Well, not any more!</h2>
<p>With non-erroring NULLs, dialects are free to distinguish the behavior of blanks and nulls.  NULL being the most obvious "nothing".  So why not bring back BLANK! as being a synonym for space?</p>
<p>It still has the "no delimiters applied" status of a CHAR!.  So <strong>spaced ["a" _ _ "b"]</strong> would still be just two spaces between the <strong>a</strong> and the <strong>b</strong>... not five.</p>
<p>Looking good!</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/1</link>
        <pubDate>Thu, 06 Feb 2020 23:32:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1885-1</guid>
        <source url="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss">BLANK! (_) as SPACE in String-Oriented Dialects</source>
      </item>
  </channel>
</rss>
