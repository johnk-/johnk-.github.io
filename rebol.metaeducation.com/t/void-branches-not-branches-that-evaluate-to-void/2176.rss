<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>VOID Branches (not branches that evaluate to void)</title>
    <link>https://rebol.metaeducation.com/t/void-branches-not-branches-that-evaluate-to-void/2176</link>
    <description>I&#39;ve mentioned before that [AUGMENT can be used to implement the legacy SWITCH/DEFAULT behavior](https://rebol.metaeducation.com/t/augment-add-parameters-and-refinements-after-the-fact/1216).

But looking at what seems like the &quot;correct&quot; formulation of that code today, we get:

    switch-d: enclose (augment :switch [
        /default &quot;Default case if no others are found&quot;
            [block!]
    ]) lambda [f [frame!]] [
        let def: f.default
        eval f else (maybe def)
    ]

It points out the existence of *void branches*... so not branches that evaluate to void (e.g. `[void]`) but code that evaluates to a branch to run, and that branch is void.

Considering this specific usage only, it suggests a semantic for ELSE of a VOID branch, which is that you want it to act like there was no branch at all.  e.g. as if you&#39;d written just **`eval f`** with no ELSE.

     &gt;&gt; if 10 &gt; 20 [1 + 2]
     == ~null~  ; anti

     &gt;&gt; if 10 &gt; 20 [1 + 2] else [10 + 20]
     == 30

     &gt;&gt; if 10 &gt; 20 [1 + 2] else (void)
     == ~null~  ; anti

Would the same apply to THEN?

     &gt;&gt; if true [1 + 2]
     == 3

     &gt;&gt; if true [1 + 2] then [10 + 20]
     == 30

     &gt;&gt; if true [1 + 2] then (void)
     == 3

:thinking: 

I don&#39;t know if it&#39;s great, but it&#39;s certainly better than evaluating to NULL (via some void-in-null-out rationale) because that would trigger an ELSE branch.

     &gt;&gt; if true [1 + 2] then (void) else [print &quot;we don&#39;t want this.&quot;]
     we don&#39;t want this.

But what should other branching constructs do, like CASE or SWITCH?  Might a void branch suggest &quot;opting out&quot; of that particular branch?

     case [
         1 &lt; 2 (void)
         3 &lt; 4 [print &quot;Should this run?&quot;]
     ]

A CASE (at least CASE:ALL) is supposed to be synonymous with a series of IF statements.  And IF can&#39;t exactly do that, unless it decided to be GHOST...

    &gt;&gt; 1 + 2 if 10 &gt; 20 (void)
    == 3

That would be a bit weird, but, it does sort of parallel what happens when ELSE and THEN effectively vaporize themselves.

As with most things on the edge of usefulness, I don&#39;t know about this... other than the situation of wanting to revoke the ELSE branch in SWITCH-D.  I&#39;ll keep an eye on it.</description>
    
    <lastBuildDate>Wed, 07 May 2025 12:00:56 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://rebol.metaeducation.com/t/void-branches-not-branches-that-evaluate-to-void/2176.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>VOID Branches (not branches that evaluate to void)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've mentioned before that <a href="https://rebol.metaeducation.com/t/augment-add-parameters-and-refinements-after-the-fact/1216">AUGMENT can be used to implement the legacy SWITCH/DEFAULT behavior</a>.</p>
<p>But looking at what seems like the "correct" formulation of that code today, we get:</p>
<pre><code>switch-d: enclose (augment :switch [
    /default "Default case if no others are found"
        [block!]
]) lambda [f [frame!]] [
    let def: f.default
    eval f else (maybe def)
]
</code></pre>
<p>It points out the existence of <em>void branches</em>... so not branches that evaluate to void (e.g. <code>[void]</code>) but code that evaluates to a branch to run, and that branch is void.</p>
<p>Considering this specific usage only, it suggests a semantic for ELSE of a VOID branch, which is that you want it to act like there was no branch at all.  e.g. as if you'd written just <strong><code>eval f</code></strong> with no ELSE.</p>
<pre><code> &gt;&gt; if 10 &gt; 20 [1 + 2]
 == ~null~  ; anti

 &gt;&gt; if 10 &gt; 20 [1 + 2] else [10 + 20]
 == 30

 &gt;&gt; if 10 &gt; 20 [1 + 2] else (void)
 == ~null~  ; anti
</code></pre>
<p>Would the same apply to THEN?</p>
<pre><code> &gt;&gt; if true [1 + 2]
 == 3

 &gt;&gt; if true [1 + 2] then [10 + 20]
 == 30

 &gt;&gt; if true [1 + 2] then (void)
 == 3
</code></pre>
<p><img src="https://rebol.metaeducation.com/images/emoji/twitter/thinking.png?v=14" title=":thinking:" class="emoji only-emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<p>I don't know if it's great, but it's certainly better than evaluating to NULL (via some void-in-null-out rationale) because that would trigger an ELSE branch.</p>
<pre><code> &gt;&gt; if true [1 + 2] then (void) else [print "we don't want this."]
 we don't want this.
</code></pre>
<p>But what should other branching constructs do, like CASE or SWITCH?  Might a void branch suggest "opting out" of that particular branch?</p>
<pre><code> case [
     1 &lt; 2 (void)
     3 &lt; 4 [print "Should this run?"]
 ]
</code></pre>
<p>A CASE (at least CASE:ALL) is supposed to be synonymous with a series of IF statements.  And IF can't exactly do that, unless it decided to be GHOST...</p>
<pre><code>&gt;&gt; 1 + 2 if 10 &gt; 20 (void)
== 3
</code></pre>
<p>That would be a bit weird, but, it does sort of parallel what happens when ELSE and THEN effectively vaporize themselves.</p>
<p>As with most things on the edge of usefulness, I don't know about this... other than the situation of wanting to revoke the ELSE branch in SWITCH-D.  I'll keep an eye on it.</p>
          <p><a href="https://rebol.metaeducation.com/t/void-branches-not-branches-that-evaluate-to-void/2176/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/void-branches-not-branches-that-evaluate-to-void/2176/1</link>
        <pubDate>Thu, 28 Mar 2024 13:07:17 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2176-1</guid>
        <source url="https://rebol.metaeducation.com/t/void-branches-not-branches-that-evaluate-to-void/2176.rss">VOID Branches (not branches that evaluate to void)</source>
      </item>
  </channel>
</rss>
