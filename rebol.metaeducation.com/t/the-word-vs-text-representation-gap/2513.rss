<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The WORD! vs. TEXT! Representation Gap</title>
    <link>https://rebol.metaeducation.com/t/the-word-vs-text-representation-gap/2513</link>
    <description>Something that seems to come up a lot is exemplified in this issue with Rebmake regarding optimization levels.

The issue is that C compilers have optimization switches (like `-O2` or `-Os`) which let you say how to optimize what you&#39;re building.  2 may indicate higher optimizations than 1 or 0.  &quot;s&quot; could mean optimize for size.

When you&#39;re translating something like this into a dialect, it&#39;s tempting to think of this as being either a WORD! or an INTEGER!, and not having to put it in ditto marks *(Note: I&#39;m going to call `&quot;` ditto marks from now on, to help distinguish them from the phenomenon of &quot;quoting&quot;)*.

    some-file.c [
        optimize: 2
    ]
    another-file.c [
        optimize: s
    ]

If your dialect happens to not be evaluating the slots, this gives you a clean representation.  In the particular case of Rebmake, this is often taken on the command line, and the command line processing will LOAD the thing you pass. So:

     r3 make.r optimize: s

That works.  And if you said **`optimize: &#39;s`** that would cause problems, because the shell thinks that&#39;s a quote mark that needs to be paired.

But if you&#39;re not lucky enough to be in an evaluative context, you&#39;d need a quote mark.

## But What If Optimization Gets Settings Like `-O2s` ?

It might seem neat to translate the string into an INTEGER! or WORD!.  You could compare integers against each other (e.g. to find out that 1 is greater than or less than the optimization level)... if they were both integers.  It feels nice to turn things into words.

But if you do a mapping--and don&#39;t fully control the domain you&#39;re mapping from--this can throw you a curveball.  And when it does, you&#39;ll have to put it in a string.  Now you&#39;ve got INTEGER! `[0 1 2]`, WORD! `[s z]`, or TEXT! `[&quot;2s&quot; and other illegal things]`

At which point you&#39;d probably ask: **&quot;Since I don&#39;t really control this, should I have left it as a string?&quot;**  :frowning: 

Should you have stayed in your lane, and let it be `[&quot;0&quot; &quot;1&quot; &quot;2&quot; &quot;s&quot; &quot;z&quot;]` to start with?

## For Now, WORD! and INTEGER! Works, But...

I hit a problem because there was inconsistency when some places used **`&quot;s&quot;`** and others uses **`s`**.

I&#39;m canonizing to the WORD! just to keep making progress.  But this kind of issue feels like it comes up often.</description>
    
    <lastBuildDate>Sat, 19 Jul 2025 07:23:13 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://rebol.metaeducation.com/t/the-word-vs-text-representation-gap/2513.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The WORD! vs. TEXT! Representation Gap</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Something that seems to come up a lot is exemplified in this issue with Rebmake regarding optimization levels.</p>
<p>The issue is that C compilers have optimization switches (like <code>-O2</code> or <code>-Os</code>) which let you say how to optimize what you're building.  2 may indicate higher optimizations than 1 or 0.  "s" could mean optimize for size.</p>
<p>When you're translating something like this into a dialect, it's tempting to think of this as being either a WORD! or an INTEGER!, and not having to put it in ditto marks <em>(Note: I'm going to call <code>"</code> ditto marks from now on, to help distinguish them from the phenomenon of "quoting")</em>.</p>
<pre><code>some-file.c [
    optimize: 2
]
another-file.c [
    optimize: s
]
</code></pre>
<p>If your dialect happens to not be evaluating the slots, this gives you a clean representation.  In the particular case of Rebmake, this is often taken on the command line, and the command line processing will LOAD the thing you pass. So:</p>
<pre><code> r3 make.r optimize: s
</code></pre>
<p>That works.  And if you said <strong><code>optimize: 's</code></strong> that would cause problems, because the shell thinks that's a quote mark that needs to be paired.</p>
<p>But if you're not lucky enough to be in an evaluative context, you'd need a quote mark.</p>
<h2><a name="p-8545-but-what-if-optimization-gets-settings-like-o2s-1" class="anchor" href="https://rebol.metaeducation.com#p-8545-but-what-if-optimization-gets-settings-like-o2s-1"></a>But What If Optimization Gets Settings Like <code>-O2s</code> ?</h2>
<p>It might seem neat to translate the string into an INTEGER! or WORD!.  You could compare integers against each other (e.g. to find out that 1 is greater than or less than the optimization level)... if they were both integers.  It feels nice to turn things into words.</p>
<p>But if you do a mapping--and don't fully control the domain you're mapping from--this can throw you a curveball.  And when it does, you'll have to put it in a string.  Now you've got INTEGER! <code>[0 1 2]</code>, WORD! <code>[s z]</code>, or TEXT! <code>["2s" and other illegal things]</code></p>
<p>At which point you'd probably ask: <strong>"Since I don't really control this, should I have left it as a string?"</strong>  <img src="https://rebol.metaeducation.com/images/emoji/twitter/frowning.png?v=14" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
<p>Should you have stayed in your lane, and let it be <code>["0" "1" "2" "s" "z"]</code> to start with?</p>
<h2><a name="p-8545-for-now-word-and-integer-works-but-2" class="anchor" href="https://rebol.metaeducation.com#p-8545-for-now-word-and-integer-works-but-2"></a>For Now, WORD! and INTEGER! Works, But...</h2>
<p>I hit a problem because there was inconsistency when some places used <strong><code>"s"</code></strong> and others uses <strong><code>s</code></strong>.</p>
<p>I'm canonizing to the WORD! just to keep making progress.  But this kind of issue feels like it comes up often.</p>
          <p><a href="https://rebol.metaeducation.com/t/the-word-vs-text-representation-gap/2513/1">Read full topic</a></p>
        ]]></description>
        <link>https://rebol.metaeducation.com/t/the-word-vs-text-representation-gap/2513/1</link>
        <pubDate>Sat, 19 Jul 2025 07:23:13 +0000</pubDate>
        <guid isPermaLink="false">rebol.metaeducation.com-post-2513-1</guid>
        <source url="https://rebol.metaeducation.com/t/the-word-vs-text-representation-gap/2513.rss">The WORD! vs. TEXT! Representation Gap</source>
      </item>
  </channel>
</rss>
