<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>General Tools - AltRebol</title>
    <link>https://rebol.metaeducation.com/c/domains/general-tools/29</link>
    <description>Topics in the &#39;General Tools&#39; category Discuss various utilities written in Rebol here that aren&#39;t system tools eg. rebolbot, twitter</description>
    
      <lastBuildDate>Fri, 11 Oct 2024 02:23:03 +0000</lastBuildDate>
      <atom:link href="https://rebol.metaeducation.com/c/domains/general-tools/29.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Barriers to Source-To-Source Transformations</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>General Tools</category>
          <description><![CDATA[
            <p><strong>Doing source-to-source transformations <em>seems</em> like something Rebol would be great at.</strong></p>
<p>Why not LOAD your file (powered by TRANSCODE)... do some structural tweaks, and spit it back out again with SAVE (powered by MOLD).  What could be simpler?</p>
<p>But the first thing you'll notice is: <strong>Oops, all your comments are gone.</strong></p>
<p>Next you'll see <strong>the indentation and spacing is almost all thrown out</strong>.  Cells in arrays store a NEWLINE_BEFORE marker to record if they had a newline before them (and there's an additional NEWLINE_AT_TAIL marker on the array as a whole)...but that's all you get.  MOLD just uses some heuristics to indent the code in a canon style.</p>
<h2><a name="p-7839-vague-proposals-appear-then-fizzle-1" class="anchor" href="https://rebol.metaeducation.com#p-7839-vague-proposals-appear-then-fizzle-1"></a>Vague Proposals Appear, Then Fizzle</h2>
<p>If you wait long enough, someone will suggest that there be a mode in which TRANSCODE doesn't toss out the whitespace information, but keeps it around somehow.</p>
<p>One terrible version of this idea actually interleaves weird values into the arrays, where your processing code would have to skip it:</p>
<pre><code>&gt;&gt; transcode:verbatim "a b  c   d"
== [a b #[space! 2] c #[space 3] d]
</code></pre>
<p>That is a complete dead end, as it would mean any transformation code you used could not be shared with "normal code".</p>
<p>So what you'd need instead would be some way to expand out that NEWLINE_BEFORE flag into richer information.  But cells use pretty much all their bits (although there are 32 bits free in the headers of cells in the 64 bit build...however I'd be loathe to use it for this.)</p>
<p>One idea would be to load the data into the cells as in the :VERBATIM example above, except have operations skip over them as if they weren't there.</p>
<ul>
<li>
<p>On the one hand, this this would fundamentally screw with the "simple" design the language is aiming for.</p>
</li>
<li>
<p>On the other hand, this is essentially what UTF-8 Everywhere does for <strong><code>String</code></strong> in managing the series length (in codepoints) as being independent of the number of physical units (in bytes).  It would just be extending that logic to <strong><code>Array</code></strong>, meaning arrays would have to be enumerated with a function like <code>Skip_Element()</code> or <code>Step_Back_Element()</code> instead of just incrementing a pointer with ++ and --.</p>
</li>
<li>
<p>I've actually thought about moving away from pure pointer incrementing and decrementing in order to allow arrays to be built out of discontiguous segments, which could help several scenarios in optimization...with reconciliation into contiguous bits being done on an as-needed basis.</p>
</li>
</ul>
<p>Another concept would be to have cells be able to "redirect" the <strong><code>Extra</code></strong> pointer in the second slot, and set a header flag saying "the Extra in this cell can be found by following the pointer in the extra slot".  And then that can point to an allocation somewhere that holds the formatting information.</p>
<h2><a name="p-7839-not-happening-any-time-soon-but-worth-remembering-2" class="anchor" href="https://rebol.metaeducation.com#p-7839-not-happening-any-time-soon-but-worth-remembering-2"></a>Not Happening Any Time Soon, But Worth Remembering</h2>
<p>I can't hold Ren-C's interesting ideas hostage to such things, there's too much other stuff going on.</p>
<p>But noticing the similarity of the UTF-8 Everywhere transition to the idea of skipped formatting cells...and then tying that into what could be the advantages of discontiguous arrays...got me to think.</p>
<p>We could perhaps have discontiguous strings as well--leveraging illegal UTF-8 bytes as the signal of pointers embedded in the data.  It might be interesting if the mechanics could be merged.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://rebol.metaeducation.com/t/barriers-to-source-to-source-transformations/2313">Read full topic</a></p>
          ]]></description>
          <link>https://rebol.metaeducation.com/t/barriers-to-source-to-source-transformations/2313</link>
          <pubDate>Fri, 11 Oct 2024 02:23:03 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">rebol.metaeducation.com-topic-2313</guid>
          <source url="https://rebol.metaeducation.com/t/barriers-to-source-to-source-transformations/2313.rss">Barriers to Source-To-Source Transformations</source>
        </item>
        <item>
          <title>(U)PARSE + CALL: Controlling Of Interactive CLI Apps</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>General Tools</category>
          <description><![CDATA[
            <p>A long time ago (e.g. college), I used something in Tcl called EXPECT...which was a great way of driving interactive console applications.</p>
<p>You'd specify the patterns you wanted to wait on (that came from the app's stdout), and script the responses to be fed to stdin, in an interactive fashion.</p>
<p>Today people think a lot more about exposing functionality through APIs (with whatever Java or XML and such).  So it's more rare that you have to resort to writing "stdio robots".</p>
<p>But it's a pretty easy-to-absorb test case, and could be a real showcase for UPARSE...as well as a good challenge for a renewed PORT! model.</p>
<p>I found this code from <a class="mention" href="https://rebol.metaeducation.com/u/brett">@Brett</a> on Trello, where the need for an R3 version of CALL was being articulated.  It gives some EXPECT-like functionality:</p>
<aside class="onebox githubblob" data-onebox-src="https://github.com/codebybrett/r3-scripts/blob/master/call-server.r">
  <header class="source">

      <a href="https://github.com/codebybrett/r3-scripts/blob/master/call-server.r" target="_blank" rel="noopener">github.com/codebybrett/r3-scripts</a>
  </header>

  <article class="onebox-body">
    <h4><a href="https://github.com/codebybrett/r3-scripts/blob/master/call-server.r" target="_blank" rel="noopener">call-server.r</a></h4>

<div class="git-blob-info">
  <a href="https://github.com/codebybrett/r3-scripts/blob/master/call-server.r" rel="noopener"><code>master</code></a>
</div>


      <pre><code class="lang-r">REBOL [
	Title: "call-server"
	File: %call-server.r
	Author: "Brett Handley"
	Date: 22-Jun-2013
	Purpose: "Provides a way to capture output from console program and send input to interactive console programs."
	License: {

		Copyright 2013 Brett Handley

		Licensed under the Apache License, Version 2.0 (the "License");
		you may not use this file except in compliance with the License.
		You may obtain a copy of the License at

			http://www.apache.org/licenses/LICENSE-2.0

		Unless required by applicable law or agreed to in writing, software
		distributed under the License is distributed on an "AS IS" BASIS,
		WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		See the License for the specific language governing permissions and
</code></pre>



  This file has been truncated. <a href="https://github.com/codebybrett/r3-scripts/blob/master/call-server.r" target="_blank" rel="noopener">show original</a>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>This seems like a good domain to build some simple-but-impressive demos for... in the "layperson could have built this robot" sense (if we can push it to that point).</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://rebol.metaeducation.com/t/u-parse-call-controlling-of-interactive-cli-apps/1816">Read full topic</a></p>
          ]]></description>
          <link>https://rebol.metaeducation.com/t/u-parse-call-controlling-of-interactive-cli-apps/1816</link>
          <pubDate>Sat, 14 May 2022 04:52:57 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">rebol.metaeducation.com-topic-1816</guid>
          <source url="https://rebol.metaeducation.com/t/u-parse-call-controlling-of-interactive-cli-apps/1816.rss">(U)PARSE + CALL: Controlling Of Interactive CLI Apps</source>
        </item>
        <item>
          <title>Not Scrapping Encapping...now tested on Win/Mac/Linux!</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>General Tools</category>
          <description><![CDATA[
            <p>We haven't talked a lot about encapping in Ren-C.  But it was at one point written.</p>
<p>I decided to dust it off and bring it up to date.  Then I put together a test using the new Ren-C cross-platform GitHub Action.  Here you can see encapping working on Linux, Windows, and Mac!</p>
<p><a href="https://github.com/metaeducation/ren-c-encap/actions/runs/695309137">https://github.com/metaeducation/ren-c-encap/actions/runs/695309137</a></p>
<p>The tests are pretty simple.</p>
<ul>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c-encap/blob/71c2c4275f56e62fdef94a243415293e4607d1e3/.github/workflows/test-encap.yml#L102">One of them just gives a spec of a filename and a binary blob to put in the executable</a></strong>.  Then it makes sure that can be extracted back verbatim.</p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c-encap/blob/71c2c4275f56e62fdef94a243415293e4607d1e3/.github/workflows/test-encap.yml#L118">Another adds actual script code, with a %main.reb</a></strong>. This triggers a convention that the de-encapped code will run such a named script.  The test captures the output of running the generated executable and makes sure it printed "Hello Encap".</p>
</li>
</ul>
<h2><a name="p-5007-why-not-scrap-the-encap-1" class="anchor" href="https://rebol.metaeducation.com#p-5007-why-not-scrap-the-encap-1"></a>Why Not Scrap The Encap?</h2>
<p>I've been trying to get rid of things that aren't a focus...especially when it comes to C extensions and complex build dependencies that aren't worth their cost.</p>
<p>Encap--however--is <em>entirely usermode code</em>.  This means it makes a really good case study for BINARY! parsing.  It's exercising the system on a complex real problem.</p>
<p>I'm hoping that the design of UPARSE can be informed from this, because it really showed some weaknesses of binary parsing.</p>
<h2><a name="p-5007-its-on-a-stronger-foundation-than-rebol2-encap-2" class="anchor" href="https://rebol.metaeducation.com#p-5007-its-on-a-stronger-foundation-than-rebol2-encap-2"></a>It's On A Stronger Foundation Than Rebol2 Encap</h2>
<p>What Rebol2 did was just append data blindly to the end of an executable.  That's not a "legitimate" approach; compared to actually understanding the file format (PE on Windows, ELF on Linux, Mach-O on Mac) and injecting a resource in the approved fashion.</p>
<p>When you just append data, a lot of tools and OS checkers will think your file is just corrupt...because it doesn't match the size in the header.  A program like <code>strip</code> (which usually gets rid of debug symbols and the like) would just discard it.  If you use a tool like a resource editor or an EXE compressor to fiddle with the binary, it could give you an error or throw it away.</p>
<p>(Unfortunately OS X doesn't really have a good way to move around sections of Mach-O executables, so appending is the only choice there.)</p>
<p><em>(More complex tests should demonstrate the encapping surviving various manipulations...such as resource editing and executable compression.  They should also be able to delete and replace the payloads in already-encapped executables.)</em></p>
<h2><a name="p-5007-a-good-start-but-would-need-more-work-3" class="anchor" href="https://rebol.metaeducation.com#p-5007-a-good-start-but-would-need-more-work-3"></a>A Good Start, But Would Need More Work</h2>
<p>When you encap a folder into the executable, it gets zipped up.  Right now what happens is that the block of unzipped data is put into <strong>system/options/encap</strong> and you have to poke around in that block manually.</p>
<p>It would be nice if your script could see that folder as its "current directory"... kind of like the storage scheme.  cc: <a class="mention" href="https://rebol.metaeducation.com/u/rgchris">@rgchris</a>  If the contents of the ZIP are large you might want it to only expand individual files on-demand.  This might suggest being built more generally on a "ZIP file scheme", which can still work if that ZIP file is embedded in a byte range of an EXE file.</p>
<p>The basic invocation of the script is only a placeholder.  It doesn't get command line arguments, for instance.  And since I'm hacking on the module system on another branch, I'm going to get that sorted out before worrying too much about it.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://rebol.metaeducation.com/t/not-scrapping-encapping-now-tested-on-win-mac-linux/1576">Read full topic</a></p>
          ]]></description>
          <link>https://rebol.metaeducation.com/t/not-scrapping-encapping-now-tested-on-win-mac-linux/1576</link>
          <pubDate>Sun, 28 Mar 2021 15:36:34 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">rebol.metaeducation.com-topic-1576</guid>
          <source url="https://rebol.metaeducation.com/t/not-scrapping-encapping-now-tested-on-win-mac-linux/1576.rss">Not Scrapping Encapping...now tested on Win/Mac/Linux!</source>
        </item>
        <item>
          <title>Rebolbot - topic to discuss enhancements and bugs</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>General Tools</category>
          <description><![CDATA[
            <p>One of the annoyances that has plagued <a href="http://chat.stackoverflow.com/rooms/291/rebol">SO chat</a> has been the appearance in the feeds of incorrectly categorized feed items, eg <span class="hashtag-raw">#REbol</span> and <em>red</em> tags from newbie questions on SO.</p>
<p>I just noticed an undocumented API feature which has been exploited <a href="https://stackapps.com/questions/7442/ro-chat-message-delete-option">here</a> which seems to say that if a room owner posts</p>
<pre><code>/messages/$messageid delete
</code></pre>
<p>within 2 minutes, even feed items can be deleted.</p>
<p>I think the simplest way is to do something like this</p>
<pre><code>@rebolbot delete feed
</code></pre>
<p>and it deletes the last feed item within 2 minutes of the current time.</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://rebol.metaeducation.com/t/rebolbot-topic-to-discuss-enhancements-and-bugs/142">Read full topic</a></p>
          ]]></description>
          <link>https://rebol.metaeducation.com/t/rebolbot-topic-to-discuss-enhancements-and-bugs/142</link>
          <pubDate>Mon, 12 Jun 2017 21:37:48 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">rebol.metaeducation.com-topic-142</guid>
          <source url="https://rebol.metaeducation.com/t/rebolbot-topic-to-discuss-enhancements-and-bugs/142.rss">Rebolbot - topic to discuss enhancements and bugs</source>
        </item>
        <item>
          <title>About the General Tools category</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>General Tools</category>
          <description><![CDATA[
            <p>Discuss various utilities written in Rebol here that aren't system tools eg. rebolbot, twitter</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://rebol.metaeducation.com/t/about-the-general-tools-category/141">Read full topic</a></p>
          ]]></description>
          <link>https://rebol.metaeducation.com/t/about-the-general-tools-category/141</link>
          <pubDate>Mon, 12 Jun 2017 21:30:48 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">rebol.metaeducation.com-topic-141</guid>
          <source url="https://rebol.metaeducation.com/t/about-the-general-tools-category/141.rss">About the General Tools category</source>
        </item>
  </channel>
</rss>
