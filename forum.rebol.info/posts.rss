<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>AltRebol - Latest posts</title>
    <link>https://forum.rebol.info</link>
    <description>Latest posts</description>
      <item>
        <title>Singular ANY-SPACE vs. Plural WHITESPACE?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>Transitions have made some parse rules get longer:</p>
<pre><code> [any whitespace]  ; being repurposed--seems like "pick one" not a loop construct
 =&gt;
 [while whitespace]  ; being repurposed to arity-2; arity-1 form is unsettling
 =&gt;
 [opt some whitespace]  ; null if rule doesn't match, a little ugly
 =&gt;
 [maybe some whitespace]  ; void if rule doesn't match, longer but prettier
</code></pre>
<p>I like MAYBE and I've explained the reasons why I like pulling the optionality out from the looping construct.</p>
<p>But this seems a bit overlong...especially considering that whitespace is such a long word.</p>
<p>It occurs to me that "whitespace" can be itself plural.  Might we say that ANY-SPACE is a character set, and then <strong><code>whitespace: [some any-space]</code></strong> ?</p>
<p>This at least gets you down to <strong><code>[maybe whitespace]</code></strong> or <strong><code>[opt whitespace]</code></strong>...which seems pretty minimal for the intent (unless you're going to go with abbreviations like <strong><code>ws*</code></strong> or similar).</p>
<p>I really don't know how many cases there are where you are willing to tolerate only a single unit of an arbitrary whitespace character.  When does that come up?  Usually if you're matching a single whitespace character you know which one you're reacting to...and the only time you'd ever bundle up a collection of them together is when you're willing to skip a lot of it.</p>
<p>I doubt there'd be many uses of ANY-SPACE in a rule, and that it would just be used to compound other character collections.</p> ]]></description>
        <link>https://forum.rebol.info/t/singular-any-space-vs-plural-whitespace/1828/1</link>
        <pubDate>Thu, 19 May 2022 09:05:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5865</guid>
      </item>
      <item>
        <title>Issues with &quot;Invisibles&quot;: a truly disappearing COMMENT</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[  ]]></description>
        <link>https://forum.rebol.info/t/issues-with-invisibles-a-truly-disappearing-comment/405/8</link>
        <pubDate>Thu, 19 May 2022 05:01:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5864</guid>
      </item>
      <item>
        <title>Rethinking IF and IF* - IF/ONLY, IF/OPT, safety vs. complexity</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[  ]]></description>
        <link>https://forum.rebol.info/t/rethinking-if-and-if-if-only-if-opt-safety-vs-complexity/212/13</link>
        <pubDate>Thu, 19 May 2022 03:33:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5863</guid>
      </item>
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>2 posts were split to a new topic: <a href="/t/how-is-count-up-implemented/1827">How Is COUNT-UP Implemented?</a></p> ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/13</link>
        <pubDate>Wed, 18 May 2022 20:21:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5862</guid>
      </item>
      <item>
        <title>WHILE [Cold Feet]</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="gchiu" data-post="3" data-topic="1772">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>If you wanted one could try <code>MAYBE</code></p>
</blockquote>
</aside>
<p>So actually...something very interesting has happened now that void assignments are no-ops, and MAYBE is becoming more universal (vs. a weird enfix kludge for opting out of variable assignments, sometimes).</p>
<p>OPT SOME and MAYBE SOME are actually different intentions!</p>
<pre><code>; OPT gives you NULL if there's no match, and continues the rules

&gt;&gt; uparse "aaa" [(x: 10) x: opt some "b", some "a"]
== "a"

&gt;&gt; x
; null

; MAYBE gives you VOID if there's no match, and continues the rules

&gt;&gt; uparse "aaa" [(x: 10) x: maybe some "b", some "a"]
== "a"

&gt;&gt; x
== 10
</code></pre>
<p><strong>The arguments for separating into two components just keep getting stronger.</strong>  As I look at the code, I've noticed that it's chronic for people to historically have used Rebol2 ANY when they really meant SOME.  Since "zero or more" will always work on situations where you have "one or more", there was no incentive to be clear about the intent...so lazy people would maybe even have favored ANY just because it was one less character.  When you make the "zero" part explicit, it means laziness favors writing better code--why type the OPT or MAYBE if you don't actually need it?</p>
<p>This is solidifying pretty clearly IMO.  And it's great how UPARSE doesn't have dark corners where you find you have to use a block, or can only use simple rules.  I'm finding it satisfying to rewrite things and think it comes off clearer.</p>
<pre><code>uparse "..." [remove [while newline]]
=&gt;
uparse "..." [maybe remove some newline]
</code></pre>
<p><em>So logical.</em>  <img src="https://forum.rebol.info/images/emoji/twitter/vulcan_salute.png?v=9" title=":vulcan_salute:" class="emoji" alt=":vulcan_salute:">  It's really playing to the uniqueness of the medium.</p> ]]></description>
        <link>https://forum.rebol.info/t/while-cold-feet/1772/7</link>
        <pubDate>Wed, 18 May 2022 19:59:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5861</guid>
      </item>
      <item>
        <title>undefined vs. null in JavaScript</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>JavaScript distinguishes "undefined" and "null" in something of the way that ~unset~ and NULL are distinct.  An undefined variable is one you haven't assigned yet, NULL is one you've set to NULL.</p>
<pre><code>// Chrome Console Session
&gt; asdf
VM66:1 Uncaught ReferenceError: asdf is not defined

&gt; typeof asdf
&lt;- "undefined"

&gt; asdf = null
&lt;- null

&gt; asdf
&lt;- null

&gt; typeof asdf
&lt;- "object"
</code></pre>
<p><em>(If you're curious why the <strong>typeof</strong> null is an object in JavaScript: <a href="https://stackoverflow.com/questions/18808226/why-is-typeof-null-object">"Because the spec says so.  This is generally regarded as a mistake."</a>.  The move of not having an answer for the value of the type, e.g. saying the answer to <strong>type of null</strong> is null - is much better)</em></p> ]]></description>
        <link>https://forum.rebol.info/t/undefined-vs-null-in-javascript/1826/1</link>
        <pubDate>Wed, 18 May 2022 11:22:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5859</guid>
      </item>
      <item>
        <title>Why We Allow Isotope Assignments (e.g. variable: ~unset~)</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>2 posts were split to a new topic: <a href="/t/why-isnt-print-invisible/1824">Why Isn't PRINT Invisible?</a></p> ]]></description>
        <link>https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206/3</link>
        <pubDate>Wed, 18 May 2022 07:12:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5854</guid>
      </item>
      <item>
        <title>NULL in the libRebol API...and VOID? =&gt; NULL?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[  ]]></description>
        <link>https://forum.rebol.info/t/null-in-the-librebol-api-and-void-null/597/3</link>
        <pubDate>Wed, 18 May 2022 03:03:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5853</guid>
      </item>
      <item>
        <title>How to Subvert Voidification?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1304">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But refinements aren't as flexible as decorating specific branches. <strong>That way you can call out which ones you want to subvert voidifcation, and which ones you don't.</strong> [emphasis mine]</p>
<pre><code> wrapper: func [x y] [
      case [
          x &gt; y :[wrapped x + y]
          x &lt; y :[wrapped x - y]
          default [0]
     ]
 ]
</code></pre>
</blockquote>
</aside>
<p>This was written two years ago, prior to isotopes.</p>
<p>At that time, VOID! was a first class value that represented a non-convertible intent from null.  When a NULL was changed into void, it was a <em>conflating distortion</em> of two semantically distinct types.</p>
<p>So there were two potential motivations you might want to mark a branch to subvert this:</p>
<ul>
<li>
<p><strong>honest</strong> - The <a class="mention" href="/u/rgchris">@rgchris</a> reason (<em>"don't corrupt my value...it's a NULL and I meant NULL"</em>)</p>
</li>
<li>
<p><strong>dishonest</strong> - A desire to communicate to an adjoining ELSE-or-THEN-like-construct that although you took a branch and ran code, you didn't take a branch...so it reacts as if you hadn't.</p>
</li>
</ul>
<p>I empathized with the honest reason, and now isotopes have supplanted voidification as <em>the</em> solution.  <a href="https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799">~null~ isotopes preserve null intent, and I'm pretty sure we're all square on this now</a>.</p>
<p>Somewhere along the line I got the weird idea that the dishonest reason was worth supporting.  But allowing it isn't just technically esoteric and weird... <em>it also breaks the invariant of knowing from the outside of a conditional construct whether it ran code or not</em>.</p>
<p>You might want to build higher-level conditional constructs out of lower-level ones... much the way I've shown how to build loops on top of multiple loops... with pure NULL uniquely signaling breaks.  If a user could pass in a kind of branch that broke the rules, your higher-level conditional won't be able to function correctly.</p>
<p><strong>So no more empathy for the dishonest purpose!</strong>  We can forget about the idea of an annotation to say that a branch should run and return pure null, and instead use smarter things...<a href="https://forum.rebol.info/t/why-then-and-else-are-mutually-exclusive/1080/9">like input-decaying *ELSE and *THEN</a>!</p>
<p>This opens up better meanings for the @[...] branching, and there's already something on the table for that.</p> ]]></description>
        <link>https://forum.rebol.info/t/how-to-subvert-voidification/1304/2</link>
        <pubDate>Tue, 17 May 2022 22:47:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5852</guid>
      </item>
      <item>
        <title>Why THEN and ELSE are Mutually Exclusive</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>I've cleaned up the 8 posts that were in this thread to beeline to its conclusion: that THEN and ELSE both turn NULL branch products into ~null~ isotopes...and that this is the law of the land for all branches now.</p>
<h2><em>But Requesting Not To Isotopify Was Completely Backwards!</em></h2>
<p><img src="https://forum.rebol.info/images/emoji/twitter/back.png?v=9" title=":back:" class="emoji only-emoji" alt=":back:"></p>
<p>What we <em>really</em> wanted was a way to ask the THEN or ELSE to <strong>decay its input</strong>!</p>
<p>It's the consumer of the branch who is weird, not the producer.  After all, imagine if that weird "don't decay" branch idea existed:</p>
<pre><code>] then @[
   ... pages ...
   ... of ...
   ... code ...
   null
]
else [
   ... by the time you get here, the @ is far off the screen ...
   ... you've forgotten about it! ...
]
</code></pre>
<p>But what if the ELSE said it considers ~null~ isotopes to be the same as NULL.  We could have input-decaying THEN and ELSE!</p>
<pre><code>] then [
   ...
   null
]
*else [
    print "This will run!"
]
</code></pre>
<p>This puts the idea that you're driving from the nullity of the immediate left result at a more appropriate place.</p>
<p>I've chosen to specialize THEN/DECAY and ELSE/DECAY with the shorthand of <strong><code>*THEN</code></strong> and <strong><code>*ELSE</code></strong> with the star on the left, to accentuate that its doing some pre-processing before the operation.  The parallels are <strong><code>DID*</code></strong> and <strong><code>DIDN'T*</code></strong>, which put the star on the right to indicate it's decaying the argument to the right.  If anyone has a better idea feel free to suggest it.</p>
<p>Elegant!</p> ]]></description>
        <link>https://forum.rebol.info/t/why-then-and-else-are-mutually-exclusive/1080/9</link>
        <pubDate>Tue, 17 May 2022 22:26:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5851</guid>
      </item>
      <item>
        <title>Multiple Returns and Branching: Could It Unseat Voidification?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[  ]]></description>
        <link>https://forum.rebol.info/t/multiple-returns-and-branching-could-it-unseat-voidification/1408/6</link>
        <pubDate>Tue, 17 May 2022 19:34:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5849</guid>
      </item>
      <item>
        <title>Contemplating UPARSE-VALUE</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>Once upon a time, PARSE was willing to take rules that were not BLOCK! and do "simple parsing".  Ultimately this was thought better of and became SPLIT...because that wasn't a very interesting polymorphism.</p>
<p>But... since PARSE is at heart a matching task, it seems there might be more accommodation when the input value is not a block... and you want to do some top level pattern matching.  Consider something like this:</p>
<pre><code>case [
     integer? item [
         print "Not a series, so, have to write handling code here"
     ]
     text? item [
         print "A series, but maybe we want to do something else"
     ]
     block? item [
         print "Okay finally we can use the parse we mean..."
         uparse item [...rules...]
     ]
] else [
   fail "Whatever"
]
</code></pre>
<p>It's something of a missed opportunity, and when I see this I start thinking along these lines:</p>
<pre><code>uparse reduce [item] [
     integer! &lt;end&gt; (print "More convenient, perhaps...")
         |
     text! &lt;end&gt; (print "Depends on the use case...")
         |
     into block! &lt;end&gt; [
        (print "Your rules here I guess...")
     ]
] else [
    fail "Whatever"
]
</code></pre>
<p>On first glance it's not necessarily an improvement, but... let's say for a minute that we have a UPARSE-VALUE which implicitly throws in the <code>&lt;end&gt;</code>:</p>
<pre><code>uparse-value item [
     integer! (print "Okay, this...")
         |
     text! (print "Seems a bit cleaner...")
         |
     into block! [
        (print "Your rules here I guess...")
     ]
] else [
    fail "Whatever"
]
</code></pre>
<p>This is just a high-level thought of pushing down the higher level matching tasks into UPARSE instead of keeping it fully separate.  If your input was calculated, you could still call it up with <code>&lt;input&gt;</code> ... although that wouldn't be available to the GROUP! code.</p>
<pre><code>&gt;&gt; uparse-value 1 + 2 [integer! (print "int") &lt;input&gt; | text! (print "text", #text)]
int
== 3

&gt;&gt; uparse-value "foo" [integer! (print "int") &lt;input&gt; | text! (print "text", #text)]
text
== #text
</code></pre>
<p>But you're no worse off than in a switch statement that doesn't have calculated input captured under a name.  (Slightly better, in fact, since you have a means of calling up the calculated input.)</p>
<p>It's just a thought, because I've seen this pattern several times: "I have a decision tree but I can't start doing parsing until I have a series".  This is just an idea about stretching all the matching and extraction logic that is going to be needed in UPARSE anyway to apply to single values.</p>
<h2>UPARSE-VALUE or UPARSE/VALUE</h2>
<p>This strongly parallels the LOAD-VALUE vs. LOAD issue.  It seemed to make more sense in that case to separate it out so LOAD was fully generic and unconcerned with the /VALUE aspect.  This might or might not have the same rationale as to why UPARSE shouldn't internally be concerned with the behavior.</p> ]]></description>
        <link>https://forum.rebol.info/t/contemplating-uparse-value/1822/1</link>
        <pubDate>Tue, 17 May 2022 08:43:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5848</guid>
      </item>
      <item>
        <title>Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>The nature of MAYBE is changing. But here was the old implementation to show that it was possible, but much less flexible than the new definition: you won't have to use with a SET-WORD! at all, and will work with multiple return value syntax, etc!</p>
<pre><code>maybe: enfixed func* [
    "Set word or path to a default value if that value is a value"
    return: [&lt;opt&gt; any-value!]
    'target [set-word! set-path!]
        "The word to which might be set"
    optional [&lt;opt&gt; any-value!]
        "Value to assign only if it is not null"
][
    if semiquoted? 'optional [
        ;
        ; DEFAULT requires a BLOCK!, MAYBE does not.  Catch `x: maybe [...]`
        ;
        fail @optional [
            "Literal" type of :optional "used w/MAYBE, use () if intentional"
        ]
    ]

    ; Note that right evaluates before left here:
    ; https://github.com/rebol/rebol-issues/issues/2275
    ;
    if null? :optional [return get/any target]
    return set target :optional
]</code></pre> ]]></description>
        <link>https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/6</link>
        <pubDate>Tue, 17 May 2022 03:39:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5847</guid>
      </item>
      <item>
        <title>Non-Interstitial Invisibles: More Trouble Than They&#39;re Worth?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1582">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Early on, I wanted to avoid situations where an invisible could be in a position where it might look like it was an assignment:</p>
<pre><code>x: elide print "It's confusing when X gets [a]"
append [] 'a
</code></pre>
<p>Since the ELIDE vanished, the result of the APPEND is what X gets. Confusing!</p>
<p>So at first, I figured it should be illegal to do that.</p>
</blockquote>
</aside>
<h2>I HAVE AN ANNOUNCEMENT TO MAKE <img src="https://forum.rebol.info/images/emoji/twitter/mega.png?v=9" title=":mega:" class="emoji" alt=":mega:">
</h2>
<p><em>Actually, it's many announcements</em>, but it all ties into a simple resolution of the above.</p>
<pre><code>&gt;&gt; x: 10
== 10

&gt;&gt; x: elide print "This is the way forward."
== 10

&gt;&gt; x
== 10
</code></pre>
<p><strong>Voids on the right hand side of an assignment simply don't change the variable from whatever it is.  The expression evaluates to the variable's old value.</strong></p>
<p>This has profound ramifications for functions like MAYBE <em>(more on this soon...)</em>, which previously had to do weird left-quoting mechanics to get the old value:</p>
<pre><code>&gt;&gt; x: 10
== 10

&gt;&gt; x: maybe 20
== 20

&gt;&gt; x
== 20

&gt;&gt; x: maybe null
== 20  ; had to left quote and GET the SET-WORD! of X to evaluate to it

&gt;&gt; x
== 20
</code></pre>
<p>But something like MAYBE can now simply be "opportunistically invisible", sometimes returning a void result and sometimes not, <strong>and be useful whether there's a SET-WORD! on the left or not!</strong></p>
<pre><code> &gt;&gt; 10 + 2 maybe null
 == 12

 &gt;&gt; 10 + 2 maybe 1000 + 20
 == 1020
</code></pre>
<p>With the void assignments rule meaning simply don't change the variable and evaluate to its old value, the number of constructs you need collapse and they're more elegant.</p>
<h2>If You Think That's Cool...</h2>
<p>You haven't seen anything yet <em>(unless you're <a class="mention" href="/u/gchiu">@gchiu</a> or <a class="mention" href="/u/blackattr">@BlackATTR</a> (or <a class="mention" href="/u/johnk">@johnk</a> !) who have already heard me manically ramble on Signal about all the things about to fall into place)</em></p>
<p>Stay tuned.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji only-emoji" alt=":sunglasses:"></p> ]]></description>
        <link>https://forum.rebol.info/t/non-interstitial-invisibles-more-trouble-than-theyre-worth/1582/5</link>
        <pubDate>Tue, 17 May 2022 03:08:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5846</guid>
      </item>
      <item>
        <title>Dead Red Redemption: Starting UPARSE on the Right Foot</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>In light of the <a href="https://forum.rebol.info/t/dropping-find-while-if-unless-select-etc/498/2">recent revelations regarding DID and DIDN'T</a>, it was time to promptly dispose of the question-mark-bearing UPARSE? and PARSE?.</p>
<p>But rather than just blindly replace all the UPARSE? from the tests with DID UPARSE, I decided to do something very labor-intensive...<em>and codify what the expression actually evaluated to</em>.</p>
<p>So if a test was something along the lines of:</p>
<pre><code>assert [uparse? "aacc" [some "a" some "c"]]
</code></pre>
<p>I went and actually made it say something more like:</p>
<pre><code>assert ["c" == uparse "aacc" [some "a" some "c"]]
</code></pre>
<p>For all the mind-numbingly redundant tests from Red, this was no picnic, and involved <a href="https://github.com/metaeducation/ren-c/commit/dd23a6e6863fc26da86cd53eac92486546a6b033">like a thousand hand-made changes</a>.  <em>(Really, so many of the tests are formulaic and should be produced by scripts...but something in the Rebol DNA makes people write out <strong>1 = 1</strong>, <strong>2 = 2</strong>, <strong>3 = 3</strong> all the way up to <strong>100 = 100</strong> instead of finding a way to do the test generation dynamically.)</em></p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1649">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>(Note: Capture was done as of the last change to that file on Oct 16, 2020... <a href="https://github.com/red/red/commit/32c30072ff215fd4efc0200ab3572ffd7afc8e9f#diff-aa7745d6b886ee41ee7e0ff66dfcbeb5412f86eb0be8bd47370e1e3ef244e089">commit 32c30072ff215fd4efc0200ab3572ffd7afc8e9f</a>...curious they haven't added any parse tests for a year...?)</p>
</blockquote>
</aside>
<p>I figured so long as I'd done everything else, I'd incorporate any new tests in the past year and a half.</p>
<p>How many, you ask?  Just two commits.  Here's one:</p>
<pre><code>--test-- "#4863"
	--assert parse to-binary "word" [word!]
	--assert parse to-binary "   word" [word!]
	--assert parse to-binary "123" [integer!]
	--assert not parse to-binary "123.456" [integer!]
	--assert parse to-binary "    123" [integer!]
	--assert parse to-binary "hello 123 world" [word! integer! word!]
	--assert parse to-binary "hello 123 world" [word! space integer! space word!]
</code></pre>
<p>And here's the other...which deleted a test:</p>
<pre><code>	--assert error? try [parse #{}[collect into x4197 []]]   ;-- deleted
</code></pre>
<p>But added this:</p>
<pre><code>	--assert parse #{}[collect into x4197 []]		;-- changed by #4732
	--assert x4197 == #{}
</code></pre>
<p>They're either nearing perfection, or there's not enough sophisticated usage being explored to generate compelling tests.  It's anyone's guess which.  <img src="https://forum.rebol.info/images/emoji/twitter/clown_face.png?v=9" title=":clown_face:" class="emoji" alt=":clown_face:"></p>
<h2>
<a href="https://forum.rebol.info/t/stopping-the-into-virus/705">Ren-C doesn't believe in INTO</a>, so...</h2>
<p>Really it's only the first set of tests that applies.  This is where it allows you to name DATATYPE! when you are parsing a BINARY!.  (We can do it for strings, too...at the same price...thanks to UTF8-Everywhere!)</p>
<p>Like I say, it's good for UPARSE tests to be more explicit and test more than just "it succeeded", so here's that spin:</p>
<pre><code>[https://github.com/red/red/issues/4863
    ('word == uparse to-binary "word" [word!])
    ('word == uparse to-binary "   word" [word!])
    (123 == uparse to-binary "123" [integer!])
    (didn't uparse to-binary "123.456" [integer!])
    (123 == uparse to-binary "    123" [integer!])
    ([hello 123 world] == uparse to-binary "hello 123 world" [
        collect [keep ^ word!, keep integer!, keep ^ word!]
    ])
    ([hello 123 world] == uparse to-binary "hello 123 world" [
        collect [keep ^ word!, space, keep integer!, space, keep ^ word!]
    ])
]
</code></pre>
<p>Their test checks to see that <strong>parse to-binary "123" [integer!]</strong> succeeded, but there's no guarantee you actually got an integer out of the process.  Or if you did, that it's the integer 123.</p>
<p>Bringing more formality to that--and leveraging UPARSE's results--is what this is about.</p>
<p><em>(Note: Still working on the story for whether you're allowed to KEEP a WORD! without some modifier like ONLY or meta, so deep thought on that forthcoming...)</em></p> ]]></description>
        <link>https://forum.rebol.info/t/dead-red-redemption-starting-uparse-on-the-right-foot/1649/4</link>
        <pubDate>Mon, 16 May 2022 10:39:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5845</guid>
      </item>
      <item>
        <title>What Should BLANK! in UPARSE Do?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>It's always good to look at history first.  So let's compare and contrast #[none] vs. empty block in old Redbols.</p>
<p><strong>In Rebol2 and R3-Alpha, both are no-ops.</strong>  The input type doesn't matter.</p>
<pre><code>r2/r3&gt;&gt; parse {ab} [[] "a" [] "b" []]
== true

r2/r3&gt;&gt; parse {ab} [#[none] "a" #[none] "b" #[none]]
== true

r2/r3&gt;&gt; parse [a b] [[] 'a [] 'b []]
== true

r2/r3&gt;&gt; parse [a b] [#[none] 'a #[none] 'b #[none]]
== true
</code></pre>
<p><strong>In Red, #[none]s are expected to be literal.</strong>  However, you don't get an error on string inputs...just a failure.</p>
<pre><code>red&gt;&gt; parse {ab} [[] "a" [] "b" []]
== true

red&gt;&gt; parse {ab} [#[none] "a" #[none] "b" #[none]]
== false

red&gt;&gt; parse [a b] [[] 'a [] 'b []]
== true

red&gt;&gt; parse [a b] [#[none] 'a #[none] 'b #[none]]
== false

red&gt;&gt; parse [#[none] a #[none] b #[none]] [#[none] 'a #[none] 'b #[none]]
== true
</code></pre>
<h2>I Think No-Op Is the Superior Choice for BLANK! (NONE!)</h2>
<p>Ren-C's philosophy surrounding blank as "reified nothing" is that it is there to signal opting-out.</p>
<p>It's raison d'etre is being falsey, and easy to test for its nothing-ish state...easily convertible to and from NULL.  (NULL rules are errors, as they should be).</p>
<p>The idea of being able to look for literal values is being explored other ways, the @ was one proposal (though this is going back and forth).</p>
<pre><code>  &gt;&gt; var: _

  &gt;&gt; uparse [_ _ _] [some @var]
  == #[true]
</code></pre>
<p>But a blank rule is more effectively a no-op, IMO.</p>
<p>(For a time it had been considered that it could be a way of matching ANY-VALUE!, but that is now done more clearly with the <strong><code>&lt;any&gt;</code></strong> tag combinator, which is working out splendidly.)</p>
<h2>What Should a BLANK! Rule's Synthesized Product Be?</h2>
<p>When it comes to empty blocks, I'm pretty solidly sold that the answer is a ~none~ isotope:</p>
<pre><code>&gt;&gt; rule: []

&gt;&gt; did uparse {ab} ["a" x: rule "b"]
== #[true]

&gt;&gt; x
** Script Error: x is ~none~ isotope
</code></pre>
<p>There's a deeply interlocked set of justifications for that, which (I hope) aren't going to need rethinking.</p>
<p>But with BLANK! rules it's not so obvious:</p>
<pre><code>&gt;&gt; rule: _

&gt;&gt; did uparse {ab} ["a" x: rule "b"]
== #[true]

&gt;&gt; x
== ???
</code></pre>
<p>I'm skeptical of vaporization, e.g. <strong><code>(x = "b")</code></strong>  It seems that would be useful only in the most rare of situations, and 99% of the time it would surprise the caller.</p>
<p>The philosophy of "blank in, null out" suggests NULL.  That seems useful.  (Implementation of this would actually return a <em>null isotope</em>, such that the rule could still look successful while handing back that result!)</p>
<p>I think that gives a pretty interesting shape to things.  Because this is new, I'll have to look for applications of it...but I'm pretty sure they will show up.  If I see any, I'll make a note of them here.</p> ]]></description>
        <link>https://forum.rebol.info/t/what-should-blank-in-uparse-do/1821/1</link>
        <pubDate>Sun, 15 May 2022 22:35:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5844</guid>
      </item>
      <item>
        <title>Introducing UPARSE: The Hackable Usermode PARSE</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>2 posts were split to a new topic: <a href="/t/what-were-apropos-and-parsing-at-about/1820">What Were APROPOS and PARSING-AT About?</a></p> ]]></description>
        <link>https://forum.rebol.info/t/introducing-uparse-the-hackable-usermode-parse/1529/8</link>
        <pubDate>Sun, 15 May 2022 19:50:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5843</guid>
      </item>
      <item>
        <title>Conflation vs. Safety, RETURN and the Finer Points of ~null~ Isotopes</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1799">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>So What To Do About MATCH and its bretheren?</strong></p>
<p>Seems the options are:</p>
<ol>
<li>
<em>Don't worry about it.</em> If you write <strong>match [logic!] 1 = 2</strong> you get back <strong>#[false]</strong> and should you write an expression like <strong>if (match [logic!] 1 = 2) [print "Match!]</strong> you get what you deserve.</li>
<li>
<em>Use a different isotope.</em> Let's say that <strong><code>match [&lt;opt&gt;] null</code></strong> is simply <strong>~matched~ (isotope)</strong>. It wouldn't have the decaying property, but would have the invalidness property.</li>
<li>
<em>Have a MATCH/FALSEY variant.</em> Let plain <strong>match</strong> on a falsey thing trigger an error and if you write <strong>if match/falsey ...</strong> then you clearly do know what you're doing so it becomes like case (1).</li>
<li>
<em>Make all conditional arguments take ^META arguments for their conditions.</em> This would put the responsibility for checking for isotopes on them, and they'd uniquely disallow them before UNMETA'ing them and then testing for truth/falsehood.</li>
</ol>
</blockquote>
</aside>
<p>Or as we learned from many a multiple choice test, the correct answer is: <strong>None of the above.</strong></p>
<h2>Option 5. <a href="https://forum.rebol.info/t/dropping-find-while-if-unless-select-etc/498/2">Adjust <code>(DID ...)</code> as isotope-tolerant <code>(NOT NULL? ...)</code></a>
</h2>
<p>If you find yourself in a situation where isotopes are giving you a problem, switch to <strong>did match</strong> (or decay match, if you're trying to get the value and not test it as a condition)</p>
<p><em>I wouldn't reach for this by default.</em>  You're fine most of the time... if your MATCH doesn't contain <code>[&lt;opt&gt; logic! blank!]</code>.  It's only these quirky edge cases where it's better to let the isotopes give you a localized and clear error than wind up on a wild goose chase for why the program is acting strangely.</p>
<p>Beginners might be cautious and write things like <strong>did match</strong> or <strong>did parse</strong> all over the place, if they're scared of missing a case.  But there's no need to write <strong>if did match integer! value</strong>, because you're testing for a value that can't possibly be false...it's an integer! or null.  Experts would use it sparingly, in cases like <strong>if match typeset value</strong>, in case the typeset gets expanded into things including falsey values, when you're not fully cognizant of that happening.</p>
<p>This broadens the service of DID across the board, to do what it was originally intended to do: transform functions that return non-LOGIC! values and NULL as soft failure to give logic results.  It can handle historical edge cases with an elegant touch, without burdening code that knows itself well enough to not hit those cases.  I'm quite pleased with it!  <img src="https://forum.rebol.info/images/emoji/twitter/man_dancing.png?v=9" title=":man_dancing:" class="emoji" alt=":man_dancing:"></p>
<h2>This Means Auto-Decay Will Be Limited (sorry, Chris)</h2>
<p>There's still some room for compromise.  But the compromise won't be that ~null~ isotopes are interchangeable with NULL to plain function parameters.</p>
<p>Decaying variables seems acceptable, and hopefully it's learnable that DID is testing something transient...and does not obey substitution rules:</p>
<pre><code>if did x: (match [&lt;opt&gt; integer!] null) [
    print "This will print (the ~null~ isotope denotes non-soft-failure)"
]

if did :x [
    print "This won't print, because X decayed to NULL in assignment"
]
</code></pre>
<p>I think that's learnable, if people can realize that DID is supposed to be paired with an evaluation and not a variable fetch.  (*"did x what?  did x be a variable?")</p> ]]></description>
        <link>https://forum.rebol.info/t/conflation-vs-safety-return-and-the-finer-points-of-null-isotopes/1799/3</link>
        <pubDate>Sun, 15 May 2022 08:44:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5842</guid>
      </item>
      <item>
        <title>Dropping find?, while?, if?, unless? select?, etc</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="498">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>For the cases where you actually do need a LOGIC!, besides TO-LOGIC we now have a sort of interesting word <a href="https://forum.rebol.info/t/the-misleading-names-of-true-and-false/191/8">in the form of DID</a>, as the positive analogue to NOT. Maybe it isn't perfect for all cases, but <strong>did select ...</strong> or <strong>did find ...</strong> or even <strong>did any [...]</strong> are all superior to SELECT?, FIND?, ANY?.</p>
</blockquote>
</aside>
<p>Four years ago, I introduced DID as a way to avoid having a bunch of logic-bearing variants of functions.</p>
<p>The functions in question you would use DID with typically would not return falsey values...although SELECT would be an exception here:</p>
<pre><code>&gt;&gt; select [a #[true] b #[false]] 'b
== #[false]

&gt;&gt; did select [a #[true] b #[false]] 'b
== #[false]  ; but... but it did select!
</code></pre>
<p>What this suggests is that DID shouldn't really be an opposite to NOT, but a synonym for NOT NULL?</p>
<p><strong>A further iteration of this problem has arisen...again leading to question marks...</strong></p>
<p>With UPARSE growing up, it introduces the notion that you can actually return <em>any</em> result on a successful parse.  This includes things like false, blank, and even null.</p>
<p>But if it returns something falsey, it returns the isotope form...to avoid the habit of people writing things like:</p>
<pre><code>if uparse [#[true] #[false]] [some logic!] [  ; #[false] is final rule result
    print "This code errors, IF won't test a ~false~ isotope"
]
</code></pre>
<p>If you use THEN or ELSE, then all is fine...because they are isotope-tolerant and only react to true null.</p>
<pre><code>uparse [#[true] #[false]] [some logic!] then [
    print "The successful return result here would be #[false]"
]
</code></pre>
<p>But not everyone likes writing code this way.  Hence I fell back on the idea of a UPARSE? variant.</p>
<p><strong>But what if DID was the isotopic tolerant form of NOT NULL?, and DIDN'T was the isotopic tolerant form of NULL?</strong></p>
<p>This sounds like a big win to me.  Now we can get rid of the prefix forms THEN? and ELSE? with much clearer answers.</p>
<p><strong>As an interim measure, I'm making DID error if it gets a logic or a blank.</strong>  This will help catch cases where DID was actually being used as a synonym for TO-LOGIC.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/sunglasses.png?v=9" title=":sunglasses:" class="emoji only-emoji" alt=":sunglasses:"></p> ]]></description>
        <link>https://forum.rebol.info/t/dropping-find-while-if-unless-select-etc/498/2</link>
        <pubDate>Sun, 15 May 2022 03:56:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5840</guid>
      </item>
      <item>
        <title>Name for rule to count how many times a PARSE rule matches?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1581">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>There are cases where you want to know how many of a certain match there are.<br>
...<br>
For now, it's checked in as TALLY for UPARSE</p>
</blockquote>
</aside>
<p>So oddly enough, TALLY without paying attention to the result can be used as the replacement for historical instances of ANY or WHILE.</p>
<pre><code>&gt;&gt; uparse "aaaccc" [some "a" tally "b" tally "c"]
== 3

&gt;&gt; uparse "aaaccc" [some "a" tally "b" some "c" tally "d"]
== 0
</code></pre>
<p><em>"Count the number of times this matches"</em> along with ignoring the count is pretty lightweight, and perhaps some would consider it idiomatic for <strong>opt some</strong></p>
<pre><code>opt some
tally    ; three fewer characters, same as WHILE
</code></pre>
<p>I don't care for the tradeoff myself...but...it's worth pointing out that many result-bearing constructs have their results ignored.</p>
<p>But I certainly would prefer seeing people embracing this idiom to having a single-arity WHILE in PARSE!</p> ]]></description>
        <link>https://forum.rebol.info/t/name-for-rule-to-count-how-many-times-a-parse-rule-matches/1581/2</link>
        <pubDate>Sun, 15 May 2022 00:24:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5839</guid>
      </item>
      <item>
        <title>WHILE [Cold Feet]</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1772">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I want to emphasize that there's a lot of thinking points you see from this.</p>
</blockquote>
</aside>
<p>Waitaminute.</p>
<h2>What if PARSE has WHILE <em>and it's arity-2</em>?</h2>
<p>So these two things would be synonyms:</p>
<pre><code> while rule1 rule2   &lt;=&gt;  opt some [rule1 rule2]
</code></pre>
<p>I'm sure I've had the idea before (?) but I don't remember writing up why you would actually want that.  It's actually quite neat.</p>
<p><strong>It would make it cleaner to pair up code in a GROUP! with a rule:</strong></p>
<p>GROUP! rules always run their side effect and succeed.  So:</p>
<pre><code>opt some [rule (code to run on each match)]
</code></pre>
<p>Could instead be written as:</p>
<pre><code>while rule (code to run on each match)
</code></pre>
<p>I would use this frequently!</p>
<p><strong>It helps pscyhologically divide a process into two parts: trigger and response</strong></p>
<p>You can of course write things as:</p>
<pre><code>opt some [
     thing1 thing2 [
        thing3 thing4
     |  thing5 thing6
     ]
]
</code></pre>
<p>Or:</p>
<pre><code>opt some [thing1 thing2 [
    thing3 thing4
        |
   thing5 thing6
]]
</code></pre>
<p>But I think the WHILE structuring into a control half and response half helps you see this better:</p>
<pre><code>while [thing1 thing2] [
    thing3 thing4
        |
    thing5 thing6
]
</code></pre>
<h2>This Pushes My Vote Over The Edge <img src="https://forum.rebol.info/images/emoji/twitter/ballot_box_with_check.png?v=9" title=":ballot_box_with_check:" class="emoji" alt=":ballot_box_with_check:">
</h2>
<p><strong>The existing WHILE will be deprecated in PARSE, and the non-PARSE construct LOOP will be changed back to WHILE when that deprecation has propagated.</strong>  (Sorry for the churn, but this is how improvements are made!)</p>
<p>Because OPT SOME is a full synonym in PARSE3, I'm going to remove WHILE from PARSE3 now...just to help along with the transition to UPARSE...</p>
<p>When all the WHILEs are likely gone, I'll add the new instruction to UPARSE.  Perhaps it will exist as UWHILE just so it can be tried out.</p>
<p>We can keep looking for a good single word that matches the intent of <strong>opt some</strong>.  But this thread lays out my reasoning for why we don't have a word that means "zero or more".  "optionally some" is a pretty good capture of the intent, and there are better ways to focus energy than on micro-optimizing it.</p>
<p><em>(Certainly people who are interested in character micro-optimization will think the entirety of parse is too verbose...)</em></p> ]]></description>
        <link>https://forum.rebol.info/t/while-cold-feet/1772/6</link>
        <pubDate>Sat, 14 May 2022 23:34:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5838</guid>
      </item>
      <item>
        <title>The Rebellion Against Style Guides</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>While driving from Huntsville to Florida, I listened to a talk given by a guy who oversees the general style guide for all of Google's multi-millions of lines of C++.</p>
<p>He spoke very positively about a formatting tool called <code>clang-format</code>, and how if he had his way at Google...there would be no arguing over code formatting.  He felt the robot did a better job on average than even the best developers...and being willing to delegate formatting to the tool gave them time to work on more important things.</p>
<p><strong>My well-known opinion for code like C++ or Rust or Java is that it is best represented as a graph data structure that captures the relationships and identities.</strong>  How you render that is up to the program you use to view and edit the projection of that essential code.  It doesn't matter if code is in braces or has a box drawn around it.  You could make expressions feed into an actual logical circuit AND gate instead of using <code>&amp;&amp;</code> or the word <code>and</code> or what-have-you.</p>
<p><strong>But Rebol is different (and almost absurdist) in the software world.</strong>  If anything, it has an <em>anti</em>-style guide, in <a href="http://www.rebol.com/article/0103.html">The Deep Lake / (Swamp)</a>, where Carl says:</p>
<blockquote>
<p>Suppose I write:</p>
<pre><code>if time &gt; 10:00 [
    wakeup user
]
</code></pre>
<p>which some users may choose to rewrite it this way:</p>
<pre><code>if time &gt; 10:00
[
    wakeup user
    alert "Time to work"
 ]
</code></pre>
<p>But, what if the "then block" is a variable itself, defined as:</p>
<pre><code> action: [
     wakeup user
     alert "Time to work"
  ]
</code></pre>
<p>Would you write this:</p>
<pre><code>  if time &gt; 10:00
      action
</code></pre>
<p>or this:</p>
<pre><code>   if time &gt; 10:00 action
</code></pre>
</blockquote>
<p>The conclusion is:</p>
<blockquote>
<p>...<strong>how you write code is ultimately your choice alone</strong>. REBOL, as a context dependent language, is perhaps the most freeform computing language ever invented.</p>
</blockquote>
<p>I'm bringing this up because I'm mothballing an old Trello and looking for any links or information worth preserving.  It had a card requesting a style guide, pointing out a limited bit that had been written in the Rebol2 manual:</p>
<p><a href="http://www.rebol.com/docs/core23/rebolcore-5.html#section-5">http://www.rebol.com/docs/core23/rebolcore-5.html#section-5</a></p>
<p>I'm really only interested in the bits that reduce complexity (like just-say-no-to-CRLF files, or tabs, etc.)  As for the code itself, this is kind of an ASCII-art medium.</p>
<p>So a good "style guide" for Rebol would be one that showed examples of how to take advantage of the degrees of freedom to be bent to your purposes.  I think a good one was the <strong><a href="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353">tuple and path test dialect</a></strong>.  But there are certainly more!</p> ]]></description>
        <link>https://forum.rebol.info/t/the-rebellion-against-style-guides/1819/1</link>
        <pubDate>Sat, 14 May 2022 05:39:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5837</guid>
      </item>
      <item>
        <title>`greb` : Grep Using PARSE?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>There was a Trello card with a remark from <a class="mention" href="/u/johnk">@johnk</a> about an idea from Pekr:</p>
<blockquote>
<p>Not sure how this would work, but it is an interesting excercise to think about.  Something that bridges between unix and rebol syntax like:</p>
<pre><code>ls | greb 'some alpha ".reb"'
</code></pre>
<p>(assuming a few more built in rules/charsets)</p>
<p>May need a collect/keep kind of wrapper to retrieve data cleanly.</p>
</blockquote>
<p>This would be a very small subset of what <a class="mention" href="/u/blackattr">@BlackATTR</a>'s QUERY could do...but it seems like it wouldn't hurt if we went ahead and made this program as a test and put it in the <a href="https://github.com/metaeducation/ren-c-stdio">ren-c-stdio</a> repository.</p>
<p>I've already made things like TAC (backwards unix CAT), where the goal is to see how essential and correct we can make things:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21" target="_blank" rel="noopener">metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21</a></h4>
<pre class="onebox"><code class="lang-r"><ol class="start lines" start="19" style="counter-reset: li-counter 18 ;">
<li>write-stdout try delimit/tail newline reverse collect [</li>
<li>    until [not keep line: try read-line]</li>
<li>]</li>
</ol></code></pre>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><strong>I like the idea of making GREB similarly essential, and part of the samples.</strong>  Worth doing.</p>
<p>(Note that <code>grep</code> was itself originally framed as a one-line <code>awk</code> program.)</p>
<p>I'll also throw in a little ping that it would be nice to have a simple web app that exposed PARSE functionality with some highlighting, like <a href="http://regexpal.com/">http://regexpal.com/</a>.  Seems sometimes we get such big ideas in our head we forget to do the small ones (!)</p> ]]></description>
        <link>https://forum.rebol.info/t/greb-grep-using-parse/1818/1</link>
        <pubDate>Sat, 14 May 2022 05:09:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5836</guid>
      </item>
      <item>
        <title>Mustache Templates vs RSP</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>On an old Trello I found a link to this renderer for "Mustache":</p>
<aside class="onebox githubfolder">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="16" height="16">
      <a href="https://github.com/kronwiz/r3-mustache" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <img src="https://opengraph.githubassets.com/1e73d9d2c54389cdd35bded29734b54c3d25b8293c427a9df0cc11db00084d73/kronwiz/r3-mustache" class="thumbnail onebox-full-image" width="60" height="60">

<h3><a href="https://github.com/kronwiz/r3-mustache" target="_blank" rel="noopener">GitHub - kronwiz/r3-mustache: Mustache templates renderer for Rebol 3</a></h3>


  <p><span class="label1">Mustache templates renderer for Rebol 3. Contribute to kronwiz/r3-mustache development by creating an account on GitHub.</span></p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>It may or may not be interesting.  <a class="mention" href="/u/rgchris">@rgchris</a> said:</p>
<blockquote>
<p>"I'd suggest looking at my <a href="http://reb4.me/r3/rsp">RSP engine</a> for handling string templates, local values, sanitization. LOAD-RSP loads a template and returns a function. That function can be applied to a block of local words and returns a completed string. The template need only be loaded once."*</p>
</blockquote> ]]></description>
        <link>https://forum.rebol.info/t/mustache-templates-vs-rsp/1817/1</link>
        <pubDate>Sat, 14 May 2022 04:56:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5835</guid>
      </item>
      <item>
        <title>(U)PARSE + CALL: Controlling Of Interactive CLI Apps</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>A long time ago (e.g. college), I used something in Tcl called EXPECT...which was a great way of driving interactive console applications.</p>
<p>You'd specify the patterns you wanted to wait on (that came from the app's stdout), and script the responses to be fed to stdin, in an interactive fashion.</p>
<p>Today people think a lot more about exposing functionality through APIs (with whatever Java or XML and such).  So it's more rare that you have to resort to writing "stdio robots".</p>
<p>But it's a pretty easy-to-absorb test case, and could be a real showcase for UPARSE...as well as a good challenge for a renewed PORT! model.</p>
<p>I found this code from <a class="mention" href="/u/brett">@Brett</a> on Trello, where the need for an R3 version of CALL was being articulated.  It gives some EXPECT-like functionality:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/codebybrett/r3-scripts/blob/master/call-server.r" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/codebybrett/r3-scripts/blob/master/call-server.r" target="_blank" rel="noopener">codebybrett/r3-scripts/blob/master/call-server.r</a></h4>
<pre><code class="lang-r">REBOL [
	Title: "call-server"
	File: %call-server.r
	Author: "Brett Handley"
	Date: 22-Jun-2013
	Purpose: "Provides a way to capture output from console program and send input to interactive console programs."
	License: {

		Copyright 2013 Brett Handley

		Licensed under the Apache License, Version 2.0 (the "License");
		you may not use this file except in compliance with the License.
		You may obtain a copy of the License at

			http://www.apache.org/licenses/LICENSE-2.0

		Unless required by applicable law or agreed to in writing, software
		distributed under the License is distributed on an "AS IS" BASIS,
		WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		See the License for the specific language governing permissions and
</code></pre>

  This file has been truncated. <a href="https://github.com/codebybrett/r3-scripts/blob/master/call-server.r" target="_blank" rel="noopener">show original</a>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>This seems like a good domain to build some simple-but-impressive demos for... in the "layperson could have built this robot" sense (if we can push it to that point).</p> ]]></description>
        <link>https://forum.rebol.info/t/u-parse-call-controlling-of-interactive-cli-apps/1816/1</link>
        <pubDate>Sat, 14 May 2022 04:52:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5834</guid>
      </item>
      <item>
        <title>Beginnings of the &quot;Redbol&quot; Module</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>As an interesting note... I found that when I first pitched Redbol it had the funny name of <strong>R3/Backward</strong>:</p>
<blockquote>
<p>R2/Forward is a project created by <span class="mention">@BrianH</span> which helps the R2 interpreter run R3 codebases.  It works by patching up a few inconsistencies and adding missing features.  It ships now in the downloadable R2 executables and is executed by default.</p>
<p>R3/Backward is an analogue which would be run to help R2 code run in an R3 interpreter.  The main intention is to serve as a stopgap measure for those trying to run R2 modules under R3 when no R3 equivalent is ready for that functionality...as well as to serve as documentation of the changes that will need to be made if a porting process is being done.</p>
</blockquote> ]]></description>
        <link>https://forum.rebol.info/t/beginnings-of-the-redbol-module/755/2</link>
        <pubDate>Sat, 14 May 2022 04:41:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5833</guid>
      </item>
      <item>
        <title>Hex-Valued Integer Literals: Likely Not In Ren-C</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>On an old Trello there was a card about standardizing the differences between R3-Alpha and Red...and a checklist with only one item:</p>
<blockquote>
<p>Hex-valued literal notation (Rebol has none, Red used to use FFh, FFFFh, FFFFFFFFh), now using 0#FF</p>
</blockquote>
<p>The motivation was for purposes of Red/System, mostly.</p>
<p>In Ren-C this doesn't seem like a priority.  It has ISSUE! (TOKEN!) as a read-only data type that fits in a cell.  Hence a systems-oriented dialect already has an efficient way to represent these values.</p>
<p>For instance: it's not a big deal if your assembler says <strong>[mov ax, <span class="hashtag">#FE</span>]</strong> in its source... if it's generating machine code.</p>
<p>Of course, an ISSUE! in it isn't the same from a metaprogramming sense as a slot with an INTEGER! in it.  So you don't get the automatic advantage of <em>every</em> dialect that has INTEGER! support for a given slot working with a hex notation.  But isn't that what COMPOSE is for...?</p>
<pre><code>my-dialect [something-or-another 255]

my-dialect compose [whatever (debin [BE +] #FF)]
</code></pre>
<p><strong>Having more than one representation for the same type is generally bad, anyway.</strong>  Let's look at what Red does here:</p>
<pre><code>red&gt;&gt; FFh
== 255

red&gt;&gt; F0h + 0Fh
== 255
</code></pre>
<p>If it was so important that it had to be encoded in source, why is it thrown away immediately?</p>
<p>It's something about Red worth knowing exists, but off the radar for implementing, methinks.</p> ]]></description>
        <link>https://forum.rebol.info/t/hex-valued-integer-literals-likely-not-in-ren-c/1815/1</link>
        <pubDate>Sat, 14 May 2022 04:35:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5832</guid>
      </item>
      <item>
        <title>Old Idea from DocKimbel For Rebol2 =&gt; Rebol3/Red</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>This is something I just ran across from a long time ago, which I thought would be interesting to look at with modern eyes.</p>
<p>It's a Gist: <a href="https://gist.github.com/dockimbel/5083375">https://gist.github.com/dockimbel/5083375</a> of a proposal of actually making a DO variant that would rewrite the source of a script.</p>
<p>He is quoted as having said: <em>"A JIT-migration tool would be more accurate. It would run just after LOAD and before DO to rewrite part of the R2 sources in a R3 compatible format."</em></p>
<p>Static analysis of Turing-Complete programs is notoriously on the difficult-if-not-impossible scale, even for simple languages.  So JIT-rewriting even something like PARSE rules is only going to be feasible if those rules were not built by code.</p>
<p>His example just looks for one source pattern (negative literal indexing, so like translating between <strong><code>data/0</code></strong> and <strong><code>data/-1</code></strong>).  But determining what is "code" and what is "data" is deliberately more complex in Rebol than other language.</p>
<p>In Ren-C we have code like <code>enbin [BE +/- 32]</code> and that path is never meant to execute, it's just there to convey the notion of wanting to encode a signed number.  Going around and randomly turning all paths with 0 in them to be -1 misses the whole point of "relative expressions"; you don't know what they're relative to.</p>
<p>So the ironic point of preserving this is just to say "nothing to see, here".  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  <code>%redbol.reb</code> is a saner track.  But I do think it's going to wind up requiring DO itself being different... a DO2 (like UPARSE2).  It won't rewriting the code block given, but hook the evaluator with different rules.</p>
<pre><code>REBOL [
    Author:  "Nenad Rakocevic"
    Date:      04/03/2013
    Purpose: {
        Show how to achieve R2 source rewriting suitable for evaluation
        using R3 interpreter.
    }
        Note: "Use it from %Red/ folder"
]

context [
    do*: s: none
    
    path-rewrite: [
        some [
            s: integer! (if negative? s/1 [s/1: s/1 + 1])
            ;| handle other indexed-access cases here
            | skip
        ]
    ]

    patched-do: func [value /arg /local saved rule mark path file][
        unless file? :value [return do* value]

        saved: system/script/path
        set [path file] split-path :value
        change-dir path
        value: load file

        parse value rule: [
            any [
                mark: [path! | set-path! | lit-path!] :mark into path-rewrite
                ;; | mark: string! :mark into string-rewrite 
                ;; add more rewritting rules here
                | mark: any-block! :mark into rule
                | skip
            ]
        ]
        also 
            do* value
            system/script/path: saved
    ]
    
    set 'do-r2 func [blk [block!]][
        do*: :do
        set 'do :patched-do
        do blk
        set 'do :do*
    ]
]

do-r2 [
    do %red/compiler.r
]
save %red.new red  ;-- inspect the file to see the changes
halt</code></pre> ]]></description>
        <link>https://forum.rebol.info/t/old-idea-from-dockimbel-for-rebol2-rebol3-red/1814/1</link>
        <pubDate>Sat, 14 May 2022 04:12:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5831</guid>
      </item>
      <item>
        <title>Is GROUP! in PATH! for function invocations worth it?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>I wrote a short hack of a compatibility-APPLY for bootstrap, and changed all the GROUP!-in-PATH! cases for refinements to use APPLY.</p>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/c37440ddf9ae034a14cfbb5ef22cb046145f8f2b">It's just better, in most of these cases.</a></strong></p>
<h2>But...An Argument For Keeping It</h2>
<p>When you think about dialects like UPARSE, they don't have an APPLY operator out of the box.</p>
<p>Being able to leverage the evaluative tool could be helpful, to someone who is running a GET on the PATH! and wanting a function back with the proper specialization.  :-/</p>
<p><strong>I'll let it stick around for now, for that reason.  But let's try to avoid using it, and give APPLY some exercise.</strong></p> ]]></description>
        <link>https://forum.rebol.info/t/is-group-in-path-for-function-invocations-worth-it/1813/2</link>
        <pubDate>Fri, 13 May 2022 07:07:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5830</guid>
      </item>
      <item>
        <title>Is GROUP! in PATH! for function invocations worth it?</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>Back in the day, I thought it would be neat to allow you to put GROUP!s in paths.  So you could do things like this:</p>
<pre><code>append/(if condition ['only]) [a b c] [d e]
</code></pre>
<p>It turned out to be of fairly limited use.  Really you could only use it with refinements that didn't take parameters, because it changes the "shape" of the execution stream.  Consider how you would make the following sensible:</p>
<pre><code>append/(if condition ['dup]) [a b c] [d e] ???
</code></pre>
<p>When the condition is true you want something in the ??? spot.  When it's false you don't.  How can your code cover both cases?</p>
<p><em>We actually have some tools these days</em> that could use opportunistic invisibility to solve this.  But then you're testing the condition twice, and getting involved in some pretty wild mechanics for something trivial.</p>
<p>It also raised a lot of annoying questions about NULL/blank tolerance.  I didn't like NULL being allowed in the generic pathing, but it was ugly to require BLANK! for this task:</p>
<pre><code>append/(try if condition ['only]) [a b c] [d e]

append/(if condition ['only] else [_]) [a b c] [d e]
</code></pre>
<h2><strong><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1406/3">Now we have a modern APPLY</a></strong></h2>
<p>It bends some of the raw frame rules, and lets you use LOGIC! for parameterless refinements:</p>
<pre><code>apply :append [[a b c] [d e] /only condition]
</code></pre>
<p>It's a bit longer.  And we haven't really firmed up questions like whether you need the GET-WORD! or if it's soft quoted by default.  Or if there might be some clever shorthand:</p>
<pre><code>($ append [a b c] [d e] /only condition)
</code></pre>
<h2>I'm In A Mood To Kill Off Lesser-Loved Features <img src="https://forum.rebol.info/images/emoji/twitter/hocho.png?v=9" title=":hocho:" class="emoji" alt=":hocho:">
</h2>
<p>All things being equal, it might seem nice to support.  But every feature has a cost!</p>
<p><strong>You'd still be able to put GROUP!s in paths for your own purposes, but refinement dispatch in functions wouldn't use it.</strong></p>
<p>You could also use DO of COMPOSE'd code if you really wanted to:</p>
<pre><code>do compose/deep [
    append/(if condition ['only]) [a b c] [d e]
]
</code></pre>
<p>So if anyone has a good argument for keeping the function dispatch behavior, speak up now!</p> ]]></description>
        <link>https://forum.rebol.info/t/is-group-in-path-for-function-invocations-worth-it/1813/1</link>
        <pubDate>Fri, 13 May 2022 04:35:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5829</guid>
      </item>
      <item>
        <title>Asymmetric Encryption/Decryption in Ren-C</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>The most easily recognized form of encryption is symmetric, where the same password is used to encrypt something as to decrypt it.</p>
<p>But a weirder form is <strong>asymmetric encryption</strong>, <em>where the key used to encrypt is different from the one used to decrypt</em>.</p>
<h2>Ren-C Supports RSA Public/Private Encryption</h2>
<p>You generate your keys in a pair, which come back via multiple return results.  You must specify a size for the public key (in <em>bits</em>, not <em>bytes</em>...<a href="https://crypto.stackexchange.com/questions/58124/">because that's the convention</a>)</p>
<p>We'll start using [raw] RSA encryption:</p>
<pre><code>; use /INSECURE to override errors that tell you the key is too small
; (makes examples more readable)

&gt;&gt; [public-key private-key]: rsa-generate-keypair/padding/insecure 128 [raw]
== make object! [
    padding: [raw]
    n: #{C097238C34E7191561DD7D30BBB77C65}
    e: #{010001}
]

&gt;&gt; length of public-key.n
== 16  ; 16 bytes is 128 bits
</code></pre>
<p>When you use raw mode encryption, the data you encrypt must be <em>exactly the same size</em> as the key you made.  We'll show how to work around this later, but for now let's just deal with it.</p>
<pre><code>&gt;&gt; data: #{0123456789ABCDEFFEDCBA9876543210}

&gt;&gt; length of data
== 16  ; same size as our key

&gt;&gt; encrypted: rsa-encrypt data public-key
== #{3F7E8ACD2DEE61D09B7A6FC914E22295}

&gt;&gt; length of encrypted
== 16  ; also same length as key
</code></pre>
<p>Now, decryption is done with the private key:</p>
<pre><code>&gt;&gt; rsa-decrypt encrypted private-key
== #{0123456789ABCDEFFEDCBA9876543210}
</code></pre>
<h2>But <code>[raw]</code> Makes The Same Message Every Time...</h2>
<p>Raw RSA doesn't waste any space (e.g. 4096 bytes in means 4096 bytes out).  <strong>But a given output always produces the same output with raw RSA</strong>:</p>
<pre><code>&gt;&gt; rsa-encrypt data public-key
== #{3F7E8ACD2DEE61D09B7A6FC914E22295}

&gt;&gt; rsa-encrypt data public-key
== #{3F7E8ACD2DEE61D09B7A6FC914E22295}
</code></pre>
<p>This can make it easy (or at least, easier) for someone who doesn't have the private key to do some factoring with the public key, and see if they can generate input that produces that output...effectively defeating the encryption.</p>
<p>Also since it requires exactly the keysize of data coming in, you're likely going to have a lot of cases where you have to throw in some padding.  But naive answers to padding also create security problems:</p>
<ul>
<li>
<p><strong>It would be bad to pad the data block with zeros (or whatever)</strong>, because such predictable behavior generally makes it easier to guess what the encrypted information might be.</p>
</li>
<li>
<p><strong>It would be bad to just put random data in the padding</strong>, because the person doing the decryption wouldn't know if the gibberish they got when decrypting was the same gibberish you put in.</p>
<ul>
<li>Attackers could leverage this random tolerance to forge data in the non-padded portions, then forging the padding in a way that compensated.</li>
</ul>
</li>
</ul>
<p><strong><a href="https://security.stackexchange.com/a/183330">Real-World problems motivated the tricks that are used to resist attacks.</a></strong>  You can read about them if you want...or just don't use <code>[raw]</code> and you'll get a sensible default.</p>
<pre><code>&gt;&gt; [public-a private-a]: rsa-generate-keypair/insecure 128
== make object! [
    padding: [pkcs1-v15]
    n: #{A9EE9282744CC0FC6765824EB2B87539}
    e: #{010001}
]

&gt;&gt; one: rsa-encrypt #{DECAFBAD} public-a  ; Note: shorter input than key
== #{13C14811A3B1CD95100BA4F3273F0962}

&gt;&gt; two: rsa-encrypt #{DECAFBAD} public-a
== #{3245179A18C6B488FD39CDE7B4F5E3EC}  ; different!

&gt;&gt; rsa-decrypt one private-a
== #{DECAFBAD}

&gt;&gt; rsa-decrypt two private-a
== #{DECAFBAD}
</code></pre>
<h2>That Encrypts Smaller Than The Key...But What About Bigger?</h2>
<p>A fundamental issue with RSA encryption/decryption is it is relatively S-L-O-W.  And if you want to futureproof a key to use with big file sizes, those keys would also be B-I-G!</p>
<p><strong>But you can use a smaller asymmetric key as a stepping stone to providing a symmetric key.</strong></p>
<p>It's easy!  Let's say someone has published their 4096-bit public key and you want to send them a 100 megabyte file that only they will know how to open.  Follow these steps:</p>
<ol>
<li>
<p>Generate a random string that's less than 4096 bits, and encrypt <em>that</em> with their public key</p>
</li>
<li>
<p>Encrypt the file using a faster symmetric algorithm, with that random string as the password</p>
</li>
<li>
<p>Send the recipient both the asymmetrically-encrypted random string and the symmetrically-encrypted 100mb file</p>
</li>
<li>
<p>Your recipient uses their private key to decrypt the one-off password you randomly generated, and decrypts the symmetrically encrypted file with it.</p>
</li>
</ol>
<h2>It's All New, So Help Design the Interface...</h2>
<p>The original motivation to research mbedTLS was so that <a class="mention" href="/u/gchiu">@gchiu</a> didn't have to call out to external utilities to generate RSA keys.</p>
<p>But the generation abilities weren't actually written until now.  And honestly, I'm not sure the RSA stuff was even working at all.  :-/  <strong><a href="https://github.com/metaeducation/ren-c/blob/master/extensions/crypt/tests/rsa.test.reb">Now there's at least a minimal amount of testing.</a></strong></p>
<p>I think the multiple return values are a good start on making it clear, but it's certainly a good time for feedback if anyone has any.</p> ]]></description>
        <link>https://forum.rebol.info/t/asymmetric-encryption-decryption-in-ren-c/1812/1</link>
        <pubDate>Fri, 13 May 2022 01:17:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5828</guid>
      </item>
      <item>
        <title>Transitioning from mbedTLS 2 to mbedTLS 3: Promise and Peril</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>Historically R3-Alpha had its few pieces of crypto math cobbled together from generally unknown sources on the Internet...</p>
<ul>
<li>
<p>My understanding is that Rebol2's support for talking to a limited set of HTTPS sites was written entirely in C.  It's never been open-sourced, so we don't know much about it--such as whether it was original code or done with some early TLS library of the time.</p>
</li>
<li>
<p>Saphirion chose to split out the code for the Transport-Layer-Security protocol and make it usermode Rebol.  Only the foundational cryptographic primitives like <a href="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808">Secure Hashes</a> or <a href="https://forum.rebol.info/t/key-exchange-methods-in-ren-c/1809">Key Exchange</a> were written in C.</p>
<ul>
<li>
<p><strong>Many of R3-Alpha's C cryptography bits seemed to come from the (one-man?) effort known as <a href="http://axtls.sourceforge.net/">Axolotl TLS (AxTLS)</a></strong></p>
</li>
<li>
<p>The Rebol parts were written by Cyphre (Richard Smolak)</p>
</li>
</ul>
</li>
</ul>
<h2>I Was Initially Very Skeptical of Continuing Saphirion's Strategy...</h2>
<p>If a change ever rippled into affecting the TLS file, it was a voodoo nightmare to figure out how to fix it.  I didn't understand why limited efforts should be stretched into involvement with "something the language wasn't really good for".</p>
<p><em>My impression was also that the %prot-tls.r implementation was bad.</em>  But when I got to looking at the details, the most insidious problems weren't so much the fault of the protocol code.  It more-or-less followed the spec, in a pretty literate way (that I <a href="https://forum.rebol.info/t/dissecting-the-tls-emit-dialect/1498">improved with some dialecting</a>).</p>
<p>The main frustrations regarding prot-tls came from the fact that <a href="https://forum.rebol.info/t/the-weirdness-of-wait/1703">R3-Alpha's asynchronous port model made no sense</a>.  When I rewrote it to use the "seemingly-synchronous" model (which aims to parallel the Go language), it became more clear.</p>
<p><strong>Through the process of implementing TLS 1.2, I began to get the impression that such protocols may actually be a fitting domain for a language like Rebol.</strong></p>
<p>Today's %prot-tls.r is an aggressive and practical test of dialecting.  If it continues to be enhanced may be a case of exposing the workings of an important protocol to the layperson.</p>
<h2>We Needed More Cryptography, and mbedTLS Fit the Bill</h2>
<p>Adding TLS 1.2 wasn't going to do any good without also providing some of the newer exotic cipher suites that are demanded these days.  That meant getting things like elliptic curve key exchange, or SHA512, or anything else the future may demand.</p>
<p>When I found mbedTLS it was much "cleaner" than OpenSSL, and seemed perfect:</p>
<ul>
<li>
<p>It was targeting embedded processors, with <a href="https://github.com/Mbed-TLS/mbedtls/blob/42650260a9109f53d2058f82e1133205545fd65b/include/mbedtls/mbedtls_config.h">incredibly granular controls</a> for doing things like using smaller/slower algorithms vs. bigger/faster ones.</p>
<ul>
<li>
<p>Pure C code, that could be compiled even by TCC.</p>
</li>
<li>
<p>This meant the conference demo of bootstrap could still work, with a TCC-built R3-WITH-TCC having enough cryptography in it to download its own source from an HTTPS GitHub link.</p>
</li>
</ul>
</li>
<li>
<p>The cryptography primitives could be lifted out "a la carte" from the C-based TLS protocol code; the files seemed completely separate:</p>
<ul>
<li>
<p>If we wanted to, we could have a C-based mbedTLS extension option instead of using %prot-tls.r, and it could reuse the same cryptography.</p>
</li>
<li>
<p>(We may at some point have to resort to this, if keeping %prot-tls.r up to date with the times proves impractical.)</p>
</li>
</ul>
</li>
<li>
<p>The interfaces for every cipher and hash supported streaming, so we'd have the ability to incrementally do cryptography on large files or network connections (assuming we figured out how to expose that).</p>
</li>
</ul>
<p><strong>And critically, all of it was under the umbrella of a working group at ARM which would hopefully ensure that it was kept up to date, and being vetted for problems.</strong></p>
<p>All of it made this seem like a no-brainer to build on, which <a href="https://github.com/metaeducation/ren-c/commit/06e110235efb68500700fead3478a3216899d780">I did in April of 2020</a>:</p>
<blockquote>
<p>The mbedTLS library is an embedded-focused set of cryptography hashes,<br>
key exchanges, block ciphers, and other tools.  Its components range<br>
from lower-level facilities like BigNum arithmetic, to higher-level<br>
services like TLS negotiation and certificate validation.  Its<br>
facilities are well-factored such that each piece can be used with only<br>
its dependencies:</p>
<p><a href="https://tls.mbed.org/">https://tls.mbed.org/</a></p>
<p>Because of its fine-grained control, it's possible to use its basic<br>
tools while still keeping higher-level negotiations as spec-driven<br>
usermode Rebol (e.g. the TLS protocol itself) to facilitate more<br>
hooking and understanding.  And because it offers a consistent set of<br>
vetted and active code, it can replace the "hodgepodge" of cut-and-paste<br>
snippets for cryptography (originating from axTLS, internet sources,<br>
custom code, edited OpenSSL, etc.) where there are problems like not<br>
being written to a common BigNum implementation.</p>
<p>Additionally--due to the factoring, it is hoped that this code could be<br>
used as the basis for implementing BigNum arithmetic in the interpreter<br>
core itself...which would be naturally reused in the implementation<br>
of these C algorithms when cryptographic extensions are loaded.</p>
</blockquote>
<p>Possibly inspired by this--or just his own coming to the same conclusions--<a href="https://github.com/Oldes/Rebol3/commit/77515519655a579fbef99f7e185a27a4451718d7">Oldes changed his hashes to use mbedTLS in January 2021</a></p>
<h2>...and Then, Version 3.0 Came... <img src="https://forum.rebol.info/images/emoji/twitter/dragon.png?v=9" title=":dragon:" class="emoji" alt=":dragon:">
</h2>
<p><em>I probably should have been paying more attention to what mbedTLS was planning in their future branches.</em></p>
<p>What I've gathered is that ARM (or someone) was pointing out that mbedTLS not only needed to implement TLS 1.3, but that it wasn't sufficiently fast vs. the competition.</p>
<p>A somewhat-sensible approach to optimization is to first tighten the control over your data structures, making them more opaque to clients.  By limiting the APIs you can use to access those structures, you can know more about the states they are in...and take more for granted.  Your functions can then make optimizations which leverage these rules--adding or rearranging fields in more clever ways.</p>
<p><strong>But I didn't want cleverness, I just wanted the math.</strong>  I liked that our objects for things like Diffie-Hellman showed you the true cryptographic parameters, and wasn't some kind of "black box".  If we were closed off from that, everything would be a HANDLE! and you would have limited ways of extracting parameters from it.</p>
<p>Not only did they close off access to the structure members, many APIs they offered were TLS-specific!</p>
<ul>
<li>
<p>If a cryptographic primitive depended on parameters X and Y and produced Z, they'd offer a function that takes in a blob of data representing X and Y <em>in the specific format that TLS messages encode them</em>.</p>
</li>
<li>
<p>If you were building some protocol that <em>wasn't</em> TLS using that basic crypto primitive, the only way offered to load the parameters was to make a TLS-format message buffer and pass it.</p>
</li>
<li>
<p>The TLS-specific functions were creeping into what were supposed to be the "a la carte" cryptography files, adding bloat at compile time (if not also runtime) if you weren't using them.</p>
</li>
</ul>
<p>One can imagine that this seems good from the point of view of speeding up their C TLS protocol, but bad for anyone trying to use the underlying cryptography.</p>
<p>There was an announcement I missed that it would be split into two libraries: "mbed crypto" and "mbedTLS", to serve the two different audiences for the code.  But that seemed to be short-lived, and "mbed crypto" was reabsorbed into the mbedTLS codebase.  Not before the damage had been done to the layering and generality.</p>
<p>So now mbedTLS seems to be playing catch-up on serving the audience that wanted the crypto primitives.  But functionality that had an endorsed method to do in mbedTLS 2 now requires hacking beneath the approved API to accomplish.</p>
<h2>On the bright side...</h2>
<p>Since the re-absorption of "mbed crypto", mbedTLS seems amenable to having answers for the a-la-carte crypto crowd.  <a href="https://github.com/Mbed-TLS/mbedtls/issues/5818">A request I made is at least marked medium importance</a>.</p>
<p>Also, the API becoming more formalized is pointing out some weird mistakes that were made before in the code...filling structure parameters that were unused, for instance.  Having to call each of these things into question is a good vetting of the code.</p>
<p>And although I had to use hacks to do it, we now can run https on top of mbedTLS 3.  I've been a little on the fence of whether to stick with mbedTLS 2 (support ending in 2024) or find some other library.  But writing about cryptography has made me realize it's a bit of a red herring on the importance scale, and I think we're better off rolling with the punches of mbedTLS 3 than going it some other route.</p> ]]></description>
        <link>https://forum.rebol.info/t/transitioning-from-mbedtls-2-to-mbedtls-3-promise-and-peril/1810/1</link>
        <pubDate>Tue, 10 May 2022 14:47:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5826</guid>
      </item>
      <item>
        <title>Belated 2021 Post-Mortem + New Years 2022 Vision 🤹</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1786">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>(Makes me think of the <a href="https://en.wikipedia.org/wiki/Conservation_status">species extinction risk scale</a>. Sure, the source code is on GitHub, and the topic list of this forum seems to be on the Internet Archive...but if you click through to individual pages there's nothing about the post contents. Should we do a scrape of the data here and put it elsewhere?)</p>
</blockquote>
</aside>
<p>I couldn't find something here and so I did a google site search to see if it was better and found...</p>
<p>no hits!</p>
<p><strong><a href="https://www.google.com/search?q=site%3Aforum.rebol.info"><code>Google results for site:forum.rebol.info</code></a></strong></p>
<p>I don't think this is all bad, as the plan is re-launching the content under a new domain "when it's ready".  I'm okay with being under the radar until then.  And hey--it keeps one from worrying too much about keeping old <code>forum.rebol.info</code> links working.</p>
<p><em>--nevertheless--</em> it is a little bit unsettling in the sense that there are plenty of inbound links.  <em>Zero</em> Google indexing is surprising.  I think the quality of content is better than many other places (personally).</p>
<p>Not necessarily a particular action item--not trying to get found yet.  But definitely a call to arms, and praise for <a class="mention" href="/u/johnk">@johnk</a> making the valiant preservation effort!</p> ]]></description>
        <link>https://forum.rebol.info/t/belated-2021-post-mortem-new-years-2022-vision/1786/8</link>
        <pubDate>Mon, 09 May 2022 22:43:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5825</guid>
      </item>
      <item>
        <title>Key Exchange Methods in Ren-C</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>Having given a summary of <a href="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/">Checksums and Secure Hashes</a>, I thought I'd follow up with a quick description of something you're likely not as familiar with: <strong>Key Exchanges</strong>.</p>
<p>There's old quote I like (but can't find a source for):</p>
<blockquote>
<p>"The shared secret is capital.  We may spend it or squander it."</p>
</blockquote>
<p>An example of taking advantage of a shared secret is when people want to share an encrypted .ZIP file.  If you and your friend both know the encryption password that no one else knows...then you could put the file on a public server for your friend to download.  If you trust the encryption, the fact it was public would not matter.</p>
<p><strong>But what if the situation is that your friend has a password that only they know... and you have a password that only you know?</strong>  That wouldn't seem to help with the .ZIP file scenario, because it expects the same password to decrypt as was used to encrypt it.</p>
<p>Key Exchange is a way of taking your individual "passwords" and coming to an agreement on a third "password" that only the two of you know.  Amazingly enough, you can carry out the conversation where you establish the shared password in public.</p>
<h2>Creating one Shared Secret from two Non-Shared Secrets</h2>
<p>For educational purposes, people use paint-mixing as an analogy for key exchange.  It's really "multiplying big prime numbers" instead of mixing paint, but it's visual and easy to see.</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/184fa9035c24ffa1250e324b61acaa3915f7757e.png" data-download-href="https://forum.rebol.info/uploads/default/184fa9035c24ffa1250e324b61acaa3915f7757e" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/184fa9035c24ffa1250e324b61acaa3915f7757e_2_345x500.png" alt="image" data-base62-sha1="3t485Do7kYfAw6HMsMv5klePtsq" width="345" height="500" srcset="https://forum.rebol.info/uploads/default/optimized/1X/184fa9035c24ffa1250e324b61acaa3915f7757e_2_345x500.png, https://forum.rebol.info/uploads/default/original/1X/184fa9035c24ffa1250e324b61acaa3915f7757e.png 1.5x, https://forum.rebol.info/uploads/default/original/1X/184fa9035c24ffa1250e324b61acaa3915f7757e.png 2x" data-small-upload="https://forum.rebol.info/uploads/default/optimized/1X/184fa9035c24ffa1250e324b61acaa3915f7757e_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">image</span><span class="informations">480×695 28 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>This assumes everyone in the world has some kind of weird "common paint".  This paint isn't white (because if you mixed it with something that would be too easy to guess at the precise shade you had mixed it with).  And it isn't black (because mixing might just get you something too dark to measure well).</p>
<p>But the key point to absorb is what the diagram says: <strong>we assume that mixture separation is expensive</strong>.  Once you've mixed the common paint with your secret color, it produces a new shade that no one else knows how to make exactly.</p>
<p>When you and your friend exchange your mixtures you cleverly go to your private lairs and each add your secret color to the other's mixture.  <strong>Now both of you have the same weird color, and this is a secret you share.</strong></p>
<h2>Ren-C Supports Diffie-Hellman Key Exchange</h2>
<p>I oversimplified this by saying you each start with a "password"...because that made it sound like you could just pick a phrase out of your head.  In reality, choosing your secret involves some tricky math...to make sure your secret paint color is a <em>good</em> secret paint color.  You don't pick these--you ask the computer to generate it.</p>
<p>To get the ball rolling, you need to specify what kind of "common paint" to use.  You make that by picking two suitable prime numbers, a modulus and a base.  Then you can ask for a unique random secret to be generated.</p>
<p>For the sake of education, I've made it possible to use <em>relatively bad</em> paint mixes with the /INSECURE refinement.  It won't allow numbers that are so broken the process won't work (for instance: non-primes, or primes that don't meet the basic requirements of the algorithm).  This lets you work with small enough numbers that you can see for yourself what's going on more easily.</p>
<p>So let's use a modulus of 9 and a base of 3:</p>
<pre><code>&gt;&gt; mine: dh-generate-keypair/insecure #{09} #{05}
== make object! [
    modulus: #{09}
    generator: #{05}
    private-key: #{07}
    public-key: #{05}
]

&gt;&gt; theirs: dh-generate-keypair/insecure #{09} #{05}
== make object! [
    modulus: #{09}
    generator: #{05}
    private-key: #{05}
    public-key: #{02}
]
</code></pre>
<p>So privately, my secret is 7... and their secret is 5.  But we want to come to an agreement on a new number while only sharing with the public my "mixture" of 5 and their mixture of 2.</p>
<pre><code>&gt;&gt; my-shared: dh-compute-secret mine theirs.public-key
== #{02}

&gt;&gt; their-shared: dh-compute-secret theirs mine.public-key
== #{02}
</code></pre>
<p>So here you see each of us could come to a common agreement of 2.  You can follow through the math on the <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia page</a> if you want...but it's enough to know that it works.</p>
<p>What makes for a good (big!) modulus and base to use?  You don't really need to come up with them yourself, although <a href="https://security.stackexchange.com/a/103924">there are algorithms for it</a>.  There are papers that publish some good choices--and we should probably provide a way to default to well-known ones, like maybe accept either an object or an ISSUE!</p>
<pre><code>&gt;&gt; dh-generate-keypair #RFC-3526
; ...or...
&gt;&gt; dh-generate-keypair make object [base: ..., modulus: ...]
</code></pre>
<p>But the main thing to know is that <strong>both sides have to agree on the "common paint" to use</strong>, in order to come to the same conclusion.  So <code>dh-compute-secret</code> won't work unless the same numbers were used here.</p>
<h2>We Also Support Elliptic Curve Key Exchange (ECHDE)</h2>
<p>Modern Internet Transport Security has moved on from traditional Diffie Hellman to trickier math.  But the premise is the same.</p>
<p>In the interface, we only support two "common paints" for this method: "secp256r1" and "curve25519".  There's no option for small answers here:</p>
<pre><code>&gt;&gt; mine: ecc-generate-keypair 'curve25519
== make object! [
    public-key: make object! [
        x: #{121413C34DC265025F24CBEBBA6065B9
             75F1BFA6E493D07A0F4776FAE03DC245}
        y: #{00000000000000000000000000000000
             00000000000000000000000000000000}
    ]
    private-key: #{610A8D99A72500B3A2E8A1FD714FA412
                   17F0A0EA5EDFC9CFBDAE0425E199DC70}
]

&gt;&gt; theirs: ecc-generate-keypair 'curve25519
== make object! [
    public-key: make object! [
        x: #{10D65366D8C9229591C99903D3B5EB0F
             57709AD27E37989E4782050D2B9B2B93}
        y: #{00000000000000000000000000000000
             00000000000000000000000000000000}
    ]
    private-key: #{7C3262BF6028B049EEDC6C37E37A8261
                   EA4DF31F16E4D534D92A7EF11D974618}
]
</code></pre>
<p>But it works the same way; you come to the same conclusion when combining your partner's public portion with your private portion:</p>
<pre><code>&gt;&gt; my-secret: (
    ecdh-shared-secret 'curve25519 mine.private-key theirs.public-key
)
== #{E27891074A60250580B8F2C7CB2448A9AA491C97161D7C8D381348D90E438025}

&gt;&gt; their-secret: (
    ecdh-shared-secret 'curve25519 mine.private-key theirs.public-key
)
== #{E27891074A60250580B8F2C7CB2448A9AA491C97161D7C8D381348D90E438025}

&gt;&gt; my-secret = their-secret
== #[true]
</code></pre>
<h2>Would Average Users Ever Need Key Exchange Functions?</h2>
<p>Right now, the main reason most people would care whether the language has these key exchanges is because without them you can't do TLS.  So no reading or writing over HTTPS.</p>
<p>You really only need key exchanges when protocols are trying to establish private channels of communication.  So notably, some cryptographic protocols (like Bitcoin) don't need key exchanges...because they're carrying out their work in public.</p>
<ul>
<li>
<p><strong>It would be neat if we could democratize the creation of cryptographic protocols</strong>.  I think giving people easier and more transparent access to these kinds of things could foster some grassroots innovation, where people would build <em>exactly the security they needed</em> into a program's design...no more and no less.</p>
<ul>
<li>This would stand in contrast to today's methods, where "security" is accomplished by standing on top of a mountain of protocols (using a literal zoo of cryptographic algorithms) to tunnel and log in somewhere that they are "safe"...and putting more data than they need to in that place.</li>
</ul>
</li>
<li>
<p><strong>But even "simple" cryptography is tricky to reason about, and people are lazy.</strong>  I myself am pretty guilty of doing things like falling back on my GitHub password and resetting my keys instead of doing a good job of filing them in safe places.</p>
<ul>
<li>Convincing people their programs should be "organic and locally sourced"... by tailor-making the protocols and asking their users to keep track of files, is going to be a hard sell to those who are happy to use OAuth and leave this all up to Google.</li>
</ul>
</li>
</ul>
<p>So pessimistically speaking, I don't know that we're going to be able to market easy-to-use key exchange to anyone as a killer feature.  It's a nice thought, and I certainly like having it available to tinker with.  But I'd be surprised if anyone reading this has an idea how to use it in something they're working on.</p> ]]></description>
        <link>https://forum.rebol.info/t/key-exchange-methods-in-ren-c/1809/1</link>
        <pubDate>Mon, 09 May 2022 18:20:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5824</guid>
      </item>
      <item>
        <title>LOGIN Magazine Historical Covers</title>
        <dc:creator><![CDATA[@rgchris Chris]]></dc:creator>
        <description><![CDATA[ <p>As good a place as any to put a link to <a href="https://amr.abime.net/issue_274">Amiga Format #118</a>, the first I saw mention of 'Rebol'. I may even have that issue kicking around.</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/5d5986d4d49ca5cc5d18a80949398c485c826554.jpeg" data-download-href="https://forum.rebol.info/uploads/default/5d5986d4d49ca5cc5d18a80949398c485c826554" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/5d5986d4d49ca5cc5d18a80949398c485c826554_2_363x500.jpeg" alt="image" data-base62-sha1="djOdjEqK07dQ6176v0vFIMJYXsM" width="363" height="500" srcset="https://forum.rebol.info/uploads/default/optimized/1X/5d5986d4d49ca5cc5d18a80949398c485c826554_2_363x500.jpeg, https://forum.rebol.info/uploads/default/optimized/1X/5d5986d4d49ca5cc5d18a80949398c485c826554_2_544x750.jpeg 1.5x, https://forum.rebol.info/uploads/default/optimized/1X/5d5986d4d49ca5cc5d18a80949398c485c826554_2_726x1000.jpeg 2x" data-small-upload="https://forum.rebol.info/uploads/default/optimized/1X/5d5986d4d49ca5cc5d18a80949398c485c826554_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">image</span><span class="informations">842×1158 325 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p> ]]></description>
        <link>https://forum.rebol.info/t/login-magazine-historical-covers/1803/2</link>
        <pubDate>Mon, 09 May 2022 17:35:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5823</guid>
      </item>
      <item>
        <title>JS testing with Cypress.io</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>Looking at <a href="https://www.lambdatest.com/blog/cypress-test-automation-framework/">how Cypress works</a>, it is essentially a proxy server.</p>
<p>So when you ask for <code>http://hostilefork.com/media/shared/replpad-js</code>, it fires up a browser that is actually directed at <code>http://localhost:8000/cypress/media/shared/replpad-js</code> (or whatever).</p>
<p>What the proxy does is add code related to testing.  So by definition, it doesn't do anything we couldn't do ourselves by adding JavaScript into the page.</p>
<p>This means it can't be used to test any "meta" things--like how the page reacts to opening a new browser tab, or interacting across IFRAMEs.</p>
<p>But presumably (?) their injected JavaScript is tricky and tailored, for transmitting keydowns and keyups in a somewhat "realistic" way to mimic what actually happens in browsers...and it may wind up being faster and simpler to use.</p>
<p>My current technique talks to the Firefox webdriver directly (without using the Selenium layer, that abstracts all the webdrivers for all the browsers).  When I made it I figured it was better than nothing, and it has been so...but it is certainly slower than we'd like.</p>
<p>It's certainly worth a shot to see if this is a better answer that covers the cases we'd be interested in.</p> ]]></description>
        <link>https://forum.rebol.info/t/js-testing-with-cypress-io/1778/2</link>
        <pubDate>Mon, 09 May 2022 14:14:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5822</guid>
      </item>
      <item>
        <title>Checksums and Secure Hashes in Ren-C</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>I thought I'd write up a quick post about algorithms that take in a bunch of bytes--like a BINARY!--and produce a (usually) shorter "fingerprint" of that data.</p>
<ul>
<li>
<p>It's not hard to make an <em>insecure</em> hash...like taking the first couple of letters of a string: <code>"DICKENS" =&gt; DI</code>.  That might be useful if you're trying to divide book authors into drawers of an old-fashioned library card catalog.</p>
</li>
<li>
<p>But it's easy to find another string that would make the same "DI" fingerprint, like "DIABOLICAL" or "DIR^/FORMAT C:"</p>
</li>
<li>
<p>If you were using a fingerprint to trust something was what it was supposed to be, the easiness of generating these "collisions" is a liability!! <img src="https://forum.rebol.info/images/emoji/twitter/skull_and_crossbones.png?v=9" title=":skull_and_crossbones:" class="emoji" alt=":skull_and_crossbones:"></p>
</li>
<li>
<p>Secure hashes do complicated "one-way functions" in math to make it <em>really hard</em> on today's computers to fabricate any binary sequence--even garbage--that will give you the same fingerprint as any other input.</p>
</li>
</ul>
<p>You've certainly seen web pages that redirect you off to download a file, but beforehand give you some bytes of what the file should securely hash to.  <sub>(And you've probably never checked to make sure they match.)</sub></p>
<h2>If the Fingerprint is Shorter than the data, <a href="https://en.wikipedia.org/wiki/Pigeonhole_principle">COLLISIONS EXIST!</a>
</h2>
<p>You obviously can't give every 500mb file in the universe a unique fingerprint that's 32-bits, 128-bits, 512-bits, 2048-bits etc.</p>
<p>So the concept behind a secure hash is just supposed to be you can't find a collision until we're all dead and no one cares.  Less grimly: we might pair a hash with an expiration date to say not to trust a hash after a very conservative guess at how long it would take for computers to advance enough to break it.</p>
<p>When this hope falls apart (e.g. if any researcher can show two inputs that generate the same fingerprint) it's generally considered that the "secure" part of that hash is broken...for the purposes of whatever time-bubble you're living in.</p>
<h2>We Have Four Secure Hashes in the Box Right Now...</h2>
<p>It shouldn't be surprising that longer fingerprints correlate with being harder to find collisions:</p>
<pre><code>&gt;&gt; checksum/method {DICKENS} 'md5
== #{3717A787E2F16310EA51DC0308E88803}  ; considered vulnerable

&gt;&gt; checksum/method {DICKENS} 'sha1
== #{DFE5DD61B2B19C319DBC4F44328CDF8D24366F88}  ; considered vulnerable

&gt;&gt; checksum/method {DICKENS} 'sha256
== #{52A095CF1F0319EF44FF9134AAD2EF5E2BFE1A48307DCB0AD0408F1CE393C950}

&gt;&gt; checksum/method {DICKENS} 'sha512
== #{
E8DBC26DE28FAA1BC2A6A3E1BC6DD22C1ECB3FD0D5FCBBFB69BC63C6AAC6A9CE
FB76294EFFB0522D4C90A5E5829233FC5BC5B811AE6684A6EA632ECB3FF88DA1
}

&gt;&gt; checksum/method {DICKENS} 'ripemd160         ; bitcoin uses this one
== #{ADC86945BE4CEF31F0CFCAF66775E1DA5160F877}  ; ...no one knows why
</code></pre>
<p>But longer isn't <em>intrinsically</em> better...there might be a weakness to exploit in the method used by a longer hash which isn't present in shorter ones.  However, a bunch of mathematicians look at this stuff and we would generally hope that we'd be getting what we pay for--more bytes meaning more security (unless they're from the NSA and trying to punk us).</p>
<h2>We Also Have Three <em>Insecure</em> Hashes...</h2>
<p>These are fine when you're doing something that is not supposed to be protecting against adversarial attacks.  They're smaller to store and much cheaper to calculate...but it's trivial to find other input data that would produces the same 32-bit result:</p>
<pre><code>&gt;&gt; checksum/method {DICKENS} 'crc32
== #{FB05F0BC}  ; used to very gzip files (among other places)

&gt;&gt; checksum/method {DICKENS} 'adler32
== #{0202D207}  ; used by zlib deflate and inflate
</code></pre>
<p>If you want a <em>really</em> cheapskate insecure checksum, we include the one that is in TCP packets on the internet:</p>
<pre><code>&gt;&gt; checksum/method {DICKENS} 'tcp
== #{CA32}
</code></pre>
<hr>
<blockquote>
<p><strong>Fun Corner</strong>: Let's find a collision!</p>
<pre><code>&gt;&gt; until [
    string: copy {}
    repeat (random 10) [append string make char! 64 + random 26]
    #{CA32} = checksum/method string 'tcp
]
== #[true]

&gt;&gt; print string
AOGTDDN

&gt;&gt; checksum/method {AOGTDDN} 'tcp
== #{CA32}
</code></pre>
<p>That wasn't so hard, but... if you can find collisions for any of the <em>secure</em> hashes above (even the relatively-weak MD5 or SHA1) <em>you will be famous!</em></p>
</blockquote>
<h2>We're Primed To Make <strong>STREAMING</strong> Secure (or Insecure) Hashes !</h2>
<p>R3-Alpha did not have fancy modern hashes like SHA256 or SHA512.  But also the code it used was copy-pasted out of a library that required you to have all the data at once.</p>
<p>Hence if you have a multi-gigabyte DVD .iso file that you want to checksum, you have to read that into a multi-gigabyte BINARY! to process it.</p>
<p>But since Ren-C is leveraging the cryptography of the <a href="https://github.com/Mbed-TLS/mbedtls">pure C library known as mbedTLS</a>, the foundations are there to stream in little blobs at a time...and it is generalized so we can just flip on or off any hashes we care about.  <a href="https://forum.rebol.info/t/what-is-a-port/617/5">If we only knew how to express streaming with PORT!s (or whatever)</a>.</p>
<p>And also, the CRC32 and ADLER32 algorithms we have "for free" by including Zlib are now set up in a way that the insecure hashes can be streamed too.</p>
<h2>
<img src="https://forum.rebol.info/images/emoji/twitter/globe_with_meridians.png?v=9" title=":globe_with_meridians:" class="emoji" alt=":globe_with_meridians:"> <em>"How Does This Tie Into The Web Repl Story"?</em> <img src="https://forum.rebol.info/images/emoji/twitter/globe_with_meridians.png?v=9" title=":globe_with_meridians:" class="emoji" alt=":globe_with_meridians:">
</h2>
<p>I really want to have a laser focus on whether investing effort into something is going to be something that pays off or not, and to me a part of that payoff question is "will people using the web build care".</p>
<p><strong>Right now the web build does not include the CHECKSUM function at all.</strong>  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>That is too bad, because I do believe that putting secure hashes into the hands of users at the Web Repl prompt (as well as other basic crypto parts) would be a great playground.</p>
<p>But it would be rather heavyweight to push secure hashing into the default .wasm being pulled down on every site if it didn't use it.  This is why I really want to get "Wasm extensions" working, that can be dynamically loaded.  There's something called "side modules" that I have meant to explore but haven't.</p>
<p>Anyway, I hope this summary gives a little insight into where this is at, and perhaps educational for those who don't have experience with the difference between secure/insecure hashing.</p> ]]></description>
        <link>https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/1</link>
        <pubDate>Mon, 09 May 2022 04:04:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5821</guid>
      </item>
      <item>
        <title>Dropping RC4 Support from the Crypto Extension</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>I pretty sure no one out there is using it, but the RC4 cipher has been deprecated for a pretty long time now.  Per Wikipedia:</p>
<blockquote>
<p>In <a href="https://en.wikipedia.org/wiki/Cryptography">cryptography</a>, <strong>RC4</strong> (Rivest Cipher 4 also known as <strong>ARC4</strong> or <strong>ARCFOUR</strong> meaning Alleged RC4, see below) is a <a href="https://en.wikipedia.org/wiki/Stream_cipher">stream cipher</a>. While it is remarkable for its simplicity and speed in software, multiple vulnerabilities have been discovered in RC4, rendering it insecure.</p>
</blockquote>
<p>The insecurity of RC4 led the IETF to <a href="https://tools.ietf.org/html/rfc7465">prohibit RC4 for TLS use in 2015</a></p>
<p>However, the original cryptography code (mostly from AxTLS) had an RC4 function, and it was in mbedTLS 2.  So I went ahead and kept it working.</p>
<p>It is now dropped from mbedTLS 3.  So in the scheme of things, time to let it go.</p>
<h2>Code Being Dropped</h2>
<p>The files arc4.h and arc4.c from mbedTLS are now gone, and this was the crypt module code for supporting it:</p>
<pre><code>static void cleanup_rc4_ctx(const REBVAL *v)
{
    struct mbedtls_arc4_context *ctx
        = VAL_HANDLE_POINTER(struct mbedtls_arc4_context, v);
    mbedtls_arc4_free(ctx);
    FREE(struct mbedtls_arc4_context, ctx);
}


//
//  export rc4-key: native [
//
//  "Encrypt/decrypt data (modifies) using RC4 algorithm."
//
//      return: [handle!]
//      key [binary!]
//  ]
//
REBNATIVE(rc4_key)
//
// !!! RC4 was originally included for use with TLS.  However, the insecurity
// of RC4 led the IETF to prohibit RC4 for TLS use in 2015:
//
// https://tools.ietf.org/html/rfc7465
//
// So it is not in use at the moment.  It isn't much code, but could probably
// be moved to its own extension so it could be selected to build in or not,
// which is how cryptography methods should probably be done.
{
    CRYPT_INCLUDE_PARAMS_OF_RC4_KEY;

    struct mbedtls_arc4_context *ctx = TRY_ALLOC(struct mbedtls_arc4_context);
    mbedtls_arc4_init(ctx);

    REBSIZ key_len;
    const REBYTE *key = VAL_BINARY_SIZE_AT(&amp;key_len, ARG(key));
    mbedtls_arc4_setup(ctx, key, key_len);

    return Init_Handle_Cdata_Managed(
        D_OUT,
        ctx,
        sizeof(struct mbedtls_arc4_context),
        &amp;cleanup_rc4_ctx
    );
}


//
//  export rc4-stream: native [
//
//  "Encrypt/decrypt data (modifies) using RC4 algorithm."
//
//      return: &lt;none&gt;
//      ctx "Stream cipher context"
//          [handle!]
//      data "Data to encrypt/decrypt (modified)"
//          [binary!]
//  ]
//
REBNATIVE(rc4_stream)
{
    CRYPT_INCLUDE_PARAMS_OF_RC4_STREAM;

    REBVAL *data = ARG(data);

    if (VAL_HANDLE_CLEANER(ARG(ctx)) != cleanup_rc4_ctx)
        rebJumps ("fail [{Not a RC4 Context:}", ARG(ctx), "]");

    struct mbedtls_arc4_context *ctx
        = VAL_HANDLE_POINTER(struct mbedtls_arc4_context, ARG(ctx));

    REBVAL *error = nullptr;

    REBSIZ length;
    REBYTE *output = VAL_BINARY_SIZE_AT_ENSURE_MUTABLE(&amp;length, data);
    const REBYTE *input = output;
    IF_NOT_0(cleanup, error, mbedtls_arc4_crypt(
        ctx,
        length,
        input,  // input "message"
        output  // output (same, since it modifies)
    ));

  cleanup:
     if (error)
        rebJumps ("fail", error);

    return rebNone();
}
</code></pre>
<p>...and here is the very basic test, also being removed...</p>
<pre><code>ctx: rc4-key as binary! "Deprecated Algorithm"
data: as binary! "But Implemented Anyway"
rc4-stream ctx data
data = #{0C4E2F3BD157EA7214C33F280BE4D9DF1DFB580563A6}</code></pre> ]]></description>
        <link>https://forum.rebol.info/t/dropping-rc4-support-from-the-crypto-extension/1807/1</link>
        <pubDate>Mon, 09 May 2022 01:32:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5820</guid>
      </item>
      <item>
        <title>About the Cryptography category</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p>Discussion of things related to cryptography, which includes low level primitives (ciphers, hashes, and key exchange) as well as higher-level protocols such as TLS.</p> ]]></description>
        <link>https://forum.rebol.info/t/about-the-cryptography-category/1806/1</link>
        <pubDate>Mon, 09 May 2022 01:11:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5819</guid>
      </item>
      <item>
        <title>Sending Values into a BLACKHOLE!</title>
        <dc:creator><![CDATA[@hostilefork Hostile Fork]]></dc:creator>
        <description><![CDATA[ <p><strong>With BLACKHOLE! and Isotopes, we have a new excellent choice for opting out of mutating operations...!</strong></p>
<p>Historically, BrianH and others (including me) believed that mutating operations should not let you "opt out" of the target for the mutation.  There was too much potential for confusion if you wrote <strong>append block [1 2 3]</strong> and it silently didn't append, because block was a NONE!.</p>
<p>So we have this:</p>
<pre><code>r3-alpha&gt;&gt; block: none
r3-alpha&gt;&gt; append block [1 2 3]
** Script error: append does not allow none! for its series argument

red&gt;&gt; block: none
red&gt;&gt; append block [1 2 3]
*** Script Error: append does not allow none! for its series argument
</code></pre>
<p>Operations without side effects were deemed to be harmless by comparison:</p>
<pre><code>r3-alpha&gt;&gt; block: none
r3-alpha&gt;&gt; select block 'a
== none

red&gt;&gt; block: none
red&gt;&gt; select block 'a
== none
</code></pre>
<p>But even that had a kind of nasty property.  You could write a long chain of non-mutating operations, and at the end of the pipe you could get a NONE! without knowing where in that pipe the error occurred.  <em>(All of this compounded on the fact that a NONE! could have even literally been something that was selected, so your opt-out value could have been an actual selection result!)</em>  <a href="https://forum.rebol.info/t/null-blank-void-history-under-scrutiny/1249"><strong>This gave rise to Ren-C's BLANK!-in, NULL out philosophy.</strong></a></p>
<h2>New Option: <strong>BLACKHOLE! in, Isotope Out</strong>
</h2>
<p>I've already shown how useful BLACKHOLE! is with "opted-in" multiple returns and SET.  But now, I've made it possible to give blackholes as the input series for operations like APPEND:</p>
<pre><code>&gt;&gt; append # [a b c]
== ~blackhole~  ; isotope
</code></pre>
<p>This keeps you from having to write annoying patterns like:</p>
<pre><code>if not blank? my-series [
    append my-series [a b c]
]
</code></pre>
<p>The reason it's different is because blackholes are a very conscious way of opting-in to something without saying where you want the content to go.  <em>And they're truthy</em>, so they are a more natural fit for control flow...as opposed to blanks.</p>
<pre><code>if my-series [  ; can be a series or blackhole
     append my-series calculation  ; want calculation even if not the append
]
</code></pre>
<p>By comparison, blanks and nulls are sort of "unintentional"...they are very close to being an uninitialized state (or at least a state that is set without thinking too much about it).</p>
<h2>Interim Syntax paralleling <code>&lt;blank&gt;</code>
</h2>
<p>If you want a function that does BLACKHOLE!-in-Isotope-Out, just label the argument with <code>&lt;blackhole&gt;</code>.</p>
<pre><code>&gt;&gt; add-period: func [x [&lt;blackhole&gt; text!]] [
      print "Running ADD-PERIOD"
      append x "."
  ]

&gt;&gt; add-period "Hello World"
Running ADD-PERIOD
== "Hello World."

&gt;&gt; add-period # 
== ~blackhole~  ; isotope
</code></pre>
<p>So note that although the APPEND would have opted out here, the entire function is skipped if you pass a <code>#</code> to the <code>&lt;blackhole&gt;</code> argument.  (APPEND itself uses this same annotation.)</p>
<p>As for whether ~blackhole~ isotopes should casually decay back into # the way ~null~ isotopes decay into NULL... I don't know.  I'm trying it out to see how I like it!</p> ]]></description>
        <link>https://forum.rebol.info/t/sending-values-into-a-blackhole/1347/2</link>
        <pubDate>Thu, 09 Apr 2020 14:46:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-5856</guid>
      </item>
  </channel>
</rss>
