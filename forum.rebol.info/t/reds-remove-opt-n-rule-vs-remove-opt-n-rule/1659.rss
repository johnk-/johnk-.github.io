<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Red&#39;s REMOVE [OPT N rule] vs. REMOVE [OPT [N rule]]</title>
    <link>https://forum.rebol.info/t/reds-remove-opt-n-rule-vs-remove-opt-n-rule/1659</link>
    <description>I was doing some comparative behavior testing while looking at the [UPARSE conversion of TRIM](https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660).

As I mention in that post, the comparisons are now more-often-than-not pointing out bugs and inconsistencies in R3-Alpha and Red.  UPARSE is the new gold standard.  !

Here&#39;s a good example of R3-Alpha and Red being broken in their various ways, that will happen indefinitely... until the PARSE methodology changes from being ad-hoc to being architecturally sane.  :-/

    red&gt;&gt; parse s: &quot;aab&quot; [remove [opt 3 &quot;a&quot;] thru &quot;b&quot;]
    == true

    red&gt;&gt; s
    == &quot;b&quot;

*Why did it think there was 3 &quot;a&quot; to remove?*  I&#39;d guess there are &quot;repeat min-counts&quot; and &quot;repeat max-counts&quot; and &quot;optionality flags&quot; being thrown about.  So it confused itself and put the optional flag on the &quot;a&quot;, winding up interpreting the rule as:

    [remove [3 opt &quot;a&quot;] thru &quot;b&quot;]

How do you keep it from getting its flags crossed?  Throw in a block, because then it likely starts a genuine parse recursion and the flags won&#39;t mix:

    red&gt;&gt; parse s: &quot;aab&quot; [remove [opt [3 &quot;a&quot;]] thru &quot;b&quot;]
    == true

    red&gt;&gt; s
    == &quot;aab&quot;

That&#39;s correct...and if you use a BLOCK! like that R3-Alpha also does the right thing:

    r3-alpha&gt;&gt; parse s: &quot;aab&quot; [remove [opt [3 &quot;a&quot;]] thru &quot;b&quot;]
    == true

    r3-alpha&gt;&gt; s
    == &quot;aab&quot;

But predictably...without the block, you get an entirely different failure mode; the parse fails altogether:

    r3-alpha&gt;&gt; parse s: &quot;aab&quot; [remove [opt 3 &quot;a&quot;] thru &quot;b&quot;]
    == false

    r3-alpha&gt;&gt; s
    == &quot;aab&quot;

Unless you explicitly try to make your combinators look literally at the items in the block--this category of distinction cannot exist in UPARSE.  **[try repeat 3 &quot;a&quot;] and [try [repeat 3 &quot;a&quot;]] are equivalent in a correct-by-construction sense, and all the combinators that will ever be written get this benefit.**</description>
    
    <lastBuildDate>Wed, 31 Jan 2024 01:59:13 +0000</lastBuildDate>
    <category>Redbol</category>
    <atom:link href="https://forum.rebol.info/t/reds-remove-opt-n-rule-vs-remove-opt-n-rule/1659.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Red&#39;s REMOVE [OPT N rule] vs. REMOVE [OPT [N rule]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I was doing some comparative behavior testing while looking at the <a href="https://forum.rebol.info/t/converting-trim-to-uparse-for-testing-and-inspiration/1660">UPARSE conversion of TRIM</a>.</p>
<p>As I mention in that post, the comparisons are now more-often-than-not pointing out bugs and inconsistencies in R3-Alpha and Red.  UPARSE is the new gold standard.  !</p>
<p>Here's a good example of R3-Alpha and Red being broken in their various ways, that will happen indefinitely... until the PARSE methodology changes from being ad-hoc to being architecturally sane.  :-/</p>
<pre><code>red&gt;&gt; parse s: "aab" [remove [opt 3 "a"] thru "b"]
== true

red&gt;&gt; s
== "b"
</code></pre>
<p><em>Why did it think there was 3 "a" to remove?</em>  I'd guess there are "repeat min-counts" and "repeat max-counts" and "optionality flags" being thrown about.  So it confused itself and put the optional flag on the "a", winding up interpreting the rule as:</p>
<pre><code>[remove [3 opt "a"] thru "b"]
</code></pre>
<p>How do you keep it from getting its flags crossed?  Throw in a block, because then it likely starts a genuine parse recursion and the flags won't mix:</p>
<pre><code>red&gt;&gt; parse s: "aab" [remove [opt [3 "a"]] thru "b"]
== true

red&gt;&gt; s
== "aab"
</code></pre>
<p>That's correct...and if you use a BLOCK! like that R3-Alpha also does the right thing:</p>
<pre><code>r3-alpha&gt;&gt; parse s: "aab" [remove [opt [3 "a"]] thru "b"]
== true

r3-alpha&gt;&gt; s
== "aab"
</code></pre>
<p>But predictably...without the block, you get an entirely different failure mode; the parse fails altogether:</p>
<pre><code>r3-alpha&gt;&gt; parse s: "aab" [remove [opt 3 "a"] thru "b"]
== false

r3-alpha&gt;&gt; s
== "aab"
</code></pre>
<p>Unless you explicitly try to make your combinators look literally at the items in the block--this category of distinction cannot exist in UPARSE.  <strong>[try repeat 3 "a"] and [try [repeat 3 "a"]] are equivalent in a correct-by-construction sense, and all the combinators that will ever be written get this benefit.</strong></p>
          <p><a href="https://forum.rebol.info/t/reds-remove-opt-n-rule-vs-remove-opt-n-rule/1659/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reds-remove-opt-n-rule-vs-remove-opt-n-rule/1659/1</link>
        <pubDate>Fri, 13 Aug 2021 20:10:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1659-1</guid>
        <source url="https://forum.rebol.info/t/reds-remove-opt-n-rule-vs-remove-opt-n-rule/1659.rss">Red&#39;s REMOVE [OPT N rule] vs. REMOVE [OPT [N rule]]</source>
      </item>
  </channel>
</rss>
