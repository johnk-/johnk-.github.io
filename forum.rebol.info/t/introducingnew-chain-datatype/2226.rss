<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Introducing:The:New:CHAIN!:Datatype</title>
    <link>https://forum.rebol.info/t/introducingnew-chain-datatype/2226</link>
    <description>As part of a [giant overhaul of function application](https://forum.rebol.info/t/big-alien-proposal-word-runs-functions/1905/13?u=hostilefork), we&#39;re getting rid of SET-XXX! and GET-XXX! as fundamental types.  Instead, we&#39;ll have a new sequence that&#39;s like PATH! and TUPLE!...except that uses the colon character as its interstitial delimiter.

## `these:&lt;will be&gt;:1020:&quot;called CHAIN!&quot;`

:alien: 

## [:three:  is a magic number.](https://youtu.be/J8lRKCw2_Pk?t=21)

It gives us a nice symmetry of having three ANY-LIST! types, and three ANY-SEQUENCE! types

* **`[BLOCK!] (GROUP!) {FENCE!}`**

* **`/PATH!/ .TUPLE!. :CHAIN!:`**


## CHAIN! is Higher Precedence Than TUPLE!, Lower Than PATH!

Pleasingly, the hierarchy of the interstitials is in accordance with their &quot;heft&quot;... **`/`** is heftier than **`:`** which is heftier than **`.`**

     foo/bar.baz:mumble:frotz

...that would be a 2-element PATH! with a 3-element CHAIN! in the second position that has a 2-element TUPLE! in its first position.


## `::` and `:` Will No Longer be SIGIL!

This means sequences of all colons will be WORD!s, like `[/ // /// etc]` and `[. .. ... etc]`

It was perhaps a bit suspicious that colons could appear on the beginning of a word or the end of the word.  That makes it seem more like an interstitial sequencing character than a SIGIL!

This means that you can put SIGILs on chains, including the trivial chains **`@:word`** or **`$(group):`** which previously needed two cells, e.g. **`(@ :word)`** or **`($ &#39;(set-group):)`**.

   * Looks tighter, evaluates faster, and you don&#39;t have to quote evaluative things

   * You can communicate more information with the single value if it can carry the sigil along

## Notationally Competes with TIME!

We have to decide what **`10:20`** is.

When a parallel problem happened with **1.2** needing to be either DECIMAL! or TUPLE!, the decision was to make it a DECIMAL!.  So maybe CHAIN! reserves cases where numbers are at the head for other types?

But it&#39;s a shame because it seems this is made for dialecting on much more interesting level:

    for x 1:10 [print x]

    for x 1:(end) [print x]

    for x (start):10 [print x]

    for x 0:10/2 [print x]   ; /2 could mean bump by 2

I wonder if TIME! could be moved out of the way somehow.  Maybe the weird forms that interfere with generality of sequences could be the syntaxes like **`#[10:00]`** or **`@time/&lt;10:00&gt;`** ... is TIME! really used so often and so critically that it can&#39;t be delimited out of band?  If contextually you know a spot should have time, [could it just be **`&lt;10:00&gt;`** and you add the **`@time/`** to it for processing](https://forum.rebol.info/t/kinds-of-values/466)?

We can debate it.  The easiest compatibility rule would be just to know that there are no 2-element chains that start with numbers.

## URL! is **NOT** a Conflict

You might imagine **`http://example.com`** is a 3-element PATH!:

* First slot is a CHAIN! of `[http _]`

* Second slot is a BLANK!

* Third slot is a TUPLE! of `[example com]`

But I think it&#39;s too valuable to be able to express URL!s easily.  So this seals the deal that you can&#39;t put BLANK!s internal to ANY-SEQUENCE!.  So there&#39;s no **foo//bar** paths or **foo...bar** tuples or **foo:::::bar** chains.  With // being illegal in path, it&#39;s free to be a URL!.

(We were already saying that **/** and **//** and **...** etc. are WORD!s, so the bias against doubling up these interstitial delimiters in sequences has been building up over time, and this just finalizes that.)

Yet strangely enough, **`http:/example.com`** with just one slash *is* a valid PATH! of 2 elements, with a CHAIN! in the first slot and a TUPLE! in the second.  Maybe this was destiny all along, and why URL!s have the two slashes.  :monkey_face:  *(I actually do believe the two slashes were chosen to make URL!s &quot;stand out&quot; visually, so it may not be a complete coincidence that it works out well for us here.)*

## But... no more URN!

The subset of legal URN!s that we can represent would be CHAIN!.

How many URN!s would be ruled out?  Interestingly the first two examples I found off stackoverflow of URN!s would be valid chains:

    URN (not URL): urn:oasis:names:specification:docbook:dtd:xml:4.1.2
    URN (not URL): tel:+1-816-555-1212 (disputed, see comments)

But I&#39;m not really concerned if it can&#39;t represent all of them.  The world doesn&#39;t revolve around URNs anyway.  (Maybe they were supposed to be important at one point, but I haven&#39;t noticed them ever being so.)

We have things like **`@urn/&quot;tel:1-816-555-1212&quot;`** if we need them, as inert forms

## Cuts Down On Total Number Of Fundamental Types

What&#39;s added:

* `a:b` ... CHAIN! 
* `@a:b` ... THE-CHAIN! 
* `$a:b` ... VAR-CHAIN! (should things like this be called e.g. BIND-CHAIN! ?)
* `^a:b` ... META-CHAIN!
* `&amp;a:b` ... TYPE-CHAIN!

*(I do think that perhaps calling e.g. $XXX a BIND-WORD! is better than VAR-WORD!, because VAR is an abbreviation and it doesn&#39;t look as classy.)*

Compare that to what&#39;s removed:

* `:[a b]` ... GET-BLOCK!
* `[a b]:` ... SET-BLOCK!
* `:(a b)` ... GET-GROUP!
* `(a b):` ... SET-GROUP!
* `:{a b}` ... GET-FENCE!
* `{a b}:` ... SET-FENCE!
* `:a` ... GET-WORD!
* `a:` ... SET-WORD!
* `:a/b` ... GET-PATH!
* `a/b:` ... SET-PATH!
* `:a.b` ... GET-TUPLE!
* `a.b:` ... SET-TUPLE!

And despite sacrificing those types, due to past labors [there&#39;s no loss in storage efficiency](https://forum.rebol.info/t/path-and-tuple-compression-explained/1008).

Fewer basic types, but a lot more fun parts.

## Resolves Questions That Have Plagued Rebol For Decades

There was always this question about &quot;why can&#39;t you put SET-WORD! or GET-WORD! in a PATH!&quot;, and people argued about it.

But now the answer is that they&#39;re not fundamental parts, and you&#39;re just dealing with the laws of interstitial delimiters.  You can&#39;t put a path &quot;in&quot; a path, but you can merge them.  So now it&#39;s just that you can&#39;t put a chain in a chain, only join them.

So this means a test like SET-PATH? doesn&#39;t make any sense.  Chains always live underneath paths!  But there *are* what are effectively SET-TUPLE (!) because with **`.a:`** you have the tuple under the chain.

Hence we&#39;re resurrecting things like **`a/:b`** but with a whole different logic behind it.  Because you can&#39;t run the risk of putting a GET-WORD in the first slot of a GET-PATH! *because there are no &quot;GET-PATHs&quot;*.

This *finally* makes perfect sense.

## This Means We Won&#39;t Have Undecorated IPV6 Literals

Red is pursuing the idea of IPV6 literals, but this won&#39;t work with that.  We&#39;ll need another way.

Since the @ sigil makes things evaluate to themselves, it&#39;s going to be the likely basis of extensible literals:

    &gt;&gt; @ipv6:&lt;FE80:CD00:0:CDE:1257:0:211E:729C&gt;
    == @ipv6:&lt;FE80:CD00:0:CDE:1257:0:211E:729C&gt;

## **:FOO:** Actually Looks Kind of Cool

When it comes to dialecting, **`.FOO.`** doesn&#39;t seem like something you&#39;d use as a token.  It&#39;s more like a notation that would just sort of come up if your rules happened to intersect (&quot;starting with a dot does X, ending with a dot does Y, starting and ending with a dot means you want both X and Y&quot;).

**`/FOO/`** is a bit better.  I can imagine it labeling something, while not using up BLOCK! or GROUP! or FENCE! to get the look

    [
       /FIRST/ this could be (some code)
       You could do [something here]
       /SECOND/ more stuff.
       {your fence here}
    ]

But **`:FOO:`** seems like something you might use.  As does **`:[foo]:`**, **`-:[foo]:-`**, etc.  Neat things to have in the parts box.</description>
    
    <lastBuildDate>Sun, 15 Sep 2024 14:05:46 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Introducing:The:New:CHAIN!:Datatype</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="2226">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I think the answer is we will be doing less naming, and more pattern-matching.</p>
</blockquote>
</aside>
<p>As a Haskeller, I say: bring it on! Pattern-matching is enormously powerful, and Ren-C has the syntax to make it really ergonomic.</p>
<p>(Let me put it this way: in many languages, pattern-matching is already a separate dialect in all but name. What could a language with proper dialecting support do with it?)</p>
          <p><a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/introducingnew-chain-datatype/2226/7</link>
        <pubDate>Sun, 15 Sep 2024 14:05:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2226-7</guid>
        <source url="https://forum.rebol.info/t/introducingnew-chain-datatype/2226.rss">Introducing:The:New:CHAIN!:Datatype</source>
      </item>
      <item>
        <title>Introducing:The:New:CHAIN!:Datatype</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>We're about to face some radical new mechanics... <img src="https://forum.rebol.info/images/emoji/twitter/melting_face.png?v=12" title=":melting_face:" class="emoji" alt=":melting_face:" loading="lazy" width="20" height="20"></p>
<p>Blank-tailed CHAIN!s will turn SET-WORD? into a type constraint...not a fundamental type.  And blank-headed chains for "GET-WORD?" won't <em>be</em> a get-word any more, it will be a <em>refinement</em>.  Would the 2-element CHAIN! <strong><code>foo:</code></strong> still consider itself an "ANY-WORD?" at that point...?  Is <strong>:foo:bar</strong> a refinement as well?</p>
<p>More weirdness is afoot: "converting" a "set-word" to a word just means picking the head off a chain... and "converting" a "word" to a SET-WORD! would likely be done as <strong>compose $(word):</strong> or similar:</p>
<pre><code>&gt;&gt; word: 'foo

old&gt;&gt; to set-word! word
== foo:

new&gt;&gt; compose $(word):
== foo:
</code></pre>
<p>Such things may seem quite unfamiliar right now.  But just looking at that one random instance, it's actually one less character.  And it looks a bit "tighter" (to me).  Certainly it is more general, and learning how to do it will serve you better when you want to build more complex things.  (Though people who want TO-SET-WORD can have it).</p>
<p><strong>I think the answer is we will be doing less naming, and more pattern-matching.</strong>  Does it matter what you call it, if you say:</p>
<pre><code>foo: func [
    setter [(word!):]
][
    print "would [{word!}:] be a better choice, leaving (...) for COMPOSEs?"
]
</code></pre>
<p>I'm sure there are lots of useful routines to be invented.  Some imagination:</p>
<pre><code>&gt;&gt; item: 'a.b:c.d:1:(2)

&gt;&gt; dissect item ${chain?}:1:(2)
== a.b:c.d

&gt;&gt; item: 'a.b:c.d:1:{2}

&gt;&gt; dissect:() item $(chain?):1:{2}
== a.b:c.d
</code></pre>
<p>But it's definitely going to be an upheaval.</p>
<h2>
<a name="one-step-at-a-time-man_walking-1" class="anchor" href="https://forum.rebol.info#one-step-at-a-time-man_walking-1"></a>One Step At A Time... <img src="https://forum.rebol.info/images/emoji/twitter/man_walking.png?v=12" title=":man_walking:" class="emoji" alt=":man_walking:" loading="lazy" width="20" height="20">
</h2>
<p>First step is to keep the whole system working as closely as possible to what it is, just with new mechanics under the hood... so names like SET-WORD? will be sticking around in the near term.</p>
<p>Conversions like <strong>to set-word!</strong> would have to be redone as <strong>to-set-word</strong> due to the absence of the fundamental type to pass in.</p>
<p>After the dust settles from all that, I guess it will just be time to go little by little to see what makes for effective and understandable code.</p>
          <p><a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/introducingnew-chain-datatype/2226/6</link>
        <pubDate>Sun, 15 Sep 2024 10:15:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2226-6</guid>
        <source url="https://forum.rebol.info/t/introducingnew-chain-datatype/2226.rss">Introducing:The:New:CHAIN!:Datatype</source>
      </item>
      <item>
        <title>Introducing:The:New:CHAIN!:Datatype</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2226">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">for x 1:10 [print x]

for x 1:(end) [print x]

for x (start):10 [print x]
</code></pre>
</blockquote>
</aside>
<p>So I was a little nervous about the evaluator-activeness of a GROUP!-headed CHAIN!.</p>
<p>One might assume it would be for:</p>
<pre><code>verb: pick [append insert] 1

(verb):dup [a b c] [d e] 10
</code></pre>
<p>But if you wanted that to run a function, that seems like a good job for slash!</p>
<pre><code>verb: pick [append insert] 1

/(verb):dup [a b c] [d e] 10
</code></pre>
<p>I don't think it would come up that often, compared to how often you would want to specify ranges, and have it not assume you're trying to run a function.</p>
<p>Having it be inert is best for dialecting, because what's in the group may not even be "code".</p>
<pre><code>my-dialected-thing (*):2
</code></pre>
<p>So WORD!-headed CHAIN! would be the only evaluator-active kind.</p>
          <p><a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/introducingnew-chain-datatype/2226/5</link>
        <pubDate>Sat, 31 Aug 2024 02:13:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2226-5</guid>
        <source url="https://forum.rebol.info/t/introducingnew-chain-datatype/2226.rss">Introducing:The:New:CHAIN!:Datatype</source>
      </item>
      <item>
        <title>Introducing:The:New:CHAIN!:Datatype</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2226">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Hopefully now that there are fewer of these, you won't be as eager to murder the remaining ones. <img src="https://forum.rebol.info/images/emoji/twitter/dagger.png?v=12" title=":dagger:" class="emoji" alt=":dagger:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
</blockquote>
</aside>
<p>Sure, I’ll give them a reprieve. For now…</p>
          <p><a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/introducingnew-chain-datatype/2226/4</link>
        <pubDate>Thu, 29 Aug 2024 05:09:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2226-4</guid>
        <source url="https://forum.rebol.info/t/introducingnew-chain-datatype/2226.rss">Introducing:The:New:CHAIN!:Datatype</source>
      </item>
      <item>
        <title>Introducing:The:New:CHAIN!:Datatype</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2226">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Hah, I <a href="https://forum.rebol.info/t/a-proliferation-of-word-s/2147/5">always knew </a> these were a bad idea! I’m not surprised to see a more flexible and powerful system arise from unifying them.</p>
</blockquote>
</aside>
<p>Glad it aligns with your intuition!  Hopefully now that there are fewer of these, you won't be as eager to murder the remaining ones.  <img src="https://forum.rebol.info/images/emoji/twitter/dagger.png?v=12" title=":dagger:" class="emoji" alt=":dagger:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>In my early days of involvement I tried to convince people there were no SET-PATH! or GET-PATH!... only PATH! with SET-WORD!s in the last position and GET-WORD!s in the first position.  It was all about trying to get away from the ambiguities, which still exist in Red:</p>
<pre><code>red&gt;&gt; p1: to path! [a b c:]
== a/b/c:

red&gt;&gt; p2: first [a/b/c:]
== a/b/c:

red&gt;&gt; type? p1
== path!

red&gt;&gt; type? p2
== set-path!
</code></pre>
<p><em>(Of course you can generate all kinds of gibberish in historical Redbol with paths, which is why sequences in Ren-C are immutable, can't be less than two elements, and do not carry a series position so they are always "at their head")</em></p>
<pre><code>red&gt;&gt; to path! []
== 

red&gt;&gt; p3: 'a/b/c
== a/b/c

red&gt;&gt; skip p3 3
==

&gt;&gt; to get-path! [:a b c:]
== ::a/b/c:
</code></pre>
<p>I don't recall what all the objections were to my proposal about killing off SET-PATH! and GET-PATH!.  But people didn't like it.  I'm sure one of the objections was that you had to "dig" to find out if a path had set-like or get-like behavior.</p>
<p>But with tuples and chains, you can appropriately ask <strong><code>:a</code></strong> or <strong><code>a.b:</code></strong> if they have a terminal colon or leading colon, and find out what you want to know in a way that nests right.  The chain is on top of both.  And having <strong><code>a/b:</code></strong> "hide" the colon under the path isn't a concern, <em>because that's not how you do assignment.</em></p>
          <p><a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/introducingnew-chain-datatype/2226/3</link>
        <pubDate>Thu, 29 Aug 2024 04:07:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2226-3</guid>
        <source url="https://forum.rebol.info/t/introducingnew-chain-datatype/2226.rss">Introducing:The:New:CHAIN!:Datatype</source>
      </item>
      <item>
        <title>Introducing:The:New:CHAIN!:Datatype</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2226">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Compare that to what's removed:</p>
<ul>
<li><code>:[a b]</code> ... GET-BLOCK!</li>
<li><code>[a b]:</code> ... SET-BLOCK!</li>
<li><code>:(a b)</code> ... GET-GROUP!</li>
<li><code>(a b):</code> ... SET-GROUP!</li>
<li><code>:{a b}</code> ... GET-FENCE!</li>
<li><code>{a b}:</code> ... SET-FENCE!</li>
<li><code>:a</code> ... GET-WORD!</li>
<li><code>a:</code> ... SET-WORD!</li>
<li><code>:a/b</code> ... GET-PATH!</li>
<li><code>a/b:</code> ... SET-PATH!</li>
<li><code>:a.b</code> ... GET-TUPLE!</li>
<li><code>a.b:</code> ... SET-TUPLE!</li>
</ul>
</blockquote>
</aside>
<p>Hah, I <a href="https://forum.rebol.info/t/a-proliferation-of-word-s/2147/5">always knew</a> these were a bad idea! I’m not surprised to see a more flexible and powerful system arise from unifying them. (Much more flexible than my own suggestions were, even.)</p>
          <p><a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/introducingnew-chain-datatype/2226/2</link>
        <pubDate>Thu, 29 Aug 2024 03:06:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2226-2</guid>
        <source url="https://forum.rebol.info/t/introducingnew-chain-datatype/2226.rss">Introducing:The:New:CHAIN!:Datatype</source>
      </item>
      <item>
        <title>Introducing:The:New:CHAIN!:Datatype</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As part of a <a href="https://forum.rebol.info/t/big-alien-proposal-word-runs-functions/1905/13">giant overhaul of function application</a>, we're getting rid of SET-XXX! and GET-XXX! as fundamental types.  Instead, we'll have a new sequence that's like PATH! and TUPLE!...except that uses the colon character as its interstitial delimiter.</p>
<h2>
<a name="thesewill-be1020called-chain-1" class="anchor" href="https://forum.rebol.info#thesewill-be1020called-chain-1"></a><code>these:&lt;will be&gt;:1020:"called CHAIN!"</code>
</h2>
<p><img src="https://forum.rebol.info/images/emoji/twitter/alien.png?v=12" title=":alien:" class="emoji only-emoji" alt=":alien:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="three-is-a-magic-numberhttpsyoutubej8lrkcw2_pkt21-2" class="anchor" href="https://forum.rebol.info#three-is-a-magic-numberhttpsyoutubej8lrkcw2_pkt21-2"></a><a href="https://youtu.be/J8lRKCw2_Pk?t=21"><img src="https://forum.rebol.info/images/emoji/twitter/three.png?v=12" title=":three:" class="emoji" alt=":three:" loading="lazy" width="20" height="20">  is a magic number.</a>
</h2>
<p>It gives us a nice symmetry of having three ANY-LIST! types, and three ANY-SEQUENCE! types</p>
<ul>
<li>
<p><strong><code>[BLOCK!] (GROUP!) {FENCE!}</code></strong></p>
</li>
<li>
<p><strong><code>/PATH!/ .TUPLE!. :CHAIN!:</code></strong></p>
</li>
</ul>
<h2>
<a name="chain-is-higher-precedence-than-tuple-lower-than-path-3" class="anchor" href="https://forum.rebol.info#chain-is-higher-precedence-than-tuple-lower-than-path-3"></a>CHAIN! is Higher Precedence Than TUPLE!, Lower Than PATH!</h2>
<p>Pleasingly, the hierarchy of the interstitials is in accordance with their "heft"... <strong><code>/</code></strong> is heftier than <strong><code>:</code></strong> which is heftier than <strong><code>.</code></strong></p>
<pre><code> foo/bar.baz:mumble:frotz
</code></pre>
<p>...that would be a 2-element PATH! with a 3-element CHAIN! in the second position that has a 2-element TUPLE! in its first position.</p>
<h2>
<a name="and-will-no-longer-be-sigil-4" class="anchor" href="https://forum.rebol.info#and-will-no-longer-be-sigil-4"></a><code>::</code> and <code>:</code> Will No Longer be SIGIL!</h2>
<p>This means sequences of all colons will be WORD!s, like <code>[/ // /// etc]</code> and <code>[. .. ... etc]</code></p>
<p>It was perhaps a bit suspicious that colons could appear on the beginning of a word or the end of the word.  That makes it seem more like an interstitial sequencing character than a SIGIL!</p>
<p>This means that you can put SIGILs on chains, including the trivial chains <strong><code>@:word</code></strong> or <strong><code>$(group):</code></strong> which previously needed two cells, e.g. <strong><code>(@ :word)</code></strong> or <strong><code>($ '(set-group):)</code></strong>.</p>
<ul>
<li>
<p>Looks tighter, evaluates faster, and you don't have to quote evaluative things</p>
</li>
<li>
<p>You can communicate more information with the single value if it can carry the sigil along</p>
</li>
</ul>
<h2>
<a name="notationally-competes-with-time-5" class="anchor" href="https://forum.rebol.info#notationally-competes-with-time-5"></a>Notationally Competes with TIME!</h2>
<p>We have to decide what <strong><code>10:20</code></strong> is.</p>
<p>When a parallel problem happened with <strong>1.2</strong> needing to be either DECIMAL! or TUPLE!, the decision was to make it a DECIMAL!.  So maybe CHAIN! reserves cases where numbers are at the head for other types?</p>
<p>But it's a shame because it seems this is made for dialecting on much more interesting level:</p>
<pre><code>for x 1:10 [print x]

for x 1:(end) [print x]

for x (start):10 [print x]

for x 0:10/2 [print x]   ; /2 could mean bump by 2
</code></pre>
<p>I wonder if TIME! could be moved out of the way somehow.  Maybe the weird forms that interfere with generality of sequences could be the syntaxes like <strong><code>#[10:00]</code></strong> or <strong><code>@time/&lt;10:00&gt;</code></strong> ... is TIME! really used so often and so critically that it can't be delimited out of band?  If contextually you know a spot should have time, <a href="https://forum.rebol.info/t/kinds-of-values/466">could it just be <strong><code>&lt;10:00&gt;</code></strong> and you add the <strong><code>@time/</code></strong> to it for processing</a>?</p>
<p>We can debate it.  The easiest compatibility rule would be just to know that there are no 2-element chains that start with numbers.</p>
<h2>
<a name="url-is-not-a-conflict-6" class="anchor" href="https://forum.rebol.info#url-is-not-a-conflict-6"></a>URL! is <strong>NOT</strong> a Conflict</h2>
<p>You might imagine <strong><code>http://example.com</code></strong> is a 3-element PATH!:</p>
<ul>
<li>
<p>First slot is a CHAIN! of <code>[http _]</code></p>
</li>
<li>
<p>Second slot is a BLANK!</p>
</li>
<li>
<p>Third slot is a TUPLE! of <code>[example com]</code></p>
</li>
</ul>
<p>But I think it's too valuable to be able to express URL!s easily.  So this seals the deal that you can't put BLANK!s internal to ANY-SEQUENCE!.  So there's no <strong>foo//bar</strong> paths or <strong>foo...bar</strong> tuples or <strong>foo:::::bar</strong> chains.  With // being illegal in path, it's free to be a URL!.</p>
<p>(We were already saying that <strong>/</strong> and <strong>//</strong> and <strong>...</strong> etc. are WORD!s, so the bias against doubling up these interstitial delimiters in sequences has been building up over time, and this just finalizes that.)</p>
<p>Yet strangely enough, <strong><code>http:/example.com</code></strong> with just one slash <em>is</em> a valid PATH! of 2 elements, with a CHAIN! in the first slot and a TUPLE! in the second.  Maybe this was destiny all along, and why URL!s have the two slashes.  <img src="https://forum.rebol.info/images/emoji/twitter/monkey_face.png?v=12" title=":monkey_face:" class="emoji" alt=":monkey_face:" loading="lazy" width="20" height="20">  <em>(I actually do believe the two slashes were chosen to make URL!s "stand out" visually, so it may not be a complete coincidence that it works out well for us here.)</em></p>
<h2>
<a name="but-no-more-urn-7" class="anchor" href="https://forum.rebol.info#but-no-more-urn-7"></a>But... no more URN!</h2>
<p>The subset of legal URN!s that we can represent would be CHAIN!.</p>
<p>How many URN!s would be ruled out?  Interestingly the first two examples I found off stackoverflow of URN!s would be valid chains:</p>
<pre><code>URN (not URL): urn:oasis:names:specification:docbook:dtd:xml:4.1.2
URN (not URL): tel:+1-816-555-1212 (disputed, see comments)
</code></pre>
<p>But I'm not really concerned if it can't represent all of them.  The world doesn't revolve around URNs anyway.  (Maybe they were supposed to be important at one point, but I haven't noticed them ever being so.)</p>
<p>We have things like <strong><code>@urn/"tel:1-816-555-1212"</code></strong> if we need them, as inert forms</p>
<h2>
<a name="cuts-down-on-total-number-of-fundamental-types-8" class="anchor" href="https://forum.rebol.info#cuts-down-on-total-number-of-fundamental-types-8"></a>Cuts Down On Total Number Of Fundamental Types</h2>
<p>What's added:</p>
<ul>
<li>
<code>a:b</code> ... CHAIN!</li>
<li>
<code>@a:b</code> ... THE-CHAIN!</li>
<li>
<code>$a:b</code> ... VAR-CHAIN! (should things like this be called e.g. BIND-CHAIN! ?)</li>
<li>
<code>^a:b</code> ... META-CHAIN!</li>
<li>
<code>&amp;a:b</code> ... TYPE-CHAIN!</li>
</ul>
<p><em>(I do think that perhaps calling e.g. $XXX a BIND-WORD! is better than VAR-WORD!, because VAR is an abbreviation and it doesn't look as classy.)</em></p>
<p>Compare that to what's removed:</p>
<ul>
<li>
<code>:[a b]</code> ... GET-BLOCK!</li>
<li>
<code>[a b]:</code> ... SET-BLOCK!</li>
<li>
<code>:(a b)</code> ... GET-GROUP!</li>
<li>
<code>(a b):</code> ... SET-GROUP!</li>
<li>
<code>:{a b}</code> ... GET-FENCE!</li>
<li>
<code>{a b}:</code> ... SET-FENCE!</li>
<li>
<code>:a</code> ... GET-WORD!</li>
<li>
<code>a:</code> ... SET-WORD!</li>
<li>
<code>:a/b</code> ... GET-PATH!</li>
<li>
<code>a/b:</code> ... SET-PATH!</li>
<li>
<code>:a.b</code> ... GET-TUPLE!</li>
<li>
<code>a.b:</code> ... SET-TUPLE!</li>
</ul>
<p>And despite sacrificing those types, due to past labors <a href="https://forum.rebol.info/t/path-and-tuple-compression-explained/1008">there's no loss in storage efficiency</a>.</p>
<p>Fewer basic types, but a lot more fun parts.</p>
<h2>
<a name="resolves-questions-that-have-plagued-rebol-for-decades-9" class="anchor" href="https://forum.rebol.info#resolves-questions-that-have-plagued-rebol-for-decades-9"></a>Resolves Questions That Have Plagued Rebol For Decades</h2>
<p>There was always this question about "why can't you put SET-WORD! or GET-WORD! in a PATH!", and people argued about it.</p>
<p>But now the answer is that they're not fundamental parts, and you're just dealing with the laws of interstitial delimiters.  You can't put a path "in" a path, but you can merge them.  So now it's just that you can't put a chain in a chain, only join them.</p>
<p>So this means a test like SET-PATH? doesn't make any sense.  Chains always live underneath paths!  But there <em>are</em> what are effectively SET-TUPLE (!) because with <strong><code>.a:</code></strong> you have the tuple under the chain.</p>
<p>Hence we're resurrecting things like <strong><code>a/:b</code></strong> but with a whole different logic behind it.  Because you can't run the risk of putting a GET-WORD in the first slot of a GET-PATH! <em>because there are no "GET-PATHs"</em>.</p>
<p>This <em>finally</em> makes perfect sense.</p>
<h2>
<a name="this-means-we-wont-have-undecorated-ipv6-literals-10" class="anchor" href="https://forum.rebol.info#this-means-we-wont-have-undecorated-ipv6-literals-10"></a>This Means We Won't Have Undecorated IPV6 Literals</h2>
<p>Red is pursuing the idea of IPV6 literals, but this won't work with that.  We'll need another way.</p>
<p>Since the @ sigil makes things evaluate to themselves, it's going to be the likely basis of extensible literals:</p>
<pre><code>&gt;&gt; @ipv6:&lt;FE80:CD00:0:CDE:1257:0:211E:729C&gt;
== @ipv6:&lt;FE80:CD00:0:CDE:1257:0:211E:729C&gt;
</code></pre>
<h2>
<a name="foo-actually-looks-kind-of-cool-11" class="anchor" href="https://forum.rebol.info#foo-actually-looks-kind-of-cool-11"></a><strong>:FOO:</strong> Actually Looks Kind of Cool</h2>
<p>When it comes to dialecting, <strong><code>.FOO.</code></strong> doesn't seem like something you'd use as a token.  It's more like a notation that would just sort of come up if your rules happened to intersect ("starting with a dot does X, ending with a dot does Y, starting and ending with a dot means you want both X and Y").</p>
<p><strong><code>/FOO/</code></strong> is a bit better.  I can imagine it labeling something, while not using up BLOCK! or GROUP! or FENCE! to get the look</p>
<pre><code>[
   /FIRST/ this could be (some code)
   You could do [something here]
   /SECOND/ more stuff.
   {your fence here}
]
</code></pre>
<p>But <strong><code>:FOO:</code></strong> seems like something you might use.  As does <strong><code>:[foo]:</code></strong>, <strong><code>-:[foo]:-</code></strong>, etc.  Neat things to have in the parts box.</p>
          <p><a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/introducingnew-chain-datatype/2226/1</link>
        <pubDate>Thu, 29 Aug 2024 01:57:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2226-1</guid>
        <source url="https://forum.rebol.info/t/introducingnew-chain-datatype/2226.rss">Introducing:The:New:CHAIN!:Datatype</source>
      </item>
  </channel>
</rss>
