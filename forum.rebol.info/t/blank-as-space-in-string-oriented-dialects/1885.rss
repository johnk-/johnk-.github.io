<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
    <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885</link>
    <description>*(Note: I&#39;m kicking off this discussion with a conclusion from an otherwise outdated thread, circa 2020.)*

---

&gt; Having had a fair amount of time to reflect on the evolution of things, I think we need to make undecorated word fetches not produce an error with NULL.  I&#39;ve outlined the history of why they were erroring at the outset, and walking through it I think there&#39;s a coherent plan for when there is tolerance and when there is not (e.g. function arguments by default).
&gt;
&gt; But today I realized something particularly pleasing about this.  We had a concept that BLANK!...due to its non-erroring status, would be the way of &quot;disarming&quot; a null assignment to a variable.  It&#39;s still going to be a way of disarming parameters for &quot;blank in, null out&quot;, but not needed for a plain assignment.
&gt;
&gt; **That frees up blank for dialect uses distinct from NULL.**
&gt;
&gt; In particular, it recovers it for something that was tried for a time... being synonymous with space (**`#&quot; &quot;`**).  The concept emerged when it was called into question whether PRINT should default to adding implicit spaces, and how you should avoid it doing so.  **print [&quot;It&quot; _ was _ &quot;ugly&quot;]** if the common case didn&#39;t have implicit spaces, so ultimately we went with SPACED by default and you could write **print unspaced [...]** if that&#39;s what you wanted.
&gt;
&gt; Yet `_` was deemed to need to behave just as NULL did, as you couldn&#39;t put a NULL in a variable.  So when you needed to, you would use blank, and it would be the non-erroring synonym.  It was a sad loss for when you wanted a nice way to note spaces, but seemed to be the way it had to be.
&gt;
&gt; ## Well, not any more!
&gt;
&gt; With non-erroring NULLs, dialects are free to distinguish the behavior of blanks and nulls.  NULL being the most obvious &quot;nothing&quot;.  So why not bring back BLANK! as being a synonym for space?
&gt;
&gt; It still has the &quot;no delimiters applied&quot; status of a CHAR!.  So **spaced [&quot;a&quot; _ _ &quot;b&quot;]** would still be just two spaces between the **a** and the **b**... not five.
&gt;
&gt; Looking good!</description>
    
    <lastBuildDate>Sun, 04 Sep 2022 14:34:06 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Things underwent another change, where we expect:</p>
<pre><code>&gt;&gt; x: _

&gt;&gt; x
; null
</code></pre>
<p>This may seem like it makes the BLANK!-as-SPACE-in-DELIMIT a no-go.</p>
<p>But...with isotopes, I thought, wait... <em>what if...</em></p>
<pre><code>&gt;&gt; _
== ~_~  ; isotope

&gt;&gt; x: _
; null
</code></pre>
<p><strong>There can be an intermediate state blank goes through on its way to decay to NULL.</strong>  And if you're interested in that state you can decide if for your context it should be more null-like, or more space-like.</p>
<p>Rigging up DELIMIT on this, we can see... it works!</p>
<pre><code>&gt;&gt; unspaced ["Hello" _ "World"]
== "Hello World"
</code></pre>
<p>Because DELIMIT isn't looking for blanks literally--only as evaluative products--it doesn't do nasty things like subvert enfix usages:</p>
<pre><code>&gt;&gt; leftq: enfix lambda ['b [blank!]] ["BLANK!"]
== #[action! {leftq} ['b]]

&gt;&gt; unspaced ["Hello" _ leftq "World"]
== "HelloBLANK!World"
</code></pre>
<p>Another have-your-cake-and-eat-it-too feature... <img src="https://forum.rebol.info/images/emoji/twitter/cake.png?v=9" title=":cake:" class="emoji" alt=":cake:"> <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          <p><a href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/3</link>
        <pubDate>Sun, 04 Sep 2022 14:34:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1885-3</guid>
        <source url="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss">BLANK! (_) as SPACE in String-Oriented Dialects</source>
      </item>
      <item>
        <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1885">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's still going to be a way of disarming parameters for "blank in, null out", but not needed for a plain assignment.</p>
</blockquote>
</aside>
<h2>Even better news here in 2022...</h2>
<p><strong>...it's not even used for <em>that</em> anymore!</strong></p>
<p>With definitional errors as the underpinning, <a href="https://forum.rebol.info/t/definitional-errors-as-blank-in-null-out-alternative/1880"><em>BLANK!-in-NULL-out has been replaced by NULL-in-TRY-out.</em></a></p>
<p>This is good.  Because it had been uncomfortable dealing with the difference in meaning for a literal blank vs. a fetched blank:</p>
<pre><code>&gt;&gt; maybe-unused-var: _

&gt;&gt; unspaced ["a" maybe-unused-var "b"]
== "ab"

&gt;&gt; unspaced ["a" _ "b"]
== "a b"
</code></pre>
<p>I tried various ways of rationalizing this (for instance, "a WORD! doesn't act like a fetched version of itself, why should BLANK! have to?")  But I'll freely admit this was coming from a place of <em>"I want blank for space in string dialects--so I'll keep justifying it until I find a good-enough sounding excuse, even if it's kind of broken."</em></p>
<p>Of course, I'm only hurting myself when I do that.  This bit me when I was trying to factor the internals so that DELIMIT was based on the same code as REDUCE.  Because if I thought of DELIMIT as being a kind of post-processing pass on what a reduce was doing, it wouldn't have enough information to accomplish the distinction above:</p>
<pre><code>unspaced ["a" _ "b"]

Step 1: reduce ["a" _ "b"]
== ["a" _ "b"]
Step 2: ...
Step 3:
== "a b"
</code></pre>
<p>vs.</p>
<pre><code>unspaced ["a" maybe-unused-var "b"]

Step 1: reduce ["a" maybe-unused-var "b"]
== ["a" _ "b"]
Step 2: ...
Step 3:
== "ab" 
</code></pre>
<p><img src="https://forum.rebol.info/images/emoji/twitter/raised_hand.png?v=9" title=":raised_hand:" class="emoji" alt=":raised_hand:"> <em>"What's step 2?"</em></p>
<h2>Everything Changed...</h2>
<p>Now any transitions from blanks to NULL-ness or VOID-ness or SPACE-ness (or anything else) will be conscious acts of a dialect.  It can do that without being beholden to some idea that BLANK! has to be reserved for an implementation mechanic of something like TRY.</p>
<p>You would really make a variable NULL, and to have it disappear in something like a REDUCE or UNSPACED you'd literally use MAYBE to do that.</p>
<pre><code>&gt;&gt; var: null

&gt;&gt; reduce ["a" var "b"]
** Error: var is NULL and REDUCE doesn't like that  ; paraphrased :-)

&gt;&gt; reduce ["a" maybe var "b"]  ; MAYBE turns NULL into VOID
== "ab"
</code></pre>
<p>With BLANK! now freed up, I think if the string conversions interpret it as space, that's great!</p>
<pre><code>&gt;&gt; to text! [Hello _ New _ Blank _ World!]
== "Hello New Blank World!"
</code></pre>
<p>Armed with GET-BLOCK! as REDUCE, you have some great shorthand:</p>
<pre><code>&gt;&gt; var1: "Hello"
&gt;&gt; var2: 'World!

&gt;&gt; to text! reduce [var1 _ 'New _ "Blank" _ var2]
== "Hello New Blank World!"

&gt;&gt; to text! :[var1 _ 'New _ "Blank" _ var2]
== "Hello New Blank World!"
</code></pre>
<p>Pleasing and solid.  And the internals benefit--as I mentioned--by being able to do things like build DELIMIT on top of REDUCE.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/broom.png?v=9" title=":broom:" class="emoji only-emoji" alt=":broom:"> <img src="https://forum.rebol.info/images/emoji/twitter/sparkles.png?v=9" title=":sparkles:" class="emoji only-emoji" alt=":sparkles:"></p>
<p><sub><em>And it should go without saying at this point... but... Redbol and your own ideas could come in and do all this differently.</em></sub></p>
          <p><a href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/2</link>
        <pubDate>Sat, 16 Jul 2022 12:18:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1885-2</guid>
        <source url="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss">BLANK! (_) as SPACE in String-Oriented Dialects</source>
      </item>
      <item>
        <title>BLANK! (_) as SPACE in String-Oriented Dialects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Note: I'm kicking off this discussion with a conclusion from an otherwise outdated thread, circa 2020.)</em></p>
<hr>
<blockquote>
<p>Having had a fair amount of time to reflect on the evolution of things, I think we need to make undecorated word fetches not produce an error with NULL.  I've outlined the history of why they were erroring at the outset, and walking through it I think there's a coherent plan for when there is tolerance and when there is not (e.g. function arguments by default).</p>
<p>But today I realized something particularly pleasing about this.  We had a concept that BLANK!...due to its non-erroring status, would be the way of "disarming" a null assignment to a variable.  It's still going to be a way of disarming parameters for "blank in, null out", but not needed for a plain assignment.</p>
<p><strong>That frees up blank for dialect uses distinct from NULL.</strong></p>
<p>In particular, it recovers it for something that was tried for a time... being synonymous with space (<strong><code>#" "</code></strong>).  The concept emerged when it was called into question whether PRINT should default to adding implicit spaces, and how you should avoid it doing so.  <strong>print ["It" _ was _ "ugly"]</strong> if the common case didn't have implicit spaces, so ultimately we went with SPACED by default and you could write <strong>print unspaced [...]</strong> if that's what you wanted.</p>
<p>Yet <code>_</code> was deemed to need to behave just as NULL did, as you couldn't put a NULL in a variable.  So when you needed to, you would use blank, and it would be the non-erroring synonym.  It was a sad loss for when you wanted a nice way to note spaces, but seemed to be the way it had to be.</p>
<h2>Well, not any more!</h2>
<p>With non-erroring NULLs, dialects are free to distinguish the behavior of blanks and nulls.  NULL being the most obvious "nothing".  So why not bring back BLANK! as being a synonym for space?</p>
<p>It still has the "no delimiters applied" status of a CHAR!.  So <strong>spaced ["a" _ _ "b"]</strong> would still be just two spaces between the <strong>a</strong> and the <strong>b</strong>... not five.</p>
<p>Looking good!</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885/1</link>
        <pubDate>Thu, 06 Feb 2020 23:32:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1885-1</guid>
        <source url="https://forum.rebol.info/t/blank-as-space-in-string-oriented-dialects/1885.rss">BLANK! (_) as SPACE in String-Oriented Dialects</source>
      </item>
  </channel>
</rss>
