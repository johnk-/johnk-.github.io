<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>REIFY and DEGRADE: a Narrower META and UNMETA</title>
    <link>https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163</link>
    <description>In the &quot;small improvements can be big&quot; category, I think that I&#39;ve settled on the name for the function that turns quasiforms into antiforms, but leaves everything else alone: **DEGRADE**...and its complement **REIFY** which turns antiforms into quasiforms (but leaves everything else alone).

    &gt;&gt; first [1020 ~null~]
    == 1020

    &gt;&gt; second [1020 ~null~]
    == ~null~

    &gt;&gt; degrade first [1020 ~null~]
    == 1020

    &gt;&gt; degrade second [1020 ~null~]
    == ~null~  ; anti

    &gt;&gt; 304
    == 304

    &gt;&gt; reify 304
    == 304

    &gt;&gt; true
    == ~true~  ; anti
    
    &gt;&gt; reify true
    == ~true~

If you&#39;re dealing with a full-band situation where you genuinely don&#39;t know if you&#39;re working with a &quot;meaningful quasiform&quot; where *quasi means quasi*, you have to use META and UNMETA.  But if you know that quasiforms aren&#39;t part of your data of interest, REIFY and DEGRADE can help you dodge adding and removing quote marks much (or most) of the time.
 
[quote=&quot;hostilefork, post:12, topic:1560&quot;]
Maybe it would be better (and give Chris less of a heart attack) if it said:

```
for-each [sigil&#39; items] [
    ~null~ [  word   tu.p.le   pa/th   [bl o ck]   (gr o up)  ]
    &#39;::    [  word:  tu.p.le:  pa/th:  [bl o ck]:  (gr o up): ]
    &#39;:     [ :word  :tu.p.le  :pa/th  :[bl o ck]  :(gr o up)  ]
    &#39;^     [ ^word  ^tu.p.le  ^pa/th  ^[bl o ck]  ^(gr o up)  ]
    &#39;&amp;     [ &amp;word  &amp;tu.p.le  &amp;pa/th  &amp;[bl o ck]  &amp;(gr o up)  ]
    &#39;@     [ @word  @tu.p.le  @pa/th  @[bl o ck]  @(gr o up)  ]
    &#39;$     [ $word  $tu.p.le  $pa/th  $[bl o ck]  $(gr o up)  ]
 ][
      for-each item items [
          if (unmeta sigil&#39;) &lt;&gt; sigil of item [fail [mold item]]
      ]
 ]
```
[/quote]

I like how DEGRADE can be used in situations like this to help you strike the quotes on the normal values...since SIGIL OF never returns quasiforms, only SIGIL! or a null antiform:

    for-each [sigil items] [
        ~null~ [  word   tu.p.le   pa/th   [bl o ck]   (gr o up)  ]
        ::     [  word:  tu.p.le:  pa/th:  [bl o ck]:  (gr o up): ]
        :      [ :word  :tu.p.le  :pa/th  :[bl o ck]  :(gr o up)  ]
        ^      [ ^word  ^tu.p.le  ^pa/th  ^[bl o ck]  ^(gr o up)  ]
        &amp;      [ &amp;word  &amp;tu.p.le  &amp;pa/th  &amp;[bl o ck]  &amp;(gr o up)  ]
        @      [ @word  @tu.p.le  @pa/th  @[bl o ck]  @(gr o up)  ]
        $      [ $word  $tu.p.le  $pa/th  $[bl o ck]  $(gr o up)  ]
    ][
        for-each item items [
            if (degrade sigil) &lt;&gt; sigil of item [
                fail [mold item]
            ]
        ]
    ]

I think this will be a useful and common pattern.

Void being a word antiform is locking this all up into place!

:atom_symbol: :+1:</description>
    
    <lastBuildDate>Sat, 09 Mar 2024 15:32:23 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>REIFY and DEGRADE: a Narrower META and UNMETA</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2163">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I think that I've settled on the name for the function that turns quasiforms into antiforms, but leaves everything else alone: <strong>DEGRADE</strong>...and its complement <strong>REIFY</strong></p>
</blockquote>
</aside>
<p>I guess I should have an answer to the question of why I didn't pair REIFY with UNREIFY.</p>
<p>Uh, maybe it should be called that?</p>
<p>The rationale in my head was something like:</p>
<ul>
<li>
<p>"oh, it's not always UNREIFY-ing, it leaves non-quasi things in their plain forms".  But it's not "always degrading" either.</p>
</li>
<li>
<p>UNREIFY doesn't scan well as a word (but UNMETA does?)</p>
</li>
</ul>
<p>There's an implicit meaning here where it's "REIFY-ANTIFORMS" and "UNREIFY-QUASIFORMS".  Something about REIFY only applying to antiforms makes clear intuitive sense (you don't need to reify a WORD!, it's already reified).  But you could imagine UNREIFY-ing a WORD! and getting an antiform word.  So the "-QUASIFORMS" is not as obvious.</p>
<p>I'm not 100% confident that the benefit of choosing a word besides UNREIFY is worth breaking the pairing, but DEGRADE is less off-putting in the source.  So it's what I went with.</p>
          <p><a href="https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163/2</link>
        <pubDate>Sat, 09 Mar 2024 15:32:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2163-2</guid>
        <source url="https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163.rss">REIFY and DEGRADE: a Narrower META and UNMETA</source>
      </item>
      <item>
        <title>REIFY and DEGRADE: a Narrower META and UNMETA</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the "small improvements can be big" category, I think that I've settled on the name for the function that turns quasiforms into antiforms, but leaves everything else alone: <strong>DEGRADE</strong>...and its complement <strong>REIFY</strong> which turns antiforms into quasiforms (but leaves everything else alone).</p>
<pre><code>&gt;&gt; first [1020 ~null~]
== 1020

&gt;&gt; second [1020 ~null~]
== ~null~

&gt;&gt; degrade first [1020 ~null~]
== 1020

&gt;&gt; degrade second [1020 ~null~]
== ~null~  ; anti

&gt;&gt; 304
== 304

&gt;&gt; reify 304
== 304

&gt;&gt; true
== ~true~  ; anti

&gt;&gt; reify true
== ~true~
</code></pre>
<p>If you're dealing with a full-band situation where you genuinely don't know if you're working with a "meaningful quasiform" where <em>quasi means quasi</em>, you have to use META and UNMETA.  But if you know that quasiforms aren't part of your data of interest, REIFY and DEGRADE can help you dodge adding and removing quote marks much (or most) of the time.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="12" data-topic="1560">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/weird-word-s-allow-but-escape-them/1560/12">Weird WORD!s - Allow, But Escape Them?</a>
</div>
<blockquote>
<p>Maybe it would be better (and give Chris less of a heart attack) if it said:</p>
<pre><code class="lang-plaintext">for-each [sigil' items] [
    ~null~ [  word   tu.p.le   pa/th   [bl o ck]   (gr o up)  ]
    '::    [  word:  tu.p.le:  pa/th:  [bl o ck]:  (gr o up): ]
    ':     [ :word  :tu.p.le  :pa/th  :[bl o ck]  :(gr o up)  ]
    '^     [ ^word  ^tu.p.le  ^pa/th  ^[bl o ck]  ^(gr o up)  ]
    '&amp;     [ &amp;word  &amp;tu.p.le  &amp;pa/th  &amp;[bl o ck]  &amp;(gr o up)  ]
    '@     [ @word  @tu.p.le  @pa/th  @[bl o ck]  @(gr o up)  ]
    '$     [ $word  $tu.p.le  $pa/th  $[bl o ck]  $(gr o up)  ]
 ][
      for-each item items [
          if (unmeta sigil') &lt;&gt; sigil of item [fail [mold item]]
      ]
 ]
</code></pre>
</blockquote>
</aside>
<p>I like how DEGRADE can be used in situations like this to help you strike the quotes on the normal values...since SIGIL OF never returns quasiforms, only SIGIL! or a null antiform:</p>
<pre><code>for-each [sigil items] [
    ~null~ [  word   tu.p.le   pa/th   [bl o ck]   (gr o up)  ]
    ::     [  word:  tu.p.le:  pa/th:  [bl o ck]:  (gr o up): ]
    :      [ :word  :tu.p.le  :pa/th  :[bl o ck]  :(gr o up)  ]
    ^      [ ^word  ^tu.p.le  ^pa/th  ^[bl o ck]  ^(gr o up)  ]
    &amp;      [ &amp;word  &amp;tu.p.le  &amp;pa/th  &amp;[bl o ck]  &amp;(gr o up)  ]
    @      [ @word  @tu.p.le  @pa/th  @[bl o ck]  @(gr o up)  ]
    $      [ $word  $tu.p.le  $pa/th  $[bl o ck]  $(gr o up)  ]
][
    for-each item items [
        if (degrade sigil) &lt;&gt; sigil of item [
            fail [mold item]
        ]
    ]
]
</code></pre>
<p>I think this will be a useful and common pattern.</p>
<p>Void being a word antiform is locking this all up into place!</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/atom_symbol.png?v=12" title=":atom_symbol:" class="emoji only-emoji" alt=":atom_symbol:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/+1.png?v=12" title=":+1:" class="emoji only-emoji" alt=":+1:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163/1</link>
        <pubDate>Sun, 03 Mar 2024 15:28:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2163-1</guid>
        <source url="https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163.rss">REIFY and DEGRADE: a Narrower META and UNMETA</source>
      </item>
  </channel>
</rss>
