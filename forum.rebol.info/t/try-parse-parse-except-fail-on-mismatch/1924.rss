<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>TRY PARSE + PARSE EXCEPT : *FAIL* On Mismatch</title>
    <link>https://forum.rebol.info/t/try-parse-parse-except-fail-on-mismatch/1924</link>
    <description>There&#39;s a snazzy new potential for giving more informative messages / logs from failed parses... which means we now have a more interesting option than we might have had before.

Imagine something like:

    &gt;&gt; parse &quot;aaa&quot; [some &quot;a&quot; some &quot;b&quot;]
    ** Error: SOME requires at least one match
    ** Where: [some &quot;a&quot; \\ some &quot;b&quot; \\]
    ; Note: this failure can be intercepted by TRY, EXCEPT, ATTEMPT

It can&#39;t be perfect unless it maintains some kind of large error tree that accumulates the list of all the reasons it decided to fail, so you might have to be in a debugging mode to ask it to give you a bigger diagnostic.  But we can build it now with the participation of the combinators themselves.

**But not only this, we could open up the full spectrum of return values.**  Right now if your parse returns NULL, it has to be contorted into a null isotope to avoid accidentally cuing an ELSE.  Similar contortions for void, blank, and logic false.

    result: parse block rules except e -&gt; [print &quot;Got an error&quot;, return]

    ; If you got here, you know result is good
    ; Even if it was a purposefully returned NULL, etc.

There&#39;d be some way to rig this up without using enfix.  I might make things more lax about letting you assign error isotopes, because the isotope will bubble through and cause a problem anyway.  So you could write something like:

     if raised? result: parse block rules [
         print &quot;You have a failure, use ^result to get it&quot;
     ]

If you were willing to collapse failure down to a NULL or somesuch, or didn&#39;t even care about the result, you could just TRY it.

     try parse block rules

## Too Good Not To Be The Default

Of course you&#39;ll be able to reskin it however you like for the R3C&#39;s or R3Chius out there.  But I think this looks like a perfect convergence to put in the box.

Errors aren&#39;t going to be that interesting on day one, but it&#39;s good to point the ship in the right direction.</description>
    
    <lastBuildDate>Fri, 11 Aug 2023 17:04:04 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/try-parse-parse-except-fail-on-mismatch/1924.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>TRY PARSE + PARSE EXCEPT : *FAIL* On Mismatch</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Looking at a parse rule in <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a>'s Pharmac project, I saw this:</p>
<pre><code>; get the SAnnnn part of the pdf name
;
root: parse pdfname [between &lt;here&gt; ".pdf"]
</code></pre>
<p><em>It's a clean, casual usage of the value-synthesizing abilities of UPARSE...</em></p>
<p><em>...and I think that cleanliness should offer you safety by default.</em></p>
<p>So it seems that if the filename is <strong><code>aspirin.pdf.zip</code></strong> you should get an error raised to draw your attention to the unexpected circumstance.</p>
<p>If you didn't want an error, you have a lot of options to craft your rules</p>
<pre><code>root: parse pdfname [between &lt;here&gt; ".pdf" elide ...]

parse pdfname [root: between &lt;here&gt; ".pdf" ...]

parse pdfname [root: between &lt;here&gt; ".pdf" to &lt;end&gt;]

root: parse pdfname [between &lt;here&gt; ".pdf" &lt;end&gt; | accept (#badfile)]
</code></pre>
<p>etc.  UPARSE dances and sings.  <img src="https://forum.rebol.info/images/emoji/twitter/man_dancing.png?v=12" title=":man_dancing:" class="emoji" alt=":man_dancing:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/studio_microphone.png?v=12" title=":studio_microphone:" class="emoji" alt=":studio_microphone:" loading="lazy" width="20" height="20"></p>
<p>Or if you just wanted it to ignore success or failure in a "classic" way, use TRY:</p>
<pre><code>root: try parse pdfname [between &lt;here&gt; ".pdf"]
</code></pre>
<p><em>That seems a good enough way to ask for the bad enough thing.</em>  It will give you a NULL if there's no ".pdf" anywhere, and what's before .pdf for anything up-to-and-including <strong><code>something.pdfoobar</code></strong></p>
<h2>
<a name="i-say-again-too-good-not-to-be-the-default-1" class="anchor" href="https://forum.rebol.info#i-say-again-too-good-not-to-be-the-default-1"></a>I Say Again: "Too Good Not To Be The Default"</h2>
<p>...but it's a pretty big change, which will take some figuring.</p>
          <p><a href="https://forum.rebol.info/t/try-parse-parse-except-fail-on-mismatch/1924/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/try-parse-parse-except-fail-on-mismatch/1924/2</link>
        <pubDate>Fri, 11 Aug 2023 14:32:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1924-2</guid>
        <source url="https://forum.rebol.info/t/try-parse-parse-except-fail-on-mismatch/1924.rss">TRY PARSE + PARSE EXCEPT : *FAIL* On Mismatch</source>
      </item>
      <item>
        <title>TRY PARSE + PARSE EXCEPT : *FAIL* On Mismatch</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's a snazzy new potential for giving more informative messages / logs from failed parses... which means we now have a more interesting option than we might have had before.</p>
<p>Imagine something like:</p>
<pre><code>&gt;&gt; parse "aaa" [some "a" some "b"]
** Error: SOME requires at least one match
** Where: [some "a" \\ some "b" \\]
; Note: this failure can be intercepted by TRY, EXCEPT, ATTEMPT
</code></pre>
<p>It can't be perfect unless it maintains some kind of large error tree that accumulates the list of all the reasons it decided to fail, so you might have to be in a debugging mode to ask it to give you a bigger diagnostic.  But we can build it now with the participation of the combinators themselves.</p>
<p><strong>But not only this, we could open up the full spectrum of return values.</strong>  Right now if your parse returns NULL, it has to be contorted into a null isotope to avoid accidentally cuing an ELSE.  Similar contortions for void, blank, and logic false.</p>
<pre><code>result: parse block rules except e -&gt; [print "Got an error", return]

; If you got here, you know result is good
; Even if it was a purposefully returned NULL, etc.
</code></pre>
<p>There'd be some way to rig this up without using enfix.  I might make things more lax about letting you assign error isotopes, because the isotope will bubble through and cause a problem anyway.  So you could write something like:</p>
<pre><code> if raised? result: parse block rules [
     print "You have a failure, use ^result to get it"
 ]
</code></pre>
<p>If you were willing to collapse failure down to a NULL or somesuch, or didn't even care about the result, you could just TRY it.</p>
<pre><code> try parse block rules
</code></pre>
<h2>
<a name="too-good-not-to-be-the-default-1" class="anchor" href="https://forum.rebol.info#too-good-not-to-be-the-default-1"></a>Too Good Not To Be The Default</h2>
<p>Of course you'll be able to reskin it however you like for the R3C's or R3Chius out there.  But I think this looks like a perfect convergence to put in the box.</p>
<p>Errors aren't going to be that interesting on day one, but it's good to point the ship in the right direction.</p>
          <p><a href="https://forum.rebol.info/t/try-parse-parse-except-fail-on-mismatch/1924/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/try-parse-parse-except-fail-on-mismatch/1924/1</link>
        <pubDate>Fri, 19 Aug 2022 06:23:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1924-1</guid>
        <source url="https://forum.rebol.info/t/try-parse-parse-except-fail-on-mismatch/1924.rss">TRY PARSE + PARSE EXCEPT : *FAIL* On Mismatch</source>
      </item>
  </channel>
</rss>
