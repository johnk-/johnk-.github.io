<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Killing off Floating Point PAIR!</title>
    <link>https://forum.rebol.info/t/killing-off-floating-point-pair/1666</link>
    <description>Rebol2 did not have floating point pairs:

    rebol2&gt;&gt; 10.20x3.04
    ** Syntax Error: Invalid tuple -- 10.20x3.04

Red is very focused on graphics and making PAIR! play a central role.  *Despite that, it also does not have floating point pairs*:

    red&gt;&gt; 10.20x3.04
    *** Syntax Error: (line 1) invalid pair at 10.20x3.04
    
A particularly irksome aspect of the R3-Alpha implementation of PAIR! was that it used 32-bit floating point numbers in its math, while 64-bit double precision integers were behind DECIMAL!.  This meant you had two different precisions of math being implemented.  And you would lose information picking the decimal numbers out of pairs and putting them back in.  :frowning: 

That was also true of the integer form of PAIR! too.  You couldn&#39;t store an arbitrary 64-bit INTEGER! into a PAIR!, because it only had room for 2 32-bit integers in the cell.  :frowning: 

I fixed these issues by making a fully generic optimized mechanic that could store any two cells together.  This wound up being fairly relevant in other ways that have nothing to do with PAIR!.

**In any case, in the ever present drive to simplify anything that is not mission critical, I think decimal point pairs will probably get the axe.**  They raise questions I simply do not feel are worth answering.

*If not even Red can bring themselves to care, why on earth should I?*</description>
    
    <lastBuildDate>Tue, 12 Sep 2023 17:28:35 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/killing-off-floating-point-pair/1666.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Killing off Floating Point PAIR!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It seems Red faced a need to represent floating point coordinates.  But they believed supporting this in PAIR! would make it unreadable, e.g. <code>2343.122x54239.44</code>.  To address this, they added a distinct type called POINT!:</p>
<p><a href="https://www.red-lang.org/2023/08/subpixel-gui.html" class="inline-onebox">Red Programming Language: Subpixel GUI</a></p>
<p>Their choice for representing points uses commas inside of parentheses, and can extend to any number of coordinates:</p>
<pre><code>(2343.122, 54239.44)
(2343.122, 54239.44, 6309.332)
(2343.122, 54239.44, 6309.332, 442.3321)
(2.33487e9, 54239.44)
(2.33487e9, 54239.44, 9.83242e17)
(2.33487e9, 54239.44, 9.83242e17, 5223.112)
(1.#inf, 1.#inf, 1.#inf)
</code></pre>
<p>They observe this means they no longer support commas as decimal separators:</p>
<blockquote>
<p><em>"Such literal forms requires the comma character to be a delimiter, so that it cannot be used anymore as a decimal separator. That was, unfortunately, a necessary decision in order to unlock such literal forms. The gains should be bigger than the loss."</em></p>
</blockquote>
<p>Despite Ren-C's <a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387">very different usage of COMMA!</a>, I actually never killed off commas as decimal separators...so if you don't put a space after a comma, you get very different behavior:</p>
<pre><code>&gt;&gt; length of [1, 2]
== 3

&gt;&gt; second [1, 2]
== ,

&gt;&gt; length of [1,2]
== 1

&gt;&gt; first [1,2]
== 1.2
</code></pre>
<p>Technically speaking, they wouldn't have to drop it either... so long as they were willing to eliminate the idea that <code>1,</code> was an alternative representation of 1.0.  Ren-C drops this general equivalence not just for commas but for periods as well--and in fact <strong><code>1.</code></strong> is a TUPLE! (whose second element is BLANK!) while <strong><code>1.0</code></strong> is a DECIMAL!</p>
<p>(But I'd certainly shed no tears if commas as decimal representations were thrown out.)</p>
<h2><a name="p-6671-im-confident-ren-cs-comma-is-the-better-design-1" class="anchor" href="https://forum.rebol.info#p-6671-im-confident-ren-cs-comma-is-the-better-design-1"></a>I'm Confident Ren-C's COMMA! is the Better Design</h2>
<p>In source dialects, you can still have slots where a GROUP! containing numbers separated by commas denotes a coordinate.  But you'd have to go through some step to get a runtime object that had methods.  Some pseudocode for that reality:</p>
<pre><code>&gt;&gt; data: [(1.2, 3.4) (5.6, 7.8)]

&gt;&gt; data.1 + data.2
** Error: GROUP! does not support ADD operation

&gt;&gt; p1: make point! first data
== #[point! 1.2 3.4]  ; or some methodized rendering

&gt;&gt; p2: make point! second data
== #[point! 5.6 7.8]

&gt;&gt; p3: p1 + p2
== #[point! 6.8 11.2]

&gt;&gt; to group! p3  ; imagine TO as being methodized as well
== (6.8, 11.2)
</code></pre>
<p>There's so much more freedom in how you can use COMMA! as a generic part in dialects.  And the consistency that if you see <strong><code>(...)</code></strong> you know you have a GROUP! is much more comforting.</p>
<p>But back to the original post topic: Red still doesn't have floating point PAIR!, so I feel no qualms about having gotten rid of it.</p>
          <p><a href="https://forum.rebol.info/t/killing-off-floating-point-pair/1666/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/killing-off-floating-point-pair/1666/2</link>
        <pubDate>Tue, 12 Sep 2023 17:28:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1666-2</guid>
        <source url="https://forum.rebol.info/t/killing-off-floating-point-pair/1666.rss">Killing off Floating Point PAIR!</source>
      </item>
      <item>
        <title>Killing off Floating Point PAIR!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol2 did not have floating point pairs:</p>
<pre><code>rebol2&gt;&gt; 10.20x3.04
** Syntax Error: Invalid tuple -- 10.20x3.04
</code></pre>
<p>Red is very focused on graphics and making PAIR! play a central role.  <em>Despite that, it also does not have floating point pairs</em>:</p>
<pre><code>red&gt;&gt; 10.20x3.04
*** Syntax Error: (line 1) invalid pair at 10.20x3.04
</code></pre>
<p>A particularly irksome aspect of the R3-Alpha implementation of PAIR! was that it used 32-bit floating point numbers in its math, while 64-bit double precision integers were behind DECIMAL!.  This meant you had two different precisions of math being implemented.  And you would lose information picking the decimal numbers out of pairs and putting them back in.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>That was also true of the integer form of PAIR! too.  You couldn't store an arbitrary 64-bit INTEGER! into a PAIR!, because it only had room for 2 32-bit integers in the cell.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>I fixed these issues by making a fully generic optimized mechanic that could store any two cells together.  This wound up being fairly relevant in other ways that have nothing to do with PAIR!.</p>
<p><strong>In any case, in the ever present drive to simplify anything that is not mission critical, I think decimal point pairs will probably get the axe.</strong>  They raise questions I simply do not feel are worth answering.</p>
<p><em>If not even Red can bring themselves to care, why on earth should I?</em></p>
          <p><a href="https://forum.rebol.info/t/killing-off-floating-point-pair/1666/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/killing-off-floating-point-pair/1666/1</link>
        <pubDate>Mon, 16 Aug 2021 02:19:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1666-1</guid>
        <source url="https://forum.rebol.info/t/killing-off-floating-point-pair/1666.rss">Killing off Floating Point PAIR!</source>
      </item>
  </channel>
</rss>
