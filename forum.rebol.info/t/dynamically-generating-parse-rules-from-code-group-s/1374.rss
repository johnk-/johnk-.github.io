<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
    <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374</link>
    <description>Historically, a plain GROUP! in PARSE runs the conventional evaluator.  But it discards its result and doesn&#39;t put it into the stream of parse instructions.

That means you can&#39;t do things like this:

    parse &quot;aaa&quot; [some (either condition [&quot;a&quot;] [&quot;b&quot;])]
 
Because the &quot;discarding&quot; behavior of GROUP!s in PARSE is so pervasive, it seemed hard to challenge.  So Ren-C had adopted the GET-GROUP! as **:(...)** to be non-discarding form, which you could use to splice arbitrary arguments or instructions into the PARSE stream.

But to @rgchris&#39;s taste, the colons are ugly.  I can see it that way.

We *could* turn it the other way, and say you have to explicitly throw results away...otherwise they are kept.

    parse &quot;aaa&quot; [some [&quot;a&quot; elide (print &quot;found an A&quot;)]]

A failure to put the ELIDE there would mean you&#39;d be trying to splice the PRINT result (a ~none~ isotope) into the instruction stream, which we&#39;d imagine is an error.

The choice to elide could come from inside the group as well:

    parse &quot;aaa&quot; [some [&quot;a&quot; (elide print &quot;found an A&quot;)]]

Or use something that returned a ~void~ isotope...since that&#39;s ignored by the parse stream.  This is the mechanism by which branching constructs can be used to good effect:

    parse &quot;aaa&quot; [some [&quot;a&quot; (if false [&quot;b&quot;])]]


## It Gets Rid of the Colons, but Does It Suck To Use?

I&#39;m not so much concerned about backwards compatibility, as I am about two issues:

1. *Is it actually, measurably, knowably better.*

2. *Will the machinery bend to allow emulation of the Rebol2 semantics.*

I&#39;m interested in (2) because I kind of insist on being able to implement Redbol.  So I&#39;d like there to be some kind of hook to choose.  Ideally it would be the kind of hook that would have allowed a motivated individual to add something like the behavior of COLLECT and KEEP as it acts now to PARSE.

&gt; **2022 UPDATE:** **[UPARSE offers all this, and more!](https://forum.rebol.info/t/introducing-uparse-the-hackable-usermode-parse/1529)**  How far things have come since October 2020!</description>
    
    <lastBuildDate>Thu, 02 Jun 2022 11:11:18 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>Note: Two years after this discussion, <strong><a href="https://forum.rebol.info/t/introducing-uparse-the-hackable-usermode-parse/1529">we now have UPARSE <img src="https://forum.rebol.info/images/emoji/twitter/rocket.png?v=12" title=":rocket:" class="emoji" alt=":rocket:" loading="lazy" width="20" height="20"></a></strong>... and its idea of GROUP! combinators yielding evaluative products has revolutionized and solved entire classes of problems.</em></p>
<hr>
<aside class="quote no-group" data-username="rgchris" data-post="8" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>If a group's product is to be used as a rule, it should be explicit, say:</p>
<pre><code>parse "aa" [some use (first ["a" "b"]) (x: "c")]
</code></pre>
</blockquote>
</aside>
<p>Prior to UPARSE, this USE would just be bringing in an epicycle of my same uneasy feeling: if GROUP!s are conventionally being discarded, the USE would be breaking the rules by seeing it.</p>
<p>But there's a whole new narrative.  You're always aware--and expect--each rule to have a return value, consumable by the rules above it.  The last synthesized value drops out of the BLOCK! combinator just as with DO.  So the unsettling aspect of "vanishing" results sometimes and not others is no longer a sticking point.</p>
<p>Maybe it seemed I was making a big deal over nothing at the time--but--I believe my feeling that <em>something was off</em> was key to the pursuit of the new design!</p>
<aside class="quote no-group quote-modified" data-username="rgchris" data-post="8" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>This could be a GET-GROUP! where this type is available, I suppose (I'm not wholly convinced of GET-GROUP!'s necessity) though my leaning would be to solve through words.</p>
</blockquote>
</aside>
<p>Power users might appreciate the brevity of the GET-GROUP! when situations warrant it.  But I think I'm in agreement it needs a good word form.</p>
<p>We might call it REPARSE (in the spirit of REEVAL/REEVALUATE).</p>
<pre><code>&gt;&gt; reeval (second [a: b:]) 1 + 2
== 3

&gt;&gt; b
== 3
</code></pre>
<p>There's a bit of a twist, because that's a variadic function that does something gnarlier than what UPARSE can do with a combinator.  e.g. we'd have trouble with putting down an incomplete rule that "combinates" with things that come after it:</p>
<pre><code>parse "aa" [reparse (second [opt some]) "a"]  ; remember UPARSE will be PARSE
</code></pre>
<p>That would require some kind of additional return signal from REPARSE to ask the BLOCK! combinator to run some more material.  <em>(Does anyone recall RETURN/REDO?...)</em></p>
<p>Another option would be INLINE.  It's currently broken, but the idea was that it would be able to splice arbitrary code into the stream of execution:</p>
<pre><code>&gt;&gt; stuff: [+ 2 *]

&gt;&gt; 1 inline stuff 3
== 9
</code></pre>
<p>Some of these ideas run up against fundamental problems, and won't work.  In the above example, you face a problem that INLINE has to know a-priori if it's going to operate enfixedly and look to its left...and that has to be declared before it executes code.</p>
<p>But more modest scenarios can work, and INLINE may be a good name for it.</p>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/13</link>
        <pubDate>Tue, 24 May 2022 00:58:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-13</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="6" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/48/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>In my experience adjusting rules is an important usage of groups in parse, but not the most frequent usage.</p>
<p>Furthermore the number of elides just doesn't look good.</p>
</blockquote>
</aside>
<p>Certainly from that experiment we have agreement on this.  Swapping GROUP! and GET-GROUP! <em>usually</em>, <em>probably</em>, is ugly.</p>
<p>Buuuuuuut... <em>what if you wanted to?</em></p>
<p><strong>With UPARSE, you can be as ugly as you want to be!</strong>  <img src="https://forum.rebol.info/images/emoji/twitter/japanese_goblin.png?v=12" title=":japanese_goblin:" class="emoji" alt=":japanese_goblin:" loading="lazy" width="20" height="20"></p>
<h2><a name="p-5870-though-this-particular-intent-is-a-little-bit-subtle-1" class="anchor" href="https://forum.rebol.info#p-5870-though-this-particular-intent-is-a-little-bit-subtle-1"></a>Though This Particular Intent Is a Little Bit Subtle</h2>
<p>For starters, we could think of just replacing the GROUP! combinator with the GET-GROUP! combinator:</p>
<pre><code>ugly-combinators: copy default-combinators
ugly-combinators.group!: :default-combinators.(get-group!)
ugly-combinators.get-group!: null

ugly-parse: specialize :uparse [combinators: ugly-combinators]
</code></pre>
<p>Nice idea, <em>but</em> in the examples above I used ELIDE for the intent of "let the GROUP! rule run, but don't use its result as a parse rule to match".</p>
<p>But ELIDE only erases <em>rule products</em>...it doesn't stop the rule from doing whatever it does.  And if the rule fails, the ELIDE still fails.</p>
<p>COMMENT will suppress the argument rule from running altogether.  So that's also no good: the point in the examples was that you need a way to run the code in the group--just not splice a new parse rule.</p>
<p>So this example needs one GROUP! combinator that works two completely different ways--based on the influence of an <em>ELIDE-like</em> modifying rule (I'll call it <strong>DISCARD</strong>).  It's an even "weirder" idea than it seems on the surface.  None of the options are great:</p>
<ol>
<li>
<p>Make DISCARD something that quotes its argument, and maybe only narrowly works with GROUP!.  It would then run the DO on the GROUP! itself.</p>
</li>
<li>
<p>Make the GROUP! combinator enfix left quoting <em>(if UPARSE had such a thing!)</em> and have it look to the left to see if it sees a DISCARD.  If it does, then only run the group...don't try and retrigger the resulting combinator.</p>
</li>
<li>
<p>Have DISCARD feed the next combinator an empty series of the same type as its input, and hope that means it won't do much...then ignore whether it was successful or not.  But consider <strong>discard (if true '[opt "a" (print "side effect")])</strong> - just because the series you feed to a rule is empty doesn't mean it won't do anything!</p>
</li>
</ol>
<h2><a name="p-5870-lets-demo-1-because-we-can-2" class="anchor" href="https://forum.rebol.info#p-5870-lets-demo-1-because-we-can-2"></a>Let's Demo <span class="hashtag-raw">#1</span> (Because We Can!)</h2>
<p>Let's take it from the top...</p>
<pre><code>ugly-combinators: copy default-combinators
ugly-combinators.group!: :default-combinators.(get-group!)
ugly-combinators.get-group!: null

 ugly-combinators.discard: combinator [
    return: "Don't return anything" [&lt;invisible&gt;]
    'group "Capture GROUP! so it doesn't get a combinator" [group!]
][
    do group  ; we DO the group since it didn't get "combinated"
    set remainder input
    return
]

ugly-parse: specialize :uparse [combinators: ugly-combinators]

&gt;&gt; ugly-parse "aaabbb" [
       (print "A RULE", if true '[some "a"])
       some "b"
       discard (print "C RULE", if true '[some "c"])
   ]
A RULE
C RULE
== #b
</code></pre>
<p>There you have it... you can indeed flip the GROUP! behavior on its head.  <strong>But this is just the tip of the iceberg about how the UPARSE engine can serve as the backbone for your dialects.</strong>  Expect to see much more of this kind of acrobatics coming down the pipe!</p>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/12</link>
        <pubDate>Tue, 24 May 2022 00:54:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-12</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/role-of-xxx-in-parse/1584">Role of @(xxx) in PARSE</a></p>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/10</link>
        <pubDate>Tue, 13 Apr 2021 03:11:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-10</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>This example doesn't quite sit right:</p>
<aside class="quote no-group quote-post-not-found" data-username="hostilefork" data-post="7" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>parse "aa" [some (first ["a" "b"]) (x: "c")]
</code></pre>
</blockquote>
</aside>
<p>If a group's product is to be used as a rule, it should be explicit, say:</p>
<pre><code>parse "aa" [some use (first ["a" "b"]) (x: "c")]
</code></pre>
<p>This could be a GET-GROUP! where this type is available, I suppose (I'm not wholly convinced of GET-GROUP!'s necessity), though my leaning would be to solve through words.</p>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/8</link>
        <pubDate>Thu, 12 Nov 2020 06:15:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-8</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I had to think this over, because I wasn't sure wether my reluctance was just because of change.</p>
<p>In my experience adjusting rules is an important usage of groups in parse, but not the most frequent usage.</p>
<p>Furthermore the number of elides just doesn't look good.</p>
<p>So I would vote to keep plain groups as vanishing and get-groups as splicing. Double groups could be used as well, but I think that might be harder when you are constructing rules programmatically.</p>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/6</link>
        <pubDate>Thu, 29 Oct 2020 18:59:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-6</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I'm all for consistency. But GET-WORD!s are commonly used to set/inject a new position into PARSE, so it doesn't seem much of a cognitive stretch to use GET-GROUP to splice results in. I don't know what the chances are for getting a notation or shorthand for ELIDE...</p>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/5</link>
        <pubDate>Thu, 29 Oct 2020 16:05:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-5</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="BlackATTR" data-post="2" data-topic="1374">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/48/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I like the new functionality and I'm fine with the proposed consistent GROUP! behavior.</p>
</blockquote>
</aside>
<p>It may be conceptually more "healthy" to see the discarding case as the behavior requiring a notation.  You don't generally conceive of things in parentheses being associated with discarding the result...it "groups" things.</p>
<p>Yet it does get quite wordy.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=12" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20">   Let's say you start with something like:</p>
<pre><code>        parse3 skip executable string-header-offset [
            (mode: 'read) pos: section-header-rule
            (
                assert [sh_offset = string-section-offset]
                sh_size: sh_size + (1 + length of encap-section-name)
            )
            (mode: 'write) :pos section-header-rule
            to end
        ]
</code></pre>
<p>Becoming:</p>
<pre><code>        parse3 skip executable string-header-offset [
            elide (mode: 'read) pos: section-header-rule
            elide (
                assert [sh_offset = string-section-offset]
                sh_size: sh_size + (1 + length of encap-section-name)
            )
            elide (mode: 'write) :pos section-header-rule
            to end
        ]
</code></pre>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/4</link>
        <pubDate>Thu, 29 Oct 2020 14:33:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-4</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Try to stick to any other programming language over a longer period of time, chances are you have to make changes in your codebase to deal with the progression. Many projects in my working history have this as a common denominator.</p>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/3</link>
        <pubDate>Thu, 29 Oct 2020 11:38:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-3</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I hope we get some good community feedback here. I like the new functionality and I'm fine with the proposed consistent GROUP! behavior. OTOH I'm not tied to a legacy codebase to convert.</p>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/2</link>
        <pubDate>Wed, 28 Oct 2020 22:23:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-2</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
      <item>
        <title>Dynamically Generating Parse Rules From Code GROUP!s</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically, a plain GROUP! in PARSE runs the conventional evaluator.  But it discards its result and doesn't put it into the stream of parse instructions.</p>
<p>That means you can't do things like this:</p>
<pre><code>parse "aaa" [some (either condition ["a"] ["b"])]
</code></pre>
<p>Because the "discarding" behavior of GROUP!s in PARSE is so pervasive, it seemed hard to challenge.  So Ren-C had adopted the GET-GROUP! as <strong>:(...)</strong> to be non-discarding form, which you could use to splice arbitrary arguments or instructions into the PARSE stream.</p>
<p>But to <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a>'s taste, the colons are ugly.  I can see it that way.</p>
<p>We <em>could</em> turn it the other way, and say you have to explicitly throw results away...otherwise they are kept.</p>
<pre><code>parse "aaa" [some ["a" elide (print "found an A")]]
</code></pre>
<p>A failure to put the ELIDE there would mean you'd be trying to splice the PRINT result (a ~none~ isotope) into the instruction stream, which we'd imagine is an error.</p>
<p>The choice to elide could come from inside the group as well:</p>
<pre><code>parse "aaa" [some ["a" (elide print "found an A")]]
</code></pre>
<p>Or use something that returned a ~void~ isotope...since that's ignored by the parse stream.  This is the mechanism by which branching constructs can be used to good effect:</p>
<pre><code>parse "aaa" [some ["a" (if false ["b"])]]
</code></pre>
<h2><a name="p-4186-it-gets-rid-of-the-colons-but-does-it-suck-to-use-1" class="anchor" href="https://forum.rebol.info#p-4186-it-gets-rid-of-the-colons-but-does-it-suck-to-use-1"></a>It Gets Rid of the Colons, but Does It Suck To Use?</h2>
<p>I'm not so much concerned about backwards compatibility, as I am about two issues:</p>
<ol>
<li>
<p><em>Is it actually, measurably, knowably better.</em></p>
</li>
<li>
<p><em>Will the machinery bend to allow emulation of the Rebol2 semantics.</em></p>
</li>
</ol>
<p>I'm interested in (2) because I kind of insist on being able to implement Redbol.  So I'd like there to be some kind of hook to choose.  Ideally it would be the kind of hook that would have allowed a motivated individual to add something like the behavior of COLLECT and KEEP as it acts now to PARSE.</p>
<blockquote>
<p><strong>2022 UPDATE:</strong> <strong><a href="https://forum.rebol.info/t/introducing-uparse-the-hackable-usermode-parse/1529">UPARSE offers all this, and more!</a></strong>  How far things have come since October 2020!</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374/1</link>
        <pubDate>Wed, 28 Oct 2020 06:50:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1374-1</guid>
        <source url="https://forum.rebol.info/t/dynamically-generating-parse-rules-from-code-group-s/1374.rss">Dynamically Generating Parse Rules From Code GROUP!s</source>
      </item>
  </channel>
</rss>
