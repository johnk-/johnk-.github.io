<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C++ Magic for LVALUE Checking...or Use Functions?</title>
    <link>https://forum.rebol.info/t/c-magic-for-lvalue-checking-or-use-functions/2350</link>
    <description>If you write traditional C like:

    BINDING(cellA) = BINDING(cellB);

Regardless of what the BINDING() macro expands to, there&#39;s no way to do any sort of validation in any build (debug or otherwise).  Whatever this becomes can only be a simple assignment.

But if you instead wrote:

    Tweak_Binding(cellA, Binding_Of(cellB));

Then even if the intent is just a simple assignment in a release build, you could define that in a checked build to something that runs arbitrary code :

    #if NO_RUNTIME_CHECKS
        #define Tweak_Binding(dest,src) \ 
            (dest)-&gt;extra.binding = (src)-&gt;extra.binding
    #else
        #define Tweak_Binding(dest,src) \
            Tweak_Binding_With_Added_Checks((dest), (src))
    #endif

**But if you&#39;re willing to confine your extra checks to C++ builds, you can leave the source looking like `BINDING(cellA) = BINDING(cellB)`**

This is because C++ has operator overloading, and you can create a wrapper class which &quot;does the right thing&quot;, e.g. notices whether a `BINDING(...)` is used as a left hand side operator or right side operator.

## Just Because I Can, Does That Mean I Should?

Most of my original rationale was that I didn&#39;t want the source to make it look like you were making a function call when you were not.

When you see something like `Tweak_Binding(...)` you don&#39;t know how many instructions that&#39;s going to be, or what side effects its going to have.  But when you see a plain assignment (that you know compiles in C to something quite simple), then that tells you not much is going on.

However...I specifically came up with the term **`&quot;Tweak&quot;`** as a convention for functions like this that do very little.  It&#39;s a pretty good name, and it&#39;s learnable to say &quot;oh, if it says Tweak, that means it&#39;s as cheap as an assignment&quot;.

Here are some of the points to consider:

1. Because things like BINDING() are doing weird magic allowing them to be on the left side of assignments, by convention I believe they must be in all caps.  This is kind of noisy.

   * On the plus side, it can be brief, with the same term used for extracting and for tweaking.  Since datatypes use the leading-caps with no underscore convention, plain **`Binding()`** looks like a parameterized datatype, so it would have to be **`Binding_Of()`** for the extractor

2. Using C++ magic to get the RUNTIME_CHECKS means the C build won&#39;t have assertion-parity with the C build.  Bugs that only happen in the C build (perhaps on platforms that only offer C) would thus be harder to find.

3. The C++ operator overloading is going to be over the heads of those reading the code who only know C.

4. In debug builds, the C++ compilers do not inline the operator overloading, constructors, etc. that are involved in making the weird objects that are behind the scenes making the trick work.  That means using the C++ debugger to step into an expression like **`BINDING(cellA) = BINDING(cellB)`** takes an annoying number of step-in and step-out operations.

## Here&#39;s The &quot;Scary&quot; Implementation

It really isn&#39;t rocket science, but it is something.  And it&#39;s something that can&#39;t be compiled by plain C compilers, meaning you can&#39;t do DEBUG_CHECK_BINDING in C builds.

    #if (! DEBUG_CHECK_BINDING)
        #define BINDING(cell) \
            *x_cast(Context**, m_cast(Node**, &amp;(cell)-&gt;extra.node))
    #else
        struct BindingHolder {
            Cell* &amp; ref;

            BindingHolder(const Cell* const&amp; ref)
                : ref (const_cast&lt;Cell* &amp;&gt;(ref))
            {
                assert(Is_Bindable_Heart(Cell_Heart(ref)));
            }

            void operator=(Stub* right) {
                Assert_Cell_Writable(ref);
                ref-&gt;extra.node = right;
                Assert_Cell_Binding_Valid(ref);
            }
            void operator=(BindingHolder const&amp; right) {
                Assert_Cell_Writable(ref);
                ref-&gt;extra.node = right.ref-&gt;extra.node;
                Assert_Cell_Binding_Valid(ref);
            }
            void operator=(nullptr_t) {
                Assert_Cell_Writable(ref);
                ref-&gt;extra.node = nullptr;
            }
            template&lt;typename T&gt;
            void operator=(Option(T) right) {
                Assert_Cell_Writable(ref);
                ref-&gt;extra.node = maybe right;
                Assert_Cell_Binding_Valid(ref);
            }

            Context* operator-&gt; () const
              { return x_cast(Context*, ref-&gt;extra.node); }

            operator Context* () const
              { return x_cast(Context*, ref-&gt;extra.node); }
        };

        #define BINDING(cell) \
            BindingHolder{cell}
    #endif

## Looking at them Side-By-Side

    BINDING(cellA) = BINDING(cellB);

    Tweak_Binding(cellA, Binding_Of(cellB));

I do feel a pretty strong bias for the briefer notation...

But I can see the argument for not doing the &quot;weird&quot; thing when there&#39;s no increase in functionality... in fact, only losing functionality in C builds.  *(Most C++-isms are there to add something that would be fundamentally not possible in C, vs. just syntax sugar like this.)*

The invention of the &quot;Tweak&quot; term does change my calculation a little bit here.  Because if it&#39;s used only in these &quot;single-assignment-equivalent&quot; circumstances, you can comprehend it as a C assignment statement.</description>
    
    <lastBuildDate>Thu, 12 Dec 2024 15:52:06 +0000</lastBuildDate>
    <category>C/C++ Implementation</category>
    <atom:link href="https://forum.rebol.info/t/c-magic-for-lvalue-checking-or-use-functions/2350.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C++ Magic for LVALUE Checking...or Use Functions?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>If you write traditional C like:</p>
<pre><code>BINDING(cellA) = BINDING(cellB);
</code></pre>
<p>Regardless of what the BINDING() macro expands to, there's no way to do any sort of validation in any build (debug or otherwise).  Whatever this becomes can only be a simple assignment.</p>
<p>But if you instead wrote:</p>
<pre><code>Tweak_Binding(cellA, Binding_Of(cellB));
</code></pre>
<p>Then even if the intent is just a simple assignment in a release build, you could define that in a checked build to something that runs arbitrary code :</p>
<pre><code>#if NO_RUNTIME_CHECKS
    #define Tweak_Binding(dest,src) \ 
        (dest)-&gt;extra.binding = (src)-&gt;extra.binding
#else
    #define Tweak_Binding(dest,src) \
        Tweak_Binding_With_Added_Checks((dest), (src))
#endif
</code></pre>
<p><strong>But if you're willing to confine your extra checks to C++ builds, you can leave the source looking like <code>BINDING(cellA) = BINDING(cellB)</code></strong></p>
<p>This is because C++ has operator overloading, and you can create a wrapper class which "does the right thing", e.g. notices whether a <code>BINDING(...)</code> is used as a left hand side operator or right side operator.</p>
<h2><a name="p-7972-just-because-i-can-does-that-mean-i-should-1" class="anchor" href="https://forum.rebol.info#p-7972-just-because-i-can-does-that-mean-i-should-1"></a>Just Because I Can, Does That Mean I Should?</h2>
<p>Most of my original rationale was that I didn't want the source to make it look like you were making a function call when you were not.</p>
<p>When you see something like <code>Tweak_Binding(...)</code> you don't know how many instructions that's going to be, or what side effects its going to have.  But when you see a plain assignment (that you know compiles in C to something quite simple), then that tells you not much is going on.</p>
<p>However...I specifically came up with the term <strong><code>"Tweak"</code></strong> as a convention for functions like this that do very little.  It's a pretty good name, and it's learnable to say "oh, if it says Tweak, that means it's as cheap as an assignment".</p>
<p>Here are some of the points to consider:</p>
<ol>
<li>
<p>Because things like BINDING() are doing weird magic allowing them to be on the left side of assignments, by convention I believe they must be in all caps.  This is kind of noisy.</p>
<ul>
<li>On the plus side, it can be brief, with the same term used for extracting and for tweaking.  Since datatypes use the leading-caps with no underscore convention, plain <strong><code>Binding()</code></strong> looks like a parameterized datatype, so it would have to be <strong><code>Binding_Of()</code></strong> for the extractor</li>
</ul>
</li>
<li>
<p>Using C++ magic to get the RUNTIME_CHECKS means the C build won't have assertion-parity with the C build.  Bugs that only happen in the C build (perhaps on platforms that only offer C) would thus be harder to find.</p>
</li>
<li>
<p>The C++ operator overloading is going to be over the heads of those reading the code who only know C.</p>
</li>
<li>
<p>In debug builds, the C++ compilers do not inline the operator overloading, constructors, etc. that are involved in making the weird objects that are behind the scenes making the trick work.  That means using the C++ debugger to step into an expression like <strong><code>BINDING(cellA) = BINDING(cellB)</code></strong> takes an annoying number of step-in and step-out operations.</p>
</li>
</ol>
<h2><a name="p-7972-heres-the-scary-implementation-2" class="anchor" href="https://forum.rebol.info#p-7972-heres-the-scary-implementation-2"></a>Here's The "Scary" Implementation</h2>
<p>It really isn't rocket science, but it is something.  And it's something that can't be compiled by plain C compilers, meaning you can't do DEBUG_CHECK_BINDING in C builds.</p>
<pre><code>#if (! DEBUG_CHECK_BINDING)
    #define BINDING(cell) \
        *x_cast(Context**, m_cast(Node**, &amp;(cell)-&gt;extra.node))
#else
    struct BindingHolder {
        Cell* &amp; ref;

        BindingHolder(const Cell* const&amp; ref)
            : ref (const_cast&lt;Cell* &amp;&gt;(ref))
        {
            assert(Is_Bindable_Heart(Cell_Heart(ref)));
        }

        void operator=(Stub* right) {
            Assert_Cell_Writable(ref);
            ref-&gt;extra.node = right;
            Assert_Cell_Binding_Valid(ref);
        }
        void operator=(BindingHolder const&amp; right) {
            Assert_Cell_Writable(ref);
            ref-&gt;extra.node = right.ref-&gt;extra.node;
            Assert_Cell_Binding_Valid(ref);
        }
        void operator=(nullptr_t) {
            Assert_Cell_Writable(ref);
            ref-&gt;extra.node = nullptr;
        }
        template&lt;typename T&gt;
        void operator=(Option(T) right) {
            Assert_Cell_Writable(ref);
            ref-&gt;extra.node = maybe right;
            Assert_Cell_Binding_Valid(ref);
        }

        Context* operator-&gt; () const
          { return x_cast(Context*, ref-&gt;extra.node); }

        operator Context* () const
          { return x_cast(Context*, ref-&gt;extra.node); }
    };

    #define BINDING(cell) \
        BindingHolder{cell}
#endif
</code></pre>
<h2><a name="p-7972-looking-at-them-side-by-side-3" class="anchor" href="https://forum.rebol.info#p-7972-looking-at-them-side-by-side-3"></a>Looking at them Side-By-Side</h2>
<pre><code>BINDING(cellA) = BINDING(cellB);

Tweak_Binding(cellA, Binding_Of(cellB));
</code></pre>
<p>I do feel a pretty strong bias for the briefer notation...</p>
<p>But I can see the argument for not doing the "weird" thing when there's no increase in functionality... in fact, only losing functionality in C builds.  <em>(Most C++-isms are there to add something that would be fundamentally not possible in C, vs. just syntax sugar like this.)</em></p>
<p>The invention of the "Tweak" term does change my calculation a little bit here.  Because if it's used only in these "single-assignment-equivalent" circumstances, you can comprehend it as a C assignment statement.</p>
          <p><a href="https://forum.rebol.info/t/c-magic-for-lvalue-checking-or-use-functions/2350/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/c-magic-for-lvalue-checking-or-use-functions/2350/1</link>
        <pubDate>Thu, 12 Dec 2024 13:07:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2350-1</guid>
        <source url="https://forum.rebol.info/t/c-magic-for-lvalue-checking-or-use-functions/2350.rss">C++ Magic for LVALUE Checking...or Use Functions?</source>
      </item>
  </channel>
</rss>
