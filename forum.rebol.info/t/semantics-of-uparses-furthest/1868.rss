<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Semantics of UPARSE&#39;s FURTHEST</title>
    <link>https://forum.rebol.info/t/semantics-of-uparses-furthest/1868</link>
    <description>Upon the announcement of UPARSE, @Brett listed as his [secondmost missing feature](https://forum.rebol.info/t/introducing-uparse-the-hackable-usermode-parse/1529/4?u=hostilefork) the idea of knowing &quot;how far a parse got&quot;:

&gt; 2. An ability to return the furthest input point matched and the rule that caused rollback from there on parse failure. During development of rules this generally indicates the rule that is not properly specified.

What I&#39;ve done is make it so combinators use a common generator COMBINATOR.  This generator takes the function body you give it, and stuffs in some boilerplate parameters (like the INPUT and STATE).  But it also wraps your code with some more boilerplate that can run before and after the parser.

The current idea of the &quot;parser state&quot; is just to pass around the FRAME! of the UPARSE operation itself.  So if you have any global state you want visible to the parse you can put it there.  Hence the state gives every combinator access to the arguments, return values, and locals of the invocation.

I made **FURTHEST** a multi-return value.  The hooked combinators are run, and then if they succeed they&#39;re checked to see if they got further than any previous combinator.  If so they update furthest.

    &gt;&gt; [_ furthest]: uparse &quot;aaabbb&quot; [some &quot;a&quot; some &quot;c&quot;]
    ; null

    &gt;&gt; furthest
    == &quot;bbb&quot;

## I Notice TO and AHEAD Skew FURTHEST a Bit Far...

Consider the case of the **TO** combinator.  It&#39;s supposed to move the parse position to *right before* an instance of the matching rule.

But the subtlety of backing up that position is lost on FURTHEST...which just noticed that a successful parser run occurred, and updates the high water mark:

    &gt;&gt; [result furthest]: uparse &quot;aabbcc&quot; [to &quot;bb&quot;]
    ; null

    &gt;&gt; furthest
    == &quot;cc&quot;  ; not &quot;bbcc&quot;

It&#39;s a problem that&#39;s kind of a parallel with rollback.  *Which leads to the discovery of a quirk!* TO does not manage its &quot;pending&quot; list explicitly...it uses the default &quot;auto-routing&quot;.  Hence the success of the last parser it calls--whose advancement it doesn&#39;t want--counts in a collect:

    &gt;&gt; uparse &quot;aabbcc&quot; [collect to [some keep &quot;b&quot;], elide [2 &quot;b&quot; 2 &quot;c&quot;]]
    == [&quot;b&quot; &quot;b&quot;]

Is that right?  (cc: @rgchris)  If it&#39;s *not* right, then it would seem that any KEEPs inside a TO rule should never have an effect.  That seems strictly less powerful than being *able* to grab things when you find an ahead-match, so I think it&#39;s okay.  :question: 

But with FURTHEST it&#39;s less clear.

## Pathology Studies: How About MINMATCH?

I made MAXMATCH as a case study of different approaches to influence on COLLECT:

  **[maxmatch.parse.test.reb](https://github.com/metaeducation/ren-c/blob/8ed60125a473fe285e56213f82a6e7e4fa1d9e5a/tests/parse/examples/maxmatch.parse.test.reb)**

Similarly we could ask about MINMATCH, and what its participation with FURTHEST should be.

It could call two parsers...have both succeed...and then only advance the smaller amount of the two.  We might say this &quot;foils&quot; a wrapper-based approach to updating furthest, as it would be advanced by the larger amount.

I&#39;m hesitant to burden combinator authors with another parameterization just to express distinctions for the purposes of FURTHEST.  But it&#39;s a good thought experiment for what the limits are.

[quote=&quot;Brett, post:4, topic:1529&quot;]
... and the rule that caused rollback from there on parse failure. During development of rules this generally indicates the rule that is not properly specified.
[/quote]

I&#39;m not really sure what the behavior here would be.

Maybe you can look at [how the furthest detection works](https://github.com/metaeducation/ren-c/blob/fb0d6758fa53d6b004cf96940aaaefc95853d615/scripts/uparse.reb#L82) and explain in the context of the code what you would want.</description>
    
    <lastBuildDate>Thu, 02 Nov 2023 05:02:11 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/semantics-of-uparses-furthest/1868.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Semantics of UPARSE&#39;s FURTHEST</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1868">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I made <strong>FURTHEST</strong> a multi-return value. The hooked combinators are run, and then if they succeed they're checked to see if they got further than any previous combinator. If so they update furthest.</p>
<pre><code>&gt;&gt; [_ furthest]: uparse "aaabbb" [some "a" some "c"]
; null

 &gt;&gt; furthest
 == "bbb"
</code></pre>
</blockquote>
</aside>
<p><strong>Giving back FURTHEST as a multi-return had to be axed, for several reasons.</strong></p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/axe.png?v=12" title=":axe:" class="emoji only-emoji" alt=":axe:" loading="lazy" width="20" height="20"></p>
<p>For one thing: <strong><a href="https://forum.rebol.info/t/try-parse-parse-except-fail-on-mismatch/1924">PARSE now raises a definitional error when it does not reach the end of input.</a></strong>  Returning an error isotope is fundamentally incompatible with unpacking return values from a returned block isotope, you can't do both!</p>
<p>And secondly: PARSE is designed to allow you to use the full bandwidth of return values, including multi-returns.  This means combinators themselves might be multi-returns <em>(I've suggested TALLY could be a multi-returner, giving the count as a primary product but also including the synthesized product)</em>:</p>
<pre><code> &gt;&gt; [count result]: parse "aaa" [tally ["a" ('a)] | tally ["b" ('b)]]]
 == 3

 &gt;&gt; count
 == 3

 &gt;&gt; result
 == a
</code></pre>
<p>Or you can just explicitly evaluate to a muti-return PACK from a group evaluation, for whatever reason...</p>
<pre><code>parse "..." [... accept (pack [&lt;a&gt; 2]) ...]
</code></pre>
<h2><a name="p-6721-stop-gap-measure-a-crappy-furthest-hook-1" class="anchor" href="https://forum.rebol.info#p-6721-stop-gap-measure-a-crappy-furthest-hook-1"></a>Stop-Gap Measure: a "Crappy" FURTHEST Hook</h2>
<p>An early adaptation of <a class="mention" href="https://forum.rebol.info/u/blackattr">@BlackATTR</a>'s Query had used the FURTHEST return value from UPARSE.  But that needed to backtrack into painful inclusion of <strong><code>furthest: &lt;here&gt;</code></strong> markers in every rule.  That's no good.</p>
<p>But UPARSE's generic hookability allows for a <strong><a href="https://forum.rebol.info/t/visualizing-parse/1639/8">rule-stepwise debugger</a></strong> <img src="https://forum.rebol.info/images/emoji/twitter/eyes.png?v=12" title=":eyes:" class="emoji" alt=":eyes:" loading="lazy" width="20" height="20"></p>
<p>So of course, simply asking how far it got is not hard to ask for.  Just use a hook which writes to a variable you specify.  I hacked this up separately as PARSE-FURTHEST:</p>
<pre><code>&gt;&gt; parse-furthest "aaabbb" [some "a" some "c"] 'far except [
       print ["Furthest was:" mold far]
   ]

Furthest was: "bbb"
</code></pre>
<p>Well, it's better than nothing!</p>
<h2><a name="p-6721-but-what-do-we-really-want-2" class="anchor" href="https://forum.rebol.info#p-6721-but-what-do-we-really-want-2"></a>But What Do We Really Want?</h2>
<p>One way of looking at this could be that FURTHEST is a field in the error that gets returned.</p>
<pre><code>&gt;&gt; parse "aaabbb" [some "a" some "c"] except e -&gt; [
       assert [e.id = 'incomplete-parse]  ; only raised error?
       print ["Furthest was:" mold e.furthest]
   ]
</code></pre>
<p>That's not bad, other than it seems there might be a lot of things you want to know about a failed parse besides just FURTHEST.  You'd want to know the actual parse position, but other aspects about the rule state as well.  Is it too much stuff to pack into an error object?</p>
<p>You might have been keeping running track of the line and column (which I've wanted to find a way to expose via <strong><code>&lt;line&gt;</code></strong> and <strong><code>&lt;column&gt;</code></strong> combinators, where applicable).  That has to be updated as the parse proceeds, you wouldn't want to have to recalculate that in case of an error...?</p>
<p>So it seems to me that there may be need for a parse state object which can be made available to reflect after a parse that's successful -or- unsuccessful.  The PARSE function would be a convenient wrapper on top of this, but you could dig deeper for more serious needs.</p>
<p>For right now, the PARSE-FURTHEST hack keeps the mechanism behind the functionality tested, but there's clearly a lot to think about here (and I believe looking at Haskell for inspiration on these kinds of questions is wise).</p>
          <p><a href="https://forum.rebol.info/t/semantics-of-uparses-furthest/1868/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/semantics-of-uparses-furthest/1868/2</link>
        <pubDate>Thu, 02 Nov 2023 04:54:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1868-2</guid>
        <source url="https://forum.rebol.info/t/semantics-of-uparses-furthest/1868.rss">Semantics of UPARSE&#39;s FURTHEST</source>
      </item>
      <item>
        <title>Semantics of UPARSE&#39;s FURTHEST</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Upon the announcement of UPARSE, <a class="mention" href="https://forum.rebol.info/u/brett">@Brett</a> listed as his <a href="https://forum.rebol.info/t/introducing-uparse-the-hackable-usermode-parse/1529/4">secondmost missing feature</a> the idea of knowing "how far a parse got":</p>
<blockquote>
<ol start="2">
<li>An ability to return the furthest input point matched and the rule that caused rollback from there on parse failure. During development of rules this generally indicates the rule that is not properly specified.</li>
</ol>
</blockquote>
<p>What I've done is make it so combinators use a common generator COMBINATOR.  This generator takes the function body you give it, and stuffs in some boilerplate parameters (like the INPUT and STATE).  But it also wraps your code with some more boilerplate that can run before and after the parser.</p>
<p>The current idea of the "parser state" is just to pass around the FRAME! of the UPARSE operation itself.  So if you have any global state you want visible to the parse you can put it there.  Hence the state gives every combinator access to the arguments, return values, and locals of the invocation.</p>
<p>I made <strong>FURTHEST</strong> a multi-return value.  The hooked combinators are run, and then if they succeed they're checked to see if they got further than any previous combinator.  If so they update furthest.</p>
<pre><code>&gt;&gt; [_ furthest]: uparse "aaabbb" [some "a" some "c"]
; null

&gt;&gt; furthest
== "bbb"
</code></pre>
<h2><a name="p-6031-i-notice-to-and-ahead-skew-furthest-a-bit-far-1" class="anchor" href="https://forum.rebol.info#p-6031-i-notice-to-and-ahead-skew-furthest-a-bit-far-1"></a>I Notice TO and AHEAD Skew FURTHEST a Bit Far...</h2>
<p>Consider the case of the <strong>TO</strong> combinator.  It's supposed to move the parse position to <em>right before</em> an instance of the matching rule.</p>
<p>But the subtlety of backing up that position is lost on FURTHEST...which just noticed that a successful parser run occurred, and updates the high water mark:</p>
<pre><code>&gt;&gt; [result furthest]: uparse "aabbcc" [to "bb"]
; null

&gt;&gt; furthest
== "cc"  ; not "bbcc"
</code></pre>
<p>It's a problem that's kind of a parallel with rollback.  <em>Which leads to the discovery of a quirk!</em> TO does not manage its "pending" list explicitly...it uses the default "auto-routing".  Hence the success of the last parser it calls--whose advancement it doesn't want--counts in a collect:</p>
<pre><code>&gt;&gt; uparse "aabbcc" [collect to [some keep "b"], elide [2 "b" 2 "c"]]
== ["b" "b"]
</code></pre>
<p>Is that right?  (cc: <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a>)  If it's <em>not</em> right, then it would seem that any KEEPs inside a TO rule should never have an effect.  That seems strictly less powerful than being <em>able</em> to grab things when you find an ahead-match, so I think it's okay.  <img src="https://forum.rebol.info/images/emoji/twitter/question.png?v=12" title=":question:" class="emoji" alt=":question:" loading="lazy" width="20" height="20"></p>
<p>But with FURTHEST it's less clear.</p>
<h2><a name="p-6031-pathology-studies-how-about-minmatch-2" class="anchor" href="https://forum.rebol.info#p-6031-pathology-studies-how-about-minmatch-2"></a>Pathology Studies: How About MINMATCH?</h2>
<p>I made MAXMATCH as a case study of different approaches to influence on COLLECT:</p>
<p><strong><a href="https://github.com/metaeducation/ren-c/blob/8ed60125a473fe285e56213f82a6e7e4fa1d9e5a/tests/parse/examples/maxmatch.parse.test.reb">maxmatch.parse.test.reb</a></strong></p>
<p>Similarly we could ask about MINMATCH, and what its participation with FURTHEST should be.</p>
<p>It could call two parsers...have both succeed...and then only advance the smaller amount of the two.  We might say this "foils" a wrapper-based approach to updating furthest, as it would be advanced by the larger amount.</p>
<p>I'm hesitant to burden combinator authors with another parameterization just to express distinctions for the purposes of FURTHEST.  But it's a good thought experiment for what the limits are.</p>
<aside class="quote no-group quote-modified" data-username="Brett" data-post="4" data-topic="1529">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/brett/48/177_2.png" class="avatar"><a href="https://forum.rebol.info/t/introducing-the-hackable-usermode-parse-uparse/1529/4">Introducing The Hackable Usermode PARSE ("UPARSE")</a></div>
<blockquote>
<p>... and the rule that caused rollback from there on parse failure. During development of rules this generally indicates the rule that is not properly specified.</p>
</blockquote>
</aside>
<p>I'm not really sure what the behavior here would be.</p>
<p>Maybe you can look at <a href="https://github.com/metaeducation/ren-c/blob/fb0d6758fa53d6b004cf96940aaaefc95853d615/scripts/uparse.reb#L82">how the furthest detection works</a> and explain in the context of the code what you would want.</p>
          <p><a href="https://forum.rebol.info/t/semantics-of-uparses-furthest/1868/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/semantics-of-uparses-furthest/1868/1</link>
        <pubDate>Sat, 09 Jul 2022 12:21:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1868-1</guid>
        <source url="https://forum.rebol.info/t/semantics-of-uparses-furthest/1868.rss">Semantics of UPARSE&#39;s FURTHEST</source>
      </item>
  </channel>
</rss>
