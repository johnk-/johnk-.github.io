<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>UNMAKE and the Death Of Construction Syntax</title>
    <link>https://forum.rebol.info/t/unmake-and-the-death-of-construction-syntax/2225</link>
    <description>I don&#39;t really believe in textual construction syntax in its historical sense.  You can&#39;t generically &quot;mold&quot; things out as a string in a way that LOAD can resurrect what you had...too much is lost when the binding goes away and whatever parts of the structure that weren&#39;t List-like go away.  Today&#39;s mold and construction syntax is a dead end.

What I **do** believe in is the idea that while the interpreter is still running, you can ask a complex data structure to give back a reified array description of itself.  This description should be concrete where it can be...but if it can&#39;t, it needs to give you some kind of POINTER! type that can be further probed.

Think about something that could be used to implement an object browser like in the JavaScript console:

![RsxAB|374x256](upload://faj0fZrhniidAirX3ZIDdKta0yf.png)
Imagine that first level of result, which gives you things and then you have an arrow to go deeper.

The idea that you actually would get enough information to reconstitute the data structure is interesting, so let&#39;s imagine we call this UNMAKE, and we seek it to have that property:

    &gt;&gt; obj: {x: 1 + 2, y: first [(a b) (c d)], z: &lt;thing&gt;, f: does [print &quot;hi&quot;]}

    &gt;&gt; unset $obj.z

    &gt;&gt; unmake obj
    == @{x: 3 y: &#39;(a b) z: ~ f: {\0x52d0000a0f48\}}

    &gt;&gt; obj2: make unmake obj

    &gt;&gt; obj = obj2
    == ~true~  ; anti

So here I&#39;m imagining that MAKE would react differently to `@{...}`, and see that as an instruction to REMAKE what it originally had... or, if you made adjustments, it would be able to affect it.

    &gt;&gt; reified: unmake obj
    == @{x: 3 y: &#39;(a b) z: ~ f: {\0x52d0000a0f48\}}

    &gt;&gt; reified.3: [c d e]
    == @{x: 3 y: [c d e] z: ~ f: {\0x52d0000a0f48\}}

    &gt;&gt; remake obj reified

    &gt;&gt; obj.y
    == [c d e]

For this to work, those pointer references have to keep the thing they point to alive somehow.  So that would be part of POINTER!&#39;s mechanics.

MOLD would be a client of UNMAKE, where you&#39;d have some depth at which you ask it to go into the pointers, but if it hit a pointer it would just dead end you there with some placeholder:

    &gt;&gt; mold obj
    == &quot;@{x: 3 y: &#39;(a b) z: ~ f: ~&lt;action!&gt;~}&quot;

    &gt;&gt; mold/depth obj 2
    == &quot;@{x: 3 y: &#39;(a b) z: ~ f: @{action! [] [print &quot;hi&quot;]}&quot;

And you&#39;d just use that for debug output.

This is only a sketch...but it points in a direction that I think could actually be useful.</description>
    
    <lastBuildDate>Fri, 11 Oct 2024 02:18:23 +0000</lastBuildDate>
    <category>Debugger</category>
    <atom:link href="https://forum.rebol.info/t/unmake-and-the-death-of-construction-syntax/2225.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>UNMAKE and the Death Of Construction Syntax</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2225">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I don't really believe in textual construction syntax in its historical sense. You can't generically "mold" things out as a string in a way that LOAD can resurrect what you had</p>
</blockquote>
</aside>
<p>So I'm going to go ahead and kill off <strong><code>MOLD:ALL</code></strong></p>
<p>MOLD:ALL's ostensible goal was to take information that's hidden in a value, and make it visible:</p>
<pre><code>rebol2&gt;&gt; mold next [a b]
== [b]

rebol2&gt;&gt; mold/all next [a b]
== "#[block![a b]2]"

rebol2&gt;&gt; data: load "#[block![a b]2]"
== [b]

&gt;&gt; back data
== [a b]
</code></pre>
<p><strong>I don't believe anyone has made effective use of this.</strong></p>
<p>Moreover, Red has been going along how long... and doesn't have it:</p>
<pre><code>red&gt;&gt; help mold
USAGE:
     MOLD value

DESCRIPTION: 
     Returns a source format string representation of a value. 
     MOLD is an action! value.

ARGUMENTS:
     value        [any-type!] 

REFINEMENTS:
     /only        =&gt; Exclude outer brackets if value is a block.
     /all         =&gt; TBD: Return value in loadable format.
     /flat        =&gt; Exclude all indentation.
     /part        =&gt; Limit the length of the result.
        limit        [integer!] 

RETURNS:
     [string!]
</code></pre>
<p><a href="https://github.com/red/red/issues/1125">In 2015 it was asked if MOLD/ALL would include the series index</a>.  The answer was probably, but the issue was closed as completed.  It is now 2024, and:</p>
<pre><code>red&gt;&gt; mold/all next [a b]
== "[b]"
</code></pre>
<p>So all it seems to be doing is contributing to <a href="https://github.com/red/red/issues/5387">weird bugs</a></p>
<p>My own feelings on this not being a productive design path at this time...along with the empirical evidence that no one has shown it executing or being useful...means I am getting rid of it.</p>
<p>Any future of this kind of idea is--I think--part of a different idea, which UNMAKE has the inklings of.  Right now it's just another thing in the way of addressing pragmatic designs for the needs of today's MOLD.</p>
          <p><a href="https://forum.rebol.info/t/unmake-and-the-death-of-construction-syntax/2225/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/unmake-and-the-death-of-construction-syntax/2225/2</link>
        <pubDate>Fri, 11 Oct 2024 02:18:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2225-2</guid>
        <source url="https://forum.rebol.info/t/unmake-and-the-death-of-construction-syntax/2225.rss">UNMAKE and the Death Of Construction Syntax</source>
      </item>
      <item>
        <title>UNMAKE and the Death Of Construction Syntax</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I don't really believe in textual construction syntax in its historical sense.  You can't generically "mold" things out as a string in a way that LOAD can resurrect what you had...too much is lost when the binding goes away and whatever parts of the structure that weren't List-like go away.  Today's mold and construction syntax is a dead end.</p>
<p>What I <strong>do</strong> believe in is the idea that while the interpreter is still running, you can ask a complex data structure to give back a reified array description of itself.  This description should be concrete where it can be...but if it can't, it needs to give you some kind of POINTER! type that can be further probed.</p>
<p>Think about something that could be used to implement an object browser like in the JavaScript console:</p>
<p><img src="https://forum.rebol.info/uploads/default/original/1X/6a4adcd0a65026b11af34db6ce41bfe4a12137cb.png" alt="RsxAB" data-base62-sha1="faj0fZrhniidAirX3ZIDdKta0yf" width="374" height="256"><br>
Imagine that first level of result, which gives you things and then you have an arrow to go deeper.</p>
<p>The idea that you actually would get enough information to reconstitute the data structure is interesting, so let's imagine we call this UNMAKE, and we seek it to have that property:</p>
<pre><code>&gt;&gt; obj: {x: 1 + 2, y: first [(a b) (c d)], z: &lt;thing&gt;, f: does [print "hi"]}

&gt;&gt; unset $obj.z

&gt;&gt; unmake obj
== @{x: 3 y: '(a b) z: ~ f: {\0x52d0000a0f48\}}

&gt;&gt; obj2: make unmake obj

&gt;&gt; obj = obj2
== ~true~  ; anti
</code></pre>
<p>So here I'm imagining that MAKE would react differently to <code>@{...}</code>, and see that as an instruction to REMAKE what it originally had... or, if you made adjustments, it would be able to affect it.</p>
<pre><code>&gt;&gt; reified: unmake obj
== @{x: 3 y: '(a b) z: ~ f: {\0x52d0000a0f48\}}

&gt;&gt; reified.3: [c d e]
== @{x: 3 y: [c d e] z: ~ f: {\0x52d0000a0f48\}}

&gt;&gt; remake obj reified

&gt;&gt; obj.y
== [c d e]
</code></pre>
<p>For this to work, those pointer references have to keep the thing they point to alive somehow.  So that would be part of POINTER!'s mechanics.</p>
<p>MOLD would be a client of UNMAKE, where you'd have some depth at which you ask it to go into the pointers, but if it hit a pointer it would just dead end you there with some placeholder:</p>
<pre><code>&gt;&gt; mold obj
== "@{x: 3 y: '(a b) z: ~ f: ~&lt;action!&gt;~}"

&gt;&gt; mold/depth obj 2
== "@{x: 3 y: '(a b) z: ~ f: @{action! [] [print "hi"]}"
</code></pre>
<p>And you'd just use that for debug output.</p>
<p>This is only a sketch...but it points in a direction that I think could actually be useful.</p>
          <p><a href="https://forum.rebol.info/t/unmake-and-the-death-of-construction-syntax/2225/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/unmake-and-the-death-of-construction-syntax/2225/1</link>
        <pubDate>Tue, 27 Aug 2024 17:03:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2225-1</guid>
        <source url="https://forum.rebol.info/t/unmake-and-the-death-of-construction-syntax/2225.rss">UNMAKE and the Death Of Construction Syntax</source>
      </item>
  </channel>
</rss>
