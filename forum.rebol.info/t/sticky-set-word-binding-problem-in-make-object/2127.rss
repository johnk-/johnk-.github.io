<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Sticky SET-WORD! Binding Problem In MAKE OBJECT!</title>
    <link>https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127</link>
    <description>Trying to use the policy that bindings don&#39;t override, I ran into a bug with MAKE OBJECT! when a SET-WORD! is carrying a pre-existing binding.

What happens is that a new field is made (cued by seeing a top-level SET-WORD!) but then when the body is executed it uses the old binding... so the newly created field remains unassigned, and the old value is updated.

    &gt;&gt; obj: make object! [x: 10]
    == make object! [
        x: 10
    ]

    &gt;&gt; block: compose [(bind &#39;x: obj) &lt;new&gt;]
    == [x: &lt;new&gt;]

    &gt;&gt; obj2: make object! block
    == make object! [
        x: ~
    ]

    &gt;&gt; obj
    == make object! [
        x: &lt;new&gt;
    ]

This hints at a class of hard-to-reason-about cases.  The more you use material with hardened bindings, the more you&#39;ll see them come up.

(I hit the problem in the whitespace dialect code, which is still using mutable binding when it probably should not... but, it gives a good example of a problem that happens if you do... and if we&#39;re living in the non-binding-overriding world.)

For the moment, I think I&#39;m going to say that MAKE OBJECT! will error if any of the SET-WORD!s in the top level already have a binding.

* Binding can&#39;t serve two masters.  If the code were more complex than the above, it&#39;s not clear to say that the original binding didn&#39;t mean what it said in terms of intending a specific assignment... vs wanting to be overridden.

* I don&#39;t want fundamentals like this to use mutable binding, and to get this to work virtually at one-level of depth would require a tricky bind instruction that I don&#39;t want to deal with right now.

I&#39;d say it&#39;s the first &quot;major&quot; problem I&#39;ve seen in practice from a policy of not overriding binding (in the sense that it&#39;s fairly hard to argue &quot;well, maybe you wanted that&quot;).</description>
    
    <lastBuildDate>Wed, 24 Jan 2024 01:59:25 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Sticky SET-WORD! Binding Problem In MAKE OBJECT!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2127">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>For the moment, I think I'm going to say that MAKE OBJECT! will error if any of the SET-WORD!s in the top level already have a binding.</p>
</blockquote>
</aside>
<p>I haven't actually made it error yet.</p>
<p>But had another occurrence, now triggered by the SPREAD COMPOSE hardening the bindings of what it spreads:</p>
<pre><code>&gt;&gt; spec: load %some-file.r
== [field1: if prop1 [...] field2: 20]  ; some list, mentions external props

&gt;&gt; insert spec spread compose [prop1: (...) prop2: (...)]

&gt;&gt; obj: make object! spec
** Error: prop1 is ~ isotope
</code></pre>
<p>So here we got our spec as:</p>
<pre><code>[prop1: (...) prop2: (...) field1: if prop1 [...] field2: 20]
</code></pre>
<p>But when the prop1 assignment is done, it's to whatever context of assignment in the pre-spread block was... due to the SPREAD propagating bindings.</p>
<p>So you have to stop it from doing that, e.g.</p>
<pre><code>insert spec spread bindable compose [prop1: (...) prop2: (...)]
</code></pre>
<p>This is sort of an epicycle of strangeness, where the bootstrap code has to run in a Ren-C that is many years old... so it's a workaround for a workaround.  But worth noting patterns of "things that seem like they should work" that don't...</p>
<p>(UPDATE: <a href="https://forum.rebol.info/t/custom-function-generator-pitfalls/2093/16">I think the SPREAD of binding is not the right strategy...</a>)</p>
          <p><a href="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127/4</link>
        <pubDate>Tue, 23 Jan 2024 20:56:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2127-4</guid>
        <source url="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127.rss">Sticky SET-WORD! Binding Problem In MAKE OBJECT!</source>
      </item>
      <item>
        <title>Sticky SET-WORD! Binding Problem In MAKE OBJECT!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This raises the question of how often constructs should UNBIND material they get vs. error.</p>
<p>The case in question was with UPARSE's EMIT.</p>
<pre><code> &gt;&gt; label1: 'name

 &gt;&gt; parse [foo 1 2 3 bar 4 5] [collect [
        some keep gather [
            emit (label1): word!, emit list: collect some keep integer!]
        ]
    ]]
 == [
    make object! [
        name: 'foo
        list: [1 2 3]
    ]
    make object! [
       name: 'bar
       list: [4 5]
  ]
</code></pre>
<p><em>(Note: I think this <a href="https://forum.rebol.info/t/variant-collect-designed-to-use-as-loop-body/2110/5">motivates ACCUMULATE INTEGER!</a> as a synonym for COLLECT SOME KEEP INTEGER! and ACCUMULATE GATHER as a synonym for COLLECT SOME KEEP GATHER)</em></p>
<p>What EMIT does is adds a SET-WORD! and a META of the value it gets to a block:</p>
<pre><code> [name: 'foo list: '[1 2 3]]
</code></pre>
<p>Then it runs MAKE OBJECT! on the result.</p>
<p>What was happening was that the incoming WORD! here (name) was bound.  So the SET-WORD! in that block was bound.</p>
<ul>
<li>
<p>If EMIT doesn't report the error it goes into the MAKE OBJECT! and will error.  Error locality is better if it reports an error.</p>
</li>
<li>
<p>It could also just remove the binding and keep going.</p>
<ul>
<li>Yet removing the binding may gloss over potential misunderstandings you had by passing something with a binding in.</li>
</ul>
</li>
</ul>
<h2>
<a name="implication-for-casual-creation-of-bound-items-1" class="anchor" href="https://forum.rebol.info#implication-for-casual-creation-of-bound-items-1"></a>Implication For Casual Creation of Bound Items</h2>
<p>I'm observing you need to be wary of the style:</p>
<pre><code>for-each item block [
    item: in block item
    ...
]
</code></pre>
<p>Because if you do any insertions of that item into code, they will be bound.  You probably should wait to do the IN until you need to do a lookup, and work with unbound items as long as possible...</p>
          <p><a href="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127/3</link>
        <pubDate>Sat, 20 Jan 2024 04:57:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2127-3</guid>
        <source url="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127.rss">Sticky SET-WORD! Binding Problem In MAKE OBJECT!</source>
      </item>
      <item>
        <title>Sticky SET-WORD! Binding Problem In MAKE OBJECT!</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2127">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'd say it's the first "major" problem I've seen in practice from a policy of not overriding binding (in the sense that it's fairly hard to argue "well, maybe you wanted that").</p>
</blockquote>
</aside>
<p>Well… my view is that, with this binding policy, rebinding individual words becomes a much less common thing to do. So I do think it’s possible to argue in this case that <code>bind 'x: obj</code> is an indicator that you want to do something ‘weird’. In any case, making this situation an error seems like the best solution to me.</p>
          <p><a href="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127/2</link>
        <pubDate>Sat, 20 Jan 2024 01:43:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2127-2</guid>
        <source url="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127.rss">Sticky SET-WORD! Binding Problem In MAKE OBJECT!</source>
      </item>
      <item>
        <title>Sticky SET-WORD! Binding Problem In MAKE OBJECT!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Trying to use the policy that bindings don't override, I ran into a bug with MAKE OBJECT! when a SET-WORD! is carrying a pre-existing binding.</p>
<p>What happens is that a new field is made (cued by seeing a top-level SET-WORD!) but then when the body is executed it uses the old binding... so the newly created field remains unassigned, and the old value is updated.</p>
<pre><code>&gt;&gt; obj: make object! [x: 10]
== make object! [
    x: 10
]

&gt;&gt; block: compose [(bind 'x: obj) &lt;new&gt;]
== [x: &lt;new&gt;]

&gt;&gt; obj2: make object! block
== make object! [
    x: ~
]

&gt;&gt; obj
== make object! [
    x: &lt;new&gt;
]
</code></pre>
<p>This hints at a class of hard-to-reason-about cases.  The more you use material with hardened bindings, the more you'll see them come up.</p>
<p>(I hit the problem in the whitespace dialect code, which is still using mutable binding when it probably should not... but, it gives a good example of a problem that happens if you do... and if we're living in the non-binding-overriding world.)</p>
<p>For the moment, I think I'm going to say that MAKE OBJECT! will error if any of the SET-WORD!s in the top level already have a binding.</p>
<ul>
<li>
<p>Binding can't serve two masters.  If the code were more complex than the above, it's not clear to say that the original binding didn't mean what it said in terms of intending a specific assignment... vs wanting to be overridden.</p>
</li>
<li>
<p>I don't want fundamentals like this to use mutable binding, and to get this to work virtually at one-level of depth would require a tricky bind instruction that I don't want to deal with right now.</p>
</li>
</ul>
<p>I'd say it's the first "major" problem I've seen in practice from a policy of not overriding binding (in the sense that it's fairly hard to argue "well, maybe you wanted that").</p>
          <p><a href="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127/1</link>
        <pubDate>Sat, 20 Jan 2024 00:21:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2127-1</guid>
        <source url="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127.rss">Sticky SET-WORD! Binding Problem In MAKE OBJECT!</source>
      </item>
  </channel>
</rss>
