<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should THROW and CATCH Be For Errors?</title>
    <link>https://forum.rebol.info/t/should-throw-and-catch-be-for-errors/1954</link>
    <description>The historical Rebolism of THROW and CATCH has nothing to do with error handling.

It&#39;s a generic way to move values up the stack.  It gives you a handy &quot;out&quot; from control flow:

    result: catch [
        if condition [throw result]
        some code
        case [
            condition [more code]
            condition [more code, throw result]
        ]
        additional code
        throw result
    ]

The implementation of the feature is lightweight, and built on the same mechanic as RETURN.  You could in fact use return to do this:

    result: do func [] [
        if condition [return result]
        some code
        case [
            condition [return code]
            condition [more code, return result]
        ]
        additional code
        return result
    ]

But that&#39;s more heavyweight, because it gets binding involved (although I&#39;ve suggested that maybe CATCH and THROW should be definitional, and the &quot;heaviness&quot; is a feature... not a bug).

## It&#39;s A Neat Feature, But I Want THROW and CATCH For Errors

Error handling is undergoing a renaissance in Ren-C, and it&#39;s becoming completely pervasive.

Despite its glory, it is currently tied in with the junky names RAISE and EXCEPT.

    case [
       ...code that may fail...
    ] then [
       ...stuff to do if non-NULL, non-VOID, non-RAISED error!...
    ] else [
       ... stuff to do if NULL or VOID or RAISED error!...
    ] except e -&gt; [
      ... error handling ...
    ]

The word EXCEPT is bad for several reasons:

   * It implies &quot;exception&quot; handling, *which definitional errors are specifically not*...they can only be caught one stack step at a time.

        * Arbitrary exception handling is taboo for very good reasons...and I&#39;ve made it more taboo by [moving that behavior to SYS.UTIL.RESCUE](https://forum.rebol.info/t/discouraging-use-of-trap/1871/3)


   * It&#39;s not really a &quot;verb&quot;

   * It often comes right after an ELSE, and I don&#39;t like the alliteration of E and E

   * Almost every other language uses CATCH there

And RAISE isn&#39;t exactly my favorite word either.  **return throw e** vs. **return raise e** also has that alliteration issue.

## So What Can The Old THROW and CATCH Be Called?

It&#39;s a lot less important than the error handling application, but I still use the old construct.

You can actually do it with CYCLE and STOP:

    result: cycle [
        if condition [throw result]
        some code
        case [
            condition [more code]
            condition [more code, stop result]
        ]
        additional code
        stop result
    ]

Being a looping construct, it has the side effect that it will keep repeating unless a value is emitted.

On the plus side...this helps resolve the semantic question of &quot;what should a CATCH return when there&#39;s no THROW?&quot;  If what you have is CYCLE then your answer is that it keeps going.  So you either put a FAIL at the bottom, a STOP at the bottom, or accept it will keep going.

On the minus side...if you use this inside a looping construct you&#39;ll be redefining BREAK, which historical CATCH would not do.  (Similarly, if you use FUNC and RETURN to do this you&#39;d redefine RETURN.)

With definitional BREAK and RETURN there&#39;d be workarounds for those cases--you&#39;d simply give another name to the outer break and return if you needed them.  But that&#39;s not how things work today.

## While CYCLE is Not Perfect, It Would Work For The Moment

We can meditate on what the ultimate answer would be.  But there&#39;s only a few cases, and CYCLE will do.

Errors need THROW and CATCH...they&#39;re now too fundamental to not use the good words for.

We now have the word TRAP for those who don&#39;t want to use enfix, so these are equivalent:

    if e: trap [some code] [
        handle e
    ]

    (some code) catch e -&gt; [
       handle e
    ]

But you get some real benefits from the THEN + ELSE + CATCH, and I think the importance of these enfix constructs will become apparent to those who aren&#39;t on the bandwagon (yet).</description>
    
    <lastBuildDate>Mon, 05 Sep 2022 09:29:55 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/should-throw-and-catch-be-for-errors/1954.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should THROW and CATCH Be For Errors?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1954">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's A Neat Feature, But I Want THROW and CATCH For Errors</p>
</blockquote>
</aside>
<p>Looking over the instances, I'm finding that I've used the old meaning of CATCH and THROW more than I thought I did.</p>
<p>Not only that... <em>I wound up feeling like I should probably use it more.</em>  It's a good thing, and there are a lot of situations with control structures that it simplifies.  Because most languages don't give you this casual a construct for moving values up the stack, it's not something one thinks to reach for even if it's a good solution.</p>
<p>Beyond that, I'm working on a methodization of THEN and ELSE which should be able to turn several cases that would need an "EXCEPT" (or CATCH-AS-EXCEPT) into something that doesn't:</p>
<p><a href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959/2" class="inline-onebox">Applications of Isotopic Objects - #2 by hostilefork</a></p>
<p>So what I had feared of seeing a lot of <strong>parse data rules except e -&gt; [...]</strong> is going to be able to be the normal ELSE, but with a parameter with error information for the parse:</p>
<pre><code>parse data rules else e -&gt; [...]
</code></pre>
<p>I can't be 100% positive that I'm not going to find a fatal flaw in it.  But right now it looks pretty good.</p>
<p>It's making me wonder if dealing with RAISE and EXCEPT could be quarantined enough that you don't see them much.  If so, it could very well twist the balance back to the traditional meaning of CATCH and THROW.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1954">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The word EXCEPT is bad for several reasons:</p>
</blockquote>
</aside>
<p>But...what about <strong>BUT</strong> ?</p>
<pre><code>case [
   ...code that may fail...
] then [
    ..stuff to do if non-NULL, non-VOID, non-RAISED error!...
] else [
    ... stuff to do if NULL or VOID or RAISED error!...
] but e -&gt; [
   ... error handling ...
]
</code></pre>
<p>It would be a little more puzzling for first time readers, yet I think if you're coming to programming anew you would not think it unnatural.</p>
<p><strong>For now I'm going to stick with RAISE and EXCEPT</strong> but let's keep an eye on those terms and see if something better is possible.</p>
          <p><a href="https://forum.rebol.info/t/should-throw-and-catch-be-for-errors/1954/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-throw-and-catch-be-for-errors/1954/2</link>
        <pubDate>Sun, 04 Sep 2022 21:36:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1954-2</guid>
        <source url="https://forum.rebol.info/t/should-throw-and-catch-be-for-errors/1954.rss">Should THROW and CATCH Be For Errors?</source>
      </item>
      <item>
        <title>Should THROW and CATCH Be For Errors?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The historical Rebolism of THROW and CATCH has nothing to do with error handling.</p>
<p>It's a generic way to move values up the stack.  It gives you a handy "out" from control flow:</p>
<pre><code>result: catch [
    if condition [throw result]
    some code
    case [
        condition [more code]
        condition [more code, throw result]
    ]
    additional code
    throw result
]
</code></pre>
<p>The implementation of the feature is lightweight, and built on the same mechanic as RETURN.  You could in fact use return to do this:</p>
<pre><code>result: do func [] [
    if condition [return result]
    some code
    case [
        condition [return code]
        condition [more code, return result]
    ]
    additional code
    return result
]
</code></pre>
<p>But that's more heavyweight, because it gets binding involved (although I've suggested that maybe CATCH and THROW should be definitional, and the "heaviness" is a feature... not a bug).</p>
<h2>It's A Neat Feature, But I Want THROW and CATCH For Errors</h2>
<p>Error handling is undergoing a renaissance in Ren-C, and it's becoming completely pervasive.</p>
<p>Despite its glory, it is currently tied in with the junky names RAISE and EXCEPT.</p>
<pre><code>case [
   ...code that may fail...
] then [
   ...stuff to do if non-NULL, non-VOID, non-RAISED error!...
] else [
   ... stuff to do if NULL or VOID or RAISED error!...
] except e -&gt; [
  ... error handling ...
]
</code></pre>
<p>The word EXCEPT is bad for several reasons:</p>
<ul>
<li>
<p>It implies "exception" handling, <em>which definitional errors are specifically not</em>...they can only be caught one stack step at a time.</p>
<ul>
<li>Arbitrary exception handling is taboo for very good reasons...and I've made it more taboo by <a href="https://forum.rebol.info/t/discouraging-use-of-trap/1871/3">moving that behavior to SYS.UTIL.RESCUE</a>
</li>
</ul>
</li>
<li>
<p>It's not really a "verb"</p>
</li>
<li>
<p>It often comes right after an ELSE, and I don't like the alliteration of E and E</p>
</li>
<li>
<p>Almost every other language uses CATCH there</p>
</li>
</ul>
<p>And RAISE isn't exactly my favorite word either.  <strong>return throw e</strong> vs. <strong>return raise e</strong> also has that alliteration issue.</p>
<h2>So What Can The Old THROW and CATCH Be Called?</h2>
<p>It's a lot less important than the error handling application, but I still use the old construct.</p>
<p>You can actually do it with CYCLE and STOP:</p>
<pre><code>result: cycle [
    if condition [throw result]
    some code
    case [
        condition [more code]
        condition [more code, stop result]
    ]
    additional code
    stop result
]
</code></pre>
<p>Being a looping construct, it has the side effect that it will keep repeating unless a value is emitted.</p>
<p>On the plus side...this helps resolve the semantic question of "what should a CATCH return when there's no THROW?"  If what you have is CYCLE then your answer is that it keeps going.  So you either put a FAIL at the bottom, a STOP at the bottom, or accept it will keep going.</p>
<p>On the minus side...if you use this inside a looping construct you'll be redefining BREAK, which historical CATCH would not do.  (Similarly, if you use FUNC and RETURN to do this you'd redefine RETURN.)</p>
<p>With definitional BREAK and RETURN there'd be workarounds for those cases--you'd simply give another name to the outer break and return if you needed them.  But that's not how things work today.</p>
<h2>While CYCLE is Not Perfect, It Would Work For The Moment</h2>
<p>We can meditate on what the ultimate answer would be.  But there's only a few cases, and CYCLE will do.</p>
<p>Errors need THROW and CATCH...they're now too fundamental to not use the good words for.</p>
<p>We now have the word TRAP for those who don't want to use enfix, so these are equivalent:</p>
<pre><code>if e: trap [some code] [
    handle e
]

(some code) catch e -&gt; [
   handle e
]
</code></pre>
<p>But you get some real benefits from the THEN + ELSE + CATCH, and I think the importance of these enfix constructs will become apparent to those who aren't on the bandwagon (yet).</p>
          <p><a href="https://forum.rebol.info/t/should-throw-and-catch-be-for-errors/1954/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-throw-and-catch-be-for-errors/1954/1</link>
        <pubDate>Thu, 01 Sep 2022 11:50:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1954-1</guid>
        <source url="https://forum.rebol.info/t/should-throw-and-catch-be-for-errors/1954.rss">Should THROW and CATCH Be For Errors?</source>
      </item>
  </channel>
</rss>
