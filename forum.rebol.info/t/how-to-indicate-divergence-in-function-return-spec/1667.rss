<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How To Indicate &quot;Divergence&quot; in Function RETURN: Spec</title>
    <link>https://forum.rebol.info/t/how-to-indicate-divergence-in-function-return-spec/1667</link>
    <description>Today&#39;s vocabulary word is **[&quot;divergent&quot;](https://en.wikipedia.org/wiki/Divergence_(computer_science))** ... a description for when a function never returns a result in a &quot;normal&quot; way.

All functions that can FAIL or be THROWN or RETURN&#39;d across have divergence as an *option* (which is, right now, all functions).  But it becomes an issue of what to say when there really is no type a function *ever* returns...what do you put in the spec?

Lately I&#39;ve been using just **`[return: []]`**.  That seems pretty solid.  An empty block indicating there&#39;s no types you can return...so any return would generate an error.

But because I can imagine people not knowing what that meant, I find myself always adding a comment so people can look up the term &quot;divergent&quot;:

    catch [
        my-non-returning-function: func [
            return: []  ; divergent
        ][
            if now/month = 8 [
                return &quot;It&#39;s August&quot;  ; oops, meant THROW (so causes error)
            ]
            throw &quot;It&#39;s not August&quot;
        ]
        my-non-returning-function
    ]

My tendency to hedge is probably silly.  Because **`return: []`**  is pretty straightforward.  The comment probably makes it *more* confusing.

So **`return: &lt;divergent&gt;`** (or whatever) is probably not worth it.

*(I should point out that it hasn&#39;t always been as clear that **`return: []`** wouldn&#39;t mean something like &quot;the function is invisible&quot; or &quot;the function returns trash&quot;.  But we have good clear ways of saying those things, so I like this for divergence.)*</description>
    
    <lastBuildDate>Fri, 23 Aug 2024 08:52:18 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/how-to-indicate-divergence-in-function-return-spec/1667.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How To Indicate &quot;Divergence&quot; in Function RETURN: Spec</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Today's vocabulary word is <strong><a href="https://en.wikipedia.org/wiki/Divergence_(computer_science)">"divergent"</a></strong> ... a description for when a function never returns a result in a "normal" way.</p>
<p>All functions that can FAIL or be THROWN or RETURN'd across have divergence as an <em>option</em> (which is, right now, all functions).  But it becomes an issue of what to say when there really is no type a function <em>ever</em> returns...what do you put in the spec?</p>
<p>Lately I've been using just <strong><code>[return: []]</code></strong>.  That seems pretty solid.  An empty block indicating there's no types you can return...so any return would generate an error.</p>
<p>But because I can imagine people not knowing what that meant, I find myself always adding a comment so people can look up the term "divergent":</p>
<pre><code>catch [
    my-non-returning-function: func [
        return: []  ; divergent
    ][
        if now/month = 8 [
            return "It's August"  ; oops, meant THROW (so causes error)
        ]
        throw "It's not August"
    ]
    my-non-returning-function
]
</code></pre>
<p>My tendency to hedge is probably silly.  Because <strong><code>return: []</code></strong>  is pretty straightforward.  The comment probably makes it <em>more</em> confusing.</p>
<p>So <strong><code>return: &lt;divergent&gt;</code></strong> (or whatever) is probably not worth it.</p>
<p><em>(I should point out that it hasn't always been as clear that <strong><code>return: []</code></strong> wouldn't mean something like "the function is invisible" or "the function returns trash".  But we have good clear ways of saying those things, so I like this for divergence.)</em></p>
          <p><a href="https://forum.rebol.info/t/how-to-indicate-divergence-in-function-return-spec/1667/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-indicate-divergence-in-function-return-spec/1667/1</link>
        <pubDate>Mon, 16 Aug 2021 02:35:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1667-1</guid>
        <source url="https://forum.rebol.info/t/how-to-indicate-divergence-in-function-return-spec/1667.rss">How To Indicate &quot;Divergence&quot; in Function RETURN: Spec</source>
      </item>
  </channel>
</rss>
