<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Turning a Blind Eye to Evaluator &quot;Abuse&quot;</title>
    <link>https://forum.rebol.info/t/turning-a-blind-eye-to-evaluator-abuse/1791</link>
    <description>I&#39;ve gotten kind of attached to the current look and behavior of AND and OR, which allow short-circuiting even though one would not think the language could (should?) be able to.

It doesn&#39;t require simple variables be in a GROUP! on the right hand side.

    &gt;&gt; if true and true [print &quot;True&quot;] else [print &quot;False&quot;]
    True

...but a function call has to be.

    &gt;&gt; foo: func [x] [
          print &quot;Calling foo!&quot;
          return x &gt; 1000
       ]

    &gt;&gt; if false and foo 1020 [print &quot;True!&quot;] else [print &quot;False&quot;]
    ** Error: words/tuples can&#39;t be ACTION! as right hand of OR, AND, XOR

    &gt;&gt; if false and (foo 1020) [print &quot;True&quot;] else [print &quot;False&quot;]
    False

    &gt;&gt; if true and (foo 1020) [print &quot;True!&quot;] else [print &quot;False&quot;]
    Calling foo!
    True

*Note that if the thing to the left of the AND is false, it does not run the code in the GROUP! on the right.*  This requires that the right hand side be a quoted parameter convention.

Alternatively we could not quote it, and require the right hand side be in a block:

    &gt;&gt; if true and [true] [print &quot;True&quot;] else [print &quot;False&quot;]
    True

    &gt;&gt; if false and [foo 1020] [print &quot;True&quot;] else [print &quot;False&quot;]
    False

**But I don&#39;t like that.**

Alternatively we could say we don&#39;t offer this and you always use ALL...maybe with COMMA! and maybe not:

    &gt;&gt; if all [true true] [print &quot;True&quot;] else [print &quot;False&quot;]
    True

    &gt;&gt; if all [false, foo 1020] [print &quot;True&quot;] else [print &quot;False&quot;]
    False

I just don&#39;t think that looks as natural.

## It&#39;s Like I Said In [&quot;Speaking With Tics&quot;](https://forum.rebol.info/t/speaking-with-tics-should-quoted-arguments-always-be-apostrophed/1359)...

If you think seeing a GROUP! on the right of AND and OR that doesn&#39;t unconditionally evaluate at the callsite is weird, why are you comfortable with **`for-each x [1 2 3] [...]`**?  That didn&#39;t unconditionally evaluate x.  Do you expect it to be **`for-each &#39;x`** instead?
 
[quote]
The quoted parameter convention exists to save you the trouble of quoting the callsites. *If this isn&#39;t what that&#39;s for, then what **is** it for?*
[/quote]

It&#39;s just too nice to be able to say things like **`if var1 and var2 or (a &gt; b) [...]`**.

To me, part of what makes the language special is the ability to bend the evaluator to how we want to read code, vs bending code to fit the evaluator.  The existence of mechanics like quoted parameters are there to let this happen.

*You don&#39;t have to use it.*  And the ability to switch it to where AND is a prefix operator that does bitwise math is the magic of the freedom of choice.  You can choose to change the definition even on a module-by-module basis, or on a function-by-function basis.

Further: if you&#39;re not bending the language, you&#39;re probably not really using it.</description>
    
    <lastBuildDate>Fri, 18 Feb 2022 18:34:57 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/turning-a-blind-eye-to-evaluator-abuse/1791.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Turning a Blind Eye to Evaluator &quot;Abuse&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've gotten kind of attached to the current look and behavior of AND and OR, which allow short-circuiting even though one would not think the language could (should?) be able to.</p>
<p>It doesn't require simple variables be in a GROUP! on the right hand side.</p>
<pre><code>&gt;&gt; if true and true [print "True"] else [print "False"]
True
</code></pre>
<p>...but a function call has to be.</p>
<pre><code>&gt;&gt; foo: func [x] [
      print "Calling foo!"
      return x &gt; 1000
   ]

&gt;&gt; if false and foo 1020 [print "True!"] else [print "False"]
** Error: words/tuples can't be ACTION! as right hand of OR, AND, XOR

&gt;&gt; if false and (foo 1020) [print "True"] else [print "False"]
False

&gt;&gt; if true and (foo 1020) [print "True!"] else [print "False"]
Calling foo!
True
</code></pre>
<p><em>Note that if the thing to the left of the AND is false, it does not run the code in the GROUP! on the right.</em>  This requires that the right hand side be a quoted parameter convention.</p>
<p>Alternatively we could not quote it, and require the right hand side be in a block:</p>
<pre><code>&gt;&gt; if true and [true] [print "True"] else [print "False"]
True

&gt;&gt; if false and [foo 1020] [print "True"] else [print "False"]
False
</code></pre>
<p><strong>But I don't like that.</strong></p>
<p>Alternatively we could say we don't offer this and you always use ALL...maybe with COMMA! and maybe not:</p>
<pre><code>&gt;&gt; if all [true true] [print "True"] else [print "False"]
True

&gt;&gt; if all [false, foo 1020] [print "True"] else [print "False"]
False
</code></pre>
<p>I just don't think that looks as natural.</p>
<h2><a name="p-5774-its-like-i-said-in-speaking-with-ticshttpsforumrebolinfotspeaking-with-tics-should-quoted-arguments-always-be-apostrophed1359-1" class="anchor" href="https://forum.rebol.info#p-5774-its-like-i-said-in-speaking-with-ticshttpsforumrebolinfotspeaking-with-tics-should-quoted-arguments-always-be-apostrophed1359-1"></a>It's Like I Said In <a href="https://forum.rebol.info/t/speaking-with-tics-should-quoted-arguments-always-be-apostrophed/1359">"Speaking With Tics"</a>...</h2>
<p>If you think seeing a GROUP! on the right of AND and OR that doesn't unconditionally evaluate at the callsite is weird, why are you comfortable with <strong><code>for-each x [1 2 3] [...]</code></strong>?  That didn't unconditionally evaluate x.  Do you expect it to be <strong><code>for-each 'x</code></strong> instead?</p>
<aside class="quote no-group">
<blockquote>
<p>The quoted parameter convention exists to save you the trouble of quoting the callsites. <em>If this isn't what that's for, then what <strong>is</strong> it for?</em></p>
</blockquote>
</aside>
<p>It's just too nice to be able to say things like <strong><code>if var1 and var2 or (a &gt; b) [...]</code></strong>.</p>
<p>To me, part of what makes the language special is the ability to bend the evaluator to how we want to read code, vs bending code to fit the evaluator.  The existence of mechanics like quoted parameters are there to let this happen.</p>
<p><em>You don't have to use it.</em>  And the ability to switch it to where AND is a prefix operator that does bitwise math is the magic of the freedom of choice.  You can choose to change the definition even on a module-by-module basis, or on a function-by-function basis.</p>
<p>Further: if you're not bending the language, you're probably not really using it.</p>
          <p><a href="https://forum.rebol.info/t/turning-a-blind-eye-to-evaluator-abuse/1791/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/turning-a-blind-eye-to-evaluator-abuse/1791/1</link>
        <pubDate>Fri, 18 Feb 2022 18:34:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1791-1</guid>
        <source url="https://forum.rebol.info/t/turning-a-blind-eye-to-evaluator-abuse/1791.rss">Turning a Blind Eye to Evaluator &quot;Abuse&quot;</source>
      </item>
  </channel>
</rss>
