<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>PARSE vs. Haskell&#39;s (X)PARSEC</title>
    <link>https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321</link>
    <description>Rebol&#39;s PARSE might seem unique to those coming from &quot;mainstream&quot; languages.  But when talking to those who survey alternative languages, it&#39;s important not to be ignorant of the work of others!  For instance, take a skim through of:

**[Parser Combinators: Parsing for Haskell Beginners](https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners.html)**

The author of that page makes many of the same arguments Rebol users make about how RegEx is gibberish...and that it&#39;s much nicer when you can name and factor out rules.  But there are some big differences worth knowing about.

**Haskell has formulated their Parser so you can re-use patterns from the rest of the language inside the parse.**  It&#39;s as if in Rebol there didn&#39;t need to be syntax in the PARSE dialect for &quot;repeat this rule N times&quot;, you just use the same REPEAT native that ran any other code a certain number of times.  So making up new &quot;parse keywords&quot; is just writing new functions.

If that sounds super-slick, *it is*.  How did they create a framework so general that it applies to both &quot;function&quot; and &quot;parser plugin&quot;?  Well, you can&#39;t use just *any* function this way...you have to use various *&quot;monad-aware&quot;* operations.  e.g. the form of REPEAT you can use is called [replicateM](https://hackage.haskell.org/package/base-4.14.0.0/docs/Control-Monad.html#v:replicateM).  Explanations of this are beyond the scope of this post and/or my understanding...but the upshot is that it&#39;s still all quite neat.

And as a consequence of making each subparser &quot;just another function&quot;: **All the optimizations the compiler can do for functions apply to the parse too, and it&#39;s blazing fast**.  Continuing the REPEAT example...if they bothered to notice that it was actually a REPEAT of 1 then it can optimize that out.  While each subrule you give a name to and factor out in Rebol parsing slows it down a little bit at runtime, Haskell can optimize that out at compile-time.

There are a **lot of standard parsers defined**...so people who want to get something like a signed decimal number out of a stream can do so.  If you want [hexadecimal numbers](https://github.com/bos/attoparsec/blob/18f4f8ec4f3257d2ddc8a911b398b2d3e640a11c/Data/Attoparsec/Text.hs#L290), you&#39;ve got it.  (The lack of standard definitions like these has always been a weak point in Rebol.)

Also: **Haskell&#39;s Parsers have a Lot of Nice Features we wish we had**.  Look at the [list from Megaparsec](https://github.com/mrkkrp/megaparsec), the current leader of the pack of Haskell parsers.  A few:

* Megaparsec can show the line on which parse error happened as part of parse error. 

* Megaparsec has more powerful combinators and can parse languages where indentation matters out-of-the-box.

* Megaparsec can recover from parse errors “on the fly” and continue parsing.

* Megaparsec allows us to conditionally process parse errors  *inside your parser*  before parsing is finished. In particular, it&#39;s possible to define regions in which parse errors, should they happen, will get a “context tag”, e.g. we could build a context stack like “in function definition foo”, “in expression x”, etc.

## How Can Redbols Compete?

Forget the idea of ever competing on performance or rigor.  No way.

But since Haskell is compiled, you don&#39;t get the opportunity to build parse rules dynamically.  So that&#39;s something to really stress.  I think Ren-C&#39;s ability to [indicate the GROUP!s that you want to COMPOSE](https://forum.rebol.info/t/tag-compose-is-it-tag-specific-composition/979) is the sort of thing that would play into a real &quot;magic&quot; demo of how clean it could be to build these things at runtime.

*(Note: Clojure has an interesting edge here, because it has [monadic parsing libraries](https://github.com/rm-hull/jasentaa), but you can build those parse &quot;rules&quot; and compile them at runtime too.  This is the sort of thing Red could, in theory, do.)*

The Monadic parsers can&#39;t have side-effects, so each little parsing subrule is a function that gives a specific type of result.  The top-level rule you pass in builds a structure out of all these subresult. 
 Being able to stick in GROUP!s to run arbitrary code and use SET and COPY to write arbitrary variables really does differentiate Rebol...and it can seem very nice.  But maybe it would be good if the foundations of Rebol PARSE permitted the &quot;building an aggregate value cleanly&quot; and these imperative abilities were thrown in as a tool to use if that didn&#39;t fit your use case. 

I thought Haskell parsers were network-stream-capable out of the box...e.g. that they would have an intelligent formulation so you could parse an infinite number of data items one at a time.  But nearly all of the parsers--including Megaparsec--require all the data to be in memory from the beginning (the way Rebol PARSE does today).  Even the parsers that are &quot;incremental&quot; hold onto all the historical input in case they need to backtrack...whether the rules need to or not. *I&#39;ve found some research pointing to architectures of doing this better...[see Section 4 of this paper](https://www.cs.tufts.edu/~nr/cs257/archive/doaitse-swierstra/combinator-parsing-tutorial.pdf)*

## Conclusion

Taking time to work in other languages is helping to give me perspective, and get rid of some of the &quot;tunnel vision&quot; of exploring the vagaries of C, C++, and Rebol for too long.  I&#39;m looking for the best of what&#39;s out there for anything I can steal: type systems, streaming for a composable PORT! design, you-name-it.

Even so...while I do enjoy aspects of hacking around in Haskell, doing so certainly convinces me that *there are very few people in the planet who would ever be able to put up with programming in it.*  Some parts of it do feel fairly natural for my line of thinking...but some of it is just really frustrating and dizzying, and it doesn&#39;t help that people really seem to go for absolute brevity in their code instead of labeling their subexpressions.  *(The compiler will optimize it out, what are they afraid of?)*

Finding out that Haskell parsers weren&#39;t supporting incrementality for network streaming out of the box was a bit of a shock to me.  I&#39;m going to keep digging until I can find some neat version of a &quot;snapped together&quot; system that can parse a PORT! which has a decompressor codec snapped onto it, running over a https connection.  If I can piece together a state-of-the-art system that does that, I&#39;ll try to approximate it.</description>
    
    <lastBuildDate>Tue, 19 Mar 2024 06:39:20 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>PARSE vs. Haskell&#39;s (X)PARSEC</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="5" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>I find it much more rewarding to think about how to design languages to solve real-world problems.</p>
</blockquote>
</aside>
<p>Certainly "real" problems are being attacked.  I just question the idea of solving problems <em>at scale</em> with such a tool.</p>
<p>But many real-world problems don't need to work at scale.  I probably shouldn't say they're "toy" problems just because they're kind of small, but it certainly opens the field to using quirkier interpreted languages.</p>
          <p><a href="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/6</link>
        <pubDate>Tue, 19 Mar 2024 06:39:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1321-6</guid>
        <source url="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321.rss">PARSE vs. Haskell&#39;s (X)PARSEC</source>
      </item>
      <item>
        <title>PARSE vs. Haskell&#39;s (X)PARSEC</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>A constrained parse dialect could be a parser generator, and the constrained dialect could probably subset the unconstrained one pretty closely.</p>
<p>But unconstrained PARSE as-we've-known-it is quite dynamic.</p>
</blockquote>
</aside>
<p>One subtle thing to note here is that it is possible to inspect a parse block to determine how dynamic it is. This is something which Haskell simply cannot do at all.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I've tried to nail down some minimal rules for the sake of coherence:</p>
<p><a href="https://forum.rebol.info/t/when-should-parse-notice-changes/1528">When Should PARSE Notice Changes</a></p>
</blockquote>
</aside>
<p>I think this is a really important thing to do. The reason Haskell’s parser combinators are so extensible is that they’re built on abstractions with very well-defined laws, so they can make assumptions about how other parser combinators can behave. By contrast, it seems to me that many UPARSE combinators behave have somewhat idiosyncratic behaviour, which makes them more difficult to combine. Having a more rigorous foundation for UPARSE combinators would be well worth the effort, I think.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>My main point of view that where this fits in the "Loom of Language" is packaging this kind of methodology in a way that brings it to the common programmer, using naught but mostly-C89. A kind of <em>"organic, locally-sourced software"</em> without inscrutable additives and preservatives. I want it to be constructed obviously and my performance goals are modest--seeing it as a toy almost more than anything.</p>
</blockquote>
</aside>
<p>This would explain a lot of our disagreements, then… I don’t particularly like ‘toy languages’, except insofar as they have interesting ideas I can use elsewhere. I find it much more rewarding to think about how to design languages to solve real-world problems.</p>
          <p><a href="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/5</link>
        <pubDate>Sun, 17 Mar 2024 03:12:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1321-5</guid>
        <source url="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321.rss">PARSE vs. Haskell&#39;s (X)PARSEC</source>
      </item>
      <item>
        <title>PARSE vs. Haskell&#39;s (X)PARSEC</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>By contrast, Rebol parsers are completely specified ahead of time.</p>
</blockquote>
</aside>
<p>A constrained parse dialect could be a parser generator, and the constrained dialect could probably subset the unconstrained one pretty closely.</p>
<p>But unconstrained PARSE as-we've-known-it is quite dynamic.  I've tried to nail down some minimal rules for the sake of coherence:</p>
<p><a href="https://forum.rebol.info/t/when-should-parse-notice-changes/1528" class="inline-onebox">When Should PARSE Notice Changes</a></p>
<aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>I think there is definite untapped potential for Ren-C to be better than Haskell, at least in one of these metrics.</p>
</blockquote>
</aside>
<p>My main point of view that where this fits in the "Loom of Language" is packaging this kind of methodology in a way that brings it to the common programmer, using naught but mostly-C89.  A kind of <em>"organic, locally-sourced software"</em> without inscrutable additives and preservatives.  I want it to be constructed obviously and my performance goals are modest--seeing it as a toy almost more than anything.</p>
<p>This is in contrast to fairly bold claims about the pervasive applicability of the medium, believed by Carl and Red.</p>
<p>Ultimately if it gets used by others, it won't be up to me.  I don't know if you read Graydon Hoare's bit on Rust going in a direction he didn't envision--but that his vision probably had no realistic future:</p>
<p><a href="https://graydon2.dreamwidth.org/307291.html">https://graydon2.dreamwidth.org/307291.html</a></p>
<p>Maybe my more humble framing isn't the way the world will take it.  I don't know, but I'm glad you see potential in it!</p>
          <p><a href="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/4</link>
        <pubDate>Fri, 15 Mar 2024 00:19:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1321-4</guid>
        <source url="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321.rss">PARSE vs. Haskell&#39;s (X)PARSEC</source>
      </item>
      <item>
        <title>PARSE vs. Haskell&#39;s (X)PARSEC</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Forget the idea of ever competing on performance or rigor. No way.</p>
</blockquote>
</aside>
<p>As a Haskeller, I don’t actually think this is valid. I think there is definite untapped potential for Ren-C to be better than Haskell, at least in one of these metrics.</p>
<p>Firstly: note that parser combinators were not always ‘blazing fast’. There was a time when they were considered almost unusably slow. <a href="https://forum.rebol.info/t/haskell-parser-combinators/2173">As I’ve said</a>, the Haskell community needed to find the right trade-offs to get the speed up to where it is now… and I’ve definitely met people who think those trade-offs aren’t worth it (even if I personally do).</p>
<p>But also: it’s worth thinking a little closely about how Haskell parser combinators get that ‘rigor’. In large part, they do it by building everything off a set of well-defined abstractions: <code>Monad</code>, <code>Alternative</code>, and so on. This gives a flexible and reliable toolkit for composing parsers together, from which flows many other advantages.</p>
<p>But this approach has some disadvantages as well. The most prominent is that these particular abstractions can be, in some sense, ‘<em>too</em> big’: they might give parsers capabilities you might not want. In this case, the main culprit is <code>Monad</code>, which gives parsers the ability to depend arbitrarily on the results of earlier parsers. On the one hand, this allows context-sensitive parsing — but on the other, it makes static analysis impossible.</p>
<p>By contrast, Rebol parsers are completely specified ahead of time. You can inspect at the BLOCK! which is passed to PARSE or UPARSE, and see ahead-of-time the entire control flow of the parser. That gives you the opportunity to do clever optimisations… such as, let’s say, precompiling the whole parser into an ultra-fast LR lookup table. Even in Haskell, many people prefer to use such <a href="https://en.wikipedia.org/wiki/Compiler-compiler">parser generators</a> over parser combinators, despite the clunkiness it adds — a parser generator <em>embedded into the language itself</em> would be pretty amazing to use.</p>
<p>You can think of more creative uses too, of course. For instance, the Red people have used this capability <a href="https://www.red-lang.org/2020/03/gtk-fast-lexer-money-deep-testing-and.html">to generate railroad diagrams</a>, another thing Haskell parser combinator libraries can’t do.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But since Haskell is compiled, you don't get the opportunity to build parse rules dynamically.</p>
</blockquote>
</aside>
<p>I’m not <em>quite</em> sure what you’re referring to here… but if I understand you correctly, this sounds equivalent in power to what the <code>Monad</code> interface gives you. Most parser combinator libraries will allow you to alter the parser on-the-fly in crazy ways, if you really want to do so.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I thought Haskell parsers were network-stream-capable out of the box...e.g. that they would have an intelligent formulation so you could parse an infinite number of data items one at a time. But nearly all of the parsers--including Megaparsec--require all the data to be in memory from the beginning (the way Rebol PARSE does today). Even the parsers that are "incremental" hold onto all the historical input in case they need to backtrack...whether the rules need to or not. <em>I've found some research pointing to architectures of doing this better...<a href="https://www.cs.tufts.edu/~nr/cs257/archive/doaitse-swierstra/combinator-parsing-tutorial.pdf">see Section 4 of this paper</a></em></p>
</blockquote>
</aside>
<p>This is another one of those tradeoffs. To support arbitrary backtracking in a parser combinator system, you need to store the text to backtrack over. You can just <em>not store</em> that text, but then you can’t do any backtracking (or in more technical terms, you’re restricted to LL(1) grammars). So this is another place where Rebol potentially has an advantage, since it can analyse the parser before running it.</p>
          <p><a href="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/3</link>
        <pubDate>Tue, 12 Mar 2024 08:58:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1321-3</guid>
        <source url="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321.rss">PARSE vs. Haskell&#39;s (X)PARSEC</source>
      </item>
      <item>
        <title>PARSE vs. Haskell&#39;s (X)PARSEC</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1321">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>there are very few people in the planet who would ever be able to put up with programming in it</p>
</blockquote>
</aside>
<p>Yes, this is key. Peculiarities aside, Rebol syntax is quite friendly. I wouldn't be interested in big changes to get more performance or rigor. Syntaxes like REBIN or Red/System make me wonder why one wouldn't just switch to Go, Rust, Java etc. to get those features plus community/docs.</p>
<p>I think Java 8 has Streams which might be worth looking at.</p>
          <p><a href="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/2</link>
        <pubDate>Thu, 27 Aug 2020 13:45:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1321-2</guid>
        <source url="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321.rss">PARSE vs. Haskell&#39;s (X)PARSEC</source>
      </item>
      <item>
        <title>PARSE vs. Haskell&#39;s (X)PARSEC</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol's PARSE might seem unique to those coming from "mainstream" languages.  But when talking to those who survey alternative languages, it's important not to be ignorant of the work of others!  For instance, take a skim through of:</p>
<p><strong><a href="https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners.html" rel="nofollow noopener">Parser Combinators: Parsing for Haskell Beginners</a></strong></p>
<p>The author of that page makes many of the same arguments Rebol users make about how RegEx is gibberish...and that it's much nicer when you can name and factor out rules.  But there are some big differences worth knowing about.</p>
<p><strong>Haskell has formulated their Parser so you can re-use patterns from the rest of the language inside the parse.</strong>  It's as if in Rebol there didn't need to be syntax in the PARSE dialect for "repeat this rule N times", you just use the same REPEAT native that ran any other code a certain number of times.  So making up new "parse keywords" is just writing new functions.</p>
<p>If that sounds super-slick, <em>it is</em>.  How did they create a framework so general that it applies to both "function" and "parser plugin"?  Well, you can't use just <em>any</em> function this way...you have to use various <em>"monad-aware"</em> operations.  e.g. the form of REPEAT you can use is called <a href="https://hackage.haskell.org/package/base-4.14.0.0/docs/Control-Monad.html#v:replicateM" rel="nofollow noopener">replicateM</a>.  Explanations of this are beyond the scope of this post and/or my understanding...but the upshot is that it's still all quite neat.</p>
<p>And as a consequence of making each subparser "just another function": <strong>All the optimizations the compiler can do for functions apply to the parse too, and it's blazing fast</strong>.  Continuing the REPEAT example...if they bothered to notice that it was actually a REPEAT of 1 then it can optimize that out.  While each subrule you give a name to and factor out in Rebol parsing slows it down a little bit at runtime, Haskell can optimize that out at compile-time.</p>
<p>There are a <strong>lot of standard parsers defined</strong>...so people who want to get something like a signed decimal number out of a stream can do so.  If you want <a href="https://github.com/bos/attoparsec/blob/18f4f8ec4f3257d2ddc8a911b398b2d3e640a11c/Data/Attoparsec/Text.hs#L290" rel="nofollow noopener">hexadecimal numbers</a>, you've got it.  (The lack of standard definitions like these has always been a weak point in Rebol.)</p>
<p>Also: <strong>Haskell's Parsers have a Lot of Nice Features we wish we had</strong>.  Look at the <a href="https://github.com/mrkkrp/megaparsec" rel="nofollow noopener">list from Megaparsec</a>, the current leader of the pack of Haskell parsers.  A few:</p>
<ul>
<li>
<p>Megaparsec can show the line on which parse error happened as part of parse error.</p>
</li>
<li>
<p>Megaparsec has more powerful combinators and can parse languages where indentation matters out-of-the-box.</p>
</li>
<li>
<p>Megaparsec can recover from parse errors “on the fly” and continue parsing.</p>
</li>
<li>
<p>Megaparsec allows us to conditionally process parse errors  <em>inside your parser</em>  before parsing is finished. In particular, it's possible to define regions in which parse errors, should they happen, will get a “context tag”, e.g. we could build a context stack like “in function definition foo”, “in expression x”, etc.</p>
</li>
</ul>
<h2>How Can Redbols Compete?</h2>
<p>Forget the idea of ever competing on performance or rigor.  No way.</p>
<p>But since Haskell is compiled, you don't get the opportunity to build parse rules dynamically.  So that's something to really stress.  I think Ren-C's ability to <a href="https://forum.rebol.info/t/tag-compose-is-it-tag-specific-composition/979">indicate the GROUP!s that you want to COMPOSE</a> is the sort of thing that would play into a real "magic" demo of how clean it could be to build these things at runtime.</p>
<p><em>(Note: Clojure has an interesting edge here, because it has <a href="https://github.com/rm-hull/jasentaa" rel="nofollow noopener">monadic parsing libraries</a>, but you can build those parse "rules" and compile them at runtime too.  This is the sort of thing Red could, in theory, do.)</em></p>
<p>The Monadic parsers can't have side-effects, so each little parsing subrule is a function that gives a specific type of result.  The top-level rule you pass in builds a structure out of all these subresult.<br>
Being able to stick in GROUP!s to run arbitrary code and use SET and COPY to write arbitrary variables really does differentiate Rebol...and it can seem very nice.  But maybe it would be good if the foundations of Rebol PARSE permitted the "building an aggregate value cleanly" and these imperative abilities were thrown in as a tool to use if that didn't fit your use case.</p>
<p>I thought Haskell parsers were network-stream-capable out of the box...e.g. that they would have an intelligent formulation so you could parse an infinite number of data items one at a time.  But nearly all of the parsers--including Megaparsec--require all the data to be in memory from the beginning (the way Rebol PARSE does today).  Even the parsers that are "incremental" hold onto all the historical input in case they need to backtrack...whether the rules need to or not. <em>I've found some research pointing to architectures of doing this better...<a href="https://www.cs.tufts.edu/~nr/cs257/archive/doaitse-swierstra/combinator-parsing-tutorial.pdf" rel="nofollow noopener">see Section 4 of this paper</a></em></p>
<h2>Conclusion</h2>
<p>Taking time to work in other languages is helping to give me perspective, and get rid of some of the "tunnel vision" of exploring the vagaries of C, C++, and Rebol for too long.  I'm looking for the best of what's out there for anything I can steal: type systems, streaming for a composable PORT! design, you-name-it.</p>
<p>Even so...while I do enjoy aspects of hacking around in Haskell, doing so certainly convinces me that <em>there are very few people in the planet who would ever be able to put up with programming in it.</em>  Some parts of it do feel fairly natural for my line of thinking...but some of it is just really frustrating and dizzying, and it doesn't help that people really seem to go for absolute brevity in their code instead of labeling their subexpressions.  <em>(The compiler will optimize it out, what are they afraid of?)</em></p>
<p>Finding out that Haskell parsers weren't supporting incrementality for network streaming out of the box was a bit of a shock to me.  I'm going to keep digging until I can find some neat version of a "snapped together" system that can parse a PORT! which has a decompressor codec snapped onto it, running over a https connection.  If I can piece together a state-of-the-art system that does that, I'll try to approximate it.</p>
          <p><a href="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321/1</link>
        <pubDate>Thu, 27 Aug 2020 06:52:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1321-1</guid>
        <source url="https://forum.rebol.info/t/parse-vs-haskells-x-parsec/1321.rss">PARSE vs. Haskell&#39;s (X)PARSEC</source>
      </item>
  </channel>
</rss>
