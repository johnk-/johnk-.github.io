<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Contemplating UPARSE-VALUE</title>
    <link>https://forum.rebol.info/t/contemplating-uparse-value/1822</link>
    <description>Once upon a time, PARSE was willing to take rules that were not BLOCK! and do &quot;simple parsing&quot;.  Ultimately this was thought better of and became SPLIT...because that wasn&#39;t a very interesting polymorphism.

But... since PARSE is at heart a matching task, it seems there might be more accommodation when the input value is not a block... and you want to do some top level pattern matching.  Consider something like this:

    case [
         integer? item [
             print &quot;Not a series, so, have to write handling code here&quot;
         ]
         text? item [
             print &quot;A series, but maybe we want to do something else&quot;
         ]
         block? item [
             print &quot;Okay finally we can use the parse we mean...&quot;
             uparse item [...rules...]
         ]
    ] else [
       fail &quot;Whatever&quot;
    ]

It&#39;s something of a missed opportunity, and when I see this I start thinking along these lines:

    uparse reduce [item] [
         integer! &lt;end&gt; (print &quot;More convenient, perhaps...&quot;)
             |
         text! &lt;end&gt; (print &quot;Depends on the use case...&quot;)
             |
         into block! &lt;end&gt; [
            (print &quot;Your rules here I guess...&quot;)
         ]
    ] else [
        fail &quot;Whatever&quot;
    ]

On first glance it&#39;s not necessarily an improvement, but... let&#39;s say for a minute that we have a UPARSE-VALUE which implicitly throws in the `&lt;end&gt;`:

    uparse-value item [
         integer! (print &quot;Okay, this...&quot;)
             |
         text! (print &quot;Seems a bit cleaner...&quot;)
             |
         into block! [
            (print &quot;Your rules here I guess...&quot;)
         ]
    ] else [
        fail &quot;Whatever&quot;
    ]

This is just a high-level thought of pushing down the higher level matching tasks into UPARSE instead of keeping it fully separate.  If your input was calculated, you could still call it up with `&lt;input&gt;` ... although that wouldn&#39;t be available to the GROUP! code.

    &gt;&gt; uparse-value 1 + 2 [integer! (print &quot;int&quot;) &lt;input&gt; | text! (print &quot;text&quot;, #text)]
    int
    == 3

    &gt;&gt; uparse-value &quot;foo&quot; [integer! (print &quot;int&quot;) &lt;input&gt; | text! (print &quot;text&quot;, #text)]
    text
    == #text

But you&#39;re no worse off than in a switch statement that doesn&#39;t have calculated input captured under a name.  (Slightly better, in fact, since you have a means of calling up the calculated input.)

It&#39;s just a thought, because I&#39;ve seen this pattern several times: &quot;I have a decision tree but I can&#39;t start doing parsing until I have a series&quot;.  This is just an idea about stretching all the matching and extraction logic that is going to be needed in UPARSE anyway to apply to single values.

## UPARSE-VALUE or UPARSE/VALUE

This strongly parallels the LOAD-VALUE vs. LOAD issue.  It seemed to make more sense in that case to separate it out so LOAD was fully generic and unconcerned with the /VALUE aspect.  This might or might not have the same rationale as to why UPARSE shouldn&#39;t internally be concerned with the behavior.</description>
    
    <lastBuildDate>Tue, 17 May 2022 15:48:10 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/contemplating-uparse-value/1822.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Contemplating UPARSE-VALUE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Once upon a time, PARSE was willing to take rules that were not BLOCK! and do "simple parsing".  Ultimately this was thought better of and became SPLIT...because that wasn't a very interesting polymorphism.</p>
<p>But... since PARSE is at heart a matching task, it seems there might be more accommodation when the input value is not a block... and you want to do some top level pattern matching.  Consider something like this:</p>
<pre><code>case [
     integer? item [
         print "Not a series, so, have to write handling code here"
     ]
     text? item [
         print "A series, but maybe we want to do something else"
     ]
     block? item [
         print "Okay finally we can use the parse we mean..."
         uparse item [...rules...]
     ]
] else [
   fail "Whatever"
]
</code></pre>
<p>It's something of a missed opportunity, and when I see this I start thinking along these lines:</p>
<pre><code>uparse reduce [item] [
     integer! &lt;end&gt; (print "More convenient, perhaps...")
         |
     text! &lt;end&gt; (print "Depends on the use case...")
         |
     into block! &lt;end&gt; [
        (print "Your rules here I guess...")
     ]
] else [
    fail "Whatever"
]
</code></pre>
<p>On first glance it's not necessarily an improvement, but... let's say for a minute that we have a UPARSE-VALUE which implicitly throws in the <code>&lt;end&gt;</code>:</p>
<pre><code>uparse-value item [
     integer! (print "Okay, this...")
         |
     text! (print "Seems a bit cleaner...")
         |
     into block! [
        (print "Your rules here I guess...")
     ]
] else [
    fail "Whatever"
]
</code></pre>
<p>This is just a high-level thought of pushing down the higher level matching tasks into UPARSE instead of keeping it fully separate.  If your input was calculated, you could still call it up with <code>&lt;input&gt;</code> ... although that wouldn't be available to the GROUP! code.</p>
<pre><code>&gt;&gt; uparse-value 1 + 2 [integer! (print "int") &lt;input&gt; | text! (print "text", #text)]
int
== 3

&gt;&gt; uparse-value "foo" [integer! (print "int") &lt;input&gt; | text! (print "text", #text)]
text
== #text
</code></pre>
<p>But you're no worse off than in a switch statement that doesn't have calculated input captured under a name.  (Slightly better, in fact, since you have a means of calling up the calculated input.)</p>
<p>It's just a thought, because I've seen this pattern several times: "I have a decision tree but I can't start doing parsing until I have a series".  This is just an idea about stretching all the matching and extraction logic that is going to be needed in UPARSE anyway to apply to single values.</p>
<h2>UPARSE-VALUE or UPARSE/VALUE</h2>
<p>This strongly parallels the LOAD-VALUE vs. LOAD issue.  It seemed to make more sense in that case to separate it out so LOAD was fully generic and unconcerned with the /VALUE aspect.  This might or might not have the same rationale as to why UPARSE shouldn't internally be concerned with the behavior.</p>
          <p><a href="https://forum.rebol.info/t/contemplating-uparse-value/1822/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/contemplating-uparse-value/1822/1</link>
        <pubDate>Tue, 17 May 2022 08:43:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1822-1</guid>
        <source url="https://forum.rebol.info/t/contemplating-uparse-value/1822.rss">Contemplating UPARSE-VALUE</source>
      </item>
  </channel>
</rss>
