<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Updated Parse Machine</title>
    <link>https://forum.rebol.info/t/updated-parse-machine/1475</link>
    <description>I&#39;ve an updated version of my [Parse Machine](https://gist.github.com/rgchris/b31ce985f5260e5f5bd0be76255669ab) (currently for R3C) that binds the whole operation to the SYSTEM/CODECS object.

Could use more thought about how it works, but I thought I&#39;d share in its current iteration as I&#39;m finding it increasingly useful.

# Features

* It somewhat standardizes a location for grammar rules
* It somewhat standardizes the FSM parsing method for any codecs written therein
* The above points together conceptually would permit mixing and matching grammars (e.g. CSS within Markup) as well as using fragments, though I&#39;d say there&#39;s likely more to figure out before that&#39;d all be practical.
* It somewhat separates grammar rules from the application logic that processes them, thus the same rules can be used for consuming whole files or on a token-by-token streaming basis
* Leans also to codecs rooted in the spirit of [*be liberal in what you accept*](https://en.wikipedia.org/wiki/Robustness_principle).

I&#39;ve used *somewhat* above to underscore that while this idea is opinionated about the conventions used, it does not dictate anything. There&#39;s still undiscovered patterns in there

# Limitations

* For efficiency, the machine only exists as a single module and can only institute one state value at a time, thus decoders built atop it either can&#39;t be called recursively or have to manage recursion explicitly
* The guts of the machine is a Parse WHILE loop which has to look up the current rule each iteration
* The state value is presumed to be a MAP! chosen for its less ornery handling of keys, not for its suitability/performance
* These two points would indicate that this approach could be optimized if it proves as useful as I believe it might
* The codec installer (PARSER/NEW) only has params for name, file extensions, options and grammar rules. It doesn&#39;t include encode/decode/identify functions. This could change to something like:

    ```plain
    parser/new &#39;name [
        suffixes: [...]
        identify?: func [...] [...]
        rules: [rule-1 [...] [...]]
        encode: func [...] [...]
        decode: func [...] [...]
    ]
    ```

    Although it&#39;s not certain that a codec may have it&#39;s own set of rules (e.g. &#39;markup can reuse &#39;html rules)

# Example

This example is a little contrived, but demonstrates how to install and deploy a grammar, and how flow can both be embedded in the grammar or in functions built around the Parse Machine API:

```plain
Rebol [
    Title: &quot;Test Parser Module&quot;
    Needs: [
        %parser.reb
    ]
]

make object! [
    parser/new &#39;abba [%.abba] [] [  ; the empty block is &#39;options
        is-a [
            #&quot;a&quot; (emit &#39;a-in-a)
            |
            #&quot;b&quot; (emit &#39;b-in-a-to-b use is-b)
            |
            #&quot;c&quot; (emit &#39;c?! stop)
            |
            skip (report [&quot;Misplaced &quot; to char! mark/1])
            |
            end (emit &#39;end-in-a use done)
        ]

        is-b [
            mark:
            #&quot;a&quot; (emit &#39;a-in-b-to-a use is-a) :mark
            |
            #&quot;b&quot; (emit &#39;b-in-b)
            |
            #&quot;c&quot; (emit &#39;c-in-b)
            |
            skip (report [&quot;Misplaced &quot; to char! mark/1])
            |
            end (emit &#39;end-in-b-to-a use is-a)
        ]

        done [
            end (emit &#39;done stop)
        ]
    ]

    system/codecs/abba/decode: func [
        blob [binary!]
        &lt;local&gt; state
    ][
        state: parser/init &#39;abba blob

        state/out: make block! 10
        state/errors: make block! 0

        state/emit: func [token] [
            append state/out token
        ]

        state/report: func [token] [
            append state/errors token
        ]

        parser/start

        case [
            not state/is-done [
                fail &quot;Blob did not meet strict ABBA requirements&quot;
            ]

            not empty? state/errors [
                probe state/errors
                fail &quot;Multiple ABBA errors&quot;
            ]

            &lt;else&gt; [
                state/out
            ]
        ]
    ]
]

probe equal? decode &#39;abba to binary! &quot;aba&quot;
[a-in-a b-in-a-to-b a-in-b-to-a a-in-a end-in-a done]

probe equal? decode &#39;abba to binary! &quot;bcab&quot;
[b-in-a-to-b c-in-b a-in-b-to-a a-in-a b-in-a-to-b end-in-b-to-a end-in-a done]

probe error? trap [decode &#39;abba to binary! &quot;abcd&quot;]
```</description>
    
    <lastBuildDate>Mon, 01 Feb 2021 06:22:23 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/updated-parse-machine/1475.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>5 posts were split to a new topic: <a href="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937">Binding Issues Raised by Chris's PARSE-MACHINE</a></p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/2</link>
        <pubDate>Sun, 21 Aug 2022 11:55:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-2</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="https://forum.rebol.info/t/errors-on-locked-binding/1936">Errors on "Locked" Binding?</a></p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/9</link>
        <pubDate>Sun, 21 Aug 2022 11:02:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-9</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>I've an updated version of my <a href="https://gist.github.com/rgchris/b31ce985f5260e5f5bd0be76255669ab">Parse Machine </a> (currently for R3C)</p>
</blockquote>
<p>If you'd be willing to go ahead and jump this particular codebase to mainline Ren-C, and work up some tests for it, then it could be a lens for how we look at evolving these features.  I'd be able to help keep it running...so changes wouldn't be as much a hassle.</p>
<p>It's definitely not throwing softballs--which I like.  This is supposed to be a language you can extend, and that shouldn't entail <em>"write an entirely new evaluator and PARSE command if you want something that deviates a bit"</em>.</p>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/6</link>
        <pubDate>Fri, 29 Jan 2021 17:39:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-6</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
      <item>
        <title>Updated Parse Machine</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I've an updated version of my <a href="https://gist.github.com/rgchris/b31ce985f5260e5f5bd0be76255669ab">Parse Machine</a> (currently for R3C) that binds the whole operation to the SYSTEM/CODECS object.</p>
<p>Could use more thought about how it works, but I thought I'd share in its current iteration as I'm finding it increasingly useful.</p>
<h1>Features</h1>
<ul>
<li>It somewhat standardizes a location for grammar rules</li>
<li>It somewhat standardizes the FSM parsing method for any codecs written therein</li>
<li>The above points together conceptually would permit mixing and matching grammars (e.g. CSS within Markup) as well as using fragments, though I'd say there's likely more to figure out before that'd all be practical.</li>
<li>It somewhat separates grammar rules from the application logic that processes them, thus the same rules can be used for consuming whole files or on a token-by-token streaming basis</li>
<li>Leans also to codecs rooted in the spirit of <a href="https://en.wikipedia.org/wiki/Robustness_principle"><em>be liberal in what you accept</em></a>.</li>
</ul>
<p>I've used <em>somewhat</em> above to underscore that while this idea is opinionated about the conventions used, it does not dictate anything. There's still undiscovered patterns in there</p>
<h1>Limitations</h1>
<ul>
<li>
<p>For efficiency, the machine only exists as a single module and can only institute one state value at a time, thus decoders built atop it either can't be called recursively or have to manage recursion explicitly</p>
</li>
<li>
<p>The guts of the machine is a Parse WHILE loop which has to look up the current rule each iteration</p>
</li>
<li>
<p>The state value is presumed to be a MAP! chosen for its less ornery handling of keys, not for its suitability/performance</p>
</li>
<li>
<p>These two points would indicate that this approach could be optimized if it proves as useful as I believe it might</p>
</li>
<li>
<p>The codec installer (PARSER/NEW) only has params for name, file extensions, options and grammar rules. It doesn't include encode/decode/identify functions. This could change to something like:</p>
<pre><code class="lang-nohighlight">parser/new 'name [
    suffixes: [...]
    identify?: func [...] [...]
    rules: [rule-1 [...] [...]]
    encode: func [...] [...]
    decode: func [...] [...]
]
</code></pre>
<p>Although it's not certain that a codec may have it's own set of rules (e.g. 'markup can reuse 'html rules)</p>
</li>
</ul>
<h1>Example</h1>
<p>This example is a little contrived, but demonstrates how to install and deploy a grammar, and how flow can both be embedded in the grammar or in functions built around the Parse Machine API:</p>
<pre><code class="lang-nohighlight">Rebol [
    Title: "Test Parser Module"
    Needs: [
        %parser.reb
    ]
]

make object! [
    parser/new 'abba [%.abba] [] [  ; the empty block is 'options
        is-a [
            #"a" (emit 'a-in-a)
            |
            #"b" (emit 'b-in-a-to-b use is-b)
            |
            #"c" (emit 'c?! stop)
            |
            skip (report ["Misplaced " to char! mark/1])
            |
            end (emit 'end-in-a use done)
        ]

        is-b [
            mark:
            #"a" (emit 'a-in-b-to-a use is-a) :mark
            |
            #"b" (emit 'b-in-b)
            |
            #"c" (emit 'c-in-b)
            |
            skip (report ["Misplaced " to char! mark/1])
            |
            end (emit 'end-in-b-to-a use is-a)
        ]

        done [
            end (emit 'done stop)
        ]
    ]

    system/codecs/abba/decode: func [
        blob [binary!]
        &lt;local&gt; state
    ][
        state: parser/init 'abba blob

        state/out: make block! 10
        state/errors: make block! 0

        state/emit: func [token] [
            append state/out token
        ]

        state/report: func [token] [
            append state/errors token
        ]

        parser/start

        case [
            not state/is-done [
                fail "Blob did not meet strict ABBA requirements"
            ]

            not empty? state/errors [
                probe state/errors
                fail "Multiple ABBA errors"
            ]

            &lt;else&gt; [
                state/out
            ]
        ]
    ]
]

probe equal? decode 'abba to binary! "aba"
[a-in-a b-in-a-to-b a-in-b-to-a a-in-a end-in-a done]

probe equal? decode 'abba to binary! "bcab"
[b-in-a-to-b c-in-b a-in-b-to-a a-in-a b-in-a-to-b end-in-b-to-a end-in-a done]

probe error? trap [decode 'abba to binary! "abcd"]
</code></pre>
          <p><a href="https://forum.rebol.info/t/updated-parse-machine/1475/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/updated-parse-machine/1475/1</link>
        <pubDate>Mon, 25 Jan 2021 17:23:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1475-1</guid>
        <source url="https://forum.rebol.info/t/updated-parse-machine/1475.rss">Updated Parse Machine</source>
      </item>
  </channel>
</rss>
