<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Literal Matching with the @ Types In UPARSE</title>
    <link>https://forum.rebol.info/t/literal-matching-with-the-types-in-uparse/1643</link>
    <description>I mentioned that the @ types were slated for use for literal matching.  The most frequent example I have given is:

    &gt;&gt; block: [some &quot;a&quot;]

    &gt;&gt; uparse [[some &quot;a&quot;] [some &quot;a&quot;]] [some @block]
    == [some &quot;a&quot;]  ; success gives result of last matching rule

Works with all types:

    &gt;&gt; num: 1

    &gt;&gt; uparse [1 1 1] [some @num]
    == 1

I didn&#39;t mention things like @(gr o up) but those work too:

    &gt;&gt; uparse [1 1 1] [some @(3 - 2)]
    == 1

**I realized I actually do not know how to write the above two cases in Red or Rebol2.**  You can&#39;t use the number as a plain variable in Red, since it acts as a repeat rule *(UPARSE prohibits that, since it&#39;s a rule that takes an argument, you must use REPEAT for such behavior)*

    red&gt;&gt; num: 1

    red&gt;&gt; parse [1 1 1] [some num]
    *** Script Error: PARSE - invalid rule or usage of rule: 1

Also in Red, I&#39;m not clear on why the following isn&#39;t an error, since the GROUP! product is just discarded:

    red&gt;&gt; parse [1 1 1] [some (3 - 2)]
    == false

This is something that would work in R3-Alpha, but doesn&#39;t in Red or Rebol2:

    red&gt;&gt; parse [1 1 1] [some quote (3 - 2)]
    == false

**Your guess is as good as mine.**  Whatever the answer in their world is, it&#39;s not obvious.  But I think the @ types give a clean answer in UPARSE.

## But What About @[bl o ck] ?

We might say that it means match a block literally:

    &gt;&gt; uparse [[some &quot;a&quot;] [some &quot;a&quot;]] [some @[some &quot;a&quot;]]
    == [some &quot;a&quot;]

This seemed a bit wasteful, since we already have a way to match blocks literally by quoting them:

    &gt;&gt; uparse [[some &quot;a&quot;] [some &quot;a&quot;]] [some &#39;[some &quot;a&quot;]]
    == [some &quot;a&quot;]

But UPARSE has changed the game for why @[...] and [...] can mean different things...because *block rules synthesize values*.  And who&#39;s to say you might not want to match a rule and use its product as the literal thing to match against?

    &gt;&gt; uparse [1 1 1 2] [@[some &#39;10, (10 + 10) | some &#39;1 (1 + 1)]]
    == 2

In other words your rule can match *and* provide an answer for the thing to match next.  We have zero experience with how often that might be useful, but maybe it is?  :man_shrugging:

## Lone @ For Quoting Next Item Literally

I&#39;ve defined **@** to synthesize the value after it:

    &gt;&gt; uparse &quot;a&quot; [collect [keep @ keep, keep &lt;any&gt;]]
    == [keep &quot;a&quot;]

So it&#39;s acting like this:

    &gt;&gt; uparse &quot;a&quot; [collect [keep (&#39;keep), keep &lt;any&gt;]]
    == [keep &quot;a&quot;]

This can be helpful when you&#39;re trying to build a rule with COMPOSE and the contention over GROUP! and trying to nest inside of it becomes a bummer.

As an example, let&#39;s say you&#39;re trying to build a KEEP parse rule inside a parse rule *(which I am actually at this moment trying to do in the whitespace interpreter project)*:

    name: &quot;Binky&quot;
    uparse ... [... collect [
         keep (compose [keep (to word! name)])
    ] ...]

Okay so that gives you **[keep Binky]**.  Not what you wanted since it will give an error that Binky is not defined.  You can quote it...

    keep (compose [keep &#39;(to word! name)])

Now you&#39;ve got **[keep &#39;Binky]**.  But you&#39;re not trying to match Binky in the input, you&#39;re trying to synthesize it out of thin air.  Imagine we need it in a GROUP!... let&#39;s just go ahead and use the wacky engroup operator to do that:

    keep (compose [keep (engroup quote to word! name)])

So we got our **[keep (&#39;Binky)]**... but that was annoying.  :cloud_with_rain:

Since @ can literally synthesize a value without matching in parse, we can make something less head-scratchy:

    keep (compose [keep @ (to word! name)])

And that gives us **[keep @ Binky]** which is much nicer.  The key to seeing why this breaks us out of the problem is that it lets us get at literal values without a GROUP!, which means we aren&#39;t trying to COMPOSE inside of COMPOSE groups.</description>
    
    <lastBuildDate>Wed, 26 Jul 2023 16:16:53 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/literal-matching-with-the-types-in-uparse/1643.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Literal Matching with the @ Types In UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-post-not-found" data-username="hostilefork" data-post="2" data-topic="1643">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The key to seeing why this breaks us out of the problem is that it lets us get at literal values without a GROUP!, which means we aren't trying to COMPOSE inside of COMPOSE groups.</p>
</blockquote>
</aside>
<p>There's a lightly unsettling disconnect in this--which I've kind of learned to live with--but I'll mention it.</p>
<p>Defined this way, the @ operator itself has a parity.  In the normal evaluator:</p>
<pre><code>&gt;&gt; var: @ x
== x

&gt;&gt; var
== x
</code></pre>
<p>And in UPARSE:</p>
<pre><code>&gt;&gt; uparse "" [var: @ x]
== x

&gt;&gt; var
== x
</code></pre>
<p>All's good so far... this is the Gordian-knot slicer I talked about.  Synthesizing values out of thin air without a GROUP!, so it plays nicely with COMPOSE.</p>
<p>But the parity only exists for the standalone @.  It breaks down after that.  In the normal evaluator:</p>
<pre><code>&gt;&gt; var: @('x)
== @('x)

&gt;&gt; uparse [x] [var: @('x)]
== x
</code></pre>
<p>While we accept that UPARSE and regular code act differently, I'm a bit uncomfortable that @ would act the same but @(...) wouldn't.  Just something to wonder about.</p>
          <p><a href="https://forum.rebol.info/t/literal-matching-with-the-types-in-uparse/1643/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/literal-matching-with-the-types-in-uparse/1643/3</link>
        <pubDate>Sun, 15 Aug 2021 02:05:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1643-3</guid>
        <source url="https://forum.rebol.info/t/literal-matching-with-the-types-in-uparse/1643.rss">Literal Matching with the @ Types In UPARSE</source>
      </item>
      <item>
        <title>Literal Matching with the @ Types In UPARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I mentioned that the @ types were slated for use for literal matching.  The most frequent example I have given is:</p>
<pre><code>&gt;&gt; block: [some "a"]

&gt;&gt; uparse [[some "a"] [some "a"]] [some @block]
== [some "a"]  ; success gives result of last matching rule
</code></pre>
<p>Works with all types:</p>
<pre><code>&gt;&gt; num: 1

&gt;&gt; uparse [1 1 1] [some @num]
== 1
</code></pre>
<p>I didn't mention things like @(gr o up) but those work too:</p>
<pre><code>&gt;&gt; uparse [1 1 1] [some @(3 - 2)]
== 1
</code></pre>
<p><strong>I realized I actually do not know how to write the above two cases in Red or Rebol2.</strong>  You can't use the number as a plain variable in Red, since it acts as a repeat rule <em>(UPARSE prohibits that, since it's a rule that takes an argument, you must use REPEAT for such behavior)</em></p>
<pre><code>red&gt;&gt; num: 1

red&gt;&gt; parse [1 1 1] [some num]
*** Script Error: PARSE - invalid rule or usage of rule: 1
</code></pre>
<p>Also in Red, I'm not clear on why the following isn't an error, since the GROUP! product is just discarded:</p>
<pre><code>red&gt;&gt; parse [1 1 1] [some (3 - 2)]
== false
</code></pre>
<p>This is something that would work in R3-Alpha, but doesn't in Red or Rebol2:</p>
<pre><code>red&gt;&gt; parse [1 1 1] [some quote (3 - 2)]
== false
</code></pre>
<p><strong>Your guess is as good as mine.</strong>  Whatever the answer in their world is, it's not obvious.  But I think the @ types give a clean answer in UPARSE.</p>
<h2>
<a name="but-what-about-bl-o-ck-1" class="anchor" href="https://forum.rebol.info#but-what-about-bl-o-ck-1"></a>But What About @[bl o ck] ?</h2>
<p>We might say that it means match a block literally:</p>
<pre><code>&gt;&gt; uparse [[some "a"] [some "a"]] [some @[some "a"]]
== [some "a"]
</code></pre>
<p>This seemed a bit wasteful, since we already have a way to match blocks literally by quoting them:</p>
<pre><code>&gt;&gt; uparse [[some "a"] [some "a"]] [some '[some "a"]]
== [some "a"]
</code></pre>
<p>But UPARSE has changed the game for why @[...] and [...] can mean different things...because <em>block rules synthesize values</em>.  And who's to say you might not want to match a rule and use its product as the literal thing to match against?</p>
<pre><code>&gt;&gt; uparse [1 1 1 2] [@[some '10, (10 + 10) | some '1 (1 + 1)]]
== 2
</code></pre>
<p>In other words your rule can match <em>and</em> provide an answer for the thing to match next.  We have zero experience with how often that might be useful, but maybe it is?  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="lone-for-quoting-next-item-literally-2" class="anchor" href="https://forum.rebol.info#lone-for-quoting-next-item-literally-2"></a>Lone @ For Quoting Next Item Literally</h2>
<p>I've defined <strong>@</strong> to synthesize the value after it:</p>
<pre><code>&gt;&gt; uparse "a" [collect [keep @ keep, keep &lt;any&gt;]]
== [keep "a"]
</code></pre>
<p>So it's acting like this:</p>
<pre><code>&gt;&gt; uparse "a" [collect [keep ('keep), keep &lt;any&gt;]]
== [keep "a"]
</code></pre>
<p>This can be helpful when you're trying to build a rule with COMPOSE and the contention over GROUP! and trying to nest inside of it becomes a bummer.</p>
<p>As an example, let's say you're trying to build a KEEP parse rule inside a parse rule <em>(which I am actually at this moment trying to do in the whitespace interpreter project)</em>:</p>
<pre><code>name: "Binky"
uparse ... [... collect [
     keep (compose [keep (to word! name)])
] ...]
</code></pre>
<p>Okay so that gives you <strong>[keep Binky]</strong>.  Not what you wanted since it will give an error that Binky is not defined.  You can quote it...</p>
<pre><code>keep (compose [keep '(to word! name)])
</code></pre>
<p>Now you've got <strong>[keep 'Binky]</strong>.  But you're not trying to match Binky in the input, you're trying to synthesize it out of thin air.  Imagine we need it in a GROUP!... let's just go ahead and use the wacky engroup operator to do that:</p>
<pre><code>keep (compose [keep (engroup quote to word! name)])
</code></pre>
<p>So we got our <strong>[keep ('Binky)]</strong>... but that was annoying.  <img src="https://forum.rebol.info/images/emoji/twitter/cloud_with_rain.png?v=12" title=":cloud_with_rain:" class="emoji" alt=":cloud_with_rain:" loading="lazy" width="20" height="20"></p>
<p>Since @ can literally synthesize a value without matching in parse, we can make something less head-scratchy:</p>
<pre><code>keep (compose [keep @ (to word! name)])
</code></pre>
<p>And that gives us <strong>[keep @ Binky]</strong> which is much nicer.  The key to seeing why this breaks us out of the problem is that it lets us get at literal values without a GROUP!, which means we aren't trying to COMPOSE inside of COMPOSE groups.</p>
          <p><a href="https://forum.rebol.info/t/literal-matching-with-the-types-in-uparse/1643/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/literal-matching-with-the-types-in-uparse/1643/1</link>
        <pubDate>Mon, 02 Aug 2021 18:58:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1643-1</guid>
        <source url="https://forum.rebol.info/t/literal-matching-with-the-types-in-uparse/1643.rss">Literal Matching with the @ Types In UPARSE</source>
      </item>
  </channel>
</rss>
