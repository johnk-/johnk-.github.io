<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why Doesn&#39;t `(third [1 2])` Trigger A Range Check Error?</title>
    <link>https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825</link>
    <description>Quick question for clarity. I assume that

    compose [ 1 (1 / 0) 3 ]
would be a math error. Why is

    compose [ 1 (third [ 1 2 ]) 3 ]
not some kind of a range check error?</description>
    
    <lastBuildDate>Tue, 24 Oct 2023 16:10:28 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why Doesn&#39;t `(third [1 2])` Trigger A Range Check Error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1825">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'll give it a shot and see what the effects are.</p>
</blockquote>
</aside>
<p>So I rather quickly ran into the fact that PICK is shared code with what you get when you are using a tuple.  So <strong>pick block 3</strong> acts like <strong>block.3</strong>, and <strong>pick obj 'field</strong> acts like <strong>obj.field</strong>, etc.</p>
<p>But there's an important difference: <strong>obj.field</strong> can run a function.  And if you write <strong>try obj.field</strong> the expectation is that your TRY is processing the result of that function...not errors arising from the field selection itself.  :-/</p>
<p>A thought that crossed my mind was that perhaps <strong>/obj.field</strong> could be a notation for "field presence is optional" and give back null if it's not there, and <strong>/block.3</strong> could do the same thing.  I'd often thought that refinements were wasted as being inert, and since they exist in other places meaning "optionality" then something like this could be an application.</p>
<p>But <a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834">new APPLY uses inert refinements to good effect</a>, so I'm reluctant to pursue something like that.</p>
<p><strong>Long Story Short: There's no real reason why <code>(pick block 3)</code> and <code>(block.3)</code> can't have different error modes, but <code>(try block.3)</code> can't defuse a definitional error for the pick without generating a disconnect from <code>(try object.funcname)</code></strong>.</p>
<p>For the moment, picking things that aren't there gives null on blocks, and errors on objects.  It's a bit misshapen but some code would be more laborious to write if things like <code>block.3</code> would error, forcing you to use (try pick block 3).  And you really would have to put it in parentheses in many cases, because expressions like (block.3 = 'foo) would require ((try pick block 3) = 'foo)</p>
<p>Maybe it should be laborious?  Anyway, food for thought.</p>
          <p><a href="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825/4</link>
        <pubDate>Tue, 24 Oct 2023 16:10:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1825-4</guid>
        <source url="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825.rss">Why Doesn&#39;t `(third [1 2])` Trigger A Range Check Error?</source>
      </item>
      <item>
        <title>Why Doesn&#39;t `(third [1 2])` Trigger A Range Check Error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1825">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So I guess I'll just say that experience has borne out that soft failure is a more convenient for functions like THIRD than raising an error. If anyone finds a case where they don't think so, I'd be interested to see it.</p>
</blockquote>
</aside>
<p>Nowadays there's an option on the table for raising <a href="https://forum.rebol.info/t/fail-vs-return-raise-the-new-age-of-definitional-failures/1852">definitional errors</a>, which could easily be turned into nulls with <strong>try third (...)</strong></p>
<pre><code>&gt;&gt; third [a b]
** Error: Cannot pick 3 of BLOCK! (or somesuch)

&gt;&gt; try third [a b]
== ~null~  ; isotope
</code></pre>
<p><sub><em>(I've mentioned that this is different from the limited design of Rebol's historical errors, e.g. if you said <strong>attempt [third [a b]]</strong> in an R3-Alpha or Red that errored, it would give null back...but so would <strong>attempt [thirrd [a b]]</strong> because the lack of definitional-ism means it couldn't discern errors arising from a direct call from typos or other downstream errors.)</em></sub></p>
<p>For cases where you would have been trusting a THIRD that returns NULL to trigger downstream errors, this gives better error locality.  e.g. <strong>append [a b c] third [d e]</strong> would blame the THIRD, not the append.</p>
<p>And for cases where you might not be able to trust that NULL wouldn't be interpreted as an error downstream, it would be more robust.  Also you'd give readers a clue at the callsite when you actually were intending that the operation might fail by the presence of the TRY.</p>
<p>This comes down down to the behavior of PICK (since FIRST is a specialization of PICK).  I was just thinking about that with respect to objects:</p>
<pre><code>&gt;&gt; obj: make object! [x: 10]

&gt;&gt; pick obj 'x
== 10

&gt;&gt; pick obj 'y
** Error: y is not a field of object

&gt;&gt; try pick obj 'y
== ~null~
</code></pre>
<p>If we raised a definitional error out of pick in this case, then you could <strong>try pick</strong> and get null.</p>
<p>When you think about PICK in general beyond just the block case, it does seem like more uniformly giving an error which can be "softened" via TRY would be a good idea.  I'll give it a shot and see what the effects are.</p>
          <p><a href="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825/3</link>
        <pubDate>Sat, 21 Oct 2023 14:58:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1825-3</guid>
        <source url="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825.rss">Why Doesn&#39;t `(third [1 2])` Trigger A Range Check Error?</source>
      </item>
      <item>
        <title>Why Doesn&#39;t `(third [1 2])` Trigger A Range Check Error?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="johnk" data-post="1" data-topic="1825">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/johnk/40/229_2.png" class="avatar"> johnk:</div>
<blockquote>
<p>compose [1 (third [1 2]) 3]</p>
</blockquote>
</aside>
<p>Systemically, we consider NULL to be a "soft" form of failure.  It serves a signaling role that's a little like what NONE! tried to do in historical Rebol, but since it's not an ANY-VALUE! more functions treat it as an error:</p>
<pre><code>&gt;&gt; third [1 2]
== ~null~  ; isotope

&gt;&gt; append [a b c] third [1 2]
** Script Error: append requires value argument to not be null

&gt;&gt; compose [1 (third [1 2]) 3]
** Script Error: Cannot use NULL in COMPOSE slots
</code></pre>
<p>The theory is that places which require an ANY-VALUE! will error down the line, and that having a lot of constructs that make it easier to react to the "soft failure" is a better tradeoff.</p>
<p>One of those constructs is MAYBE, which converts nulls to void, allowing a seamless opt-out of things like APPEND or COMPOSE:</p>
<pre><code>&gt;&gt; append [a b c] maybe third [1 2]
== [a b c]

&gt;&gt; compose [1 (maybe third [1 2]) 3]
== [1 3]
</code></pre>
<p>So I guess I'll just say that experience has borne out that soft failure is a more convenient for functions like THIRD than raising an error.  If anyone finds a case where they don't think so, I'd be interested to see it.</p>
          <p><a href="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825/2</link>
        <pubDate>Mon, 04 Jun 2018 12:01:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1825-2</guid>
        <source url="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825.rss">Why Doesn&#39;t `(third [1 2])` Trigger A Range Check Error?</source>
      </item>
      <item>
        <title>Why Doesn&#39;t `(third [1 2])` Trigger A Range Check Error?</title>
        <dc:creator><![CDATA[johnk]]></dc:creator>
        <description><![CDATA[
            <p>Quick question for clarity. I assume that</p>
<pre><code>compose [ 1 (1 / 0) 3 ]
</code></pre>
<p>would be a math error. Why is</p>
<pre><code>compose [ 1 (third [ 1 2 ]) 3 ]
</code></pre>
<p>not some kind of a range check error?</p>
          <p><a href="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825/1</link>
        <pubDate>Mon, 04 Jun 2018 04:00:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1825-1</guid>
        <source url="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825.rss">Why Doesn&#39;t `(third [1 2])` Trigger A Range Check Error?</source>
      </item>
  </channel>
</rss>
