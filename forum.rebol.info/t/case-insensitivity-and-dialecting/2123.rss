<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Case-Insensitivity And Dialecting</title>
    <link>https://forum.rebol.info/t/case-insensitivity-and-dialecting/2123</link>
    <description>Today&#39;s Ren-C uses case-sensitive binding.  The topic has been discussed a lot:

  https://forum.rebol.info/t/case-insensitivity-vs-case-preservation-cant-have-both/1439

As a discipline, we still are trying to keep the language lowercase, in the standard library at least.

But one thing that hasn&#39;t been discussed much is how case could be used creatively in dialects, when you know the case doesn&#39;t matter.  I think that in certain domains, use of case in dialects could be an interesting tool.

## Using Casing To Imply Uppercase, Lowercase, As-Is Case

I&#39;ve written a little about how the [CScape interpolation tool](https://forum.rebol.info/t/usefulness-of-string-interpolation/2114) does casing.  That&#39;s strings and not ordinary code.

The case logic would work in ordinary code something like this:

    &gt;&gt; strings: [&quot;aBc&quot; &quot;dEf&quot; &quot;gHi]

    &gt;&gt; cased-print [&quot;For instance:&quot; STRINGS.1 strings.2 Strings.3]
    For instance: ABC def gHi
 
It might seem silly, but in CScape it turns out to be pretty useful to do that.

## Non-Case-Related Example: &quot;Hardening&quot; Bindings

We have an issue now that sometimes when you are composing material you want bindings to &quot;stick&quot;.  Here we want LET and PASSTHRU to be bound to the same environment as the block given to the COMPOSE (which propagates to the GROUP!s, and then to the blocks evaluated in the groups).  But we want RETURN to be unbound, and pick up its binding from the site where it is composed:

     compose [
         (in [] &#39;let) (name): (in [] &#39;passthru) :return
     ]

There could be some dialect options for this... a special signal, maybe something you pass:

    compose/harden [
        &lt;hard&gt; let (name): &lt;hard&gt; passthru :return
    ] &lt;hard&gt;

    compose/harden [
        %h let (name): %h passthru :return
    ] %h

    compose/harden [
        $ let (name): $ passthru :return
    ] $

Since you have groups available, you could get the literal of the thing you&#39;re hardening with, e.g. with `(&lt;hard&gt;)` or `(%h)` or `($)`

And of course, you could have an operation that reverses this...so that things were hardened by default but you escaped to leave them unbound.

But... a weirder idea... what if you used something like the case?

     weird-compose [
         LET (unbind name): PASSTHRU :return
     ]

Important to remember is that symbols don&#39;t have case.  So you can&#39;t use the trick for everything.

But I present this in juxtaposition to using even the most minimal signal (like $) just to show how much the comprehensibility can benefit.</description>
    
    <lastBuildDate>Wed, 17 Jan 2024 23:14:53 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/case-insensitivity-and-dialecting/2123.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Case-Insensitivity And Dialecting</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Today's Ren-C uses case-sensitive binding.  The topic has been discussed a lot:</p>
<p><a href="https://forum.rebol.info/t/case-insensitivity-vs-case-preservation-cant-have-both/1439" class="inline-onebox">Case Insensitivity vs. Case-Preservation (can't have both?)</a></p>
<p>As a discipline, we still are trying to keep the language lowercase, in the standard library at least.</p>
<p>But one thing that hasn't been discussed much is how case could be used creatively in dialects, when you know the case doesn't matter.  I think that in certain domains, use of case in dialects could be an interesting tool.</p>
<h2>
<a name="using-casing-to-imply-uppercase-lowercase-as-is-case-1" class="anchor" href="https://forum.rebol.info#using-casing-to-imply-uppercase-lowercase-as-is-case-1"></a>Using Casing To Imply Uppercase, Lowercase, As-Is Case</h2>
<p>I've written a little about how the <a href="https://forum.rebol.info/t/usefulness-of-string-interpolation/2114">CScape interpolation tool</a> does casing.  That's strings and not ordinary code.</p>
<p>The case logic would work in ordinary code something like this:</p>
<pre><code>&gt;&gt; strings: ["aBc" "dEf" "gHi]

&gt;&gt; cased-print ["For instance:" STRINGS.1 strings.2 Strings.3]
For instance: ABC def gHi
</code></pre>
<p>It might seem silly, but in CScape it turns out to be pretty useful to do that.</p>
<h2>
<a name="non-case-related-example-hardening-bindings-2" class="anchor" href="https://forum.rebol.info#non-case-related-example-hardening-bindings-2"></a>Non-Case-Related Example: "Hardening" Bindings</h2>
<p>We have an issue now that sometimes when you are composing material you want bindings to "stick".  Here we want LET and PASSTHRU to be bound to the same environment as the block given to the COMPOSE (which propagates to the GROUP!s, and then to the blocks evaluated in the groups).  But we want RETURN to be unbound, and pick up its binding from the site where it is composed:</p>
<pre><code> compose [
     (in [] 'let) (name): (in [] 'passthru) :return
 ]
</code></pre>
<p>There could be some dialect options for this... a special signal, maybe something you pass:</p>
<pre><code>compose/harden [
    &lt;hard&gt; let (name): &lt;hard&gt; passthru :return
] &lt;hard&gt;

compose/harden [
    %h let (name): %h passthru :return
] %h

compose/harden [
    $ let (name): $ passthru :return
] $
</code></pre>
<p>Since you have groups available, you could get the literal of the thing you're hardening with, e.g. with <code>(&lt;hard&gt;)</code> or <code>(%h)</code> or <code>($)</code></p>
<p>And of course, you could have an operation that reverses this...so that things were hardened by default but you escaped to leave them unbound.</p>
<p>But... a weirder idea... what if you used something like the case?</p>
<pre><code> weird-compose [
     LET (unbind name): PASSTHRU :return
 ]
</code></pre>
<p>Important to remember is that symbols don't have case.  So you can't use the trick for everything.</p>
<p>But I present this in juxtaposition to using even the most minimal signal (like $) just to show how much the comprehensibility can benefit.</p>
          <p><a href="https://forum.rebol.info/t/case-insensitivity-and-dialecting/2123/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/case-insensitivity-and-dialecting/2123/1</link>
        <pubDate>Wed, 17 Jan 2024 22:33:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2123-1</guid>
        <source url="https://forum.rebol.info/t/case-insensitivity-and-dialecting/2123.rss">Case-Insensitivity And Dialecting</source>
      </item>
  </channel>
</rss>
