<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Old Idea Revisited: DATATYPE as... Antiform?</title>
    <link>https://forum.rebol.info/t/old-idea-revisited-datatype-as-antiform/2324</link>
    <description>I&#39;ve been suffering through an attempt to bring sanity to bear upon the MAKE and TO matrix.

While doing so, I noticed that there are a lot of MAKE instructions that do &quot;joining&quot;.

In R3-Alpha and Red:

    &gt;&gt; make binary! [1 2 #{DECAFBAD} 3 4]   
    == #{0102DECAFBAD0304}

Historical MAKE is so arbitrary in how it interprets its arguments that it made me feel that it would be better if JOIN allowed a datatype as its first argument...

JOIN typically makes a new series out of what you give it:

    &gt;&gt; bin: #{AABB}

    &gt;&gt; join bin #{CCDD}
    == #{AABBCCDD}  ; made new series, didn&#39;t impact BIN

    &gt;&gt; bin
    == #{AABB}

But if you could pass a datatype as the first argument, you could relieve MAKE of the behavior...and make it clearer in the source what&#39;s actually happening:

    &gt;&gt; join binary! [1 2 #{DECAFBAD} 3 4]
    == #{0102DECAFBAD0304}

Since that seemed nice, I started to map it out, and ran into a bit of a problem:

**If &quot;datatypes&quot; are an ANY-WORD! or ANY-LIST! or anything like that, how do you know you&#39;re not trying to JOIN with it?**

A WORD! should be able to join:

    &gt;&gt; join &#39;var 10
    == var10

 A BLOCK! should be able to join...

    &gt;&gt; join [a b] 10
    == [a b 10]

Okay, but when you say **join binary!** what is BINARY!?  Well right now, it&#39;s:

    &gt;&gt; binary!
    == &amp;[binary]

Well that looks like it&#39;s in-band for the kinds of things JOIN operates on:

    &gt;&gt; join &amp;[binary] 10
    == &amp;[binary 10]

## An Antiform Would Push DATATYPE? Out-Of-Band...

It&#39;s possible that we could come up with a new non-antiform for types.  But the lexical space is extremely saturated.

If we were just reaching for something on the basis of looks, antiform FENCE! is nice:

    &gt;&gt; binary!
    == ~{binary}~  ; anti

## This Has Come Up Before...

Historical Rebol let you use datatypes in FIND:

    rebol2&gt;&gt; find [a b c 10 20] integer! 
    == [10 20]

But then this conflates with when you actually literally have the INTEGER! datatype in the block.

    &gt;&gt; find compose [a (integer!) b c 10 20] integer!
    == [integer! b c 10 20]

So in the early days of antiforms, I proposed antiform datatypes as a solution... but at that time I was thinking that there&#39;d be non-antiform DATATYPE!, and it&#39;s just that when it was an antiform it would be a &quot;MATCHER&quot;.

The proposal I&#39;m thinking of now is different, in saying that DATATYPE? only exists as a (stable) antiform state.

There are tradeoffs, in that datatypes can&#39;t be put in blocks directly.  But the mechanics of working with quasiforms and antiforms via things like REIFY and DEGRADE are much smoother now.  And really, putting datatypes in blocks doesn&#39;t happen that often (I&#39;ve had to put splices in blocks but really never datatypes).

Being completely out of band with things you can find in a block has advantages.  JOIN isn&#39;t unique in reaping benefits from being able to say that datatypes aren&#39;t things. 

And it unifies datatypes with typecheckers being antiforms, because typecheckers are frame antiforms, e.g. actions:

    &gt;&gt; find [1 3 5 8 10] even?/
    ; first in pack of length 2
    == [8 10]

So I don&#39;t think it&#39;s a crazy idea.

I&#39;m hesitant to surrender FENCE! antiforms to the purpose so soon after their invention.  But there isn&#39;t anything undecorated left.

Not that &quot;no decorated antiforms&quot; is some unbreakable rule, it was a guideline.

Using &amp; would put it in the family of TYPE-XXX! and be cheaper than FENCE! if you made new instances:

    &gt;&gt; binary!
    == ~&amp;binary~  ; anti

A random bad idea would be to make them keywords, and just have DATATYPE? be smart enough to filter out ~null~ or ~void~ or ~okay~ or whatever else (the symbol could carry a flag)

    &gt;&gt; binary!
    == ~binary~  ; anti

    &gt;&gt; null
    == ~null~  ; anti

    &gt;&gt; datatype? binary!
    == ~okay~  ; anti

    &gt;&gt; datatype? null
    == ~null~  ; anti

I can pretty clearly say that&#39;s bad.

## Or, Pick Some Non-Antiform Notation

Status quo might look like:

    &gt;&gt; binary!
    == #[binary]

 Despite it looking sort of like a block, it wouldn&#39;t be.  But we&#39;re squandering some of our notational space no matter what.  The **`~&amp;type~`** is the discount route.

## Either Way, DATATYPE? Can&#39;t be ANY-WORD! or ANY-LIST!

It needs to be out of band one way or another.  I&#39;ll have to think about it.</description>
    
    <lastBuildDate>Sat, 16 Nov 2024 12:20:57 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/old-idea-revisited-datatype-as-antiform/2324.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Old Idea Revisited: DATATYPE as... Antiform?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>I like this idea. You know Iâ€™ve been somewhat unhappy about the way Ren-C currently represents datatypes; making them antiforms feels right to me, and could act as a good step towards a full solution.</p>
          <p><a href="https://forum.rebol.info/t/old-idea-revisited-datatype-as-antiform/2324/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/old-idea-revisited-datatype-as-antiform/2324/2</link>
        <pubDate>Sat, 16 Nov 2024 12:20:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2324-2</guid>
        <source url="https://forum.rebol.info/t/old-idea-revisited-datatype-as-antiform/2324.rss">Old Idea Revisited: DATATYPE as... Antiform?</source>
      </item>
      <item>
        <title>Old Idea Revisited: DATATYPE as... Antiform?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've been suffering through an attempt to bring sanity to bear upon the MAKE and TO matrix.</p>
<p>While doing so, I noticed that there are a lot of MAKE instructions that do "joining".</p>
<p>In R3-Alpha and Red:</p>
<pre><code>&gt;&gt; make binary! [1 2 #{DECAFBAD} 3 4]   
== #{0102DECAFBAD0304}
</code></pre>
<p>Historical MAKE is so arbitrary in how it interprets its arguments that it made me feel that it would be better if JOIN allowed a datatype as its first argument...</p>
<p>JOIN typically makes a new series out of what you give it:</p>
<pre><code>&gt;&gt; bin: #{AABB}

&gt;&gt; join bin #{CCDD}
== #{AABBCCDD}  ; made new series, didn't impact BIN

&gt;&gt; bin
== #{AABB}
</code></pre>
<p>But if you could pass a datatype as the first argument, you could relieve MAKE of the behavior...and make it clearer in the source what's actually happening:</p>
<pre><code>&gt;&gt; join binary! [1 2 #{DECAFBAD} 3 4]
== #{0102DECAFBAD0304}
</code></pre>
<p>Since that seemed nice, I started to map it out, and ran into a bit of a problem:</p>
<p><strong>If "datatypes" are an ANY-WORD! or ANY-LIST! or anything like that, how do you know you're not trying to JOIN with it?</strong></p>
<p>A WORD! should be able to join:</p>
<pre><code>&gt;&gt; join 'var 10
== var10
</code></pre>
<p>A BLOCK! should be able to join...</p>
<pre><code>&gt;&gt; join [a b] 10
== [a b 10]
</code></pre>
<p>Okay, but when you say <strong>join binary!</strong> what is BINARY!?  Well right now, it's:</p>
<pre><code>&gt;&gt; binary!
== &amp;[binary]
</code></pre>
<p>Well that looks like it's in-band for the kinds of things JOIN operates on:</p>
<pre><code>&gt;&gt; join &amp;[binary] 10
== &amp;[binary 10]
</code></pre>
<h2><a name="p-7875-an-antiform-would-push-datatype-out-of-band-1" class="anchor" href="https://forum.rebol.info#p-7875-an-antiform-would-push-datatype-out-of-band-1"></a>An Antiform Would Push DATATYPE? Out-Of-Band...</h2>
<p>It's possible that we could come up with a new non-antiform for types.  But the lexical space is extremely saturated.</p>
<p>If we were just reaching for something on the basis of looks, antiform FENCE! is nice:</p>
<pre><code>&gt;&gt; binary!
== ~{binary}~  ; anti
</code></pre>
<h2><a name="p-7875-this-has-come-up-before-2" class="anchor" href="https://forum.rebol.info#p-7875-this-has-come-up-before-2"></a>This Has Come Up Before...</h2>
<p>Historical Rebol let you use datatypes in FIND:</p>
<pre><code>rebol2&gt;&gt; find [a b c 10 20] integer! 
== [10 20]
</code></pre>
<p>But then this conflates with when you actually literally have the INTEGER! datatype in the block.</p>
<pre><code>&gt;&gt; find compose [a (integer!) b c 10 20] integer!
== [integer! b c 10 20]
</code></pre>
<p>So in the early days of antiforms, I proposed antiform datatypes as a solution... but at that time I was thinking that there'd be non-antiform DATATYPE!, and it's just that when it was an antiform it would be a "MATCHER".</p>
<p>The proposal I'm thinking of now is different, in saying that DATATYPE? only exists as a (stable) antiform state.</p>
<p>There are tradeoffs, in that datatypes can't be put in blocks directly.  But the mechanics of working with quasiforms and antiforms via things like REIFY and DEGRADE are much smoother now.  And really, putting datatypes in blocks doesn't happen that often (I've had to put splices in blocks but really never datatypes).</p>
<p>Being completely out of band with things you can find in a block has advantages.  JOIN isn't unique in reaping benefits from being able to say that datatypes aren't things.</p>
<p>And it unifies datatypes with typecheckers being antiforms, because typecheckers are frame antiforms, e.g. actions:</p>
<pre><code>&gt;&gt; find [1 3 5 8 10] even?/
; first in pack of length 2
== [8 10]
</code></pre>
<p>So I don't think it's a crazy idea.</p>
<p>I'm hesitant to surrender FENCE! antiforms to the purpose so soon after their invention.  But there isn't anything undecorated left.</p>
<p>Not that "no decorated antiforms" is some unbreakable rule, it was a guideline.</p>
<p>Using &amp; would put it in the family of TYPE-XXX! and be cheaper than FENCE! if you made new instances:</p>
<pre><code>&gt;&gt; binary!
== ~&amp;binary~  ; anti
</code></pre>
<p>A random bad idea would be to make them keywords, and just have DATATYPE? be smart enough to filter out ~null~ or ~void~ or ~okay~ or whatever else (the symbol could carry a flag)</p>
<pre><code>&gt;&gt; binary!
== ~binary~  ; anti

&gt;&gt; null
== ~null~  ; anti

&gt;&gt; datatype? binary!
== ~okay~  ; anti

&gt;&gt; datatype? null
== ~null~  ; anti
</code></pre>
<p>I can pretty clearly say that's bad.</p>
<h2><a name="p-7875-or-pick-some-non-antiform-notation-3" class="anchor" href="https://forum.rebol.info#p-7875-or-pick-some-non-antiform-notation-3"></a>Or, Pick Some Non-Antiform Notation</h2>
<p>Status quo might look like:</p>
<pre><code>&gt;&gt; binary!
== #[binary]
</code></pre>
<p>Despite it looking sort of like a block, it wouldn't be.  But we're squandering some of our notational space no matter what.  The <strong><code>~&amp;type~</code></strong> is the discount route.</p>
<h2><a name="p-7875-either-way-datatype-cant-be-any-word-or-any-list-4" class="anchor" href="https://forum.rebol.info#p-7875-either-way-datatype-cant-be-any-word-or-any-list-4"></a>Either Way, DATATYPE? Can't be ANY-WORD! or ANY-LIST!</h2>
<p>It needs to be out of band one way or another.  I'll have to think about it.</p>
          <p><a href="https://forum.rebol.info/t/old-idea-revisited-datatype-as-antiform/2324/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/old-idea-revisited-datatype-as-antiform/2324/1</link>
        <pubDate>Fri, 08 Nov 2024 17:05:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2324-1</guid>
        <source url="https://forum.rebol.info/t/old-idea-revisited-datatype-as-antiform/2324.rss">Old Idea Revisited: DATATYPE as... Antiform?</source>
      </item>
  </channel>
</rss>
