<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>WORD! Isotopes: Role of English in the Evaluator</title>
    <link>https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413</link>
    <description>I&#39;ve chiseled and shaped things to the point where there&#39;s hopefully only one frame-mutation that happens during frame execution, that only happens for one datatype, and only when the field isn&#39;t hidden from view.  I explain all that here:

[&quot;Default Values And MAKE FRAME!&quot;](https://forum.rebol.info/t/default-values-and-make-frame/1412/)

I mention something particular, which is that in the world of labeled BAD-WORD!s and isotopes, some of those labels are leaking into the mechanics of implementation.

Some of these are &quot;easy to change&quot;.  You can wrap a function that returns a ~word~ isotope to rename its output.  You could load in a new mezzanine and skinned natives and reuse the evaluator as-is.

But `~unset~` is getting baked in at a deeper level.  It&#39;s something used by binding, and MAKE FRAME!:

    &gt;&gt; f: make frame! :append
    == make frame! [
        series: ~unset~
        value: ~unset~
        part: ~unset~
        only: ~unset~
        dup: ~unset~
        line: ~unset~
    ]

**Should We Change The Unset Convention to Plain ~**

I like the idea of a core engine that *doesn&#39;t have any references to specific English words*.  It would be neat if you could load up a whole different DLL of natives and Mezzanines.  But this is showing a specific behavior tied to a particular spelling of a word.

But what if we moved to plain `~` for unset?  That would mean seeing this instead:

    &gt;&gt; f: make frame! :append
    == make frame! [
        series: ~
        value: ~
        part: ~
        only: ~
        dup: ~
        line: ~
    ]

You still get the idea (bunch of not defined things), it&#39;s just cleaner.  Then imagine this:

    &gt;&gt; f.value: ~baddie~
    == make frame! [
        series: ~
        value: ~baddie~
        part: ~
        only: #
        dup: ~
        line: ~
    ]

    &gt;&gt; apv: make action! f

    &gt;&gt; apv [1 2 3]
    == [1 2 3 ~baddie~]

It kind of pops doesn&#39;t it, *that only the unlabeled `~` were treated as unspecialized*?  All those `~unset~` feel like noise.

## The Distinguished State As The Unusual State

**So should ~ be known to mean &quot;unset&quot;?**

It may seem more obtuse.  But people typing **help ~** would be able to get an explanation of it.</description>
    
    <lastBuildDate>Mon, 23 May 2022 22:11:43 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>WORD! Isotopes: Role of English in the Evaluator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/merge-equal-fields-when-molding-printing-objects/1829">Merge Equal Fields when Molding/Printing Objects</a></p>
          <p><a href="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/10</link>
        <pubDate>Tue, 24 May 2022 01:09:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1413-10</guid>
        <source url="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413.rss">WORD! Isotopes: Role of English in the Evaluator</source>
      </item>
      <item>
        <title>WORD! Isotopes: Role of English in the Evaluator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It turns out I use <strong><code>(var: ~)</code></strong> <em>all the time</em>.  Being able to wipe out a variable's contents with a single character is super handy.</p>
<p>So I don't find being able to redefine <strong>~</strong> as some generic operator all that compelling anymore--any more than I think being able to define apostrophe as a generic operator is a good idea.</p>
<p>But another reason to promote <strong>~</strong> to being <em>the</em> content state for undefined variables is something else that's been nagging me...regarding the tests UNSET? and SET?.</p>
<h2>Consider by Analogy the NULL? Function...</h2>
<p>NULL? tests if you have a null isotope.</p>
<pre><code>&gt;&gt; null
== ~null~  ; isotope

&gt;&gt; null? null
== ~true~  ; isotope
</code></pre>
<h2>But UNSET? Would Break The Pattern...</h2>
<p>Let's imagine that we used ~unset~ isotopes for the unset state of a variable, instead of just the isotopic state of void (~ isotopes).</p>
<p>It's would be a lot less useful to test for an UNSET? isotope directly than it is to test if a variable contains an ~unset~ isotope.  In the current paradigm, it's nearly never that expressions generate ~unset~ isotopes.  <em>You basically are always testing variables for unsetness.</em></p>
<p>So if UNSET? followed the pattern of testing for the isotope directly, you'd have to write:</p>
<pre><code>&gt;&gt; var
** Error: Variable is unset

&gt;&gt; get/any 'var
== ~unset~  ; isotope (in our theoretical world, instead of ~ isotope)

&gt;&gt; unset? get/any 'var
== ~true~  ; isotope
</code></pre>
<p>It's much preferable to be able to just say:</p>
<pre><code>unset? var
</code></pre>
<p>So that's what UNSET? does; it takes a WORD!/TUPLE! and gets it...then tests it.  But I think it's quite reasonable to think if you see ~unset~ isotopes floating about, that the name implies it would be applicable to directly testing that isotope.</p>
<pre><code>&gt;&gt; null? ~null~
== ~true~  ; isotope

&gt;&gt; unset? ~unset~
** Error: "Weird," thinks the user, "why didn't that work?"
</code></pre>
<p><strong>With <code>~</code> isotopes to represent "unsetness", the mistake is not be as easy to make.</strong></p>
<p>The user would see that a variable contained an <strong><code>~</code></strong> isotope, and it would disconnect from the pattern of XXX? looks for a thing named XXX?.  They might not know <em>what</em> a ~ isotope is called, but they won't assume they know it's tested with a function called UNSET?</p>
<h2>Beyond That, I've Shown That It Reduces Clutter...</h2>
<p>Hard to deny that it's easier to see the signal in the noise:</p>
<pre><code>&gt;&gt; get 'frame
== make frame! [
    series: [a b c]
    value: ~something~
    part: ~
    only: #
    dup: ~
    line: ~
]
</code></pre>
<p>Compare that to the jumble you get with the more verbose form:</p>
<pre><code>&gt;&gt; get 'frame
== make frame! [
    series: [a b c]
    value: ~something~
    part: ~unset~
    dup: 3
    line: ~unset~
]
</code></pre>
<p>And there's something particularly pleasing about seeing it all clean and fresh on a make...</p>
<pre><code>&gt;&gt; make frame! :append
== make frame! [
    series: ~
    value: ~
    part: ~
    dup: ~
    line: ~
]
</code></pre>
<h2>Plus, QUASI! WORD!s are Now Truthy And Friendly</h2>
<p>There's no reason anymore to disallow them in PATH!s and TUPLE!s.</p>
<pre><code>&gt;&gt; item: first [~/home/Projects/ren-c/README.md]
== ~

&gt;&gt; if item [print "It's truthy now..."]
It's truthy now...
</code></pre>
<p>There's not any real reason to disallow quasi words in paths and tuples.</p>
<pre><code>&gt;&gt; first [~why~/not/~this?~]
== ~why~
</code></pre>
<p>I can actually already think of applications for that.</p>
          <p><a href="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/9</link>
        <pubDate>Mon, 23 May 2022 18:07:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1413-9</guid>
        <source url="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413.rss">WORD! Isotopes: Role of English in the Evaluator</source>
      </item>
      <item>
        <title>WORD! Isotopes: Role of English in the Evaluator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1413">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I discuss something particular, which is that in the world of <em><strike>named voids</strike></em> isotopic WORD!s, some of those WORD!s are leaking into the mechanics of implementation. Some of these are "easy to change" (like the convention of returning <code>~void~</code>). You can wrap a function that returns void to rename its output. You could load in a new mezzanine and skinned natives and reuse the evaluator as-is.</p>
<p>But <code>~undefined~</code> is getting baked in at a deeper level. It's something used by binding, and MAKE FRAME!:</p>
</blockquote>
</aside>
<p>I'm afraid this has become the way it is.  Certain words... like <strong>~null~</strong> and <strong>~true~</strong> and <strong>~false~</strong> are getting baked in with specific meanings and behaviors.</p>
<p>While making <em>non-English-centric dialects</em> might be fair game, and creating a customized console experience that translates some of these ideas at a higher level... the mechanics are going to be stuck here until the language itself gets abstracted into something more graph-like where WORD!s are linked and mentioned by GUID in binary source files...and names are put on as renderings.</p>
<p>For the medium that this is, I think I've made peace with the WORD! isotopes getting special behaviors.  (But the non-isotope forms are all handled equivalently...except in as much that they are connected through evaluation to the behaviors when they take on their isotope form.)</p>
          <p><a href="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/7</link>
        <pubDate>Sun, 20 Jun 2021 03:16:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1413-7</guid>
        <source url="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413.rss">WORD! Isotopes: Role of English in the Evaluator</source>
      </item>
      <item>
        <title>WORD! Isotopes: Role of English in the Evaluator</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>English is a fact of life in programming, so I have no problem with some English in the evaluator.</p>
<p>~ is ok for me, too.</p>
<p>Just don't start with localised values in the evaluator it's more trouble than worth. (German Excel functions, anyone?)</p>
          <p><a href="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/5</link>
        <pubDate>Wed, 25 Nov 2020 09:02:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1413-5</guid>
        <source url="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413.rss">WORD! Isotopes: Role of English in the Evaluator</source>
      </item>
      <item>
        <title>WORD! Isotopes: Role of English in the Evaluator</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I'm ok with all of these shorter proposals. If there's a darned good reason to dial it all the way down to <code>~</code>, I can be easily persuaded.</p>
          <p><a href="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/4</link>
        <pubDate>Tue, 24 Nov 2020 23:51:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1413-4</guid>
        <source url="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413.rss">WORD! Isotopes: Role of English in the Evaluator</source>
      </item>
      <item>
        <title>WORD! Isotopes: Role of English in the Evaluator</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Note: This comment was made when ~unset~ was the longer ~undefined~.</p>
</blockquote>
<p>I think that <code>~undefined~</code> seems too long and <code>~</code> feels too minimal. What about whittling it down a bit to <code>~undef~</code>, <code>~def?~</code> or just <code>~?~</code>.</p>
          <p><a href="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/2</link>
        <pubDate>Tue, 24 Nov 2020 21:32:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1413-2</guid>
        <source url="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413.rss">WORD! Isotopes: Role of English in the Evaluator</source>
      </item>
      <item>
        <title>WORD! Isotopes: Role of English in the Evaluator</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've chiseled and shaped things to the point where there's hopefully only one frame-mutation that happens during frame execution, that only happens for one datatype, and only when the field isn't hidden from view.  I explain all that here:</p>
<p><a href="https://forum.rebol.info/t/default-values-and-make-frame/1412/">"Default Values And MAKE FRAME!"</a></p>
<p>I mention something particular, which is that in the world of labeled BAD-WORD!s and isotopes, some of those labels are leaking into the mechanics of implementation.</p>
<p>Some of these are "easy to change".  You can wrap a function that returns a ~word~ isotope to rename its output.  You could load in a new mezzanine and skinned natives and reuse the evaluator as-is.</p>
<p>But <code>~unset~</code> is getting baked in at a deeper level.  It's something used by binding, and MAKE FRAME!:</p>
<pre><code>&gt;&gt; f: make frame! :append
== make frame! [
    series: ~unset~
    value: ~unset~
    part: ~unset~
    only: ~unset~
    dup: ~unset~
    line: ~unset~
]
</code></pre>
<p><strong>Should We Change The Unset Convention to Plain ~</strong></p>
<p>I like the idea of a core engine that <em>doesn't have any references to specific English words</em>.  It would be neat if you could load up a whole different DLL of natives and Mezzanines.  But this is showing a specific behavior tied to a particular spelling of a word.</p>
<p>But what if we moved to plain <code>~</code> for unset?  That would mean seeing this instead:</p>
<pre><code>&gt;&gt; f: make frame! :append
== make frame! [
    series: ~
    value: ~
    part: ~
    only: ~
    dup: ~
    line: ~
]
</code></pre>
<p>You still get the idea (bunch of not defined things), it's just cleaner.  Then imagine this:</p>
<pre><code>&gt;&gt; f.value: ~baddie~
== make frame! [
    series: ~
    value: ~baddie~
    part: ~
    only: #
    dup: ~
    line: ~
]

&gt;&gt; apv: make action! f

&gt;&gt; apv [1 2 3]
== [1 2 3 ~baddie~]
</code></pre>
<p>It kind of pops doesn't it, <em>that only the unlabeled <code>~</code> were treated as unspecialized</em>?  All those <code>~unset~</code> feel like noise.</p>
<h2>The Distinguished State As The Unusual State</h2>
<p><strong>So should ~ be known to mean "unset"?</strong></p>
<p>It may seem more obtuse.  But people typing <strong>help ~</strong> would be able to get an explanation of it.</p>
          <p><a href="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413/1</link>
        <pubDate>Sun, 22 Nov 2020 13:52:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1413-1</guid>
        <source url="https://forum.rebol.info/t/word-isotopes-role-of-english-in-the-evaluator/1413.rss">WORD! Isotopes: Role of English in the Evaluator</source>
      </item>
  </channel>
</rss>
