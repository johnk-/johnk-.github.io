<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
    <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854</link>
    <description>&gt; Note: WASI =&gt; WebAssembly System Interface

![image|690x360, 30%](upload://5xpgmNShmHOnF7AMwpjAGNfL3v3.png) 

We&#39;ve been running in a browser for a while.  And over time, as that host environment has gotten better...we&#39;ve been getting better, too.  (It can &lt;sub&gt;sometimes&lt;/sub&gt; pay to be an early adopter and co-evolve with a platform.)

After several long days of nuanced work, I&#39;ve been able to take another step...running in a WasmEdge VM!

Unlike the web version, this has the command-line processing built into it.  So you can pass `wasmedge` the %r3.wasm file, and say something like **`--do`** of the code you want to run:

    $ wasmedge r3.wasm --do \
          &quot;print [&#39;** uparse {Hello, Cloud} [thru space across to &lt;end&gt;] &#39;**]&quot;

Then you get your result:

    ** Cloud **

**[See for yourself, on the GitHub Workflow that builds it!!!!](https://github.com/metaeducation/ren-c/runs/7140995235?check_suite_focus=true#step:18:4)**

# &quot;So... er... so what?&quot; &lt;sub&gt;(someone might ask)&lt;/sub&gt;


... WH-

... WH- WHAT YOU DO MEAN, *&quot;SO WHAT?&quot;* ... YOU, you... *IGNORAMUS*!

:angry:
...

Oh, all right, well.  Fine.  Let me try and break down what this is... and what it might mean for Ren-C&#39;s future in the cloud space (and elsewhere).

---

# First Let&#39;s Talk About *&quot;The Dream That Isn&#39;t&quot;* &lt;sub&gt;(yet)&lt;/sub&gt;

...and that dream is &quot;SERVERLESS&quot;-ness.

*  Picture if you will, the idea that we take `%httpd.reb` and shoot it into the sun... :rocket: :sun_with_face: ...vowing to never try and write another web server in a Redbol again.

* INSTEAD we dial the clock back to how people responded to web requests in the 90&#39;s: we think of it that each request starts a whole new copy of %r3.exe, which does its work, and exits.

    * ...this really *is* how systems used to work, back when there were 5 people on the Internet.  (Modems were so slow that you couldn&#39;t get more than one request a week, anyway.)

    * But in the name of speed, webmastering became a mystical black art of figuring out how to force your PHP or Python or whatever to stay resident inside the Apache server and *not* exit.

    * The seeping complexity started to require watchdog processes to check to make sure your long-running process wasn&#39;t accruing memory across requests, or restarting it if it crashed.

    * Security was also being compromised, because bugs in your code could allow session data to seep between different requests...since the process was long-lived and kept memory open.

* THE UTOPIA WE ARE BEING SOLD is that IF we package our code as a blob-o-WebAssembly...

    * We will get all the benefits of running fresh every request...

    * ...but with a performance characteristic like if we&#39;d rigged up a way to stay running the whole time.

* THERE WILL STILL BE A WEBSERVER RUNNING (of course)

    * However: it will be *The One True Debugged WebServer* (compiled in something fully formal like Rust or Haskell, right?)...so it won&#39;t have the same security problems that your dirty Wasm blob would have if it tried to implement a long-running web server itself.

    * It will have lightning fast abilities to spin up and down the Wasm blobs, much faster than an OS shutdown and launch would ever be.

## I&#39;ve Now Made Us One Of Those Wasm Blobs!

Hence we can focus our efforts on the high level logic of how to answer a web request without worrying about the details of writing, running, or administrating a web server.

If you&#39;ve ever looked at some Platform as a Service (PaaS) like Heroku or AWS and seen a short list of languages supported, that&#39;s going to be a thing of the past.  Anyone who builds to WebAssembly can be hosted and just pay the price of their storage/CPU/network use. 

* Yesterday we were a black sheep of languages...with a shoddy, slow, and insecure webserver.

* Tomorrow... we&#39;ll still be a black sheep of languages.  But one that&#39;s on an even playing field for providing higher level logic for processing and serving data on the web.

## *&quot;Ah!  Now I See the What of the So What!&quot;*

:smiling_face_with_three_hearts:

It&#39;s a quite compelling vision statement, and a lot of people are evangelical (you can tell by how many times people say the term &quot;serverless&quot; at conferences these days).

I&#39;m definitely the sort of person this is an easy sell to. You should choose your battles when it comes to optimization, this is one of my favorite quotes:

&gt; *&quot;90% of a program&#39;s execution time is spent in only 10% of its code. The standard inference from this rule is that programmers should find that 10% of the code and optimize it ... But a second inference is just as important: programmers can deoptimize the other 90% of the code (in order to make it easier to use, maintain, etc.)*   -- [Richard Pattis](http://en.wikipedia.org/wiki/Richard_E._Pattis)

So focusing performance research on the spin-up and tear-down sounds 100% right.  Over the long run, the factors I mention probably mitigate any &quot;catastrophic slowdown&quot;.  Your higher level program logic is starting from a clean slate every time.  There&#39;s no memory fragmentation or leaks, and all those security benefits I mentioned.

## Not Just the Cloud, but *One Binary For All Desktops*

As WebAssembly has proven its mettle on the Web, people have asked why it couldn&#39;t be run from a terminal prompt.  All you&#39;d need would be a runtime host--simpler than a browser--that provided basic file, I/O, and network services.

If you could do that, you&#39;d be able to have one **`%r3.wasm`** file that you could download and use for Linux, Mac, Windows, on the cloud, and in your browser...

...in theory.  And that theory is almost practice.  ([I&#39;ve remarked on another thread about it](https://forum.rebol.info/t/wasmtime-and-wasi/1151/4?u=hostilefork) so take discussions of the non-cloud applications there.)

## Of Course, It&#39;s Not All-There-Yet

### What about those Wasm blob server providers?

They don&#39;t exist yet.

So if you&#39;re going to use the serverless methodology in the here and now, you&#39;re going to still be in the webmastering game.  Only now you&#39;re learning how to set up Docker instances and configure bleeding-edge Wasm runtimes.

### What about that &quot;One True Webserver?&quot;

Y&#39;know, the webserver you&#39;re going to throw out yours for.  The one that&#39;s bulletproof and supersonic and Utopian--the kind Jesus would have written--the one that&#39;s going save us all?

*It&#39;s NodeJS.*  :man_facepalming:   
&lt;sub&gt;at least for WasmEdge on AWS Lambda, for now&lt;/sub&gt;

So I hope you like setting up NodeJS in Docker.

### What about the &quot;Language Agnosticism&quot; in hosting?

The company behind WasmEdge talks a big game, and they have a platform for [Functions as a Service (FaaS)](https://www.secondstate.io/faas/).  But for various reasons this only works with Rust.

Kind of annoyingly, if you read the docs for [develop a WasmEdge app](https://wasmedge.org/book/en/dev.html) you will see it say:

&gt; For compiled languages (e.g., C and Rust), WasmEdge WebAssembly provides a safe, secure, isolated, and containerized runtime as opposed to Native Client (NaCl).

Then you will see it list examples for [Rust](https://wasmedge.org/book/en/dev/rust.html), [JavaScript](https://wasmedge.org/book/en/dev/js.html), [Go](https://wasmedge.org/book/en/dev/go.html), [Swift](https://wasmedge.org/book/en/dev/swift.html), [AssemblyScript](https://wasmedge.org/book/en/dev/as.html), [Kotlin](https://wasmedge.org/book/en/dev/kotlin.html), [Grain](https://wasmedge.org/book/en/dev/grain.html), [Python](https://wasmedge.org/book/en/dev/python.html)

*Noticeably missing is C.*  And that&#39;s the one we need.

Without C support for things like sockets, our Ren-C Wasm blob cannot make network requests.  We can do filesystem operations, but networking is just not there yet.

*(The missing C bits relative to the other languages isn&#39;t technically WasmEdge&#39;s fault...it&#39;s just that the libc implementation for Wasi doesn&#39;t have some things that the Rust standard library does.  I just wish they&#39;d explained the details of how they got the other languages to work built upon Rust...rather than leaving it as an exercise for the reader to delve into it all to figure out.)*

## But Stay Tuned...

This is a pretty major development, and things are moving fast.  I want @gchiu to keep the eyes on the prize here, and we see what we can do to make sure we&#39;ve got some demos rolled out in this space.  As we find ways to bring more features online, I&#39;ll let you know.</description>
    
    <lastBuildDate>Wed, 18 Oct 2023 02:05:33 +0000</lastBuildDate>
    <category>Web</category>
    <atom:link href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>4 posts were split to a new topic: <a href="https://forum.rebol.info/t/networking-calls-from-ren-c-wasi-build/2054">Networking Calls from Ren-C WASI Build?</a></p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/2</link>
        <pubDate>Wed, 18 Oct 2023 03:50:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-2</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="https://forum.rebol.info/t/building-c-gui-code-that-calls-ren-c-wasm-and-runs-in-browser/2053">Building C++ GUI Code that Calls Ren-C Wasm and Runs in Browser</a></p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/13</link>
        <pubDate>Wed, 18 Oct 2023 02:08:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-13</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="1854">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The danger here is that if they don't standardize something, WASI runtimes like WasmTime or WasmEdge or <a href="https://github.com/appcypher/awesome-wasm-runtimes">any of the others</a> might go their own way, and implement something ad-hoc.</p>
</blockquote>
</aside>
<p>Looking into it further, this has already happened with a fork of the WASI spec called "WASIX", that is only supported in the <a href="https://docs.wasmer.io/runtime/runners/wasix">Wasmer runtime</a>.</p>
<p><a href="https://wasix.org/">https://wasix.org/</a></p>
<p>I went through some hassles to get Ren-C built against it with the Posix terminal code enabled, and verified you can indeed react to single key presses and cursor around in the console.  But Wasmer <a href="https://github.com/wasix-org/wasix-libc/issues/20#issuecomment-1710255113">does not implement Wasm exceptions yet</a>, and their support for the <code>setjmp()</code>/<code>longjmp()</code> alternative is a step back to the pre-Stackless methods of Emscripten... and it appears to be buggy.  So you still wind up crashing any time there's an error raised.</p>
<p>Further, I discovered its support for Posix seems pretty far from being thorough enough to run libuv's Posix implementation on.  The effort seems skeletal enough that it won't be able to do that any time soon.</p>
<p>Also...sentiment on HackerNews seems to be that Wasmer is a black sheep in the community, as pushing for something that makes WASI blobs only execute in one runtime is against the mission.</p>
<p>Hence I was likely correct about WASI .wasm blobs being unlikely to be the delivery vehicle for desktop Ren-C consoles anytime soon.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/10</link>
        <pubDate>Tue, 17 Oct 2023 12:31:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-10</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="8" data-topic="1854">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In any case, it's still a pretty diverse set of scenarios with pros and cons for every choice. I think serverless routines is the near-term sweet spot for WASI (as opposed to overtaking the need for .EXEs on desktops).</p>
</blockquote>
</aside>
<p>In terms of how far away WASI blobs are from being a replacement for .EXEs on your desktop, I'll point out this thread about the lack of "termios" (things letting you move the cursor around the screen and draw, as well as accept and react to a keypress instantly without needing to wait until a line of input is entered with RETURN):</p>
<p><a href="https://github.com/WebAssembly/WASI/issues/161" class="inline-onebox">missing termios.h functionality · Issue #161 · WebAssembly/WASI · GitHub</a></p>
<p>They mention that some of the holdup is because of security concerns... they don't want to blindly parrot old APIs that were designed without an eye toward security.  Security and near-native speed are the two big focus points for what WASI workloads are worried about.</p>
<p>The danger here is that if they don't standardize something, WASI runtimes like WasmTime or WasmEdge or <a href="https://github.com/appcypher/awesome-wasm-runtimes">any of the others</a> might go their own way, and implement something ad-hoc.  Then you'd end up in a situation where depending on what runtime you were using you'd have to write different code for REPLs... which would just mirror the situation where Windows and UNIX don't have compatible interfaces, and that would motivate a higher-level package like ncurses.</p>
<p>Long story short: I don't imagine you'll want to use WASI blobs interactively for consoles until this sorts out, which won't be any sooner than several years from now.  That's going to be the domain of ReplPad and the platform-specific .EXEs for some time to come.</p>
<p><strong>But</strong> you could use a %r3.wasm plus %some-script.reb (or encap them together for r3-some-script.wasm) and passing it arguments to do data processing tasks that are able to run anywhere... cloud, browser, various desktops.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/9</link>
        <pubDate>Tue, 17 Oct 2023 04:03:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-9</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="OneArb" data-post="7" data-topic="1854">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/onearb/48/356_2.png" class="avatar"> OneArb:</div>
<blockquote>
<p>Could you please provide a Ren-C WASI stack update?</p>
</blockquote>
</aside>
<p>I hadn't really messed with it in the past year, but since you asked I went and bumped the WASI SDK version we build against from v16 to v20.  There was a little debugging I had to do to get it to work, but it's working.</p>
<aside class="quote no-group" data-username="OneArb" data-post="7" data-topic="1854">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/onearb/48/356_2.png" class="avatar"> OneArb:</div>
<blockquote>
<p>If I got everything right, the runtime can get permissions to access a local directory (using runtime command line parameters).</p>
</blockquote>
</aside>
<p>Yes (e.g. WasmEdge lets you map <strong><code>--dir guestdir:hostdir</code></strong> and through %guestdir/* you can access files in %hostdir/* (read-write or read-only).</p>
<p>But we now use libuv for filesystem and networking abstractions in the desktop build... and there's no WASI target for libuv.  (...and WASI's subset of Posix is insufficient to be able to use the libuv Posix target.)</p>
<p>Yet since they do offer some translation between simple C filesystem calls and the WASI layer, I did a little proof of concept by adding BASIC-READ and BASIC-WRITE functions, with this little test:</p>
<pre><code>wasmedge --dir x:. r3.wasm --do \
    "print {Begin}, basic-write %x/test.txt {Test}, print {End}"

wasmedge --dir x:. r3.wasm  --do \
    "either {Test} = as text! basic-read %x/test.txt [print {Yay}] [fail]"

r3 --do \
      "if {Test} = as text! read %test.txt [print {Verified}] else [fail]"
</code></pre>
<p><strong><a href="https://github.com/metaeducation/ren-c/actions/runs/6536811606/job/17749329640#step:20:25">And it works.</a></strong></p>
<p>WASI is generally meant to be run by a native Wasm runtime.  But the WASI-built blobs can be loaded into browsers if one wants to, there are various experiments.</p>
<p>Here is one such experiment: <strong><a href="https://runno.dev/wasi">https://runno.dev/wasi</a></strong></p>
<p>And here is a WASI blob I made that you can upload in there and it sort of works, when you turn echo on in the settings:</p>
<p><a href="http://hostilefork.com/media/shared/wasi/r3.wasm">http://hostilefork.com/media/shared/wasi/r3.wasm</a></p>
<p>But bear in mind that blob was built for WasmEdge, which supports neither Wasm exceptions nor setjmp()/longjmp() emulation.  So any error or typo will crash it.</p>
<p><em>(This should change soon, as <a href="https://github.com/WasmEdge/WasmEdge/pull/2459#pullrequestreview-1626437664">Wasm exceptions have just been pushed on a branch</a> this week in WasmEdge.)</em></p>
<p>If you write a file with BASIC-WRITE there, it will let you download it from the browser.  In terms of leveraging the browser's ability to grant access to files on your local system, that's something I haven't kept up with but my understanding is that <a href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_API">people have pushed to make it possible</a>.  That particular demo doesn't do that particular thing.</p>
<p>In any case, it's still a pretty diverse set of scenarios with pros and cons for every choice.  I think serverless routines is the near-term sweet spot for WASI (as opposed to overtaking the need for .EXEs on desktops).  And the richness and interoperability with the browser of the ReplPad is a lot more interesting than running a WASI blob in a dumb terminal emulated in a webpage.  But it's good to have options.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/8</link>
        <pubDate>Mon, 16 Oct 2023 17:25:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-8</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[OneArb]]></dc:creator>
        <description><![CDATA[
            <p>Could you please provide a Ren-C WASI stack update?</p>
<p>If I got everything right, the runtime can get permissions to access a local directory (using runtime command line parameters).</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/7</link>
        <pubDate>Sun, 15 Oct 2023 20:18:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-7</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Rebol has for many years been at the forefront of personal computing so it's good to see it head back that way even it is personal cloud computing.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/6</link>
        <pubDate>Tue, 05 Jul 2022 10:32:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-6</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Note: WASI =&gt; WebAssembly System Interface</p>
</blockquote>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069.png" data-download-href="https://forum.rebol.info/uploads/default/26d1a0133b87b8f3ac7008467a4d6b29d6c21069" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069_2_207x108.png" alt="image" data-base62-sha1="5xpgmNShmHOnF7AMwpjAGNfL3v3" width="207" height="108" srcset="https://forum.rebol.info/uploads/default/optimized/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069_2_207x108.png, https://forum.rebol.info/uploads/default/optimized/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069_2_310x162.png 1.5x, https://forum.rebol.info/uploads/default/optimized/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069_2_414x216.png 2x" data-dominant-color="7054BA"></a></div><p></p>
<p>We've been running in a browser for a while.  And over time, as that host environment has gotten better...we've been getting better, too.  (It can <sub>sometimes</sub> pay to be an early adopter and co-evolve with a platform.)</p>
<p>After several long days of nuanced work, I've been able to take another step...running in a WasmEdge VM!</p>
<p>Unlike the web version, this has the command-line processing built into it.  So you can pass <code>wasmedge</code> the %r3.wasm file, and say something like <strong><code>--do</code></strong> of the code you want to run:</p>
<pre><code>$ wasmedge r3.wasm --do \
      "print ['** uparse {Hello, Cloud} [thru space across to &lt;end&gt;] '**]"
</code></pre>
<p>Then you get your result:</p>
<pre><code>** Cloud **
</code></pre>
<p><strong><a href="https://github.com/metaeducation/ren-c/runs/7140995235?check_suite_focus=true#step:18:4">See for yourself, on the GitHub Workflow that builds it!!!!</a></strong></p>
<h1><a name="p-5964-so-er-so-what-subsomeone-might-asksub-1" class="anchor" href="https://forum.rebol.info#p-5964-so-er-so-what-subsomeone-might-asksub-1"></a>"So... er... so what?" <sub>(someone might ask)</sub></h1>
<p>... WH-</p>
<p>... WH- WHAT YOU DO MEAN, <em>"SO WHAT?"</em> ... YOU, you... <em>IGNORAMUS</em>!</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/angry.png?v=12" title=":angry:" class="emoji only-emoji" alt=":angry:" loading="lazy" width="20" height="20"><br>
...</p>
<p>Oh, all right, well.  Fine.  Let me try and break down what this is... and what it might mean for Ren-C's future in the cloud space (and elsewhere).</p>
<hr>
<h1><a name="p-5964-first-lets-talk-about-the-dream-that-isnt-subyetsub-2" class="anchor" href="https://forum.rebol.info#p-5964-first-lets-talk-about-the-dream-that-isnt-subyetsub-2"></a>First Let's Talk About <em>"The Dream That Isn't"</em> <sub>(yet)</sub></h1>
<p>...and that dream is "SERVERLESS"-ness.</p>
<ul>
<li>
<p>Picture if you will, the idea that we take <code>%httpd.reb</code> and shoot it into the sun... <img src="https://forum.rebol.info/images/emoji/twitter/rocket.png?v=12" title=":rocket:" class="emoji" alt=":rocket:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/sun_with_face.png?v=12" title=":sun_with_face:" class="emoji" alt=":sun_with_face:" loading="lazy" width="20" height="20"> ...vowing to never try and write another web server in a Redbol again.</p>
</li>
<li>
<p>INSTEAD we dial the clock back to how people responded to web requests in the 90's: we think of it that each request starts a whole new copy of %r3.exe, which does its work, and exits.</p>
<ul>
<li>
<p>...this really <em>is</em> how systems used to work, back when there were 5 people on the Internet.  (Modems were so slow that you couldn't get more than one request a week, anyway.)</p>
</li>
<li>
<p>But in the name of speed, webmastering became a mystical black art of figuring out how to force your PHP or Python or whatever to stay resident inside the Apache server and <em>not</em> exit.</p>
</li>
<li>
<p>The seeping complexity started to require watchdog processes to check to make sure your long-running process wasn't accruing memory across requests, or restarting it if it crashed.</p>
</li>
<li>
<p>Security was also being compromised, because bugs in your code could allow session data to seep between different requests...since the process was long-lived and kept memory open.</p>
</li>
</ul>
</li>
<li>
<p>THE UTOPIA WE ARE BEING SOLD is that IF we package our code as a blob-o-WebAssembly...</p>
<ul>
<li>
<p>We will get all the benefits of running fresh every request...</p>
</li>
<li>
<p>...but with a performance characteristic like if we'd rigged up a way to stay running the whole time.</p>
</li>
</ul>
</li>
<li>
<p>THERE WILL STILL BE A WEBSERVER RUNNING (of course)</p>
<ul>
<li>
<p>However: it will be <em>The One True Debugged WebServer</em> (compiled in something fully formal like Rust or Haskell, right?)...so it won't have the same security problems that your dirty Wasm blob would have if it tried to implement a long-running web server itself.</p>
</li>
<li>
<p>It will have lightning fast abilities to spin up and down the Wasm blobs, much faster than an OS shutdown and launch would ever be.</p>
</li>
</ul>
</li>
</ul>
<h2><a name="p-5964-ive-now-made-us-one-of-those-wasm-blobs-3" class="anchor" href="https://forum.rebol.info#p-5964-ive-now-made-us-one-of-those-wasm-blobs-3"></a>I've Now Made Us One Of Those Wasm Blobs!</h2>
<p>Hence we can focus our efforts on the high level logic of how to answer a web request without worrying about the details of writing, running, or administrating a web server.</p>
<p>If you've ever looked at some Platform as a Service (PaaS) like Heroku or AWS and seen a short list of languages supported, that's going to be a thing of the past.  Anyone who builds to WebAssembly can be hosted and just pay the price of their storage/CPU/network use.</p>
<ul>
<li>
<p>Yesterday we were a black sheep of languages...with a shoddy, slow, and insecure webserver.</p>
</li>
<li>
<p>Tomorrow... we'll still be a black sheep of languages.  But one that's on an even playing field for providing higher level logic for processing and serving data on the web.</p>
</li>
</ul>
<h2><a name="p-5964-ah-now-i-see-the-what-of-the-so-what-4" class="anchor" href="https://forum.rebol.info#p-5964-ah-now-i-see-the-what-of-the-so-what-4"></a><em>"Ah!  Now I See the What of the So What!"</em></h2>
<p><img src="https://forum.rebol.info/images/emoji/twitter/smiling_face_with_three_hearts.png?v=12" title=":smiling_face_with_three_hearts:" class="emoji only-emoji" alt=":smiling_face_with_three_hearts:" loading="lazy" width="20" height="20"></p>
<p>It's a quite compelling vision statement, and a lot of people are evangelical (you can tell by how many times people say the term "serverless" at conferences these days).</p>
<p>I'm definitely the sort of person this is an easy sell to. You should choose your battles when it comes to optimization, this is one of my favorite quotes:</p>
<blockquote>
<p><em>"90% of a program's execution time is spent in only 10% of its code. The standard inference from this rule is that programmers should find that 10% of the code and optimize it ... But a second inference is just as important: programmers can deoptimize the other 90% of the code (in order to make it easier to use, maintain, etc.)</em>   -- <a href="http://en.wikipedia.org/wiki/Richard_E._Pattis">Richard Pattis</a></p>
</blockquote>
<p>So focusing performance research on the spin-up and tear-down sounds 100% right.  Over the long run, the factors I mention probably mitigate any "catastrophic slowdown".  Your higher level program logic is starting from a clean slate every time.  There's no memory fragmentation or leaks, and all those security benefits I mentioned.</p>
<h2><a name="p-5964-not-just-the-cloud-but-one-binary-for-all-desktops-5" class="anchor" href="https://forum.rebol.info#p-5964-not-just-the-cloud-but-one-binary-for-all-desktops-5"></a>Not Just the Cloud, but <em>One Binary For All Desktops</em></h2>
<p>As WebAssembly has proven its mettle on the Web, people have asked why it couldn't be run from a terminal prompt.  All you'd need would be a runtime host--simpler than a browser--that provided basic file, I/O, and network services.</p>
<p>If you could do that, you'd be able to have one <strong><code>%r3.wasm</code></strong> file that you could download and use for Linux, Mac, Windows, on the cloud, and in your browser...</p>
<p>...in theory.  And that theory is almost practice.  (<a href="https://forum.rebol.info/t/wasmtime-and-wasi/1151/4">I've remarked on another thread about it</a> so take discussions of the non-cloud applications there.)</p>
<h2><a name="p-5964-of-course-its-not-all-there-yet-6" class="anchor" href="https://forum.rebol.info#p-5964-of-course-its-not-all-there-yet-6"></a>Of Course, It's Not All-There-Yet</h2>
<h3><a name="p-5964-what-about-those-wasm-blob-server-providers-7" class="anchor" href="https://forum.rebol.info#p-5964-what-about-those-wasm-blob-server-providers-7"></a>What about those Wasm blob server providers?</h3>
<p>They don't exist yet.</p>
<p>So if you're going to use the serverless methodology in the here and now, you're going to still be in the webmastering game.  Only now you're learning how to set up Docker instances and configure bleeding-edge Wasm runtimes.</p>
<h3><a name="p-5964-what-about-that-one-true-webserver-8" class="anchor" href="https://forum.rebol.info#p-5964-what-about-that-one-true-webserver-8"></a>What about that "One True Webserver?"</h3>
<p>Y'know, the webserver you're going to throw out yours for.  The one that's bulletproof and supersonic and Utopian--the kind Jesus would have written--the one that's going save us all?</p>
<p><em>It's NodeJS.</em>  <img src="https://forum.rebol.info/images/emoji/twitter/man_facepalming.png?v=12" title=":man_facepalming:" class="emoji" alt=":man_facepalming:" loading="lazy" width="20" height="20"><br>
<sub>at least for WasmEdge on AWS Lambda, for now</sub></p>
<p>So I hope you like setting up NodeJS in Docker.</p>
<h3><a name="p-5964-what-about-the-language-agnosticism-in-hosting-9" class="anchor" href="https://forum.rebol.info#p-5964-what-about-the-language-agnosticism-in-hosting-9"></a>What about the "Language Agnosticism" in hosting?</h3>
<p>The company behind WasmEdge talks a big game, and they have a platform for <a href="https://www.secondstate.io/faas/">Functions as a Service (FaaS)</a>.  But for various reasons this only works with Rust.</p>
<p>Kind of annoyingly, if you read the docs for <a href="https://wasmedge.org/book/en/dev.html">develop a WasmEdge app</a> you will see it say:</p>
<blockquote>
<p>For compiled languages (e.g., C and Rust), WasmEdge WebAssembly provides a safe, secure, isolated, and containerized runtime as opposed to Native Client (NaCl).</p>
</blockquote>
<p>Then you will see it list examples for <a href="https://wasmedge.org/book/en/dev/rust.html">Rust</a>, <a href="https://wasmedge.org/book/en/dev/js.html">JavaScript</a>, <a href="https://wasmedge.org/book/en/dev/go.html">Go</a>, <a href="https://wasmedge.org/book/en/dev/swift.html">Swift</a>, <a href="https://wasmedge.org/book/en/dev/as.html">AssemblyScript</a>, <a href="https://wasmedge.org/book/en/dev/kotlin.html">Kotlin</a>, <a href="https://wasmedge.org/book/en/dev/grain.html">Grain</a>, <a href="https://wasmedge.org/book/en/dev/python.html">Python</a></p>
<p><em>Noticeably missing is C.</em>  And that's the one we need.</p>
<p>Without C support for things like sockets, our Ren-C Wasm blob cannot make network requests.  We can do filesystem operations, but networking is just not there yet.</p>
<p><em>(The missing C bits relative to the other languages isn't technically WasmEdge's fault...it's just that the libc implementation for Wasi doesn't have some things that the Rust standard library does.  I just wish they'd explained the details of how they got the other languages to work built upon Rust...rather than leaving it as an exercise for the reader to delve into it all to figure out.)</em></p>
<h2><a name="p-5964-but-stay-tuned-10" class="anchor" href="https://forum.rebol.info#p-5964-but-stay-tuned-10"></a>But Stay Tuned...</h2>
<p>This is a pretty major development, and things are moving fast.  I want <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a> to keep the eyes on the prize here, and we see what we can do to make sure we've got some demos rolled out in this space.  As we find ways to bring more features online, I'll let you know.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/1</link>
        <pubDate>Fri, 01 Jul 2022 00:52:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-1</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
  </channel>
</rss>
