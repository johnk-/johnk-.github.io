<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
    <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854</link>
    <description>&gt; Note: WASI =&gt; WebAssembly System Interface

![image|690x360, 30%](upload://5xpgmNShmHOnF7AMwpjAGNfL3v3.png) 

We&#39;ve been running in a browser for a while.  And over time, as that host environment has gotten better...we&#39;ve been getting better, too.  (It can &lt;sub&gt;sometimes&lt;/sub&gt; pay to be an early adopter and co-evolve with a platform.)

After several long days of nuanced work, I&#39;ve been able to take another step...running in a WasmEdge VM!

Unlike the web version, this has the command-line processing built into it.  So you can pass `wasmedge` the %r3.wasm file, and say something like **`--do`** of the code you want to run:

    $ wasmedge r3.wasm --do \
          &quot;print [&#39;** uparse {Hello, Cloud} [thru space across to &lt;end&gt;] &#39;**]&quot;

Then you get your result:

    ** Cloud **

**[See for yourself, on the GitHub Workflow that builds it!!!!](https://github.com/metaeducation/ren-c/runs/7140995235?check_suite_focus=true#step:18:4)**

# &quot;So... er... so what?&quot; &lt;sub&gt;(someone might ask)&lt;/sub&gt;


... WH-

... WH- WHAT YOU DO MEAN, *&quot;SO WHAT?&quot;* ... YOU, you... *IGNORAMUS*!

:angry:
...

Oh, all right, well.  Fine.  Let me try and break down what this is... and what it might mean for Ren-C&#39;s future in the cloud space (and elsewhere).

---

# First Let&#39;s Talk About *&quot;The Dream That Isn&#39;t&quot;* &lt;sub&gt;(yet)&lt;/sub&gt;

...and that dream is &quot;SERVERLESS&quot;-ness.

*  Picture if you will, the idea that we take `%httpd.reb` and shoot it into the sun... :rocket: :sun_with_face: ...vowing to never try and write another web server in a Redbol again.

* INSTEAD we dial the clock back to how people responded to web requests in the 90&#39;s: we think of it that each request starts a whole new copy of %r3.exe, which does its work, and exits.

    * ...this really *is* how systems used to work, back when there were 5 people on the Internet.  (Modems were so slow that you couldn&#39;t get more than one request a week, anyway.)

    * But in the name of speed, webmastering became a mystical black art of figuring out how to force your PHP or Python or whatever to stay resident inside the Apache server and *not* exit.

    * The seeping complexity started to require watchdog processes to check to make sure your long-running process wasn&#39;t accruing memory across requests, or restarting it if it crashed.

    * Security was also being compromised, because bugs in your code could allow session data to seep between different requests...since the process was long-lived and kept memory open.

* THE UTOPIA WE ARE BEING SOLD is that IF we package our code as a blob-o-WebAssembly...

    * We will get all the benefits of running fresh every request...

    * ...but with a performance characteristic like if we&#39;d rigged up a way to stay running the whole time.

* THERE WILL STILL BE A WEBSERVER RUNNING (of course)

    * However: it will be *The One True Debugged WebServer* (compiled in something fully formal like Rust or Haskell, right?)...so it won&#39;t have the same security problems that your dirty Wasm blob would have if it tried to implement a long-running web server itself.

    * It will have lightning fast abilities to spin up and down the Wasm blobs, much faster than an OS shutdown and launch would ever be.

## I&#39;ve Now Made Us One Of Those Wasm Blobs!

Hence we can focus our efforts on the high level logic of how to answer a web request without worrying about the details of writing, running, or administrating a web server.

If you&#39;ve ever looked at some Platform as a Service (PaaS) like Heroku or AWS and seen a short list of languages supported, that&#39;s going to be a thing of the past.  Anyone who builds to WebAssembly can be hosted and just pay the price of their storage/CPU/network use. 

* Yesterday we were a black sheep of languages...with a shoddy, slow, and insecure webserver.

* Tomorrow... we&#39;ll still be a black sheep of languages.  But one that&#39;s on an even playing field for providing higher level logic for processing and serving data on the web.

## *&quot;Ah!  Now I See the What of the So What!&quot;*

:smiling_face_with_three_hearts:

It&#39;s a quite compelling vision statement, and a lot of people are evangelical (you can tell by how many times people say the term &quot;serverless&quot; at conferences these days).

I&#39;m definitely the sort of person this is an easy sell to. You should choose your battles when it comes to optimization, this is one of my favorite quotes:

&gt; *&quot;90% of a program&#39;s execution time is spent in only 10% of its code. The standard inference from this rule is that programmers should find that 10% of the code and optimize it ... But a second inference is just as important: programmers can deoptimize the other 90% of the code (in order to make it easier to use, maintain, etc.)*   -- [Richard Pattis](http://en.wikipedia.org/wiki/Richard_E._Pattis)

So focusing performance research on the spin-up and tear-down sounds 100% right.  Over the long run, the factors I mention probably mitigate any &quot;catastrophic slowdown&quot;.  Your higher level program logic is starting from a clean slate every time.  There&#39;s no memory fragmentation or leaks, and all those security benefits I mentioned.

## Not Just the Cloud, but *One Binary For All Desktops*

As WebAssembly has proven its mettle on the Web, people have asked why it couldn&#39;t be run from a terminal prompt.  All you&#39;d need would be a runtime host--simpler than a browser--that provided basic file, I/O, and network services.

If you could do that, you&#39;d be able to have one **`%r3.wasm`** file that you could download and use for Linux, Mac, Windows, on the cloud, and in your browser...

...in theory.  And that theory is almost practice.  ([I&#39;ve remarked on another thread about it](https://forum.rebol.info/t/wasmtime-and-wasi/1151/4?u=hostilefork) so take discussions of the non-cloud applications there.)

## Of Course, It&#39;s Not All-There-Yet

### What about those Wasm blob server providers?

They don&#39;t exist yet.

So if you&#39;re going to use the serverless methodology in the here and now, you&#39;re going to still be in the webmastering game.  Only now you&#39;re learning how to set up Docker instances and configure bleeding-edge Wasm runtimes.

### What about that &quot;One True Webserver?&quot;

Y&#39;know, the webserver you&#39;re going to throw out yours for.  The one that&#39;s bulletproof and supersonic and Utopian--the kind Jesus would have written--the one that&#39;s going save us all?

*It&#39;s NodeJS.*  :man_facepalming:   
&lt;sub&gt;at least for WasmEdge on AWS Lambda, for now&lt;/sub&gt;

So I hope you like setting up NodeJS in Docker.

### What about the &quot;Language Agnosticism&quot; in hosting?

The company behind WasmEdge talks a big game, and they have a platform for [Functions as a Service (FaaS)](https://www.secondstate.io/faas/).  But for various reasons this only works with Rust.

Kind of annoyingly, if you read the docs for [develop a WasmEdge app](https://wasmedge.org/book/en/dev.html) you will see it say:

&gt; For compiled languages (e.g., C and Rust), WasmEdge WebAssembly provides a safe, secure, isolated, and containerized runtime as opposed to Native Client (NaCl).

Then you will see it list examples for [Rust](https://wasmedge.org/book/en/dev/rust.html), [JavaScript](https://wasmedge.org/book/en/dev/js.html), [Go](https://wasmedge.org/book/en/dev/go.html), [Swift](https://wasmedge.org/book/en/dev/swift.html), [AssemblyScript](https://wasmedge.org/book/en/dev/as.html), [Kotlin](https://wasmedge.org/book/en/dev/kotlin.html), [Grain](https://wasmedge.org/book/en/dev/grain.html), [Python](https://wasmedge.org/book/en/dev/python.html)

*Noticeably missing is C.*  And that&#39;s the one we need.

Without C support for things like sockets, our Ren-C Wasm blob cannot make network requests.  We can do filesystem operations, but networking is just not there yet.

*(The missing C bits relative to the other languages isn&#39;t technically WasmEdge&#39;s fault...it&#39;s just that the libc implementation for Wasi doesn&#39;t have some things that the Rust standard library does.  I just wish they&#39;d explained the details of how they got the other languages to work built upon Rust...rather than leaving it as an exercise for the reader to delve into it all to figure out.)*

## But Stay Tuned...

This is a pretty major development, and things are moving fast.  I want @gchiu to keep the eyes on the prize here, and we see what we can do to make sure we&#39;ve got some demos rolled out in this space.  As we find ways to bring more features online, I&#39;ll let you know.</description>
    
    <lastBuildDate>Tue, 05 Jul 2022 10:32:06 +0000</lastBuildDate>
    <category>Announcements</category>
    <atom:link href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Perhaps do some experiments to explore the unknowns</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/6</link>
        <pubDate>Tue, 05 Jul 2022 10:32:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-6</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm for it.  But it's one of those big new project things, that one has to claw one's way through.  A lot of unknown unknowns.</p>
<p><em>"...as we know, there are known knowns; there are things we know we know. We also know there are known unknowns; that is to say we know there are some things we do not know. But there are also unknown unknowns—the ones we don't know we don't know."</em>  <em>--<a href="https://en.wikipedia.org/wiki/There_are_known_knowns">Donald Rumsfeld</a></em></p>
<p>But I did crack open the WasmEdge and do that, so, it's not like I can't do new things.  It's just that we're at a real limit of carrying capacity for platforms for one person.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/5</link>
        <pubDate>Tue, 05 Jul 2022 03:01:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-5</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <ol>
<li>means that eventually Rebol users will get access to WASI, but 2. means that Rust users will also get access to Rebol.  There's more to be gained from the second choice, especially if it's something you've always wanted to do.</li>
</ol>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/4</link>
        <pubDate>Tue, 05 Jul 2022 02:57:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-4</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="gchiu" data-post="2" data-topic="1854">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>As far as I understand it, we need to wait until the hooks for WASI are built into the C/C++ compilers used to build Rebol so that not only can we print "EHLO world" but we can also do networking.</p>
</blockquote>
</aside>
<p>We can:</p>
<ol>
<li>
<p>Wait for that to happen (will happen &lt; 1 year, I would bet for certain)</p>
</li>
<li>
<p>Build a bridge to Rust (where the runtime has WASI networking), and have our r3.wasm built as a Rust project that embeds Ren-C.</p>
<ul>
<li>
<p>I like Rust, and want a Rust bridge, <a href="https://forum.rebol.info/t/initial-rust-binding-experiment-by-shixin/1269">Shixin started one</a> that I have only glanced at; I know a lot more Rust now than then.</p>
</li>
<li>
<p>The "weird" Rust toolchain isn't necessarily any weirder than a "weird" clang wired up to target WASI, so on the topic of dependencies it's actually a thought-out thing that has some various virtuosities.</p>
</li>
</ul>
</li>
<li>
<p>Have me contribute to Wasi-SDK or Emscripten and write it myself:</p>
<ul>
<li>
<p>This is a bad way to burn my cycles on something that will happen anyway.</p>
</li>
<li>
<p>The Rust bridge would be a much more forward looking idea</p>
</li>
</ul>
</li>
</ol>
<p>So default is (1), but maybe (2).</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/3</link>
        <pubDate>Tue, 05 Jul 2022 02:51:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-3</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Rebol has for many years been at the forefront of personal computing so it's good to see it head back that way even it is personal cloud computing.</p>
<p>As far as I understand it, we need to wait until the hooks for WASI are built into the C/C++ compilers used to build Rebol so that not only can we print "EHLO world" but we can also do networking.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/2</link>
        <pubDate>Tue, 05 Jul 2022 02:40:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-2</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
      <item>
        <title>Ren-C is Now on the Clouds ☁️ with WASI</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Note: WASI =&gt; WebAssembly System Interface</p>
</blockquote>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069.png" data-download-href="https://forum.rebol.info/uploads/default/26d1a0133b87b8f3ac7008467a4d6b29d6c21069" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069_2_207x108.png" alt="image" data-base62-sha1="5xpgmNShmHOnF7AMwpjAGNfL3v3" width="207" height="108" srcset="https://forum.rebol.info/uploads/default/optimized/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069_2_207x108.png, https://forum.rebol.info/uploads/default/optimized/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069_2_310x162.png 1.5x, https://forum.rebol.info/uploads/default/optimized/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069_2_414x216.png 2x" data-small-upload="https://forum.rebol.info/uploads/default/optimized/1X/26d1a0133b87b8f3ac7008467a4d6b29d6c21069_2_10x10.png"></a></div><p></p>
<p>We've been running in a browser for a while.  And over time, as that host environment has gotten better...we've been getting better, too.  (It can <sub>sometimes</sub> pay to be an early adopter and co-evolve with a platform.)</p>
<p>After several long days of nuanced work, I've been able to take another step...running in a WasmEdge VM!</p>
<p>Unlike the web version, this has the command-line processing built into it.  So you can pass <code>wasmedge</code> the %r3.wasm file, and say something like <strong><code>--do</code></strong> of the code you want to run:</p>
<pre><code>$ wasmedge r3.wasm --do \
      "print ['** uparse {Hello, Cloud} [thru space across to &lt;end&gt;] '**]"
</code></pre>
<p>Then you get your result:</p>
<pre><code>** Cloud **
</code></pre>
<p><strong><a href="https://github.com/metaeducation/ren-c/runs/7140995235?check_suite_focus=true#step:18:4">See for yourself, on the GitHub Workflow that builds it!!!!</a></strong></p>
<h1>"So... er... so what?" <sub>(someone might ask)</sub>
</h1>
<p>... WH-</p>
<p>... WH- WHAT YOU DO MEAN, <em>"SO WHAT?"</em> ... YOU, you... <em>IGNORAMUS</em>!</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/angry.png?v=9" title=":angry:" class="emoji only-emoji" alt=":angry:"><br>
...</p>
<p>Oh, all right, well.  Fine.  Let me try and break down what this is... and what it might mean for Ren-C's future in the cloud space (and elsewhere).</p>
<hr>
<h1>First Let's Talk About <em>"The Dream That Isn't"</em> <sub>(yet)</sub>
</h1>
<p>...and that dream is "SERVERLESS"-ness.</p>
<ul>
<li>
<p>Picture if you will, the idea that we take <code>%httpd.reb</code> and shoot it into the sun... <img src="https://forum.rebol.info/images/emoji/twitter/rocket.png?v=9" title=":rocket:" class="emoji" alt=":rocket:"> <img src="https://forum.rebol.info/images/emoji/twitter/sun_with_face.png?v=9" title=":sun_with_face:" class="emoji" alt=":sun_with_face:"> ...vowing to never try and write another web server in a Redbol again.</p>
</li>
<li>
<p>INSTEAD we dial the clock back to how people responded to web requests in the 90's: we think of it that each request starts a whole new copy of %r3.exe, which does its work, and exits.</p>
<ul>
<li>
<p>...this really <em>is</em> how systems used to work, back when there were 5 people on the Internet.  (Modems were so slow that you couldn't get more than one request a week, anyway.)</p>
</li>
<li>
<p>But in the name of speed, webmastering became a mystical black art of figuring out how to force your PHP or Python or whatever to stay resident inside the Apache server and <em>not</em> exit.</p>
</li>
<li>
<p>The seeping complexity started to require watchdog processes to check to make sure your long-running process wasn't accruing memory across requests, or restarting it if it crashed.</p>
</li>
<li>
<p>Security was also being compromised, because bugs in your code could allow session data to seep between different requests...since the process was long-lived and kept memory open.</p>
</li>
</ul>
</li>
<li>
<p>THE UTOPIA WE ARE BEING SOLD is that IF we package our code as a blob-o-WebAssembly...</p>
<ul>
<li>
<p>We will get all the benefits of running fresh every request...</p>
</li>
<li>
<p>...but with a performance characteristic like if we'd rigged up a way to stay running the whole time.</p>
</li>
</ul>
</li>
<li>
<p>THERE WILL STILL BE A WEBSERVER RUNNING (of course)</p>
<ul>
<li>
<p>However: it will be <em>The One True Debugged WebServer</em> (compiled in something fully formal like Rust or Haskell, right?)...so it won't have the same security problems that your dirty Wasm blob would have if it tried to implement a long-running web server itself.</p>
</li>
<li>
<p>It will have lightning fast abilities to spin up and down the Wasm blobs, much faster than an OS shutdown and launch would ever be.</p>
</li>
</ul>
</li>
</ul>
<h2>I've Now Made Us One Of Those Wasm Blobs!</h2>
<p>Hence we can focus our efforts on the high level logic of how to answer a web request without worrying about the details of writing, running, or administrating a web server.</p>
<p>If you've ever looked at some Platform as a Service (PaaS) like Heroku or AWS and seen a short list of languages supported, that's going to be a thing of the past.  Anyone who builds to WebAssembly can be hosted and just pay the price of their storage/CPU/network use.</p>
<ul>
<li>
<p>Yesterday we were a black sheep of languages...with a shoddy, slow, and insecure webserver.</p>
</li>
<li>
<p>Tomorrow... we'll still be a black sheep of languages.  But one that's on an even playing field for providing higher level logic for processing and serving data on the web.</p>
</li>
</ul>
<h2><em>"Ah!  Now I See the What of the So What!"</em></h2>
<p><img src="https://forum.rebol.info/images/emoji/twitter/smiling_face_with_three_hearts.png?v=9" title=":smiling_face_with_three_hearts:" class="emoji only-emoji" alt=":smiling_face_with_three_hearts:"></p>
<p>It's a quite compelling vision statement, and a lot of people are evangelical (you can tell by how many times people say the term "serverless" at conferences these days).</p>
<p>I'm definitely the sort of person this is an easy sell to. You should choose your battles when it comes to optimization, this is one of my favorite quotes:</p>
<blockquote>
<p><em>"90% of a program's execution time is spent in only 10% of its code. The standard inference from this rule is that programmers should find that 10% of the code and optimize it ... But a second inference is just as important: programmers can deoptimize the other 90% of the code (in order to make it easier to use, maintain, etc.)</em>   -- <a href="http://en.wikipedia.org/wiki/Richard_E._Pattis">Richard Pattis</a></p>
</blockquote>
<p>So focusing performance research on the spin-up and tear-down sounds 100% right.  Over the long run, the factors I mention probably mitigate any "catastrophic slowdown".  Your higher level program logic is starting from a clean slate every time.  There's no memory fragmentation or leaks, and all those security benefits I mentioned.</p>
<h2>Not Just the Cloud, but <em>One Binary For All Desktops</em>
</h2>
<p>As WebAssembly has proven its mettle on the Web, people have asked why it couldn't be run from a terminal prompt.  All you'd need would be a runtime host--simpler than a browser--that provided basic file, I/O, and network services.</p>
<p>If you could do that, you'd be able to have one <strong><code>%r3.wasm</code></strong> file that you could download and use for Linux, Mac, Windows, on the cloud, and in your browser...</p>
<p>...in theory.  And that theory is almost practice.  (<a href="https://forum.rebol.info/t/wasmtime-and-wasi/1151/4">I've remarked on another thread about it</a> so take discussions of the non-cloud applications there.)</p>
<h2>Of Course, It's Not All-There-Yet</h2>
<h3>What about those Wasm blob server providers?</h3>
<p>They don't exist yet.</p>
<p>So if you're going to use the serverless methodology in the here and now, you're going to still be in the webmastering game.  Only now you're learning how to set up Docker instances and configure bleeding-edge Wasm runtimes.</p>
<h3>What about that "One True Webserver?"</h3>
<p>Y'know, the webserver you're going to throw out yours for.  The one that's bulletproof and supersonic and Utopian--the kind Jesus would have written--the one that's going save us all?</p>
<p><em>It's NodeJS.</em>  <img src="https://forum.rebol.info/images/emoji/twitter/man_facepalming.png?v=9" title=":man_facepalming:" class="emoji" alt=":man_facepalming:"><br>
<sub>at least for WasmEdge on AWS Lambda, for now</sub></p>
<p>So I hope you like setting up NodeJS in Docker.</p>
<h3>What about the "Language Agnosticism" in hosting?</h3>
<p>The company behind WasmEdge talks a big game, and they have a platform for <a href="https://www.secondstate.io/faas/">Functions as a Service (FaaS)</a>.  But for various reasons this only works with Rust.</p>
<p>Kind of annoyingly, if you read the docs for <a href="https://wasmedge.org/book/en/dev.html">develop a WasmEdge app</a> you will see it say:</p>
<blockquote>
<p>For compiled languages (e.g., C and Rust), WasmEdge WebAssembly provides a safe, secure, isolated, and containerized runtime as opposed to Native Client (NaCl).</p>
</blockquote>
<p>Then you will see it list examples for <a href="https://wasmedge.org/book/en/dev/rust.html">Rust</a>, <a href="https://wasmedge.org/book/en/dev/js.html">JavaScript</a>, <a href="https://wasmedge.org/book/en/dev/go.html">Go</a>, <a href="https://wasmedge.org/book/en/dev/swift.html">Swift</a>, <a href="https://wasmedge.org/book/en/dev/as.html">AssemblyScript</a>, <a href="https://wasmedge.org/book/en/dev/kotlin.html">Kotlin</a>, <a href="https://wasmedge.org/book/en/dev/grain.html">Grain</a>, <a href="https://wasmedge.org/book/en/dev/python.html">Python</a></p>
<p><em>Noticeably missing is C.</em>  And that's the one we need.</p>
<p>Without C support for things like sockets, our Ren-C Wasm blob cannot make network requests.  We can do filesystem operations, but networking is just not there yet.</p>
<p><em>(The missing C bits relative to the other languages isn't technically WasmEdge's fault...it's just that the libc implementation for Wasi doesn't have some things that the Rust standard library does.  I just wish they'd explained the details of how they got the other languages to work built upon Rust...rather than leaving it as an exercise for the reader to delve into it all to figure out.)</em></p>
<h2>But Stay Tuned...</h2>
<p>This is a pretty major development, and things are moving fast.  I want <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a> to keep the eyes on the prize here, and we see what we can do to make sure we've got some demos rolled out in this space.  As we find ways to bring more features online, I'll let you know.</p>
          <p><a href="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854/1</link>
        <pubDate>Fri, 01 Jul 2022 00:52:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1854-1</guid>
        <source url="https://forum.rebol.info/t/ren-c-is-now-on-the-clouds-with-wasi/1854.rss">Ren-C is Now on the Clouds ☁️ with WASI</source>
      </item>
  </channel>
</rss>
