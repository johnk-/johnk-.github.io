<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dialecting With Quasiforms</title>
    <link>https://forum.rebol.info/t/dialecting-with-quasiforms/1960</link>
    <description>In the list of potential ideas of the long forgotten past, there was a thought that strings would come in two forms... one that was compared case-sensitively, and another that was not.

The visual look of the case-insensitive form was suggested as having a leading tilde, as one representation.

    &gt;&gt; &quot;a&quot; = ~&quot;A&quot;
    == #[true]

No one really went to bat for the idea or thought through its ramifications.  It wasn&#39;t particularly easy to test what that would be like.

## Quasiforms Make The Proposal Easier To Test

We now basically have the implementation guts needed to where we could consider the bits passed on the value.  It even has a decent name:

    &gt;&gt; quasi &quot;A&quot;
    == ~&quot;A&quot;~

     &gt;&gt; &quot;a&quot; = &quot;A&quot;
     == #[false]

     &gt;&gt; &quot;a&quot; = quasi &quot;A&quot;
     == #[true]

The principle meaning of a quasiform is as the ^META of an isotope form.  And what this would mean is, there&#39;s no such thing as a differentiation between an isotopic case-sensitive word/string and an isotopic case-insensitive word/string.

## I Don&#39;t Think I Like It, BUT...

Regardless of me not liking it, it&#39;s a possibility for dialects.  If you wanted to mark some strings for case-insensitivity you have another option in the box.

The reason I don&#39;t like it is because the isotope and quasi forms are supposed to stand out and draw attention to weirdness.  This is too common an application.  And it would mean your case-insensitive forms would be evaluating to isotopes everywhere, unless the quasiform evaluation changed in some way to make quasi-strings inert.  This isn&#39;t in line with what I want to do.

But...your dialect can do it.</description>
    
    <lastBuildDate>Wed, 07 Sep 2022 15:48:31 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/dialecting-with-quasiforms/1960.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dialecting With Quasiforms</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p>Seems useful. I just normally check the error id</p>
          <p><a href="https://forum.rebol.info/t/dialecting-with-quasiforms/1960/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dialecting-with-quasiforms/1960/3</link>
        <pubDate>Wed, 07 Sep 2022 15:48:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1960-3</guid>
        <source url="https://forum.rebol.info/t/dialecting-with-quasiforms/1960.rss">Dialecting With Quasiforms</source>
      </item>
      <item>
        <title>Dialecting With Quasiforms</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1960">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>the isotope and quasi forms are supposed to stand out and draw attention to weirdness.</p>
</blockquote>
</aside>
<p>So this points to a place where generic quasiforms really shine, I think: <strong>drawing attention in dialects to the bad cases</strong>.</p>
<p>In fact, I've updated the test dialect so that it uses QUASI-WORD!s next to the test to indicate the ID of an error of failure.</p>
<p>Before the tests would often be something like:</p>
<pre><code>(
     e: trap [1 / 0]
     assert [error? e]
)
</code></pre>
<p>But now, I use the dialect to specifically name the error-id.  It's more succinct...and it verifies that the error that was raised was actually the error you thought:</p>
<pre><code>~zero-divide~ !! (
    1 / 0
)
</code></pre>
<p>I threw in a <strong><code>!!</code></strong> just to punctuate it a little bit more--it's not strictly necessary.  But it helps distinguish it from the mere appearance of a quasiform in a test itself.</p>
<p>Rebol2 could have looked like that (since ~zero-divide~ was a WORD!).  It just would have run into the question of <em>"what if the error ID actually was the WORD! of <code>~zero-divide~</code>"</em>, and the quasi rules remove that possibility...which makes things cohere better.</p>
<p><strong>But now we have quasiforms for BLOCK!, GROUP!, TAG!, TEXT!... you name it!</strong></p>
<pre><code>expressions: [
   [1 + 2]
   ~[1 + + 2]~
   [3 * 4 * 5]
   [1 + 2 * 3]
   ~[* * 2 3]~
]
</code></pre>
<p>I think this will further empower creativity in dialect design, in notable ways.  In the past I've done some kinds of markings like this using quotes... but the tildes are better if what you mean to do is "call out" cases as being special or outliers.</p>
          <p><a href="https://forum.rebol.info/t/dialecting-with-quasiforms/1960/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dialecting-with-quasiforms/1960/2</link>
        <pubDate>Wed, 07 Sep 2022 14:19:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1960-2</guid>
        <source url="https://forum.rebol.info/t/dialecting-with-quasiforms/1960.rss">Dialecting With Quasiforms</source>
      </item>
      <item>
        <title>Dialecting With Quasiforms</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the list of potential ideas of the long forgotten past, there was a thought that strings would come in two forms... one that was compared case-sensitively, and another that was not.</p>
<p>The visual look of the case-insensitive form was suggested as having a leading tilde, as one representation.</p>
<pre><code>&gt;&gt; "a" = ~"A"
== #[true]
</code></pre>
<p>No one really went to bat for the idea or thought through its ramifications.  It wasn't particularly easy to test what that would be like.</p>
<h2>Quasiforms Make The Proposal Easier To Test</h2>
<p>We now basically have the implementation guts needed to where we could consider the bits passed on the value.  It even has a decent name:</p>
<pre><code>&gt;&gt; quasi "A"
== ~"A"~

 &gt;&gt; "a" = "A"
 == #[false]

 &gt;&gt; "a" = quasi "A"
 == #[true]
</code></pre>
<p>The principle meaning of a quasiform is as the ^META of an isotope form.  And what this would mean is, there's no such thing as a differentiation between an isotopic case-sensitive word/string and an isotopic case-insensitive word/string.</p>
<h2>I Don't Think I Like It, BUT...</h2>
<p>Regardless of me not liking it, it's a possibility for dialects.  If you wanted to mark some strings for case-insensitivity you have another option in the box.</p>
<p>The reason I don't like it is because the isotope and quasi forms are supposed to stand out and draw attention to weirdness.  This is too common an application.  And it would mean your case-insensitive forms would be evaluating to isotopes everywhere, unless the quasiform evaluation changed in some way to make quasi-strings inert.  This isn't in line with what I want to do.</p>
<p>But...your dialect can do it.</p>
          <p><a href="https://forum.rebol.info/t/dialecting-with-quasiforms/1960/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/dialecting-with-quasiforms/1960/1</link>
        <pubDate>Mon, 05 Sep 2022 08:16:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1960-1</guid>
        <source url="https://forum.rebol.info/t/dialecting-with-quasiforms/1960.rss">Dialecting With Quasiforms</source>
      </item>
  </channel>
</rss>
