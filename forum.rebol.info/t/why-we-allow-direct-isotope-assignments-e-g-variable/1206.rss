<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why We Allow *Direct* Isotope Assignments (e.g. variable: ~)</title>
    <link>https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206</link>
    <description>&quot;UNSET!&quot; values were extremely ornery in historical Rebol and Red.  You couldn&#39;t assign them to variables:

    rebol2&gt;&gt; x: print &quot;message&quot;
    message
    ** Script Error: x needs a value

    red&gt;&gt; x: print &quot;message&quot;
    message
    *** Script Error: x: needs a value

In Rebol2 and R3-Alpha you couldn&#39;t test them for conditional truth or falsehood, either:

    rebol2&gt;&gt; if print &quot;message&quot; [1 + 2]
    message
    ** Script Error: if is missing its condition argument

But Red made the bizarre decision to say that &quot;UNSET!&quot; was truthy:

    &gt;&gt; if print &quot;message&quot; [1 + 2]
    message
    == 3

**Isotopes in Ren-C are a far more sophisticated story than UNSET!, and triggering errors in conditional slots is their raison d&#39;etre.**  They guide you to finding mistakes in your reasoning:

    &gt;&gt; value: false

    &gt;&gt; match [integer! logic!] value
    == ~false~  ; isotope

    &gt;&gt; if match [integer! logic!] value [print &quot;You probably want this to print!&quot;]
    ** Error: ~false~ isotope is not conditionally true or false, see DID and DIDN&#39;T

    &gt;&gt; did match [integer! logic!] value
    == #[true]  ; DID is isotope tolerant, and checks against pure NULL only

    &gt;&gt; if did match [integer! logic!] value [print &quot;Isotopes saved the day!&quot;]
    Isotopes saved the day!

So keeping that &quot;ornery&quot; behavior is important.  **But also important is *not* being ornery about assignment of QUASI! values via SET-WORD!.**

It has applications everywhere...[like in the round-tripping of OBJECT!s](https://forum.rebol.info/t/generic-quoting-makes-headway-on-make-object/997).

    &gt;&gt; first [~]
    == ~  ; ordinary QUASI! of blank (can appear in blocks, etc.)

    &gt;&gt; ~
    == ~  ; isotope (QUASI! -&gt; isotope on evaluation)

    &gt;&gt; make object! [u: ~, q: first [~]]
    == make object! [
         u: ~
         q: &#39;~
    ] 
    ; ^-- running this MAKE OBJECT! gets you back the isotope and BAD-WORD! correctly

But if you assign them via any evaluation (even a GROUP!) you will get an error.

    &gt;&gt; x: print &quot;Hi&quot;
    Hi
    ** Error: Cannot assign isotope with SET-WORD!, see SET/ANY

    &gt;&gt; x: (~)
    ** Error: Cannot assign isotope with SET-WORD!, see SET/ANY

This seems like the best compromise to get the desired behavior.</description>
    
    <lastBuildDate>Wed, 01 Jul 2020 05:40:17 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why We Allow *Direct* Isotope Assignments (e.g. variable: ~)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="https://forum.rebol.info/t/undefined-vs-null-in-javascript/1826/2">undefined vs. null in JavaScript</a></p>
          <p><a href="https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206/2</link>
        <pubDate>Sat, 20 Aug 2022 18:48:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-2</guid>
        <source url="https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206.rss">Why We Allow *Direct* Isotope Assignments (e.g. variable: ~)</source>
      </item>
      <item>
        <title>Why We Allow *Direct* Isotope Assignments (e.g. variable: ~)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="https://forum.rebol.info/t/why-isnt-print-invisible/1824">Why Isn't PRINT Invisible?</a></p>
          <p><a href="https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206/3</link>
        <pubDate>Wed, 18 May 2022 07:12:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-3</guid>
        <source url="https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206.rss">Why We Allow *Direct* Isotope Assignments (e.g. variable: ~)</source>
      </item>
      <item>
        <title>Why We Allow *Direct* Isotope Assignments (e.g. variable: ~)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>"UNSET!" values were extremely ornery in historical Rebol and Red.  You couldn't assign them to variables:</p>
<pre><code>rebol2&gt;&gt; x: print "message"
message
** Script Error: x needs a value

red&gt;&gt; x: print "message"
message
*** Script Error: x: needs a value
</code></pre>
<p>In Rebol2 and R3-Alpha you couldn't test them for conditional truth or falsehood, either:</p>
<pre><code>rebol2&gt;&gt; if print "message" [1 + 2]
message
** Script Error: if is missing its condition argument
</code></pre>
<p>But Red made the bizarre decision to say that "UNSET!" was truthy:</p>
<pre><code>&gt;&gt; if print "message" [1 + 2]
message
== 3
</code></pre>
<p><strong>Isotopes in Ren-C are a far more sophisticated story than UNSET!, and triggering errors in conditional slots is their raison d'etre.</strong>  They guide you to finding mistakes in your reasoning:</p>
<pre><code>&gt;&gt; value: false

&gt;&gt; match [integer! logic!] value
== ~false~  ; isotope

&gt;&gt; if match [integer! logic!] value [print "You probably want this to print!"]
** Error: ~false~ isotope is not conditionally true or false, see DID and DIDN'T

&gt;&gt; did match [integer! logic!] value
== #[true]  ; DID is isotope tolerant, and checks against pure NULL only

&gt;&gt; if did match [integer! logic!] value [print "Isotopes saved the day!"]
Isotopes saved the day!
</code></pre>
<p>So keeping that "ornery" behavior is important.  <strong>But also important is <em>not</em> being ornery about assignment of QUASI! values via SET-WORD!.</strong></p>
<p>It has applications everywhere...<a href="https://forum.rebol.info/t/generic-quoting-makes-headway-on-make-object/997">like in the round-tripping of OBJECT!s</a>.</p>
<pre><code>&gt;&gt; first [~]
== ~  ; ordinary QUASI! of blank (can appear in blocks, etc.)

&gt;&gt; ~
== ~  ; isotope (QUASI! -&gt; isotope on evaluation)

&gt;&gt; make object! [u: ~, q: first [~]]
== make object! [
     u: ~
     q: '~
] 
; ^-- running this MAKE OBJECT! gets you back the isotope and BAD-WORD! correctly
</code></pre>
<p>But if you assign them via any evaluation (even a GROUP!) you will get an error.</p>
<pre><code>&gt;&gt; x: print "Hi"
Hi
** Error: Cannot assign isotope with SET-WORD!, see SET/ANY

&gt;&gt; x: (~)
** Error: Cannot assign isotope with SET-WORD!, see SET/ANY
</code></pre>
<p>This seems like the best compromise to get the desired behavior.</p>
          <p><a href="https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206/1</link>
        <pubDate>Sat, 14 Sep 2019 23:06:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-1</guid>
        <source url="https://forum.rebol.info/t/why-we-allow-direct-isotope-assignments-e-g-variable/1206.rss">Why We Allow *Direct* Isotope Assignments (e.g. variable: ~)</source>
      </item>
  </channel>
</rss>
