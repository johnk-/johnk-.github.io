<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Key Exchange Methods in Ren-C</title>
    <link>https://forum.rebol.info/t/key-exchange-methods-in-ren-c/1809</link>
    <description>Having given a summary of [Checksums and Secure Hashes](https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/), I thought I&#39;d follow up with a quick description of something you&#39;re likely not as familiar with: **Key Exchanges**.

There&#39;s old quote I like (but can&#39;t find a source for):

&gt; &quot;The shared secret is capital.  We may spend it or squander it.&quot;

An example of taking advantage of a shared secret is when people want to share an encrypted .ZIP file.  If you and your friend both know the encryption password that no one else knows...then you could put the file on a public server for your friend to download.  If you trust the encryption, the fact it was public would not matter.

**But what if the situation is that your friend has a password that only they know... and you have a password that only you know?**  That wouldn&#39;t seem to help with the .ZIP file scenario, because it expects the same password to decrypt as was used to encrypt it.

Key Exchange is a way of taking your individual &quot;passwords&quot; and coming to an agreement on a third &quot;password&quot; that only the two of you know.  Amazingly enough, you can carry out the conversation where you establish the shared password in public.

## Creating one Shared Secret from two Non-Shared Secrets

For educational purposes, people use paint-mixing as an analogy for key exchange.  It&#39;s really &quot;multiplying big prime numbers&quot; instead of mixing paint, but it&#39;s visual and easy to see.

![image|345x500](upload://3t485Do7kYfAw6HMsMv5klePtsq.png)

This assumes everyone in the world has some kind of weird &quot;common paint&quot;.  This paint isn&#39;t white (because if you mixed it with something that would be too easy to guess at the precise shade you had mixed it with).  And it isn&#39;t black (because mixing might just get you something too dark to measure well).

But the key point to absorb is what the diagram says: **we assume that mixture separation is expensive**.  Once you&#39;ve mixed the common paint with your secret color, it produces a new shade that no one else knows how to make exactly.

When you and your friend exchange your mixtures you cleverly go to your private lairs and each add your secret color to the other&#39;s mixture.  **Now both of you have the same weird color, and this is a secret you share.**

## Ren-C Supports Diffie-Hellman Key Exchange

I oversimplified this by saying you each start with a &quot;password&quot;...because that made it sound like you could just pick a phrase out of your head.  In reality, choosing your secret involves some tricky math...to make sure your secret paint color is a *good* secret paint color.  You don&#39;t pick these--you ask the computer to generate it.

To get the ball rolling, you need to specify what kind of &quot;common paint&quot; to use.  You make that by picking two suitable prime numbers, a modulus and a base.  Then you can ask for a unique random secret to be generated.

For the sake of education, I&#39;ve made it possible to use *relatively bad* paint mixes with the /INSECURE refinement.  It won&#39;t allow numbers that are so broken the process won&#39;t work (for instance: non-primes, or primes that don&#39;t meet the basic requirements of the algorithm).  This lets you work with small enough numbers that you can see for yourself what&#39;s going on more easily.

So let&#39;s use a modulus of 9 and a base of 3:

    &gt;&gt; mine: dh-generate-keypair/insecure #{09} #{05}
    == make object! [
        modulus: #{09}
        generator: #{05}
        private-key: #{07}
        public-key: #{05}
    ]

    &gt;&gt; theirs: dh-generate-keypair/insecure #{09} #{05}
    == make object! [
        modulus: #{09}
        generator: #{05}
        private-key: #{05}
        public-key: #{02}
    ]

So privately, my secret is 7... and their secret is 5.  But we want to come to an agreement on a new number while only sharing with the public my &quot;mixture&quot; of 5 and their mixture of 2.

    &gt;&gt; my-shared: dh-compute-secret mine theirs.public-key
    == #{02}

    &gt;&gt; their-shared: dh-compute-secret theirs mine.public-key
    == #{02}

So here you see each of us could come to a common agreement of 2.  You can follow through the math on the [Wikipedia page](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange) if you want...but it&#39;s enough to know that it works.

What makes for a good (big!) modulus and base to use?  You don&#39;t really need to come up with them yourself, although [there are algorithms for it](https://security.stackexchange.com/a/103924).  There are papers that publish some good choices--and we should probably provide a way to default to well-known ones, like maybe accept either an object or an ISSUE!

    &gt;&gt; dh-generate-keypair #RFC-3526
    ; ...or...
    &gt;&gt; dh-generate-keypair make object [base: ..., modulus: ...]

But the main thing to know is that **both sides have to agree on the &quot;common paint&quot; to use**, in order to come to the same conclusion.  So `dh-compute-secret` won&#39;t work unless the same numbers were used here.

## We Also Support Elliptic Curve Key Exchange (ECHDE)

Modern Internet Transport Security has moved on from traditional Diffie Hellman to trickier math.  But the premise is the same.

In the interface, we only support two &quot;common paints&quot; for this method: &quot;secp256r1&quot; and &quot;curve25519&quot;.  There&#39;s no option for small answers here:

    &gt;&gt; mine: ecc-generate-keypair &#39;curve25519
    == make object! [
        public-key: make object! [
            x: #{121413C34DC265025F24CBEBBA6065B9
                 75F1BFA6E493D07A0F4776FAE03DC245}
            y: #{00000000000000000000000000000000
                 00000000000000000000000000000000}
        ]
        private-key: #{610A8D99A72500B3A2E8A1FD714FA412
                       17F0A0EA5EDFC9CFBDAE0425E199DC70}
    ]

    &gt;&gt; theirs: ecc-generate-keypair &#39;curve25519
    == make object! [
        public-key: make object! [
            x: #{10D65366D8C9229591C99903D3B5EB0F
                 57709AD27E37989E4782050D2B9B2B93}
            y: #{00000000000000000000000000000000
                 00000000000000000000000000000000}
        ]
        private-key: #{7C3262BF6028B049EEDC6C37E37A8261
                       EA4DF31F16E4D534D92A7EF11D974618}
    ]

But it works the same way; you come to the same conclusion when combining your partner&#39;s public portion with your private portion:

    &gt;&gt; my-secret: (
        ecdh-shared-secret &#39;curve25519 mine.private-key theirs.public-key
    )
    == #{E27891074A60250580B8F2C7CB2448A9AA491C97161D7C8D381348D90E438025}

    &gt;&gt; their-secret: (
        ecdh-shared-secret &#39;curve25519 mine.private-key theirs.public-key
    )
    == #{E27891074A60250580B8F2C7CB2448A9AA491C97161D7C8D381348D90E438025}

    &gt;&gt; my-secret = their-secret
    == #[true]

## Would Average Users Ever Need Key Exchange Functions?

Right now, the main reason most people would care whether the language has these key exchanges is because without them you can&#39;t do TLS.  So no reading or writing over HTTPS.

You really only need key exchanges when protocols are trying to establish private channels of communication.  So notably, some cryptographic protocols (like Bitcoin) don&#39;t need key exchanges...because they&#39;re carrying out their work in public.

* **It would be neat if we could democratize the creation of cryptographic protocols**.  I think giving people easier and more transparent access to these kinds of things could foster some grassroots innovation, where people would build *exactly the security they needed* into a program&#39;s design...no more and no less.

    * This would stand in contrast to today&#39;s methods, where &quot;security&quot; is accomplished by standing on top of a mountain of protocols (using a literal zoo of cryptographic algorithms) to tunnel and log in somewhere that they are &quot;safe&quot;...and putting more data than they need to in that place.

* **But even &quot;simple&quot; cryptography is tricky to reason about, and people are lazy.**  I myself am pretty guilty of doing things like falling back on my GitHub password and resetting my keys instead of doing a good job of filing them in safe places.

    * Convincing people their programs should be &quot;organic and locally sourced&quot;... by tailor-making the protocols and asking their users to keep track of files, is going to be a hard sell to those who are happy to use OAuth and leave this all up to Google.

So pessimistically speaking, I don&#39;t know that we&#39;re going to be able to market easy-to-use key exchange to anyone as a killer feature.  It&#39;s a nice thought, and I certainly like having it available to tinker with.  But I&#39;d be surprised if anyone reading this has an idea how to use it in something they&#39;re working on.</description>
    
    <lastBuildDate>Mon, 09 May 2022 18:20:50 +0000</lastBuildDate>
    <category>Cryptography</category>
    <atom:link href="https://forum.rebol.info/t/key-exchange-methods-in-ren-c/1809.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Key Exchange Methods in Ren-C</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Having given a summary of <a href="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/">Checksums and Secure Hashes</a>, I thought I'd follow up with a quick description of something you're likely not as familiar with: <strong>Key Exchanges</strong>.</p>
<p>There's old quote I like (but can't find a source for):</p>
<blockquote>
<p>"The shared secret is capital.  We may spend it or squander it."</p>
</blockquote>
<p>An example of taking advantage of a shared secret is when people want to share an encrypted .ZIP file.  If you and your friend both know the encryption password that no one else knows...then you could put the file on a public server for your friend to download.  If you trust the encryption, the fact it was public would not matter.</p>
<p><strong>But what if the situation is that your friend has a password that only they know... and you have a password that only you know?</strong>  That wouldn't seem to help with the .ZIP file scenario, because it expects the same password to decrypt as was used to encrypt it.</p>
<p>Key Exchange is a way of taking your individual "passwords" and coming to an agreement on a third "password" that only the two of you know.  Amazingly enough, you can carry out the conversation where you establish the shared password in public.</p>
<h2>Creating one Shared Secret from two Non-Shared Secrets</h2>
<p>For educational purposes, people use paint-mixing as an analogy for key exchange.  It's really "multiplying big prime numbers" instead of mixing paint, but it's visual and easy to see.</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/184fa9035c24ffa1250e324b61acaa3915f7757e.png" data-download-href="https://forum.rebol.info/uploads/default/184fa9035c24ffa1250e324b61acaa3915f7757e" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/184fa9035c24ffa1250e324b61acaa3915f7757e_2_345x500.png" alt="image" data-base62-sha1="3t485Do7kYfAw6HMsMv5klePtsq" width="345" height="500" srcset="https://forum.rebol.info/uploads/default/optimized/1X/184fa9035c24ffa1250e324b61acaa3915f7757e_2_345x500.png, https://forum.rebol.info/uploads/default/original/1X/184fa9035c24ffa1250e324b61acaa3915f7757e.png 1.5x, https://forum.rebol.info/uploads/default/original/1X/184fa9035c24ffa1250e324b61acaa3915f7757e.png 2x" data-small-upload="https://forum.rebol.info/uploads/default/optimized/1X/184fa9035c24ffa1250e324b61acaa3915f7757e_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">image</span><span class="informations">480×695 28 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>This assumes everyone in the world has some kind of weird "common paint".  This paint isn't white (because if you mixed it with something that would be too easy to guess at the precise shade you had mixed it with).  And it isn't black (because mixing might just get you something too dark to measure well).</p>
<p>But the key point to absorb is what the diagram says: <strong>we assume that mixture separation is expensive</strong>.  Once you've mixed the common paint with your secret color, it produces a new shade that no one else knows how to make exactly.</p>
<p>When you and your friend exchange your mixtures you cleverly go to your private lairs and each add your secret color to the other's mixture.  <strong>Now both of you have the same weird color, and this is a secret you share.</strong></p>
<h2>Ren-C Supports Diffie-Hellman Key Exchange</h2>
<p>I oversimplified this by saying you each start with a "password"...because that made it sound like you could just pick a phrase out of your head.  In reality, choosing your secret involves some tricky math...to make sure your secret paint color is a <em>good</em> secret paint color.  You don't pick these--you ask the computer to generate it.</p>
<p>To get the ball rolling, you need to specify what kind of "common paint" to use.  You make that by picking two suitable prime numbers, a modulus and a base.  Then you can ask for a unique random secret to be generated.</p>
<p>For the sake of education, I've made it possible to use <em>relatively bad</em> paint mixes with the /INSECURE refinement.  It won't allow numbers that are so broken the process won't work (for instance: non-primes, or primes that don't meet the basic requirements of the algorithm).  This lets you work with small enough numbers that you can see for yourself what's going on more easily.</p>
<p>So let's use a modulus of 9 and a base of 3:</p>
<pre><code>&gt;&gt; mine: dh-generate-keypair/insecure #{09} #{05}
== make object! [
    modulus: #{09}
    generator: #{05}
    private-key: #{07}
    public-key: #{05}
]

&gt;&gt; theirs: dh-generate-keypair/insecure #{09} #{05}
== make object! [
    modulus: #{09}
    generator: #{05}
    private-key: #{05}
    public-key: #{02}
]
</code></pre>
<p>So privately, my secret is 7... and their secret is 5.  But we want to come to an agreement on a new number while only sharing with the public my "mixture" of 5 and their mixture of 2.</p>
<pre><code>&gt;&gt; my-shared: dh-compute-secret mine theirs.public-key
== #{02}

&gt;&gt; their-shared: dh-compute-secret theirs mine.public-key
== #{02}
</code></pre>
<p>So here you see each of us could come to a common agreement of 2.  You can follow through the math on the <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Wikipedia page</a> if you want...but it's enough to know that it works.</p>
<p>What makes for a good (big!) modulus and base to use?  You don't really need to come up with them yourself, although <a href="https://security.stackexchange.com/a/103924">there are algorithms for it</a>.  There are papers that publish some good choices--and we should probably provide a way to default to well-known ones, like maybe accept either an object or an ISSUE!</p>
<pre><code>&gt;&gt; dh-generate-keypair #RFC-3526
; ...or...
&gt;&gt; dh-generate-keypair make object [base: ..., modulus: ...]
</code></pre>
<p>But the main thing to know is that <strong>both sides have to agree on the "common paint" to use</strong>, in order to come to the same conclusion.  So <code>dh-compute-secret</code> won't work unless the same numbers were used here.</p>
<h2>We Also Support Elliptic Curve Key Exchange (ECHDE)</h2>
<p>Modern Internet Transport Security has moved on from traditional Diffie Hellman to trickier math.  But the premise is the same.</p>
<p>In the interface, we only support two "common paints" for this method: "secp256r1" and "curve25519".  There's no option for small answers here:</p>
<pre><code>&gt;&gt; mine: ecc-generate-keypair 'curve25519
== make object! [
    public-key: make object! [
        x: #{121413C34DC265025F24CBEBBA6065B9
             75F1BFA6E493D07A0F4776FAE03DC245}
        y: #{00000000000000000000000000000000
             00000000000000000000000000000000}
    ]
    private-key: #{610A8D99A72500B3A2E8A1FD714FA412
                   17F0A0EA5EDFC9CFBDAE0425E199DC70}
]

&gt;&gt; theirs: ecc-generate-keypair 'curve25519
== make object! [
    public-key: make object! [
        x: #{10D65366D8C9229591C99903D3B5EB0F
             57709AD27E37989E4782050D2B9B2B93}
        y: #{00000000000000000000000000000000
             00000000000000000000000000000000}
    ]
    private-key: #{7C3262BF6028B049EEDC6C37E37A8261
                   EA4DF31F16E4D534D92A7EF11D974618}
]
</code></pre>
<p>But it works the same way; you come to the same conclusion when combining your partner's public portion with your private portion:</p>
<pre><code>&gt;&gt; my-secret: (
    ecdh-shared-secret 'curve25519 mine.private-key theirs.public-key
)
== #{E27891074A60250580B8F2C7CB2448A9AA491C97161D7C8D381348D90E438025}

&gt;&gt; their-secret: (
    ecdh-shared-secret 'curve25519 mine.private-key theirs.public-key
)
== #{E27891074A60250580B8F2C7CB2448A9AA491C97161D7C8D381348D90E438025}

&gt;&gt; my-secret = their-secret
== #[true]
</code></pre>
<h2>Would Average Users Ever Need Key Exchange Functions?</h2>
<p>Right now, the main reason most people would care whether the language has these key exchanges is because without them you can't do TLS.  So no reading or writing over HTTPS.</p>
<p>You really only need key exchanges when protocols are trying to establish private channels of communication.  So notably, some cryptographic protocols (like Bitcoin) don't need key exchanges...because they're carrying out their work in public.</p>
<ul>
<li>
<p><strong>It would be neat if we could democratize the creation of cryptographic protocols</strong>.  I think giving people easier and more transparent access to these kinds of things could foster some grassroots innovation, where people would build <em>exactly the security they needed</em> into a program's design...no more and no less.</p>
<ul>
<li>This would stand in contrast to today's methods, where "security" is accomplished by standing on top of a mountain of protocols (using a literal zoo of cryptographic algorithms) to tunnel and log in somewhere that they are "safe"...and putting more data than they need to in that place.</li>
</ul>
</li>
<li>
<p><strong>But even "simple" cryptography is tricky to reason about, and people are lazy.</strong>  I myself am pretty guilty of doing things like falling back on my GitHub password and resetting my keys instead of doing a good job of filing them in safe places.</p>
<ul>
<li>Convincing people their programs should be "organic and locally sourced"... by tailor-making the protocols and asking their users to keep track of files, is going to be a hard sell to those who are happy to use OAuth and leave this all up to Google.</li>
</ul>
</li>
</ul>
<p>So pessimistically speaking, I don't know that we're going to be able to market easy-to-use key exchange to anyone as a killer feature.  It's a nice thought, and I certainly like having it available to tinker with.  But I'd be surprised if anyone reading this has an idea how to use it in something they're working on.</p>
          <p><a href="https://forum.rebol.info/t/key-exchange-methods-in-ren-c/1809/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/key-exchange-methods-in-ren-c/1809/1</link>
        <pubDate>Mon, 09 May 2022 18:20:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1809-1</guid>
        <source url="https://forum.rebol.info/t/key-exchange-methods-in-ren-c/1809.rss">Key Exchange Methods in Ren-C</source>
      </item>
  </channel>
</rss>
