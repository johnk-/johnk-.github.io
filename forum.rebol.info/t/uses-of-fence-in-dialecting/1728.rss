<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Uses of FENCE! In Dialecting</title>
    <link>https://forum.rebol.info/t/uses-of-fence-in-dialecting/1728</link>
    <description>I&#39;m now committed to [make braces a new array type](https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727). Rebol has put itself in a bad position by using that particularly valuable piece of keyboard real-estate for something &quot;superficial&quot; like making strings a little cleaner, sometimes.  :-/

# `[block]` `•`  `(group)` `•` `{fence}`

It&#39;s *likely* (though not 100% set in stone) that FENCE! will evaluate by running MAKE OBJECT!.  But what might it do in other dialects?

* *&quot;If there&#39;s an integer inside of a pair of fences, such as `{{10}}`, then that represents a citation.  Citations can appear at either the beginning or end of a reference block.&quot;*

* *&quot;In the PARSE dialect, blocks are used to represent subrules.  Groups switch over to running ordinary code as with DO.  While fences are used to... (insert your active imagination here)&quot;*

## If FENCE! Were Inert, That Would Change Dialecting Possibilities

Fences don&#39;t necessarily have to produce an object under evaluation.  If it wasn&#39;t, you could do things like pass it to an arity-1 MAKE:

    &gt;&gt; obj: make {x: 10 y: 20}
    == ...object x: 10 y: 20...  ; whatever literals look like

Switching to an arity-1 MAKE could be dialected, if you needed to slip things like a parent object in:

    &gt;&gt; obj2: make {&lt;parent&gt; obj, x: 30}  ; potential dialect for mentioning parent
    == ...object x: 30 y: 20....

    &gt;&gt; obj3: make {{obj} x: 30}  ; weirder but more succinct dialect parent concept
    == ...object x: 30 y: 20...

Less disruptive, we could just say it reduces:

    &gt;&gt; reduce {x: 10 y: 20}
    == make object! [x: 10 y: 20]  ; or whatever

Then GET-FENCE! could do the same:

    &gt;&gt; :{x: 10 y: 20}
    == make object! [x: 10 y: 20]  ; or whatever</description>
    
    <lastBuildDate>Wed, 21 Feb 2024 00:39:47 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/uses-of-fence-in-dialecting/1728.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Uses of FENCE! In Dialecting</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm now committed to <a href="https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727">make braces a new array type</a>. Rebol has put itself in a bad position by using that particularly valuable piece of keyboard real-estate for something "superficial" like making strings a little cleaner, sometimes.  :-/</p>
<h1>
<a name="block-group-fence-1" class="anchor" href="https://forum.rebol.info#block-group-fence-1"></a><code>[block]</code> <code>•</code>  <code>(group)</code> <code>•</code> <code>{fence}</code>
</h1>
<p>It's <em>likely</em> (though not 100% set in stone) that FENCE! will evaluate by running MAKE OBJECT!.  But what might it do in other dialects?</p>
<ul>
<li>
<p><em>"If there's an integer inside of a pair of fences, such as <code>{{10}}</code>, then that represents a citation.  Citations can appear at either the beginning or end of a reference block."</em></p>
</li>
<li>
<p><em>"In the PARSE dialect, blocks are used to represent subrules.  Groups switch over to running ordinary code as with DO.  While fences are used to... (insert your active imagination here)"</em></p>
</li>
</ul>
<h2>
<a name="if-fence-were-inert-that-would-change-dialecting-possibilities-2" class="anchor" href="https://forum.rebol.info#if-fence-were-inert-that-would-change-dialecting-possibilities-2"></a>If FENCE! Were Inert, That Would Change Dialecting Possibilities</h2>
<p>Fences don't necessarily have to produce an object under evaluation.  If it wasn't, you could do things like pass it to an arity-1 MAKE:</p>
<pre><code>&gt;&gt; obj: make {x: 10 y: 20}
== ...object x: 10 y: 20...  ; whatever literals look like
</code></pre>
<p>Switching to an arity-1 MAKE could be dialected, if you needed to slip things like a parent object in:</p>
<pre><code>&gt;&gt; obj2: make {&lt;parent&gt; obj, x: 30}  ; potential dialect for mentioning parent
== ...object x: 30 y: 20....

&gt;&gt; obj3: make {{obj} x: 30}  ; weirder but more succinct dialect parent concept
== ...object x: 30 y: 20...
</code></pre>
<p>Less disruptive, we could just say it reduces:</p>
<pre><code>&gt;&gt; reduce {x: 10 y: 20}
== make object! [x: 10 y: 20]  ; or whatever
</code></pre>
<p>Then GET-FENCE! could do the same:</p>
<pre><code>&gt;&gt; :{x: 10 y: 20}
== make object! [x: 10 y: 20]  ; or whatever
</code></pre>
          <p><a href="https://forum.rebol.info/t/uses-of-fence-in-dialecting/1728/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/uses-of-fence-in-dialecting/1728/1</link>
        <pubDate>Thu, 30 Sep 2021 11:36:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1728-1</guid>
        <source url="https://forum.rebol.info/t/uses-of-fence-in-dialecting/1728.rss">Uses of FENCE! In Dialecting</source>
      </item>
  </channel>
</rss>
