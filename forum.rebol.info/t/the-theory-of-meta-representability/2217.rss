<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Theory of Meta-Representability</title>
    <link>https://forum.rebol.info/t/the-theory-of-meta-representability/2217</link>
    <description>*I wrote this to try and give some context to an AI before asking it a naming question.  For a less high-level treatment, see **[A Justification of Generalized Isotopes](https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918)**.*

---

Most imperative programming languages do not delve into the relationships between things like null and undefined... as if they were mathematical, and you were going to discover that if you take the square root of undefined you get null, etc.  :-)  But I am doing something analogous to that.

In particular, I&#39;m making it possible to push variables which may contain states like undefined and null &quot;upwards&quot; representationally, to where whatever they are holding becomes &quot;Meta&quot;.

    &gt;&gt; var
    ** Error: var is nothing

    &gt;&gt; var: meta var
    == ~

    &gt;&gt; var  ; no error on access
    == ~

    &gt;&gt; var: meta var  ; again, no error
    == &#39;~

    &gt;&gt; var
    == &#39;~

    &gt;&gt; var: meta var  ; no error again
    == &#39;&#39;~

If something is a special form (like nothing or null) the first META step will use tildes to indicate it has been raised to a &quot;quasiform&quot;.  Quasiforms do not cause errors when accessed from variables, and can be put into &quot;reified&quot; contexts like arrays.  Then every META step after that adds a level of quoting, indicated by an apostrophe.

UNMETA reverses this process, ultimately getting back to the special form which cannot be put in arrays and--in the case of &quot;nothing&quot;--causes errors on access.

    &gt;&gt; var: unmeta first [&#39;~]
    == ~

    &gt;&gt; var
    == ~

    &gt;&gt; var: unmeta var  ; result is nothing, shows nothing in the console
    
    &gt;&gt; var
    ** Error: var is nothing

If something didn&#39;t start out as a special form, then it will just get quoting levels added by apostrophes:

    &gt;&gt; var
    == 10

    &gt;&gt; var: meta var
    == &#39;10

    &gt;&gt; var: meta var
    == &#39;&#39;10

So what this lets people do is kind of work generically and persist special states of interest to them in meta form, multiplexed alongside things that had been conventional values.

The special states are called &quot;antiforms&quot;.  And they aren&#39;t just things like NULL and NOTHING, but also [VOID](https://forum.rebol.info/t/the-void-in-null-out-protocol/1880)... [logical TRUE and FALSE](https://forum.rebol.info/t/why-theres-no-boolean-type-storable-in-a-block/2095) (which means all reified states can be truthy)... [multi-return packs](https://forum.rebol.info/t/thought-reimplementing-multi-return-via-isotopic-block/1955), [raised errors](https://forum.rebol.info/t/fail-vs-return-raise-the-new-age-of-definitional-errors/1852), [splice representations](https://forum.rebol.info/t/the-long-awaited-death-of-only/1607)...

To a newcomer, the merits or applications may not be obvious.  But this model gives phenomenal expressive power.  And I definitely do think of it as being like the &quot;higher mathematics&quot; of Rebol.

---

https://www.youtube.com/watch?v=B1J6Ou4q8vE</description>
    
    <lastBuildDate>Sat, 24 Aug 2024 20:05:43 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/the-theory-of-meta-representability/2217.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Theory of Meta-Representability</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>I wrote this to try and give some context to an AI before asking it a naming question.  For a less high-level treatment, see <strong><a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918">A Justification of Generalized Isotopes</a></strong>.</em></p>
<hr>
<p>Most imperative programming languages do not delve into the relationships between things like null and undefined... as if they were mathematical, and you were going to discover that if you take the square root of undefined you get null, etc.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20">  But I am doing something analogous to that.</p>
<p>In particular, I'm making it possible to push variables which may contain states like undefined and null "upwards" representationally, to where whatever they are holding becomes "Meta".</p>
<pre><code>&gt;&gt; var
** Error: var is nothing

&gt;&gt; var: meta var
== ~

&gt;&gt; var  ; no error on access
== ~

&gt;&gt; var: meta var  ; again, no error
== '~

&gt;&gt; var
== '~

&gt;&gt; var: meta var  ; no error again
== ''~
</code></pre>
<p>If something is a special form (like nothing or null) the first META step will use tildes to indicate it has been raised to a "quasiform".  Quasiforms do not cause errors when accessed from variables, and can be put into "reified" contexts like arrays.  Then every META step after that adds a level of quoting, indicated by an apostrophe.</p>
<p>UNMETA reverses this process, ultimately getting back to the special form which cannot be put in arrays and--in the case of "nothing"--causes errors on access.</p>
<pre><code>&gt;&gt; var: unmeta first ['~]
== ~

&gt;&gt; var
== ~

&gt;&gt; var: unmeta var  ; result is nothing, shows nothing in the console

&gt;&gt; var
** Error: var is nothing
</code></pre>
<p>If something didn't start out as a special form, then it will just get quoting levels added by apostrophes:</p>
<pre><code>&gt;&gt; var
== 10

&gt;&gt; var: meta var
== '10

&gt;&gt; var: meta var
== ''10
</code></pre>
<p>So what this lets people do is kind of work generically and persist special states of interest to them in meta form, multiplexed alongside things that had been conventional values.</p>
<p>The special states are called "antiforms".  And they aren't just things like NULL and NOTHING, but also <a href="https://forum.rebol.info/t/the-void-in-null-out-protocol/1880">VOID</a>... <a href="https://forum.rebol.info/t/why-theres-no-boolean-type-storable-in-a-block/2095">logical TRUE and FALSE</a> (which means all reified states can be truthy)... <a href="https://forum.rebol.info/t/thought-reimplementing-multi-return-via-isotopic-block/1955">multi-return packs</a>, <a href="https://forum.rebol.info/t/fail-vs-return-raise-the-new-age-of-definitional-errors/1852">raised errors</a>, <a href="https://forum.rebol.info/t/the-long-awaited-death-of-only/1607">splice representations</a>...</p>
<p>To a newcomer, the merits or applications may not be obvious.  But this model gives phenomenal expressive power.  And I definitely do think of it as being like the "higher mathematics" of Rebol.</p>
<hr>
<p><a href="https://www.youtube.com/watch?v=B1J6Ou4q8vE">Animation vs. Math</a></p>

          <p><a href="https://forum.rebol.info/t/the-theory-of-meta-representability/2217/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-theory-of-meta-representability/2217/1</link>
        <pubDate>Sat, 24 Aug 2024 18:38:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2217-1</guid>
        <source url="https://forum.rebol.info/t/the-theory-of-meta-representability/2217.rss">The Theory of Meta-Representability</source>
      </item>
  </channel>
</rss>
