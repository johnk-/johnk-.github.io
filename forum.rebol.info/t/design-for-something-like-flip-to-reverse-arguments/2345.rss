<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Design for Something Like FLIP To Reverse Arguments</title>
    <link>https://forum.rebol.info/t/design-for-something-like-flip-to-reverse-arguments/2345</link>
    <description>[quote=&quot;bradrn, post:6, topic:1238&quot;]
If someone wants to specify the second parameter first they can always write `flip cons` or `flip snoc`.
[/quote]

The design of a FLIP-like operation raises some questions. 

If it were an operator that acted on functions, it wouldn&#39;t retrigger them.  You&#39;d have to say:

    &gt;&gt; append &#39;d [a b c]
    == [a b c d]

    &gt;&gt; run flip append/ [a b c] &#39;d
    == [a b c d]

Alternately, I guess you could use slash to run a GROUP!, but then you&#39;d have a disabling slash and a running slash:

    &gt;&gt; /(flip append/) [a b c] &#39;d
    == [a b c d]

If it were instead something along the lines of RUN, where applying the flipped function was implicit, you could write:

    &gt;&gt; flip append/ [a b c] &#39;d
    == [a b c d]

I don&#39;t think **`flip/append`** being a synonym for **`/(flip append/)`** is a generically useful idea, compared to the likes of **`not/even?/`** for cascading.

But if the [weird idea of dialected CHAIN!](https://forum.rebol.info/t/dialecting-function-calls-new-weird-powerful/2310) ever came to pass, FLIP could go into a distinct mode based on receiving a function in the place other functions have refinements...

    &gt;&gt; append/
    == ~#[frame! [value series]]~

    &gt;&gt; flip append/
    == ~#[frame! [series value]]~

    &gt;&gt; flip:append [a b c] &#39;d
    == [a b c d]</description>
    
    <lastBuildDate>Tue, 03 Dec 2024 02:43:15 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/design-for-something-like-flip-to-reverse-arguments/2345.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Design for Something Like FLIP To Reverse Arguments</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="6" data-topic="1238">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"><a href="https://forum.rebol.info/t/parameter-order-in-rebol/1238/6">Parameter Order in Rebol</a></div>
<blockquote>
<p>If someone wants to specify the second parameter first they can always write <code>flip cons</code> or <code>flip snoc</code>.</p>
</blockquote>
</aside>
<p>The design of a FLIP-like operation raises some questions.</p>
<p>If it were an operator that acted on functions, it wouldn't retrigger them.  You'd have to say:</p>
<pre><code>&gt;&gt; append 'd [a b c]
== [a b c d]

&gt;&gt; run flip append/ [a b c] 'd
== [a b c d]
</code></pre>
<p>Alternately, I guess you could use slash to run a GROUP!, but then you'd have a disabling slash and a running slash:</p>
<pre><code>&gt;&gt; /(flip append/) [a b c] 'd
== [a b c d]
</code></pre>
<p>If it were instead something along the lines of RUN, where applying the flipped function was implicit, you could write:</p>
<pre><code>&gt;&gt; flip append/ [a b c] 'd
== [a b c d]
</code></pre>
<p>I don't think <strong><code>flip/append</code></strong> being a synonym for <strong><code>/(flip append/)</code></strong> is a generically useful idea, compared to the likes of <strong><code>not/even?/</code></strong> for cascading.</p>
<p>But if the <a href="https://forum.rebol.info/t/dialecting-function-calls-new-weird-powerful/2310">weird idea of dialected CHAIN!</a> ever came to pass, FLIP could go into a distinct mode based on receiving a function in the place other functions have refinements...</p>
<pre><code>&gt;&gt; append/
== ~#[frame! [value series]]~

&gt;&gt; flip append/
== ~#[frame! [series value]]~

&gt;&gt; flip:append [a b c] 'd
== [a b c d]
</code></pre>
          <p><a href="https://forum.rebol.info/t/design-for-something-like-flip-to-reverse-arguments/2345/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/design-for-something-like-flip-to-reverse-arguments/2345/1</link>
        <pubDate>Mon, 02 Dec 2024 14:41:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2345-1</guid>
        <source url="https://forum.rebol.info/t/design-for-something-like-flip-to-reverse-arguments/2345.rss">Design for Something Like FLIP To Reverse Arguments</source>
      </item>
  </channel>
</rss>
