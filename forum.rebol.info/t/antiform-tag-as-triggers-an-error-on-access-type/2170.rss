<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Antiform TAG! As &quot;Triggers an Error On Access&quot; Type</title>
    <link>https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170</link>
    <description>In the post [&quot;Shades of Distinction In Non-Valued Intents&quot;](https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604), I had originally written:

[quote=&quot;hostilefork, post:1, topic:1604&quot;]
Eventually the NULL state became the isotopic status of the WORD! null, so a **~null~** antiform.

It joined **~true~** and **~false~** as being antiforms you could test for truthiness and falseyness. But if you were okay with getting an error on conditional testing, any other word could be used:

```
  config: ~initialize-system-not-called~

  initialize-system: func [
      {Let&#39;s say this function reads the config file}
  ][
      ...
      config: [...]
  ]
```

This usually causes a nice labeled message anytime someone tries to use CONFIG:

Going this route would create a pain point for anyone who thought they were going to test for whether you had a config initialized by testing **if config [...]**. So that has to be considered as whether it&#39;s what you want.
[/quote]

I&#39;ve come to question this as things have gone on, to where I&#39;m wondering if all antiform words should be reserved by the system (there are system purposes for the ~end~ antiform, for instance).

A generic &quot;error trigger&quot; might come from something like antiform TAG!, permitting spaces:

    config: ~&lt;INITIALIZE-SYSTEM not called&gt;~

    initialize-system: func [
        {Let&#39;s say this function reads the config file}
    ][
        ...
        config: [...]
    ]

    &gt;&gt; config
    ** Error: INITIALIZE-SYSTEM not called</description>
    
    <lastBuildDate>Sat, 09 Mar 2024 10:54:42 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Antiform TAG! As &quot;Triggers an Error On Access&quot; Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2170">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>TAG! does feel like the right type for this.</p>
</blockquote>
</aside>
<p>I actually got the original idea for having "named trash" from some scripts <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> had where he had configuration in the header of a script, something in the spirit of:</p>
<pre><code>Rebol [
    Title: "Configurable Foo Interface Script"
    DLL-Directory: &lt;directory where FOO.DLL lives&gt;
]

...stuff...

if tag? system.script.header.DLL-Directory [
    fail "Set the DLL-Directory in the header to where FOO.DLL lives"
]
libfoo: make library! system.script.header.DLL-Directory
</code></pre>
<p>I thought <em>"hm, that's an interesting idea, a sort of placeholder...would be better if it errored on accidental access"</em>.</p>
<p>So when TRASH! was initially conceived--prior to isotopes--it was a reified type that started and ended with tilde (actually called BAD-WORD!)</p>
<pre><code> DLL-Directory: ~directory-where-FOO-DLL-lives~
</code></pre>
<p>That does show weaknesses in having to convert the dots and spaces to dashes.  So going back to the original placeholder type of TAG! is an interesting move.</p>
<p>It's tempting to say that the whole category would be called TRASH! and take over that role.  But unfortunately <strong><code>&lt;&gt;</code></strong> is a WORD!, so there'd be no slight-looking <strong>~&lt;&gt;~</strong> trash for unset variables.  It would have to be <strong><code>~&lt;unset&gt;~</code></strong> or something like that, which doesn't have the brevity of <strong>~</strong> that I am very attached to now... though there is a slightness to it which can <em>sometimes</em> be undesirable.</p>
<p>It seems to me that DEFAULT should treat these as unassigned:</p>
<pre><code>&gt;&gt; x: ~&lt;some placeholder&gt;~
== ~&lt;some placeholder&gt;~  ; anti

&gt;&gt; x: default [10 + 20]
== 30

&gt;&gt; x
== 30

&gt;&gt; x: default [3 + 4]
== 30
</code></pre>
<p>But does that mean UNSET? should return true, had you asked <strong>unset? 'x</strong> ?</p>
<p>So some issues to sort through here regarding what to call it and how it acts.</p>
          <p><a href="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170/3</link>
        <pubDate>Sat, 09 Mar 2024 09:11:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2170-3</guid>
        <source url="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170.rss">Antiform TAG! As &quot;Triggers an Error On Access&quot; Type</source>
      </item>
      <item>
        <title>Antiform TAG! As &quot;Triggers an Error On Access&quot; Type</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="6" data-topic="1604">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/6">Shades of Distinction In Non-Valued Intents</a>
</div>
<blockquote>
<p>I've come to question this as things have gone on, to where I'm wondering if all antiform words should be reserved by the system (there are system purposes for the ~end~ antiform, for instance).</p>
<p>A generic "error trigger" might come from something like antiform TAG!, permitting spaces</p>
</blockquote>
</aside>
<p>I like this idea! TAG! does feel like the right type for this.</p>
          <p><a href="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170/2</link>
        <pubDate>Sat, 09 Mar 2024 08:50:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2170-2</guid>
        <source url="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170.rss">Antiform TAG! As &quot;Triggers an Error On Access&quot; Type</source>
      </item>
      <item>
        <title>Antiform TAG! As &quot;Triggers an Error On Access&quot; Type</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the post <a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604">"Shades of Distinction In Non-Valued Intents"</a>, I had originally written:</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1604">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/1">Shades of Distinction In Non-Valued Intents</a>
</div>
<blockquote>
<p>Eventually the NULL state became the isotopic status of the WORD! null, so a <strong>~null~</strong> antiform.</p>
<p>It joined <strong>~true~</strong> and <strong>~false~</strong> as being antiforms you could test for truthiness and falseyness. But if you were okay with getting an error on conditional testing, any other word could be used:</p>
<pre><code class="lang-plaintext">  config: ~initialize-system-not-called~

  initialize-system: func [
      {Let's say this function reads the config file}
  ][
      ...
      config: [...]
  ]
</code></pre>
<p>This usually causes a nice labeled message anytime someone tries to use CONFIG:</p>
<p>Going this route would create a pain point for anyone who thought they were going to test for whether you had a config initialized by testing <strong>if config [...]</strong>. So that has to be considered as whether it's what you want.</p>
</blockquote>
</aside>
<p>I've come to question this as things have gone on, to where I'm wondering if all antiform words should be reserved by the system (there are system purposes for the ~end~ antiform, for instance).</p>
<p>A generic "error trigger" might come from something like antiform TAG!, permitting spaces:</p>
<pre><code>config: ~&lt;INITIALIZE-SYSTEM not called&gt;~

initialize-system: func [
    {Let's say this function reads the config file}
][
    ...
    config: [...]
]

&gt;&gt; config
** Error: INITIALIZE-SYSTEM not called
</code></pre>
          <p><a href="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170/1</link>
        <pubDate>Sat, 09 Mar 2024 08:49:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2170-1</guid>
        <source url="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170.rss">Antiform TAG! As &quot;Triggers an Error On Access&quot; Type</source>
      </item>
  </channel>
</rss>
