<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Symbols and Mushing in Rebmu</title>
    <link>https://forum.rebol.info/t/symbols-and-mushing-in-rebmu/1797</link>
    <description>There are symbols like &amp; and | which were applied somewhat haphazardly in the original Rebmu, as experiments.

For instance, **&amp;** was a shortcut for DOES.

    phi: does [print &quot;hi&quot;]
    =&gt;
    PHI &amp;[print &quot;hi&quot;]

(There&#39;ve been murmurs of other uses for &amp;, but no hard decisions on it yet...and even if it were used for HTML characters like **&amp;nbsp**, it might remain free standalone as a symbol.)

For a time, **|** in Ren-C was not something you could redefine as a WORD!, it was its own datatype &quot;BAR!&quot;.  But that has been replaced by the successful COMMA!, retaking it as a word.  It was used in function definition, and some of the contractions I&#39;ve suggested as things like **`fqC[...]`** =&gt; **function [a b c] [...]** were contracted as simply **`c|[...]`**

There was a handling of dots which allowed a quick way of doing redefinitions:

         .[aBCdEF] =&gt; .[a bc d ef] =&gt; a: :bc d: :ef

There&#39;s still some back-and-forth on the handling of lone dot.  I like it being a reduced case of a TUPLE! in some sense...because it makes it easier to write generic fusing code for things like JOIN.  But putting into the new SYMBOL! class (which cannot appear in TUPLE! or PATH!) might have advantages, and helpers to count the dots might serve just as well.

I&#39;m not sure what the in-language default function for plain dot will be, but it&#39;s likely that it will not be more powerful than either **.a** or **a.** enough to justify that **a.a** should be interpreted as **a . a**.

It&#39;s important to look at the specifics of mushing with symbols as they have no case, so the breakapart rules are different.  I&#39;ve diagrammed some of these before.

    a+b =&gt; a+b  ; compatibility with all lowercase code
    a+B =&gt; a+ b  ; favors breaking to the left, vs. a +b

I&#39;ll delve into these justifications, but since I&#39;m deleting the old definitions of things like **a&amp;** and **a|** I wanted to put a placeholder topic for discussing it.</description>
    
    <lastBuildDate>Mon, 07 Mar 2022 14:46:42 +0000</lastBuildDate>
    <category>Rebmu</category>
    <atom:link href="https://forum.rebol.info/t/symbols-and-mushing-in-rebmu/1797.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Symbols and Mushing in Rebmu</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There are symbols like &amp; and | which were applied somewhat haphazardly in the original Rebmu, as experiments.</p>
<p>For instance, <strong>&amp;</strong> was a shortcut for DOES.</p>
<pre><code>phi: does [print "hi"]
=&gt;
PHI &amp;[print "hi"]
</code></pre>
<p>(There've been murmurs of other uses for &amp;, but no hard decisions on it yet...and even if it were used for HTML characters like <strong>&amp;nbsp</strong>, it might remain free standalone as a symbol.)</p>
<p>For a time, <strong>|</strong> in Ren-C was not something you could redefine as a WORD!, it was its own datatype "BAR!".  But that has been replaced by the successful COMMA!, retaking it as a word.  It was used in function definition, and some of the contractions I've suggested as things like <strong><code>fqC[...]</code></strong> =&gt; <strong>function [a b c] [...]</strong> were contracted as simply <strong><code>c|[...]</code></strong></p>
<p>There was a handling of dots which allowed a quick way of doing redefinitions:</p>
<pre><code>     .[aBCdEF] =&gt; .[a bc d ef] =&gt; a: :bc d: :ef
</code></pre>
<p>There's still some back-and-forth on the handling of lone dot.  I like it being a reduced case of a TUPLE! in some sense...because it makes it easier to write generic fusing code for things like JOIN.  But putting into the new SYMBOL! class (which cannot appear in TUPLE! or PATH!) might have advantages, and helpers to count the dots might serve just as well.</p>
<p>I'm not sure what the in-language default function for plain dot will be, but it's likely that it will not be more powerful than either <strong>.a</strong> or <strong>a.</strong> enough to justify that <strong>a.a</strong> should be interpreted as <strong>a . a</strong>.</p>
<p>It's important to look at the specifics of mushing with symbols as they have no case, so the breakapart rules are different.  I've diagrammed some of these before.</p>
<pre><code>a+b =&gt; a+b  ; compatibility with all lowercase code
a+B =&gt; a+ b  ; favors breaking to the left, vs. a +b
</code></pre>
<p>I'll delve into these justifications, but since I'm deleting the old definitions of things like <strong>a&amp;</strong> and <strong>a|</strong> I wanted to put a placeholder topic for discussing it.</p>
          <p><a href="https://forum.rebol.info/t/symbols-and-mushing-in-rebmu/1797/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/symbols-and-mushing-in-rebmu/1797/1</link>
        <pubDate>Mon, 07 Mar 2022 08:08:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1797-1</guid>
        <source url="https://forum.rebol.info/t/symbols-and-mushing-in-rebmu/1797.rss">Symbols and Mushing in Rebmu</source>
      </item>
  </channel>
</rss>
