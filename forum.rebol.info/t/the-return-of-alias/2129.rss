<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Return of ALIAS?</title>
    <link>https://forum.rebol.info/t/the-return-of-alias/2129</link>
    <description>Rebol2 had a strange concept of the ability to create aliases for words:

    rebol2&gt;&gt; alias &#39;append &quot;foo&quot;
    == foo

    rebol2&gt;&gt; foo [a b c] &lt;d&gt;
    == [a b c &lt;d&gt;]

    rebol2&gt;&gt; foo: 10
    == 10

    rebol2&gt;&gt; append
    == 10

*(You might wonder why it takes a string, vs. being **alias &#39;append &#39;foo**.  The problem is that if you tried that, the fact that merely mentioning words creates variables for them in historical Rebol would mean that FOO appeared to already exist as an unset variable.  The alias wouldn&#39;t override it.)*

So I&#39;ve actually been wondering about a more modern version of ALIAS.  Because right now we have a sort of pain point on the idea that you can only create bound references to something when the names match up exactly.  If you have the thing under a different name, then you have to create a proxy variable to hold the value with the right name... but then you disconnect seeing updates of the original thing.

This could be particularly useful in module imports, where currently you don&#39;t see updates if something you import changes in the module you imported from.  EXPORT should likely default to providing declarations as read-only, and you should have to do something special if the importers can write a variable.  But it&#39;s come up frequently (both the desire to see updates, and to be able to write and have the changes seen by the module and other importers, without going through a level of indirection like an object)</description>
    
    <lastBuildDate>Sun, 15 Sep 2024 01:48:29 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/the-return-of-alias/2129.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Return of ALIAS?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2129">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>it's come up frequently (both the desire to see updates, and to be able to write and have the changes seen by the module and other importers, without going through a level of indirection like an object)</p>
</blockquote>
</aside>
<p>So the easiest way to implement this seems to be as a form of ACCESSOR:</p>
<p><a href="https://forum.rebol.info/t/a-dream-for-debugging-generalized-accessors/2259" class="inline-onebox">A Dream For Debugging: Generalized Accessors</a></p>
<p>With that, we could make constructs like:</p>
<pre><code>import [@some-module, exported-name &lt;as&gt; local-name]
;
; or more brief but potentially confusing dialected Rebol-y
;
import [@some-module, local-name: exported-name]  ; not an assignment, but...
</code></pre>
<p>The accessor could be rigged up so that accesses via LOCAL-NAME see changes in the variable that the module exported as EXPORTED-NAME.  The module could perhaps even be unloaded and reloaded, synchronizing the exports.  <em>(Not being able to patch a module and reload it without exiting and restarting the interpreter was a pain point for <a class="mention" href="https://forum.rebol.info/u/blackattr">@BlackATTR</a> while debugging modularized QUERY.)</em></p>
<p>So it's pretty clear that by default, you shouldn't be able to write to a module's state.  Since modules can be shared, I don't know if it's ever a good idea (unless you are sure you're the only client of the module?)  So writing to the accessors created for imports would be a rare thing.</p>
<p>And it seems like you might want assignment to mean something else--e.g. "I want to take back this variable for other uses, I don't need the module export anymore."  So maybe there's an accessor pattern here where writing to the variable "de-accessors" it?</p>
<p>We might consider the nuance of:</p>
<pre><code> g: getter $var
 s: setter $var
 a: alias $var
</code></pre>
<p>Maybe a GETTER can only read, but errors on writes... a SETTER can read and write... and an ALIAS will read, but if you ever write it the accessor is disconnected from VAR and it just holds a new value?</p>
<p>I just realized that even though these are enfix, <a href="https://forum.rebol.info/t/letting-go-of-enfix-path-dreams-but-fixing-it-with-magic/794/4">we can now pass them refinements</a>!</p>
<p>So it could be <strong><code>(a: alias:weak $var)</code></strong> and then setters could be set-only, while an ordinary alias permits both reads and writes where the write will write-through to the original variable... but weak makes writes unlink it from the variable.</p>
          <p><a href="https://forum.rebol.info/t/the-return-of-alias/2129/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-return-of-alias/2129/2</link>
        <pubDate>Sun, 15 Sep 2024 01:30:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2129-2</guid>
        <source url="https://forum.rebol.info/t/the-return-of-alias/2129.rss">The Return of ALIAS?</source>
      </item>
      <item>
        <title>The Return of ALIAS?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol2 had a strange concept of the ability to create aliases for words:</p>
<pre><code>rebol2&gt;&gt; alias 'append "foo"
== foo

rebol2&gt;&gt; foo [a b c] &lt;d&gt;
== [a b c &lt;d&gt;]

rebol2&gt;&gt; foo: 10
== 10

rebol2&gt;&gt; append
== 10
</code></pre>
<p><em>(You might wonder why it takes a string, vs. being <strong>alias 'append 'foo</strong>.  The problem is that if you tried that, the fact that merely mentioning words creates variables for them in historical Rebol would mean that FOO appeared to already exist as an unset variable.  The alias wouldn't override it.)</em></p>
<p>So I've actually been wondering about a more modern version of ALIAS.  Because right now we have a sort of pain point on the idea that you can only create bound references to something when the names match up exactly.  If you have the thing under a different name, then you have to create a proxy variable to hold the value with the right name... but then you disconnect seeing updates of the original thing.</p>
<p>This could be particularly useful in module imports, where currently you don't see updates if something you import changes in the module you imported from.  EXPORT should likely default to providing declarations as read-only, and you should have to do something special if the importers can write a variable.  But it's come up frequently (both the desire to see updates, and to be able to write and have the changes seen by the module and other importers, without going through a level of indirection like an object)</p>
          <p><a href="https://forum.rebol.info/t/the-return-of-alias/2129/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-return-of-alias/2129/1</link>
        <pubDate>Mon, 22 Jan 2024 15:07:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2129-1</guid>
        <source url="https://forum.rebol.info/t/the-return-of-alias/2129.rss">The Return of ALIAS?</source>
      </item>
  </channel>
</rss>
