<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Return of ALIAS?</title>
    <link>https://forum.rebol.info/t/the-return-of-alias/2129</link>
    <description>Rebol2 had a strange concept of the ability to create aliases for words:

    rebol2&gt;&gt; alias &#39;append &quot;foo&quot;
    == foo

    rebol2&gt;&gt; foo [a b c] &lt;d&gt;
    == [a b c &lt;d&gt;]

    rebol2&gt;&gt; foo: 10
    == 10

    rebol2&gt;&gt; append
    == 10

*(You might wonder why it takes a string, vs. being **alias &#39;append &#39;foo**.  The problem is that if you tried that, the fact that merely mentioning words creates variables for them in historical Rebol would mean that FOO appeared to already exist as an unset variable.  The alias wouldn&#39;t override it.)*

So I&#39;ve actually been wondering about a more modern version of ALIAS.  Because right now we have a sort of pain point on the idea that you can only create bound references to something when the names match up exactly.  If you have the thing under a different name, then you have to create a proxy variable to hold the value with the right name... but then you disconnect seeing updates of the original thing.

This could be particularly useful in module imports, where currently you don&#39;t see updates if something you import changes in the module you imported from.  EXPORT should likely default to providing declarations as read-only, and you should have to do something special if the importers can write a variable.  But it&#39;s come up frequently (both the desire to see updates, and to be able to write and have the changes seen by the module and other importers, without going through a level of indirection like an object)</description>
    
    <lastBuildDate>Mon, 22 Jan 2024 15:07:13 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/the-return-of-alias/2129.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Return of ALIAS?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Rebol2 had a strange concept of the ability to create aliases for words:</p>
<pre><code>rebol2&gt;&gt; alias 'append "foo"
== foo

rebol2&gt;&gt; foo [a b c] &lt;d&gt;
== [a b c &lt;d&gt;]

rebol2&gt;&gt; foo: 10
== 10

rebol2&gt;&gt; append
== 10
</code></pre>
<p><em>(You might wonder why it takes a string, vs. being <strong>alias 'append 'foo</strong>.  The problem is that if you tried that, the fact that merely mentioning words creates variables for them in historical Rebol would mean that FOO appeared to already exist as an unset variable.  The alias wouldn't override it.)</em></p>
<p>So I've actually been wondering about a more modern version of ALIAS.  Because right now we have a sort of pain point on the idea that you can only create bound references to something when the names match up exactly.  If you have the thing under a different name, then you have to create a proxy variable to hold the value with the right name... but then you disconnect seeing updates of the original thing.</p>
<p>This could be particularly useful in module imports, where currently you don't see updates if something you import changes in the module you imported from.  EXPORT should likely default to providing declarations as read-only, and you should have to do something special if the importers can write a variable.  But it's come up frequently (both the desire to see updates, and to be able to write and have the changes seen by the module and other importers, without going through a level of indirection like an object)</p>
          <p><a href="https://forum.rebol.info/t/the-return-of-alias/2129/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-return-of-alias/2129/1</link>
        <pubDate>Mon, 22 Jan 2024 15:07:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2129-1</guid>
        <source url="https://forum.rebol.info/t/the-return-of-alias/2129.rss">The Return of ALIAS?</source>
      </item>
  </channel>
</rss>
