<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>TRY... *again* :roll_eyes:</title>
    <link>https://forum.rebol.info/t/try-again/2025</link>
    <description>I have proposed a concept for TRY as trapping definitional errors and turning them into nulls, like this:

    &gt;&gt; take []
    ** Error: you can&#39;t take from an empty block (stopping further code)

    &gt;&gt; try take []
    == ~null~  ; isotope

And I&#39;ll just give a reminder that as this is trapping [definitional errors](https://forum.rebol.info/t/fail-vs-return-raise-the-new-age-of-definitional-failures/1852).  So failures from deeper inside code would not be caught... only errors that are returned by contract from the function being called.

    &gt;&gt; try compose [(1 / 0)]
    ** Error: division by zero (e.g. COMPOSE itself didn&#39;t raise the error)

*I&#39;ll remind everyone that it&#39;s a very slippery slope to trap &quot;deep errors&quot;, and this is why the deep error trapping concept is [hidden away as `sys.util.rescue`](https://forum.rebol.info/t/discouraging-use-of-trap/1871/3))*

## Why Return NULL From TRY (vs. void) ?

The decision to return null is to make the result falsey so it can be acted on:

    while [item: try take block] [
        ...
    ]

    all [
        try take block  ; if this fails we don&#39;t want to keep going
        ...
    ]

In the vernacular I use, I call NULL &quot;soft failure&quot;.  So TRY &quot;converts a definitional failure into soft failure&quot;, passing through all other results as-is.

## Comparison with similar word MAYBE

The MAYBE operation was defined as something that converts nulls to voids, and passes through everything else.  If you didn&#39;t know that, it&#39;s easy to see not intuiting what the difference between **try take block** and **maybe take block** would be.

You can get some odd-looking combinations with this, e.g.

     &gt;&gt; block1: [a b c]
     &gt;&gt; block2: []

     &gt;&gt; append block1 maybe try take block2
     == [a b c]

Which makes one wonder if MAYBE could be used to trap definitional errors as well as nulls and turn them into voids, so you could just write **append block1 maybe take block2**.

So it raises the question: are there null-returning operations that also return definitional errors, where one would want to suppress the null but not the error?  There&#39;s not enough experience for me to say yet.

## Usage in PARSE as opposed to OPT?

I&#39;ve wondered if TRY and MAYBE could have parallel meanings in PARSE, where you use TRY to continue but get NULL and MAYBE to skip things:

    &gt;&gt; parse &quot;aaa&quot; [some &quot;a&quot; maybe some &quot;b&quot;]
    == &quot;a&quot;

    &gt;&gt; parse &quot;aaa&quot; [some &quot;a&quot; var: try some &quot;b&quot;]
    ; first in pack of length 1
    == ~null~  ; isotope
 
    &gt;&gt; var
    == ~null~  ; isotope

Seeing the two operations as being very similar--only one voids while the other one nulls--feels interesting.  I just hadn&#39;t thought of MAYBE as a definitional-error-suppressor before.</description>
    
    <lastBuildDate>Fri, 14 Apr 2023 21:22:46 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/try-again/2025.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>TRY... *again* :roll_eyes:</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I have proposed a concept for TRY as trapping definitional errors and turning them into nulls, like this:</p>
<pre><code>&gt;&gt; take []
** Error: you can't take from an empty block (stopping further code)

&gt;&gt; try take []
== ~null~  ; isotope
</code></pre>
<p>And I'll just give a reminder that as this is trapping <a href="https://forum.rebol.info/t/fail-vs-return-raise-the-new-age-of-definitional-failures/1852">definitional errors</a>.  So failures from deeper inside code would not be caught... only errors that are returned by contract from the function being called.</p>
<pre><code>&gt;&gt; try compose [(1 / 0)]
** Error: division by zero (e.g. COMPOSE itself didn't raise the error)
</code></pre>
<p><em>I'll remind everyone that it's a very slippery slope to trap "deep errors", and this is why the deep error trapping concept is <a href="https://forum.rebol.info/t/discouraging-use-of-trap/1871/3">hidden away as <code>sys.util.rescue</code></a>)</em></p>
<h2>Why Return NULL From TRY (vs. void) ?</h2>
<p>The decision to return null is to make the result falsey so it can be acted on:</p>
<pre><code>while [item: try take block] [
    ...
]

all [
    try take block  ; if this fails we don't want to keep going
    ...
]
</code></pre>
<p>In the vernacular I use, I call NULL "soft failure".  So TRY "converts a definitional failure into soft failure", passing through all other results as-is.</p>
<h2>Comparison with similar word MAYBE</h2>
<p>The MAYBE operation was defined as something that converts nulls to voids, and passes through everything else.  If you didn't know that, it's easy to see not intuiting what the difference between <strong>try take block</strong> and <strong>maybe take block</strong> would be.</p>
<p>You can get some odd-looking combinations with this, e.g.</p>
<pre><code> &gt;&gt; block1: [a b c]
 &gt;&gt; block2: []

 &gt;&gt; append block1 maybe try take block2
 == [a b c]
</code></pre>
<p>Which makes one wonder if MAYBE could be used to trap definitional errors as well as nulls and turn them into voids, so you could just write <strong>append block1 maybe take block2</strong>.</p>
<p>So it raises the question: are there null-returning operations that also return definitional errors, where one would want to suppress the null but not the error?  There's not enough experience for me to say yet.</p>
<h2>Usage in PARSE as opposed to OPT?</h2>
<p>I've wondered if TRY and MAYBE could have parallel meanings in PARSE, where you use TRY to continue but get NULL and MAYBE to skip things:</p>
<pre><code>&gt;&gt; parse "aaa" [some "a" maybe some "b"]
== "a"

&gt;&gt; parse "aaa" [some "a" var: try some "b"]
; first in pack of length 1
== ~null~  ; isotope

&gt;&gt; var
== ~null~  ; isotope
</code></pre>
<p>Seeing the two operations as being very similar--only one voids while the other one nulls--feels interesting.  I just hadn't thought of MAYBE as a definitional-error-suppressor before.</p>
          <p><a href="https://forum.rebol.info/t/try-again/2025/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/try-again/2025/1</link>
        <pubDate>Fri, 14 Apr 2023 21:22:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2025-1</guid>
        <source url="https://forum.rebol.info/t/try-again/2025.rss">TRY... *again* :roll_eyes:</source>
      </item>
  </channel>
</rss>
