<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Renaming &quot;ANTIWORD&quot;...Time to Call It &quot;KEYWORD&quot;?</title>
    <link>https://forum.rebol.info/t/renaming-antiword-time-to-call-it-keyword/2277</link>
    <description>[Look at this nice table...](https://forum.rebol.info/t/which-antiforms-are-in-use/2276) (thanks for starting it, @bradrn)

![image|650x422, 75%](upload://nOJbjc6Ck0GLYDWQcyPY07VDoO4.png)

---

## ...Nice... Except For **&quot;antiword&quot;** :pouting_cat: 

To me, antiword sticks out like a sore thumb, there.

I&#39;ve deemed that you&#39;ll be able to create a QUASI-WORD! out of any word.  But the system will stop you from making antiwords out of anything but the endorsed words.  So far, that&#39;s:

* ~null~
* ~void~
* ~okay~
* ~end~
* ~NaN~  ([just a proposal at this point](https://forum.rebol.info/t/isotopes-and-nan-not-a-number/2245))

All other antiform words are reserved for future use.

*(`~end~` isn&#39;t famous yet.  But it&#39;s for when the system has built a frame but not executed it...that&#39;s what it puts in the slots when it runs out of input.  The reason argument fulfillment doesn&#39;t error &quot;in the moment&quot; is so that you can ask the system to build a frame from a callsite, and then do some alterations on it to supply missing parameters before you call it.  [For an example, see SWITCH2](https://forum.rebol.info/t/match-in-rust-vs-switch/1835/5?u=hostilefork))*

## So... What Are These Things, If Not ANTIWORDS?

They are--in a sense--the only *keywords* in the system.

It would be sort of a flex to call them that.  While yes--it admits that we do have them--it points out that there&#39;s only a handful.

But arguably dialects have &quot;keywords&quot; any time they recognize words literally (as UPARSE with its combinator map does--although you can pick whatever map you want).

I feel like we&#39;d probably go around using the term &quot;keyword&quot; when talking about dialects, and it would be confusing to differentiate that from these...so antiword perhaps a more *practical* choice, but...

## I Asked Claude.ai...

Claude didn&#39;t have any good suggestions (or at least none that I didn&#39;t have a good reason to shoot down because an existing usage of the term is more compelling... &quot;token&quot;, &quot;sigil&quot;, &quot;symbol&quot;, &quot;atom&quot; etc.).

But I did make a case for going with my gut of calling them keywords:

---

&quot;I do wonder if my worries over calling them keywords are overblown.  There&#39;s other terms that the system uses, like SET? to check if a variable is set or not, and you could rewrite that to check if something was a datatype of a &quot;set collection&quot;.  Then you could qualify it to say LIB/SET? to get the original definition of the test for variable set-or-unsetness.  Considering all the conflation in the system as it is, would it hurt to call these KEYWORD?&quot;

&quot;As I said, I kind of really want to call them that.  It also accents that the system only has a handful of keywords.  Maybe I should just go for it.&quot;

---

&gt; Your reasoning about potentially using &quot;keyword&quot; is compelling. Let&#39;s weigh the pros and cons:
&gt;
&gt; Pros of using &quot;keyword&quot;:
&gt;
&gt; 1. It aligns with your intuition and desire.
&gt; 2. It accurately represents their special status in the language.
&gt; 3. It emphasizes the language&#39;s unique feature of having very few true keywords.
&gt; 4. It&#39;s immediately understandable to most programmers.
&gt; 5. It&#39;s short and descriptive, meeting your initial criteria.
&gt;
&gt; Cons:
&gt;
&gt; 1. Potential confusion with dialect-specific keywords.
&gt; 2. Overloading an already common programming term.
&gt;
&gt; Considering your system already has some level of term overloading (like SET?), and given that these are indeed the closest thing to keywords in your language, the benefits might outweigh the drawbacks.
&gt;
&gt; If you do choose &quot;keyword&quot;, you could mitigate potential confusion by:
&gt;
&gt; 1. Clearly documenting the distinction between these language-level keywords and dialect-specific keywords.
&gt; 2. Using a qualified term like &quot;core keyword&quot; or &quot;system keyword&quot; when absolute clarity is needed.
&gt; 3. Providing clear examples in documentation to illustrate the difference.
&gt;
&gt; Alternatives that incorporate &quot;word&quot; if you decide against &quot;keyword&quot;:
&gt;
&gt; 1. Metaword
&gt; 2. Primeword
&gt; 3. Coreword
&gt; 4. Rootword
&gt;
&gt; However, given your explanation and the unique nature of your language, I believe using &quot;keyword&quot; could be justified. The term accurately represents their function, and with proper documentation, any potential confusion can be minimized.
&gt;
&gt; If you feel that &quot;keyword&quot; truly fits best and you&#39;re willing to manage any minor confusion that might arise, it seems reasonable to go with your instinct here. Sometimes, the most intuitive choice is the right one, especially when it comes to language design where clarity for the users is paramount.

---

## Is &quot;Keyword&quot; a Brave Choice?  Or Just Confusing?

It feels like a consequential choice.

Maybe it isn&#39;t, really.  You very rarely need to mention the category--in particular because each one is so special you generally name it explicitly in your type specs.

The case I mention about SET? and unsetness of variables conflating with &quot;set&quot;-the-collection is probably an example of something people would run into more often day to day.

I think I&#39;m leaning to just doing it, for the marketing if nothing else: **&quot;Ren-C has 5 keywords.&quot;**  That&#39;s a pretty interesting talking point to pique someone&#39;s curiosity.  (&quot;Why 5?  Why *those* 5?&quot;)  It could lead people into the journey of learning what makes isotopes so special and important to the language, to realize that the keywords live out of band of the code itself...yet can be juggled into and out of reification as needed.

&quot;Only WORD! *antiforms* are keywords&quot; actually carries some weighty philosophy in it.  :face_with_monocle:

---

&gt; Your decision to use &quot;keyword&quot; for these special elements is compelling, and I agree that it could be a strong choice both technically and from a marketing perspective. Let&#39;s break down why this decision works well:
&gt;
&gt; 1. Marketing appeal: &quot;Ren-C has 5 keywords&quot; is indeed an intriguing statement. It&#39;s concise, provocative, and likely to spark curiosity among programmers familiar with other languages that typically have many more keywords.
&gt; 2. Educational opportunity: As you pointed out, this choice naturally leads to questions that can help introduce newcomers to some of Ren-C&#39;s unique concepts, like isotopes and the distinction between forms and antiforms.
&gt; 3. Philosophical depth: The statement &quot;Only WORD! antiforms are keywords&quot; encapsulates a lot of Ren-C&#39;s design philosophy. It hints at the language&#39;s flexibility while also pointing to its fundamental structures.
&gt; 4. Technical accuracy: These elements do function similarly to keywords in other languages, in that they have special, reserved meanings within the system.
&gt; 5. Simplicity: &quot;Keyword&quot; is a familiar term to most programmers, making it easier for newcomers to grasp the concept initially, even if the full nuances require more in-depth understanding.
&gt;
&gt; Using &quot;keyword&quot; in this way could serve as an entry point to explain several key concepts:
&gt;
&gt; 1. The nature of antiforms and their relationship to reified forms
&gt; 2. The flexibility of the language in allowing redefinition of most terms
&gt; 3. The concept of isotopes and their importance in Ren-C
&gt; 4. The unique evaluation model that allows these keywords to exist &quot;out of band&quot; of regular code
&gt;
&gt; By choosing &quot;keyword&quot;, you&#39;re not just naming a concept, but potentially creating a teaching tool that can help introduce Ren-C&#39;s unique features and philosophy.
&gt;
&gt; This approach aligns well with the idea of making the language both powerful and learnable. The familiar term serves as a bridge to introduce more complex and unique concepts, potentially making Ren-C more accessible to newcomers while still highlighting its innovative features.</description>
    
    <lastBuildDate>Sun, 15 Sep 2024 06:47:20 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/renaming-antiword-time-to-call-it-keyword/2277.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Renaming &quot;ANTIWORD&quot;...Time to Call It &quot;KEYWORD&quot;?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>I’m not enormously interested in the ‘thoughts’ of an LLM. But personally, I think ‘keyword’ is a good choice of name: it emphasises that this is a limited set of built-in names with special semantics.</p>
          <p><a href="https://forum.rebol.info/t/renaming-antiword-time-to-call-it-keyword/2277/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/renaming-antiword-time-to-call-it-keyword/2277/2</link>
        <pubDate>Sun, 15 Sep 2024 06:47:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2277-2</guid>
        <source url="https://forum.rebol.info/t/renaming-antiword-time-to-call-it-keyword/2277.rss">Renaming &quot;ANTIWORD&quot;...Time to Call It &quot;KEYWORD&quot;?</source>
      </item>
      <item>
        <title>Renaming &quot;ANTIWORD&quot;...Time to Call It &quot;KEYWORD&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://forum.rebol.info/t/which-antiforms-are-in-use/2276">Look at this nice table...</a> (thanks for starting it, <a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a>)</p>
<p><img src="https://forum.rebol.info/uploads/default/original/1X/a6ee0127cb8175a53078cc62645ab6e9f956eff8.png" alt="image" data-base62-sha1="nOJbjc6Ck0GLYDWQcyPY07VDoO4" width="487" height="316"></p>
<hr>
<h2><a name="p-7674-nice-except-for-antiword-pouting_cat-1" class="anchor" href="https://forum.rebol.info#p-7674-nice-except-for-antiword-pouting_cat-1"></a>...Nice... Except For <strong>"antiword"</strong> <img src="https://forum.rebol.info/images/emoji/twitter/pouting_cat.png?v=12" title=":pouting_cat:" class="emoji" alt=":pouting_cat:" loading="lazy" width="20" height="20"></h2>
<p>To me, antiword sticks out like a sore thumb, there.</p>
<p>I've deemed that you'll be able to create a QUASI-WORD! out of any word.  But the system will stop you from making antiwords out of anything but the endorsed words.  So far, that's:</p>
<ul>
<li>~null~</li>
<li>~void~</li>
<li>~okay~</li>
<li>~end~</li>
<li>~NaN~  (<a href="https://forum.rebol.info/t/isotopes-and-nan-not-a-number/2245">just a proposal at this point</a>)</li>
</ul>
<p>All other antiform words are reserved for future use.</p>
<p><em>(<code>~end~</code> isn't famous yet.  But it's for when the system has built a frame but not executed it...that's what it puts in the slots when it runs out of input.  The reason argument fulfillment doesn't error "in the moment" is so that you can ask the system to build a frame from a callsite, and then do some alterations on it to supply missing parameters before you call it.  <a href="https://forum.rebol.info/t/match-in-rust-vs-switch/1835/5">For an example, see SWITCH2</a>)</em></p>
<h2><a name="p-7674-so-what-are-these-things-if-not-antiwords-2" class="anchor" href="https://forum.rebol.info#p-7674-so-what-are-these-things-if-not-antiwords-2"></a>So... What Are These Things, If Not ANTIWORDS?</h2>
<p>They are--in a sense--the only <em>keywords</em> in the system.</p>
<p>It would be sort of a flex to call them that.  While yes--it admits that we do have them--it points out that there's only a handful.</p>
<p>But arguably dialects have "keywords" any time they recognize words literally (as UPARSE with its combinator map does--although you can pick whatever map you want).</p>
<p>I feel like we'd probably go around using the term "keyword" when talking about dialects, and it would be confusing to differentiate that from these...so antiword perhaps a more <em>practical</em> choice, but...</p>
<h2><a name="p-7674-i-asked-claudeai-3" class="anchor" href="https://forum.rebol.info#p-7674-i-asked-claudeai-3"></a>I Asked Claude.ai...</h2>
<p>Claude didn't have any good suggestions (or at least none that I didn't have a good reason to shoot down because an existing usage of the term is more compelling... "token", "sigil", "symbol", "atom" etc.).</p>
<p>But I did make a case for going with my gut of calling them keywords:</p>
<hr>
<p>"I do wonder if my worries over calling them keywords are overblown.  There's other terms that the system uses, like SET? to check if a variable is set or not, and you could rewrite that to check if something was a datatype of a "set collection".  Then you could qualify it to say LIB/SET? to get the original definition of the test for variable set-or-unsetness.  Considering all the conflation in the system as it is, would it hurt to call these KEYWORD?"</p>
<p>"As I said, I kind of really want to call them that.  It also accents that the system only has a handful of keywords.  Maybe I should just go for it."</p>
<hr>
<blockquote>
<p>Your reasoning about potentially using "keyword" is compelling. Let's weigh the pros and cons:</p>
<p>Pros of using "keyword":</p>
<ol>
<li>It aligns with your intuition and desire.</li>
<li>It accurately represents their special status in the language.</li>
<li>It emphasizes the language's unique feature of having very few true keywords.</li>
<li>It's immediately understandable to most programmers.</li>
<li>It's short and descriptive, meeting your initial criteria.</li>
</ol>
<p>Cons:</p>
<ol>
<li>Potential confusion with dialect-specific keywords.</li>
<li>Overloading an already common programming term.</li>
</ol>
<p>Considering your system already has some level of term overloading (like SET?), and given that these are indeed the closest thing to keywords in your language, the benefits might outweigh the drawbacks.</p>
<p>If you do choose "keyword", you could mitigate potential confusion by:</p>
<ol>
<li>Clearly documenting the distinction between these language-level keywords and dialect-specific keywords.</li>
<li>Using a qualified term like "core keyword" or "system keyword" when absolute clarity is needed.</li>
<li>Providing clear examples in documentation to illustrate the difference.</li>
</ol>
<p>Alternatives that incorporate "word" if you decide against "keyword":</p>
<ol>
<li>Metaword</li>
<li>Primeword</li>
<li>Coreword</li>
<li>Rootword</li>
</ol>
<p>However, given your explanation and the unique nature of your language, I believe using "keyword" could be justified. The term accurately represents their function, and with proper documentation, any potential confusion can be minimized.</p>
<p>If you feel that "keyword" truly fits best and you're willing to manage any minor confusion that might arise, it seems reasonable to go with your instinct here. Sometimes, the most intuitive choice is the right one, especially when it comes to language design where clarity for the users is paramount.</p>
</blockquote>
<hr>
<h2><a name="p-7674-is-keyword-a-brave-choice-or-just-confusing-4" class="anchor" href="https://forum.rebol.info#p-7674-is-keyword-a-brave-choice-or-just-confusing-4"></a>Is "Keyword" a Brave Choice?  Or Just Confusing?</h2>
<p>It feels like a consequential choice.</p>
<p>Maybe it isn't, really.  You very rarely need to mention the category--in particular because each one is so special you generally name it explicitly in your type specs.</p>
<p>The case I mention about SET? and unsetness of variables conflating with "set"-the-collection is probably an example of something people would run into more often day to day.</p>
<p>I think I'm leaning to just doing it, for the marketing if nothing else: <strong>"Ren-C has 5 keywords."</strong>  That's a pretty interesting talking point to pique someone's curiosity.  ("Why 5?  Why <em>those</em> 5?")  It could lead people into the journey of learning what makes isotopes so special and important to the language, to realize that the keywords live out of band of the code itself...yet can be juggled into and out of reification as needed.</p>
<p>"Only WORD! <em>antiforms</em> are keywords" actually carries some weighty philosophy in it.  <img src="https://forum.rebol.info/images/emoji/twitter/face_with_monocle.png?v=12" title=":face_with_monocle:" class="emoji" alt=":face_with_monocle:" loading="lazy" width="20" height="20"></p>
<hr>
<blockquote>
<p>Your decision to use "keyword" for these special elements is compelling, and I agree that it could be a strong choice both technically and from a marketing perspective. Let's break down why this decision works well:</p>
<ol>
<li>Marketing appeal: "Ren-C has 5 keywords" is indeed an intriguing statement. It's concise, provocative, and likely to spark curiosity among programmers familiar with other languages that typically have many more keywords.</li>
<li>Educational opportunity: As you pointed out, this choice naturally leads to questions that can help introduce newcomers to some of Ren-C's unique concepts, like isotopes and the distinction between forms and antiforms.</li>
<li>Philosophical depth: The statement "Only WORD! antiforms are keywords" encapsulates a lot of Ren-C's design philosophy. It hints at the language's flexibility while also pointing to its fundamental structures.</li>
<li>Technical accuracy: These elements do function similarly to keywords in other languages, in that they have special, reserved meanings within the system.</li>
<li>Simplicity: "Keyword" is a familiar term to most programmers, making it easier for newcomers to grasp the concept initially, even if the full nuances require more in-depth understanding.</li>
</ol>
<p>Using "keyword" in this way could serve as an entry point to explain several key concepts:</p>
<ol>
<li>The nature of antiforms and their relationship to reified forms</li>
<li>The flexibility of the language in allowing redefinition of most terms</li>
<li>The concept of isotopes and their importance in Ren-C</li>
<li>The unique evaluation model that allows these keywords to exist "out of band" of regular code</li>
</ol>
<p>By choosing "keyword", you're not just naming a concept, but potentially creating a teaching tool that can help introduce Ren-C's unique features and philosophy.</p>
<p>This approach aligns well with the idea of making the language both powerful and learnable. The familiar term serves as a bridge to introduce more complex and unique concepts, potentially making Ren-C more accessible to newcomers while still highlighting its innovative features.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/renaming-antiword-time-to-call-it-keyword/2277/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/renaming-antiword-time-to-call-it-keyword/2277/1</link>
        <pubDate>Sun, 15 Sep 2024 05:50:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2277-1</guid>
        <source url="https://forum.rebol.info/t/renaming-antiword-time-to-call-it-keyword/2277.rss">Renaming &quot;ANTIWORD&quot;...Time to Call It &quot;KEYWORD&quot;?</source>
      </item>
  </channel>
</rss>
