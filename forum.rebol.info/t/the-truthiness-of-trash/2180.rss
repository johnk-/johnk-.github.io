<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Truthiness of Trash</title>
    <link>https://forum.rebol.info/t/the-truthiness-of-trash/2180</link>
    <description>After a couple months of being otherwise occupied, I now have some time to get back to things here...

Picking up around where I left off...I was deep into making a new bootstrap executable, as part of being able to implement the new [FENCE! array type](https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727).  This new executable was being aligned to &quot;modern&quot; conventions *(though often doing a weakened version of them)*.  Doing that triggered a lot of...thoughts.  Here&#39;s another.

---

**Does it really add value to consider **[the trash state](https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078)** (an antiform blank held by unset variables) to be neither truthy nor falsey?**

Here&#39;s a quick survey of how UNSET! (the most trash-like thing in historical Rebol) is handled:

### Rebol2

    rebol2&gt;&gt; either get/any &#39;asdf [print &quot;truthy&quot;] [print &quot;falsey&quot;]
    ** Script Error: either is missing its condition argument

    rebol2&gt;&gt; unset? all [get/any &#39;asdf]
    == true

    rebol2&gt;&gt; unset? any [get/any &#39;asdf]
    == true

    rebol2&gt;&gt; case [get/any &#39;asdf [print &quot;truthy&quot;]]
    ** Script Error: Block did not return a value

### R3-Alpha

    r3-alpha&gt;&gt; either get/any &#39;asdf [print &quot;truthy&quot;] [print &quot;falsey&quot;]
    ** Script error: either does not allow unset! for its condition argument

    r3-alpha&gt;&gt; unset? all [get/any &#39;asdf]
    == true

    r3-alpha&gt;&gt; unset? any [get/any &#39;asdf]
    == false  ; ...huh?

    r3-alpha&gt;&gt; any [get/any &#39;asdf 1020]   
    == 1020

    r3-alpha&gt;&gt; case [get/any &#39;asdf [print &quot;truthy&quot;]]
    ** Script error: block did not return a value

### Red

    red&gt;&gt; either get/any &#39;asdf [print &quot;truthy&quot;] [print &quot;falsey&quot;]
    *** Script Error: block did not return a value

    red&gt;&gt; unset? all [get/any &#39;asdf]
    == true

    red&gt;&gt; unset? any [get/any &#39;asdf]
    == true

    red&gt;&gt; case [get/any &#39;asdf [print &quot;truthy&quot;]]
    *** Script Error: block did not return a value

## Oldes Rebol3

Transparent in [ANY and ALL](https://github.com/Oldes/Rebol3/commit/2ba01ead3b5da1ab609fa25a0c675b30e96bb163) (like a Ren-C void), but presumably still an error in plain IF or EITHER or CASE...

## Ren-C&#39;s &quot;Always Error&quot; Is More *Consistent*, But...

Clearly people have been pushing away from it being an error.

So does being &quot;ornery&quot; for conditional logic really help matters?  When we consider the dual role of trash as an &quot;uninteresting, but successful&quot; result, might we get as much (or more?) value from considering it to be always truthy?

For example: Ren-C uses trash as the result of PRINT when the print actually produces output.  Otherwise, you get NULL.

    &gt;&gt; message: &quot;Hello&quot;
    == &quot;Hello&quot;

    &gt;&gt; print message  ; won&#39;t have a console &quot;==&quot; due to being a trash result
    Hello

    &gt;&gt; trash? print message
    Hello
    == ~true~  ; anti

    &gt;&gt; message: null
    == ~null~  ; anti

    &gt;&gt; print maybe message
    == ~null~  ; anti

    &gt;&gt; print []
    == ~null~  ; anti

Trash has the property of suppressing console output, which is desirable in most print cases--at least those that do print output.  And if you said `(x: print &quot;Hello&quot;)` you&#39;d get a variable that would create an error on access, which seems also desirable.

If trash was truthy, that makes it easier to act on the trash-vs-null distinction in something like an ANY or ALL construct.

## Should &quot;Meaningless but Truthy&quot; = &quot;Unset Variable State&quot;?

A related question may be if functions like PRINT should be returning the same value as what is held by an unset variable.

Now that non-antiform BLANK! itself is truthy, might it be a better choice?

    &gt;&gt; print &quot;Hello&quot;
    Hello
    == _

But then...

* For the visual we seek, the console would need to not print BLANK!.  But I find it unsatisfying to have a non-antiform be what has &quot;no representation&quot;.

* If you assigned the result of this &quot;meaningless&quot; value to a variable, you wouldn&#39;t have that added protection that the variable would appear unset.

## Truthy Trash Seems To Have More Pluses than Minuses

My &quot;semantic safety&quot; bias initially had made me think that when you have a function like PRINT, it&#39;s nice to catch potential mistakes when you tried to act like it was a function that could meaningfully be tested for some kind of logical result.  So I pushed R3-Alpha&#39;s error from IF and EITHER further into ANY and ALL.

Then I went and made it so that when the PRINT received an opted-out input, it gave back NULL instead of trash.  :face_with_diagonal_mouth:  So it was something you could act on with ELSE, but not other conditional constructs.

The evolution from UNSET! to the blank-antiform that is today&#39;s trash has been a long and winding one.  Working around its ornery-ness gave rise to all kinds of interesting designs like voids, and invisibles like ELIDE PRINT.

But though I&#39;m sure that I haven&#39;t considered all the angles yet...having trash be neither-true-nor-false is looking more like a dying historical artifact than something with a clear motivation applicable to the present.

Trash being always truthy offers consistency...and it&#39;s possible to ELIDE it to get &quot;no vote&quot; so it won&#39;t affect an ANY or ALL (the way Oldes R3 treats unsets).  Yet having the vote isn&#39;t entirely useless either.  I can&#39;t think of a whole lot of downside, so I think it&#39;s worth trying.

---

A better axis of orneryness that may actually catch more problems in practice is: **[Should Trash be Illegal in Comparisons](https://forum.rebol.info/t/making-call-raise-a-definitional-error-for-bad-exit-codes/2068/2?u=hostilefork)**

(I point out in that discussion that simply disabling the ability to check trash for truthiness/falseyness is kind of a strange counterpart to a routine that returns--say--an INTEGER! in all cases, where you get zero information from testing an integer conditionally but without anything to stop you...making the disablement of testing trash conditionally seem like a fairly empty gesture.)</description>
    
    <lastBuildDate>Sat, 04 May 2024 02:03:44 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/the-truthiness-of-trash/2180.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Truthiness of Trash</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>After a couple months of being otherwise occupied, I now have some time to get back to things here...</p>
<p>Picking up around where I left off...I was deep into making a new bootstrap executable, as part of being able to implement the new <a href="https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727">FENCE! array type</a>.  This new executable was being aligned to "modern" conventions <em>(though often doing a weakened version of them)</em>.  Doing that triggered a lot of...thoughts.  Here's another.</p>
<hr>
<p><strong>Does it really add value to consider <strong><a href="https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078">the trash state</a></strong> (an antiform blank held by unset variables) to be neither truthy nor falsey?</strong></p>
<p>Here's a quick survey of how UNSET! (the most trash-like thing in historical Rebol) is handled:</p>
<h3>
<a name="rebol2-1" class="anchor" href="https://forum.rebol.info#rebol2-1"></a>Rebol2</h3>
<pre><code>rebol2&gt;&gt; either get/any 'asdf [print "truthy"] [print "falsey"]
** Script Error: either is missing its condition argument

rebol2&gt;&gt; unset? all [get/any 'asdf]
== true

rebol2&gt;&gt; unset? any [get/any 'asdf]
== true

rebol2&gt;&gt; case [get/any 'asdf [print "truthy"]]
** Script Error: Block did not return a value
</code></pre>
<h3>
<a name="r3-alpha-2" class="anchor" href="https://forum.rebol.info#r3-alpha-2"></a>R3-Alpha</h3>
<pre><code>r3-alpha&gt;&gt; either get/any 'asdf [print "truthy"] [print "falsey"]
** Script error: either does not allow unset! for its condition argument

r3-alpha&gt;&gt; unset? all [get/any 'asdf]
== true

r3-alpha&gt;&gt; unset? any [get/any 'asdf]
== false  ; ...huh?

r3-alpha&gt;&gt; any [get/any 'asdf 1020]   
== 1020

r3-alpha&gt;&gt; case [get/any 'asdf [print "truthy"]]
** Script error: block did not return a value
</code></pre>
<h3>
<a name="red-3" class="anchor" href="https://forum.rebol.info#red-3"></a>Red</h3>
<pre><code>red&gt;&gt; either get/any 'asdf [print "truthy"] [print "falsey"]
*** Script Error: block did not return a value

red&gt;&gt; unset? all [get/any 'asdf]
== true

red&gt;&gt; unset? any [get/any 'asdf]
== true

red&gt;&gt; case [get/any 'asdf [print "truthy"]]
*** Script Error: block did not return a value
</code></pre>
<h2>
<a name="oldes-rebol3-4" class="anchor" href="https://forum.rebol.info#oldes-rebol3-4"></a>Oldes Rebol3</h2>
<p>Transparent in <a href="https://github.com/Oldes/Rebol3/commit/2ba01ead3b5da1ab609fa25a0c675b30e96bb163">ANY and ALL</a> (like a Ren-C void), but presumably still an error in plain IF or EITHER or CASE...</p>
<h2>
<a name="ren-cs-always-error-is-more-consistent-but-5" class="anchor" href="https://forum.rebol.info#ren-cs-always-error-is-more-consistent-but-5"></a>Ren-C's "Always Error" Is More <em>Consistent</em>, But...</h2>
<p>Clearly people have been pushing away from it being an error.</p>
<p>So does being "ornery" for conditional logic really help matters?  When we consider the dual role of trash as an "uninteresting, but successful" result, might we get as much (or more?) value from considering it to be always truthy?</p>
<p>For example: Ren-C uses trash as the result of PRINT when the print actually produces output.  Otherwise, you get NULL.</p>
<pre><code>&gt;&gt; message: "Hello"
== "Hello"

&gt;&gt; print message  ; won't have a console "==" due to being a trash result
Hello

&gt;&gt; trash? print message
Hello
== ~true~  ; anti

&gt;&gt; message: null
== ~null~  ; anti

&gt;&gt; print maybe message
== ~null~  ; anti

&gt;&gt; print []
== ~null~  ; anti
</code></pre>
<p>Trash has the property of suppressing console output, which is desirable in most print cases--at least those that do print output.  And if you said <code>(x: print "Hello")</code> you'd get a variable that would create an error on access, which seems also desirable.</p>
<p>If trash was truthy, that makes it easier to act on the trash-vs-null distinction in something like an ANY or ALL construct.</p>
<h2>
<a name="should-meaningless-but-truthy-unset-variable-state-6" class="anchor" href="https://forum.rebol.info#should-meaningless-but-truthy-unset-variable-state-6"></a>Should "Meaningless but Truthy" = "Unset Variable State"?</h2>
<p>A related question may be if functions like PRINT should be returning the same value as what is held by an unset variable.</p>
<p>Now that non-antiform BLANK! itself is truthy, might it be a better choice?</p>
<pre><code>&gt;&gt; print "Hello"
Hello
== _
</code></pre>
<p>But then...</p>
<ul>
<li>
<p>For the visual we seek, the console would need to not print BLANK!.  But I find it unsatisfying to have a non-antiform be what has "no representation".</p>
</li>
<li>
<p>If you assigned the result of this "meaningless" value to a variable, you wouldn't have that added protection that the variable would appear unset.</p>
</li>
</ul>
<h2>
<a name="truthy-trash-seems-to-have-more-pluses-than-minuses-7" class="anchor" href="https://forum.rebol.info#truthy-trash-seems-to-have-more-pluses-than-minuses-7"></a>Truthy Trash Seems To Have More Pluses than Minuses</h2>
<p>My "semantic safety" bias initially had made me think that when you have a function like PRINT, it's nice to catch potential mistakes when you tried to act like it was a function that could meaningfully be tested for some kind of logical result.  So I pushed R3-Alpha's error from IF and EITHER further into ANY and ALL.</p>
<p>Then I went and made it so that when the PRINT received an opted-out input, it gave back NULL instead of trash.  <img src="https://forum.rebol.info/images/emoji/twitter/face_with_diagonal_mouth.png?v=12" title=":face_with_diagonal_mouth:" class="emoji" alt=":face_with_diagonal_mouth:" loading="lazy" width="20" height="20">  So it was something you could act on with ELSE, but not other conditional constructs.</p>
<p>The evolution from UNSET! to the blank-antiform that is today's trash has been a long and winding one.  Working around its ornery-ness gave rise to all kinds of interesting designs like voids, and invisibles like ELIDE PRINT.</p>
<p>But though I'm sure that I haven't considered all the angles yet...having trash be neither-true-nor-false is looking more like a dying historical artifact than something with a clear motivation applicable to the present.</p>
<p>Trash being always truthy offers consistency...and it's possible to ELIDE it to get "no vote" so it won't affect an ANY or ALL (the way Oldes R3 treats unsets).  Yet having the vote isn't entirely useless either.  I can't think of a whole lot of downside, so I think it's worth trying.</p>
<hr>
<p>A better axis of orneryness that may actually catch more problems in practice is: <strong><a href="https://forum.rebol.info/t/making-call-raise-a-definitional-error-for-bad-exit-codes/2068/2">Should Trash be Illegal in Comparisons</a></strong></p>
<p>(I point out in that discussion that simply disabling the ability to check trash for truthiness/falseyness is kind of a strange counterpart to a routine that returns--say--an INTEGER! in all cases, where you get zero information from testing an integer conditionally but without anything to stop you...making the disablement of testing trash conditionally seem like a fairly empty gesture.)</p>
          <p><a href="https://forum.rebol.info/t/the-truthiness-of-trash/2180/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-truthiness-of-trash/2180/1</link>
        <pubDate>Fri, 03 May 2024 17:27:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2180-1</guid>
        <source url="https://forum.rebol.info/t/the-truthiness-of-trash/2180.rss">The Truthiness of Trash</source>
      </item>
  </channel>
</rss>
