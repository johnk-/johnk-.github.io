<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Killing Off Historical &quot;SKIP&quot; in PARSE</title>
    <link>https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557</link>
    <description>SKIP suggests you&#39;re not using the result.  Yet historical SKIP doesn&#39;t really do that:

    rebol2&gt; parse [1] [set x skip]
    rebol2&gt; x
    == 1  ; How was this &quot;skipped&quot; exactly?

After contemplation of many possibilities for what this might be (including **`*`**, or **`&lt;*&gt;`**, or **`?`**, or just plain period (**`.`**), I settled on **`&lt;any&gt;`**.

    &gt;&gt; parse [1] [x: &lt;any&gt;]
    &gt;&gt; x
    == 1

I&#39;m quite happy with it--especially in light of removing ANY as a looping combinator from the default combinator set.  It brings ANY to its coherent systemic meaning of ANY-ONE-OF... as opposed to ANY-NUMBER-OF.

But @IngoHohmann suggested that SKIP might be related to ELIDE.  So I tried:

    &gt;&gt; uparse &quot;ab&quot; [&quot;a&quot; skip]
    == &quot;a&quot;

This would make SKIP equivalent to **`ELIDE &lt;any&gt;`**.

## But `SKIP` as `ELIDE &lt;ANY&gt;` IS RARELY USEFUL, AND CONFUSING

If you want `ELIDE &lt;ANY&gt;` just write that.

The general skip takes an argument of how much to skip, and having a PARSE analog to SKIP that takes no argument is just confusing.

**It may be** that SKIP taking an argument is worth having:

    &gt;&gt; uparse &quot;aaab&quot; [skip (3) &quot;b&quot;]
    == &quot;b&quot;

But then we have to decide what SKIP returns:

    &gt;&gt; uparse &quot;aaab&quot; [skip (3)]
    == ???

And you can say that particular case with **`3 &lt;any&gt;`** and it&#39;s shorter.

## Either Way, the Historical Use Is Pointless

So SKIP is not in UPARSE.  Maybe it will have a reinvention some day with a new meaning.</description>
    
    <lastBuildDate>Fri, 22 Mar 2024 20:24:29 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Killing Off Historical &quot;SKIP&quot; in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1557">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>After contemplation of many possibilities for what this might be (including <strong><code>*</code></strong>, or <strong><code>&lt;*&gt;</code></strong>, or <strong><code>?</code></strong>, or just plain period (<strong><code>.</code></strong>), I settled on <strong><code>&lt;any&gt;</code></strong>.</p>
<pre><code class="lang-plaintext">&gt;&gt; parse [1] [x: &lt;any&gt;]
&gt;&gt; x
== 1
</code></pre>
<p>I'm quite happy with it--especially in light of removing ANY as a looping combinator from the default combinator set. It brings ANY to its coherent systemic meaning of ANY-ONE-OF... as opposed to ANY-NUMBER-OF.</p>
</blockquote>
</aside>
<p>Since I'm making a new bootstrap executable to facilitate FENCE!, I'm patching it to modern behaviors for PARSE3.  This includes the behavior of SKIP as being arity-1 and taking how much to skip.</p>
<p>I'm quite pleased with most UPARSE redesigns, including that one.  But the substitute for <em>"match any single item"</em> being the <strong><code>&lt;any&gt;</code></strong> tag gave me pause to ask "does this feel right, in light of modern understandings?"</p>
<p>I think I've come to believe that TAG! combinators are all arity-0, which <code>&lt;any&gt;</code> is.  But most other tag combinators synthesize things from midair without advancing the input.  Not advancing the input might be a good rule for a tag combinator?.  Perhaps that's over-restrictive.</p>
<p>Might it be better if it were just <strong><code>one</code></strong>?</p>
<pre><code>&gt;&gt; parse [1020] [x: one]
&gt;&gt; x
== 1020
</code></pre>
<p>It might suggest a class of combinators that captured more items (<strong>two</strong>, <strong>three</strong>, etc.).  Hence they would be a worse choice than e.g. <strong>skip 2</strong> if you didn't want to synthesize the values, so hopefully people wouldn't reach for them unless they really wanted blocks.  But that would create an irregularity that ONE wouldn't make a block when the others did (if ONE gave back a block, it means the captured thing was itself a block).  Or maybe it's a PICK where the series is implicit?</p>
<pre><code>&gt;&gt; parse [1020 304] [x: two]
&gt;&gt; x
== 304
</code></pre>
<p>(That would make it seem like it should be FIRST and SECOND instead of ONE and TWO, but I don't particularly like FIRST for this... I don't think.)</p>
<p>I think I like <strong><code>ONE</code></strong>.  It's easy to type, and I think it seems more meaningful than <code>&lt;any&gt;</code>.  <a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662">Especially when there is an ANY combinator</a> that does something more related to the non-PARSE ANY.</p>
<p>We could also have an arity-0 NEXT combinator that could return the next position, if you were trying to convey more that you were just skipping ahead and not intending to take any input.</p>
          <p><a href="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557/15</link>
        <pubDate>Fri, 22 Mar 2024 14:36:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1557-15</guid>
        <source url="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557.rss">Killing Off Historical &quot;SKIP&quot; in PARSE</source>
      </item>
      <item>
        <title>Killing Off Historical &quot;SKIP&quot; in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="https://forum.rebol.info/t/omit-vs-elide/1831">OMIT vs ELIDE</a></p>
          <p><a href="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557/4</link>
        <pubDate>Thu, 26 May 2022 21:38:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1557-4</guid>
        <source url="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557.rss">Killing Off Historical &quot;SKIP&quot; in PARSE</source>
      </item>
      <item>
        <title>Killing Off Historical &quot;SKIP&quot; in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>SKIP suggests you're not using the result.  Yet historical SKIP doesn't really do that:</p>
<pre><code>rebol2&gt; parse [1] [set x skip]
rebol2&gt; x
== 1  ; How was this "skipped" exactly?
</code></pre>
<p>After contemplation of many possibilities for what this might be (including <strong><code>*</code></strong>, or <strong><code>&lt;*&gt;</code></strong>, or <strong><code>?</code></strong>, or just plain period (<strong><code>.</code></strong>), I settled on <strong><code>&lt;any&gt;</code></strong>.</p>
<pre><code>&gt;&gt; parse [1] [x: &lt;any&gt;]
&gt;&gt; x
== 1
</code></pre>
<p>I'm quite happy with it--especially in light of removing ANY as a looping combinator from the default combinator set.  It brings ANY to its coherent systemic meaning of ANY-ONE-OF... as opposed to ANY-NUMBER-OF.</p>
<p>But <a class="mention" href="https://forum.rebol.info/u/ingohohmann">@IngoHohmann</a> suggested that SKIP might be related to ELIDE.  So I tried:</p>
<pre><code>&gt;&gt; uparse "ab" ["a" skip]
== "a"
</code></pre>
<p>This would make SKIP equivalent to <strong><code>ELIDE &lt;any&gt;</code></strong>.</p>
<h2>But <code>SKIP</code> as <code>ELIDE &lt;ANY&gt;</code> IS RARELY USEFUL, AND CONFUSING</h2>
<p>If you want <code>ELIDE &lt;ANY&gt;</code> just write that.</p>
<p>The general skip takes an argument of how much to skip, and having a PARSE analog to SKIP that takes no argument is just confusing.</p>
<p><strong>It may be</strong> that SKIP taking an argument is worth having:</p>
<pre><code>&gt;&gt; uparse "aaab" [skip (3) "b"]
== "b"
</code></pre>
<p>But then we have to decide what SKIP returns:</p>
<pre><code>&gt;&gt; uparse "aaab" [skip (3)]
== ???
</code></pre>
<p>And you can say that particular case with <strong><code>3 &lt;any&gt;</code></strong> and it's shorter.</p>
<h2>Either Way, the Historical Use Is Pointless</h2>
<p>So SKIP is not in UPARSE.  Maybe it will have a reinvention some day with a new meaning.</p>
          <p><a href="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557/1</link>
        <pubDate>Sun, 14 Mar 2021 03:56:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1557-1</guid>
        <source url="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557.rss">Killing Off Historical &quot;SKIP&quot; in PARSE</source>
      </item>
      <item>
        <title>Killing Off Historical &quot;SKIP&quot; in PARSE</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Seems to me, that skip would be the natural name for your elide.</p>
          <p><a href="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557/2</link>
        <pubDate>Wed, 03 Mar 2021 11:17:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1557-2</guid>
        <source url="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557.rss">Killing Off Historical &quot;SKIP&quot; in PARSE</source>
      </item>
  </channel>
</rss>
