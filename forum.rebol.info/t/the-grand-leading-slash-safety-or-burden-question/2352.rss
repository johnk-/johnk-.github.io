<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Grand Leading-Slash &quot;Safety, or Burden?&quot; Question</title>
    <link>https://forum.rebol.info/t/the-grand-leading-slash-safety-or-burden-question/2352</link>
    <description>Overall, I have been tremendously happy with how the ideas of the **[Big Alien Proposal](https://forum.rebol.info/t/big-alien-proposal-word-runs-functions/1905)** have worked out.

That started from the concept that when slashes appear, they either come *before* a function they run, or *after* a function they suppress execution for.

    foo.bar
    ; ^-- foo is an entity from which BAR is being selected.  BAR is not
    ; allowed to be an antiform frame, so this syntax cannot invoke a
    ; function call (though it can invoke an &#39;accessor&#39;, e.g. a &quot;getter&quot;
    ; which is 0-arity).

    foo/bar
    ; ^-- foo is an entity from which BAR (an a FRAME! or antiform FRAME!)
    ; is being selected and then invoked.  This will generate an error if
    ; bar is not a frame or antiform frame.

    foo.bar/
    ; ^-- bar is a field which is an antiform FRAME!, whose execution is
    ; being suppressed.  This expression will return an antiform frame, or
    ; an error if not an antiform frame.

    foo
    ; ^-- conventional WORD! reference, will run an antiform frame as an
    ; action invocation or fetch other values as-is

    /foo
    ; ^-- invocation reference, will run an antiform frame (or plain frame)
    ; as an action invocation and give errors on other types

    foo/
    ; ^-- action suppression, will give you back an antiform frame as-is
    ; and error on other types.

*(If you&#39;re curious about why **`/foo`** will run plain FRAME! as well as antiform, while **`foo/`** will not return an antiform frame for plain FRAME!, this is based on the idea that it&#39;s better to be conservative when fetching values so that you won&#39;t get surprised by getting a plain frame back from **`foo/`~** which gives everything back as-is.)*

---

I&#39;ve written elsewhere [how pleased I am that the way you suppress a function&#39;s execution is by throwing up a &quot;barrier&quot;](https://forum.rebol.info/t/trailing-slash-is-a-winner-for-defused-actions/2327) with a separating slash that makes it clear arguments are not being gathered at the callsite.  That&#39;s really slick.

For this idea to work, something else had to be used for refinements.  That meant [invention of the CHAIN! datatype](https://forum.rebol.info/t/introducingnew-chain-datatype/2226) has opened a lot of interesting doors, and I find it&#39;s quite learnable to see things like **`trim:auto:tail`** instead of **`trim/auto/tail`**.

*I actually prefer it!*  What some might think of a disadvantage of being &quot;less noticeable&quot; turns into an advantage... **`trim:auto`** really could have been a function called **`trim-auto`** just as easily.  Why would you want a slash to make the fact that it has a refinement &quot;pop&quot;?  The slashes to make function calls or suppression pop are much better applied.

**So that&#39;s all good. :smile_cat: No regrets!**

## But... Leading-Slash For Functions Rule Hasn&#39;t 100% Gel&#39;d

Another part of the proposal was that in order to get tighter control on what was a function or not, you would be required to assign functions using a leading-slash kind of SET-WORD!.

    &gt;&gt; foo: func [a b] [return a + b]
    ** Error: FOO: can&#39;t be used to assign antiform FRAME!, use /FOO:

    &gt;&gt; /foo: func [a b] [return a + b]
    == ~#[frame! &quot;foo&quot; [a b]]]~  ; anti


**It hasn&#39;t fully settled with me after working with it for some time.**

As I mentioned above, colons for refinements was easy to adapt to...and now that I&#39;m adapted, I prefer it.

But I&#39;m still typing **`test: cascade [add/ even?/]`**.  I love the trailing slashes (and this will be even better when the whole cascade can be done with just **`even?/add/`**).  But I&#39;m kind of cursing under my breath the thought of having typed **`test:`** and having to backspace over it so it says **`/test:`**.  And then I go &quot;hrmph.&quot;

When I&#39;m reading code, I probably appreciate it more than I find it to be &quot;messy&quot;.  It gives you a better compass.  The eye can scan and comprehend much better... it&#39;s of particular value when you&#39;re not using an obvious function generator like FUNC, but something else.  This cues readers to go &quot;oh, I guess that&#39;s a function generator&quot;.

Yet still... it&#39;s a burden in a way the other changes are not.  It&#39;s the only change that increases the character count.

## What&#39;s At Stake By Not Enforcing This?

Ren-C has a powerful story about how antiforms can&#39;t be put in blocks, which means you can write this kind of code and it &quot;just works&quot;:

    block2: collect [
        for-each &#39;item block1 [keep item]
    ]

    assert [equal? block1 block2]

When you compare it to Rebol2/R3-Alpha/Red, it&#39;s one of those vastly superior situations.  You aren&#39;t getting tricked into receiving an ITEM in the FOR-EACH that would generate an unset variable error, or conflate with the state that gets returned when an item can&#39;t be picked from a block, or accidentally run a function.  It&#39;s a solid solution.

But that&#39;s only for blocks.  What about other places, like objects?

If we don&#39;t put barriers on how action antiforms get assigned to variables, we get the problem all over again:

    for-each [key value] obj [
        if integer? value [  ; oops, what if VALUE is an action antiform!
            print &quot;Found an integer&quot;
        ]
    ]

There&#39;s no way in this case to say &quot;variables can&#39;t hold antiforms&quot;.  Logic is an antiform.  Words holding antiform frames are actions.  

Getting this under control with slashes is the kind of thing I&#39;ve been trying to do for a long time, I&#39;ve just never had the syntax.  Leading slashes felt like it could be the key:

    for-each [key value] obj [...]  ; value can&#39;t be frame antiform

    for-each [key /value] obj [...]  ; value must be frame antiform

    for-each [key ~/value] obj [...]  ; value may be frame antiform

But if these rules are applied everywhere, what you have to do gets more complex:

    set $x does [print &quot;Is this an error?&quot;]

    set $/x does [print &quot;Do you have to do this?&quot;]

    &gt;&gt; var: $x
    == x  ; bound

    set var does [print &quot;If this errors, how to make VAR into bound /x?&quot;]

    set:active var does [print &quot;Do you use refinements?&quot;] (or just SET:ANY ?)

Nothing is free.  And the already more complicated world where **`x:`** is a CHAIN! instead of a fundamental different type of word has its own issues, that these all pile on top of.

## There&#39;s Likely Not Enough Value In Optional Slash

If **`/foo: func [...] [...]`** will enforce that the thing you&#39;re assigning is an antiform action, but **`foo: func [...] [...]`** still works... I have a feeling that the complexity it takes to offer the feature doesn&#39;t give a sufficient payoff to be worth it.

You have everyone paying the tax of dealing with complicated path structures and bookkeeping--vs. being able to just SET and GET words and tuples at will... and then you&#39;re not even giving any additional guarantees in the source.

This makes me feel like it really is an all-in or not-at-all situation.

## Long Story Short: I&#39;m Still Weighing It

I&#39;m not ready to make a verdict.

The techniques for working with these new CHAIN! and PATH! situations are still being learned.  Most of my hesitance isn&#39;t from the looks or typing an extra character, but from frustrations in that...and maybe that frustration will lessen as I work on it more.</description>
    
    <lastBuildDate>Thu, 19 Dec 2024 01:12:09 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/the-grand-leading-slash-safety-or-burden-question/2352.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Grand Leading-Slash &quot;Safety, or Burden?&quot; Question</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Overall, I have been tremendously happy with how the ideas of the <strong><a href="https://forum.rebol.info/t/big-alien-proposal-word-runs-functions/1905">Big Alien Proposal</a></strong> have worked out.</p>
<p>That started from the concept that when slashes appear, they either come <em>before</em> a function they run, or <em>after</em> a function they suppress execution for.</p>
<pre><code>foo.bar
; ^-- foo is an entity from which BAR is being selected.  BAR is not
; allowed to be an antiform frame, so this syntax cannot invoke a
; function call (though it can invoke an 'accessor', e.g. a "getter"
; which is 0-arity).

foo/bar
; ^-- foo is an entity from which BAR (an a FRAME! or antiform FRAME!)
; is being selected and then invoked.  This will generate an error if
; bar is not a frame or antiform frame.

foo.bar/
; ^-- bar is a field which is an antiform FRAME!, whose execution is
; being suppressed.  This expression will return an antiform frame, or
; an error if not an antiform frame.

foo
; ^-- conventional WORD! reference, will run an antiform frame as an
; action invocation or fetch other values as-is

/foo
; ^-- invocation reference, will run an antiform frame (or plain frame)
; as an action invocation and give errors on other types

foo/
; ^-- action suppression, will give you back an antiform frame as-is
; and error on other types.
</code></pre>
<p><em>(If you're curious about why <strong><code>/foo</code></strong> will run plain FRAME! as well as antiform, while <strong><code>foo/</code></strong> will not return an antiform frame for plain FRAME!, this is based on the idea that it's better to be conservative when fetching values so that you won't get surprised by getting a plain frame back from <strong><code>foo/</code>~</strong> which gives everything back as-is.)</em></p>
<hr>
<p>I've written elsewhere <a href="https://forum.rebol.info/t/trailing-slash-is-a-winner-for-defused-actions/2327">how pleased I am that the way you suppress a function's execution is by throwing up a "barrier"</a> with a separating slash that makes it clear arguments are not being gathered at the callsite.  That's really slick.</p>
<p>For this idea to work, something else had to be used for refinements.  That meant <a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226">invention of the CHAIN! datatype</a> has opened a lot of interesting doors, and I find it's quite learnable to see things like <strong><code>trim:auto:tail</code></strong> instead of <strong><code>trim/auto/tail</code></strong>.</p>
<p><em>I actually prefer it!</em>  What some might think of a disadvantage of being "less noticeable" turns into an advantage... <strong><code>trim:auto</code></strong> really could have been a function called <strong><code>trim-auto</code></strong> just as easily.  Why would you want a slash to make the fact that it has a refinement "pop"?  The slashes to make function calls or suppression pop are much better applied.</p>
<p><strong>So that's all good. <img src="https://forum.rebol.info/images/emoji/twitter/smile_cat.png?v=12" title=":smile_cat:" class="emoji" alt=":smile_cat:" loading="lazy" width="20" height="20"> No regrets!</strong></p>
<h2><a name="p-7975-but-leading-slash-for-functions-rule-hasnt-100-geld-1" class="anchor" href="https://forum.rebol.info#p-7975-but-leading-slash-for-functions-rule-hasnt-100-geld-1"></a>But... Leading-Slash For Functions Rule Hasn't 100% Gel'd</h2>
<p>Another part of the proposal was that in order to get tighter control on what was a function or not, you would be required to assign functions using a leading-slash kind of SET-WORD!.</p>
<pre><code>&gt;&gt; foo: func [a b] [return a + b]
** Error: FOO: can't be used to assign antiform FRAME!, use /FOO:

&gt;&gt; /foo: func [a b] [return a + b]
== ~#[frame! "foo" [a b]]]~  ; anti
</code></pre>
<p><strong>It hasn't fully settled with me after working with it for some time.</strong></p>
<p>As I mentioned above, colons for refinements was easy to adapt to...and now that I'm adapted, I prefer it.</p>
<p>But I'm still typing <strong><code>test: cascade [add/ even?/]</code></strong>.  I love the trailing slashes (and this will be even better when the whole cascade can be done with just <strong><code>even?/add/</code></strong>).  But I'm kind of cursing under my breath the thought of having typed <strong><code>test:</code></strong> and having to backspace over it so it says <strong><code>/test:</code></strong>.  And then I go "hrmph."</p>
<p>When I'm reading code, I probably appreciate it more than I find it to be "messy".  It gives you a better compass.  The eye can scan and comprehend much better... it's of particular value when you're not using an obvious function generator like FUNC, but something else.  This cues readers to go "oh, I guess that's a function generator".</p>
<p>Yet still... it's a burden in a way the other changes are not.  It's the only change that increases the character count.</p>
<h2><a name="p-7975-whats-at-stake-by-not-enforcing-this-2" class="anchor" href="https://forum.rebol.info#p-7975-whats-at-stake-by-not-enforcing-this-2"></a>What's At Stake By Not Enforcing This?</h2>
<p>Ren-C has a powerful story about how antiforms can't be put in blocks, which means you can write this kind of code and it "just works":</p>
<pre><code>block2: collect [
    for-each 'item block1 [keep item]
]

assert [equal? block1 block2]
</code></pre>
<p>When you compare it to Rebol2/R3-Alpha/Red, it's one of those vastly superior situations.  You aren't getting tricked into receiving an ITEM in the FOR-EACH that would generate an unset variable error, or conflate with the state that gets returned when an item can't be picked from a block, or accidentally run a function.  It's a solid solution.</p>
<p>But that's only for blocks.  What about other places, like objects?</p>
<p>If we don't put barriers on how action antiforms get assigned to variables, we get the problem all over again:</p>
<pre><code>for-each [key value] obj [
    if integer? value [  ; oops, what if VALUE is an action antiform!
        print "Found an integer"
    ]
]
</code></pre>
<p>There's no way in this case to say "variables can't hold antiforms".  Logic is an antiform.  Words holding antiform frames are actions.</p>
<p>Getting this under control with slashes is the kind of thing I've been trying to do for a long time, I've just never had the syntax.  Leading slashes felt like it could be the key:</p>
<pre><code>for-each [key value] obj [...]  ; value can't be frame antiform

for-each [key /value] obj [...]  ; value must be frame antiform

for-each [key ~/value] obj [...]  ; value may be frame antiform
</code></pre>
<p>But if these rules are applied everywhere, what you have to do gets more complex:</p>
<pre><code>set $x does [print "Is this an error?"]

set $/x does [print "Do you have to do this?"]

&gt;&gt; var: $x
== x  ; bound

set var does [print "If this errors, how to make VAR into bound /x?"]

set:active var does [print "Do you use refinements?"] (or just SET:ANY ?)
</code></pre>
<p>Nothing is free.  And the already more complicated world where <strong><code>x:</code></strong> is a CHAIN! instead of a fundamental different type of word has its own issues, that these all pile on top of.</p>
<h2><a name="p-7975-theres-likely-not-enough-value-in-optional-slash-3" class="anchor" href="https://forum.rebol.info#p-7975-theres-likely-not-enough-value-in-optional-slash-3"></a>There's Likely Not Enough Value In Optional Slash</h2>
<p>If <strong><code>/foo: func [...] [...]</code></strong> will enforce that the thing you're assigning is an antiform action, but <strong><code>foo: func [...] [...]</code></strong> still works... I have a feeling that the complexity it takes to offer the feature doesn't give a sufficient payoff to be worth it.</p>
<p>You have everyone paying the tax of dealing with complicated path structures and bookkeeping--vs. being able to just SET and GET words and tuples at will... and then you're not even giving any additional guarantees in the source.</p>
<p>This makes me feel like it really is an all-in or not-at-all situation.</p>
<h2><a name="p-7975-long-story-short-im-still-weighing-it-4" class="anchor" href="https://forum.rebol.info#p-7975-long-story-short-im-still-weighing-it-4"></a>Long Story Short: I'm Still Weighing It</h2>
<p>I'm not ready to make a verdict.</p>
<p>The techniques for working with these new CHAIN! and PATH! situations are still being learned.  Most of my hesitance isn't from the looks or typing an extra character, but from frustrations in that...and maybe that frustration will lessen as I work on it more.</p>
          <p><a href="https://forum.rebol.info/t/the-grand-leading-slash-safety-or-burden-question/2352/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-grand-leading-slash-safety-or-burden-question/2352/1</link>
        <pubDate>Thu, 19 Dec 2024 01:12:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2352-1</guid>
        <source url="https://forum.rebol.info/t/the-grand-leading-slash-safety-or-burden-question/2352.rss">The Grand Leading-Slash &quot;Safety, or Burden?&quot; Question</source>
      </item>
  </channel>
</rss>
