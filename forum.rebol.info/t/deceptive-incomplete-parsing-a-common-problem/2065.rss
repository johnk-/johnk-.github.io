<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Deceptive Incomplete Parsing: A Common Problem</title>
    <link>https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065</link>
    <description>Some code I&#39;d written checked for file extensions, wanting only %.r and %.reb files to be processed.  It looked like this:

     for-each file ... [
         parse file [thru &quot;.reb&quot; | thru &quot;.r&quot;] else [continue]
         ...
     ]

That doesn&#39;t work anymore, because PARSE raises an error instead of returning null.  The ELSE needs to be an EXCEPT, or you have to use IF NOT OK?, or some other solution.

My first thought on fixing it was why not just put the CONTINUE inside the parse...

     for-each file ... [
         parse file [thru &quot;.reb&quot; | thru &quot;.r&quot; | (continue)]
         ...
     ]

That&#39;s a neat Rebolism that shows the kind of malleability other languages just don&#39;t have.

But it has a problem.  Can you spot it?

## Old Redbol Conventions Wouldn&#39;t Catch The Mistake

Imagine if the file is named **%foo.reb.zip** or **%foo.rar**.  One of the THRUs succeeds, so it won&#39;t run the continue alternate.  But it won&#39;t reach the end of the filename.

Historical Redbol would have had the PARSE return false, but would have just blindly continued running, passing those unintended filenames!!!

Now we&#39;re a step ahead, because PARSE will error if it doesn&#39;t reach the end!  :clap: 

## But How To Stop the Error?

We don&#39;t want an error if it doesn&#39;t terminate in %.r or %.reb, we want to continue the loop.

This will work:

     parse file [thru &quot;.reb&quot; &lt;end&gt; | thru &quot;.r&quot; &lt;end&gt; | (continue)]

And it&#39;s not catastrophically bad.  But it feels weird.

You can remove the `&lt;end&gt;` duplication:

     parse file [thru [&quot;.reb&quot; | &quot;.r&quot;] &lt;end&gt; | (continue)]

You can also do that with ANY:

     parse file [thru any [&quot;.reb&quot; &quot;.r&quot;] &lt;end&gt; | (continue)]

You can of course go for the conventional forms:

    parse file [thru &quot;.reb&quot; | thru &quot;.r&quot;] except [continue]

    if not ok? parse file [thru &quot;.reb&quot; | thru &quot;.r&quot;] [continue]

But I feel like there&#39;s something missing when you write something like this without making the `&lt;end&gt;` explicit...because it leads to someone getting the bright idea (as I did) to reformulate it without taking the `&lt;end&gt;` into account.

## In Any Case, This Being Overlooked Is Now Caught!

It&#39;s food for thought on what style you want. But no matter what style you like, I think it shows a clear win for raising the error when the parse doesn&#39;t reach the end.

That %foo.rar or %foo.reb.zip -- when they occur -- will not be accepted quietly in the reformulation!</description>
    
    <lastBuildDate>Tue, 28 Nov 2023 04:08:34 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Deceptive Incomplete Parsing: A Common Problem</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Some code I'd written checked for file extensions, wanting only %.r and %.reb files to be processed.  It looked like this:</p>
<pre><code> for-each file ... [
     parse file [thru ".reb" | thru ".r"] else [continue]
     ...
 ]
</code></pre>
<p>That doesn't work anymore, because PARSE raises an error instead of returning null.  The ELSE needs to be an EXCEPT, or you have to use IF NOT OK?, or some other solution.</p>
<p>My first thought on fixing it was why not just put the CONTINUE inside the parse...</p>
<pre><code> for-each file ... [
     parse file [thru ".reb" | thru ".r" | (continue)]
     ...
 ]
</code></pre>
<p>That's a neat Rebolism that shows the kind of malleability other languages just don't have.</p>
<p>But it has a problem.  Can you spot it?</p>
<h2>
<a name="old-redbol-conventions-wouldnt-catch-the-mistake-1" class="anchor" href="https://forum.rebol.info#old-redbol-conventions-wouldnt-catch-the-mistake-1"></a>Old Redbol Conventions Wouldn't Catch The Mistake</h2>
<p>Imagine if the file is named <strong>%foo.reb.zip</strong> or <strong>%foo.rar</strong>.  One of the THRUs succeeds, so it won't run the continue alternate.  But it won't reach the end of the filename.</p>
<p>Historical Redbol would have had the PARSE return false, but would have just blindly continued running, passing those unintended filenames!!!</p>
<p>Now we're a step ahead, because PARSE will error if it doesn't reach the end!  <img src="https://forum.rebol.info/images/emoji/twitter/clap.png?v=12" title=":clap:" class="emoji" alt=":clap:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="but-how-to-stop-the-error-2" class="anchor" href="https://forum.rebol.info#but-how-to-stop-the-error-2"></a>But How To Stop the Error?</h2>
<p>We don't want an error if it doesn't terminate in %.r or %.reb, we want to continue the loop.</p>
<p>This will work:</p>
<pre><code> parse file [thru ".reb" &lt;end&gt; | thru ".r" &lt;end&gt; | (continue)]
</code></pre>
<p>And it's not catastrophically bad.  But it feels weird.</p>
<p>You can remove the <code>&lt;end&gt;</code> duplication:</p>
<pre><code> parse file [thru [".reb" | ".r"] &lt;end&gt; | (continue)]
</code></pre>
<p>You can also do that with ANY:</p>
<pre><code> parse file [thru any [".reb" ".r"] &lt;end&gt; | (continue)]
</code></pre>
<p>You can of course go for the conventional forms:</p>
<pre><code>parse file [thru ".reb" | thru ".r"] except [continue]

if not ok? parse file [thru ".reb" | thru ".r"] [continue]
</code></pre>
<p>But I feel like there's something missing when you write something like this without making the <code>&lt;end&gt;</code> explicit...because it leads to someone getting the bright idea (as I did) to reformulate it without taking the <code>&lt;end&gt;</code> into account.</p>
<h2>
<a name="in-any-case-this-being-overlooked-is-now-caught-3" class="anchor" href="https://forum.rebol.info#in-any-case-this-being-overlooked-is-now-caught-3"></a>In Any Case, This Being Overlooked Is Now Caught!</h2>
<p>It's food for thought on what style you want. But no matter what style you like, I think it shows a clear win for raising the error when the parse doesn't reach the end.</p>
<p>That %foo.rar or %foo.reb.zip -- when they occur -- will not be accepted quietly in the reformulation!</p>
          <p><a href="https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065/1</link>
        <pubDate>Tue, 28 Nov 2023 03:33:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2065-1</guid>
        <source url="https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065.rss">Deceptive Incomplete Parsing: A Common Problem</source>
      </item>
  </channel>
</rss>
