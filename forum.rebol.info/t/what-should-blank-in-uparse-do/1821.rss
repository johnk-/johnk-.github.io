<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What Should BLANK! in UPARSE Do?</title>
    <link>https://forum.rebol.info/t/what-should-blank-in-uparse-do/1821</link>
    <description>It&#39;s always good to look at history first.  So let&#39;s compare and contrast #[none] vs. empty block in old Redbols.

**In Rebol2 and R3-Alpha, both are no-ops.**  The input type doesn&#39;t matter.

    r2/r3&gt;&gt; parse {ab} [[] &quot;a&quot; [] &quot;b&quot; []]
    == true

    r2/r3&gt;&gt; parse {ab} [#[none] &quot;a&quot; #[none] &quot;b&quot; #[none]]
    == true

    r2/r3&gt;&gt; parse [a b] [[] &#39;a [] &#39;b []]
    == true

    r2/r3&gt;&gt; parse [a b] [#[none] &#39;a #[none] &#39;b #[none]]
    == true

**In Red, #[none]s are expected to be literal.**  However, you don&#39;t get an error on string inputs...just a failure.

    red&gt;&gt; parse {ab} [[] &quot;a&quot; [] &quot;b&quot; []]
    == true

    red&gt;&gt; parse {ab} [#[none] &quot;a&quot; #[none] &quot;b&quot; #[none]]
    == false

    red&gt;&gt; parse [a b] [[] &#39;a [] &#39;b []]
    == true

    red&gt;&gt; parse [a b] [#[none] &#39;a #[none] &#39;b #[none]]
    == false

    red&gt;&gt; parse [#[none] a #[none] b #[none]] [#[none] &#39;a #[none] &#39;b #[none]]
    == true</description>
    
    <lastBuildDate>Sun, 21 Aug 2022 06:06:50 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/what-should-blank-in-uparse-do/1821.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What Should BLANK! in UPARSE Do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>What Should BLANK! in UPARSE Do?</strong></p>
</blockquote>
<p><strong>I've really found that I like BLANK! literally at source level as a way to say SPACE in string operations.</strong></p>
<p>So it could be useful in PARSE for this purpose:</p>
<pre><code>&gt;&gt; parse "aaa bbb" [some "a" _ some "b"]
== "b"
</code></pre>
<p>We haven't talked about the "blank and space" duality for a while, but I'd even gone as far to suggest that when you do something like TO BLOCK! of a string it might transform the spaces into blanks:</p>
<pre><code>&gt;&gt; to block! "the cat"
== [#t #h #e _ #c #a #t]
</code></pre>
<p><em>(People might not recall why I was mentioning this, but around the time of UTF-8 Everywhere it was pointed out that since we had non-fixed-size codepoints, seeking in strings and mutating them could be costly.  So if you had a string algorithm you might want to "explode" a string into a BLOCK! representation to work on it.  This would give you great flexibility to do things like put in substitutions with full strings, or mark the cells with intermediate states for your algorithm...and then you would collapse it all down at the end by turning it back into a string.)</em></p>
<h2>The Literal Interpretation Is Also Compelling in Arrays/Sequences</h2>
<p>I've thought of BLANK! as being the analogue to space in blocks, so matching them literally there makes sense:</p>
<pre><code>&gt;&gt; parse [a a a _ b b b] [some 'a _ some 'b]
== 'b
</code></pre>
<p>But where it really shines is in processing things like paths and tuples, to match the gaps in them:</p>
<pre><code>&gt;&gt; refinement-rule: [subparse path! [_ word!]]

&gt;&gt; parse [/foo] [refinement-rule]
== 'foo
</code></pre>
<p>That's a slam dunk.  So now we have the behavior tied up.  <img src="https://forum.rebol.info/images/emoji/twitter/relieved.png?v=9" title=":relieved:" class="emoji" alt=":relieved:"></p>
          <p><a href="https://forum.rebol.info/t/what-should-blank-in-uparse-do/1821/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-blank-in-uparse-do/1821/2</link>
        <pubDate>Mon, 11 Jul 2022 19:38:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1821-2</guid>
        <source url="https://forum.rebol.info/t/what-should-blank-in-uparse-do/1821.rss">What Should BLANK! in UPARSE Do?</source>
      </item>
      <item>
        <title>What Should BLANK! in UPARSE Do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's always good to look at history first.  So let's compare and contrast #[none] vs. empty block in old Redbols.</p>
<p><strong>In Rebol2 and R3-Alpha, both are no-ops.</strong>  The input type doesn't matter.</p>
<pre><code>r2/r3&gt;&gt; parse {ab} [[] "a" [] "b" []]
== true

r2/r3&gt;&gt; parse {ab} [#[none] "a" #[none] "b" #[none]]
== true

r2/r3&gt;&gt; parse [a b] [[] 'a [] 'b []]
== true

r2/r3&gt;&gt; parse [a b] [#[none] 'a #[none] 'b #[none]]
== true
</code></pre>
<p><strong>In Red, #[none]s are expected to be literal.</strong>  However, you don't get an error on string inputs...just a failure.</p>
<pre><code>red&gt;&gt; parse {ab} [[] "a" [] "b" []]
== true

red&gt;&gt; parse {ab} [#[none] "a" #[none] "b" #[none]]
== false

red&gt;&gt; parse [a b] [[] 'a [] 'b []]
== true

red&gt;&gt; parse [a b] [#[none] 'a #[none] 'b #[none]]
== false

red&gt;&gt; parse [#[none] a #[none] b #[none]] [#[none] 'a #[none] 'b #[none]]
== true</code></pre>
          <p><a href="https://forum.rebol.info/t/what-should-blank-in-uparse-do/1821/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-blank-in-uparse-do/1821/1</link>
        <pubDate>Sun, 15 May 2022 22:35:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1821-1</guid>
        <source url="https://forum.rebol.info/t/what-should-blank-in-uparse-do/1821.rss">What Should BLANK! in UPARSE Do?</source>
      </item>
  </channel>
</rss>
