<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>FILE! =&gt; FILE-WORD!, FILE-TUPLE!, FILE-PATH!..</title>
    <link>https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243</link>
    <description>I&#39;ve never been quite on board with the FILE! datatype.

It displeased me that it was just a string, you couldn&#39;t really do too much with it.  Not a lot of magic.  It&#39;s burdened by representations of spaces in it, and hard to really say it gives coverage of any incoming file string.

Sample Rebol2 session on Windows:

```
&gt;&gt; cd /
== %/

&gt;&gt; ls
c/  d/

&gt;&gt; cd c
== %/c/

&gt;&gt; cd &quot;Program Files&quot;
== %/c/Program%20Files/
```

Are we really in the &quot;actually good&quot; territory of a problem space that can be reasonably tackled? If I&#39;m a Windows user, I&#39;d rather see that as {C:\Program Files} in my config files or scripts any day of the week.

## I&#39;ve Advocated Building on &quot;NewPath&quot;

&quot;NewPath&quot; was able to do things like **`/foo/bar`** or **`baz/mumble/`**).  I advocated that FILE! build on that.

Now that we can have more basic types, I&#39;m thinking that sounds pretty cool:

    %foo                             ; FILE-WORD!
    %foo.c                           ; FILE-TUPLE!
    %1-foo.txt                       ; FILE-FUSED!
    %foo/bar/baz.txt                 ; FILE-PATH!
    %[&quot;C:\File With\Spaces.txt&quot;]     ; FILE-BLOCK!

You&#39;ve got your coherence...enforcement of not having doubled-up slashes...able to use COMPOSE and such...

    &gt;&gt; dir: %foo/bar/

    &gt;&gt; compose %(dir)/baz.txt
    == %foo/bar/baz.txt

We could build the calculus-of-slashes that I&#39;ve been demanding, so everything is on board with what&#39;s a directory and what&#39;s a file.

    &gt;&gt; dir: %foo/bar

    &gt;&gt; compose %(dir)/baz.txt
    ** Error: compose into FILE-PATH! needs ending slash in non-terminal slot

And basically, we could punt on the question of how to deal with obnoxious filenames by telling people &quot;if you aren&#39;t going to name your files like a sane person, use a string.&quot;  Spaces in filenames is one of the worst ideas ever, and I don&#39;t mind making those second-class citizens if it means we get good properties.

And of course, more parts for dialecting.

## This Would Intern a lot of Random Strings

One downside here is that if you have a bunch of filenames of varying lengths, and you make them these symbolic structures instead of just keeping them as strings, you&#39;ll explode the symbol table.

That seems like an argument to say that if you&#39;re making some kind of database where these scale problems are going to affect you, you might should use string instead.

That&#39;s just a general truth--while WORD!s may look nice, they do go in the symbol table and that table can get big if you decide you&#39;re going to go crazy storing your data as tons of long unique words because-you-can.</description>
    
    <lastBuildDate>Mon, 16 Sep 2024 14:02:22 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>FILE! =&gt; FILE-WORD!, FILE-TUPLE!, FILE-PATH!..</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2243">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Now that we can have more basic types, I'm thinking that sounds pretty cool:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">%foo                             ; FILE-WORD!
%foo.c                           ; FILE-TUPLE!
%1-foo.txt                       ; FILE-FUSED!
%foo/bar/baz.txt                 ; FILE-PATH!
%["C:\File With\Spaces.txt"]     ; FILE-BLOCK!
</code></pre>
</blockquote>
</aside>
<p>In the past I've mused that I might like this kind of thing to work as meaning <em>append content to the file</em>, not to append to the string:</p>
<pre><code>append/line %foo.txt "some stuff"
</code></pre>
<p>Part of enabling that was to consider FILE! as being immutable, so you couldn't be intending to mean "append string content to the filename itself".</p>
<p>And that would be served by the sequence types here (tuple, fused, path, chain...)</p>
<p>But FILE-BLOCK! and such would throw another wrench into that already-shaky idea, unless there was some rule that made them different and immutable.  :-/</p>
<p>If you picked a category of List and said that it was immutable when viewed as such, you'd wind up with some pretty crappy invariants if you wrote a routine that took ANY-LIST? and then did an append to it and it happened to be a wacko FILE-BLOCK! that took your meaning entirely differently.</p>
<p>Oh well.  It's always been a bit of a pipe dream to say appending to structural types that you'd find in source would interpret the request as anything but structural.  I should probably give up on the idea.</p>
          <p><a href="https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243/3</link>
        <pubDate>Mon, 16 Sep 2024 14:02:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2243-3</guid>
        <source url="https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243.rss">FILE! =&gt; FILE-WORD!, FILE-TUPLE!, FILE-PATH!..</source>
      </item>
      <item>
        <title>FILE! =&gt; FILE-WORD!, FILE-TUPLE!, FILE-PATH!..</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>Suggestion for inspiration here: have a look at the Haskell <a href="https://github.com/commercialhaskell/path"><code>path</code></a> library. This one does a pretty good job of supporting structured paths across OSs while keeping the overall data structure coherent.</p>
          <p><a href="https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243/2</link>
        <pubDate>Mon, 02 Sep 2024 00:37:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2243-2</guid>
        <source url="https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243.rss">FILE! =&gt; FILE-WORD!, FILE-TUPLE!, FILE-PATH!..</source>
      </item>
      <item>
        <title>FILE! =&gt; FILE-WORD!, FILE-TUPLE!, FILE-PATH!..</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've never been quite on board with the FILE! datatype.</p>
<p>It displeased me that it was just a string, you couldn't really do too much with it.  Not a lot of magic.  It's burdened by representations of spaces in it, and hard to really say it gives coverage of any incoming file string.</p>
<p>Sample Rebol2 session on Windows:</p>
<pre><code class="lang-plaintext">&gt;&gt; cd /
== %/

&gt;&gt; ls
c/  d/

&gt;&gt; cd c
== %/c/

&gt;&gt; cd "Program Files"
== %/c/Program%20Files/
</code></pre>
<p>Are we really in the "actually good" territory of a problem space that can be reasonably tackled? If I'm a Windows user, I'd rather see that as {C:\Program Files} in my config files or scripts any day of the week.</p>
<h2>
<a name="ive-advocated-building-on-newpath-1" class="anchor" href="https://forum.rebol.info#ive-advocated-building-on-newpath-1"></a>I've Advocated Building on "NewPath"</h2>
<p>"NewPath" was able to do things like <strong><code>/foo/bar</code></strong> or <strong><code>baz/mumble/</code></strong>).  I advocated that FILE! build on that.</p>
<p>Now that we can have more basic types, I'm thinking that sounds pretty cool:</p>
<pre><code>%foo                             ; FILE-WORD!
%foo.c                           ; FILE-TUPLE!
%1-foo.txt                       ; FILE-FUSED!
%foo/bar/baz.txt                 ; FILE-PATH!
%["C:\File With\Spaces.txt"]     ; FILE-BLOCK!
</code></pre>
<p>You've got your coherence...enforcement of not having doubled-up slashes...able to use COMPOSE and such...</p>
<pre><code>&gt;&gt; dir: %foo/bar/

&gt;&gt; compose %(dir)/baz.txt
== %foo/bar/baz.txt
</code></pre>
<p>We could build the calculus-of-slashes that I've been demanding, so everything is on board with what's a directory and what's a file.</p>
<pre><code>&gt;&gt; dir: %foo/bar

&gt;&gt; compose %(dir)/baz.txt
** Error: compose into FILE-PATH! needs ending slash in non-terminal slot
</code></pre>
<p>And basically, we could punt on the question of how to deal with obnoxious filenames by telling people "if you aren't going to name your files like a sane person, use a string."  Spaces in filenames is one of the worst ideas ever, and I don't mind making those second-class citizens if it means we get good properties.</p>
<p>And of course, more parts for dialecting.</p>
<h2>
<a name="this-would-intern-a-lot-of-random-strings-2" class="anchor" href="https://forum.rebol.info#this-would-intern-a-lot-of-random-strings-2"></a>This Would Intern a lot of Random Strings</h2>
<p>One downside here is that if you have a bunch of filenames of varying lengths, and you make them these symbolic structures instead of just keeping them as strings, you'll explode the symbol table.</p>
<p>That seems like an argument to say that if you're making some kind of database where these scale problems are going to affect you, you might should use string instead.</p>
<p>That's just a general truth--while WORD!s may look nice, they do go in the symbol table and that table can get big if you decide you're going to go crazy storing your data as tons of long unique words because-you-can.</p>
          <p><a href="https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243/1</link>
        <pubDate>Sun, 01 Sep 2024 21:49:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2243-1</guid>
        <source url="https://forum.rebol.info/t/file-file-word-file-tuple-file-path/2243.rss">FILE! =&gt; FILE-WORD!, FILE-TUPLE!, FILE-PATH!..</source>
      </item>
  </channel>
</rss>
