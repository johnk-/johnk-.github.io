<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;The Fear&quot; Of Dialecting PRINT</title>
    <link>https://forum.rebol.info/t/the-fear-of-dialecting-print/972</link>
    <description>I&#39;ve talked in the past about how I think PRINT of a BLOCK! is a pretty limited dialect, in that its hands are kind of tied because it allows just any evaluation, not required to be in a GROUP!.  Compare this with PARSE, which strictly controls evaluations.

One thing that occurs to me that could be done without really making that much of a ripple in SPACED/UNSPACED/DELIMIT would be if THE-WORD! could mean &quot;mold this&quot;:

    &gt;&gt; value: [a b c]

    &gt;&gt; print [&quot;Value is:&quot; value]
    Value is a b c

    &gt;&gt; print [&quot;Value is:&quot; @value]
    Value is [a b c]

Note this is a suggestion for the direct dialect behavior, not of a THE-WORD! that gets generated:

    &gt;&gt; print [&quot;Value is:&quot; the @value]
    Value is @value

The idea that every stringy type that isn&#39;t a TEXT! form with their delimiters is something I&#39;ve been assuming for a bit, in a &quot;WYSIWYG&quot; kind of mentality.

One technical question interfering in the evaluation raises is what to do about infix, such as something that is looking to pick up the THE-WORD! on the left.

    &gt;&gt; @value left-quote
    == @value

    &gt;&gt; print [&quot;Value is&quot; @value left-quote]
    Value is @value  ; this is presumably what the output should be

This would mean that while SPACED was looking at the pending evaluations, it would have to do something along the lines of notice it was a THE-WORD!, do the evaluation, and then ask if the evaluation moved by only one unit.  There&#39;s actually more to worry about than that, because pure invisible comments would be evaluated as well...

Such interactions are complex, and raise a lot of questions about just how dialect-y you can get when you let people write any evaluative material in a block like that.  But requiring GROUP! would be rather heavy-handed, and if literal inspections were done then at least if that&#39;s not what you wanted, you could use a group.

## If this isn&#39;t good, is *any* PRINT (SPACED, DELIMIT) dialecting good?

People certainly want to use literal TAG! in unspaced:

    unspaced [&lt;b&gt; &quot;bolded text&quot; &lt;/b&gt;]

So the idea of using tags for control codes or saying how many digits of precision to print integers with would probably be unpopular.  Is PRINT never going to aspire to more, and is that the job of a higher level **print format** routine?

If that&#39;s the mindset, then this THE-WORD! proposal is probably the only change that might be considered for squeaking by, but if it&#39;s the only irregularity it&#39;s probably not worth it.  (?)</description>
    
    <lastBuildDate>Fri, 11 Oct 2024 23:25:00 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/the-fear-of-dialecting-print/972.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;The Fear&quot; Of Dialecting PRINT</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This is the current behavior of tags in the web console:</p>
<pre><code>&gt;&gt; name: "World"
== "World"

&gt;&gt; print ["Hello" &lt;b&gt; name &lt;/b&gt;]
Hello &lt;b&gt; World &lt;/b&gt;
</code></pre>
<p>This doesn't seem that useful to me, compared to letting them pass through to the HTML.</p>
<p>If you actually wanted the tags literally and didn't want to use strings, maybe quote them?</p>
<pre><code>&gt;&gt; print ["Hello" '&lt;b&gt; name '&lt;/b&gt;]
Hello &lt;b&gt; Hello World &lt;/b&gt;
</code></pre>
<p>Anyway...I was wondering if you have a smart terminal if it could piggy-back on a subset of HTML instructions to do things like bold or other features.  Though it's pretty grotesque for doing things like color:</p>
<pre><code>print [&lt;span style="color:green;"&gt; "Yuck." &lt;/span&gt;]
</code></pre>
<p>Apparently <a href="https://stackoverflow.com/questions/5682943/how-to-create-custom-tags-for-html">custom elements are on the rise</a>.  Firefox let me put <code>&lt;green&gt;</code> elements in and style them as green:</p>
<pre><code>print [&lt;green&gt; "Legit?" &lt;/green&gt;]
</code></pre>
<p>Sooo... I guess that's one way of going after a short form for at least common colors.</p>
<p>It's kind of a nuisance when the color is not fixed:</p>
<pre><code>color: pick [blue red green] 3

print [... "How to apply COLOR to this text?" ...]
</code></pre>
<p>You could solve that I guess with helper functions:</p>
<pre><code>color: pick [blue red green] 3

colorize: func [color [word!] content] [
    return spread reduce [as tag! color, content, as tag! join "/" color]
]

print [colorize color "This is one way to go about it"]
</code></pre>
<p>That feels kind of...dirty.  Like PRINT's interface should be lower-level and be able to speak in terms of the color directly, without there being some sort of parser that has to find and pair up tags.</p>
<p>But I don't know what that low level language would look like.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="972">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I've held off on doing anything interesting in PRINT for some time now, based on the... <em>fear</em>. <img src="https://forum.rebol.info/images/emoji/twitter/ghost.png?v=12" title=":ghost:" class="emoji" alt=":ghost:" loading="lazy" width="20" height="20"></p>
</blockquote>
</aside>
<p>The above shows a little snippet of my fear, just in terms of getting involved in the design of these language parts that introduce questions of how much or how little processing PRINT implementations have to do.</p>
<p>In the web terminal, if you say <strong><code>write stdout</code></strong> you don't get any HTML processing...it escapes everything so you get monospaced text of any characters you write.  Hence if PRINT is going to subvert that it has to know when and why.</p>
<p>Right now, PRINT never subverts.  If you want to spew HTML directly to the console you have to use a lower-level <strong>replpad-write</strong> routine (there's no real reason why this couldn't be exposed as <strong>print:html</strong> or <strong>print:raw</strong> or similar).</p>
<p>But it's quite possible for PRINT to do a subset of behaviors... for instance:</p>
<p><img src="https://forum.rebol.info/uploads/default/original/1X/efe6d77e26e14357bcc9fb4f4592d24a8d073451.png" alt="image" data-base62-sha1="yegGSGxYjlgsHWhsMRCgqdpclZD" width="425" height="44"></p>
<p>So you get your HTML without giving up auto-escaping.</p>
<p>(This calls into question my choice to use bold for the output of <strong><code>write stdout</code></strong>, because bold might be meaningful for you to apply as a style if we start going down this road.  Maybe some slight indenting and slightly different size--or another subtlety--would be a better choice than the bolding.)</p>
<h2><a name="p-7844-should-i-just-do-it-1" class="anchor" href="https://forum.rebol.info#p-7844-should-i-just-do-it-1"></a>Should I "Just Do It"?</h2>
<p>I'm reluctant because I'm hoping some big great better idea will come along.</p>
<p><em>But this has been really my only idea for a few years, and I haven't moved on it.</em></p>
<p>I don't think that big better idea in the sky is coming.  In the meantime we have all the ability to write colors and such to the terminal and browser and just aren't using it, while Red and Oldes R3 have gone down the path in their very non-HTML-embracing ways.</p>
<h2><a name="p-7844-what-about-format-specifiers-2" class="anchor" href="https://forum.rebol.info#p-7844-what-about-format-specifiers-2"></a>What About Format Specifiers?</h2>
<p>We can't use things like CHAIN for <strong><code>number:8</code></strong> to say print to 8 places, because <strong><code>number</code></strong> could be a function with 8 as a refinement.</p>
<p>But other things are on the table.  <strong><code>8:number</code></strong> for instance.</p>
<p>We might ask some other philosophical questions, like, how often do you really want to print just the number 2, literally?  Is it rare enough that you'd be willing to give up 2 for the PRINT dialect as some kind of modifier?...and use <strong><code>'2</code></strong> or <strong><code>"2"</code></strong> if you really needed to literally print the number 2?</p>
<p>I think these questions are important to ask, because PRINT should really be a flagship of dialecting.</p>
<p>Some might say that PRINT isn't that, and it's PRINT FORMAT that is the fancy thing.  But as I've tried to lay out here, there's no formulation of PRINT as "do some process to the input that will be handed to stdout", because writing to stdout is something more narrow...whereas what PRINT wants to do is higher level.  This means that there can't really be a PRINT FORMAT unless FORMAT produces some complex object that can be mapped to the various capabilities of the output terminal.  And defining that object seems like more of a futile design exercise than just defining PRINT in a way that it can use component operations but ultimately have your environment configured with a PRINT that knows its medium and does what it needs to.</p>
          <p><a href="https://forum.rebol.info/t/the-fear-of-dialecting-print/972/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fear-of-dialecting-print/972/3</link>
        <pubDate>Fri, 11 Oct 2024 19:04:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-972-3</guid>
        <source url="https://forum.rebol.info/t/the-fear-of-dialecting-print/972.rss">&quot;The Fear&quot; Of Dialecting PRINT</source>
      </item>
      <item>
        <title>&quot;The Fear&quot; Of Dialecting PRINT</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="972">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; print ["Value is:" @value]
Value is [a b c]
</code></pre>
</blockquote>
</aside>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="972">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>If this isn't good, is <em>any</em> PRINT (SPACED, DELIMIT) dialecting good?</p>
</blockquote>
</aside>
<p>I've held off on doing anything interesting in PRINT for some time now, based on the... <em>fear</em>.  <img src="https://forum.rebol.info/images/emoji/twitter/ghost.png?v=12" title=":ghost:" class="emoji" alt=":ghost:" loading="lazy" width="20" height="20"></p>
<p>It's the fear that if we give meaning to parts in the "print dialect", that there will be potential for confusion if we evaluate a freeform expression in the middle of that dialect that uses one of those parts.</p>
<pre><code>&gt;&gt; block: [a b c]

&gt;&gt; print ["The block is: block]
** Error: Unknown rendering for &amp;[block] in DELIMIT

&gt;&gt; print ["The block is:" @block]
The block is [a b c]

&gt;&gt; print ["This is" if get @block ["my fear"]]
This is my fear
</code></pre>
<p>There we see <code>@block</code> having nothing to do with molding at all.  And yet, there it is--right in the "PRINT dialect"</p>
<p>So what I'm afraid of is that you'll be trying to read a PRINT expression and not knowing when the "magic" dialected parts are going to do their magic, vs. just be a parameter to some function call.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="972">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Such interactions are complex, and raise a lot of questions about just how dialect-y you can get when you let people write any evaluative material in a block like that. But requiring GROUP! would be rather heavy-handed</p>
</blockquote>
</aside>
<p>We wouldn't require groups on <em>everything</em>.  Just function calls...</p>
<pre><code>&gt;&gt; name: "Roscoe"

&gt;&gt; print ["Your name is" name]  ; no parentheses needed
Your name is Roscoe

&gt;&gt; print ["Your backwards name is" (reverse name)]  ; need parentheses
Your backwards name is eocsoR
</code></pre>
<p>There's an added benefit: if you see something like <strong><code>print ["foo" baz bar]</code></strong>, <em>you know baz and bar aren't functions</em>.   They have to resolve to non-function values, so you can read that with more confidence as to what's going on.</p>
<h2><a name="p-7702-but-is-the-fear-ghost-justified-or-trust-the-userhttpsforumrebolinfottrust-the-users-judgment-when-you-can2211-1" class="anchor" href="https://forum.rebol.info#p-7702-but-is-the-fear-ghost-justified-or-trust-the-userhttpsforumrebolinfottrust-the-users-judgment-when-you-can2211-1"></a>But Is <em>The Fear</em> <img src="https://forum.rebol.info/images/emoji/twitter/ghost.png?v=12" title=":ghost:" class="emoji" alt=":ghost:" loading="lazy" width="20" height="20"> Justified? Or <a href="https://forum.rebol.info/t/trust-the-users-judgment-when-you-can/2211">"Trust The User"</a>?</h2>
<p>The only <em>mechanical</em> problem with mixing dialected-interpreted values with code is that it screws with enfix.  Because the dialect is going one item at a time--consuming types that it recognizes--and then calling out to the evaluator when it sees things it doesn't--it could consume an item that people thought was meant for the left hand side of a function.  That's not the end of the world.</p>
<p>I dunno.  Beyond just the fear of confusion, we could also open up dialecting for paths and chains.  I feel like there's a lot of cool things we can do with PRINT and giving meanings to things...</p>
<pre><code> &gt;&gt; string: "abcdef"

&gt;&gt; print ["What about limiting prints?" string:3]
== What about limiting prints? abc
</code></pre>
<p>So how oppressive would it really be if any function calls in PRINT were in GROUP!s?</p>
<h2><a name="p-7702-dialect-with-fear-or-dialect-without-fear-but-dialect-2" class="anchor" href="https://forum.rebol.info#p-7702-dialect-with-fear-or-dialect-without-fear-but-dialect-2"></a>Dialect With Fear, Or Dialect Without Fear, But... Dialect</h2>
<p>You'll have a hard time convincing people your "dialected" language is all that when C's printf() is kicking your butt in the features department.  So we're way behind schedule on having a featured PRINT with intelligent formatting as a dialect.</p>
<p>My instincts say that using GROUP!s for function calls isn't that oppressive, and cleans up some edge cases like enfix meddling with the code.  When I have complex expressions in PRINT I usually parenthesize them anyway.</p>
<p>So I'm eyeing the concept of requiring the groups.</p>
          <p><a href="https://forum.rebol.info/t/the-fear-of-dialecting-print/972/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fear-of-dialecting-print/972/2</link>
        <pubDate>Thu, 19 Sep 2024 21:43:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-972-2</guid>
        <source url="https://forum.rebol.info/t/the-fear-of-dialecting-print/972.rss">&quot;The Fear&quot; Of Dialecting PRINT</source>
      </item>
      <item>
        <title>&quot;The Fear&quot; Of Dialecting PRINT</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've talked in the past about how I think PRINT of a BLOCK! is a pretty limited dialect, in that its hands are kind of tied because it allows just any evaluation, not required to be in a GROUP!.  Compare this with PARSE, which strictly controls evaluations.</p>
<p>One thing that occurs to me that could be done without really making that much of a ripple in SPACED/UNSPACED/DELIMIT would be if THE-WORD! could mean "mold this":</p>
<pre><code>&gt;&gt; value: [a b c]

&gt;&gt; print ["Value is:" value]
Value is a b c

&gt;&gt; print ["Value is:" @value]
Value is [a b c]
</code></pre>
<p>Note this is a suggestion for the direct dialect behavior, not of a THE-WORD! that gets generated:</p>
<pre><code>&gt;&gt; print ["Value is:" the @value]
Value is @value
</code></pre>
<p>The idea that every stringy type that isn't a TEXT! form with their delimiters is something I've been assuming for a bit, in a "WYSIWYG" kind of mentality.</p>
<p>One technical question interfering in the evaluation raises is what to do about infix, such as something that is looking to pick up the THE-WORD! on the left.</p>
<pre><code>&gt;&gt; @value left-quote
== @value

&gt;&gt; print ["Value is" @value left-quote]
Value is @value  ; this is presumably what the output should be
</code></pre>
<p>This would mean that while SPACED was looking at the pending evaluations, it would have to do something along the lines of notice it was a THE-WORD!, do the evaluation, and then ask if the evaluation moved by only one unit.  There's actually more to worry about than that, because pure invisible comments would be evaluated as well...</p>
<p>Such interactions are complex, and raise a lot of questions about just how dialect-y you can get when you let people write any evaluative material in a block like that.  But requiring GROUP! would be rather heavy-handed, and if literal inspections were done then at least if that's not what you wanted, you could use a group.</p>
<h2><a name="p-2842-if-this-isnt-good-is-any-print-spaced-delimit-dialecting-good-1" class="anchor" href="https://forum.rebol.info#p-2842-if-this-isnt-good-is-any-print-spaced-delimit-dialecting-good-1"></a>If this isn't good, is <em>any</em> PRINT (SPACED, DELIMIT) dialecting good?</h2>
<p>People certainly want to use literal TAG! in unspaced:</p>
<pre><code>unspaced [&lt;b&gt; "bolded text" &lt;/b&gt;]
</code></pre>
<p>So the idea of using tags for control codes or saying how many digits of precision to print integers with would probably be unpopular.  Is PRINT never going to aspire to more, and is that the job of a higher level <strong>print format</strong> routine?</p>
<p>If that's the mindset, then this THE-WORD! proposal is probably the only change that might be considered for squeaking by, but if it's the only irregularity it's probably not worth it.  (?)</p>
          <p><a href="https://forum.rebol.info/t/the-fear-of-dialecting-print/972/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fear-of-dialecting-print/972/1</link>
        <pubDate>Sat, 22 Dec 2018 08:25:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-972-1</guid>
        <source url="https://forum.rebol.info/t/the-fear-of-dialecting-print/972.rss">&quot;The Fear&quot; Of Dialecting PRINT</source>
      </item>
  </channel>
</rss>
