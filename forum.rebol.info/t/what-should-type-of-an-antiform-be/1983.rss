<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What Should TYPE OF an Antiform Be?</title>
    <link>https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983</link>
    <description>At this exact moment (in Sep 2022)...TYPE OF any antiform is an error, while both TYPE OF NULL and TYPE OF VOID give back NULL.

OF is a generic operation (the enfix form of REFLECT that quotes the word on its left.  It may be desirable to honor the VOID-in-NULL out convention for all the other reflectors that aren&#39;t TYPE... and it&#39;s desirable to error on NULL more generically.

    &gt;&gt; label of null
    ** Error: You didn&#39;t give anything

    &gt;&gt; label of maybe null  ; MAYBE NULL is VOID 
    ; null

So if **type of** follows the same pattern as other **xxx of**, we&#39;d surmise that you don&#39;t use TYPE OF to discern NULL and VOID.  It errors on NULL input and gives you back NULL if you MAYBE it.

But what happens when you ask:

    &gt;&gt; spread [d e]
    == ~(d e)~  ; anti

    &gt;&gt; type of spread [d e]
    ???

## The Original Plan Was *No* Arguments Received Antiforms

In the original conception, function frames weren&#39;t capable of holding antiforms in the arguments.  You physically could not receive a parameter that was an antiform.

I was also looking at the idea that some antiforms--such as raised ERROR!--would be completely impossible to get into a variable, *ever*.

The only workaround was if a function used the ^META parameter convention, in which case an antiform would come in as a QUASI! form of the value...while normal values would come in as one level quoted higher than they were:

     &gt;&gt; detector: func [^x] [print [&quot;Meta of X:&quot; mold x]]

     &gt;&gt; detector [d e]
     Meta of X: &#39;[d e]

     &gt;&gt; detector spread [d e]
     Meta of X: ~(d e)~

Ultimately I backed down on this, instead allowing you to use type predicates to narrow which antiforms you&#39;d be willing to accept:

    &gt;&gt; splicetaker: func [x [any-value! splice?]] [
           append [a b c] :x
       ]

    &gt;&gt; splicetaker [d e]
    == [a b c [d e]]

    &gt;&gt; splicetaker spread [d e]
    == [a b c d e]

A primary driver behind this change was that operations which wanted to do things like ADAPT a function frame were having to become sensitive to whether a parameter was ^META or not.  It seemed that standardizing the frame in a way that permitted antiforms as currency made more sense than having arguments be sometimes-meta&#39;d, sometimes not.

*(Note: A later driver of this was that [LOGIC became implemented with antiforms](https://forum.rebol.info/t/why-theres-no-boolean-type-storable-in-a-block/2095), and needing to make a parameter meta to take logic was another bridge-too-far.)*

## What if OF (REFLECT) Didn&#39;t Take Antiforms?

So we could say that if you think you have an antiform in your hand, you&#39;re responsible for ^META-ing it yourself:

    &gt;&gt; metatyper: func [x [any-value! splice?]] [
           print [&quot;Metatype of X is&quot; type of ^x]
       ]

    &gt;&gt; metatyper [d e]
    == &amp;[&#39;block]  ; the TYPE OF received a QUOTED!, so e.g. answer incorporates quoted

    &gt;&gt; metatyper spread [d e]
    == &amp;[~block~]  ; got QUASI!, so TYPE OF answer incorporates quasi

On the plus side of such an approach, we don&#39;t have to invent any type representations for antiforms.</description>
    
    <lastBuildDate>Sat, 17 Feb 2024 22:23:00 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What Should TYPE OF an Antiform Be?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1983">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I think I like TYPE OF NULL being NULL</p>
<ul>
<li>I like it even if it breaks a pattern in XXX OF where VOID input means NULL out, and NULL input is an error</li>
<li>TYPE feels like a fairly special kind of question, so it's probably okay</li>
</ul>
</blockquote>
</aside>
<p>So I'm a little conflicted here.  Because <em><strong>if</strong> null has an answer to TYPE OF</em>, then I like that answer to be NULL.  But I don't like the idea of casually giving back an answer to TYPE OF for null, because it's supposed to be a kind of failure signal and draw attention to itself.</p>
<p>The idea of having a special "TYPE-BUT-IT-CAN-BE-NULL" question (like <strong><code>type* of</code></strong>) is one possibility for cases when you are sure that you intentionally want to tell if you have a null in your hand.</p>
<p>But I had what is probably a better idea...</p>
<h2>
<a name="what-if-we-used-definitional-errors-and-try-1" class="anchor" href="https://forum.rebol.info#what-if-we-used-definitional-errors-and-try-1"></a>What If We Used Definitional Errors, and TRY?</h2>
<p>Let's say every value gives an answer to TYPE OF, except for the one case of NULL.  But if you ask for it, TYPE OF raises a definitional error.  Then if you TRY it to defuse the error... giving you back a NULL!</p>
<pre><code> &gt;&gt; thing: null

 &gt;&gt; type of thing
 ** Error: TYPE OF NULL not legal (use TRY TYPE OF NULL if intended)

 &gt;&gt; try type of thing
 == ~null~  ; antiform
</code></pre>
<p>So you can write:</p>
<pre><code> switch try type of thing [
     null [... not a type, but you react to null ...]
     void! [...]
     splice! [...]
     logic! [...]
     etc.
 ]
</code></pre>
<p>You'd be guided by the TRY and the fact that NULL! does not exist to use the odd-man-out of NULL here.</p>
<p>That's actually pretty satisfying.  But what if you're trying to get at the FIRST TYPE OF?</p>
<p>Well, that suggests that TYPE OF VOID has to be &amp;[void] so that if you write <strong>first maybe try type of</strong> the TRY turns the error to null, the MAYBE turns the null to a void, and then FIRST gives null based on void-in-null-out.  VOID in gives you the word VOID out in that case, NULL in gives you NULL out in that case.</p>
<p>It's a bit of a mouthful, but nulls are supposed to be "ornery".  If people don't like it, they can test for null independently of the switch, which is probably what a normal person would do.</p>
<p>(There's some little nagging part of me that wants <strong>type of void</strong> to be something like <code>&amp;[]</code>.  I've always had some kind of urge to avoid reifying the types of voids and nulls... as too much of "something from nothing".  But it might be irrational.  Though not wanting to be too casual about allowing TYPE OF NULL is not irrational, I don't think.)</p>
          <p><a href="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/8</link>
        <pubDate>Sat, 17 Feb 2024 22:23:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1983-8</guid>
        <source url="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983.rss">What Should TYPE OF an Antiform Be?</source>
      </item>
      <item>
        <title>What Should TYPE OF an Antiform Be?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1983">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So I propose just not defining these ending-in-! aliases for type constraints. If you're writing code in a function spec, just use the predicate function directly:</p>
<pre><code class="lang-plaintext"> something: func [param [integer! logic?]] [...]
</code></pre>
</blockquote>
</aside>
<p>I should point out that there will still be functions that test for concrete types, like <strong>integer?</strong>.  So people can use those functions in type specs, e.g. <strong>foo: func [x [integer?]] [...]</strong> instead of the type <strong>integer!</strong>.  That's a bit of an annoying uninteresting degree of freedom.  But they can be made to perform equivalently.</p>
          <p><a href="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/7</link>
        <pubDate>Wed, 21 Jun 2023 17:53:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1983-7</guid>
        <source url="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983.rss">What Should TYPE OF an Antiform Be?</source>
      </item>
      <item>
        <title>What Should TYPE OF an Antiform Be?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="3" data-topic="1983">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I suspect I'm missing something here. But as with most things, I guess I just have to kind of try things and feel them out.</p>
</blockquote>
</aside>
<p>I believe what I was missing is that really, <strong>switch type of x [...]</strong> is broken because it goes through a middle-man... some concept of "type".  You have to get a good answer for TYPE OF for everything, which you are then switching on.</p>
<p>Better is something like <strong>switch/type x [...]</strong> where <em>type constraints</em> (compositions of arbitrary functions) can power the process with access to the full value.</p>
<p>Type constraints are done with TYPE-WORD! (or TYPE-TUPLE! or TYPE-PATH!), and are just a way of referring to functions that perform the type test.</p>
<pre><code> &gt;&gt; parse [1 3 5] [some &amp;any-odd?]
 == 5
</code></pre>
<p>There is no special "type" for a block that contains a single word... it's just <em>"a block"</em>.  Similarly I'd say there is there is no special "type" for an antiform of a group... it's just <em>"an antiform"</em>.</p>
<pre><code>&gt;&gt; type of 10
== &amp;[integer]

&gt;&gt; type of [a]
== &amp;[block]

&gt;&gt; type of first ['a]
== &amp;[quoted]

&gt;&gt; type of true  ; it's an antiform of the word TRUE
== &amp;[antiform]

&gt;&gt; type of null  ; it's an antiform of the word NULL
== &amp;[antiform]
</code></pre>
<h2>
<a name="things-like-logic-constraints-should-not-be-written-as-logic-1" class="anchor" href="https://forum.rebol.info#things-like-logic-constraints-should-not-be-written-as-logic-1"></a>Things like logic constraints should not be written as LOGIC!</h2>
<p>I think this would be a bad idea:</p>
<pre><code> logic!: &amp;logic?
</code></pre>
<p>Right now in my prototype, <strong>integer!</strong> is defined as <strong>&amp;[integer]</strong> so you can use it in a switch statement as was done classically.  But this is likely to lead to problems, when people try to extend that to something named LOGIC!</p>
<pre><code>switch type of x [
    logic! [...]  ; can't work, logic! is &amp;logic?, not &amp;[antiform]
    even-integer! [...]  ; more obviously couldn't work
 ]
</code></pre>
<p>So I propose just not defining these ending-in-! aliases for type constraints.  If you're writing code in a function spec, just use the predicate function directly:</p>
<pre><code> something: func [param [integer! logic?]] [...]
</code></pre>
<p>And if you're writing a PARSE rule or a MATCH, just use the extra &amp; character.  It adds a small amount of noise, but I quickly became comfortable with it.</p>
<pre><code>&gt;&gt; parse [a b: @c] [some &amp;any-word?]
== @c
</code></pre>
<p>This can be made backwards compatible in bootstrap Ren-C, because it let you use ampersands in word names.  So the workaround for bootstrap would be:</p>
<pre><code>ren-c-old&gt;&gt; &amp;integer?: integer!
== #[datatype! integer!]
</code></pre>
<h2>
<a name="we-may-want-to-call-this-kind-of-vs-type-of-2" class="anchor" href="https://forum.rebol.info#we-may-want-to-call-this-kind-of-vs-type-of-2"></a>We May Want to Call This KIND OF vs. TYPE OF</h2>
<p>Over the long term I'm not sure what sort of type system a Redbol-type language could have.  We could imagine TYPE OF being a rich answer that came back from an &amp;[object] to describe its heritage.</p>
<p><strong>kind of</strong> is a little narrower than implying some elaborate type system.  It would leave TYPE OF for future use.</p>
          <p><a href="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/4</link>
        <pubDate>Fri, 14 Apr 2023 00:02:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1983-4</guid>
        <source url="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983.rss">What Should TYPE OF an Antiform Be?</source>
      </item>
      <item>
        <title>What Should TYPE OF an Antiform Be?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>
<a name="how-might-type-inform-type-of-void-and-type-of-null-1" class="anchor" href="https://forum.rebol.info#how-might-type-inform-type-of-void-and-type-of-null-1"></a>How Might TYPE* Inform TYPE OF VOID and TYPE OF NULL?</h2>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1983">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>OF is a generic operation (the enfix form of REFLECT that quotes the word on its left. It's desirable to honor the VOID-in-NULL out convention for all the other reflectors that aren't TYPE... and it's desirable to error on NULL more generically.</p>
<pre><code>&gt;&gt; label of null
** Error: You didn't give anything

&gt;&gt; label of maybe null  ; MAYBE NULL is VOID 
; null
</code></pre>
<p>So if <strong>type of</strong> follows the same pattern as other <strong>xxx of</strong>, we'd surmise that you don't use TYPE OF to discern NULL and VOID. It errors on NULL input and gives you back NULL if you MAYBE it.</p>
</blockquote>
</aside>
<p>Above I suggest an XXX OF consistency, with TYPE OF NULL as an error and TYPE OF VOID is NULL.</p>
<p>If that were so, and TYPE* OF VOID is <em>not</em> NULL, then it would be the only case where TYPE* OF would change an answer from what the TYPE OF would say.</p>
<p>Does that suggest not allowing plain TYPE OF either NULL or VOID, and requiring you to use TYPE*, to get some kind of reified answer?  (This would introduce <strong><code>null!*</code></strong> and <strong><code>void!*</code></strong>)</p>
<p>Or does it suggest allowing NULL and not VOID?  (This would introduce <strong><code>null!</code></strong> with no <code>*</code>, and <strong><code>void!*</code></strong>)</p>
<pre><code>&gt;&gt; type of null
== &amp;[null]

&gt;&gt; type* of null
== &amp;[null]

&gt;&gt; type of void
** Error: Use TYPE* to take type of antiforms if intentional

&gt;&gt; type* of void
== ~&amp;[null]~
</code></pre>
<h2>
<a name="but-ive-always-been-uncomfortable-with-null-2" class="anchor" href="https://forum.rebol.info#but-ive-always-been-uncomfortable-with-null-2"></a>But I've Always Been Uncomfortable With NULL!</h2>
<p><a href="https://forum.rebol.info/t/revisiting-opt-in-the-func-spec-dialect/1658">When discussing why I made the <code>&lt;opt&gt;</code> tag instead of null!</a>, I said:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1658">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/revisiting-opt-in-the-func-spec-dialect/1658/1">Revisiting `&lt;opt&gt;` in the Func Spec Dialect</a>
</div>
<blockquote>
<p>If a TYPE OF operation can make a reified thing spring into existence out of the absence of a thing, I feel like something is out of whack.</p>
<p>There's a clear advantage if you're going to be chaining things.</p>
<pre><code>x: (type of select data item) else [
    fail "A reified NULL! datatype doesn't permit this kind of handling"
]
</code></pre>
<p>Though that's a more modern intuition about it; I wasn't thinking about that when <code>&lt;opt&gt;</code> was made.</p>
<p>I think one angle is that I felt like the optionalness was somehow a "big deal" and needed to jump off the page for the spec more. NULL! just blended in.</p>
<pre><code>foo: func [arg [null! integer! block!]] [...]
bar: func [arg [integer! block! group! path! null! word!]] [...]
</code></pre>
</blockquote>
</aside>
<h2>
<a name="i-dislike-the-idea-of-type-changing-answers-3" class="anchor" href="https://forum.rebol.info#i-dislike-the-idea-of-type-changing-answers-3"></a>I Dislike The Idea Of TYPE* Changing Answers</h2>
<p>Imagine you had code like this:</p>
<pre><code> switch type of maybe (...) [
    null [...]  ; input was void, so void in null out
    integer! [...]
 ]
</code></pre>
<p>But one day you realize the input could be a splice or something, and so <code>TYPE*</code> gets swapped in:</p>
<pre><code> switch type* of (...) [  ; special form, distinguishes void and null
    null!* [...]
    void!* [...]  
    integer! [...]
    splice!* [...]
 ]
</code></pre>
<p>It seems to me that the meaning of NULL should not change, all things being equal.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/exploding_head.png?v=12" title=":exploding_head:" class="emoji only-emoji" alt=":exploding_head:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="this-is-very-aggravating-but-4" class="anchor" href="https://forum.rebol.info#this-is-very-aggravating-but-4"></a>This Is Very Aggravating... but...</h2>
<p>I think I like TYPE OF NULL being NULL</p>
<ul>
<li>
<p>I like it even if it breaks a pattern in XXX OF where VOID input means NULL out, and NULL input is an error</p>
</li>
<li>
<p>TYPE feels like a fairly special kind of question, so it's probably okay</p>
</li>
</ul>
<p>Internally we need a way to put nulls and voids into typesets, and I can imagine usermode cases where this is useful as well.</p>
<ul>
<li>
<p>If TYPE* is able to give a reified answer of NULL!* and VOID!* this would provide some uses</p>
</li>
<li>
<p>This would imply that TYPE* OF NULL and TYPE OF NULL would be different answers</p>
</li>
</ul>
<p>So what I'm going to try is a world where function parameters are powered by this <code>TYPE*</code> concept, give the same concept to usermode, and see what emerges from that.</p>
<p>I suspect I'm missing something here. But as with most things, I guess I just have to kind of try things and feel them out.</p>
          <p><a href="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/3</link>
        <pubDate>Mon, 26 Sep 2022 07:31:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1983-3</guid>
        <source url="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983.rss">What Should TYPE OF an Antiform Be?</source>
      </item>
      <item>
        <title>What Should TYPE OF an Antiform Be?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1982">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/what-if-datatype-was-isotopic-tl-dr-bad-idea/1982/2">What If "DATATYPE" Was Isotopic (TL;DR: Bad Idea)</a>
</div>
<blockquote>
<p>If we don't do that, we get into problems of TYPE OF serving two masters. If it gets a parameter pack, is it supposed to say that it's the type of the first item in the pack... or is it supposed to tell you it's a pack? The ^META removes the ambiguity.</p>
</blockquote>
</aside>
<p>Devil's advocacy here <img src="https://forum.rebol.info/images/emoji/twitter/japanese_goblin.png?v=12" title=":japanese_goblin:" class="emoji" alt=":japanese_goblin:" loading="lazy" width="20" height="20">  would say that if parameter types need to be able to take antiforms, then the type mechanics have to be able to represent the "antiform types" <em>somehow</em>.</p>
<p>And if there's a representation, there <em>would</em> be uses in usermode for it.  But it would have to be a special operator, and what it returned probably shouldn't be "a type" in the conventional sense.</p>
<p>For instance: It would be disruptive to do something like suddenly say all the types are actually "one level quoted up"...just to get this representation at quote level 0.  This would give antiforms the &amp;[~xxx~] representation, but at the cost of making everything else skew with an extra quote:</p>
<p>BAD WAY:</p>
<pre><code>&gt;&gt; type* of first [(1020)]
== &amp;['group]

&gt;&gt; type* of first [''(1020)]
== &amp;['''group]

&gt;&gt; type* of first [~(1020)~]
== &amp;['~group~]

&gt;&gt; type* of spread [d e]
== &amp;[~group~]
</code></pre>
<p>That's pretty awful and misleading, just to be able to get that last representation...which you generally wouldn't use for anything beyond comparison anyway.</p>
<h3>
<a name="what-if-the-result-were-itself-a-quasi-of-the-type-1" class="anchor" href="https://forum.rebol.info#what-if-the-result-were-itself-a-quasi-of-the-type-1"></a>What if the result were itself a QUASI! of the type?</h3>
<p>If only used for comparison and never for matching, then is there a reason why TYPE*'s answer has to be an actual TYPE-BLOCK! in the case of antiforms?</p>
<pre><code>&gt;&gt; type* of first [(1020)]
== &amp;[group]

&gt;&gt; type* of first [''(1020)]
== &amp;[''group]

&gt;&gt; type* of first [~(1020)~]
== &amp;[~group~]

&gt;&gt; type* of spread [d e]
== ~&amp;[~group~]~
</code></pre>
<p>That's some fairly outside-the-box thinking (pun intended), which keeps the other types looking appropriate for their input.  It has the nice touch that while all the <em>real</em> datatypes are unevaluative, the quasiform would evaluate into something that is sort of nasty, to show that you're probably confused.  So while it isn't an antiform (and you wouldn't want it to be) it has that going for it, still allowing its raison d'etre of comparison:</p>
<pre><code>splice!*: '~&amp;[~group~]~
activation!*: '~&amp;[~action~]~

switch type* of :x [
   splice!* [...]
   integer! [...]
   activation!* [...]
]
</code></pre>
<p>There I'm spitballing the idea that the antiform "types" are made to stand out by having an asterisk after them.</p>
<h3>
<a name="these-quasi-forms-wouldnt-actually-be-a-datatype-2" class="anchor" href="https://forum.rebol.info#these-quasi-forms-wouldnt-actually-be-a-datatype-2"></a>These quasi forms wouldn't <em>actually</em> be a datatype...</h3>
<p>This would mean typical things designed to react to TYPE-BLOCK! wouldn't react to these.</p>
<p>But is that a bad thing?  Consider trying to use it in PARSE:</p>
<pre><code>&gt;&gt; splice!*: '~&amp;[~group~]~

&gt;&gt; parse [? ? ?] [some splice!*]
; ** What were you expecting to do with it if it WAS a datatype? **
</code></pre>
<p>You can't match it against anything you'd find in a block, only evaluative products.  No harm done in PARSE by not being a "real type".</p>
<p>On the other hand, you might imagine using it with something like MATCH:</p>
<pre><code> &gt;&gt; match splice!* spread [d e]
 == ~(d e)~  ; anti
</code></pre>
<p>So match <em>could</em> be written to say it takes these forms (let's say we call them "antiTYPES")</p>
<pre><code>match: native [
    test [type-block! antitype? block!]
    value [any-value! any-antiform!*]
]
</code></pre>
<p>Should it go this far?  I don't know.</p>
<p>I'm reluctant to see <strong><code>[any-value! any-antiform!*]</code></strong> typesets popping up everywhere.  Part of the whole religion of antiforms is that they only show up in arbitrary <em>outputs</em>, and anything that takes antiforms in will only take <em>very specific ones</em>...as an alternative to trying to slipstream that state into a refinement or something.</p>
<p>But...I've struggled with some convolutions you get when you try to write code without being able to branch on types including antiform ones.  And as I mentioned, typesets kind of need it too in order to work internally.</p>
          <p><a href="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/2</link>
        <pubDate>Sun, 25 Sep 2022 11:57:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1983-2</guid>
        <source url="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983.rss">What Should TYPE OF an Antiform Be?</source>
      </item>
      <item>
        <title>What Should TYPE OF an Antiform Be?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>At this exact moment (in Sep 2022)...TYPE OF any antiform is an error, while both TYPE OF NULL and TYPE OF VOID give back NULL.</p>
<p>OF is a generic operation (the enfix form of REFLECT that quotes the word on its left.  It may be desirable to honor the VOID-in-NULL out convention for all the other reflectors that aren't TYPE... and it's desirable to error on NULL more generically.</p>
<pre><code>&gt;&gt; label of null
** Error: You didn't give anything

&gt;&gt; label of maybe null  ; MAYBE NULL is VOID 
; null
</code></pre>
<p>So if <strong>type of</strong> follows the same pattern as other <strong>xxx of</strong>, we'd surmise that you don't use TYPE OF to discern NULL and VOID.  It errors on NULL input and gives you back NULL if you MAYBE it.</p>
<p>But what happens when you ask:</p>
<pre><code>&gt;&gt; spread [d e]
== ~(d e)~  ; anti

&gt;&gt; type of spread [d e]
???
</code></pre>
<h2>
<a name="the-original-plan-was-no-arguments-received-antiforms-1" class="anchor" href="https://forum.rebol.info#the-original-plan-was-no-arguments-received-antiforms-1"></a>The Original Plan Was <em>No</em> Arguments Received Antiforms</h2>
<p>In the original conception, function frames weren't capable of holding antiforms in the arguments.  You physically could not receive a parameter that was an antiform.</p>
<p>I was also looking at the idea that some antiforms--such as raised ERROR!--would be completely impossible to get into a variable, <em>ever</em>.</p>
<p>The only workaround was if a function used the ^META parameter convention, in which case an antiform would come in as a QUASI! form of the value...while normal values would come in as one level quoted higher than they were:</p>
<pre><code> &gt;&gt; detector: func [^x] [print ["Meta of X:" mold x]]

 &gt;&gt; detector [d e]
 Meta of X: '[d e]

 &gt;&gt; detector spread [d e]
 Meta of X: ~(d e)~
</code></pre>
<p>Ultimately I backed down on this, instead allowing you to use type predicates to narrow which antiforms you'd be willing to accept:</p>
<pre><code>&gt;&gt; splicetaker: func [x [any-value! splice?]] [
       append [a b c] :x
   ]

&gt;&gt; splicetaker [d e]
== [a b c [d e]]

&gt;&gt; splicetaker spread [d e]
== [a b c d e]
</code></pre>
<p>A primary driver behind this change was that operations which wanted to do things like ADAPT a function frame were having to become sensitive to whether a parameter was ^META or not.  It seemed that standardizing the frame in a way that permitted antiforms as currency made more sense than having arguments be sometimes-meta'd, sometimes not.</p>
<p><em>(Note: A later driver of this was that <a href="https://forum.rebol.info/t/why-theres-no-boolean-type-storable-in-a-block/2095">LOGIC became implemented with antiforms</a>, and needing to make a parameter meta to take logic was another bridge-too-far.)</em></p>
<h2>
<a name="what-if-of-reflect-didnt-take-antiforms-2" class="anchor" href="https://forum.rebol.info#what-if-of-reflect-didnt-take-antiforms-2"></a>What if OF (REFLECT) Didn't Take Antiforms?</h2>
<p>So we could say that if you think you have an antiform in your hand, you're responsible for ^META-ing it yourself:</p>
<pre><code>&gt;&gt; metatyper: func [x [any-value! splice?]] [
       print ["Metatype of X is" type of ^x]
   ]

&gt;&gt; metatyper [d e]
== &amp;['block]  ; the TYPE OF received a QUOTED!, so e.g. answer incorporates quoted

&gt;&gt; metatyper spread [d e]
== &amp;[~block~]  ; got QUASI!, so TYPE OF answer incorporates quasi
</code></pre>
<p>On the plus side of such an approach, we don't have to invent any type representations for antiforms.</p>
          <p><a href="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983/1</link>
        <pubDate>Sat, 24 Sep 2022 10:23:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1983-1</guid>
        <source url="https://forum.rebol.info/t/what-should-type-of-an-antiform-be/1983.rss">What Should TYPE OF an Antiform Be?</source>
      </item>
  </channel>
</rss>
