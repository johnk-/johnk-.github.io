<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Influences On Startup Time And Memory Use</title>
    <link>https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972</link>
    <description>Right now it&#39;s not ideal to be focusing on things like startup time and memory use.  There are a lot of fundamental features being rethought--and recall that rules of optimizing code at the cost of clarity and flexibility of design are:

* Rule #1: Don&#39;t Do It

* Rule #2 (Experts Only) Don&#39;t Do It... Yet.

...BUT, the issues can&#39;t be ignored forever.  And it&#39;s reasonable for one to ask why there&#39;s been a dramatic increase in boot time and memory use between the build being used for bootstrap and a current commit.

So it&#39;s worth having a thread here to track some of what&#39;s involved.

## ENCAP Detection

By default we still run encap detection on all desktop builds, scanning the executable.  On Windows I think Shixin&#39;s version loads the whole binary into memory, and on Linux it still does quite a lot.

You can skip the detection by using `--no-encap`.

  https://github.com/metaeducation/ren-c/blob/master/scripts/encap.reb

But the encap and de-encapping tools will still be bundled in the executable.  They&#39;re not an extension, so if you don&#39;t want to pay for that...you need to entirely remove [early-boot modules like encap and unzip](https://forum.rebol.info/t/boot-footprint-giant-string-literal-vs-encap/1977) which are [built in another way](https://github.com/metaeducation/ren-c/blob/02d1ba2c6e2a8b5fc689d4d6684435ae369a528d/src/main/prep-main.reb#L45)

Obviously platform-specific C code would be faster and lighter than PARSE.  And there was some before, but it entangled things in the core with FILE I/O...and it was dedicated finicky C for a purpose we&#39;re not really focusing on, especially in the web build.

The decision to move encapping to userspace tools was mine, and not something I regret.  But since we&#39;re not using it, all it&#39;s really doing is acting as a test.  I&#39;ve made a separate thread to talk about the fate of Encap, and whether we should depend on it more or distance from it further:

  https://forum.rebol.info/t/boot-footprint-giant-string-literal-vs-encap/1977

## A Big Cost Is Going To Come From UPARSE

UPARSE right now is an elaborate exercise of the ability to build complex feature-filled dialects in userspace.  And it does so at great cost to the evaluator.

Of course the plan is to cut that down, because COMBINATORs are just functions.  They could be written as natives.  And even more importantly, the process of *combinating itself* needs to be native.

I have done some experiments with this:

  https://forum.rebol.info/t/progress-on-nativizing-parser-combinators/1636

But those experiments are currently inactive, because the design needed more work.  And it&#39;s easier to churn through that work with userspace code.

What can we do about it? Well until UPARSE goes through an optimization phase, we can just use PARSE3 in boot...or at least for whatever subsetted codebase is in this metric.  The main thing is just to get it measured so we know how much of this is known UPARSE-ism vs. other unknowns.  I&#39;m going to bet it&#39;s a lot...even though it&#39;s not used all that terribly much in boot, it&#39;s going to be big.

Cutting it out for the moment would at least help focus on the next bigger things.

## Another Pain Point Is Going to be GET+SET Atop PICK+POKE

I spent quite a while working through what a GET and SET and PICK and POKE actually were.  Ultimately I concluded:

* GETs are just sequences of individual PICK steps (where a GET of a WORD! starts the chain with the binding of the word, and PICKs the word out of that object)

* SETs are a sequence of PICK steps which are kept track of...followed by POKE.  That POKE can return nothing (in which case you&#39;re done) or it can return an adjusted value.  If the value needed to be adjusted that means it then gets POKE&#39;d back into the cell back in the chain, and this ripples back so long as the bitpattern in cells need to be adjusted.

I haven&#39;t gone back to this prototype and optimized it.  That means it quite literally is building evaluation chains of PICK and POKE every time it does tuple processing (what would be &quot;path picking&quot;, e.g. variables out of objects).  I wasn&#39;t sure if this was the answer or not, so it seemed best to keep it general to be able to play with it.

It&#39;s tough to know how much &quot;hardening&quot; should be done on this.  It&#39;s nice to be able to hijack and hook and bend things.  I think I still want to consider it to be calls to PICK and POKE, but we can do those calls via frames built just for those functions...and not generic evaluation.  I&#39;ll have to look at it.

## Each Extension Adds Memory Use, But Also Has Startup Code

By default the desktop includes every extension, even for making animated GIFs...as well as currently
 
If one wants to make a non-kitchen-sink test build of Ren-C...obviously use `debug: none`, and [chopping extensions out with **`-`** instead of **`+`**](https://github.com/metaeducation/ren-c/blob/02d1ba2c6e2a8b5fc689d4d6684435ae369a528d/configs/default-config.r#L23), for starters.  Note that extensions can be [built as separate DLL/.so with **`*`**](https://github.com/metaeducation/ren-c/actions/runs/3056527403/jobs/4930783888#step:22:3)

## Other Factors Need Managing On a Case-by-Case Basis

Those would be among the only things that can be done without *some* attention to the C, which hasn&#39;t been vetted for this metric in years.  But it isn&#39;t a priority right at this exact moment--there are much more important things.

*(If you want some of my general philosophy about why Ren-C will be competitive with R3-Alpha despite &quot;increased complexity&quot;, then seeing some [old stats on SPECIALIZE might be illuminating](https://forum.rebol.info/t/the-now-even-more-special-specialize/588))*</description>
    
    <lastBuildDate>Wed, 28 Sep 2022 00:41:21 +0000</lastBuildDate>
    <category>Optimization</category>
    <atom:link href="https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Influences On Startup Time And Memory Use</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="WickedSmoke" data-post="2" data-topic="1972">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/wickedsmoke/40/338_2.png" class="avatar"> WickedSmoke:</div>
<blockquote>
<p>I use "valgrind --tool=massif" to collect data.</p>
</blockquote>
</aside>
<p>Thanks.  I occasionally run Valgrind (catches slightly different things than address sanitizer) but was not aware of this particular tool.</p>
          <p><a href="https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972/4</link>
        <pubDate>Mon, 26 Sep 2022 02:06:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1972-4</guid>
        <source url="https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972.rss">Influences On Startup Time And Memory Use</source>
      </item>
      <item>
        <title>Influences On Startup Time And Memory Use</title>
        <dc:creator><![CDATA[WickedSmoke]]></dc:creator>
        <description><![CDATA[
            <p>To collect startup times and memory use, I use "valgrind --tool=massif" to collect data.</p>
          <p><a href="https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972/2</link>
        <pubDate>Tue, 20 Sep 2022 13:07:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1972-2</guid>
        <source url="https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972.rss">Influences On Startup Time And Memory Use</source>
      </item>
      <item>
        <title>Influences On Startup Time And Memory Use</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Right now it's not ideal to be focusing on things like startup time and memory use.  There are a lot of fundamental features being rethought--and recall that rules of optimizing code at the cost of clarity and flexibility of design are:</p>
<ul>
<li>
<p>Rule <span class="hashtag">#1:</span> Don't Do It</p>
</li>
<li>
<p>Rule <span class="hashtag">#2</span> (Experts Only) Don't Do It... Yet.</p>
</li>
</ul>
<p>...BUT, the issues can't be ignored forever.  And it's reasonable for one to ask why there's been a dramatic increase in boot time and memory use between the build being used for bootstrap and a current commit.</p>
<p>So it's worth having a thread here to track some of what's involved.</p>
<h2>ENCAP Detection</h2>
<p>By default we still run encap detection on all desktop builds, scanning the executable.  On Windows I think Shixin's version loads the whole binary into memory, and on Linux it still does quite a lot.</p>
<p>You can skip the detection by using <code>--no-encap</code>.</p>
<p><a href="https://github.com/metaeducation/ren-c/blob/master/scripts/encap.reb">https://github.com/metaeducation/ren-c/blob/master/scripts/encap.reb</a></p>
<p>But the encap and de-encapping tools will still be bundled in the executable.  They're not an extension, so if you don't want to pay for that...you need to entirely remove <a href="https://forum.rebol.info/t/boot-footprint-giant-string-literal-vs-encap/1977">early-boot modules like encap and unzip</a> which are <a href="https://github.com/metaeducation/ren-c/blob/02d1ba2c6e2a8b5fc689d4d6684435ae369a528d/src/main/prep-main.reb#L45">built in another way</a></p>
<p>Obviously platform-specific C code would be faster and lighter than PARSE.  And there was some before, but it entangled things in the core with FILE I/O...and it was dedicated finicky C for a purpose we're not really focusing on, especially in the web build.</p>
<p>The decision to move encapping to userspace tools was mine, and not something I regret.  But since we're not using it, all it's really doing is acting as a test.  I've made a separate thread to talk about the fate of Encap, and whether we should depend on it more or distance from it further:</p>
<p><a href="https://forum.rebol.info/t/boot-footprint-giant-string-literal-vs-encap/1977" class="inline-onebox">Boot Footprint: Giant String Literal vs. Encap?</a></p>
<h2>A Big Cost Is Going To Come From UPARSE</h2>
<p>UPARSE right now is an elaborate exercise of the ability to build complex feature-filled dialects in userspace.  And it does so at great cost to the evaluator.</p>
<p>Of course the plan is to cut that down, because COMBINATORs are just functions.  They could be written as natives.  And even more importantly, the process of <em>combinating itself</em> needs to be native.</p>
<p>I have done some experiments with this:</p>
<p><a href="https://forum.rebol.info/t/progress-on-nativizing-parser-combinators/1636" class="inline-onebox">Progress on Nativizing Parser Combinators</a></p>
<p>But those experiments are currently inactive, because the design needed more work.  And it's easier to churn through that work with userspace code.</p>
<p>What can we do about it? Well until UPARSE goes through an optimization phase, we can just use PARSE3 in boot...or at least for whatever subsetted codebase is in this metric.  The main thing is just to get it measured so we know how much of this is known UPARSE-ism vs. other unknowns.  I'm going to bet it's a lot...even though it's not used all that terribly much in boot, it's going to be big.</p>
<p>Cutting it out for the moment would at least help focus on the next bigger things.</p>
<h2>Another Pain Point Is Going to be GET+SET Atop PICK+POKE</h2>
<p>I spent quite a while working through what a GET and SET and PICK and POKE actually were.  Ultimately I concluded:</p>
<ul>
<li>
<p>GETs are just sequences of individual PICK steps (where a GET of a WORD! starts the chain with the binding of the word, and PICKs the word out of that object)</p>
</li>
<li>
<p>SETs are a sequence of PICK steps which are kept track of...followed by POKE.  That POKE can return nothing (in which case you're done) or it can return an adjusted value.  If the value needed to be adjusted that means it then gets POKE'd back into the cell back in the chain, and this ripples back so long as the bitpattern in cells need to be adjusted.</p>
</li>
</ul>
<p>I haven't gone back to this prototype and optimized it.  That means it quite literally is building evaluation chains of PICK and POKE every time it does tuple processing (what would be "path picking", e.g. variables out of objects).  I wasn't sure if this was the answer or not, so it seemed best to keep it general to be able to play with it.</p>
<p>It's tough to know how much "hardening" should be done on this.  It's nice to be able to hijack and hook and bend things.  I think I still want to consider it to be calls to PICK and POKE, but we can do those calls via frames built just for those functions...and not generic evaluation.  I'll have to look at it.</p>
<h2>Each Extension Adds Memory Use, But Also Has Startup Code</h2>
<p>By default the desktop includes every extension, even for making animated GIFs...as well as currently</p>
<p>If one wants to make a non-kitchen-sink test build of Ren-C...obviously use <code>debug: none</code>, and <a href="https://github.com/metaeducation/ren-c/blob/02d1ba2c6e2a8b5fc689d4d6684435ae369a528d/configs/default-config.r#L23">chopping extensions out with <strong><code>-</code></strong> instead of <strong><code>+</code></strong></a>, for starters.  Note that extensions can be <a href="https://github.com/metaeducation/ren-c/actions/runs/3056527403/jobs/4930783888#step:22:3">built as separate DLL/.so with <strong><code>*</code></strong></a></p>
<h2>Other Factors Need Managing On a Case-by-Case Basis</h2>
<p>Those would be among the only things that can be done without <em>some</em> attention to the C, which hasn't been vetted for this metric in years.  But it isn't a priority right at this exact moment--there are much more important things.</p>
<p><em>(If you want some of my general philosophy about why Ren-C will be competitive with R3-Alpha despite "increased complexity", then seeing some <a href="https://forum.rebol.info/t/the-now-even-more-special-specialize/588">old stats on SPECIALIZE might be illuminating</a>)</em></p>
          <p><a href="https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972/1</link>
        <pubDate>Sun, 18 Sep 2022 22:11:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1972-1</guid>
        <source url="https://forum.rebol.info/t/influences-on-startup-time-and-memory-use/1972.rss">Influences On Startup Time And Memory Use</source>
      </item>
  </channel>
</rss>
