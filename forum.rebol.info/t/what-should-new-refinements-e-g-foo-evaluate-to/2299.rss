<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What Should &quot;New Refinements&quot; (e.g. :FOO) Evaluate To?</title>
    <link>https://forum.rebol.info/t/what-should-new-refinements-e-g-foo-evaluate-to/2299</link>
    <description>We know what new refinements will do when you put them in a dialect like APPLY.:

    call:shell // [  ; infix APPLY
        [(system.options.boot) --suppress {&quot;*&quot;} print.reb 100]

        :input &#39;none      ; pipe input from /dev/null
        :output data: {}  ; write output to string
    ]

The **`:input`** and **`:output`** will be noticed literally by APPLY.  But this doesn&#39;t prescribe any particular evaluator meaning for them when not dialected.

Old refinements (e.g. **`/input`** and **`/output`**) would evaluate to bound versions of themselves... so effectively synonyms for **`$/input`** and **`$/output`**.

*(This makes me aware of a likely bug in the optimization of paths (chains) of this size... they use a WORD! cell format.  Which means they only capture the binding of the specific word...while array-based sequences get a &quot;whole specifier&quot;.  It doesn&#39;t seem to me that the length of the sequence should affect what kind of environment it captures.  e.g. **`[_ input]`** should capture the same amount of context as the path produced by it does...but if we forced embedded GROUP!s to be fixed in their biding on sequence creation that might be undesirable.  Review.)*

Anyway...we know that **`.input`** is evaluative (picking the field out of the &quot;current coupled context&quot;).  And **`/input`** will be evaluative (calling a function).  Then **`foo:bar`** will be evaluative, calling FOO with the refinement BAR.

So what of **`:foo`**?  Due to what we want it to do in APPLY, we know that giving it any active meaning in the evaluator would be a bad idea.  But maybe the best idea is to be conservative and error on it for now.  That won&#39;t stop you from creating unbound forms (**`&#39;:foo`**) or bound forms (**`$:foo`**)...and discouraging its use as a generic inert form probably has advantages in other contexts besides helping APPLY.

If it turns out that having it act as a generic unbound version of itself has some great application, I&#39;ll reconsider.  But error for now.</description>
    
    <lastBuildDate>Fri, 27 Sep 2024 18:11:27 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/what-should-new-refinements-e-g-foo-evaluate-to/2299.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What Should &quot;New Refinements&quot; (e.g. :FOO) Evaluate To?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>We know what new refinements will do when you put them in a dialect like APPLY.:</p>
<pre><code>call:shell // [  ; infix APPLY
    [(system.options.boot) --suppress {"*"} print.reb 100]

    :input 'none      ; pipe input from /dev/null
    :output data: {}  ; write output to string
]
</code></pre>
<p>The <strong><code>:input</code></strong> and <strong><code>:output</code></strong> will be noticed literally by APPLY.  But this doesn't prescribe any particular evaluator meaning for them when not dialected.</p>
<p>Old refinements (e.g. <strong><code>/input</code></strong> and <strong><code>/output</code></strong>) would evaluate to bound versions of themselves... so effectively synonyms for <strong><code>$/input</code></strong> and <strong><code>$/output</code></strong>.</p>
<p><em>(This makes me aware of a likely bug in the optimization of paths (chains) of this size... they use a WORD! cell format.  Which means they only capture the binding of the specific word...while array-based sequences get a "whole specifier".  It doesn't seem to me that the length of the sequence should affect what kind of environment it captures.  e.g. <strong><code>[_ input]</code></strong> should capture the same amount of context as the path produced by it does...but if we forced embedded GROUP!s to be fixed in their biding on sequence creation that might be undesirable.  Review.)</em></p>
<p>Anyway...we know that <strong><code>.input</code></strong> is evaluative (picking the field out of the "current coupled context").  And <strong><code>/input</code></strong> will be evaluative (calling a function).  Then <strong><code>foo:bar</code></strong> will be evaluative, calling FOO with the refinement BAR.</p>
<p>So what of <strong><code>:foo</code></strong>?  Due to what we want it to do in APPLY, we know that giving it any active meaning in the evaluator would be a bad idea.  But maybe the best idea is to be conservative and error on it for now.  That won't stop you from creating unbound forms (<strong><code>':foo</code></strong>) or bound forms (<strong><code>$:foo</code></strong>)...and discouraging its use as a generic inert form probably has advantages in other contexts besides helping APPLY.</p>
<p>If it turns out that having it act as a generic unbound version of itself has some great application, I'll reconsider.  But error for now.</p>
          <p><a href="https://forum.rebol.info/t/what-should-new-refinements-e-g-foo-evaluate-to/2299/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-new-refinements-e-g-foo-evaluate-to/2299/1</link>
        <pubDate>Fri, 27 Sep 2024 18:11:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2299-1</guid>
        <source url="https://forum.rebol.info/t/what-should-new-refinements-e-g-foo-evaluate-to/2299.rss">What Should &quot;New Refinements&quot; (e.g. :FOO) Evaluate To?</source>
      </item>
  </channel>
</rss>
