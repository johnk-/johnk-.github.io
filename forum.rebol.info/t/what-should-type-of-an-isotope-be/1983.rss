<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What Should TYPE OF an Isotope Be?</title>
    <link>https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983</link>
    <description>At this exact moment...TYPE OF any isotope is an error, while both TYPE OF NULL and TYPE OF VOID give back NULL.

OF is a generic operation (the enfix form of REFLECT that quotes the word on its left.  It may be desirable to honor the VOID-in-NULL out convention for all the other reflectors that aren&#39;t TYPE... and it&#39;s desirable to error on NULL more generically.

    &gt;&gt; label of null
    ** Error: You didn&#39;t give anything

    &gt;&gt; label of maybe null  ; MAYBE NULL is VOID 
    ; null

So if **type of** follows the same pattern as other **xxx of**, we&#39;d surmise that you don&#39;t use TYPE OF to discern NULL and VOID.  It errors on NULL input and gives you back NULL if you MAYBE it.

But what happens when you ask:

    &gt;&gt; spread [d e]
    == ~(d e)~  ; isotope

    &gt;&gt; type of spread [d e]
    ???

## The Original Plan Was *No* Arguments Received Isotopes

In the original conception, function frames weren&#39;t capable of holding isotopes in the arguments.  You physically could not receive a parameter that was an isotope.

I was also looking at the idea that some isotope forms--such as isotopic ERROR!--would be completely impossible to get into a variable, *ever*.

The only workaround was if a function used the ^META parameter convention, in which case an isotope would come in as a QUASI! form of the value...while normal values would come in as quoted:

     &gt;&gt; detector: func [^x] [print [&quot;Meta of X:&quot; mold x]]

     &gt;&gt; detector [d e]
     Meta of X: &#39;[d e]

     &gt;&gt; detector spread [d e]
     Meta of X: ~(d e)~

Ultimately I backed down on this, instead allowing you to use type filtering to narrow which isotopes you&#39;d be willing to accept:

    &gt;&gt; splicetaker: func [x [any-value! ~group!~]] [
           append [a b c] :x
       ]

    &gt;&gt; splicetaker [d e]
    == [a b c [d e]]

    &gt;&gt; splicetaker spread [d e]
    == [a b c d e]

So this creates a new typeset feature that is hacked in terribly *(the presence of any ~xxx!~ currently means the same thing as ~any-value!~, but it&#39;s documentation for when the feature gets better)*.  And it means that the ^META parameter convention is basically something that can be implemented on top of this, by doing something like **`x: my meta`** at the beginning of the function.

A primary driver behind this change was that operations which wanted to do things like ADAPT a function frame were having to become sensitive to whether a parameter was ^META or not, and it was more of a headache than having to use the **:get-word** accessors on variables.  It seemed that standardizing the frame in a way that permitted isotopes as currency made more sense than having arguments be sometimes-meta&#39;d, sometimes not.

## What if OF (REFLECT) Didn&#39;t Take Isotopes?

So we could say that if you think you have an isotope in your hand, you&#39;re responsible for ^META-ing it yourself:

    &gt;&gt; metatyper: func [x [any-value! ~group!~]] [
           print [&quot;Metatype of X is&quot; type of ^x]
       ]

    &gt;&gt; metatyper [d e]
    == @[&#39;block]  ; the TYPE OF received a QUOTED!, so e.g. answer incorporates quoted

    &gt;&gt; metatyper spread [d e]
    == @[~block~]  ; got QUASI!, so TYPE OF answer incorporates quasi

On the plus side of such an approach, we don&#39;t have to invent any type representations for isotopes.</description>
    
    <lastBuildDate>Mon, 26 Sep 2022 08:43:41 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What Should TYPE OF an Isotope Be?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>How Might TYPE* Inform TYPE OF VOID and TYPE OF NULL?</h2>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1983">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>OF is a generic operation (the enfix form of REFLECT that quotes the word on its left. It's desirable to honor the VOID-in-NULL out convention for all the other reflectors that aren't TYPE... and it's desirable to error on NULL more generically.</p>
<pre><code>&gt;&gt; label of null
** Error: You didn't give anything

&gt;&gt; label of maybe null  ; MAYBE NULL is VOID 
; null
</code></pre>
<p>So if <strong>type of</strong> follows the same pattern as other <strong>xxx of</strong>, we'd surmise that you don't use TYPE OF to discern NULL and VOID. It errors on NULL input and gives you back NULL if you MAYBE it.</p>
</blockquote>
</aside>
<p>Above I suggest an XXX OF consistency, with TYPE OF NULL as an error and TYPE OF VOID is NULL.</p>
<p>If that were so, and TYPE* OF VOID is <em>not</em> NULL, then it would be the only case where TYPE* OF would change an answer from what the TYPE OF would say.</p>
<p>Does that suggest not allowing plain TYPE OF either NULL or VOID, and requiring you to use TYPE*, to get some kind of reified answer?  (This would introduce <strong><code>null!*</code></strong> and <strong><code>void!*</code></strong>)</p>
<p>Or does it suggest allowing NULL and not VOID?  (This would introduce <strong><code>null!</code></strong> with no <code>*</code>, and <strong><code>void!*</code></strong>)</p>
<pre><code>&gt;&gt; type of null
== &amp;[null]

&gt;&gt; type* of null
== &amp;[null]

&gt;&gt; type of void
** Error: Use TYPE* to take type of isotopes if intentional

&gt;&gt; type* of void
== ~&amp;[null]~
</code></pre>
<h2>But I've Always Been Uncomfortable With NULL!</h2>
<p><a href="https://forum.rebol.info/t/revisiting-opt-in-the-func-spec-dialect/1658">When discussing why I made the <code>&lt;opt&gt;</code> tag instead of null!</a>, I said:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1658">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/revisiting-opt-in-the-func-spec-dialect/1658/1">Revisiting `&lt;opt&gt;` in the Func Spec Dialect</a>
</div>
<blockquote>
<p>If a TYPE OF operation can make a reified thing spring into existence out of the absence of a thing, I feel like something is out of whack.</p>
<p>There's a clear advantage if you're going to be chaining things.</p>
<pre><code>x: (type of select data item) else [
    fail "A reified NULL! datatype doesn't permit this kind of handling"
]
</code></pre>
<p>Though that's a more modern intuition about it; I wasn't thinking about that when <code>&lt;opt&gt;</code> was made.</p>
<p>I think one angle is that I felt like the optionalness was somehow a "big deal" and needed to jump off the page for the spec more. NULL! just blended in.</p>
<pre><code>foo: func [arg [null! integer! block!]] [...]
bar: func [arg [integer! block! group! path! null! word!]] [...]
</code></pre>
</blockquote>
</aside>
<h2>I Dislike The Idea Of TYPE* Changing Answers</h2>
<p>Imagine you had code like this:</p>
<pre><code> switch type of (...) [
    null [...]
    integer! [...]
 ]
</code></pre>
<p>But one day you realize the input could be a splice or something, and so <code>TYPE*</code> gets swapped in:</p>
<pre><code> switch type* of (...) [
    null [...]
    integer! [...]
    splice!* [...]
 ]
</code></pre>
<p>It seems to me that the meaning of NULL should not change, all things being equal.  But things are probably not equal.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/exploding_head.png?v=9" title=":exploding_head:" class="emoji only-emoji" alt=":exploding_head:"></p>
<h2>This Is Very Aggravating... but...</h2>
<p>I think I like TYPE OF NULL being NULL</p>
<ul>
<li>
<p>I like it even if it breaks a pattern in XXX OF where VOID input means NULL out, and NULL input is an error</p>
</li>
<li>
<p>TYPE feels like a fairly special kind of question, so it's probably okay</p>
</li>
</ul>
<p>Internally we need a way to put nulls and voids into typesets, and I can imagine usermode cases where this is useful as well.</p>
<ul>
<li>
<p>If TYPE* is able to give a reified answer of NULL!* and VOID!* this would provide some uses</p>
</li>
<li>
<p>This would imply that TYPE* OF NULL and TYPE OF NULL would be different answers</p>
</li>
</ul>
<p>It might be best to avoid a symbol in the type, to signify the weirdness of it.  But in the current design, NULL actually isn't an isotope...void is the isotope of NULL:</p>
<pre><code>&gt;&gt; type* of null
== &amp;[]

&gt;&gt; type* of void
== ~&amp;[]~
</code></pre>
<p>I suspect I'm missing something here.  But as with most things, I guess I just have to kind of try things and feel them out.</p>
<p>So what I'm going to try is a world where function parameters are powered by this <code>TYPE*</code> concept, give the same concept to usermode, and see what emerges from that.</p>
          <p><a href="https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983/3</link>
        <pubDate>Mon, 26 Sep 2022 07:31:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1983-3</guid>
        <source url="https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983.rss">What Should TYPE OF an Isotope Be?</source>
      </item>
      <item>
        <title>What Should TYPE OF an Isotope Be?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1982">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/what-if-datatype-was-isotopic-tl-dr-bad-idea/1982/2">What If "DATATYPE" Was Isotopic (TL;DR: Bad Idea)</a>
</div>
<blockquote>
<p>If we don't do that, we get into problems of TYPE OF serving two masters. If it gets a parameter pack, is it supposed to say that it's the type of the first item in the pack... or is it supposed to tell you it's a pack? The ^META removes the ambiguity.</p>
</blockquote>
</aside>
<p>Devil's advocacy here <img src="https://forum.rebol.info/images/emoji/twitter/japanese_goblin.png?v=9" title=":japanese_goblin:" class="emoji" alt=":japanese_goblin:">  would say that if parameter types need to be able to take isotopes, then the type mechanics have to be able to represent the "isotopic types" <em>somehow</em>.</p>
<p>And if there's a representation, there <em>would</em> be uses in usermode for it.  But it would have to be a special operator, and what it returned probably shouldn't be "a type" in the conventional sense.</p>
<p>For instance: It would be disruptive to do something like suddenly say all the types are actually "one level quoted up"...just to get this representation at quote level 0.  This would give isotopes the &amp;[~xxx~] representation, but at the cost of making everything else skew with an extra quote:</p>
<p>BAD WAY:</p>
<pre><code>&gt;&gt; type* of first [(1020)]
== &amp;['group]

&gt;&gt; type* of first [''(1020)]
== &amp;['''group]

&gt;&gt; type* of first [~(1020)~]
== &amp;['~group~]

&gt;&gt; type* of spread [d e]
== &amp;[~group~]
</code></pre>
<p>That's pretty awful and misleading, just to be able to get that last representation...which you generally wouldn't use for anything beyond comparison anyway.</p>
<h3>What if the result were itself a QUASI! of the type?</h3>
<p>BETTER WAY:</p>
<pre><code>&gt;&gt; type* of first [(1020)]
== &amp;[group]

&gt;&gt; type* of first [''(1020)]
== &amp;[''group]

&gt;&gt; type* of first [~(1020)~]
== &amp;[~group~]

&gt;&gt; type* of spread [d e]
== ~&amp;[~group~]~
</code></pre>
<p>That's some fairly outside-the-box thinking (pun intended), which keeps the other types looking appropriate for their input.  It has the nice touch that while all the <em>real</em> datatypes are unevaluative, the quasiform would evaluate into something that is sort of nasty, to show that you're probably confused.  So while it isn't an isotope (and you wouldn't want it to be) it has that going for it, still allowing its raison d'etre of comparison:</p>
<pre><code>splice!*: '~&amp;[~group~]~
activation!*: '~&amp;[~action~]~

switch type* of :x [
   splice!* [...]
   integer! [...]
   activation!* [...]
]
</code></pre>
<p>There I'm spitballing the idea that the isotopic "types" are made to stand out by having an asterisk after them.</p>
<p>(Bear in mind that this technique should ideally only come up in fairly advanced code.)</p>
<h3>These quasi forms wouldn't <em>actually</em> be a datatype...</h3>
<p>This would mean typical things designed to react to TYPE-BLOCK! wouldn't react to it.</p>
<p>But is that a bad thing?  Consider trying to use it in PARSE:</p>
<pre><code>&gt;&gt; splice!*: '~&amp;[~group~]~

&gt;&gt; parse [? ? ?] [some splice!*]
; ** What were you expecting to do with it if it WAS a datatype? **
</code></pre>
<p>You can't match it against anything you'd find in a block, only evaluative products.  No harm done in PARSE by not being a "real type".</p>
<p>On the other hand, you might imagine using it with something like MATCH:</p>
<pre><code> &gt;&gt; match splice!* spread [d e]
 == ~(d e)~  ; isotope
</code></pre>
<p>So match <em>could</em> be written to say it takes these forms (let's say we call them "isoTYPES")</p>
<pre><code>datatype!: &amp;[type-block]

isotype!: &amp;[~type-block~]

match: native [
    test [datatype! isotype! block!]
    value [any-value! any-isotope!*]
]
</code></pre>
<p>Should it go this far?  I don't know.</p>
<h3>Pragmatically, I Think We Need The TYPE* Operator</h3>
<p>I'm reluctant to see <strong><code>[any-value! any-isotope!*]</code></strong> typesets popping up everywhere.  Part of the whole religion of isotopes is that they only show up in arbitrary <em>outputs</em>, and anything that takes isotopes in will only take <em>very specific ones</em>...as an alternative to trying to slipstream that state into a refinement or something.</p>
<p>But...I've struggled with some convolutions you get when you try to write code without being able to branch on types including isotopic ones.  And as I mentioned, typesets kind of need it too in order to work internally.</p>
          <p><a href="https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983/2</link>
        <pubDate>Sun, 25 Sep 2022 11:57:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1983-2</guid>
        <source url="https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983.rss">What Should TYPE OF an Isotope Be?</source>
      </item>
      <item>
        <title>What Should TYPE OF an Isotope Be?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>At this exact moment...TYPE OF any isotope is an error, while both TYPE OF NULL and TYPE OF VOID give back NULL.</p>
<p>OF is a generic operation (the enfix form of REFLECT that quotes the word on its left.  It may be desirable to honor the VOID-in-NULL out convention for all the other reflectors that aren't TYPE... and it's desirable to error on NULL more generically.</p>
<pre><code>&gt;&gt; label of null
** Error: You didn't give anything

&gt;&gt; label of maybe null  ; MAYBE NULL is VOID 
; null
</code></pre>
<p>So if <strong>type of</strong> follows the same pattern as other <strong>xxx of</strong>, we'd surmise that you don't use TYPE OF to discern NULL and VOID.  It errors on NULL input and gives you back NULL if you MAYBE it.</p>
<p>But what happens when you ask:</p>
<pre><code>&gt;&gt; spread [d e]
== ~(d e)~  ; isotope

&gt;&gt; type of spread [d e]
???
</code></pre>
<h2>The Original Plan Was <em>No</em> Arguments Received Isotopes</h2>
<p>In the original conception, function frames weren't capable of holding isotopes in the arguments.  You physically could not receive a parameter that was an isotope.</p>
<p>I was also looking at the idea that some isotope forms--such as isotopic ERROR!--would be completely impossible to get into a variable, <em>ever</em>.</p>
<p>The only workaround was if a function used the ^META parameter convention, in which case an isotope would come in as a QUASI! form of the value...while normal values would come in as quoted:</p>
<pre><code> &gt;&gt; detector: func [^x] [print ["Meta of X:" mold x]]

 &gt;&gt; detector [d e]
 Meta of X: '[d e]

 &gt;&gt; detector spread [d e]
 Meta of X: ~(d e)~
</code></pre>
<p>Ultimately I backed down on this, instead allowing you to use type filtering to narrow which isotopes you'd be willing to accept:</p>
<pre><code>&gt;&gt; splicetaker: func [x [any-value! ~group!~]] [
       append [a b c] :x
   ]

&gt;&gt; splicetaker [d e]
== [a b c [d e]]

&gt;&gt; splicetaker spread [d e]
== [a b c d e]
</code></pre>
<p>So this creates a new typeset feature that is hacked in terribly <em>(the presence of any ~xxx!~ currently means the same thing as ~any-value!~, but it's documentation for when the feature gets better)</em>.  And it means that the ^META parameter convention is basically something that can be implemented on top of this, by doing something like <strong><code>x: my meta</code></strong> at the beginning of the function.</p>
<p>A primary driver behind this change was that operations which wanted to do things like ADAPT a function frame were having to become sensitive to whether a parameter was ^META or not, and it was more of a headache than having to use the <strong>:get-word</strong> accessors on variables.  It seemed that standardizing the frame in a way that permitted isotopes as currency made more sense than having arguments be sometimes-meta'd, sometimes not.</p>
<h2>What if OF (REFLECT) Didn't Take Isotopes?</h2>
<p>So we could say that if you think you have an isotope in your hand, you're responsible for ^META-ing it yourself:</p>
<pre><code>&gt;&gt; metatyper: func [x [any-value! ~group!~]] [
       print ["Metatype of X is" type of ^x]
   ]

&gt;&gt; metatyper [d e]
== @['block]  ; the TYPE OF received a QUOTED!, so e.g. answer incorporates quoted

&gt;&gt; metatyper spread [d e]
== @[~block~]  ; got QUASI!, so TYPE OF answer incorporates quasi
</code></pre>
<p>On the plus side of such an approach, we don't have to invent any type representations for isotopes.</p>
          <p><a href="https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983/1</link>
        <pubDate>Sat, 24 Sep 2022 10:23:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1983-1</guid>
        <source url="https://forum.rebol.info/t/what-should-type-of-an-isotope-be/1983.rss">What Should TYPE OF an Isotope Be?</source>
      </item>
  </channel>
</rss>
