<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should RETURN be Assignable on Function Interfaces?</title>
    <link>https://forum.rebol.info/t/should-return-be-assignable-on-function-interfaces/1929</link>
    <description>When implementing multi-returns I had an idea, to think of **`[x]: negate 10`** in terms of slipping X into the RETURN: slot of NEGATE as an input.

On the surface that seems like it might even be useful more generally:

     &gt;&gt; f: make frame! :negate
  
     &gt;&gt; negate.return: &#39;x  ; X gets hidden, and RETURN is redefined during the call

     &gt;&gt; negate.value: 10

     &gt;&gt; do f  ; the hidden X is written back automatically
     == -10

     &gt;&gt; x
     == -10

## But Not Every Action is a FUNC/FUNCTION

Not all functions are guaranteed to have something in their frame called RETURN (e.g. a LAMBDA does not).  And a non-FUNC ACTION! could have something in its frame called RETURN that wasn&#39;t used for anything pertaining to the return process.

This ruled it out from being a mechanic relied on by the multi-return machinery.  Because we want the following to work:

    &gt;&gt; test: lambda [x] [x + 20]

    &gt;&gt; [y]: test 1000
    == 1020

    &gt;&gt; y
    == 1020

## Nevertheless, People Can Implement It If They Want

It&#39;s certainly something you could *choose* to do if you were writing your own function generator.

In fact, it&#39;s trivial to write a wrapper for it!  Just add a /RETURN to the public interface, and write back to it if it&#39;s supplied:

    returnproxy: lambda [action [action!]] [
        enclose (augment :action [/return [word!]]) f -&gt; [
            (maybe f.return): do f
        ]
    ]

That means you can pass it as a refinement:

    &gt;&gt; test: lambda [x] [x + 1000]

    &gt;&gt; wrapper: returnproxy :test

    &gt;&gt; wrapper/return 20 &#39;y
    == 1020

    &gt;&gt; y
    == 1020

Or you can use it with a frame:

    &gt;&gt; f: make frame! :wrapper
    &gt;&gt; f.x: 20
    &gt;&gt; f.return: &#39;out

    &gt;&gt; do f
    == 1020

    &gt;&gt; out
    == 1020

:nut_and_bolt: 

*(Seeing superpowers like this work so clearly and obviously is what keeps me invested in this.)*

## So Anyone CAN Do It, But Should FUNC/FUNCTION Do It?

I lean toward not doing it with things implemented the way they are right now, because it would add overhead to every function with a RETURN:, due to needing to have a place to store the variable if you gave it one.

But it might be nice to give people an optimized version of the proxying wrapper above.  You could then convert any function to support it.

## But today RETURN is on the public interface of FUNC :frowning: 

    &gt;&gt; f: make frame! func [x] [return x + 1000]
    == make frame! [
        return: ~
        x: ~
    ]
    
*&quot;Errr.  Why&#39;s it there?&quot;*, you might ask.

The reason is that the return typeset information currently lives on that field.  So if you&#39;re going to ask about it, you get it from there.

**This is one of many good arguments for why this information should *not* live there.**

There&#39;s a long running body of evidence suggesting that the way return types are managed today is probably wrong.

* **LAMBDA Can&#39;t Currently Document Its Result Types**.  There are a lot of actions out there that don&#39;t have a RETURN function, but nevertheless have something to say about what types they can produce.

* **ENCLOSE Can&#39;t Change The Type Signature**.  If you wrap a function, you&#39;re subject to its type checking rules.

* **NATIVE Doesn&#39;t Want To Pay For A RETURN Slot**.  The typechecking is only done in the debug build, so why should every native frame require a RETURN function?

I think I&#39;ve got some ideas coming together--mostly centering on factoring out typechecking to be another one of the little pieces you can build functions out of (like AUGMENT).  So when doing a composition you would just bolt on a typechecker if you wanted one.  Internal efficiencies could fold that in so it actually didn&#39;t generate a separate phase and action identity.  Pursing some inspiration on that as we speak...</description>
    
    <lastBuildDate>Sat, 20 Aug 2022 15:52:32 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/should-return-be-assignable-on-function-interfaces/1929.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should RETURN be Assignable on Function Interfaces?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When implementing multi-returns I had an idea, to think of <strong><code>[x]: negate 10</code></strong> in terms of slipping X into the RETURN: slot of NEGATE as an input.</p>
<p>On the surface that seems like it might even be useful more generally:</p>
<pre><code> &gt;&gt; f: make frame! :negate

 &gt;&gt; negate.return: 'x  ; X gets hidden, and RETURN is redefined during the call

 &gt;&gt; negate.value: 10

 &gt;&gt; do f  ; the hidden X is written back automatically
 == -10

 &gt;&gt; x
 == -10
</code></pre>
<h2>But Not Every Action is a FUNC/FUNCTION</h2>
<p>Not all functions are guaranteed to have something in their frame called RETURN (e.g. a LAMBDA does not).  And a non-FUNC ACTION! could have something in its frame called RETURN that wasn't used for anything pertaining to the return process.</p>
<p>This ruled it out from being a mechanic relied on by the multi-return machinery.  Because we want the following to work:</p>
<pre><code>&gt;&gt; test: lambda [x] [x + 20]

&gt;&gt; [y]: test 1000
== 1020

&gt;&gt; y
== 1020
</code></pre>
<h2>Nevertheless, People Can Implement It If They Want</h2>
<p>It's certainly something you could <em>choose</em> to do if you were writing your own function generator.</p>
<p>In fact, it's trivial to write a wrapper for it!  Just add a /RETURN to the public interface, and write back to it if it's supplied:</p>
<pre><code>returnproxy: lambda [action [action!]] [
    enclose (augment :action [/return [word!]]) f -&gt; [
        (maybe f.return): do f
    ]
]
</code></pre>
<p>That means you can pass it as a refinement:</p>
<pre><code>&gt;&gt; test: lambda [x] [x + 1000]

&gt;&gt; wrapper: returnproxy :test

&gt;&gt; wrapper/return 20 'y
== 1020

&gt;&gt; y
== 1020
</code></pre>
<p>Or you can use it with a frame:</p>
<pre><code>&gt;&gt; f: make frame! :wrapper
&gt;&gt; f.x: 20
&gt;&gt; f.return: 'out

&gt;&gt; do f
== 1020

&gt;&gt; out
== 1020
</code></pre>
<p><img src="https://forum.rebol.info/images/emoji/twitter/nut_and_bolt.png?v=9" title=":nut_and_bolt:" class="emoji only-emoji" alt=":nut_and_bolt:"></p>
<p><em>(Seeing superpowers like this work so clearly and obviously is what keeps me invested in this.)</em></p>
<h2>So Anyone CAN Do It, But Should FUNC/FUNCTION Do It?</h2>
<p>I lean toward not doing it with things implemented the way they are right now, because it would add overhead to every function with a RETURN:, due to needing to have a place to store the variable if you gave it one.</p>
<p>But it might be nice to give people an optimized version of the proxying wrapper above.  You could then convert any function to support it.</p>
<h2>But today RETURN is on the public interface of FUNC <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:">
</h2>
<pre><code>&gt;&gt; f: make frame! func [x] [return x + 1000]
== make frame! [
    return: ~
    x: ~
]
</code></pre>
<p><em>"Errr.  Why's it there?"</em>, you might ask.</p>
<p>The reason is that the return typeset information currently lives on that field.  So if you're going to ask about it, you get it from there.</p>
<p><strong>This is one of many good arguments for why this information should <em>not</em> live there.</strong></p>
<p>There's a long running body of evidence suggesting that the way return types are managed today is probably wrong.</p>
<ul>
<li>
<p><strong>LAMBDA Can't Currently Document Its Result Types</strong>.  There are a lot of actions out there that don't have a RETURN function, but nevertheless have something to say about what types they can produce.</p>
</li>
<li>
<p><strong>ENCLOSE Can't Change The Type Signature</strong>.  If you wrap a function, you're subject to its type checking rules.</p>
</li>
<li>
<p><strong>NATIVE Doesn't Want To Pay For A RETURN Slot</strong>.  The typechecking is only done in the debug build, so why should every native frame require a RETURN function?</p>
</li>
</ul>
<p>I think I've got some ideas coming together--mostly centering on factoring out typechecking to be another one of the little pieces you can build functions out of (like AUGMENT).  So when doing a composition you would just bolt on a typechecker if you wanted one.  Internal efficiencies could fold that in so it actually didn't generate a separate phase and action identity.  Pursing some inspiration on that as we speak...</p>
          <p><a href="https://forum.rebol.info/t/should-return-be-assignable-on-function-interfaces/1929/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-return-be-assignable-on-function-interfaces/1929/1</link>
        <pubDate>Sat, 20 Aug 2022 05:32:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1929-1</guid>
        <source url="https://forum.rebol.info/t/should-return-be-assignable-on-function-interfaces/1929.rss">Should RETURN be Assignable on Function Interfaces?</source>
      </item>
  </channel>
</rss>
