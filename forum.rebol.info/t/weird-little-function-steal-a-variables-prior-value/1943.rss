<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Weird Little Function: STEAL a Variable&#39;s Prior Value</title>
    <link>https://forum.rebol.info/t/weird-little-function-steal-a-variables-prior-value/1943</link>
    <description>I don&#39;t know if it has the best name (suggestions?), but it&#39;s kind of interesting...

    &gt;&gt; x: 304
    == 304

    &gt;&gt; steal x: 1000 + 20
    == 304

    &gt;&gt; x
    == 1020

I wrote it as a variadic function for some reason (as a test, maybe?) but you could write it in Redbol.  You could even use their lame ALSO.  

    steal: func [
        {Red version}
        &#39;var [set-word! set-path!]
        value [any-type!]
    ][
        also get var set var value
    ]

The Ren-C version of that reads a lot better:

    steal: lambda [
        {Ren-C version}
        &#39;var [set-word! set-path!]
        value [any-value!]
    ][
        get var
        elide set var value
    ]

It naturally has the benefit of letting you break things across lines.  I feel like it&#39;s better to point out &quot;this is the thing being erased&quot;.  And of course the mechanic is far more general.

I definitely like ANY-VALUE! better than ANY-TYPE!.

Anyway, I&#39;m sure I&#39;ve seen places I could have used it if I thought of it.  I&#39;ll keep my eyes open.</description>
    
    <lastBuildDate>Fri, 26 Aug 2022 09:38:49 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/weird-little-function-steal-a-variables-prior-value/1943.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Weird Little Function: STEAL a Variable&#39;s Prior Value</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1943">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm sure I've seen places I could have used it if I thought of it.</p>
</blockquote>
</aside>
<p>I just found one in the %prot-http.r code, which I found while reviewing blank uses:</p>
<pre><code>; The port data has been accrued for the client and can be given back
; directly, not as a copy.  If the port data is BLANK!, this returns NULL.
;
return (opt port.data, elide port.data: _)
</code></pre>
<p>Not only does that show a good example of "we shouldn't have to be converting between blanks and nulls, just use NULL".  But it's an opportunity to steal:</p>
<pre><code>return steal port.data: _
</code></pre>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1943">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I wrote it as a variadic function for some reason (as a test, maybe?)</p>
</blockquote>
</aside>
<p>Ah, no.  It was to be able to work with constructs that do backwards quoting:</p>
<pre><code>steal x: default [20]
</code></pre>
<p>If STEAL consumes the X:, then DEFAULT won't see it.</p>
<p>Hence it peeks variadically long enough to see X: but does not consume it.  Then it does one unit of evaluation (to run the x: default [20]) but keeps itself on the stack.  This way it can return the original value.</p>
          <p><a href="https://forum.rebol.info/t/weird-little-function-steal-a-variables-prior-value/1943/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/weird-little-function-steal-a-variables-prior-value/1943/2</link>
        <pubDate>Fri, 26 Aug 2022 00:00:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1943-2</guid>
        <source url="https://forum.rebol.info/t/weird-little-function-steal-a-variables-prior-value/1943.rss">Weird Little Function: STEAL a Variable&#39;s Prior Value</source>
      </item>
      <item>
        <title>Weird Little Function: STEAL a Variable&#39;s Prior Value</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I don't know if it has the best name (suggestions?), but it's kind of interesting...</p>
<pre><code>&gt;&gt; x: 304
== 304

&gt;&gt; steal x: 1000 + 20
== 304

&gt;&gt; x
== 1020
</code></pre>
<p>I wrote it as a variadic function for some reason (as a test, maybe?) but you could write it in Redbol.  You could even use their lame ALSO.</p>
<pre><code>steal: func [
    {Red version}
    'var [set-word! set-path!]
    value [any-type!]
][
    also get var set var value
]
</code></pre>
<p>The Ren-C version of that reads a lot better:</p>
<pre><code>steal: lambda [
    {Ren-C version}
    'var [set-word! set-path!]
    value [any-value!]
][
    get var
    elide set var value
]
</code></pre>
<p>It naturally has the benefit of letting you break things across lines.  I feel like it's better to point out "this is the thing being erased".  And of course the mechanic is far more general.</p>
<p>I definitely like ANY-VALUE! better than ANY-TYPE!.</p>
<p>Anyway, I'm sure I've seen places I could have used it if I thought of it.  I'll keep my eyes open.</p>
          <p><a href="https://forum.rebol.info/t/weird-little-function-steal-a-variables-prior-value/1943/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/weird-little-function-steal-a-variables-prior-value/1943/1</link>
        <pubDate>Thu, 25 Aug 2022 16:27:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1943-1</guid>
        <source url="https://forum.rebol.info/t/weird-little-function-steal-a-variables-prior-value/1943.rss">Weird Little Function: STEAL a Variable&#39;s Prior Value</source>
      </item>
  </channel>
</rss>
