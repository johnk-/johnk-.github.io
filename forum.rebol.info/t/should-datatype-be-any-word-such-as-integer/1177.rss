<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
    <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177</link>
    <description>&gt; *This historical thread covers the decision to migrate of &quot;DATATYPE!&quot; toward becoming a TYPE-BLOCK!, e.g. an actual structural form in the language.*
&gt; 
&gt; *Ultimately the representation chosen was to use `&amp;`:*
&gt;
&gt;      &gt;&gt; type of 1020
&gt;      == &amp;[integer]
&gt;
&gt; *The discussion is kept for reference, but [see notes about the migration of DATATYPE! to this new idea](https://forum.rebol.info/t/experiences-while-paring-down-datatype/1978).*

---

Datatypes have problems.  One is that there&#39;s no clear representation for them literally, so they tend to just look like WORD!s:

    rebol2&gt;&gt; word? first [integer!]
    == true

    rebol2&gt;&gt; type? 10
    == integer!

    rebol2&gt;&gt; word? type? 10
    == false

As a band-aid over this conflation with words, Ren-C has been using construction syntax in the console...but it&#39;s quite ugly:

    &gt;&gt; type of 10
    == #[datatype! integer!]

We also face the question of extensibility of types... **and it&#39;s hard to think of a better extensibility mechanism to use than the existing symbol engine that is behind ANY-WORD!.**

But making them plain WORD! is not very desirable.  We are used to writing things like `make object! [...]`.  And we don&#39;t want MAKE to have to quote its argument.  Hence, OBJECT! would have to evaluate to something.

We could say `(object!: &#39;object!)` but that seems like it would get into some ugly situations.

## What about the new @WORDs?

Let&#39;s say `@integer` could act as a datatype, as well as an ANY-WORD!.

It has the advantage of being inert in the evaluator:

    if @integer = type of 1 [print &quot;Sanity prevails...&quot;]

Redbol compatibility could still work:

    none!: @blank

So the main question would be, how often is it that you have a slot that might want an @word -or- a datatype?  How frequent is that need for polymorphism?

When I look at the landscape of problems, it seems to me that an evaluator-inert type that has an intrinsic extensibility like this would be pretty much ideal for denoting a datatype.  No construction syntax, just good ol&#39; reliable behavior.</description>
    
    <lastBuildDate>Mon, 26 Sep 2022 17:21:02 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="10" data-topic="1177">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>To have clean, non overloaded way to describe datatypes, they would need a dedicated symbol for datatypes.</p>
</blockquote>
</aside>
<p>I think this turned out to be inevitable.  So what I'm working with right now is ampersand, as <strong><code>&amp;[xxx]</code></strong>.</p>
<p>At the moment it's not a <a href="https://forum.rebol.info/t/removing-from-legal-word-characters-any-objections/1180/13">full family of ampersand-things</a> (e.g. TYPE-XXX!).  It's just a rendering of datatype to look like a block! class.  But the idea would be to inch toward the whole family.</p>
<aside class="quote no-group" data-username="IngoHohmann" data-post="10" data-topic="1177">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>Actually I've never used "!" in words myself, so I wouldn't have a problem with enforcing that only types can have "!" in their name.</p>
</blockquote>
</aside>
<p>It's technically possible to remove exclamation points from legal ordinary word characters, and introduce it as a terminal sigil...like a SET-WORD!:</p>
<pre><code>type-word!
</code></pre>
<p>That could be generalized to the other types that carry sigils:</p>
<pre><code>[type block]!
(type group)!
type.tuple!
type/path!
</code></pre>
<p>But there seem to be a lot of reasons to be skeptical of this:</p>
<ul>
<li>
<p>Having types be indirectly referenced through WORD!s--as they were historically--allows for convenient aliasing.  In the Rebol2/Red emulation, we can simply say <strong>paren!: group!</strong> and it works.</p>
</li>
<li>
<p>If you're going to make something like ANY-WORD! refer to a typeset, it doesn't have any obvious separation from the way you refer to a single type.  Other things like type constraints (like EVEN!) also don't have the indirection to their underlying mechanic.</p>
</li>
<li>
<p>I've tended to favor creative uses of ! in terms or dialects...like !!WARNING!!.  And I like the idea of !! meaning breakpoint, or things like that.</p>
<ul>
<li>Though in the case of <strong><code>!</code></strong> and <strong><code>!!</code></strong> they could be exceptions as WORD!s, similar to how there's an exception for <strong><code>/</code></strong> not being a PATH!.</li>
</ul>
</li>
</ul>
<p>In any case, I think <code>&amp;</code> is the better move.</p>
          <p><a href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/13</link>
        <pubDate>Mon, 26 Sep 2022 09:43:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1177-13</guid>
        <source url="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss">Should DATATYPE! Be ANY-WORD! (such as @integer)</source>
      </item>
      <item>
        <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>To have clean, non overloaded way to describe datatypes, they would need a dedicated symbol for datatypes.<br>
Actually I've never used "!" in words myself, so I wouldn't have a problem with enforcing that only types can have "!" in their name.<br>
Just mentioning it.</p>
          <p><a href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/10</link>
        <pubDate>Fri, 30 Oct 2020 12:49:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1177-10</guid>
        <source url="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss">Should DATATYPE! Be ANY-WORD! (such as @integer)</source>
      </item>
      <item>
        <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As time has gone on, the applications of <strong><code>@word @pa/th @[bl o ck] and @(gr o up)</code></strong> have become wider.  The "useless" @[bl o ck] datatype is no longer useless, and has many non-datatype applications.</p>
<p>This isn't to say we <em>can't</em> still use @[...] for datatypes.</p>
<p>Issue is that we have to remember that a key to this datatype is that dialect-wise, we have to be willing to sacrifice it for the meaning of "match this datatype".  That's easiest to do if it has its own notation...but the whole question of this thread is whether that's avoidable, especially given the need to encode quotedness into the type.</p>
<p>Of course it's still a deep thought...which is why we're still using #[datatype]...but the thoughts continue.</p>
          <p><a href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/9</link>
        <pubDate>Wed, 28 Oct 2020 07:27:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1177-9</guid>
        <source url="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss">Should DATATYPE! Be ANY-WORD! (such as @integer)</source>
      </item>
      <item>
        <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="7" data-topic="1177">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This led me to a concept I outlined in chat that we make use of the somewhat superfluous-seeming member of the new inert @ family, the @[...] blocks...</p>
<pre><code>&gt;&gt; type of first ['''foo]
== @['''word]
</code></pre>
</blockquote>
</aside>
<p>I'm still liking this direction.  There are a few implications to notice.</p>
<p>One is that TYPE OF is coming back with something more granular than just QUOTED! for things that have quote levels.  This preserves the historical (and desirable) behavior.  Consider that we likely want:</p>
<pre><code>rebol2&gt; (type? first ['x]) = (type? first [x])
== false

rebol2&gt; (type? first ['x]) = (type? first ['x/y])
== false
</code></pre>
<p>If the type of <strong>'x</strong> were simply <strong><span class="mention">@quoted</span></strong>, then though the former would be false, the second would be true.  This suggests a different operation that would say that <strong>'x</strong> and <strong>'x/y</strong> were both instances of QUOTED!.</p>
<p>But TYPE OF returning an ANY-ARRAY! has the properties we're looking for.  It's a distinct type from BLOCK! that is nonetheless irreducible, we can do comparison, and symbolic manipulation via QUOTED and UNQUOTED.</p>
<pre><code> &gt;&gt; unquoted @['integer]
 == @[integer]

 &gt;&gt; (quoted integer!) = type of first ['10]
 == #[true]
</code></pre>
<p>Yet the fact that <em>sometimes</em> we might want to know something is QUOTED! and not care about the specifics raises a bigger point: that there are various depths of patterns to match in "types".</p>
<p>This already existed before arbitrary quoting: e.g. <strong><code>["a" 10]</code></strong> and <strong><code>[&lt;b&gt; 20 #foo]</code></strong> are both BLOCK!s, but if you were expecting a two element block with a TEXT! and an INTEGER! then they are effectively not matching types.  It's the precedent of LIT-WORD! and LIT-PATH! that forced having to have a solution for quoting.  But people have wanted something for this as well.</p>
          <p><a href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/8</link>
        <pubDate>Mon, 23 Sep 2019 08:09:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1177-8</guid>
        <source url="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss">Should DATATYPE! Be ANY-WORD! (such as @integer)</source>
      </item>
      <item>
        <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="1177">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Should DATATYPE! be killed off (in favor of <span class="mention">@integer</span>, <span class="mention">@word</span>, etc?)</p>
</blockquote>
</aside>
<p>While demoing some of the quoting in the conference, it was clear that dealing with that is going to be a bit of a puzzle for some minds--and so we should do everything we can to make it more obvious.</p>
<p>But... using quoted types to reflect quoting on values has some counter-intuitive properties in evaluative contexts, e.g. with the <a href="https://forum.rebol.info/t/facing-the-facts-switch-must-evaluate-clauses/603">now evaluative SWITCH</a>...</p>
<pre><code> switch (type of first ['''foo]) [
     ''''@word [
         print "...needing four quotes here strikes me as non-obvious."
     ]
     the '''@word [
          print "...and needing THE undermines datatype as inert @WORD!"
     ]
 ]
</code></pre>
<p>This led me to a concept I outlined in chat that we make use of the somewhat superfluous-seeming member of the new inert @ family, the @[...] blocks...</p>
<pre><code> &gt;&gt; type of first ['''foo]
 == @['''word]
</code></pre>
<p>If we use this particular part in the box as a datatype! replacement, we get the opportunity for richer structure.  <strong>@[matrix 20x20]</strong>.  And if we let the quoting level be carried on the first element of the type, we also get a fair amount of leverage from that.</p>
<p>Of course we can still keep our shorthands, perhaps adding more:</p>
<pre><code> integer!: @[integer]
 integerQ!: @['integer]
</code></pre>
<p>And it frees up @(...), <span class="mention">@word</span>, <span class="mention">@some</span>/path for other applications in dialects, because only the <strong>@[relatively unloved "@-block"]</strong> would be taken (and only in cases where that dialect had reason to be dealing in datatypes).</p>
          <p><a href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/7</link>
        <pubDate>Mon, 08 Jul 2019 18:53:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1177-7</guid>
        <source url="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss">Should DATATYPE! Be ANY-WORD! (such as @integer)</source>
      </item>
      <item>
        <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Should DATATYPE! be killed off (in favor of <span class="mention">@integer</span>, <span class="mention">@word</span>, etc?)</p>
</blockquote>
<p>Something to think about with this question is regarding a more OBJECT!-like notion of what a datatype is, where that object might have various descriptive properties (like the numeric limits of a type, or precision, or other characteristics).</p>
<p>If "types" are ANY-CONTEXT!, then they can do this.  But if they are simple <span class="mention">@word</span>!-s, then you'd have to go through a lookup (at minimum) to get an object that matches the descriptor.</p>
<p>This may point us to a notion of a difference between the <strong>kind</strong> of a value, and the <strong>type</strong> of a value.  The kind would be something more mechanical regarding the cell structure (like to say that something is an OBJECT!).  Whereas the "type" could be richer.</p>
<pre><code>&gt;&gt; book!: make object! [author: title: _]

&gt;&gt; item1: make book! [author: "Aldous Huxley" title: "Brave New World"]

&gt;&gt; item2: make book! [author: "George Orwell" title: "1984"]

&gt;&gt; kind of item1
== @object!

&gt;&gt; object! = kind of item1
== #[true]

&gt;&gt; type of item1
== make object! [author: _ title: _]

&gt;&gt; (type of item1) = (type of item2)
== #[true]
</code></pre>
<p>Hence it may be that these wordlike things are only suitable for the kinds.  But this is very speculative.  We're talking about features and concepts that were never designed (!), yet people would probably like to see fleshed out somehow.</p>
          <p><a href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/6</link>
        <pubDate>Wed, 19 Jun 2019 10:56:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1177-6</guid>
        <source url="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss">Should DATATYPE! Be ANY-WORD! (such as @integer)</source>
      </item>
      <item>
        <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="rgchris" data-post="2" data-topic="1177">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Would that preclude any other potential usage for symbols in Parse?</p>
</blockquote>
</aside>
<p>Unfortunately, yes, and <a href="https://forum.rebol.info/t/word-some-path-some-group-and-some-block/1125/6">there's already competition for this form in PARSE</a>.</p>
<p>PARSE is probably not the only example of a dialect where having a distinct otherwise-unused notion of DATATYPE! could come in handy, where the slot could be either symbol or datatype.</p>
<aside class="quote no-group quote-modified" data-username="rgchris" data-post="4" data-topic="1177">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Would that mean:</p>
<pre><code>parse [1 @integer 3] [some @integer]
</code></pre>
<p>would be true?</p>
</blockquote>
</aside>
<p>No, because <code>@integer</code> being interpreted as a datatype for purposes of the dialect, would only be a parse instruction for integer matching.</p>
<p>However:</p>
<pre><code>parse [1 @integer 3] [@integer '@integer @integer]
</code></pre>
<p>Would reach the end of the series (truthy).</p>
<p>We would presume that integer! would be a WORD! that evaluated to <code>@integer</code> .  So you could still say:</p>
<pre><code>parse [1 @integer 3] [integer! @integer integer!]
</code></pre>
<p>It would work by the same general theory that any WORD! which is used in a PARSE rule that's not a keyword is fetched to be the associated rule.</p>
          <p><a href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/5</link>
        <pubDate>Tue, 18 Jun 2019 04:04:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1177-5</guid>
        <source url="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss">Should DATATYPE! Be ANY-WORD! (such as @integer)</source>
      </item>
      <item>
        <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>So would this mean:</p>
<pre><code>parse [1 @integer 3] [some @integer]
</code></pre>
<p>...would be successful?</p>
<p>Does this preclude any other potential usage for symbols in Parse?</p>
          <p><a href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/2</link>
        <pubDate>Tue, 18 Jun 2019 03:34:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1177-2</guid>
        <source url="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss">Should DATATYPE! Be ANY-WORD! (such as @integer)</source>
      </item>
      <item>
        <title>Should DATATYPE! Be ANY-WORD! (such as @integer)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><em>This historical thread covers the decision to migrate of "DATATYPE!" toward becoming a TYPE-BLOCK!, e.g. an actual structural form in the language.</em></p>
<p><em>Ultimately the representation chosen was to use <code>&amp;</code>:</em></p>
<pre><code> &gt;&gt; type of 1020
 == &amp;[integer]
</code></pre>
<p><em>The discussion is kept for reference, but <a href="https://forum.rebol.info/t/experiences-while-paring-down-datatype/1978">see notes about the migration of DATATYPE! to this new idea</a>.</em></p>
</blockquote>
<hr>
<p>Datatypes have problems.  One is that there's no clear representation for them literally, so they tend to just look like WORD!s:</p>
<pre><code>rebol2&gt;&gt; word? first [integer!]
== true

rebol2&gt;&gt; type? 10
== integer!

rebol2&gt;&gt; word? type? 10
== false
</code></pre>
<p>As a band-aid over this conflation with words, Ren-C has been using construction syntax in the console...but it's quite ugly:</p>
<pre><code>&gt;&gt; type of 10
== #[datatype! integer!]
</code></pre>
<p>We also face the question of extensibility of types... <strong>and it's hard to think of a better extensibility mechanism to use than the existing symbol engine that is behind ANY-WORD!.</strong></p>
<p>But making them plain WORD! is not very desirable.  We are used to writing things like <code>make object! [...]</code>.  And we don't want MAKE to have to quote its argument.  Hence, OBJECT! would have to evaluate to something.</p>
<p>We could say <code>(object!: 'object!)</code> but that seems like it would get into some ugly situations.</p>
<h2>What about the new <span class="mention">@WORDs</span>?</h2>
<p>Let's say <code>@integer</code> could act as a datatype, as well as an ANY-WORD!.</p>
<p>It has the advantage of being inert in the evaluator:</p>
<pre><code>if @integer = type of 1 [print "Sanity prevails..."]
</code></pre>
<p>Redbol compatibility could still work:</p>
<pre><code>none!: @blank
</code></pre>
<p>So the main question would be, how often is it that you have a slot that might want an <span class="mention">@word</span> -or- a datatype?  How frequent is that need for polymorphism?</p>
<p>When I look at the landscape of problems, it seems to me that an evaluator-inert type that has an intrinsic extensibility like this would be pretty much ideal for denoting a datatype.  No construction syntax, just good ol' reliable behavior.</p>
          <p><a href="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177/1</link>
        <pubDate>Tue, 18 Jun 2019 02:35:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1177-1</guid>
        <source url="https://forum.rebol.info/t/should-datatype-be-any-word-such-as-integer/1177.rss">Should DATATYPE! Be ANY-WORD! (such as @integer)</source>
      </item>
  </channel>
</rss>
