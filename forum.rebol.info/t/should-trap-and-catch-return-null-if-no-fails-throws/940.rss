<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should TRAP and CATCH return null if no fails/throws?</title>
    <link>https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940</link>
    <description>R3-Alpha&#39;s TRY added a refinement /EXCEPT for passing in a block or function to act as a handler in the case of an error being raised.  It struck me as a clunky attempt to parrot existing terminology.  TRAP was created to be a seemingly better name than &quot;TRY&quot;.  It appeared to have more parity with CATCH, and TRAP/WITH paralleled CATCH/WITH.

I think the name is an improvement.  And it paved the way for the short word TRY to fill another important role.

But there&#39;s a pattern in both of these constructs which is that they return a result whether something is caught or trapped or not.

    &gt;&gt; catch [10 + 20]
    == 30

    &gt;&gt; error? trap [make error! &quot;this is *not* a trapped error&quot;]
    == #[true]

That particular behavior of trap is particularly tricky because many cases check if a result is an ERROR? and use that as a detection of if a FAIL ran...and here we see that&#39;s not actually happening.

So if you&#39;re trying to write truly &quot;correct&quot; code that uses a TRAP or a CATCH, you pretty much wind up writing a TRAP/WITH or a CATCH/WITH...providing a function taking an error.

But I&#39;ve been questioning the value of this mixing-up-of-return-results.  If you want to get a value out of the block, why not do that by setting a variable?  You&#39;re usually trying to set a variable anyway, e.g. `value: trap [...]`, what&#39;s wrong with moving it into the code?

     trap [
         value: some-calculation-that-may-fail ...
     ] then func [e] [
         ... code to handle the error ...
     ] else [
         ... stuff to do if there was no error ...
         ... assume value is good ...
     ]

This cleanly separates out the code paths, allowing usage of null-sensitive constructs.  So it means getting rid of the /WITH refinement on TRAP and CATCH, instead using normal THEN/ELSE/etc. constructs with them:

    &gt;&gt; catch [10 + 20]
    ; null

    &gt;&gt; trap [make error! &quot;not a thrown error&quot;]
    ; null

In the case of CATCH, you can always just throw your final result, to get it to conflate with an ordinary throw (this is inexpensive.)

TRAP can&#39;t do that (since it would only be able to return errors).  Though you could piggy-back on CATCH if you really wanted to avoid variable declaration with a TRAP...just throw your result:

     catch [trap [... throw result] then e -&gt; [e]]

I&#39;m not opposed to the idea of code-golf-friendly constructs which could go ahead and do this squashing of results together.  (CATCH-DO, TRAP-DO?)  But the clean expression with only returning the caught or trapped thing--and null otherwise--seems quite appealing to me for the primitive building block.

## Also note: the existence of ENTRAP

I made ENTRAP to address the problem of distinguishing errors from other values, by returning ordinary values enclosed in a block (unless it&#39;s null, which can&#39;t be put in blocks, so the entrapped thing is just null)

    &gt;&gt; entrap [null]
    ; null

    &gt;&gt; entrap [10 + 20]
    == [30]  ; note it&#39;s in a block!

    &gt;&gt; error? entrap [1 / 0]
    == #[true]  ; it&#39;s just a plain ERROR! value, not in a block

    &gt;&gt; block? entrap [make error! &quot;abc&quot;]
    == #[true]  ; it&#39;s a block that contains an error (since it wasn&#39;t FAIL&#39;d)

I don&#39;t know how that fits into the naming and scheme of things, but mentioning it.</description>
    
    <lastBuildDate>Wed, 01 Feb 2023 11:09:19 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should TRAP and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Looks like we may get the best of both worlds now, with <a href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/2">multiple returns</a>! The TRAP and CATCH could offer a second output which is the value that "falls out" of the evaluation.</p>
</blockquote>
</aside>
<p>So there's a competing application for multi-returns, which is the ability to throw a multi-return... which is more useful:</p>
<pre><code>&gt;&gt; [x fallthrough?]: catch [
       if false [throw pack [1 false]]
       throw pack [2 true]
   ]
== 2

&gt;&gt; x
== 2

&gt;&gt; fallthrough?
== ~true~  ; isotope
</code></pre>
<p>This seems like a much better use of the multi-return ability.  And to my mind, that tips the scales to where you should do a THROW as the last line if you want "the block's result".</p>
<p>Then if you want to detect whether a result came from the end of the block or somewhere inside it, you can do as I did above and encode that as an extra parameter.</p>
<h3>So... should CATCH return NULL or NONE if there's no throw?</h3>
<p><em>Hmmm.</em></p>
<p>Right now functions that lack a RETURN statement return NONE.  As a reminder, this is a multi-return pack of length zero, that has the special console behavior of printing nothing.</p>
<pre><code>&gt;&gt; foo: func [] []
== ~#[action! {foo} []]~  ; isotope

&gt;&gt; foo

&gt;&gt;
</code></pre>
<p>If you really want NULL to come back from a CATCH, you can just say that with THROW NULL.  It's more explicit.</p>
<pre><code>catch [...] else [...]  ; default w/no throw is NONE, would not run ELSE

catch [..., throw null] else [...]  ; would run ELSE
</code></pre>
<p><em>Although...we could say that THROW always throws a "heavy null"...and then ELSE really would mean "didn't catch anything".</em>  That does seem kind of cool, that ELSE really would react to nothing being caught.</p>
<h3>What About Named Throws... How to Know The Name?</h3>
<p><em>Hmmm.</em></p>
<p>I'll start by saying I've personally felt a bit skeptical of named throws, compared with "definitional throws".  :-/</p>
<p>But in any case, if you catch a named throw you might want to know its name.  Though I notice that Red does not tell you:</p>
<pre><code>red&gt;&gt; catch/name [throw/name 304 'red] [red blue]
== 304  ; no indication of if blue or red was caught
</code></pre>
<p>If we imagine you did want to know which name you caught, then here we have another competing interest for the multi-return ability... the /NAME of the throw.</p>
<p>In systems like C++ that support throwing, you can actually say what <em>types</em> of throws you want to receive.  Then you receive an object, potentially re-throwing it.</p>
<p><strong>Maybe this is another opportunity for isotopic objects!</strong>  Recall that isotopic objects can't be stored in variables... they need to have a DECAY method to produce normal values (including potentially a multi-return), or other methods like ELSE and THEN which coerce them.  But they could have a CATCH field which might just be some name or structure.  Then there could be a CATCH/FILTER which would be able to pick over these isotopic objects and decide if the CATCH wanted it or not.</p>
<p>That sounds pretty interesting... there'd be no THROW/NAME, it would be more like:</p>
<pre><code>[x y name]: catch/filter [
    throw isotopic make object! [
        catch: 'orange
        decay: does [pack [1 2 'orange]]
    ]
] obj -&gt; [  ; only filter on isotopic objects, pass plain object here?
    did find [orange green] obj.catch
]
</code></pre>
<p>So something like that would wind up giving you <strong>x</strong> as 1 and <strong>y</strong> as 2 and <strong>name</strong> as orange, so I'm showing a way to get the name handed back to you.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=9" title=":thinking:" class="emoji only-emoji" alt=":thinking:"></p>
<p>This would mean isotopic objects with CATCH methods would be special.  It wouldn't be <em>all</em> isotopic objects that got filtered... e.g. you might want to throw a PARSE result which I'm theorizing has special THEN and ELSE methods.</p>
<p><strong>I like this direction more than I like baking in some particular /NAME mechanism.</strong>  And I really like the concept of being able to THROW and CATCH multi-return packs.  I'm going to fiddle around with this.</p>
          <p><a href="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/8</link>
        <pubDate>Wed, 01 Feb 2023 11:01:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-940-8</guid>
        <source url="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940.rss">Should TRAP and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should TRAP and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I made ENTRAP to address the problem of distinguishing errors from other values, by returning ordinary values enclosed in a block (unless it's null, which can't be put in blocks, so the entrapped thing is just null)</p>
</blockquote>
</aside>
<p>The world has changed, so now not only can NULL not be put in a block but neither can isotopes.</p>
<p>But we have a better solution than putting things in a BLOCK!... generic quoting and ^META!</p>
<p>Remember that ^META turns nulls into nulls, isotopes into BAD-WORD!s, and adds a quote level to everything else (including BAD-WORD!s and things that were already QUOTED!).</p>
<p>So now ENTRAP can be a simple usermode function built on top of the multi-return form of TRAP, that offers you either the raised error (if applicable) or the evaluative product:</p>
<pre><code>entrap: func [
    {If evaluation raises an error, return ERROR!...otherwise the ^META result}

    return: [&lt;opt&gt; any-value!]
    code [block! action!]
][
    let [error result]: trap code
    return any [error ^result]
]
</code></pre>
<p>Note that you could also do that as <strong><code>let [error ^result]: trap code</code></strong> and then <strong><code>return any [error result]</code></strong>.</p>
<p>This handles every possibility:</p>
<pre><code>&gt;&gt; entrap [1 / 0]
; gives you an ERROR! for division by zero

&gt;&gt; entrap [make error! "an error that isn't raised"]
; gives you a QUOTED! error, so you know it is just a value

&gt;&gt; entrap [print "Hello"]
; gives you a non-quoted BAD-WORD! for ~none~, so you know it's an isotope!

&gt;&gt; entrap [first [~none~]]
; gives you a singly-quoted bad-word, so you know it *wasn't* an isotope

&gt;&gt; entrap [first ['abc]]
; gives a doubly-QUOTED! word, so you know result was a singly-quoted WORD!
</code></pre>
<p>So you can just test if the result is an ERROR? and if it is, then an error was raised.  And if it's not, you UNMETA it and you will get the value (or leave null alone, as UNMETA is a no-op on NULL).</p>
<p>Pretty elegant!</p>
<p><em>(I'd actually thought of getting rid of ENTRAP, but it's actually very useful, especially when dealing with the "libRebol" API...since it is only really good at giving one value back in the C code...so I'm glad it doesn't have to be a separate codebase and can just piggy-back on top of TRAP.)</em></p>
          <p><a href="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/7</link>
        <pubDate>Fri, 18 Feb 2022 07:34:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-940-7</guid>
        <source url="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940.rss">Should TRAP and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should TRAP and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <pre><code> &gt;&gt; error: trap [1 + 1]
 ; null
</code></pre>
<aside class="quote no-group" data-post="3" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>Being able to use then/else is great, but I don't particularly like having to move assignments into the code.</p>
</blockquote>
</aside>
<p>Looks like we may get the best of both worlds now, with <a href="https://forum.rebol.info/t/forward-to-multiple-return-values-and-return-value-forwarding/1271/2">multiple returns</a>!  The TRAP and CATCH could offer a second output which is the value that "falls out" of the evaluation.</p>
<pre><code> &gt;&gt; trap/result [1 + 1] 'value
 ; null

 &gt;&gt; value
 == 2

 &gt;&gt; [error value]: trap [1 + 1]
 ; null

 &gt;&gt; error
 ; null

 &gt;&gt; value
 == 2

 &gt;&gt; [_ value]: trap [1 + 1] then [print "error!"]
 ; null

 &gt;&gt; value
 == 2

 &gt;&gt; [_ value]: trap [1 / 0] then [print "error!"]
 error!
</code></pre>
<p>How slick is that??  Very...</p>
<p><strong>...although...</strong></p>
<p>This does present a bit of an oddity, where multiple-returns are prioritizing the SET-BLOCK! as higher than the THEN.  The evaluator is reading this as:</p>
<pre><code>&gt;&gt; ([error value]: trap [1 / 0]) then [print "error!"]
</code></pre>
<p>That isn't the way ordinary SET-WORD!s work.  e.g. it means that you might end up with <code>error</code> holding a different value than what the overall expression evaluates to.  So these two expressions mean different things:</p>
<pre><code>&gt;&gt; [error value]: trap [1 / 0] then [print "error!"]

&gt;&gt; error: [_ value]: trap [1 / 0] then [print "error!"]
</code></pre>
<p>It's possible for us to force those to be equivalent.  Basically hold off on assigning the first block element...keeping it void until the expression on the right is completely done.</p>
<p>Or we could do both.  The leading value in the block could be assigned the result of the first evaluation to be available during the second.  For that matter we could do that for normal SET-WORD!s too...</p>
<pre><code> &gt;&gt; x: null

 &gt;&gt; x: all [1 + 1 2 + 2] then [print ["x is" x] x * 10]
 x is 4
 == 40

 &gt;&gt; x
 == 40
</code></pre>
<p>That would make it less weird to think of an aggressive assignment of the multi-return's other outputs in the first step, maybe.  While still avoiding the need to ever say <strong>x: [x y]: ...</strong>.  So I don't think it's unresolvable, it's just a matter of looking at the usage scenarios.   Like, does it go backwards for multiple assignments?</p>
<pre><code> &gt;&gt; x: y: all [1 + 1 2 + 2] then [print ["x is" x] print ["y is" y] x * y]
 x is 4
 y is 4
 == 16

 &gt;&gt; x
 == 16

 &gt;&gt; y
 == 16
</code></pre>
<p>Optimization-wise, it's better to hold off and do only a single assignment...so probably the thing to do is to declare the first spot in a SET-BLOCK! "special" and say it's only assigned at the end, while the other spots are assigned in the beginning.  :-/</p>
<p><em>Here we learn the value of prototyping before optimizing!  <a href="https://github.com/metaeducation/ren-c/blob/259fb140193ef9eb5052c598e46d9c6b615a7165/src/core/c-eval.c#L2320" rel="nofollow noopener">And Ren-C's prototyping ability is getting nearly magical.</a></em></p>
          <p><a href="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/6</link>
        <pubDate>Thu, 09 Apr 2020 15:43:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-940-6</guid>
        <source url="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940.rss">Should TRAP and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should TRAP and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>It seems, that my comment wasn't completely thought through.<br>
You have convinced me.</p>
          <p><a href="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/5</link>
        <pubDate>Tue, 04 Dec 2018 15:50:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-940-5</guid>
        <source url="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940.rss">Should TRAP and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should TRAP and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="IngoHohmann" data-post="3" data-topic="940">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>Makes it clear, that this is an assignment, which, by the way, may error so I’m handling this.</p>
</blockquote>
</aside>
<p>Compare:</p>
<pre><code> if error? data: trap [	              
     inflate/max data uncompressed-size	           
 ][
     info "^- -&gt; failed [deflate]^/"
     throw blank
 ]
</code></pre>
<p>With:</p>
<pre><code> trap [	              
     data: inflate/max data uncompressed-size	           
 ] then [
     info "^- -&gt; failed [deflate]^/"
     throw blank
 ]
</code></pre>
<p>What makes the assignment clearer?  I think the second case, in particular because it doesn't conflate <code>data</code> as a variable which "may hold an error, or may hold the data".  If you wanted to be "clear" you'd have to call it <code>data-or-error</code>, which is too wordy.</p>
<p>It seems to me the second way puts the <code>data:</code> closer to what's being assigned to it, instead of separating it in an awkward and artificial way.  The first case doesn't make it that obvious that <code>inflate/max</code> returns a value at all--maybe only TRAP does?  The only hint you have that you're not just capturing an error is the misleading name "data".  If you mix up the data with the error that means you're going to need a test, and <code>if error? data: trap</code> is a lot of noise to see through.</p>
<p>(And that's a simple case that doesn't mention the specific error when it probably should.  You could use ATTEMPT ... ELSE for this, which would just give you a null if it was an error otherwise the value.  But I worry about today's ATTEMPT because it can make typographical errors or other changes hard to find, so it seems it should be improved to at least not scuttle some common errors of words not being bound.)</p>
<p>More complicated examples which are trapping a section of code that doesn't just do a single assignment are even better.</p>
<p>What makes me feel better about it as a primitive is that it prevents mistakes in generic code like:</p>
<pre><code>if error? item: trap [
    someone-elses-array: get-array-may-fail x y z
    pick someone-elses-array index
][
     ; may be an ERROR! value that just was in someone-elses-array
]
</code></pre>
<p>Again--I don't object to there existing some construct that conflates raised errors with plain error values, and has all the concerns which go with that.  But if this behavior is built in to trap, then I start worrying and thinking that it should turn non-raised errors into voids, or otherwise help avoid these kinds of mistakes.  It seems the best way is to give a solid routine to build on, then let people do what they like with that.</p>
<p>Being able to get rid of TRAP/WITH is clean, and you can also use use ELSE to provide clauses easily for the non-erroring case.  I think it's an improvement.</p>
<h2>What about RESCUE for the combined operation?</h2>
<p>Perhaps the conflating operation--which would have no /WITH refinement--could be called RESCUE?  Terminology-wise that seems a bit more vague.  TRAP and CATCH feel like being NULL makes sense if there was no fail or throw.  (e.g. <code>if trap [...] [... an error was trapped, so you definitely had an error! ...]</code>)  But rescue doesn't have that baggage.</p>
<p>I still would probably want to turn errors returned from the body normally into voids.  If you have an error and really want to return it, you'd use a FAIL (in a parallel to what I suggested for using THROW as the last line of a CATCH if you want to return the value)</p>
<pre><code> value-or-error: rescue [
     someone-elses-array: get-array-may-fail x y z
     item: pick someone-elses-array index
     if error? :item [fail item]
     :item
 ]
</code></pre>
<p>But doing that filtering requires getting things into a variable anyway, so you should have just used TRAP.</p>
<p>So if looking at historical Rebol2-style code, you generally could turn plain TRY into RESCUE, though I'd still suggest using TRAP instead and putting your assignments inside the block.</p>
          <p><a href="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/4</link>
        <pubDate>Tue, 04 Dec 2018 09:22:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-940-4</guid>
        <source url="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940.rss">Should TRAP and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should TRAP and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I am not sure I like this. Being able to use then/else is great, but I don't particularly like having to move assignments into the code.</p>
<p>Var: trap [...]</p>
<p>Makes it clear, that this is an assignment, which, by the way, may error so I'm handling this.</p>
<p>trap [var: ...]</p>
<p>looks like it is mostly error handling code, and the assignment is easily overlooked.</p>
          <p><a href="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/3</link>
        <pubDate>Tue, 04 Dec 2018 06:14:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-940-3</guid>
        <source url="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940.rss">Should TRAP and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should TRAP and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>One issue with this is that CATCH and THROW have a "/NAME" feature, where you can label throws.  Rebol2/R3-Alpha/Red all have the feature of being able to name a throw, but you cannot tell what the name is when you catch things...you lose that information.</p>
<p>By having CATCH take a handler function, Ren-C made that handler able to take <em>two</em> arguments...the value passed to the throw and the name.  You didn't have to pay attention to the name, but you could give a list of names to CATCH and then check to see if any of the names you were looking for were present.</p>
<p>So how would this be collapsed into a single value?  It could be done by saying that CATCH/NAME would implicitly assume you understand you'll be getting a BLOCK! with the name in the first cell, and the value in the second.</p>
<pre><code>&gt;&gt; catch/name [
       throw/name 10 'alpha
   ] [alpha beta]
== [alpha 10]
</code></pre>
<p><em>(I specifically went with the value in the second slot so that it could be missing--e.g. a length 1 block--in order to convey a THROW of a NULL.  I think being able to throw nulls is likely important; while it does cause some confusion regarding whether the CATCH actually caught something or not, it is probably worth it to have the ambiguity for the flexibility.)</em></p>
<p>That's not the worst thing in the world.  But it is a bit clunky.  The other option is that you pass the name in as a variable...which is kind of how other things have been done (historically, DO/NEXT, for example...when it wanted to return a new position as well as the evaluated value)</p>
<pre><code>&gt;&gt; catch/name [
       throw/name 10 'alpha
   ] 'name
== 10

&gt;&gt; name
== alpha
</code></pre>
<p>But that doesn't seem to fit very well with the THEN construct:</p>
<pre><code> catch/name [...] 'name then value =&gt; [...]
</code></pre>
<p>So being able to wrap together the name and the value into one unit seems cleaner.</p>
          <p><a href="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/2</link>
        <pubDate>Mon, 03 Dec 2018 21:39:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-940-2</guid>
        <source url="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940.rss">Should TRAP and CATCH return null if no fails/throws?</source>
      </item>
      <item>
        <title>Should TRAP and CATCH return null if no fails/throws?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>R3-Alpha's TRY added a refinement /EXCEPT for passing in a block or function to act as a handler in the case of an error being raised.  It struck me as a clunky attempt to parrot existing terminology.  TRAP was created to be a seemingly better name than "TRY".  It appeared to have more parity with CATCH, and TRAP/WITH paralleled CATCH/WITH.</p>
<p>I think the name is an improvement.  And it paved the way for the short word TRY to fill another important role.</p>
<p>But there's a pattern in both of these constructs which is that they return a result whether something is caught or trapped or not.</p>
<pre><code>&gt;&gt; catch [10 + 20]
== 30

&gt;&gt; error? trap [make error! "this is *not* a trapped error"]
== #[true]
</code></pre>
<p>That particular behavior of trap is particularly tricky because many cases check if a result is an ERROR? and use that as a detection of if a FAIL ran...and here we see that's not actually happening.</p>
<p>So if you're trying to write truly "correct" code that uses a TRAP or a CATCH, you pretty much wind up writing a TRAP/WITH or a CATCH/WITH...providing a function taking an error.</p>
<p>But I've been questioning the value of this mixing-up-of-return-results.  If you want to get a value out of the block, why not do that by setting a variable?  You're usually trying to set a variable anyway, e.g. <code>value: trap [...]</code>, what's wrong with moving it into the code?</p>
<pre><code> trap [
     value: some-calculation-that-may-fail ...
 ] then func [e] [
     ... code to handle the error ...
 ] else [
     ... stuff to do if there was no error ...
     ... assume value is good ...
 ]
</code></pre>
<p>This cleanly separates out the code paths, allowing usage of null-sensitive constructs.  So it means getting rid of the /WITH refinement on TRAP and CATCH, instead using normal THEN/ELSE/etc. constructs with them:</p>
<pre><code>&gt;&gt; catch [10 + 20]
; null

&gt;&gt; trap [make error! "not a thrown error"]
; null
</code></pre>
<p>In the case of CATCH, you can always just throw your final result, to get it to conflate with an ordinary throw (this is inexpensive.)</p>
<p>TRAP can't do that (since it would only be able to return errors).  Though you could piggy-back on CATCH if you really wanted to avoid variable declaration with a TRAP...just throw your result:</p>
<pre><code> catch [trap [... throw result] then e -&gt; [e]]
</code></pre>
<p>I'm not opposed to the idea of code-golf-friendly constructs which could go ahead and do this squashing of results together.  (CATCH-DO, TRAP-DO?)  But the clean expression with only returning the caught or trapped thing--and null otherwise--seems quite appealing to me for the primitive building block.</p>
<h2>Also note: the existence of ENTRAP</h2>
<p>I made ENTRAP to address the problem of distinguishing errors from other values, by returning ordinary values enclosed in a block (unless it's null, which can't be put in blocks, so the entrapped thing is just null)</p>
<pre><code>&gt;&gt; entrap [null]
; null

&gt;&gt; entrap [10 + 20]
== [30]  ; note it's in a block!

&gt;&gt; error? entrap [1 / 0]
== #[true]  ; it's just a plain ERROR! value, not in a block

&gt;&gt; block? entrap [make error! "abc"]
== #[true]  ; it's a block that contains an error (since it wasn't FAIL'd)
</code></pre>
<p>I don't know how that fits into the naming and scheme of things, but mentioning it.</p>
          <p><a href="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940/1</link>
        <pubDate>Mon, 03 Dec 2018 18:04:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-940-1</guid>
        <source url="https://forum.rebol.info/t/should-trap-and-catch-return-null-if-no-fails-throws/940.rss">Should TRAP and CATCH return null if no fails/throws?</source>
      </item>
  </channel>
</rss>
