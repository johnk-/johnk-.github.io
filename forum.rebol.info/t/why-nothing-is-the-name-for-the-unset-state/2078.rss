<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why NOTHING Is The Name For The &quot;Unset State&quot;</title>
    <link>https://forum.rebol.info/t/why-nothing-is-the-name-for-the-unset-state/2078</link>
    <description>As isotope design became refined, I became very pleased with the choice for what unset variables hold being the *antiform blank*.

    &gt;&gt; x: ~
    == ~  ; anti

    &gt;&gt; unset? &#39;x
    == ~true~  ; anti

The alternative of using the antiform word! **`~unset~`** was available.  But antiform blanks are a particularly pleasing choice, due to their succinct representation...which helps assigned variables stand out better in lists of mostly-unset variables.  And it&#39;s hard to think of what antiform blanks would mean if they were *not* the unset state!

Also, if ~unset~ were used then people would probably expect **unset? ~unset~** to be true.  But I&#39;ve held pretty strongly to my general terminology:

&gt; &quot;There is no such thing as an &#39;unset value&#39;.  But *variables* can be considered unset...when they hold a value that is an antiform blank.&quot;

I&#39;m pleased with this and have *almost* no complaints.

The problem is that ANTIFORM-BLANK is a mouthful.  It needed a short name. 

## JavaScript Don&#39;t Care

JavaScript went with the idea that unset variables hold &quot;undefined&quot;, and you can test for it using the typeof operator to subvert the error that is raised on access for variables that are never declared (what we might think of as unbound):

    &gt;&gt; typeof asdf == &#39;undefined&#39;
    &lt;- true

But if you define a variable, then it will retrieve the undefined state without error:

    &gt;&gt; let jkl
    &lt;- undefined

    &gt;&gt; jkl
    &lt;- undefined

Whatever.  Point is, they don&#39;t have any crisis of conscience on whether &quot;variables are undefined, not values&quot;.  They just go with it, as historical Redbol did with UNSET!.

But I don&#39;t like it.

## NOTHING Came To Seem The Best Option

For a while I thought I was settled on calling it &quot;trash&quot;.  [I suggested it way back when the unset state was being changed away from being called VOID](https://forum.rebol.info/t/the-naming-of-null-vs-the-meaningless-value/1427/2).

But then I realized that [this was a much better name for QUASIFORM-BLANK](https://forum.rebol.info/t/what-to-call-lone-tilde/2216/2?u=hostilefork) (the tilde) than it was for the ANTIFORM-BLANK.

This led me to realize that NOTHING was the right answer.

* TRASH evaluates to NOTHING (&quot;when you take out the trash, you&#39;re left with nothing&quot;)

* A variable that is unset holds NOTHING

* META of NOTHING is TRASH

* If a function evaluates to NOTHING, the Console has nothing to display

I had some initial reluctance about verbose names:

    foo: func [
        return: [nothing?]
        bar [block!]
    ][
        append bar [a b c]
        return nothing
    ]

But there&#39;s a reasonable answer in the modern type checking world for these cases which is semiotically consistent... use a tilde (trash).  The type spec accepts it (and assumes you mean an antiform), and RETURN will accept it (where the evaluator will turn the quasiform into an antiform):

    foo: func [
        return: [~]
        bar [block!]
    ][
        append bar [a b c]
        return ~
    ]

As it happens, the default return result from functions is nothing.  I&#39;ve also proposed it might be good to make the assumption that a function without a RETURN: spec is a procedure with no return result (as opposed to an unconstrained result).

    foo: func [
        bar [block!]
    ][
        append bar [a b c]
    ]

You can still say **`return ~`** or **`return nothing`** if you want in such functions if you want to return early.</description>
    
    <lastBuildDate>Tue, 12 Dec 2023 23:34:03 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/why-nothing-is-the-name-for-the-unset-state/2078.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why NOTHING Is The Name For The &quot;Unset State&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As isotope design became refined, I became very pleased with the choice for what unset variables hold being the <em>antiform blank</em>.</p>
<pre><code>&gt;&gt; x: ~
== ~  ; anti

&gt;&gt; unset? 'x
== ~true~  ; anti
</code></pre>
<p>The alternative of using the antiform word! <strong><code>~unset~</code></strong> was available.  But antiform blanks are a particularly pleasing choice, due to their succinct representation...which helps assigned variables stand out better in lists of mostly-unset variables.  And it's hard to think of what antiform blanks would mean if they were <em>not</em> the unset state!</p>
<p>Also, if ~unset~ were used then people would probably expect <strong>unset? ~unset~</strong> to be true.  But I've held pretty strongly to my general terminology:</p>
<blockquote>
<p>"There is no such thing as an 'unset value'.  But <em>variables</em> can be considered unset...when they hold a value that is an antiform blank."</p>
</blockquote>
<p>I'm pleased with this and have <em>almost</em> no complaints.</p>
<p>The problem is that ANTIFORM-BLANK is a mouthful.  It needed a short name.</p>
<h2>
<a name="javascript-dont-care-1" class="anchor" href="https://forum.rebol.info#javascript-dont-care-1"></a>JavaScript Don't Care</h2>
<p>JavaScript went with the idea that unset variables hold "undefined", and you can test for it using the typeof operator to subvert the error that is raised on access for variables that are never declared (what we might think of as unbound):</p>
<pre><code>&gt;&gt; typeof asdf == 'undefined'
&lt;- true
</code></pre>
<p>But if you define a variable, then it will retrieve the undefined state without error:</p>
<pre><code>&gt;&gt; let jkl
&lt;- undefined

&gt;&gt; jkl
&lt;- undefined
</code></pre>
<p>Whatever.  Point is, they don't have any crisis of conscience on whether "variables are undefined, not values".  They just go with it, as historical Redbol did with UNSET!.</p>
<p>But I don't like it.</p>
<h2>
<a name="nothing-came-to-seem-the-best-option-2" class="anchor" href="https://forum.rebol.info#nothing-came-to-seem-the-best-option-2"></a>NOTHING Came To Seem The Best Option</h2>
<p>For a while I thought I was settled on calling it "trash".  <a href="https://forum.rebol.info/t/the-naming-of-null-vs-the-meaningless-value/1427/2">I suggested it way back when the unset state was being changed away from being called VOID</a>.</p>
<p>But then I realized that <a href="https://forum.rebol.info/t/what-to-call-lone-tilde/2216/2">this was a much better name for QUASIFORM-BLANK</a> (the tilde) than it was for the ANTIFORM-BLANK.</p>
<p>This led me to realize that NOTHING was the right answer.</p>
<ul>
<li>
<p>TRASH evaluates to NOTHING ("when you take out the trash, you're left with nothing")</p>
</li>
<li>
<p>A variable that is unset holds NOTHING</p>
</li>
<li>
<p>META of NOTHING is TRASH</p>
</li>
<li>
<p>If a function evaluates to NOTHING, the Console has nothing to display</p>
</li>
</ul>
<p>I had some initial reluctance about verbose names:</p>
<pre><code>foo: func [
    return: [nothing?]
    bar [block!]
][
    append bar [a b c]
    return nothing
]
</code></pre>
<p>But there's a reasonable answer in the modern type checking world for these cases which is semiotically consistent... use a tilde (trash).  The type spec accepts it (and assumes you mean an antiform), and RETURN will accept it (where the evaluator will turn the quasiform into an antiform):</p>
<pre><code>foo: func [
    return: [~]
    bar [block!]
][
    append bar [a b c]
    return ~
]
</code></pre>
<p>As it happens, the default return result from functions is nothing.  I've also proposed it might be good to make the assumption that a function without a RETURN: spec is a procedure with no return result (as opposed to an unconstrained result).</p>
<pre><code>foo: func [
    bar [block!]
][
    append bar [a b c]
]
</code></pre>
<p>You can still say <strong><code>return ~</code></strong> or <strong><code>return nothing</code></strong> if you want in such functions if you want to return early.</p>
          <p><a href="https://forum.rebol.info/t/why-nothing-is-the-name-for-the-unset-state/2078/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-nothing-is-the-name-for-the-unset-state/2078/1</link>
        <pubDate>Tue, 12 Dec 2023 15:38:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2078-1</guid>
        <source url="https://forum.rebol.info/t/why-nothing-is-the-name-for-the-unset-state/2078.rss">Why NOTHING Is The Name For The &quot;Unset State&quot;</source>
      </item>
  </channel>
</rss>
