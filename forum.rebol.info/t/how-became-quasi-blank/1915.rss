<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How ~ Became Quasi-BLANK!</title>
    <link>https://forum.rebol.info/t/how-became-quasi-blank/1915</link>
    <description>Prior to modern quasiforms, `~` was a special &quot;BAD-WORD! with no name&quot;, e.g. a null spelling:

    &gt;&gt; type of &#39;~
    == #[datatype! bad-word!]

    &gt;&gt; as text! &#39;~
    ; null

So unlike regular WORD!, it was possible to have a BAD-WORD! that had no UTF-8 representation.  (Yes, this was a sign that something was amiss.)

However, I liked having **`~`** be something that could be reserved by the system, and I thought the &quot;bad-wordness&quot; plus the lack of any associated text made it a good choice for being what we&#39;d call &quot;trash&quot;

    &gt;&gt; if trash? &#39;~ [print &quot;Yup, that&#39;s a trash&quot;]
    Yup, that&#39;s a trash.

    &gt;&gt; &#39;~  ; console would not show by default

    &gt;&gt; mold print &quot;So ~ was the result of things like PRINT&quot;
    So ~ was the result of things like PRINT
    == &quot;~&quot;

*(You can re-read my [explanation of why void is a bad return value for things like PRINT or HELP.](https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/4?u=hostilefork))*

You could put these BAD-WORD!s in blocks, which made them kind of a lousy choice for the result of a PRINT.  So when isotopes came on the scene, it seemed a much better idea to say that trash was the *antiform* of something.

So I ultimatley settled on the idea that ~ was the quasiform of BLANK! (as opposed to ~_~, which looks pretty bad):

    &gt;&gt; quasi _
    == ~

    &gt;&gt; ~
    == ~  ; anti

    &gt;&gt; quasi? &#39;~
    == ~true~  ; anti

    &gt;&gt; trash? ~
    == ~true~  ; anti

## But... Would It Make More Sense Related to Void?

Initially I was at something of a loss for how void fit into the isotopic world.

One of my early reasonings was that VOID was more &quot;etheric&quot; than NULL.  *So perhaps void was actually the antiform of null,* and ~ could be null&#39;s quasiform:

     &gt;&gt; quasi null
     == ~

     &gt;&gt; ~
     ; void

But this was confusing, since if `~` was the meta of void, there really isn&#39;t any such thing as a &quot;~ isotope.  You could never make one, because I thought it needed to vaporize.

    &gt;&gt; 1 + 2 ~
    == 3

I was bothered by taking it for this purpose, because I was pretty attached to **`~`** for representing unset variables.  It looked clean, letting you see the things you&#39;ve set and haven&#39;t:

    &gt;&gt; f: make frame! :append

    &gt;&gt; f.dup: 2
    &gt;&gt; f.value: &quot;a string&quot;

    &gt;&gt; f
    == make frame! [
        series: ~
        value: &quot;a string&quot;
        part: ~
        dup: 2
        line: ~
    ]

It wasn&#39;t just in these printouts, also in source.  Being able to simply type **`(x: ~)`** to unset a variable and have that be the right way to do it...in an object field or just in code, was just too good.

That made me feel pretty attached to the idea that ~ is the contents of an unset variable, which is not displayed by the terminal, and which is ornery to things like ANY or ALL.</description>
    
    <lastBuildDate>Thu, 01 Dec 2022 09:02:11 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/how-became-quasi-blank/1915.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How ~ Became Quasi-BLANK!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/the-meta-of-null-and-void/1941">The ^META of NULL and VOID</a></p>
          <p><a href="https://forum.rebol.info/t/how-became-quasi-blank/1915/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-became-quasi-blank/1915/2</link>
        <pubDate>Thu, 25 Aug 2022 07:06:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1915-2</guid>
        <source url="https://forum.rebol.info/t/how-became-quasi-blank/1915.rss">How ~ Became Quasi-BLANK!</source>
      </item>
      <item>
        <title>How ~ Became Quasi-BLANK!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Prior to modern quasiforms, <code>~</code> was a special "BAD-WORD! with no name", e.g. a null spelling:</p>
<pre><code>&gt;&gt; type of '~
== #[datatype! bad-word!]

&gt;&gt; as text! '~
; null
</code></pre>
<p>So unlike regular WORD!, it was possible to have a BAD-WORD! that had no UTF-8 representation.  (Yes, this was a sign that something was amiss.)</p>
<p>However, I liked having <strong><code>~</code></strong> be something that could be reserved by the system, and I thought the "bad-wordness" plus the lack of any associated text made it a good choice for being what we'd call "trash"</p>
<pre><code>&gt;&gt; if trash? '~ [print "Yup, that's a trash"]
Yup, that's a trash.

&gt;&gt; '~  ; console would not show by default

&gt;&gt; mold print "So ~ was the result of things like PRINT"
So ~ was the result of things like PRINT
== "~"
</code></pre>
<p><em>(You can re-read my <a href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466/4">explanation of why void is a bad return value for things like PRINT or HELP.</a>)</em></p>
<p>You could put these BAD-WORD!s in blocks, which made them kind of a lousy choice for the result of a PRINT.  So when isotopes came on the scene, it seemed a much better idea to say that trash was the <em>antiform</em> of something.</p>
<p>So I ultimatley settled on the idea that ~ was the quasiform of BLANK! (as opposed to ~_~, which looks pretty bad):</p>
<pre><code>&gt;&gt; quasi _
== ~

&gt;&gt; ~
== ~  ; anti

&gt;&gt; quasi? '~
== ~true~  ; anti

&gt;&gt; trash? ~
== ~true~  ; anti
</code></pre>
<h2>
<a name="but-would-it-make-more-sense-related-to-void-1" class="anchor" href="https://forum.rebol.info#but-would-it-make-more-sense-related-to-void-1"></a>But... Would It Make More Sense Related to Void?</h2>
<p>Initially I was at something of a loss for how void fit into the isotopic world.</p>
<p>One of my early reasonings was that VOID was more "etheric" than NULL.  <em>So perhaps void was actually the antiform of null,</em> and ~ could be null's quasiform:</p>
<pre><code> &gt;&gt; quasi null
 == ~

 &gt;&gt; ~
 ; void
</code></pre>
<p>But this was confusing, since if <code>~</code> was the meta of void, there really isn't any such thing as a "~ isotope.  You could never make one, because I thought it needed to vaporize.</p>
<pre><code>&gt;&gt; 1 + 2 ~
== 3
</code></pre>
<p>I was bothered by taking it for this purpose, because I was pretty attached to <strong><code>~</code></strong> for representing unset variables.  It looked clean, letting you see the things you've set and haven't:</p>
<pre><code>&gt;&gt; f: make frame! :append

&gt;&gt; f.dup: 2
&gt;&gt; f.value: "a string"

&gt;&gt; f
== make frame! [
    series: ~
    value: "a string"
    part: ~
    dup: 2
    line: ~
]
</code></pre>
<p>It wasn't just in these printouts, also in source.  Being able to simply type <strong><code>(x: ~)</code></strong> to unset a variable and have that be the right way to do it...in an object field or just in code, was just too good.</p>
<p>That made me feel pretty attached to the idea that ~ is the contents of an unset variable, which is not displayed by the terminal, and which is ornery to things like ANY or ALL.</p>
          <p><a href="https://forum.rebol.info/t/how-became-quasi-blank/1915/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-became-quasi-blank/1915/1</link>
        <pubDate>Mon, 15 Aug 2022 12:15:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1915-1</guid>
        <source url="https://forum.rebol.info/t/how-became-quasi-blank/1915.rss">How ~ Became Quasi-BLANK!</source>
      </item>
  </channel>
</rss>
