<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DESTRUCTURE Dialect</title>
    <link>https://forum.rebol.info/t/destructure-dialect/1877</link>
    <description>I&#39;ve talked about this.  But there&#39;s no excuse not to write it, when there&#39;s so much power in modern PARSE *(the engine we up until recently called UPARSE)*.

A simple motivating case was a desire for different behavior from PARSE alternates with **`|`**.  So while **[word! | word! word!]** is always considered to be a badly-written parse rule, you could get a different treatment in destructure...because it always assumes you mean to go to `&lt;end&gt;`

    &gt;&gt; destructure [banana] [
          [word!] =&gt; [print &quot;Just one word&quot;]
          [word! word!] =&gt; [print &quot;Two words&quot;]
       ]
    Just one word

    &gt;&gt; destructure [apple banana] [
          [word!] =&gt; [print &quot;Just one word&quot;]  ; not complete, so no match
          [word! word!] =&gt; [print &quot;Two words&quot;]
       ]
    Two words

But the dialect concept is more ambitious than that, allowing you to give names to capture rules.  Then when you use those names, that&#39;s the variable that is set:

    &gt;&gt; destructure [apple banana] [
          w1: [word!] w2: [word!]

          [w1] =&gt; [print [&quot;One:&quot; w1]]
          [w1 w2] =&gt; [print [&quot;Two:&quot; w1 w2]]
       ]
    Two: apple banana

And because what&#39;s actually powering this behind the scenes is PARSE, you have all those tools at your disposal...including the just-added [ellipsis operator](https://forum.rebol.info/t/the-yada-yada-yada-combinator/1876)!

    &gt;&gt; destructure [1 2 apple banana 3 4 5] [
          w1: [word!] w2: [word!]

          [w1] =&gt; [print [&quot;One:&quot; w1]]
          [w1 w2] =&gt; [print [&quot;Two:&quot; w1 w2]]
          [... w1 w2 ...] =&gt; [print [&quot;Words and more stuff:&quot; w1 w2]]
       ]
    Words and more stuff: apple banana

## A Crazy Short Implementation!

I&#39;m sure it will receive some enhancements, but... this is pretty badass for something I wrote that worked more or less the first time!

    destructure: func [
        input [any-series!]
        dialect [block!]
        /multi &quot;Run multiple branches&quot;
        &lt;local&gt; result&#39; name rule pattern branch combinators
    ][
        result&#39;: @void
        combinators: copy default-combinators
        parse dialect [while [not &lt;end&gt;] [
            name: to-word/ set-word!, rule: block! (
                combinators.(name): compose [(name): (rule)]
            )
            |
            pattern: block!, &#39;=&gt;, branch: block!
            (
                parse/combinators input pattern combinators then (
                    branch
                ) also ^r&#39; -&gt; [
                    if not multi [
                        return unmeta r&#39;
                    ]
                    result&#39;: r&#39;
                ]
            )
            |
            fail &quot;Invalid DESTRUCTURE dialect entry&quot;
        ]]
        return unmeta result&#39;
    ]

## And It&#39;s Composable, Too!

That&#39;s right... you can use DESTRUCTURE with ELSE and THEN.

It follows the rules; a destructure that does not match anything is void!

    &gt;&gt; 1 + 2 destructure [a] [[integer!] =&gt; [print &quot;Not happening&quot;]]
    == 3

Notice I even threw a /MULTI feature in there, so you can match multiple ways!

    &gt;&gt; destructure/multi [apple banana] [
          w1: [word!] w2: [word!]

          [w1] =&gt; [print [&quot;One:&quot; w1]]
          [w1 w2] =&gt; [print [&quot;Two:&quot; w1 w2]]
          [repeat 2 &lt;any&gt;] =&gt; [print &quot;Matching any two values also counts&quot;]
       ]
    Two: apple banana
    Matching any two values also counts

---

# :boom: :raised_hand_with_fingers_splayed: :electric_plug:  POWER, IN YOUR HANDS! :electric_plug: :raised_hand_with_fingers_splayed:  :boom:</description>
    
    <lastBuildDate>Tue, 12 Jul 2022 16:25:37 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/destructure-dialect/1877.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>DESTRUCTURE Dialect</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Awesome! Standing ovation!</p>
<p><img src="https://forum.rebol.info/uploads/default/original/1X/7a491567ca291da1a3c64b4eec2bd643095bb8bc.gif" alt="applause-futurama" data-base62-sha1="hrMPBqBJar2oaCzFKe4Sxlbf43q" width="498" height="380"></p>
          <p><a href="https://forum.rebol.info/t/destructure-dialect/1877/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/destructure-dialect/1877/2</link>
        <pubDate>Tue, 12 Jul 2022 16:25:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1877-2</guid>
        <source url="https://forum.rebol.info/t/destructure-dialect/1877.rss">DESTRUCTURE Dialect</source>
      </item>
      <item>
        <title>DESTRUCTURE Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've talked about this.  But there's no excuse not to write it, when there's so much power in modern PARSE <em>(the engine we up until recently called UPARSE)</em>.</p>
<p>A simple motivating case was a desire for different behavior from PARSE alternates with <strong><code>|</code></strong>.  So while <strong>[word! | word! word!]</strong> is always considered to be a badly-written parse rule, you could get a different treatment in destructure...because it always assumes you mean to go to <code>&lt;end&gt;</code></p>
<pre><code>&gt;&gt; destructure [banana] [
      [word!] =&gt; [print "Just one word"]
      [word! word!] =&gt; [print "Two words"]
   ]
Just one word

&gt;&gt; destructure [apple banana] [
      [word!] =&gt; [print "Just one word"]  ; not complete, so no match
      [word! word!] =&gt; [print "Two words"]
   ]
Two words
</code></pre>
<p>But the dialect concept is more ambitious than that, allowing you to give names to capture rules.  Then when you use those names, that's the variable that is set:</p>
<pre><code>&gt;&gt; destructure [apple banana] [
      w1: [word!] w2: [word!]

      [w1] =&gt; [print ["One:" w1]]
      [w1 w2] =&gt; [print ["Two:" w1 w2]]
   ]
Two: apple banana
</code></pre>
<p>And because what's actually powering this behind the scenes is PARSE, you have all those tools at your disposal...including the just-added <a href="https://forum.rebol.info/t/the-yada-yada-yada-combinator/1876">ellipsis operator</a>!</p>
<pre><code>&gt;&gt; destructure [1 2 apple banana 3 4 5] [
      w1: [word!] w2: [word!]

      [w1] =&gt; [print ["One:" w1]]
      [w1 w2] =&gt; [print ["Two:" w1 w2]]
      [... w1 w2 ...] =&gt; [print ["Words and more stuff:" w1 w2]]
   ]
Words and more stuff: apple banana
</code></pre>
<h2>A Crazy Short Implementation!</h2>
<p>I'm sure it will receive some enhancements, but... this is pretty badass for something I wrote that worked more or less the first time!</p>
<pre><code>destructure: func [
    input [any-series!]
    dialect [block!]
    /multi "Run multiple branches"
    &lt;local&gt; result' name rule pattern branch combinators
][
    result': @void
    combinators: copy default-combinators
    parse dialect [while [not &lt;end&gt;] [
        name: to-word/ set-word!, rule: block! (
            combinators.(name): compose [(name): (rule)]
        )
        |
        pattern: block!, '=&gt;, branch: block!
        (
            parse/combinators input pattern combinators then (
                branch
            ) also ^r' -&gt; [
                if not multi [
                    return unmeta r'
                ]
                result': r'
            ]
        )
        |
        fail "Invalid DESTRUCTURE dialect entry"
    ]]
    return unmeta result'
]
</code></pre>
<h2>And It's Composable, Too!</h2>
<p>That's right... you can use DESTRUCTURE with ELSE and THEN.</p>
<p>It follows the rules; a destructure that does not match anything is void!</p>
<pre><code>&gt;&gt; 1 + 2 destructure [a] [[integer!] =&gt; [print "Not happening"]]
== 3
</code></pre>
<p>Notice I even threw a /MULTI feature in there, so you can match multiple ways!</p>
<pre><code>&gt;&gt; destructure/multi [apple banana] [
      w1: [word!] w2: [word!]

      [w1] =&gt; [print ["One:" w1]]
      [w1 w2] =&gt; [print ["Two:" w1 w2]]
      [repeat 2 &lt;any&gt;] =&gt; [print "Matching any two values also counts"]
   ]
Two: apple banana
Matching any two values also counts
</code></pre>
<hr>
<h1>
<img src="https://forum.rebol.info/images/emoji/twitter/boom.png?v=9" title=":boom:" class="emoji" alt=":boom:"> <img src="https://forum.rebol.info/images/emoji/twitter/raised_hand_with_fingers_splayed.png?v=9" title=":raised_hand_with_fingers_splayed:" class="emoji" alt=":raised_hand_with_fingers_splayed:"> <img src="https://forum.rebol.info/images/emoji/twitter/electric_plug.png?v=9" title=":electric_plug:" class="emoji" alt=":electric_plug:">  POWER, IN YOUR HANDS! <img src="https://forum.rebol.info/images/emoji/twitter/electric_plug.png?v=9" title=":electric_plug:" class="emoji" alt=":electric_plug:"> <img src="https://forum.rebol.info/images/emoji/twitter/raised_hand_with_fingers_splayed.png?v=9" title=":raised_hand_with_fingers_splayed:" class="emoji" alt=":raised_hand_with_fingers_splayed:">  <img src="https://forum.rebol.info/images/emoji/twitter/boom.png?v=9" title=":boom:" class="emoji" alt=":boom:">
</h1>
          <p><a href="https://forum.rebol.info/t/destructure-dialect/1877/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/destructure-dialect/1877/1</link>
        <pubDate>Tue, 12 Jul 2022 15:52:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1877-1</guid>
        <source url="https://forum.rebol.info/t/destructure-dialect/1877.rss">DESTRUCTURE Dialect</source>
      </item>
  </channel>
</rss>
