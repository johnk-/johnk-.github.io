<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Circling Multi-Returns: Choose Which Is Expression Result</title>
    <link>https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587</link>
    <description>Multi-Returns have a feature of being able to &quot;circle&quot; which result will be the value of the overall expression.  You do the circling with an **`@word`** or an **`@tu.p.le`**... or an **`@(gr o up)`** that evaluates to what you want to assign.

### Demo!

Here&#39;s a function with a secondary return value to demonstrate with:

    multi: func [
        return: &quot;Main return value&quot;
            [integer!]
        @secondary: &quot;Secondary return value&quot;
            [integer!]
    ][
        secondary: 20
        return 10
    ]

Traditionally you could ask for both results, and the overall result would be the first return:

    &gt;&gt; [a b]: multi
    == 10  ; defaults to same value as first result, e.g. A

    &gt;&gt; a
    == 10

    &gt;&gt; b
    == 20

But now you can &quot;circle&quot; to ask for a different result, e.g. the second:

    &gt;&gt; [a @b]: multi
    == 20  ; same value as b
 
    &gt;&gt; a
    == 10

    &gt;&gt; b
    == 20

You can combine this with things like GROUP!s to calculate the variable name, or even omit the variable name and use `#`:

    &gt;&gt; [a @(#)]: multi
    == 20  
 
    &gt;&gt; a
    == 10

There are some places where this comes in handy, although you generally want to pick the main return to be the thing people are most interested in responding to (e.g. determining success or failure of an operation).

There&#39;s also a characteristic that only the main return can return unstable isotopes without having to contort the value convention itself to encode the void state (e.g. by ^META quoting the results).  So that should be weighed as well when thinking about how to plan the results.</description>
    
    <lastBuildDate>Thu, 19 Oct 2023 11:40:59 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Circling Multi-Returns: Choose Which Is Expression Result</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Multi-Returns have a feature of being able to "circle" which result will be the value of the overall expression.  You do the circling with an <strong><code>@word</code></strong> or an <strong><code>@tu.p.le</code></strong>... or an <strong><code>@(gr o up)</code></strong> that evaluates to what you want to assign.</p>
<h3>
<a name="demo-1" class="anchor" href="https://forum.rebol.info#demo-1"></a>Demo!</h3>
<p>Here's a function with a secondary return value to demonstrate with:</p>
<pre><code>multi: func [
    return: "Main return value"
        [integer!]
    @secondary: "Secondary return value"
        [integer!]
][
    secondary: 20
    return 10
]
</code></pre>
<p>Traditionally you could ask for both results, and the overall result would be the first return:</p>
<pre><code>&gt;&gt; [a b]: multi
== 10  ; defaults to same value as first result, e.g. A

&gt;&gt; a
== 10

&gt;&gt; b
== 20
</code></pre>
<p>But now you can "circle" to ask for a different result, e.g. the second:</p>
<pre><code>&gt;&gt; [a @b]: multi
== 20  ; same value as b

&gt;&gt; a
== 10

&gt;&gt; b
== 20
</code></pre>
<p>You can combine this with things like GROUP!s to calculate the variable name, or even omit the variable name and use <code>#</code>:</p>
<pre><code>&gt;&gt; [a @(#)]: multi
== 20  

&gt;&gt; a
== 10
</code></pre>
<p>There are some places where this comes in handy, although you generally want to pick the main return to be the thing people are most interested in responding to (e.g. determining success or failure of an operation).</p>
<p>There's also a characteristic that only the main return can return unstable isotopes without having to contort the value convention itself to encode the void state (e.g. by ^META quoting the results).  So that should be weighed as well when thinking about how to plan the results.</p>
          <p><a href="https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587/1</link>
        <pubDate>Sat, 17 Apr 2021 06:07:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1587-1</guid>
        <source url="https://forum.rebol.info/t/circling-multi-returns-choose-which-is-expression-result/1587.rss">Circling Multi-Returns: Choose Which Is Expression Result</source>
      </item>
  </channel>
</rss>
