<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hex-Valued Integer Literals: Likely Not In Ren-C</title>
    <link>https://forum.rebol.info/t/hex-valued-integer-literals-likely-not-in-ren-c/1815</link>
    <description>On an old Trello there was a card about standardizing the differences between R3-Alpha and Red...and a checklist with only one item:

&gt; Hex-valued literal notation (Rebol has none, Red used to use FFh, FFFFh, FFFFFFFFh), now using 0#FF

The motivation was for purposes of Red/System, mostly.

In Ren-C this doesn&#39;t seem like a priority.  It has ISSUE! (TOKEN!) as a read-only data type that fits in a cell.  Hence a systems-oriented dialect already has an efficient way to represent these values.

For instance: it&#39;s not a big deal if your assembler says **[mov ax, #FE]** in its source... if it&#39;s generating machine code.

Of course, an ISSUE! in it isn&#39;t the same from a metaprogramming sense as a slot with an INTEGER! in it.  So you don&#39;t get the automatic advantage of *every* dialect that has INTEGER! support for a given slot working with a hex notation.  But isn&#39;t that what COMPOSE is for...?

    my-dialect [something-or-another 255]

    my-dialect compose [whatever (debin [BE +] #FF)]

**Having more than one representation for the same type is generally bad, anyway.**  Let&#39;s look at what Red does here:

    red&gt;&gt; FFh
    == 255

    red&gt;&gt; F0h + 0Fh
    == 255

If it was so important that it had to be encoded in source, why is it thrown away immediately?

It&#39;s something about Red worth knowing exists, but off the radar for implementing, methinks.</description>
    
    <lastBuildDate>Sat, 14 May 2022 04:35:56 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/hex-valued-integer-literals-likely-not-in-ren-c/1815.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Hex-Valued Integer Literals: Likely Not In Ren-C</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>On an old Trello there was a card about standardizing the differences between R3-Alpha and Red...and a checklist with only one item:</p>
<blockquote>
<p>Hex-valued literal notation (Rebol has none, Red used to use FFh, FFFFh, FFFFFFFFh), now using 0#FF</p>
</blockquote>
<p>The motivation was for purposes of Red/System, mostly.</p>
<p>In Ren-C this doesn't seem like a priority.  It has ISSUE! (TOKEN!) as a read-only data type that fits in a cell.  Hence a systems-oriented dialect already has an efficient way to represent these values.</p>
<p>For instance: it's not a big deal if your assembler says <strong>[mov ax, <span class="hashtag">#FE</span>]</strong> in its source... if it's generating machine code.</p>
<p>Of course, an ISSUE! in it isn't the same from a metaprogramming sense as a slot with an INTEGER! in it.  So you don't get the automatic advantage of <em>every</em> dialect that has INTEGER! support for a given slot working with a hex notation.  But isn't that what COMPOSE is for...?</p>
<pre><code>my-dialect [something-or-another 255]

my-dialect compose [whatever (debin [BE +] #FF)]
</code></pre>
<p><strong>Having more than one representation for the same type is generally bad, anyway.</strong>  Let's look at what Red does here:</p>
<pre><code>red&gt;&gt; FFh
== 255

red&gt;&gt; F0h + 0Fh
== 255
</code></pre>
<p>If it was so important that it had to be encoded in source, why is it thrown away immediately?</p>
<p>It's something about Red worth knowing exists, but off the radar for implementing, methinks.</p>
          <p><a href="https://forum.rebol.info/t/hex-valued-integer-literals-likely-not-in-ren-c/1815/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/hex-valued-integer-literals-likely-not-in-ren-c/1815/1</link>
        <pubDate>Sat, 14 May 2022 04:35:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1815-1</guid>
        <source url="https://forum.rebol.info/t/hex-valued-integer-literals-likely-not-in-ren-c/1815.rss">Hex-Valued Integer Literals: Likely Not In Ren-C</source>
      </item>
  </channel>
</rss>
