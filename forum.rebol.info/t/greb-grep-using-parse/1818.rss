<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>`greb` : Grep Using PARSE?</title>
    <link>https://forum.rebol.info/t/greb-grep-using-parse/1818</link>
    <description>There was a Trello card with a remark from @johnk about an idea from Pekr:

&gt; Not sure how this would work, but it is an interesting excercise to think about.  Something that bridges between unix and rebol syntax like:
&gt;
&gt;     ls | greb &#39;some alpha &quot;.reb&quot;&#39;
&gt;
&gt; (assuming a few more built in rules/charsets)
&gt;
&gt; May need a collect/keep kind of wrapper to retrieve data cleanly.

This would be a very small subset of what @BlackATTR&#39;s QUERY could do...but it seems like it wouldn&#39;t hurt if we went ahead and made this program as a test and put it in the [ren-c-stdio](https://github.com/metaeducation/ren-c-stdio) repository.

I&#39;ve already made things like TAC (backwards unix CAT), where the goal is to see how essential and correct we can make things:

https://github.com/metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21

**I like the idea of making GREB similarly essential, and part of the samples.**  Worth doing.

(Note that `grep` was itself originally framed as a one-line `awk` program.)

I&#39;ll also throw in a little ping that it would be nice to have a simple web app that exposed PARSE functionality with some highlighting, like [http://regexpal.com/](http://regexpal.com/).  Seems sometimes we get such big ideas in our head we forget to do the small ones (!)</description>
    
    <lastBuildDate>Tue, 12 Jul 2022 23:58:37 +0000</lastBuildDate>
    <category>System Tools</category>
    <atom:link href="https://forum.rebol.info/t/greb-grep-using-parse/1818.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>`greb` : Grep Using PARSE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h1>Greb Lives.</h1>
<p><strong><a href="https://github.com/hostilefork/greb">https://github.com/hostilefork/greb</a></strong></p>
<p>It's of course catastrophically slow as such utilities go.  But, <em>design first, then optimize</em>.</p>
<p>I've started it off on the right foot, with a test.  Not a complicated one...it just filters a pre-made list of filenames, and makes sure it gets the expected results:</p>
<p><strong><a href="https://github.com/hostilefork/greb/blob/6df7690d2dc8ae5b2f7a45872db54914027177e7/.github/workflows/test-greb.yml#L90">test-greb.yml (Line 90)</a></strong></p>
<p>So that shows it working on Mac, Linux, and Windows.</p>
<h2>What's Next For Greb?</h2>
<p>Rulesets coming from a file are clearly an important feature.  So instead of:</p>
<pre><code>cat data.txt | greb "your &lt;rule&gt; here"
</code></pre>
<p>You would want to say:</p>
<pre><code>cat data.txt | greb %my-rules.greb
</code></pre>
<p>But what format would these rules files take?  How do they separate defining rules from running rules?  How do they do <span class="hashtag">#include</span> of other files for rules they use?</p>
<p>For instance, <strong>some-a: [some "a"]</strong> could mean "assign a block to represent the reusable SOME-A rule".  Or it could mean "run the some combinator on the input looking for the letter a, and then store the result in the variable <code>some-a</code>".</p>
<p>When we write source code, we make that separation by having code outside of PARSE that assigns the rules, then inside the PARSE it's run.  But greb is hiding the call to PARSE and making it implicit.  So what's the limit of what a greb file does?</p>
<p>Maybe you define rules, and it checks to see if there's one called <strong>main</strong>... if there's not, you still have to provide a string of rule code to get it kicked off?</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji only-emoji" alt=":man_shrugging:"></p>
<p>That's one question.  But then, how would the binding work?</p>
<p>This first take on greb implementation shows that I don't try to BIND things like DIGIT and ALPHA, but rather slip them into the combinator set.  <a href="https://forum.rebol.info/t/destructure-dialect/1877">That's actually how DESTRUCTURE works as well.</a></p>
<p><strong>There's a lot which this seemingly-"simple" task points out about things we may not have elegant solutions for.</strong>  So it's definitely worth looking at.</p>
<p>Anyway, it has been started!</p>
          <p><a href="https://forum.rebol.info/t/greb-grep-using-parse/1818/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/greb-grep-using-parse/1818/2</link>
        <pubDate>Tue, 12 Jul 2022 17:59:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1818-2</guid>
        <source url="https://forum.rebol.info/t/greb-grep-using-parse/1818.rss">`greb` : Grep Using PARSE?</source>
      </item>
      <item>
        <title>`greb` : Grep Using PARSE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There was a Trello card with a remark from <a class="mention" href="https://forum.rebol.info/u/johnk">@johnk</a> about an idea from Pekr:</p>
<blockquote>
<p>Not sure how this would work, but it is an interesting excercise to think about.  Something that bridges between unix and rebol syntax like:</p>
<pre><code>ls | greb 'some alpha ".reb"'
</code></pre>
<p>(assuming a few more built in rules/charsets)</p>
<p>May need a collect/keep kind of wrapper to retrieve data cleanly.</p>
</blockquote>
<p>This would be a very small subset of what <a class="mention" href="https://forum.rebol.info/u/blackattr">@BlackATTR</a>'s QUERY could do...but it seems like it wouldn't hurt if we went ahead and made this program as a test and put it in the <a href="https://github.com/metaeducation/ren-c-stdio">ren-c-stdio</a> repository.</p>
<p>I've already made things like TAC (backwards unix CAT), where the goal is to see how essential and correct we can make things:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21" target="_blank" rel="noopener">metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21</a></h4>
<pre class="onebox"><code class="lang-r"><ol class="start lines" start="19" style="counter-reset: li-counter 18 ;">
<li>write-stdout try delimit/tail newline reverse collect [</li>
<li>    until [not keep line: try read-line]</li>
<li>]</li>
</ol></code></pre>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><strong>I like the idea of making GREB similarly essential, and part of the samples.</strong>  Worth doing.</p>
<p>(Note that <code>grep</code> was itself originally framed as a one-line <code>awk</code> program.)</p>
<p>I'll also throw in a little ping that it would be nice to have a simple web app that exposed PARSE functionality with some highlighting, like <a href="http://regexpal.com/">http://regexpal.com/</a>.  Seems sometimes we get such big ideas in our head we forget to do the small ones (!)</p>
          <p><a href="https://forum.rebol.info/t/greb-grep-using-parse/1818/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/greb-grep-using-parse/1818/1</link>
        <pubDate>Sat, 14 May 2022 05:09:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1818-1</guid>
        <source url="https://forum.rebol.info/t/greb-grep-using-parse/1818.rss">`greb` : Grep Using PARSE?</source>
      </item>
  </channel>
</rss>
