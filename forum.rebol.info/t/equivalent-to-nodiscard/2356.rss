<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Equivalent to [[nodiscard]] ?</title>
    <link>https://forum.rebol.info/t/equivalent-to-nodiscard/2356</link>
    <description>C++ has an attribute on functions called `[[nodiscard]]` that instructs the compiler to make sure you do something with a result.

  https://en.cppreference.com/w/cpp/language/attributes/nodiscard

I&#39;ve long wondered about whether there&#39;s some kind of discard-sensitivity that should/could be thrown in, e.g. for noticing when a stray value in evaluation doesn&#39;t do anything:

    &gt;&gt; append [a b c] [d e] 2 print &quot;Could we error?&quot;
    ** Error: 2 was discarded

How much code would break if we didn&#39;t allow stray values like that in the evaluator?  I could actually test that question.

Anyway, the mechanics behind RAISE means there&#39;s already a place to implement this.  There&#39;s a spot where it is decided if a definitional error would be discarded, and if so it&#39;s escalated to an abrupt failure.  It&#39;s only okay if it falls out of the evaluation to get picked up by someone else, and stays as a hot potato.

But could we have other hot potatoes?  Results of functions that are marked NO-DISCARD?   Plain values?

I can&#39;t offhand think of any important techniques this would break.  But I&#39;ll have to try it and see.</description>
    
    <lastBuildDate>Sat, 21 Dec 2024 18:44:50 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/equivalent-to-nodiscard/2356.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Equivalent to [[nodiscard]] ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>C++ has an attribute on functions called <code>[[nodiscard]]</code> that instructs the compiler to make sure you do something with a result.</p>
<p><a href="https://en.cppreference.com/w/cpp/language/attributes/nodiscard" class="inline-onebox">C++ attribute: nodiscard (since C++17) - cppreference.com</a></p>
<p>I've long wondered about whether there's some kind of discard-sensitivity that should/could be thrown in, e.g. for noticing when a stray value in evaluation doesn't do anything:</p>
<pre><code>&gt;&gt; append [a b c] [d e] 2 print "Could we error?"
** Error: 2 was discarded
</code></pre>
<p>How much code would break if we didn't allow stray values like that in the evaluator?  I could actually test that question.</p>
<p>Anyway, the mechanics behind RAISE means there's already a place to implement this.  There's a spot where it is decided if a definitional error would be discarded, and if so it's escalated to an abrupt failure.  It's only okay if it falls out of the evaluation to get picked up by someone else, and stays as a hot potato.</p>
<p>But could we have other hot potatoes?  Results of functions that are marked NO-DISCARD?   Plain values?</p>
<p>I can't offhand think of any important techniques this would break.  But I'll have to try it and see.</p>
          <p><a href="https://forum.rebol.info/t/equivalent-to-nodiscard/2356/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/equivalent-to-nodiscard/2356/1</link>
        <pubDate>Sat, 21 Dec 2024 18:44:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2356-1</guid>
        <source url="https://forum.rebol.info/t/equivalent-to-nodiscard/2356.rss">Equivalent to [[nodiscard]] ?</source>
      </item>
  </channel>
</rss>
