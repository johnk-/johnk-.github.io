<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Meaning of JavaScript&#39;s &quot;Undefined&quot; in the API</title>
    <link>https://forum.rebol.info/t/the-meaning-of-javascripts-undefined-in-the-api/2158</link>
    <description>Something that has been kind of on my mind is the relationship between JavaScript&#39;s `undefined` and n-C&#39;s trash state.

I&#39;ve set it up so that if you have a JS-NATIVE that doesn&#39;t have a return statement, that returns trash.  That&#39;s consistent with plain functions that don&#39;t have a return statement.

However, it seems to me that **reb.Value(&quot;print {Hello}&quot;);** should not return `undefined` the way that **reb.Value(&quot;select [a 10 b 20] &#39;c&quot;);** returns `null`.  One reason is because JavaScript is bad about conflating falsey things, and it considers undefined to be falsey.  So it is probably good to have only one falsey result that can come back from running arbitrary code.

It also seems like it&#39;s probably better to error on `undefined` when given as an argument:

    function foo() { }
    reb.Elide(&quot;append data&quot;, foo())

Would you rather that run without error, appending a trash to data, or have reb.Elide() complain that an argument is undefined?

Guess my point is that it seems like an area where noticing the parallel is useful, but care should be taken in where to make the mapping apply...</description>
    
    <lastBuildDate>Tue, 27 Feb 2024 01:27:56 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://forum.rebol.info/t/the-meaning-of-javascripts-undefined-in-the-api/2158.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Meaning of JavaScript&#39;s &quot;Undefined&quot; in the API</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Years after the original post, the model has changed.  <em>(Though note that I retroactively update posts to reflect modern terminology if it helps make the points easier to understand.)</em></p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2158">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It also seems like it's probably better to error on <code>undefined</code> when given as an argument:</p>
<pre><code>function foo() { }
reb.Elide("append data", foo())
</code></pre>
<p>Would you rather that run without error, appending a trash to data, or have reb.Elide() complain that an argument is undefined?</p>
</blockquote>
</aside>
<p>The new situation is that trash is an "antiform isotope".  So you can't append it.</p>
<p>You could assign it to a variable, if you qualify the insertion with something like a meta or @ :</p>
<pre><code>function foo() { }
reb.Elide("obj.field: @", foo())
</code></pre>
<p>If you go through that, should it be an error or should <code>obj.field</code> be the Ren-C concept of "undefined", e.g. set to a trash antiform?</p>
<p>It really hasn't come up yet, so no immediate action is needed.  But at least it now seems more safe, since undefineds can't accidentally get passed as easily.</p>
          <p><a href="https://forum.rebol.info/t/the-meaning-of-javascripts-undefined-in-the-api/2158/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-meaning-of-javascripts-undefined-in-the-api/2158/2</link>
        <pubDate>Sun, 15 Aug 2021 23:38:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2158-2</guid>
        <source url="https://forum.rebol.info/t/the-meaning-of-javascripts-undefined-in-the-api/2158.rss">The Meaning of JavaScript&#39;s &quot;Undefined&quot; in the API</source>
      </item>
      <item>
        <title>The Meaning of JavaScript&#39;s &quot;Undefined&quot; in the API</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Something that has been kind of on my mind is the relationship between JavaScript's <code>undefined</code> and n-C's trash state.</p>
<p>I've set it up so that if you have a JS-NATIVE that doesn't have a return statement, that returns trash.  That's consistent with plain functions that don't have a return statement.</p>
<p>However, it seems to me that <strong>reb.Value("print {Hello}");</strong> should not return <code>undefined</code> the way that <strong>reb.Value("select [a 10 b 20] 'c");</strong> returns <code>null</code>.  One reason is because JavaScript is bad about conflating falsey things, and it considers undefined to be falsey.  So it is probably good to have only one falsey result that can come back from running arbitrary code.</p>
<p>It also seems like it's probably better to error on <code>undefined</code> when given as an argument:</p>
<pre><code>function foo() { }
reb.Elide("append data", foo())
</code></pre>
<p>Would you rather that run without error, appending a trash to data, or have reb.Elide() complain that an argument is undefined?</p>
<p>Guess my point is that it seems like an area where noticing the parallel is useful, but care should be taken in where to make the mapping apply...</p>
          <p><a href="https://forum.rebol.info/t/the-meaning-of-javascripts-undefined-in-the-api/2158/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-meaning-of-javascripts-undefined-in-the-api/2158/1</link>
        <pubDate>Fri, 12 Oct 2018 05:24:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2158-1</guid>
        <source url="https://forum.rebol.info/t/the-meaning-of-javascripts-undefined-in-the-api/2158.rss">The Meaning of JavaScript&#39;s &quot;Undefined&quot; in the API</source>
      </item>
  </channel>
</rss>
