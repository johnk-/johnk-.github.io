<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Agree-To-Disagree Points: Places I See Both Sides</title>
    <link>https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862</link>
    <description>I thought I would make a thread for deviations from Rebol2 that I consider to be matters-of-taste, as opposed to where I think there&#39;s a hard &quot;right vs. wrong&quot;, and provide the code to reverse the decision.

*(Please discuss the issues on the linked posts--not here.)*</description>
    
    <lastBuildDate>Thu, 21 Jul 2022 09:11:10 +0000</lastBuildDate>
    <category>R3C</category>
    <atom:link href="https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Agree-To-Disagree Points: Places I See Both Sides</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>You Can Has APPEND/ONLY</h2>
<p><a href="https://forum.rebol.info/t/the-long-awaited-death-of-only/1607">/ONLY is Dead</a>...<em>but</em> Ren-C's flexibility means you can get it back if you want it, and not break a sweat doing so.   You just become responsible for figuring out what its universal meaning is.  (<span class="hashtag">#goodluckwiththat</span>)</p>
<p>Remember that AUGMENT lets you add parameters to functions.</p>
<pre><code>&gt;&gt; foo: func [x] [print ["x is" mold x]]
&gt;&gt; parameters of :foo
== [x]

&gt;&gt; foo+: augment :foo [/only "An ONLY parameter"]
&gt;&gt; parameters of :foo+
== [x /only]

&gt;&gt; foo+ 10
x is 10

&gt;&gt; foo+/only 10
x is 10
</code></pre>
<p>But adding parameters doesn't actually do anything but expand the specification.  You have to use another tool like ADAPT or ENCLOSE to make use of the new parameters that FOO never knew about.</p>
<pre><code>&gt;&gt; foo++: adapt :foo+ [print either only ["/ONLY!"] ["no /ONLY"]]

&gt;&gt; foo++ 10
no /ONLY
x is 10

&gt;&gt; foo++/only 10
/ONLY!
x is 10
</code></pre>
<p>So here's an ONLIFY transformer that adds a refinement to a function, and then injects a little code to pre-process the parameter to make a block isotope if needed.  (Note that the value passed to these functions is passed by ^META convention, so it will be quoted when a normal block is passed.)</p>
<pre><code>onlify: lambda [
    {Add /ONLY behavior to APPEND, INSERT, CHANGE}
    action [action!]
][
    adapt (augment :action [/only "Use quoted semantics for value"]) [
        all [not only, any-array? series, any-array? unquote value] then [
            value: as block! unquote :value
        ]
        ; ...fall through to normal handling
    ]
]
</code></pre>
<p>Then you can apply it to the functions:</p>
<pre><code>append: my onlify  ; e.g. `append: onlify :append` 
insert: my onlify
change: my onlify
</code></pre>
<p>And there you have it:</p>
<pre><code>&gt;&gt; append [a b c] [d e]
== [a b c d e]

&gt;&gt; append/only [a b c] [d e]
== [a b c [d e]]</code></pre>
          <p><a href="https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862/3</link>
        <pubDate>Thu, 21 Jul 2022 09:11:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1862-3</guid>
        <source url="https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862.rss">Agree-To-Disagree Points: Places I See Both Sides</source>
      </item>
      <item>
        <title>Agree-To-Disagree Points: Places I See Both Sides</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>Must RETURN from FUNCTION to get a result</h2>
<p>If you do not explicitly RETURN a result from a FUNCTION you'll get a "~ isotope" (morally equivalent to an UNSET! in Rebol2).</p>
<p><a href="https://forum.rebol.info/t/implicit-execution-of-return-in-functions-bad/1656">My certainty about the core change</a> hinges on the fact that our RETURN is a function that can be redefined and hooked (or defined not to be a function at all).</p>
<ol>
<li>
<p>I don't like having a hidden call to that function be there, just in the abstract.  Makes me uneasy.</p>
</li>
<li>
<p>Since people might want a hidden call or not want it, it's cleaner for the core have it <em>not</em> there.  It's harder to erase its influence, than to simply add it if you want it.</p>
</li>
<li>
<p>I'm just a bigger fan of explicitly pointing out that the last line of a function has a meaningful result for its callers, vs. having to guess.</p>
<ul>
<li>Not that "just because JavaScript does something we should do it too", but, JavaScript also requires explicit return from a function--otherwise the result is <code>undefined</code>.</li>
</ul>
</li>
</ol>
<p>While 1 and 3 are kind of personal preference issues, 2 is a design point.  The version that fabricates a function call at the end of the body is more complex than a version that doesn't, and we'd be implementing the latter in terms of the former no matter what.  <em>The only debate is on which one is called FUNC(TION).</em></p>
<p>So that is the "matter of taste" I speak of.  If you're on the side that the RETURN call is implicit... just make FUNC translate the body of your function into a GROUP! and RETURN it, so that the ultimate body result is the return value:</p>
<pre><code>func: adapt :lib.func [  ; runs the "prelude" block you give it before lib.func runs
    body: compose [return (as group! body)]  ; alters the BODY that lib.func sees
]
</code></pre>
<p>A little faster, but a little less readable (though I guess that's subjective):</p>
<pre><code>func: adapt :lib.func [
    body: reduce ['return as group! body]
]
</code></pre>
<p>As with most things, this could be made native for more performance.  We'd just have to give it a name.</p>
<pre><code>func: :lib.returner-func
</code></pre>
<p>Something like that.  I want to stress that I'm not opposed to having these optimized variations if something turns out to be really important to some people...it would run slightly faster than the adaptation.</p>
          <p><a href="https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862/2</link>
        <pubDate>Tue, 05 Jul 2022 00:54:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1862-2</guid>
        <source url="https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862.rss">Agree-To-Disagree Points: Places I See Both Sides</source>
      </item>
      <item>
        <title>Agree-To-Disagree Points: Places I See Both Sides</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I thought I would make a thread for deviations from Rebol2 that I consider to be matters-of-taste, as opposed to where I think there's a hard "right vs. wrong", and provide the code to reverse the decision.</p>
<p><em>(Please discuss the issues on the linked posts--not here.)</em></p>
          <p><a href="https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862/1</link>
        <pubDate>Tue, 05 Jul 2022 00:53:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1862-1</guid>
        <source url="https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862.rss">Agree-To-Disagree Points: Places I See Both Sides</source>
      </item>
  </channel>
</rss>
