<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Kaitai Struct Declarative Language for Binary Formats</title>
    <link>https://forum.rebol.info/t/kaitai-struct-declarative-language-for-binary-formats/2016</link>
    <description>This is an interesting declarative language in YAML designed to generate classes for binary formats.  There are many formats defined:

  https://formats.kaitai.io/

That&#39;s a lot of cases...but as one instructive example, you can look at how it describes a ZIP file--with little snippets of code in it for extracting the values:

  https://formats.kaitai.io/zip/

The C++ code generated is like this:

  https://formats.kaitai.io/zip/cpp_stl_11.html

But it also can also be used to make code for C#, JavaScript, Python, Ruby, Nim, PHP, Lua, Perl... *(though we&#39;d assume that if you escape code in, that part will only work be available for that language)*

The regimentation of YAML provides the typical repetition in the &quot;dialect&quot;.  This is the same as the Rebol complaint about JSON--not really leveraging &quot;parts of speech&quot;, but repeating tags over and over like `id:` and `type:`

      - id: version
        type: u2
      - id: flags
        type: gp_flags
        size: 2
      - id: compression_method
        type: u2
        enum: compression

But it&#39;s still pretty hard to compete with, especially when you consider this is giving a compilable specification...so the performance is going to be much better.

I always thought BINARY! parse was something that Rebol would have a unique story for, and Ren-C&#39;s UPARSE makes that a stronger story (by allowing rules to synthesize arbitrary results via extraction)... but seeing this kind of stuff reminds me that there are diminishing returns.</description>
    
    <lastBuildDate>Tue, 21 Feb 2023 22:36:43 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/kaitai-struct-declarative-language-for-binary-formats/2016.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Kaitai Struct Declarative Language for Binary Formats</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This is an interesting declarative language in YAML designed to generate classes for binary formats.  There are many formats defined:</p>
<p><a href="https://formats.kaitai.io/">https://formats.kaitai.io/</a></p>
<p>That's a lot of cases...but as one instructive example, you can look at how it describes a ZIP file--with little snippets of code in it for extracting the values:</p>
<p><a href="https://formats.kaitai.io/zip/" class="inline-onebox">ZIP archive file format spec for Kaitai Struct</a></p>
<p>The C++ code generated is like this:</p>
<p><a href="https://formats.kaitai.io/zip/cpp_stl_11.html" class="inline-onebox">ZIP archive file: C++11/STL parsing library</a></p>
<p>But it also can also be used to make code for C#, JavaScript, Python, Ruby, Nim, PHP, Lua, Perl... <em>(though we'd assume that if you escape code in, that part will only work be available for that language)</em></p>
<p>The regimentation of YAML provides the typical repetition in the "dialect".  This is the same as the Rebol complaint about JSON--not really leveraging "parts of speech", but repeating tags over and over like <code>id:</code> and <code>type:</code></p>
<pre><code>  - id: version
    type: u2
  - id: flags
    type: gp_flags
    size: 2
  - id: compression_method
    type: u2
    enum: compression
</code></pre>
<p>But it's still pretty hard to compete with, especially when you consider this is giving a compilable specification...so the performance is going to be much better.</p>
<p>I always thought BINARY! parse was something that Rebol would have a unique story for, and Ren-C's UPARSE makes that a stronger story (by allowing rules to synthesize arbitrary results via extraction)... but seeing this kind of stuff reminds me that there are diminishing returns.</p>
          <p><a href="https://forum.rebol.info/t/kaitai-struct-declarative-language-for-binary-formats/2016/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/kaitai-struct-declarative-language-for-binary-formats/2016/1</link>
        <pubDate>Tue, 21 Feb 2023 22:36:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2016-1</guid>
        <source url="https://forum.rebol.info/t/kaitai-struct-declarative-language-for-binary-formats/2016.rss">Kaitai Struct Declarative Language for Binary Formats</source>
      </item>
  </channel>
</rss>
