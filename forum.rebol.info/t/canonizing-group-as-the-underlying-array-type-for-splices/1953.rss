<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Canonizing GROUP! as the Underlying Array Type for Splices</title>
    <link>https://forum.rebol.info/t/canonizing-group-as-the-underlying-array-type-for-splices/1953</link>
    <description>The first concept of representing splices out of isotopes was to make them as iostopic BLOCK!.

You&#39;d get an isotopic block regardless of the input to SPREAD:

    &gt;&gt; spread [d e]
    == ~[d e]~  ; isotope

    &gt;&gt; spread &#39;(d e)
    == ~[d e]~  ; isotope

    &gt;&gt; spread @[d e]
    == ~[d e]~  ; isotope

From the perspective of things like APPEND, it doesn&#39;t matter:

    &gt;&gt; append [a b c] spread [d e]
    == [a b c d e]

    &gt;&gt; append [a b c] spread &#39;(d e)
    == [a b c d e]

    &gt;&gt; append [a b c] spread @[d e]
    == [a b c d e]

## I Think This Canonization of Splices Is Important

By canonizing splices to just one type, we recover the other types for other meanings that have nothing to do with splicing.  That subtlety would be lost if people had to think of every array type as being a splice.

There&#39;s no real question in my mind that it needs to be canonized.  But which array form should it take?

## I Think GROUP! Is A  Better Choice

* **It makes the canonization more obvious.**  Since the input to SPREAD will typically be a BLOCK!, people will learn the type is not preserved quickly:

      &gt;&gt; spread [a b c]
      == ~(a b c)~  ; isotope

* **Parentheses look softer and more permeable.**  They already are &quot;weaker&quot; in that they do not &quot;block&quot; evaluation in the way a BLOCK! does.  So their  softness makes it feel more reasonable to say that the edges aren&#39;t there.

    *(This semiotic permeability exists in other places where brackets and parentheses are juxtaposed... for instance in [interval notation](https://en.wikipedia.org/wiki/Interval_(mathematics)#Notations_for_intervals), where **[10, 20)** means &quot;the numbers from 10 to 20 without including 20&quot;)*

 * **The nothing state looks kind of like a zero.**  I&#39;ve proposed this &quot;nothing&quot; as the non-NULL, non-VOID state that empty branches could coerce to.  This has the nice property of signaling the branch was taken, while still being a no-op for things like appending:

       &gt;&gt; if true []
       == ~()~   ; isotope

       &gt;&gt; if true [] then [print &quot;Not VOID, so we got the branch ran signal...&quot;]
       Not VOID, so we got the branch ran signal...

       &gt;&gt; append [a b c] if true []
       == [a b c]  ; damn, that&#39;s cool!

While they act similarly to void in cases like append, they aren&#39;t void.  Hence they overwrite output cells...the information in that cell is lost:

    &gt;&gt; 1 + 2 if false [&lt;a&gt;]
    == 3

    &gt;&gt; 1 + 2 if true []
    == ~()~  ; isotope</description>
    
    <lastBuildDate>Wed, 30 Nov 2022 14:55:03 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/canonizing-group-as-the-underlying-array-type-for-splices/1953.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Canonizing GROUP! as the Underlying Array Type for Splices</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The first concept of representing splices out of isotopes was to make them as iostopic BLOCK!.</p>
<p>You'd get an isotopic block regardless of the input to SPREAD:</p>
<pre><code>&gt;&gt; spread [d e]
== ~[d e]~  ; isotope

&gt;&gt; spread '(d e)
== ~[d e]~  ; isotope

&gt;&gt; spread @[d e]
== ~[d e]~  ; isotope
</code></pre>
<p>From the perspective of things like APPEND, it doesn't matter:</p>
<pre><code>&gt;&gt; append [a b c] spread [d e]
== [a b c d e]

&gt;&gt; append [a b c] spread '(d e)
== [a b c d e]

&gt;&gt; append [a b c] spread @[d e]
== [a b c d e]
</code></pre>
<h2>I Think This Canonization of Splices Is Important</h2>
<p>By canonizing splices to just one type, we recover the other types for other meanings that have nothing to do with splicing.  That subtlety would be lost if people had to think of every array type as being a splice.</p>
<p>There's no real question in my mind that it needs to be canonized.  But which array form should it take?</p>
<h2>I Think GROUP! Is A  Better Choice</h2>
<ul>
<li>
<p><strong>It makes the canonization more obvious.</strong>  Since the input to SPREAD will typically be a BLOCK!, people will learn the type is not preserved quickly:</p>
<pre><code>&gt;&gt; spread [a b c]
== ~(a b c)~  ; isotope
</code></pre>
</li>
<li>
<p><strong>Parentheses look softer and more permeable.</strong>  They already are "weaker" in that they do not "block" evaluation in the way a BLOCK! does.  So their  softness makes it feel more reasonable to say that the edges aren't there.</p>
<p><em>(This semiotic permeability exists in other places where brackets and parentheses are juxtaposed... for instance in <a href="https://en.wikipedia.org/wiki/Interval_(mathematics)#Notations_for_intervals">interval notation</a>, where <strong>[10, 20)</strong> means "the numbers from 10 to 20 without including 20")</em></p>
</li>
<li>
<p><strong>The nothing state looks kind of like a zero.</strong>  I've proposed this "nothing" as the non-NULL, non-VOID state that empty branches could coerce to.  This has the nice property of signaling the branch was taken, while still being a no-op for things like appending:</p>
<pre><code>&gt;&gt; if true []
== ~()~   ; isotope

&gt;&gt; if true [] then [print "Not VOID, so we got the branch ran signal..."]
Not VOID, so we got the branch ran signal...

&gt;&gt; append [a b c] if true []
== [a b c]  ; damn, that's cool!
</code></pre>
</li>
</ul>
<p>While they act similarly to void in cases like append, they aren't void.  Hence they overwrite output cells...the information in that cell is lost:</p>
<pre><code>&gt;&gt; 1 + 2 if false [&lt;a&gt;]
== 3

&gt;&gt; 1 + 2 if true []
== ~()~  ; isotope</code></pre>
          <p><a href="https://forum.rebol.info/t/canonizing-group-as-the-underlying-array-type-for-splices/1953/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/canonizing-group-as-the-underlying-array-type-for-splices/1953/1</link>
        <pubDate>Wed, 31 Aug 2022 21:11:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1953-1</guid>
        <source url="https://forum.rebol.info/t/canonizing-group-as-the-underlying-array-type-for-splices/1953.rss">Canonizing GROUP! as the Underlying Array Type for Splices</source>
      </item>
  </channel>
</rss>
