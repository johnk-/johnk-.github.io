<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why Have Both BLOCK! and GROUP!</title>
    <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092</link>
    <description>Maybe this is a stupid question, but here’s something I’ve been wondering about Rebol: since quoting exists, block!s feel a bit redundant. Something like `[a b c]` could just as easily be represented as `the (a b c)`. So, why do both exist?

Or, to put it another way, it feels like Rebol has two orthogonal concepts:

- Grouping: you can take a bunch of symbols and parenthesize them to get a group!
- Quoting: you can take a value and quote it to prevent evaluation

So it makes sense that you can combine these: `the (a b c)`. Except that Rebol doesn’t seem to take advantage of this fact at all — rather, it goes the opposite route, by creating a new data structure which conflates aspects of both of these.</description>
    
    <lastBuildDate>Mon, 20 May 2024 22:52:52 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why Have Both BLOCK! and GROUP!</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="2092">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But we don't want blocks to have evaluator behavior. They evaluate to themselves.</p>
</blockquote>
</aside>
<p>A-ha! This is the kind of fundamental reason I was looking for. Thanks!</p>
<p>(And thanks more generally for your patience with me, too.)</p>
<p>And on reflection this makes perfect sense… you want to be able to do things like, say, COMPOSEing one block into another:</p>
<pre data-code-wrap="rebol"><code class="lang-rebol">&gt;&gt; code: [print "It works!"]
== [print "It works!"]

&gt;&gt; composed: compose [if 1 = 1 (code)]           
== [if 1 = 1 [print "It works!"]]

&gt;&gt; eval composed
It works!
; first in pack of length 1
</code></pre>
<p>But if BLOCK!s were merely quoted GROUP!s, then under assignment they would decay to a GROUP!, and then COMPOSE wouldn’t do what you want.</p>
<p>(Again, I’ll link this to the way Rebol works — its ‘macros’ take care of evaluation, so you <em>need</em> to be able to pass BLOCK!s into functions, however deep they’re nested. By contrast, Lisp has true macros which take unquoted arguments, so dropping one quoting level isn’t just acceptable, but actually vital. It’s always interesting to retrain one’s brain to a different paradigm!)</p>
          <p><a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092/10</link>
        <pubDate>Sat, 06 Jan 2024 01:37:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2092-10</guid>
        <source url="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss">Why Have Both BLOCK! and GROUP!</source>
      </item>
      <item>
        <title>Why Have Both BLOCK! and GROUP!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="8" data-topic="2092">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>why are we not fine with <code>['(a b c)]</code> being printed as <code>[[a b c]]</code>?</p>
</blockquote>
</aside>
<p>It's not just a matter of printing...</p>
<p>The behavior of quoted items is that they drop one quote level under evaluation.</p>
<p>But we don't want blocks to have evaluator behavior.  They evaluate to themselves.</p>
<pre><code>&gt;&gt; [a b c]
== [a b c]
</code></pre>
<p>This is integral to their character.  So if they were simply a rendering of '(a b c) then we'd expect them to drop the quote under evaluation:</p>
<pre><code>&gt;&gt; [a b c]
== (a b c)   ; if [a b c] was '(a b c) under the hood
</code></pre>
          <p><a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092/9</link>
        <pubDate>Sat, 06 Jan 2024 01:18:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2092-9</guid>
        <source url="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss">Why Have Both BLOCK! and GROUP!</source>
      </item>
      <item>
        <title>Why Have Both BLOCK! and GROUP!</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="6" data-topic="2092">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>OK, this is fair. The way I suggested would still be self-consistent, but the syntax sugar would make it confusing:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; append [a b c] '[1 + 2]
== [a b c (1 + 2)]
</code></pre>
<p>(In Lisp this isn’t a problem, since it would be printed <code>'(a b c (1 + 2))</code>. You could do that in Rebol too, but like you said the <code>[…]</code> syntax is very nice to have.)</p>
</blockquote>
</aside>
<p>Actually, you know what, I’ve just noticed that a situation like this exists already:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; [{a b c}]      
== ["a b c"]
</code></pre>
<p>So… if we’re fine with this, why are we not fine with <code>['(a b c)]</code> being printed as <code>[[a b c]]</code>?</p>
<p>(One possible answer is that blocks are a lot more common than strings. Which is fine, but feels a little unsatisfying.)</p>
<aside class="quote no-group" data-username="hostilefork" data-post="7" data-topic="2092">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Note that Ren-C's COMPOSE has some other tricks up its sleeve, e.g. transferring colons onto things that support them:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; compose [(animal): "not a good pet"]
== [zebra: "not a good pet"]
</code></pre>
</blockquote>
</aside>
<p>Oh, this is clever! And an additional justification for GET-GROUP! and SET-GROUP!.</p>
          <p><a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092/8</link>
        <pubDate>Sat, 06 Jan 2024 01:14:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2092-8</guid>
        <source url="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss">Why Have Both BLOCK! and GROUP!</source>
      </item>
      <item>
        <title>Why Have Both BLOCK! and GROUP!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="6" data-topic="2092">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>if we have quoting at all, it’s perfectly sensible to allow for quoting anything, including blocks.</p>
</blockquote>
</aside>
<p>Further on this point: note that when you use variables, that "shields you from evaluation"... in the sense that the variable fetch uses up the evaluation, giving you the unevaluated result of the variable contents:</p>
<pre><code>&gt;&gt; animal: 'zebra
== zebra

&gt;&gt; if animal = 'zebra [print {It's a zebra.}]
It's a zebra.
</code></pre>
<p>But when you are using the API, you don't have this step.</p>
<pre><code>REBVAL* animal = rebValue("'zebra");

rebElide("if", animal, "= 'zebra [print {It's a zebra.}]");
</code></pre>
<p>The <strong>animal</strong> is a C variable, not a Rebol-variable as WORD!.  Hence it's spliced into the code as-is without protection via its "name".  So it's as if you wrote:</p>
<pre><code>eval compose [if (animal) = 'zebra [print {It's a zebra.}]]
=&gt;
eval [if zebra = 'zebra [print {It's a zebra.}]]
</code></pre>
<p>So you'll get something like a zebra-is-undefined error, because it will look up the first zebra as a WORD! variable under evaluation.</p>
<p>An advantage to arbitrary quoting is that you can get that same protection you would have gotten from a variable reference on a value regardless of what it is.  Ren-C's COMPOSE can transfer quoting or quasi levels from GROUP!s onto the spliced items:</p>
<pre><code>eval compose [if '(animal) = 'zebra [print {It's a zebra.}]]
=&gt;
eval [if 'zebra = 'zebra [print {It's a zebra.}]]
</code></pre>
<p>In the API, this can be done with a quoting instruction:</p>
<pre><code>rebElide("if", rebQ(animal), "= 'zebra [print {It's a zebra.}]");
</code></pre>
<p>Regardless of what animal is (INTEGER!, GROUP!, BLOCK!, something already QUOTED!, etc.) you get that one step of quote, and you may not know if you need it or not.  This is just another facet beyond the applications of quoting to arbitrary meanings in dialects.</p>
<p>Note that Ren-C's COMPOSE has some other tricks up its sleeve, e.g. transferring colons onto things that support them:</p>
<pre><code>&gt;&gt; compose [(animal): "not a good pet"]
== [zebra: "not a good pet"]
</code></pre>
          <p><a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092/7</link>
        <pubDate>Fri, 05 Jan 2024 15:42:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2092-7</guid>
        <source url="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss">Why Have Both BLOCK! and GROUP!</source>
      </item>
      <item>
        <title>Why Have Both BLOCK! and GROUP!</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="5" data-topic="2092">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>If I quote a group, I mean I want to quote the group, and I want it to look that way … And if I append a block, I want it to be appended that way</p>
</blockquote>
</aside>
<p>OK, this is fair. The way I suggested would still be self-consistent, but the syntax sugar would make it confusing:</p>
<pre><code>&gt;&gt; append [a b c] '[1 + 2]
== [a b c (1 + 2)]
</code></pre>
<p>(In Lisp this isn’t a problem, since it would be printed <code>'(a b c (1 + 2))</code>. You could do that in Rebol too, but like you said the <code>[…]</code> syntax is very nice to have.)</p>
<p>In general, I suppose this is one of the things which makes Rebol such a different paradigm to Lisp. In most Lisps, everything starts out its life as code, and macros let you intercept and modify the parsed AST before it’s evaluated. This makes syntax sugar trivial, since it merely modifies the AST some more. But in Rebol, it’s more idiomatic to create bits of data, then evaluate them as code. And this makes it difficult to introduce syntax sugar, since it’s desirable for that data to be able to store any code verbatim. (On the other hand, it makes dialecting much more natural, for the reasons you mentioned.)</p>
<p>(Incidentally, the article which originally started me along this train of thought was yours on <a href="http://blog.hostilefork.com/rebol-vs-lisp-macros/">Rebol vs Lisp macros</a>, so thanks for writing that!)</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="5" data-topic="2092">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>to this day, <a href="https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995/2">Red adherents don't understand what use a quoted BLOCK! would be</a>, since blocks don't evaluate</p>
</blockquote>
</aside>
<p>This feels very similar to the way I was thinking about it, especially this line you quoted:</p>
<blockquote>
<p>blocks are already un-evaluated by default. The non-quoted version would be <code>paren!</code></p>
</blockquote>
<p>My objection was a little different to theirs though. I agree that, if we have quoting at all, it’s perfectly sensible to allow for quoting anything, including blocks. My question was: if we have quoting, <em>why do blocks exist at all?</em></p>
<aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2092">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>For background... historical Rebol/Red doesn't have any general concept of quoting at all. It has LIT-WORD! and LIT-PATH!, that simply have the evaluative rule of producing WORD! and PATH! respectively. Calling a BLOCK! a LIT-PAREN! and rendering it with brackets certainly didn't occur to anyone at that time.</p>
</blockquote>
</aside>
<p>I suspected it might have been something like this. But, since Ren-C is willing to rethink so much of Rebol, I was wondering why it didn’t rethink this as well.</p>
          <p><a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092/6</link>
        <pubDate>Fri, 05 Jan 2024 13:59:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2092-6</guid>
        <source url="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss">Why Have Both BLOCK! and GROUP!</source>
      </item>
      <item>
        <title>Why Have Both BLOCK! and GROUP!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>If I quote a group, I mean I want to quote the group, and I want it to look that way:</p>
<pre><code>&gt;&gt; append [a b c] (1 + 2)
== [a b c 3]

&gt;&gt; append [a b c] '(1 + 2)
== [a b c (1 + 2)]
</code></pre>
<p>And if I append a block, I want it to be appended that way (it will be whether I quote it or not, as the quote is discarded under evaluation in any case.. though in modern evaluation, any quoted material doesn't have its binding affected.)</p>
<pre><code>&gt;&gt; append [a b c] [1 + 2]
== [a b c [1 + 2]]

&gt;&gt; append [a b c] '[1 + 2]
== [a b c [1 + 2]]
</code></pre>
<p>This would only be obfuscated if blocks were a rendering trick for quoted groups... and it's not clear that quoted BLOCK! would be possible at all (or perhaps double quoted GROUP! wouldn't be possible).</p>
<p>And quoted blocks are useful (to this day, <a href="https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995/2">Red adherents don't understand what use a quoted BLOCK! would be</a>, since they don't think of blocks as "evaluating".)  But continuing the example above:</p>
<pre><code>&gt;&gt; parse [[A] (A) [A]] [some ['[A] (print "Block!") | '(A) (print "Group!")]]
Block!
Group!
Block!
== [A]
</code></pre>
<p>And more generally, it's useful to be able to quote something when you don't know whether it's evaluative or not, and are splicing it into a stream of evaluation, if you don't want evaluation.  Several sophisticated features in Ren-C and the API depend on the generalized ability to quote--even inert things.</p>
<aside class="quote no-group" data-username="bradrn" data-post="4" data-topic="2092">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>It would be pretty easy to define <code>[…]</code> as syntax sugar for <code>'(…)</code>. What I’m asking is: why was this pathway not chosen?</p>
</blockquote>
</aside>
<p>For background... historical Rebol/Red doesn't have any general concept of quoting at all.  It has LIT-WORD! and LIT-PATH!, that simply have the evaluative rule of producing WORD! and PATH! respectively.  Calling a BLOCK! a LIT-PAREN! and rendering it with brackets certainly didn't occur to anyone at that time.</p>
          <p><a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092/5</link>
        <pubDate>Fri, 05 Jan 2024 08:13:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2092-5</guid>
        <source url="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss">Why Have Both BLOCK! and GROUP!</source>
      </item>
      <item>
        <title>Why Have Both BLOCK! and GROUP!</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>Oh, I wasn’t asking about the specific syntax <code>[…]</code>. It would be pretty easy to define <code>[…]</code> as syntax sugar for <code>'(…)</code>. What I’m asking is: why was this pathway not chosen? What purpose does it serve to make ‘block’ a fundamentally different concept to ‘quoted group’?</p>
          <p><a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092/4</link>
        <pubDate>Fri, 05 Jan 2024 07:59:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2092-4</guid>
        <source url="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss">Why Have Both BLOCK! and GROUP!</source>
      </item>
      <item>
        <title>Why Have Both BLOCK! and GROUP!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Note: Ren-C <a href="https://forum.rebol.info/t/paren-group-and-none-null-or-blank/203">calls <strong><code>(...)</code></strong> a GROUP!</a> instead of a PAREN!)</em></p>
<hr>
<p>Rebol specifically leverages a lexically unique inert type of BLOCK! as part of its core language.</p>
<pre><code>if 1 &lt; 2 [print "Message"]
</code></pre>
<p>If there was only GROUP!, then you could get past this with quoting:</p>
<pre><code>if 1 &lt; 2 the (print "Like this")    ; Red/Rebol2 would use QUOTE here

if 1 &lt; 2 '(print "Or like this")    ; Red/Rebol2 don't have quoted GROUP!s
</code></pre>
<p>But that's not very nice looking, and it doesn't have the same visual cues to readers.  The inert and non-inert portions all look similar.  Plus it means you can't give alternate meanings to quoted groups.</p>
<p>Key to Rebol's value proposition is to give you a box of parts that you can apply how you wish in dialects.  Checking for things like <strong><code>[</code></strong> matching up with <strong><code>]</code></strong> and nesting properly with <strong><code>()</code></strong> is given to you for free.  And you can make them do different things.</p>
<p>Consider in PARSE, where BLOCK!s are used to group rules, and GROUP!s hold executable code:</p>
<pre><code>&gt;&gt; parse "aabab" [some ["a" (print "Found A") | "b" (print "Found B")]]
Found A
Found A
Found B
Found A
Found B
== "a"
</code></pre>
<p>And note that quoted groups (or quoted anything) have meaning for recognizing literally when parsing structure:</p>
<pre><code>&gt;&gt; parse [(A) (B) (A)] [some ['(A) (print "Found A") | '(B) (print "Found B")]]
Found A
Found B
Found A
== (A)
</code></pre>
<p>There's nothing you couldn't do here with fewer parts and being more verbose.  But a lot is lost.</p>
<pre><code>parse ... '(some '(literal (A) run (print "Found A") ...
</code></pre>
<p><em>"Beware of the <a href="https://en.wikipedia.org/wiki/Turing_tarpit">Turing tar-pit</a> in which everything is possible but nothing of interest is easy."</em></p>
<p>See also the quote from Douglas Crockford:</p>
<blockquote>
<p><em>"Rebol's a more modern language, but with some very similar ideas to LISP, in that it's all built upon a representation of data which is then executable as programs. But it's a much richer thing syntactically."</em></p>
<p><em>"Rebol is a brilliant language, and it's a shame it's not more popular, because it deserves to be."</em></p>
<p>—Douglas Crockford, founder of JSON, 2009 [<a href="https://youtu.be/-C-JoyNuQJs?t=1305">link</a>]</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092/3</link>
        <pubDate>Fri, 05 Jan 2024 07:55:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2092-3</guid>
        <source url="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss">Why Have Both BLOCK! and GROUP!</source>
      </item>
      <item>
        <title>Why Have Both BLOCK! and GROUP!</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>Maybe this is a stupid question, but here’s something I’ve been wondering about Rebol: since quoting exists, block!s feel a bit redundant. Something like <code>[a b c]</code> could just as easily be represented as <code>the (a b c)</code>. So, why do both exist?</p>
<p>Or, to put it another way, it feels like Rebol has two orthogonal concepts:</p>
<ul>
<li>Grouping: you can take a bunch of symbols and parenthesize them to get a group!</li>
<li>Quoting: you can take a value and quote it to prevent evaluation</li>
</ul>
<p>So it makes sense that you can combine these: <code>the (a b c)</code>. Except that Rebol doesn’t seem to take advantage of this fact at all — rather, it goes the opposite route, by creating a new data structure which conflates aspects of both of these.</p>
          <p><a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-both-block-and-group/2092/1</link>
        <pubDate>Fri, 05 Jan 2024 07:25:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2092-1</guid>
        <source url="https://forum.rebol.info/t/why-have-both-block-and-group/2092.rss">Why Have Both BLOCK! and GROUP!</source>
      </item>
  </channel>
</rss>
