<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Picking ACTION!s from BLOCK!s In The Age of Isotopes</title>
    <link>https://forum.rebol.info/t/picking-action-s-from-block-s-in-the-age-of-isotopes/2002</link>
    <description>In **[Red&#39;s Design Questions wiki](https://forum.rebol.info/t/reds-design-issues-wiki/1282)**, they bring up the issue of why picking functions out of blocks runs them:

    red&gt;&gt; block: reduce [does [print &quot;Evaluated.&quot;]]
      == [func [][print &quot;Evaluated.&quot;]]

    red&gt;&gt; equal? block/1 first block
    Evaluated.  ; d&#39;oh
    == false

[In the Gitter conversation](https://gitter.im/red/red?at=5c782ca0c1cab53d6f53dd6d), Boris calls it a &quot;shady area&quot; that they can&#39;t get out of &quot;under the current semantic model&quot;.  He suggests it is clear that **`block/1`** should not run an action, but possible that **block/word** would mean to.

They contemplate the idea that **block/1** would not run the action, but pick it:

    red&gt;&gt; block: reduce [does [print &quot;Evaluated.&quot;]]
      == [func [][print &quot;Evaluated.&quot;]]

    red&gt;&gt; equal? block/1 first block  ; hypothetical behavior
    == false

**I will argue this doesn&#39;t really help you much, the problem just becomes one step removed.**  Quite often people are picking things out of blocks to put them in variables, and you&#39;ll just get bit there instead:

    red&gt;&gt; otherblock: copy []
    == []

    red&gt;&gt; temp: block/1
    == func [][print &quot;Evaluated.&quot;]
    
    red&gt;&gt; append otherblock temp
    Evaluated.  ; d&#39;oh
    == [unset]  ; double d&#39;oh

## Isotopes Bring The Better Semantic Model!

In Ren-C&#39;s concept (as I&#39;m working on it), the only actions that will run from a word reference are those that are isotopic actions.  And FUNC or DOES creates an isotopic action.

So you would be stopped from making an illegal block up front:

    &gt;&gt; block: reduce [does [print &quot;Evaluated.&quot;]]
    ** Script Error: Invalid use of ~#[action! []]~ isotope

You can put quasi-ACTION!s, plain ACTION!s, and quoted actions in blocks.  Just not isotopic ones.

Whichever you choose, the equality test will work... and picking out a value into a variable will give you an inert variable to work with, that can be used with things like append!

    &gt;&gt; block: reduce [reify does [print &quot;Evaluated.&quot;]] 
    == [~#[action! []]~]

    &gt;&gt; equal? block.1 first block
    == ~true~  ; isotope  &lt;-- didn&#39;t run and print &quot;Evaluated&quot;, yay!

    &gt;&gt; otherblock: copy []
    == []

    red&gt;&gt; temp: block.1
    == ~#[action! []]~
    
    red&gt;&gt; append otherblock temp
    == [~#[action! []]~]   ; &lt;-- didn&#39;t run and gave sensible block out

I used REIFY there and got a quasi-action.  BUT which would you rather put in the block: a quasi-action or a plain one?  This depends on what you plan to do with the block.  A plain action will execute when encountered by the evaluator, while a quasi-action will evaluate to an isotopic action--suitable for assigning via SET-WORD! when you meant to make that word dispatch the function when referenced.

My leaning is to say that either form can be used with APPLY, RUN, or the terminal path form:

    &gt;&gt; block: reduce [reify does [print &quot;Evaluated.&quot;]] 
    == [~#[action! []]~]

    &gt;&gt; run block.1
    Evaluated.

    &gt;&gt; block: reduce [concretize does [print &quot;Evaluated.&quot;]] 
    == [#[action! []]]

    &gt;&gt; apply block.1 []
    Evaluated.

*(See post on [difference between REIFY and CONCRETIZE](https://forum.rebol.info/t/reify-vs-meta-vs-something/2001), and the search for a better term...)*

If you want to pick an action out of a block and put it into a variable, where it will execute from that variable, there is the RUNS transformer.  It will turn a quasi or plain ACTION! into an action isotope:

     &gt;&gt; active-var: runs block.1
     == ~#[action! {active-var} []]~  ; isotope  &lt;-- note: also cached name, neat!

     &gt;&gt; active-var
     Evaluated.

:clap: 

You can use UNMETA more generically to get an isotope back from any quasi-form (not just actions), or ISOTOPIC to get an isotope from a plain form.

## The Invariant Is What Counts, Here!

The mountain that has been climbed is that we can now say that for any block, this is true:

    block2: collect [
        for-each item block1 [keep item]
    ]

    assert [equal? block1 block2]

* I&#39;ve just covered that there are no isotopic actions to implicitly execute; you&#39;d get an error trying to put them in the block.

* There are no blocks/groups/paths that will splice into the target, because splicing requires an explicit conversion to an isotope.

* There are no &quot;unsets&quot; to trip on that you can find in a block, because the state conveying &quot;unsetness&quot; (nihil) is an isotope.

Of course with objects, it&#39;s going to be a different story.  I think we&#39;ll still want some safeguards:

    for-each [key value] object [...]  ; will error when value is action

    for-each [key :value] object [...]  ; will allow action isotopes as-is

    for-each [key ^value] object [...]  ; will give a meta value

A key problem here is I&#39;m wondering how much to cross purposes of GET-WORD! between action disarming and the other isotopic states.  But, it just takes time to work through.</description>
    
    <lastBuildDate>Fri, 06 Jan 2023 03:46:50 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/picking-action-s-from-block-s-in-the-age-of-isotopes/2002.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Picking ACTION!s from BLOCK!s In The Age of Isotopes</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In <strong><a href="https://forum.rebol.info/t/reds-design-issues-wiki/1282">Red's Design Questions wiki</a></strong>, they bring up the issue of why picking functions out of blocks runs them:</p>
<pre><code>red&gt;&gt; block: reduce [does [print "Evaluated."]]
  == [func [][print "Evaluated."]]

red&gt;&gt; equal? block/1 first block
Evaluated.  ; d'oh
== false
</code></pre>
<p><a href="https://gitter.im/red/red?at=5c782ca0c1cab53d6f53dd6d">In the Gitter conversation</a>, Boris calls it a "shady area" that they can't get out of "under the current semantic model".  He suggests it is clear that <strong><code>block/1</code></strong> should not run an action, but possible that <strong>block/word</strong> would mean to.</p>
<p>They contemplate the idea that <strong>block/1</strong> would not run the action, but pick it:</p>
<pre><code>red&gt;&gt; block: reduce [does [print "Evaluated."]]
  == [func [][print "Evaluated."]]

red&gt;&gt; equal? block/1 first block  ; hypothetical behavior
== false
</code></pre>
<p><strong>I will argue this doesn't really help you much, the problem just becomes one step removed.</strong>  Quite often people are picking things out of blocks to put them in variables, and you'll just get bit there instead:</p>
<pre><code>red&gt;&gt; otherblock: copy []
== []

red&gt;&gt; temp: block/1
== func [][print "Evaluated."]

red&gt;&gt; append otherblock temp
Evaluated.  ; d'oh
== [unset]  ; double d'oh
</code></pre>
<h2>Isotopes Bring The Better Semantic Model!</h2>
<p>In Ren-C's concept (as I'm working on it), the only actions that will run from a word reference are those that are isotopic actions.  And FUNC or DOES creates an isotopic action.</p>
<p>So you would be stopped from making an illegal block up front:</p>
<pre><code>&gt;&gt; block: reduce [does [print "Evaluated."]]
** Script Error: Invalid use of ~#[action! []]~ isotope
</code></pre>
<p>You can put quasi-ACTION!s, plain ACTION!s, and quoted actions in blocks.  Just not isotopic ones.</p>
<p>Whichever you choose, the equality test will work... and picking out a value into a variable will give you an inert variable to work with, that can be used with things like append!</p>
<pre><code>&gt;&gt; block: reduce [reify does [print "Evaluated."]] 
== [~#[action! []]~]

&gt;&gt; equal? block.1 first block
== ~true~  ; isotope  &lt;-- didn't run and print "Evaluated", yay!

&gt;&gt; otherblock: copy []
== []

red&gt;&gt; temp: block.1
== ~#[action! []]~

red&gt;&gt; append otherblock temp
== [~#[action! []]~]   ; &lt;-- didn't run and gave sensible block out
</code></pre>
<p>I used REIFY there and got a quasi-action.  BUT which would you rather put in the block: a quasi-action or a plain one?  This depends on what you plan to do with the block.  A plain action will execute when encountered by the evaluator, while a quasi-action will evaluate to an isotopic action--suitable for assigning via SET-WORD! when you meant to make that word dispatch the function when referenced.</p>
<p>My leaning is to say that either form can be used with APPLY, RUN, or the terminal path form:</p>
<pre><code>&gt;&gt; block: reduce [reify does [print "Evaluated."]] 
== [~#[action! []]~]

&gt;&gt; run block.1
Evaluated.

&gt;&gt; block: reduce [concretize does [print "Evaluated."]] 
== [#[action! []]]

&gt;&gt; apply block.1 []
Evaluated.
</code></pre>
<p><em>(See post on <a href="https://forum.rebol.info/t/reify-vs-meta-vs-something/2001">difference between REIFY and CONCRETIZE</a>, and the search for a better term...)</em></p>
<p>If you want to pick an action out of a block and put it into a variable, where it will execute from that variable, there is the RUNS transformer.  It will turn a quasi or plain ACTION! into an action isotope:</p>
<pre><code> &gt;&gt; active-var: runs block.1
 == ~#[action! {active-var} []]~  ; isotope  &lt;-- note: also cached name, neat!

 &gt;&gt; active-var
 Evaluated.
</code></pre>
<p><img src="https://forum.rebol.info/images/emoji/twitter/clap.png?v=9" title=":clap:" class="emoji only-emoji" alt=":clap:"></p>
<p>You can use UNMETA more generically to get an isotope back from any quasi-form (not just actions), or ISOTOPIC to get an isotope from a plain form.</p>
<h2>The Invariant Is What Counts, Here!</h2>
<p>The mountain that has been climbed is that we can now say that for any block, this is true:</p>
<pre><code>block2: collect [
    for-each item block1 [keep item]
]

assert [equal? block1 block2]
</code></pre>
<ul>
<li>
<p>I've just covered that there are no isotopic actions to implicitly execute; you'd get an error trying to put them in the block.</p>
</li>
<li>
<p>There are no blocks/groups/paths that will splice into the target, because splicing requires an explicit conversion to an isotope.</p>
</li>
<li>
<p>There are no "unsets" to trip on that you can find in a block, because the state conveying "unsetness" (nihil) is an isotope.</p>
</li>
</ul>
<p>Of course with objects, it's going to be a different story.  I think we'll still want some safeguards:</p>
<pre><code>for-each [key value] object [...]  ; will error when value is action

for-each [key :value] object [...]  ; will allow action isotopes as-is

for-each [key ^value] object [...]  ; will give a meta value
</code></pre>
<p>A key problem here is I'm wondering how much to cross purposes of GET-WORD! between action disarming and the other isotopic states.  But, it just takes time to work through.</p>
          <p><a href="https://forum.rebol.info/t/picking-action-s-from-block-s-in-the-age-of-isotopes/2002/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/picking-action-s-from-block-s-in-the-age-of-isotopes/2002/1</link>
        <pubDate>Fri, 06 Jan 2023 03:16:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2002-1</guid>
        <source url="https://forum.rebol.info/t/picking-action-s-from-block-s-in-the-age-of-isotopes/2002.rss">Picking ACTION!s from BLOCK!s In The Age of Isotopes</source>
      </item>
  </channel>
</rss>
