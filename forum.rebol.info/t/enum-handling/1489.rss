<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&#39;Enum&#39; Handling</title>
    <link>https://forum.rebol.info/t/enum-handling/1489</link>
    <description>I&#39;m curious what the current best practice is for handling &#39;enum&#39;-like scenarios.

For my contrived example, I have an ORDER-FOOD function where you pick your dish, and that dish comes with onions.

```plain
order: func [
    &#39;dish [word!]
    /sub &#39;veggie [word!]
][
    ...
]
```

You can substitute onions for one other vegetable, but obviously I only have so many vegetables at a given time, so I&#39;d like to be sure that you either get onions or another available vegetable.

```plain
order enchiladas
order/sub burrito mushrooms
```

First thought is using `&#39;default`:

```plain
veggie: default [&#39;onions]
```

That&#39;s fine so long as I have what the given vegetable is. What if I only have `[onions zucchini artichoke carrot]`?

There is the FIND approach:

```plain
if not find veggie-box veggie [
    veggie: onions
]
```

Then again, I&#39;m always mindful of CSS&#39;s: *if it doesn&#39;t exist, ignore it*. This approach has allowed CSS to adapt as new methodologies exist. How `display` that has been around for as long as I can recall gains a `grid` value that permits all kinds of heretofore layout possibilities. Any browser out there that doesn&#39;t know what `grid` means will happily display content as if it was whatever the call to `grid` replaced. Similarly, all the properties associated with grid layout are just ignored by older browsers.

Not quite sure how that maps to my function, but it&#39;d be interesting to say:

```plain
any [
    order/sub bibimbap bok-choy
    order/sub bibimbap carrot
    order burger
]
```

In the event of its availability one day, that I may have that fresh crunchy cabbage.</description>
    
    <lastBuildDate>Sun, 29 Sep 2024 00:57:51 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/enum-handling/1489.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&#39;Enum&#39; Handling</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="1489">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>If you say <strong><code>~[]~</code></strong> and <strong><code>'pizza</code></strong> are in this context "types" that hold single elements, then you could argue that this is "unioning types".</p>
</blockquote>
</aside>
<p>Yep, precisely. Representing enumerations as unions of singleton types is normal practice in languages with this sort of type system (e.g. TypeScript). Ren-C doesn’t have any true type system, but the idea here is similar.</p>
          <p><a href="https://forum.rebol.info/t/enum-handling/1489/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enum-handling/1489/7</link>
        <pubDate>Sun, 29 Sep 2024 00:57:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1489-7</guid>
        <source url="https://forum.rebol.info/t/enum-handling/1489.rss">&#39;Enum&#39; Handling</source>
      </item>
      <item>
        <title>&#39;Enum&#39; Handling</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Sort of?  If you say <strong><code>~[]~</code></strong> and <strong><code>'pizza</code></strong> are in this context "types" that hold single elements, then you could argue that this is "unioning types".  (quasiforms match the antiform, quoteds match one quote level dropped...so you can quote a quasi to match a quasi literally)</p>
<p>With FENCE! I think we'll have enough parts to make <strong><code>&amp;(integer)</code></strong> a fundamental type, which will free up <strong><code>&amp;[...]</code></strong> for using TYPE-BLOCK! to declare "union types"... you have this ability to go outside the WORD! space if you want to:</p>
<pre><code>any-topping!: &amp;['pepperoni 'onions 'olives 'tomatoes '&lt;no-sauce&gt;]
</code></pre>
<p>Then maybe <strong><code>&amp;{...}</code></strong> could be "intersection types".  <strong><code>&amp;{even? integer!}</code></strong></p>
<p>I was thinking numbers might mean length of.  <strong><code>&amp;{3 block!}</code></strong></p>
<p>This is a cleaner version of what was originally proposed for the <a href="https://forum.rebol.info/t/time-to-meet-your-match-dialect/1009">MATCH dialect</a>.  Maybe it's the TYPECHECK dialect (or simply, CHECK ?), and MATCH should be taken for DESTRUCTURE.</p>
<pre><code>&gt;&gt; check [integer! tag!] 3
== 3

&gt;&gt; check [integer! tag!] "hello"
== ~null~  ; anti

&gt;&gt; check [~null~ integer!] null
** Error: use CHECK/META for testing keyword states

&gt;&gt; check/meta [~null~ integer!] null
== ~null~

&gt;&gt; check/meta [~null~ integer!] "hello"
== ~null~  ; anti

&gt;&gt; non integer! "hello"
== "hello"

&gt;&gt; non integer! 3
== ~null~  ; anti

&gt;&gt; ensure integer! 3
== 3

&gt;&gt; ensure integer! "hello"
** Error: "hello" is not &amp;(integer)

&gt;&gt; prohibit integer! "hello"
== "hello"

&gt;&gt; prohibit integer! 3
== Error: 3 is &amp;(integer)
</code></pre>
<p>Overall, what this is going to permit with dialected chains looks very promising, e.g. typechecking <strong><code>[{block! all:word?}]</code></strong>.</p>
          <p><a href="https://forum.rebol.info/t/enum-handling/1489/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enum-handling/1489/6</link>
        <pubDate>Sat, 28 Sep 2024 13:58:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1489-6</guid>
        <source url="https://forum.rebol.info/t/enum-handling/1489.rss">&#39;Enum&#39; Handling</source>
      </item>
      <item>
        <title>&#39;Enum&#39; Handling</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1489">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So we're pretty close to generalizing enumerated types...to include values that aren't just words!</p>
</blockquote>
</aside>
<p>The usual term for this is a ‘union type’.</p>
          <p><a href="https://forum.rebol.info/t/enum-handling/1489/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enum-handling/1489/5</link>
        <pubDate>Sat, 28 Sep 2024 02:11:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1489-5</guid>
        <source url="https://forum.rebol.info/t/enum-handling/1489.rss">&#39;Enum&#39; Handling</source>
      </item>
      <item>
        <title>&#39;Enum&#39; Handling</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So we now have a bit more interesting fundamentals to power enums, because typecheck supports arbitrary quoting:</p>
<pre><code>order: func [
    'dish ['burrito 'taco]  ; plain arg, literal
   ':sub ['onions 'salsa]  ; new refinement, literal
][
    ...
]
</code></pre>
<p>The MATCH primitive supports the same format as type spec blocks, and you can match any literal thing:</p>
<pre><code>&gt;&gt; match ['foo 'bar '[x y]] 
== [x y]

&gt;&gt; match ['foo 'bar '[x y]] [y x]
== ~null~  ; anti
</code></pre>
<p>There also is ENSURE for erroring if something is a MATCH, and NON which passes through only values that don't match.</p>
<p>So we're pretty close to generalizing enumerated types...to include values that aren't just words!</p>
<aside class="quote no-group quote-modified" data-username="rgchris" data-post="3" data-topic="1489">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1489">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The only enum-oriented thought I'd had was that WORD!s were a bit awkward to use for inert data, because if you forgot to quote them they would execute...</p>
</blockquote>
</aside>
<p>While that is a fear, I'd still lean to vanilla words as first class currency.</p>
</blockquote>
</aside>
<p>You are probably right.  But the good news is that in the generalization it doesn't matter.</p>
<p>But plain words are better in the enum spec as <strong><code>'word</code></strong> than having to say <strong><code>'@word</code></strong></p>
          <p><a href="https://forum.rebol.info/t/enum-handling/1489/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enum-handling/1489/4</link>
        <pubDate>Fri, 27 Sep 2024 19:55:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1489-4</guid>
        <source url="https://forum.rebol.info/t/enum-handling/1489.rss">&#39;Enum&#39; Handling</source>
      </item>
      <item>
        <title>&#39;Enum&#39; Handling</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1489">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I don't know if you remember, but I wrote about developing an enum type as the first Rebol involvement, long ago:</p>
</blockquote>
</aside>
<p>I do. I figured that it'd be curious to follow up on that.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1489">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Well, we can just add working through more real examples into the infinite queue</p>
</blockquote>
</aside>
<p>I was contemplating what to cook when putting this one together. I had forgotten that you'd used fruit in your original post.</p>
<p>Am actually contemplating a codec where there are several modes of decoding, e.g. [tokens sections document] but more possible.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1489">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The only enum-oriented thought I'd had was that WORD!s were a bit awkward to use for inert data, because if you forgot to quote them they would execute...</p>
</blockquote>
</aside>
<p>While that is a fear, I'd still lean to vanilla words as first class currency.</p>
          <p><a href="https://forum.rebol.info/t/enum-handling/1489/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enum-handling/1489/3</link>
        <pubDate>Sun, 07 Feb 2021 04:31:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1489-3</guid>
        <source url="https://forum.rebol.info/t/enum-handling/1489.rss">&#39;Enum&#39; Handling</source>
      </item>
      <item>
        <title>&#39;Enum&#39; Handling</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I don't know if you remember, but I wrote about developing an enum type as the first Rebol involvement, long ago:</p>
<p><a href="http://blog.hostilefork.com/enumerated-type-for-rebol2/">"An Enumerated Type for Rebol2"</a></p>
<p>I'd have to think more about what my opinions on enums are these days.</p>
<p>The only enum-oriented thought I'd had was that WORD!s were a bit awkward to use for inert data, because if you forgot to quote them they would execute...and you didn't want them to.  This made me think that when you were passing around things meant to serve as an identity you would use something else... e.g. an <strong><code>#issue</code></strong>.</p>
<p>With issues being stringlike, there's a bit more overhead to their comparison...which means words are faster to compare symbolically.  This is part of why I thought <strong><code>@word</code></strong> could be useful, if it didn't have evaluator behavior.</p>
<p>Things have gotten murkier since...as alternate usages for @(...) have come up.  But also, COMPOSE having features like being able to add ticks on composed things makes it a bit easier to preserve enum-ness:</p>
<pre><code> &gt;&gt; veggie: 'onions

 &gt;&gt; compose [x: '(veggie)]
 == [x: 'onions]
</code></pre>
<p>Well, we can just add working through more real examples into the infinite queue...</p>
          <p><a href="https://forum.rebol.info/t/enum-handling/1489/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enum-handling/1489/2</link>
        <pubDate>Sat, 06 Feb 2021 21:43:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1489-2</guid>
        <source url="https://forum.rebol.info/t/enum-handling/1489.rss">&#39;Enum&#39; Handling</source>
      </item>
      <item>
        <title>&#39;Enum&#39; Handling</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I'm curious what the current best practice is for handling 'enum'-like scenarios.</p>
<p>For my contrived example, I have an ORDER-FOOD function where you pick your dish, and that dish comes with onions.</p>
<pre><code class="lang-plaintext">order: func [
    'dish [word!]
    /sub 'veggie [word!]
][
    ...
]
</code></pre>
<p>You can substitute onions for one other vegetable, but obviously I only have so many vegetables at a given time, so I'd like to be sure that you either get onions or another available vegetable.</p>
<pre><code class="lang-plaintext">order enchiladas
order/sub burrito mushrooms
</code></pre>
<p>First thought is using <code>'default</code>:</p>
<pre><code class="lang-plaintext">veggie: default ['onions]
</code></pre>
<p>That's fine so long as I have what the given vegetable is. What if I only have <code>[onions zucchini artichoke carrot]</code>?</p>
<p>There is the FIND approach:</p>
<pre><code class="lang-plaintext">if not find veggie-box veggie [
    veggie: onions
]
</code></pre>
<p>Then again, I'm always mindful of CSS's: <em>if it doesn't exist, ignore it</em>. This approach has allowed CSS to adapt as new methodologies exist. How <code>display</code> that has been around for as long as I can recall gains a <code>grid</code> value that permits all kinds of heretofore layout possibilities. Any browser out there that doesn't know what <code>grid</code> means will happily display content as if it was whatever the call to <code>grid</code> replaced. Similarly, all the properties associated with grid layout are just ignored by older browsers.</p>
<p>Not quite sure how that maps to my function, but it'd be interesting to say:</p>
<pre><code class="lang-plaintext">any [
    order/sub bibimbap bok-choy
    order/sub bibimbap carrot
    order burger
]
</code></pre>
<p>In the event of its availability one day, that I may have that fresh crunchy cabbage.</p>
          <p><a href="https://forum.rebol.info/t/enum-handling/1489/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enum-handling/1489/1</link>
        <pubDate>Fri, 05 Feb 2021 23:35:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1489-1</guid>
        <source url="https://forum.rebol.info/t/enum-handling/1489.rss">&#39;Enum&#39; Handling</source>
      </item>
  </channel>
</rss>
