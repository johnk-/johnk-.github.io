<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Arrays For Composite Types</title>
    <link>https://forum.rebol.info/t/arrays-for-composite-types/1979</link>
    <description>## First, There Was Quote &quot;Protection&quot;...

An operating premise has been that this would be bad:

    &gt;&gt; (type of first [&#39;&#39;a]) = (type of first [&#39;&#39;&#39;&#39;(x y z)])
    == #[true]

You&#39;ve got a double-quoted word going in on the left, and a quadruply-quoted group going in on the right.  They&#39;re both instances of QUOTED! but is it in any way useful to say they&#39;re the same type?

Of course, we do this with BLOCK! and don&#39;t blink:

    &gt;&gt; (type of [[a]]) = (type of [[[[(x y z)]]]])
    == #[true]

We only look at the outermost container.

But following precedent from where LIT-PATH! and LIT-WORD! were seen as different types, the concept of folding not just quotedness but the actual quoting level into the type arose.

At first, Ren-C did a fairly cheap thing, by quoting the answer of TYPE OF by the number of quotes:

    &gt;&gt; type of first [a]
    == #[datatype! word!]

    &gt;&gt; type of first [&#39;&#39;a]
    == &#39;&#39;#[datatype! word!]

**But that won&#39;t be recognized as a DATATYPE!, because it&#39;s a QUOTED!**

This matters if you try something like:

    &gt;&gt; quoted-word!: first [&#39;&#39;#[datatype! word!]]

    &gt;&gt; did parse [&#39;&#39;a] [quoted-word!]
    == #[false]

    &gt;&gt; did parse [&#39;#[datatype! word!]] [quoted-word!]
    == #[true]

The problem here is that PARSE already has an idea of how it handles QUOTED!s, e.g. to match something that is one quoting level lower than that thing.  So this quoted datatype isn&#39;t acting how you intended.

## So I Suggested Arrays To Wrap Quoted Types

When the idea of using &amp;[...] arrays to represent types came along, I suggested this could be a solution:

    &gt;&gt; type of first [a]
    == &amp;[word]

    &gt;&gt; type of first [&#39;&#39;a]
    == &amp;[&#39;&#39;word]

This gives us the nice properties we want of making these distinct &quot;types&quot; for purposes of comparison, while still both being of the same fundamental type for purposes of dispatch.

## Might Type Arrays Have Other Parameters?

We could ask if all of these type arrays are just one element long--where that element is always a WORD!, quoted WORD!, or quasi WORD!...

Or might they have other parameters in them?  Would a vector say what they were vectors of:

     &gt;&gt; type of vec
     == &amp;[vector int32]

Would a matrix have its dimensions?

    &gt;&gt; type of mat
    == &amp;[matrix (32 32)]

I&#39;ve suggested that the narrower question of KIND might come back with a simpler answer:

    &gt;&gt; kind of mat
    == &amp;matrix</description>
    
    <lastBuildDate>Mon, 26 Sep 2022 10:08:38 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/arrays-for-composite-types/1979.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Arrays For Composite Types</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>First, There Was Quote "Protection"...</h2>
<p>An operating premise has been that this would be bad:</p>
<pre><code>&gt;&gt; (type of first [''a]) = (type of first [''''(x y z)])
== #[true]
</code></pre>
<p>You've got a double-quoted word going in on the left, and a quadruply-quoted group going in on the right.  They're both instances of QUOTED! but is it in any way useful to say they're the same type?</p>
<p>Of course, we do this with BLOCK! and don't blink:</p>
<pre><code>&gt;&gt; (type of [[a]]) = (type of [[[[(x y z)]]]])
== #[true]
</code></pre>
<p>We only look at the outermost container.</p>
<p>But following precedent from where LIT-PATH! and LIT-WORD! were seen as different types, the concept of folding not just quotedness but the actual quoting level into the type arose.</p>
<p>At first, Ren-C did a fairly cheap thing, by quoting the answer of TYPE OF by the number of quotes:</p>
<pre><code>&gt;&gt; type of first [a]
== #[datatype! word!]

&gt;&gt; type of first [''a]
== ''#[datatype! word!]
</code></pre>
<p><strong>But that won't be recognized as a DATATYPE!, because it's a QUOTED!</strong></p>
<p>This matters if you try something like:</p>
<pre><code>&gt;&gt; quoted-word!: first [''#[datatype! word!]]

&gt;&gt; did parse [''a] [quoted-word!]
== #[false]

&gt;&gt; did parse ['#[datatype! word!]] [quoted-word!]
== #[true]
</code></pre>
<p>The problem here is that PARSE already has an idea of how it handles QUOTED!s, e.g. to match something that is one quoting level lower than that thing.  So this quoted datatype isn't acting how you intended.</p>
<h2>So I Suggested Arrays To Wrap Quoted Types</h2>
<p>When the idea of using &amp;[...] arrays to represent types came along, I suggested this could be a solution:</p>
<pre><code>&gt;&gt; type of first [a]
== &amp;[word]

&gt;&gt; type of first [''a]
== &amp;[''word]
</code></pre>
<p>This gives us the nice properties we want of making these distinct "types" for purposes of comparison, while still both being of the same fundamental type for purposes of dispatch.</p>
<h2>Might Type Arrays Have Other Parameters?</h2>
<p>We could ask if all of these type arrays are just one element long--where that element is always a WORD!, quoted WORD!, or quasi WORD!...</p>
<p>Or might they have other parameters in them?  Would a vector say what they were vectors of:</p>
<pre><code> &gt;&gt; type of vec
 == &amp;[vector int32]
</code></pre>
<p>Would a matrix have its dimensions?</p>
<pre><code>&gt;&gt; type of mat
== &amp;[matrix (32 32)]
</code></pre>
<p>I've suggested that the narrower question of KIND might come back with a simpler answer:</p>
<pre><code>&gt;&gt; kind of mat
== &amp;matrix</code></pre>
          <p><a href="https://forum.rebol.info/t/arrays-for-composite-types/1979/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/arrays-for-composite-types/1979/1</link>
        <pubDate>Sun, 25 Sep 2022 00:48:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1979-1</guid>
        <source url="https://forum.rebol.info/t/arrays-for-composite-types/1979.rss">Arrays For Composite Types</source>
      </item>
  </channel>
</rss>
