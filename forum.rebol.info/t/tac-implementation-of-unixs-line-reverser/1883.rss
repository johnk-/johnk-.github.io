<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>`tac` : Implementation of UNIX&#39;s line reverser</title>
    <link>https://forum.rebol.info/t/tac-implementation-of-unixs-line-reverser/1883</link>
    <description>I mentioned I wanted to study some basic utilities...even more basic than [greb](https://forum.rebol.info/t/greb-grep-using-parse/1818).  Small codebases can put a focus on big design points.

Here was my off-the-cuff line-reverser (TAC ... reverse CAT, where CAT is like Windows Command Shell&#39;s TYPE).  I wrote it a year ago, while I was solely focused on getting READ-LINE to work from piped input cross platform at the time...so almost no thought went into it:

    ; %tac.r, version 0.0.1
    ;
    ; * COLLECT the lines
    ; * REVERSE the collection
    ; * output the result DELIMIT-ed with newline
    ;
    write-stdout try delimit/tail newline reverse collect [
        until [not keep line: try read-line]
    ]

*Right off the bat, you can see it&#39;s using twice the memory it needs to.*   It&#39;s collecting a block of strings, and then while that whole block is in memory it merges it into one giant string before output.  At minimum, this should loop and write the strings out of the block out one at a time.  (Though doing it this way does draw attention to an interesting point about DELIMIT, which I&#39;ll get to later.)

&gt; Note: This line-reversing task is one of those pathological cases that can&#39;t be done in a &quot;streaming&quot; way.  You can&#39;t start writing anything to the output until you&#39;ve read the input to the end.  (Doing better needs a random-access I/O PORT! that can SEEK the end of the file and go backwards...but the standard input device can&#39;t do this.)

## But First Things First: The Impact of [the New TRY Rules](https://forum.rebol.info/t/definitional-errors-as-blank-in-null-out-alternative/1880)

Recall that the old behavior was that TRY would turn NULL into BLANK! in order to stop functions from raising an error on those NULLs.  So here:

* we&#39;d stop KEEP from failing when there are no more lines to READ-LINE from, so it acts as a no-op instead

* we&#39;d stop WRITE-STDOUT from failing when an empty block is collected and DELIMIT returns NULL:

      write-stdout try delimit/tail newline reverse collect [  ; TRY DELIMIT =&gt; BLANK!
        until [not keep line: try read-line]  ; TRY READ-LINE =&gt; BLANK!
      ]

The new way :sparkles: is you go ahead and pass the NULL, and the function raises a very narrow error.  This error is caught by a TRY on the function call itself.

So applying that transformation:

    try write-stdout delimit/tail newline reverse collect [  ; TRY WRITE-STDOUT =&gt; NULL
        until [not try keep line: read-line]  ; TRY KEEP =&gt; NULL
    ]

## Why Does DELIMIT Ever Return NULL ?

One might ask if it should never be able to return NULL when you use /TAIL.  At the moment, it does:

    &gt;&gt; delimit/tail &quot;,&quot; [&quot;a&quot; &quot;b&quot;]
    == &quot;a,b,&quot;

    &gt;&gt; delimit []
    ; null

    &gt;&gt; delimit/tail &quot;,&quot; []
    ; null

Maybe that last one should be &quot;,&quot; ?  Perhaps when you have /HEAD or /TAIL, you never get null back.

But... let&#39;s stick to looking at the use cases.

## What Does %tac.r Want From DELIMIT/TAIL Here?

If we look at the edge case here, there is a difference between these two situations:

* The first call to READ-LINE returns an empty string, and the second call returns NULL

    * This happens when you pipe in a 1-byte file containing a single line feed, e.g. a file containing one line that&#39;s empty.

    * With the code above, COLLECT produces the block **`[&quot;&quot;]`** for this case

* The first call to READ-LINE returns NULL

    * This happens when you pipe in a 0-byte file, e.g. a file containing no lines at all

    * With the code above, COLLECT produces the block **`[]`** for this case.

**So perhaps you see why DELIMIT chooses to react with some kind of signal when the block contents vaporize.**  It&#39;s precisely because cases like this tend to need some kind of special handling, and it&#39;s not good to gloss over that.

In this case, the empty block (which corresponds to the 0-byte file input, e.g. 0 lines) should result in there being no write to the output.  So the default behavior of TRY WRITE-STDOUT NULL is the right answer.

## More to Study, I Just Thought That Bit Was Interesting...

---
&gt; *&quot;There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.&quot;*</description>
    
    <lastBuildDate>Sat, 16 Jul 2022 04:25:03 +0000</lastBuildDate>
    <category>System Tools</category>
    <atom:link href="https://forum.rebol.info/t/tac-implementation-of-unixs-line-reverser/1883.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>`tac` : Implementation of UNIX&#39;s line reverser</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I mentioned I wanted to study some basic utilities...even more basic than <a href="https://forum.rebol.info/t/greb-grep-using-parse/1818">greb</a>.  Small codebases can put a focus on big design points.</p>
<p>Here was my off-the-cuff line-reverser (TAC ... reverse CAT, where CAT is like Windows Command Shell's TYPE).  I wrote it a year ago, while I was solely focused on getting READ-LINE to work from piped input cross platform at the time...so almost no thought went into it:</p>
<pre><code>; %tac.r, version 0.0.1
;
; * COLLECT the lines
; * REVERSE the collection
; * output the result DELIMIT-ed with newline
;
write-stdout try delimit/tail newline reverse collect [
    until [not keep line: try read-line]
]
</code></pre>
<p><em>Right off the bat, you can see it's using twice the memory it needs to.</em>   It's collecting a block of strings, and then while that whole block is in memory it merges it into one giant string before output.  At minimum, this should loop and write the strings out of the block out one at a time.  (Though doing it this way does draw attention to an interesting point about DELIMIT, which I'll get to later.)</p>
<blockquote>
<p>Note: This line-reversing task is one of those pathological cases that can't be done in a "streaming" way.  You can't start writing anything to the output until you've read the input to the end.  (Doing better needs a random-access I/O PORT! that can SEEK the end of the file and go backwards...but the standard input device can't do this.)</p>
</blockquote>
<h2>But First Things First: The Impact of <a href="https://forum.rebol.info/t/definitional-errors-as-blank-in-null-out-alternative/1880">the New TRY Rules</a>
</h2>
<p>Recall that the old behavior was that TRY would turn NULL into BLANK! in order to stop functions from raising an error on those NULLs.  So here:</p>
<ul>
<li>
<p>we'd stop KEEP from failing when there are no more lines to READ-LINE from, so it acts as a no-op instead</p>
</li>
<li>
<p>we'd stop WRITE-STDOUT from failing when an empty block is collected and DELIMIT returns NULL:</p>
<pre><code>write-stdout try delimit/tail newline reverse collect [  ; TRY DELIMIT =&gt; BLANK!
  until [not keep line: try read-line]  ; TRY READ-LINE =&gt; BLANK!
]
</code></pre>
</li>
</ul>
<p>The new way <img src="https://forum.rebol.info/images/emoji/twitter/sparkles.png?v=9" title=":sparkles:" class="emoji" alt=":sparkles:"> is you go ahead and pass the NULL, and the function raises a very narrow error.  This error is caught by a TRY on the function call itself.</p>
<p>So applying that transformation:</p>
<pre><code>try write-stdout delimit/tail newline reverse collect [  ; TRY WRITE-STDOUT =&gt; NULL
    until [not try keep line: read-line]  ; TRY KEEP =&gt; NULL
]
</code></pre>
<h2>Why Does DELIMIT Ever Return NULL ?</h2>
<p>One might ask if it should never be able to return NULL when you use /TAIL.  At the moment, it does:</p>
<pre><code>&gt;&gt; delimit/tail "," ["a" "b"]
== "a,b,"

&gt;&gt; delimit []
; null

&gt;&gt; delimit/tail "," []
; null
</code></pre>
<p>Maybe that last one should be "," ?  Perhaps when you have /HEAD or /TAIL, you never get null back.</p>
<p>But... let's stick to looking at the use cases.</p>
<h2>What Does %tac.r Want From DELIMIT/TAIL Here?</h2>
<p>If we look at the edge case here, there is a difference between these two situations:</p>
<ul>
<li>
<p>The first call to READ-LINE returns an empty string, and the second call returns NULL</p>
<ul>
<li>
<p>This happens when you pipe in a 1-byte file containing a single line feed, e.g. a file containing one line that's empty.</p>
</li>
<li>
<p>With the code above, COLLECT produces the block <strong><code>[""]</code></strong> for this case</p>
</li>
</ul>
</li>
<li>
<p>The first call to READ-LINE returns NULL</p>
<ul>
<li>
<p>This happens when you pipe in a 0-byte file, e.g. a file containing no lines at all</p>
</li>
<li>
<p>With the code above, COLLECT produces the block <strong><code>[]</code></strong> for this case.</p>
</li>
</ul>
</li>
</ul>
<p><strong>So perhaps you see why DELIMIT chooses to react with some kind of signal when the block contents vaporize.</strong>  It's precisely because cases like this tend to need some kind of special handling, and it's not good to gloss over that.</p>
<p>In this case, the empty block (which corresponds to the 0-byte file input, e.g. 0 lines) should result in there being no write to the output.  So the default behavior of TRY WRITE-STDOUT NULL is the right answer.</p>
<h2>More to Study, I Just Thought That Bit Was Interesting...</h2>
<hr>
<blockquote>
<p><em>"There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult."</em></p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/tac-implementation-of-unixs-line-reverser/1883/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tac-implementation-of-unixs-line-reverser/1883/1</link>
        <pubDate>Sat, 16 Jul 2022 04:16:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1883-1</guid>
        <source url="https://forum.rebol.info/t/tac-implementation-of-unixs-line-reverser/1883.rss">`tac` : Implementation of UNIX&#39;s line reverser</source>
      </item>
  </channel>
</rss>
