<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>FIND and SELECT polymorphism</title>
    <link>https://forum.rebol.info/t/find-and-select-polymorphism/1879</link>
    <description>In Rebol2, you can run FIND on OBJECT! as well as on BLOCK!:

    rebol2&gt;&gt; obj: make object! [a: 10 b: 20]

    rebol2&gt;&gt; find obj &#39;a
    == true

    rebol2&gt;&gt; find obj &#39;asdf
    == false

I&#39;ll point out that [Red does not support FIND on OBJECT!, and that was intentional](https://github.com/red/red/commit/7b1eeb76a6eb2c5c31e8407637fea5664ace61c2).   There&#39;s [no real explanation](https://gitter.im/red/red?at=5f134373564e6b39f5655c0f) other than than something approximating *&quot;objects and bitsets don&#39;t support a lot of series operations because they don&#39;t necessarily make sense&quot;*. 

But Red allows FIND on maps, for some reason?

    red&gt;&gt; m: make map! [a 10]
    == #(
        a: 10
    )

    red&gt;&gt; find m &#39;a
    == a

### Is This A Polymorphism You Can Even Use?

There&#39;s no real clarity in OBJECT!/BLOCK! duality.  [I&#39;ve tried to invent some out of the murk, but come up short.](https://forum.rebol.info/t/block-and-object-parity-in-pathing-picking/1086)

We might ask ourselves:

**Has there ever been a situation where you&#39;ve had something--you didn&#39;t know what it was, either an OBJECT! or a BLOCK!--and your generic code can meaningfully use a FIND call on that thing?**

I can&#39;t imagine the answer to that is yes.  :roll_eyes: 

BUT... what about something you didn&#39;t know if it was an OBJECT! or a MAP! ?

You can pass a WORD! to IN for an OBJECT!, and get either a bound word back in that object or NULL.  But you can&#39;t use IN on a MAP.

So the only polymorphic operators you can use to determine if something is in either an OBJECT! or a MAP! these days are FIND and SELECT.  Ren-C has the advantage that SELECT returns NULL if-and-only-if something isn&#39;t in a map or object, so even if you don&#39;t need the selected item you can use it.

### *Some* Line Of Argumentation Might Support Rebol2&#39;s Behavior

To truly generalize FIND, you could consider it to be with respect to an iterator... e.g. [how C++&#39;s find works](https://en.cppreference.com/w/cpp/algorithm/find).

We might then look to FOR-EACH to see what it would give you if you asked it for a generic &quot;something&quot;.  R3-Alpha supports this (not Rebol2 or Red):

    r3-alpha&gt;&gt; obj: make object! [a: 10 b: 20]

    r3-alpha&gt;&gt; foreach something obj [print mold something]
    a
    b

So maybe if all of that was built on some common infrastructure, you could build a rationale for why searching keys-only made sense for FIND in an object.

*But it&#39;s not built on any common infrastructure, so it&#39;s just extra random code.*

### Moreover, what About BITSET! ?

Above I made a potential case for seeing FIND as applying to the keys of an object.  But... BITSET!?

If you say **bs: make bitset! 8** and then **bs.4: true**, you&#39;re making something kind of like a block:

    [0 0 0 1 0 0 0 0]

So semantically, why would **find bs 4** be true?  Where&#39;s the 4? 

I think what this really is more like is a positional PICK *(which makes sense because **bs.4: true** is running the code **poke bs 4 true**, and **bs.4** acts as **pick bs 4**)*

But..it may be a potentially interesting polymorphism to think of a bitset as a mapping from integers to LOGIC!.  You might swap in something that is using a BITSET! to use a MAP!.  So SELECT with integer *could* be coherent here.

I think PICK is the best choice, though.

### Anyway...I&#39;m removing FIND on Maps/Objects/Bitsets for Now...

For the moment, I think that **did select** or **didn&#39;t select** are the best invariant ways of detecting if things are in objects or maps.   (Or use with ELSE/THEN)

This leaves FIND as something that might be more dialected, with options that let you search the values and not just the keys (maybe search deeply?)

Also it saves us from returning the kind of hokey idea of &quot;true or null&quot;.  I&#39;m suspicious of most functions that are in situations where they only return true or null, anyway.</description>
    
    <lastBuildDate>Thu, 14 Jul 2022 03:01:23 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/find-and-select-polymorphism/1879.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>FIND and SELECT polymorphism</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In Rebol2, you can run FIND on OBJECT! as well as on BLOCK!:</p>
<pre><code>rebol2&gt;&gt; obj: make object! [a: 10 b: 20]

rebol2&gt;&gt; find obj 'a
== true

rebol2&gt;&gt; find obj 'asdf
== false
</code></pre>
<p>I'll point out that <a href="https://github.com/red/red/commit/7b1eeb76a6eb2c5c31e8407637fea5664ace61c2">Red does not support FIND on OBJECT!, and that was intentional</a>.   There's <a href="https://gitter.im/red/red?at=5f134373564e6b39f5655c0f">no real explanation</a> other than than something approximating <em>"objects and bitsets don't support a lot of series operations because they don't necessarily make sense"</em>.</p>
<p>But Red allows FIND on maps, for some reason?</p>
<pre><code>red&gt;&gt; m: make map! [a 10]
== #(
    a: 10
)

red&gt;&gt; find m 'a
== a
</code></pre>
<h3>Is This A Polymorphism You Can Even Use?</h3>
<p>There's no real clarity in OBJECT!/BLOCK! duality.  <a href="https://forum.rebol.info/t/block-and-object-parity-in-pathing-picking/1086">I've tried to invent some out of the murk, but come up short.</a></p>
<p>We might ask ourselves:</p>
<p><strong>Has there ever been a situation where you've had something--you didn't know what it was, either an OBJECT! or a BLOCK!--and your generic code can meaningfully use a FIND call on that thing?</strong></p>
<p>I can't imagine the answer to that is yes.  <img src="https://forum.rebol.info/images/emoji/twitter/roll_eyes.png?v=9" title=":roll_eyes:" class="emoji" alt=":roll_eyes:"></p>
<p>BUT... what about something you didn't know if it was an OBJECT! or a MAP! ?</p>
<p>You can pass a WORD! to IN for an OBJECT!, and get either a bound word back in that object or NULL.  But you can't use IN on a MAP.</p>
<p>So the only polymorphic operators you can use to determine if something is in either an OBJECT! or a MAP! these days are FIND and SELECT.  Ren-C has the advantage that SELECT returns NULL if-and-only-if something isn't in a map or object, so even if you don't need the selected item you can use it.</p>
<h3>
<em>Some</em> Line Of Argumentation Might Support Rebol2's Behavior</h3>
<p>To truly generalize FIND, you could consider it to be with respect to an iterator... e.g. <a href="https://en.cppreference.com/w/cpp/algorithm/find">how C++'s find works</a>.</p>
<p>We might then look to FOR-EACH to see what it would give you if you asked it for a generic "something".  R3-Alpha supports this (not Rebol2 or Red):</p>
<pre><code>r3-alpha&gt;&gt; obj: make object! [a: 10 b: 20]

r3-alpha&gt;&gt; foreach something obj [print mold something]
a
b
</code></pre>
<p>So maybe if all of that was built on some common infrastructure, you could build a rationale for why searching keys-only made sense for FIND in an object.</p>
<p><em>But it's not built on any common infrastructure, so it's just extra random code.</em></p>
<h3>Moreover, what About BITSET! ?</h3>
<p>Above I made a potential case for seeing FIND as applying to the keys of an object.  But... BITSET!?</p>
<p>If you say <strong>bs: make bitset! 8</strong> and then <strong>bs.4: true</strong>, you're making something kind of like a block:</p>
<pre><code>[0 0 0 1 0 0 0 0]
</code></pre>
<p>So semantically, why would <strong>find bs 4</strong> be true?  Where's the 4?</p>
<p>I think what this really is more like is a positional PICK <em>(which makes sense because <strong>bs.4: true</strong> is running the code <strong>poke bs 4 true</strong>, and <strong>bs.4</strong> acts as <strong>pick bs 4</strong>)</em></p>
<p>But..it may be a potentially interesting polymorphism to think of a bitset as a mapping from integers to LOGIC!.  You might swap in something that is using a BITSET! to use a MAP!.  So SELECT with integer <em>could</em> be coherent here.</p>
<p>I think PICK is the best choice, though.</p>
<h3>Anyway...I'm removing FIND on Maps/Objects/Bitsets for Now...</h3>
<p>For the moment, I think that <strong>did select</strong> or <strong>didn't select</strong> are the best invariant ways of detecting if things are in objects or maps.   (Or use with ELSE/THEN)</p>
<p>This leaves FIND as something that might be more dialected, with options that let you search the values and not just the keys (maybe search deeply?)</p>
<p>Also it saves us from returning the kind of hokey idea of "true or null".  I'm suspicious of most functions that are in situations where they only return true or null, anyway.</p>
          <p><a href="https://forum.rebol.info/t/find-and-select-polymorphism/1879/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/find-and-select-polymorphism/1879/1</link>
        <pubDate>Thu, 14 Jul 2022 02:21:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1879-1</guid>
        <source url="https://forum.rebol.info/t/find-and-select-polymorphism/1879.rss">FIND and SELECT polymorphism</source>
      </item>
  </channel>
</rss>
