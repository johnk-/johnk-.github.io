<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>UNION, INTERSECT, DIFFERENCE...and Splices</title>
    <link>https://forum.rebol.info/t/union-intersect-difference-and-splices/2058</link>
    <description>There is a pattern that comes up a lot in Query which looks like this:

    if not find qe.clause-list &#39;update [append qe.clause-list &#39;update]

You could use an operation like UNION here, but since UNION only works on arrays you&#39;d have to put UPDATE in a block:

    qe.clause-list: union qe.clause-list [update]

If the word to update with was in a variable (e.g. **word: &#39;update**), you couldn&#39;t do that block literally...so you&#39;d need some blockifying function to do it:

    qe.clause-list: union qe.clause-list compose [(word)]

    qe.clause-list: union qe.clause-list reduce [word]

    qe.clause-list: union qe.clause-list :[word]

    qe.clause-list: union qe.clause-list enblock word

## Semantics of Operating on Arrays

Historical Rebol would only accept BLOCK!s as the second argument to these operations.  I didn&#39;t see any reason not to generalize it, so I allowed GROUP!s as well:

    &gt;&gt; intersect [a b c d] &#39;(b c e)
    == [b c]

    &gt;&gt; intersect &#39;(a b c d) [b c e]
    == (b c)

But there&#39;s a little bit of a question there about the result type.  Both arrays are taken account in terms of the elements, but only the first determines the type.  That&#39;s a little bit odd.

Furthermore, what if you wanted to intersect an array as an item?  The following wouldn&#39;t give you what you intended:

    item: [b]
    collection: [[a] [b] [c] [d]]

    collection: intersect collection item

You&#39;d have to put the block into another block.  This is another one of those /ONLY style problems...

## With SPREAD, we can do this better!

We can make it so that UNION and friends assume you mean just one item by default, and you need to SPREAD the second argument to get it considered itemwise:

    &gt;&gt; union [a b c d] &#39;e
    == [a b c d e]

    &gt;&gt; union [[a] [b] [c] [d]] [e]
    == [[a] [b] [c] [d] [e]]

    &gt;&gt; union [[a] [b] [c] [d]] spread [e]
    == [[a] [b] [c] [d] e]

So this means the operation from Query could be a little more succinct:

    if not find qe.clause-list &#39;update [append qe.clause-list &#39;update]
    =&gt;
    qe.clause-list: union qe.clause-list &#39;update

But more importantly, the as-is nature would avoid needing to jump through hoops for single-item operands:

     word: update
    qe.clause-list: union qe.clause-list word
    
There are some questions about whether there is a guarantee of where the update would be added if it wasn&#39;t there... does it matter if it&#39;s added at the beginning or the end?

This is not a new question for these operations... the blocks are being treated as sets, so theoretically multiple answers could be valid:

    &gt;&gt; intersect [a b c d] spread [c b e]
    == [b c]

     &gt;&gt; intersect [a b c d] spread [c b e]
    == [c b]  ; what promises this wouldn&#39;t be the answer?

I think it&#39;s likely beneficial to make some kind of promise here.

## Should UNION/etc. mutate by default?

I point out that you&#39;d have to write:

    qe.clause-list: union qe.clause-list &#39;update

In the Rebol model, &quot;modify by default&quot; is how things like APPEND or REVERSE work.  That would suggest you could write:

    union qe.clause-list &#39;update

And if you didn&#39;t want to modify qe.clause-list directly, you could copy it:

    result: union copy qe.clause-list &#39;update

If the interface to these functions was changed to work with splices and treat everything else as-is by default, it seems like a good time to make this change for consistency.</description>
    
    <lastBuildDate>Sun, 22 Oct 2023 08:31:27 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/union-intersect-difference-and-splices/2058.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>UNION, INTERSECT, DIFFERENCE...and Splices</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2058">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In the Rebol model, "modify by default" is how things like APPEND or REVERSE work.</p>
</blockquote>
</aside>
<p>There's a mechanical question of what this would mean for series not at their head:</p>
<pre><code>&gt;&gt; block: [a b c d]

&gt;&gt; union skip block 2 spread [b e]
== [c d b e]

&gt;&gt; block
== [a b c d b e]
</code></pre>
<p>I ran across this when I tried to implement a little hack to test and see what the general experience of mutable set operations would be like.  The need for this behavior breaks the hack.  :-/</p>
          <p><a href="https://forum.rebol.info/t/union-intersect-difference-and-splices/2058/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/union-intersect-difference-and-splices/2058/2</link>
        <pubDate>Sun, 22 Oct 2023 08:31:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2058-2</guid>
        <source url="https://forum.rebol.info/t/union-intersect-difference-and-splices/2058.rss">UNION, INTERSECT, DIFFERENCE...and Splices</source>
      </item>
      <item>
        <title>UNION, INTERSECT, DIFFERENCE...and Splices</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There is a pattern that comes up a lot in Query which looks like this:</p>
<pre><code>if not find qe.clause-list 'update [append qe.clause-list 'update]
</code></pre>
<p>You could use an operation like UNION here, but since UNION only works on arrays you'd have to put UPDATE in a block:</p>
<pre><code>qe.clause-list: union qe.clause-list [update]
</code></pre>
<p>If the word to update with was in a variable (e.g. <strong>word: 'update</strong>), you couldn't do that block literally...so you'd need some blockifying function to do it:</p>
<pre><code>qe.clause-list: union qe.clause-list compose [(word)]

qe.clause-list: union qe.clause-list reduce [word]

qe.clause-list: union qe.clause-list :[word]

qe.clause-list: union qe.clause-list enblock word
</code></pre>
<h2>
<a name="semantics-of-operating-on-arrays-1" class="anchor" href="https://forum.rebol.info#semantics-of-operating-on-arrays-1"></a>Semantics of Operating on Arrays</h2>
<p>Historical Rebol would only accept BLOCK!s as the second argument to these operations.  I didn't see any reason not to generalize it, so I allowed GROUP!s as well:</p>
<pre><code>&gt;&gt; intersect [a b c d] '(b c e)
== [b c]

&gt;&gt; intersect '(a b c d) [b c e]
== (b c)
</code></pre>
<p>But there's a little bit of a question there about the result type.  Both arrays are taken account in terms of the elements, but only the first determines the type.  That's a little bit odd.</p>
<p>Furthermore, what if you wanted to intersect an array as an item?  The following wouldn't give you what you intended:</p>
<pre><code>item: [b]
collection: [[a] [b] [c] [d]]

collection: intersect collection item
</code></pre>
<p>You'd have to put the block into another block.  This is another one of those /ONLY style problems...</p>
<h2>
<a name="with-spread-we-can-do-this-better-2" class="anchor" href="https://forum.rebol.info#with-spread-we-can-do-this-better-2"></a>With SPREAD, we can do this better!</h2>
<p>We can make it so that UNION and friends assume you mean just one item by default, and you need to SPREAD the second argument to get it considered itemwise:</p>
<pre><code>&gt;&gt; union [a b c d] 'e
== [a b c d e]

&gt;&gt; union [[a] [b] [c] [d]] [e]
== [[a] [b] [c] [d] [e]]

&gt;&gt; union [[a] [b] [c] [d]] spread [e]
== [[a] [b] [c] [d] e]
</code></pre>
<p>So this means the operation from Query could be a little more succinct:</p>
<pre><code>if not find qe.clause-list 'update [append qe.clause-list 'update]
=&gt;
qe.clause-list: union qe.clause-list 'update
</code></pre>
<p>But more importantly, the as-is nature would avoid needing to jump through hoops for single-item operands:</p>
<pre><code> word: update
qe.clause-list: union qe.clause-list word
</code></pre>
<p>There are some questions about whether there is a guarantee of where the update would be added if it wasn't there... does it matter if it's added at the beginning or the end?</p>
<p>This is not a new question for these operations... the blocks are being treated as sets, so theoretically multiple answers could be valid:</p>
<pre><code>&gt;&gt; intersect [a b c d] spread [c b e]
== [b c]

 &gt;&gt; intersect [a b c d] spread [c b e]
== [c b]  ; what promises this wouldn't be the answer?
</code></pre>
<p>I think it's likely beneficial to make some kind of promise here.</p>
<h2>
<a name="should-unionetc-mutate-by-default-3" class="anchor" href="https://forum.rebol.info#should-unionetc-mutate-by-default-3"></a>Should UNION/etc. mutate by default?</h2>
<p>I point out that you'd have to write:</p>
<pre><code>qe.clause-list: union qe.clause-list 'update
</code></pre>
<p>In the Rebol model, "modify by default" is how things like APPEND or REVERSE work.  That would suggest you could write:</p>
<pre><code>union qe.clause-list 'update
</code></pre>
<p>And if you didn't want to modify qe.clause-list directly, you could copy it:</p>
<pre><code>result: union copy qe.clause-list 'update
</code></pre>
<p>If the interface to these functions was changed to work with splices and treat everything else as-is by default, it seems like a good time to make this change for consistency.</p>
          <p><a href="https://forum.rebol.info/t/union-intersect-difference-and-splices/2058/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/union-intersect-difference-and-splices/2058/1</link>
        <pubDate>Sun, 22 Oct 2023 06:06:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2058-1</guid>
        <source url="https://forum.rebol.info/t/union-intersect-difference-and-splices/2058.rss">UNION, INTERSECT, DIFFERENCE...and Splices</source>
      </item>
  </channel>
</rss>
