<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Different Dialect Behavior For Literal vs. Fetched Items</title>
    <link>https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348</link>
    <description>*(Suggested background reading on [&quot;what is a literal in a language where every element of source code can be taken literally?&quot;](https://forum.rebol.info/t/escaping-vs-literal-vs/983))*

---

Let&#39;s imagine someone proposed a behavior in Rebol2, where seeing a number &quot;literally&quot; in the parse rule would act like a repeat rule, while using it fetched from a variable would try to match the literal INTEGER!.

    rebol2&gt;&gt; parse &quot;aa&quot; [2 &quot;a&quot;]  ; since 2 is directly in rule, act as repeat count
    == true

    rebol2&gt;&gt; count: 2
    rebol2&gt;&gt; parse &quot;aa&quot; [count &quot;a&quot;]  ; interpreted as looking for literal 2
    == false  

    rebol2&gt;&gt; did parse [2] [count]  ; again looking for literal 2
    == true

There&#39;s clearly something a bit confusing about this.  **But is it *always* bad?**

## Clearly not *Always* Bad, Consider WORD! Fetch...

Just look at how PRINT handles the word FOO &quot;literally&quot;, and then how it acts when it is fetched via VAR:

    &gt;&gt; foo: ~

    &gt;&gt; print [&quot;a&quot; foo &quot;b&quot;]
    ** Error: foo is unset

    &gt;&gt; var: &#39;foo
    &gt;&gt; print [&quot;a&quot; var &quot;b]
    a foo b

We wouldn&#39;t want to say that **`print [&quot;a&quot; var &quot;b&quot;]`** is chained to behaving the same as if FOO had been literally in the block.  That would be nonsense.

*So we have at least one example in defense of the idea that there&#39;s no hard rule saying that when you access something via a fetch it has to act as if the fetched thing was written in that place.*

## Generic Quoting Is A Powerful Tool

Historical Rebol only had LIT-WORD!:

    rebol2&gt;&gt; print [&quot;a&quot; &#39;foo &quot;b&quot;]
    a foo b

But dialect authors should rejoice, as Ren-C has QUOTED! for any value type (including something already QUOTED!), and QUASI! for isotopes.  This is heavy artillery.

**As a general rule, I believe dialects are stylized to act on variable fetches should make the handling of QUOTED! act just like if a variable had unfetched the quoted thing.**

So if you have variables or expressions that act like this:

     &gt;&gt; var
     == &lt;X&gt;

     &gt;&gt; (some expression)
     == &lt;X&gt;

The expression behaviors should give the same answer, on potentially a subset of the literal forms:

     &gt;&gt; dialect [... &#39;&lt;X&gt; ...]
     == &lt;Y&gt;

     &gt;&gt; dialect [... var ...]
     == &lt;Y&gt;  ; or error if non-literal use is suspect

     &gt;&gt; dialect [... (some expression) ...]
     == &lt;Y&gt;  ; or error if non-literal use is suspect

Don&#39;t forget that the quoting behavior in COMPOSE makes getting those quote marks on easy when building dialect blocks:

     &gt;&gt; compose [... &#39;(var) ...]
     == [... &#39;&lt;X&gt; ...]

     &gt;&gt; dialect compose [... &#39;(var) ...]
     == &lt;Y&gt;

## So Now... Back To What If It&#39;s *not* Quoted...

* I&#39;ve offered the plausibility that dialects could by default reserve QUOTED! behavior to be a superset of what would happen if the unquoted item were fetched from a variable or a product of expressions.

* I&#39;ve shown that plain WORD! is a kind of tautological example of a datatype in dialects where the fetched result does not act like the original WORD! value it was fetched from.

    * We can extend this to however our dialect evaluates expressions, e.g. from GROUP!s or BLOCK!s, or just inline as a DO/NEXT step.

**...does this mean that other behavior variances between non-quoted dialect elements and their fetched form are fair game--as with the deviating behavior of INTEGER! in PARSE proposed at the top of this post?**

## Pertinent Case Study: BLANK! As Nothing vs. Nothinglike-Thing

BLANK! has something of a split personality, from its dual nature of being a &quot;reified concept that stands for nothing&quot;.

Some cases could really benefit from it meaning something.  For instance, I&#39;ve consistently wanted it to mean `space` in DELIMIT&#39;s &quot;dialect&quot; :

    write port unspaced [
        &quot;HTTP/1.0&quot; _ code _ code-map/:code CR LF
        &quot;Content-type:&quot; _ type CR LF
        &quot;Content-length:&quot; _ (length of body) CR LF
        CR LF
    ]

**That is awesome.**  It lets you see what&#39;s going on very clearly.  I&#39;m always annoyed when people include spacing in the edges of the things being spaced, like `&quot;HTTP/1.0 &quot;` ... because it makes it harder to factor.  It also makes it hard to see what&#39;s a string and what&#39;s not:

     print [&quot; At a &quot; glance &quot; how &quot; do &quot; you tell &quot; whats &quot; a string &quot;]

**But it could potentially sucks if a variable holds BLANK! with the intent to mean *nothing* if that *nothing* becomes a space character.**

To demonstrate how it sucks, let&#39;s say you&#39;ve got a situation like this where the second item is supposed to be conceptually &quot;not there&quot;:

    values: [&quot;one&quot; _ &lt;three&gt;]

    print &quot;And here the values are!&quot;
    for-each item values [
        print [item]
    ]

When a fetched BLANK! is allowed to act as a space, you get something that&#39;s actually worse than it looks:

    And here the values are!
    one

    &lt;three&gt;

I say it&#39;s worse because that empty line isn&#39;t actually empty.  *It actually wrote a space and a newline.*  

**So what if things like PRINT/UNSPACED would only treat a &quot;literal&quot; blank as a space?**

    &gt;&gt; unspaced [&quot;a&quot; _ &quot;b&quot;]
    &quot;a b&quot;

    &gt;&gt; var: _

    &gt;&gt; unspaced [&quot;a&quot; var &quot;b&quot;]
    ** Error: Can&#39;t Turn Evaluative BLANK! Into Space

    &gt;&gt; unspaced [&quot;a&quot; maybe var &quot;b&quot;]
    &quot;ab&quot;

    &gt;&gt; unspaced compose [&quot;a&quot; (var) &quot;b&quot;]
    &quot;a b&quot;

*On the surface, that seems pretty reasonable.*  Trusting that you know what you&#39;re doing in the COMPOSE case makes sense, because you could be putting WORD! or arbitrary code in there...so if you got BLANK! you must have meant it.</description>
    
    <lastBuildDate>Sun, 21 Aug 2022 12:39:26 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Different Dialect Behavior For Literal vs. Fetched Items</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1348">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>You know the QUASI! things didn't evaluate, so they had to be inert and have no quote level (hence a quasiform for them exists).</p>
</blockquote>
</aside>
<p>Hmmm...technically you don't need the QUASI!, if you remember that everything quoted is one level quoted higher than it actually is. Hmm.</p>
<pre><code>&gt;&gt; block: reduce/weird [1 1 + 2 first [~a~ b c] first [''d ''e]]
== [1 '3 '~a~ '''d]
</code></pre>
<p>That again has the round-trip property that if you reduce it you get the block back.</p>
<pre><code>&gt;&gt; reduce block
== [1 3 ~a~ ''d]

&gt;&gt; reduce [1 1 + 2 first [~a~ b c] first [''d ''e]]
== [1 3 ~a~ ''d]  ; same
</code></pre>
<p>So even simpler.  The QUOTED! bit is the evaluated bit, and remove it to get the actual value.  If it's not quoted it was inert in the input.</p>
<p>As long as you know what you're doing and don't forget what the quoted bit or its absence means, that seems pretty good.</p>
          <p><a href="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/5</link>
        <pubDate>Sun, 21 Aug 2022 12:39:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1348-5</guid>
        <source url="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348.rss">Different Dialect Behavior For Literal vs. Fetched Items</source>
      </item>
      <item>
        <title>Different Dialect Behavior For Literal vs. Fetched Items</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="3" data-topic="1348">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>The weird block looks really weird, though.</p>
</blockquote>
</aside>
<p>Actually...it could cost no more than the block otherwise would, if it made the unevaluated things QUASI!, and the evaluated things added a level of QUOTED!:</p>
<pre><code>&gt;&gt; block: reduce/quasi [1 1 + 2 first [~a~ b c] first [''d ''e]]
== [~1~ '3 '~a~ '''d]
</code></pre>
<p>You know the QUASI! things didn't evaluate, so they had to be inert and have no quote level (hence a quasiform for them exists).</p>
<aside class="quote no-group" data-username="IngoHohmann" data-post="3" data-topic="1348">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>Being able to get at that information is good, I think, especially if it's already available.</p>
</blockquote>
</aside>
<p>Exposing it as a bit is pretty fiddly API-wise, and its hidden-ness makes me nervous.</p>
<p>While the above may look weird, it's actually rather elegant.  And as a client of the service, I'd rather be able to do a for-each over the values and examine a property of a value directly, vs. needing some strange position-based API to read invisible bits scribbled on things.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji" alt=":man_shrugging:"></p>
<p>It's easy enough to UNQUASI and UNQUOTE things--easier than extracting items from blocks or groups.  And as I say, it's cheap.</p>
<p><em>(I have to say...seeing how these parts all serve their niches is getting to be very pleasing.  I'm also increasingly satisfied with QUASI as a name...as we see here it's more than just an isotope producer.  That's one role, but it's also a quote-like operator that can only be used exactly once on non-quoted non-NULL things.)</em></p>
          <p><a href="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/4</link>
        <pubDate>Sun, 21 Aug 2022 11:37:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1348-4</guid>
        <source url="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348.rss">Different Dialect Behavior For Literal vs. Fetched Items</source>
      </item>
      <item>
        <title>Different Dialect Behavior For Literal vs. Fetched Items</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Being able to get at that information is good, I think, especially if it's already available.<br>
The weird block looks really weird, though.</p>
          <p><a href="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/3</link>
        <pubDate>Sun, 21 Aug 2022 11:21:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1348-3</guid>
        <source url="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348.rss">Different Dialect Behavior For Literal vs. Fetched Items</source>
      </item>
      <item>
        <title>Different Dialect Behavior For Literal vs. Fetched Items</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1348">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; unspaced ["a" _ "b"]
"a b"

&gt;&gt; var: _

&gt;&gt; unspaced ["a" var "b"]
** Error: Can't Turn Evaluative BLANK! Into Space

&gt;&gt; unspaced ["a" maybe var "b"]
"ab"

&gt;&gt; unspaced compose ["a" (var) "b"]
"a b"
</code></pre>
</blockquote>
</aside>
<p>This seems pretty nice on the surface.  But there's a bit of a technical problem with it.</p>
<p><strong>Imagine you are the person who is implementing UNSPACED.</strong>  One likely thing you might do would be to run through a REDUCE step, and then join the parts together:</p>
<p>But these make the same product:</p>
<pre><code>&gt;&gt; reduce ["a" _ "b"]
== ["a" _ "b"]

&gt;&gt; reduce ["a" var "b"]
== ["a" _ "b"]
</code></pre>
<p>In order to raise an error, you have to know if a value was literal or the product of an evaluation.</p>
<p>Deriving this information yourself is a hassle.  You might think you could step through the block and literally examine each blank before doing an eval step, and if it's a blank you just skip over it.  But then you have trouble like enfix operators that consume their left hand side and are able to take blanks, and so if you consume the blanks without deferring to lookahead you get mangled results.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>Inside the system it's a little easier--there actually is an internal flag on cells that can track whether they were evaluative products or not.  But this feature has been kind of closely guarded and not exposed to usermode, because it's such a sneaky invisible property.</p>
<p><em><strong>Is it time to expose the evaluated bit... like the NEW-LINE flag is exposed???</strong></em>  This would let you snoop the results of something like a REDUCE and know if something was an evaluative product.</p>
<pre><code>&gt;&gt; block: reduce [1 2 + 3]
== [1 5]

&gt;&gt; evaluated? block
== #[false]

&gt;&gt; evaluated? next block
== #[true]
</code></pre>
<p>I am presenting it as a property of block positions...not of values themselves, because all values are evaluative if you get them as a function result--because the function evaluated!</p>
<pre><code>&gt;&gt; first block
== 1

&gt;&gt; evaluative-value? first block
== #[true]  ; e.g. it came from running FIRST
</code></pre>
<p>(You might try to argue that it's only certain blessed evaluator functions like REDUCE that fiddle the bit, but the problem is you have to consider how this bit is produced in the first place.  That would be something that doesn't exist today and may not be coherent.  I'm talking about something that already does exist and works.)</p>
<p>I'm somewhat reticent to expose this bit.  But if you read the arguments in the post above, it leans toward saying that this is a legitimate piece of information to want to know.</p>
<p>Less dodgy might be asking REDUCE to do something to augment the products of the array to indicate their evaluatedness?</p>
<pre><code>&gt;&gt; reduce/weird [1 2 + 3]
== [[1] (5)]
</code></pre>
<p>Everything that's an evaluative product could be put in a group, and everything that's not could be put in a block.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji" alt=":man_shrugging:">  Not the most efficient concept in the universe, but also not the least (single blocks and groups are about as optimized as they can be).  Internal routines could leverage the bit more efficiently and this could just be for usermode to avoid invisible state.</p>
<p>Anyway...more to think about.</p>
          <p><a href="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/2</link>
        <pubDate>Sun, 21 Aug 2022 08:35:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1348-2</guid>
        <source url="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348.rss">Different Dialect Behavior For Literal vs. Fetched Items</source>
      </item>
      <item>
        <title>Different Dialect Behavior For Literal vs. Fetched Items</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(Suggested background reading on <a href="https://forum.rebol.info/t/escaping-vs-literal-vs/983">"what is a literal in a language where every element of source code can be taken literally?"</a>)</em></p>
<hr>
<p>Let's imagine someone proposed a behavior in Rebol2, where seeing a number "literally" in the parse rule would act like a repeat rule, while using it fetched from a variable would try to match the literal INTEGER!.</p>
<pre><code>rebol2&gt;&gt; parse "aa" [2 "a"]  ; since 2 is directly in rule, act as repeat count
== true

rebol2&gt;&gt; count: 2
rebol2&gt;&gt; parse "aa" [count "a"]  ; interpreted as looking for literal 2
== false  

rebol2&gt;&gt; did parse [2] [count]  ; again looking for literal 2
== true
</code></pre>
<p>There's clearly something a bit confusing about this.  <strong>But is it <em>always</em> bad?</strong></p>
<h2>Clearly not <em>Always</em> Bad, Consider WORD! Fetch...</h2>
<p>Just look at how PRINT handles the word FOO "literally", and then how it acts when it is fetched via VAR:</p>
<pre><code>&gt;&gt; foo: ~

&gt;&gt; print ["a" foo "b"]
** Error: foo is unset

&gt;&gt; var: 'foo
&gt;&gt; print ["a" var "b]
a foo b
</code></pre>
<p>We wouldn't want to say that <strong><code>print ["a" var "b"]</code></strong> is chained to behaving the same as if FOO had been literally in the block.  That would be nonsense.</p>
<p><em>So we have at least one example in defense of the idea that there's no hard rule saying that when you access something via a fetch it has to act as if the fetched thing was written in that place.</em></p>
<h2>Generic Quoting Is A Powerful Tool</h2>
<p>Historical Rebol only had LIT-WORD!:</p>
<pre><code>rebol2&gt;&gt; print ["a" 'foo "b"]
a foo b
</code></pre>
<p>But dialect authors should rejoice, as Ren-C has QUOTED! for any value type (including something already QUOTED!), and QUASI! for isotopes.  This is heavy artillery.</p>
<p><strong>As a general rule, I believe dialects are stylized to act on variable fetches should make the handling of QUOTED! act just like if a variable had unfetched the quoted thing.</strong></p>
<p>So if you have variables or expressions that act like this:</p>
<pre><code> &gt;&gt; var
 == &lt;X&gt;

 &gt;&gt; (some expression)
 == &lt;X&gt;
</code></pre>
<p>The expression behaviors should give the same answer, on potentially a subset of the literal forms:</p>
<pre><code> &gt;&gt; dialect [... '&lt;X&gt; ...]
 == &lt;Y&gt;

 &gt;&gt; dialect [... var ...]
 == &lt;Y&gt;  ; or error if non-literal use is suspect

 &gt;&gt; dialect [... (some expression) ...]
 == &lt;Y&gt;  ; or error if non-literal use is suspect
</code></pre>
<p>Don't forget that the quoting behavior in COMPOSE makes getting those quote marks on easy when building dialect blocks:</p>
<pre><code> &gt;&gt; compose [... '(var) ...]
 == [... '&lt;X&gt; ...]

 &gt;&gt; dialect compose [... '(var) ...]
 == &lt;Y&gt;
</code></pre>
<h2>So Now... Back To What If It's <em>not</em> Quoted...</h2>
<ul>
<li>
<p>I've offered the plausibility that dialects could by default reserve QUOTED! behavior to be a superset of what would happen if the unquoted item were fetched from a variable or a product of expressions.</p>
</li>
<li>
<p>I've shown that plain WORD! is a kind of tautological example of a datatype in dialects where the fetched result does not act like the original WORD! value it was fetched from.</p>
<ul>
<li>We can extend this to however our dialect evaluates expressions, e.g. from GROUP!s or BLOCK!s, or just inline as a DO/NEXT step.</li>
</ul>
</li>
</ul>
<p><strong>...does this mean that other behavior variances between non-quoted dialect elements and their fetched form are fair game--as with the deviating behavior of INTEGER! in PARSE proposed at the top of this post?</strong></p>
<h2>Pertinent Case Study: BLANK! As Nothing vs. Nothinglike-Thing</h2>
<p>BLANK! has something of a split personality, from its dual nature of being a "reified concept that stands for nothing".</p>
<p>Some cases could really benefit from it meaning something.  For instance, I've consistently wanted it to mean <code>space</code> in DELIMIT's "dialect" :</p>
<pre><code>write port unspaced [
    "HTTP/1.0" _ code _ code-map/:code CR LF
    "Content-type:" _ type CR LF
    "Content-length:" _ (length of body) CR LF
    CR LF
]
</code></pre>
<p><strong>That is awesome.</strong>  It lets you see what's going on very clearly.  I'm always annoyed when people include spacing in the edges of the things being spaced, like <code>"HTTP/1.0 "</code> ... because it makes it harder to factor.  It also makes it hard to see what's a string and what's not:</p>
<pre><code> print [" At a " glance " how " do " you tell " whats " a string "]
</code></pre>
<p><strong>But it could potentially sucks if a variable holds BLANK! with the intent to mean <em>nothing</em> if that <em>nothing</em> becomes a space character.</strong></p>
<p>To demonstrate how it sucks, let's say you've got a situation like this where the second item is supposed to be conceptually "not there":</p>
<pre><code>values: ["one" _ &lt;three&gt;]

print "And here the values are!"
for-each item values [
    print [item]
]
</code></pre>
<p>When a fetched BLANK! is allowed to act as a space, you get something that's actually worse than it looks:</p>
<pre><code>And here the values are!
one

&lt;three&gt;
</code></pre>
<p>I say it's worse because that empty line isn't actually empty.  <em>It actually wrote a space and a newline.</em></p>
<p><strong>So what if things like PRINT/UNSPACED would only treat a "literal" blank as a space?</strong></p>
<pre><code>&gt;&gt; unspaced ["a" _ "b"]
"a b"

&gt;&gt; var: _

&gt;&gt; unspaced ["a" var "b"]
** Error: Can't Turn Evaluative BLANK! Into Space

&gt;&gt; unspaced ["a" maybe var "b"]
"ab"

&gt;&gt; unspaced compose ["a" (var) "b"]
"a b"
</code></pre>
<p><em>On the surface, that seems pretty reasonable.</em>  Trusting that you know what you're doing in the COMPOSE case makes sense, because you could be putting WORD! or arbitrary code in there...so if you got BLANK! you must have meant it.</p>
          <p><a href="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348/1</link>
        <pubDate>Sun, 27 Sep 2020 05:47:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1348-1</guid>
        <source url="https://forum.rebol.info/t/different-dialect-behavior-for-literal-vs-fetched-items/1348.rss">Different Dialect Behavior For Literal vs. Fetched Items</source>
      </item>
  </channel>
</rss>
