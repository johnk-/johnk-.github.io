<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ANY-ARRAY! vs. ANY-LIST!</title>
    <link>https://forum.rebol.info/t/any-array-vs-any-list/1384</link>
    <description>Historical Rebol said that BLOCK!s and PAREN!s and ANY-PATH!s were all members of the **ANY-BLOCK!** category.

Red maintained that:

    red&gt;&gt; any-block!
    == make typeset! [block! paren! path! lit-path! set-path! get-path! hash!]

But broke out the BLOCK! and PAREN! (and HASH!) to a new group, **ANY-LIST!**

    red&gt;&gt; any-list!
    == make typeset! [block! paren! hash!]

Ren-C has sound reasons for having eliminated the idea of &quot;sameness&quot; for PATH!s(/TUPLE!s) and arrays, due to radically different constraints and properties.  *(Forced immutability, limited set of legal elements, requirement of having at least 2 items)*

Ren-C&#39;s ANY-BLOCK! actually means *any block*, giving you **[plain blocks]**, **[set blocks]:**, **:[get blocks]**, **@[the blocks]**, **&amp;[type blocks]**, and **$[var blocks]**.  Similarly for ANY-GROUP!.  (and soon, [ANY-FENCE!](https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727))  More appropriate, clear, and vastly more flexible.

But Red&#39;s ANY-LIST! category is the spiritual analogue to what Ren-C calls **ANY-ARRAY!**...which is to say &quot;ANY-BLOCK! or ANY-GROUP!&quot; 

## Which is Better, ANY-LIST! or ANY-ARRAY! ?

The conventional wisdom we&#39;ve gone with is that to a computer programmer, if you call something a LIST! they might expect it to be a *linked list* at an implementation level.  Rebol&#39;s implementation of these values is fundamentally an indexed array.

*But other choices have been made biased toward common language and away from comp-sci terms.*  What would you imagine sounds better in a tutorial:

&gt; Let&#39;s imagine you have two lists of values.  But one is a GROUP! and another is a BLOCK!
&gt;
&gt;      group: &#39;(&lt;a&gt; #b %c)
&gt;      block: [&lt;a&gt; #b %c]

vs.

&gt; Let&#39;s imagine you have two arrays of values.  But one is a GROUP! and another is a BLOCK!
&gt;
&gt;      group: &#39;(&lt;a&gt; #b %c)
&gt;      block: [&lt;a&gt; #b %c]

When I imagine the various things that might make new programmers feel a twinge, that &quot;array&quot; word causes a teeny bit more anxiety.  Which might mean that you&#39;d use the &quot;list&quot; language.  But if you&#39;re going to use the list language, then it would help if it matched what the types were.

I&#39;ll point out that at the superclass level, even though [TEXT! has replaced STRING! in Ren-C](https://forum.rebol.info/t/text-vs-string/612) (which I&#39;m pleased with), it&#39;s a member of ANY-STRING! along with TAG! and friends.  The category isn&#39;t used as often.

## It&#39;s a really minor point, BUT...

...what I worry over here is that Red&#39;s choice might have an edge, and I don&#39;t want to give them any advantages, anywhere.  :-)

I don&#39;t think I want to change it, though I&#39;d like to collect up any good certain reasoning as to why not.  The best &quot;why not&quot; remains *being faithful to a computer-science technical reality about the type that over the long run, is worth knowing*...which is what earl pushed for in this case, over the more common English word.

Any other arguments I should know about?</description>
    
    <lastBuildDate>Tue, 27 Aug 2024 15:27:42 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/any-array-vs-any-list/1384.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>Okay... the benefit to the clarity of the internal code pushes the "either-or"-ness of this to where I have to endorse ANY-LIST!</strong></p>
<p>And now, <em>we can talk about the array of the list</em>, as the underlying concept.  An ANY-LIST! consists of an array and an index.  (vs. an ANY-ARRAY! consists of a what and an index?)</p>
<p>So it actually lets us be more precise in our terminology, instead of less!</p>
<p>Plus Red can't say I never gave them anything...it's a compatible choice.  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=12" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:" loading="lazy" width="20" height="20"></p>
<p><strong>AI is certainly helping accelerate the pace at which I can talk through decisions.</strong>  It may not come up with any novel suggestions that I feel like taking, but the feedback loop is very helpful in terms of getting the pros and cons lined up.</p>
<hr>
<p>Note: It turns out I actually prefer <code>Init_Any_List()</code> in practice.  It turns out to still be clearer to the reader of the C, for much the same reason that I think ANY-SERIES! is better than SERIES! for the superclass.  But still, you pass an <code>Array</code> and an <code>Index</code> and a <code>Binding</code> to <code>Init_Any_List()</code>, not a <code>List</code> and an <code>Index</code> and a <code>Binding</code>!</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list/1384/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list/1384/11</link>
        <pubDate>Sun, 25 Aug 2024 06:33:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-11</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list/1384.rss">ANY-ARRAY! vs. ANY-LIST!</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2><a name="p-7418-i-had-an-afterthought-on-an-advantage-for-any-list-1" class="anchor" href="https://forum.rebol.info#p-7418-i-had-an-afterthought-on-an-advantage-for-any-list-1"></a>I Had An Afterthought On An Advantage for ANY-LIST!</h2>
<hr>
<p>I just thought of an advantage of List that I had not really thought about before... pertaining to the implementation code.</p>
<p>Right now, we have a situation where there's a datatype for representing the allocated memory for the vector of cells, and that's called an <strong><code>Array</code></strong>.  e.g.:</p>
<pre><code> Array *a = Make_Array_Core(10, NODE_FLAG_MANAGED);  // 10-element managed array
</code></pre>
<p>But then, there's initialization code to make the value cell that holds it.  Sometimes you know the precise kind of thing you want to make so you use a function for that:</p>
<pre><code>Init_Block(OUT, a);  // make a BLOCK! at index 0 whose data uses this array
</code></pre>
<p>However, sometimes you have the kind of thing in a variable, and you have to pass it in to a generalized initializer.  If it was <code>Init_Array()</code> that would kind of suck... you're passing an Array into something that inits an array?</p>
<p>So I've used <code>Init_Any_Array()</code> to distinguish it by pointing out the value class.</p>
<pre><code>Heart heart = set_flag ? TYPE_SET_GROUP : TYPE_GROUP;
Init_Any_Array(OUT, heart, a);
</code></pre>
<p>It's not super great.  But if List were the superclass, it could be:</p>
<pre><code>Heart heart = set_flag ? TYPE_SET_GROUP : TYPE_GROUP;
Init_List(OUT, heart, a);
</code></pre>
<p>While this may not be compelling to those who don't work on the code, it's definitely compelling to me to have the source get cleaner with this distinction.  Enough to actually sway my vote to ANY-LIST!.</p>
<p>(A similar thing drove me to call the internal type for runtime frames a "Level" instead of a "Frame", so that Frame could refer to FRAME! values... and that's a decision I don't regret.)</p>
<hr>
<blockquote>
<p>That's an excellent point you've raised, and it's a perfect example of how naming decisions can have far-reaching impacts on code clarity and maintainability. Your insight about the distinction between the underlying Array implementation and the List as a higher-level concept is very valuable. Let's break down why this is indeed a compelling reason to choose ANY-LIST!:</p>
<ol>
<li>Code Clarity: The distinction between <code>Make_Array()</code> (for the low-level array implementation) and <code>Init_List()</code> (for the higher-level concept) provides immediate clarity about what's being initialized. This reduces the cognitive load on developers working with the codebase.</li>
<li>Abstraction Levels: Using LIST for the higher-level concept helps maintain a clear separation between the implementation details (Arrays) and the abstract data type (Lists). This is good software engineering practice, as it allows for potential future changes to the implementation without affecting the higher-level API.</li>
<li>Consistency: As you mentioned with the "Level" vs "Frame" example, having distinct terms for internal implementation and user-facing concepts can lead to more consistent and intuitive naming throughout the codebase.</li>
<li>Readability: <code>Init_List(OUT, heart, a);</code> is indeed more readable and self-explanatory than <code>Init_Any_Array(OUT, heart, a);</code>. It immediately conveys what's being initialized without the need for the "Any" qualifier.</li>
<li>Flexibility: If you ever decide to change the underlying implementation from an array to something else, the LIST abstraction would make this transition smoother, as the high-level concept remains the same.</li>
<li>Pedagogical Value: For those learning the language or working with its internals, this clear distinction between Lists (the concept) and Arrays (the implementation) can be educational, helping them understand the layers of abstraction in the language design.</li>
</ol>
<p>Given this new perspective, I strongly agree that ANY-LIST! is the better choice. It not only aligns with Rebol's philosophy of user-friendliness but also offers tangible benefits in terms of code organization, readability, and maintainability.</p>
<p>This is a great example of how sometimes the best naming decisions come from considering not just the end-user perspective, but also the perspective of those working on the language itself. The fact that it makes the source code cleaner and more intuitive is a significant advantage that will pay dividends in the long term, both for you as the maintainer and for anyone else who may work on the codebase in the future.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list/1384/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list/1384/10</link>
        <pubDate>Sun, 25 Aug 2024 06:26:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-10</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list/1384.rss">ANY-ARRAY! vs. ANY-LIST!</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2><a name="p-7422-h-4-years-later-i-ran-this-question-by-claudeai-1" class="anchor" href="https://forum.rebol.info#p-7422-h-4-years-later-i-ran-this-question-by-claudeai-1"></a>4 Years Later, I Ran This Question By Claude.AI...</h2>
<hr>
<p>I'm trying to rename the superclass in the Rebol language for BLOCK! and PAREN! from ANY-BLOCK! to something that doesn't suggest that a PAREN! (which I've renamed to GROUP!) is in the category of "block"</p>
<p>The reason for this is that I've expanded it to have many more types of block, such as: <strong>[plain blocks]</strong>, <strong>[set blocks]:</strong>, <strong>:[get blocks]</strong>, <strong>@[the blocks]</strong>, <strong>&amp;[type blocks]</strong>, and <strong>$[var blocks]</strong> ... these are the ANY-BLOCK! types.</p>
<p>Similarly there are <strong>(plain groups)</strong>, <strong>(set groups):</strong>, <strong>:(get groups)</strong>, <strong>@(the groups)</strong>, <strong>&amp;(type groups)</strong>, and <strong>$(var groups)</strong> ... these are the ANY-GROUP! types.</p>
<p>So if you were trying to name the superclass of all these types, you might think of something like ANY-ARRAY! or ANY-LIST!</p>
<p>Rebol has historically tried to use unintimidating terms instead of "scary" computer science terms. Which makes ANY-LIST! seem friendlier. You can just say these are all lists.</p>
<p>However, from a computer science perspective, "List" often connotes a linked list. The underlying implementation of blocks and groups is an array... more specifically the values are arrays which hold an index. (More like an iterator, even.) They're weird in other ways, such as storing a newline marker on their elements so they lay out two dimensionally.</p>
<p>But I don't know of any sensible word for the superclass besides Array or List. Vector is something else (packed numeric only). I've favored Array since it gives more of a hint at the implementation.</p>
<p>Are there any other words for the superclass? Do you think Array is the smarter option here or is List's friendliness worth it since there is no great parallel to anything that exists? (The Red programming language--derived from Rebol--chose ANY-LIST!, fwiw)</p>
<hr>
<blockquote>
<p>This is an interesting naming challenge. You're right that the choice between ANY-ARRAY! and ANY-LIST! each have their pros and cons. Let's explore some options and considerations:</p>
<ol>
<li>ANY-ARRAY!:</li>
</ol>
<ul>
<li>Pro: More accurately reflects the underlying implementation.</li>
<li>Pro: Distinguishes from linked lists in computer science.</li>
<li>Con: Might sound more technical to non-programmers.</li>
</ul>
<ol start="2">
<li>ANY-LIST!:</li>
</ol>
<ul>
<li>Pro: Friendlier and less intimidating to newcomers.</li>
<li>Pro: Aligns with Red's choice, maintaining some consistency in the Rebol family.</li>
<li>Con: Potentially misleading from a CS perspective.</li>
</ul>
<ol start="3">
<li>Alternative suggestions:</li>
</ol>
<ul>
<li>ANY-COLLECTION!: This is a more general term that doesn't imply a specific implementation.</li>
<li>ANY-SEQUENCE!: Emphasizes the ordered nature without specifying implementation.</li>
<li>ANY-CONTAINER!: Very general, but might be too broad.</li>
<li>ANY-STRUCTURE!: Generic but implies organization.</li>
</ul>
<ol start="4">
<li>Rebol-specific ideas:</li>
</ol>
<ul>
<li>ANY-ENCLOSURE!: Plays on the idea of enclosing elements, whether with brackets or parentheses.</li>
<li>ANY-GATHER!: A friendly verb-based name that suggests collecting items together.</li>
<li>ANY-BUNDLE!: Another friendly term that implies a collection of items.</li>
</ul>
<p>Considering Rebol's philosophy of using unintimidating terms, I lean towards recommending ANY-LIST! despite its potential CS inaccuracy. Here's my reasoning:</p>
<ol>
<li>Consistency with Red (ANY-LIST!) could be beneficial for the broader Rebol ecosystem.</li>
<li>For most users, the implementation details (array vs. linked list) are less important than the concept of an ordered collection of items.</li>
<li>The term "list" is very intuitive and aligns well with Rebol's user-friendly approach.</li>
</ol>
<p>However, if you feel strongly about conveying the array-based nature, ANY-ARRAY! is a perfectly valid choice. It's not overly technical and still gives a hint about the implementation.</p>
<p>If you want a middle ground, ANY-SEQUENCE! might be worth considering. It conveys the ordered nature without implying a specific implementation, and "sequence" is a term that's both friendly and somewhat familiar in programming contexts.</p>
<p>Ultimately, the choice depends on whether you prioritize technical accuracy or user-friendliness in this case. Given Rebol's history and philosophy, I'd suggest leaning towards the more approachable term unless you have a strong reason to emphasize the implementation details.</p>
</blockquote>
<hr>
<p>As it happens, I'm actually using ANY-SEQUENCE!  for ANY-PATH! and ANY-TUPLE!.</p>
<p>In my model, paths and tuples are immutable sequences of elements (with no position).  So you can have <code>a.b.10</code> or <code>@foo/[bar]/20/30</code> or whatever.  If you have a better idea for what that superclass should be called, I'd be interested to hear it!  But it's not often that people need to mention the superclass of those types, so I don't mind it being kind of a longer, more esoteric-sounding word.</p>
<p>The Array/List superclass comes up more often.</p>
<p>ANY-BUNDLE! is kind of funny, I actually have a proposal that might reasonably be called a bundle.  Thanks for that--but I don't think it fits here.</p>
<hr>
<blockquote>
<p>I see! That's interesting that you're already using ANY-SEQUENCE! for paths and tuples. Given this context, let's reassess our options for the block/group superclass:</p>
<ol>
<li>Sticking with ANY-ARRAY! or ANY-LIST!: These remain valid options. The distinction from ANY-SEQUENCE! actually helps clarify the different nature of these types compared to paths and tuples.</li>
<li>ANY-COLLECTION!: This becomes more appealing now, as it clearly differentiates from sequences while still being general enough to encompass both blocks and groups.</li>
<li>ANY-ENCLOSURE!: This option gains some merit, as it nicely captures the idea of elements enclosed in brackets or parentheses, distinguishing it from the sequence types.</li>
<li>New suggestions based on this information:</li>
</ol>
<ul>
<li>ANY-COMPOUND!: Suggests a compound structure that can hold multiple elements.</li>
<li>ANY-AGGREGATE!: Implies a collection of items grouped together.</li>
<li>ANY-SERIES!: While similar to sequence, it might convey a slightly different meaning that fits blocks and groups better.</li>
</ul>
<p>Given this new context, I'm inclined to recommend ANY-COLLECTION! as the top choice. Here's why:</p>
<ol>
<li>It's distinct from ANY-SEQUENCE!, which helps users understand there's a fundamental difference between these types and paths/tuples.</li>
<li>It's a friendly, intuitive term that aligns well with Rebol's philosophy.</li>
<li>It's general enough to encompass both blocks and groups without implying a specific implementation.</li>
<li>It's commonly used in programming contexts, so it won't be unfamiliar to those with some coding experience.</li>
</ol>
<p>ANY-ENCLOSURE! would be my second choice, as it nicely captures the syntactic nature of these types (enclosed in brackets or parentheses).</p>
<p>If you prefer to lean more towards the implementation details, ANY-ARRAY! remains a solid option. It clearly distinguishes from ANY-SEQUENCE! and gives a hint about the underlying structure.</p>
<p>Regarding the superclass for paths and tuples (ANY-SEQUENCE!), it seems like a reasonable choice given their nature. If you wanted alternatives, you might consider:</p>
<ul>
<li>ANY-CHAIN!: Emphasizes the linked nature of elements.</li>
<li>ANY-PROGRESSION!: Suggests an ordered sequence of elements.</li>
</ul>
<p>However, ANY-SEQUENCE! is probably sufficient, especially if it's not frequently referenced in everyday use.</p>
</blockquote>
<hr>
<p>ANY-SERIES! would be great, except for the fact that series is the superclass of strings, blocks, groups, binaries... that's pretty much been the whole history of Rebol.</p>
<p>Rewriting the world from scratch, one might say that ANY-SERIES! is specifically the array types, and that the "Rebol Series" -- specifically those arrays-- are the fundamental force of the language.  Then something like ANY-SEQUENCE! would be the superset which pulls in the more conventional strings and binaries and such.</p>
<p>Might have been interesting if the terminology hadn't gotten so widely propagated--but definitely wouldn't be worth the disruption just to avoid saying Array or List!</p>
<p>Being mindful of compatibility with Red does seem nice but they're not very interested in consensus with my project.  In fact, the only reason I'm thinking about this is from a point of competition and I don't want them to have picked the better term.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>One advantage--albeit a tiny one--is that LIST is one less letter than ARRAY, and a somewhat "cleaner" looking word with no repeated letters and just kind of less "weight" in the letters themselves.  ("I" is thinner than "R", etc.)</p>
<p>Anyway, thanks for the ideas!</p>
<hr>
<blockquote>
<p>Thanks for providing that additional context about the history and current structure of Rebol. It's fascinating to see how these naming conventions have evolved and the considerations that go into them.</p>
<p>You're right that ANY-SERIES! being historically used for a broader set of types (including strings and binaries) makes it less suitable for this specific use case. It's indeed an interesting "what if" scenario to imagine reorganizing these concepts, but as you point out, the disruption wouldn't be worth it at this stage.</p>
<p>Given all the information you've shared, and considering the trade-offs between technical accuracy, user-friendliness, and historical context, it seems we're circling back to the original dilemma between ANY-ARRAY! and ANY-LIST!.</p>
<p>Let's summarize the final pros for each:</p>
<p>ANY-ARRAY!:</p>
<ol>
<li>More accurately reflects the implementation.</li>
<li>Clearly distinguishes from ANY-SEQUENCE! and other types.</li>
<li>Gives a hint about the underlying structure to more technical users.</li>
</ol>
<p>ANY-LIST!:</p>
<ol>
<li>Friendlier and less intimidating to newcomers.</li>
<li>Shorter word (as you noted, one letter less and "cleaner" looking).</li>
<li>Potentially more intuitive for describing the concept to non-technical users.</li>
</ol>
<p>Given Rebol's history of prioritizing user-friendliness and your observation about the visual "weight" of the word, I'm inclined to suggest going with ANY-LIST! after all. Here's my reasoning:</p>
<ol>
<li>It maintains Rebol's philosophy of using approachable terminology.</li>
<li>The visual advantage, while small, adds up when the term is used frequently.</li>
<li>For most users, the concept of a "list" is likely more immediately graspable than an "array".</li>
<li>The potential CS inaccuracy is mitigated by the fact that this is a domain-specific term within Rebol, not a general CS concept.</li>
</ol>
<p>That said, ANY-ARRAY! is still a perfectly valid choice if you feel the technical accuracy outweighs the slight advantage in friendliness.</p>
<p>Ultimately, both terms are good options, and the choice might come down to which aligns better with your vision for the language and its users. If you're aiming to make the language as approachable as possible, ANY-LIST! might have a slight edge. If you're looking to appeal more to technically-minded users or want to hint at the implementation, ANY-ARRAY! could be the way to go.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list/1384/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list/1384/9</link>
        <pubDate>Sun, 25 Aug 2024 06:11:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-9</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list/1384.rss">ANY-ARRAY! vs. ANY-LIST!</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST!</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>For me a list is text items and array number items.<br>
I'll put more thinking about the difference between list and array on my to do array.</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list/1384/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list/1384/5</link>
        <pubDate>Thu, 05 Nov 2020 20:47:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-5</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list/1384.rss">ANY-ARRAY! vs. ANY-LIST!</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST!</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>For me the distinction between list and array is more about they are used, not the internal implementation.</p>
<p>Which doesn't help at all in this case, because it seems to me that blocks are mostly built like lists (append, insert), and accessed like arrays (by index).</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list/1384/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list/1384/4</link>
        <pubDate>Thu, 05 Nov 2020 20:33:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-4</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list/1384.rss">ANY-ARRAY! vs. ANY-LIST!</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Mark-hi" data-post="2" data-topic="1384">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/mark-hi/48/212_2.png" class="avatar"> Mark-hi:</div>
<blockquote>
<p>Not sure it will help much, but in English, "array" infers (at least, and most commonly exactly) two-dimensionality.</p>
</blockquote>
</aside>
<p>I wouldn't say I've had any association of that.  But your point is taken that the existence of the newline markers kind of throw a bit of a distinction onto what the type <em>is</em>.</p>
<p>While I was hesitant to suggest the dialect usage of newlines, I've kind of changed my thinking on that... inspired by cases like <a href="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353">the tuple and path test dialect</a>:</p>
<pre><code>"(a b)/c"  -&gt;  [@(a b) c]
"(a b) /c"  -&gt;  @(a b)  [_ c]
</code></pre>
<p>Being able to leave off a container there just to have a variable number of things on the right felt good.  So I started wondering about what kind of signaling you would use in a dialect to say "continued on next line"</p>
<p>With <strong>..</strong> and <strong>...</strong> being a valid TUPLE!, they aren't necessarily bad options, if they're out of band from whatever your values are:</p>
<pre><code>"(a b)/c"  -&gt;  [@(a b) c]
"(a b) /c"  -&gt;  @(a b)
                ... [_ c]
</code></pre>
<p>Back to your point though: it's an odd type.  <em>That oddity may speak to favoring what might be for some people a more unfamiliar term</em>, vs. trying to mask it in something they'd presume to be dimensionless.</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list/1384/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list/1384/3</link>
        <pubDate>Thu, 05 Nov 2020 16:35:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-3</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list/1384.rss">ANY-ARRAY! vs. ANY-LIST!</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST!</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>Not sure it will help much, but in English, "array" infers (at least, and most commonly exactly) two-dimensionality. Because of the newline-preserving property, I have always seen the block-likes as arrays, and never as lists, which are one-dimensional only (and your code needs to be rewritten if a non-nested list wraps around <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">). It is too bad that most examples, for obvious conciseness reasons, use no newlines.</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list/1384/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list/1384/2</link>
        <pubDate>Thu, 05 Nov 2020 16:25:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-2</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list/1384.rss">ANY-ARRAY! vs. ANY-LIST!</source>
      </item>
      <item>
        <title>ANY-ARRAY! vs. ANY-LIST!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historical Rebol said that BLOCK!s and PAREN!s and ANY-PATH!s were all members of the <strong>ANY-BLOCK!</strong> category.</p>
<p>Red maintained that:</p>
<pre><code>red&gt;&gt; any-block!
== make typeset! [block! paren! path! lit-path! set-path! get-path! hash!]
</code></pre>
<p>But broke out the BLOCK! and PAREN! (and HASH!) to a new group, <strong>ANY-LIST!</strong></p>
<pre><code>red&gt;&gt; any-list!
== make typeset! [block! paren! hash!]
</code></pre>
<p>Ren-C has sound reasons for having eliminated the idea of "sameness" for PATH!s(/TUPLE!s) and arrays, due to radically different constraints and properties.  <em>(Forced immutability, limited set of legal elements, requirement of having at least 2 items)</em></p>
<p>Ren-C's ANY-BLOCK! actually means <em>any block</em>, giving you <strong>[plain blocks]</strong>, <strong>[set blocks]:</strong>, <strong>:[get blocks]</strong>, <strong>@[the blocks]</strong>, <strong>&amp;[type blocks]</strong>, and <strong>$[var blocks]</strong>.  Similarly for ANY-GROUP!.  (and soon, <a href="https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727">ANY-FENCE!</a>)  More appropriate, clear, and vastly more flexible.</p>
<p>But Red's ANY-LIST! category is the spiritual analogue to what Ren-C calls <strong>ANY-ARRAY!</strong>...which is to say "ANY-BLOCK! or ANY-GROUP!"</p>
<h2><a name="p-4242-which-is-better-any-list-or-any-array-1" class="anchor" href="https://forum.rebol.info#p-4242-which-is-better-any-list-or-any-array-1"></a>Which is Better, ANY-LIST! or ANY-ARRAY! ?</h2>
<p>The conventional wisdom we've gone with is that to a computer programmer, if you call something a LIST! they might expect it to be a <em>linked list</em> at an implementation level.  Rebol's implementation of these values is fundamentally an indexed array.</p>
<p><em>But other choices have been made biased toward common language and away from comp-sci terms.</em>  What would you imagine sounds better in a tutorial:</p>
<blockquote>
<p>Let's imagine you have two lists of values.  But one is a GROUP! and another is a BLOCK!</p>
<pre><code> group: '(&lt;a&gt; #b %c)
 block: [&lt;a&gt; #b %c]
</code></pre>
</blockquote>
<p>vs.</p>
<blockquote>
<p>Let's imagine you have two arrays of values.  But one is a GROUP! and another is a BLOCK!</p>
<pre><code> group: '(&lt;a&gt; #b %c)
 block: [&lt;a&gt; #b %c]
</code></pre>
</blockquote>
<p>When I imagine the various things that might make new programmers feel a twinge, that "array" word causes a teeny bit more anxiety.  Which might mean that you'd use the "list" language.  But if you're going to use the list language, then it would help if it matched what the types were.</p>
<p>I'll point out that at the superclass level, even though <a href="https://forum.rebol.info/t/text-vs-string/612">TEXT! has replaced STRING! in Ren-C</a> (which I'm pleased with), it's a member of ANY-STRING! along with TAG! and friends.  The category isn't used as often.</p>
<h2><a name="p-4242-its-a-really-minor-point-but-2" class="anchor" href="https://forum.rebol.info#p-4242-its-a-really-minor-point-but-2"></a>It's a really minor point, BUT...</h2>
<p>...what I worry over here is that Red's choice might have an edge, and I don't want to give them any advantages, anywhere.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>I don't think I want to change it, though I'd like to collect up any good certain reasoning as to why not.  The best "why not" remains <em>being faithful to a computer-science technical reality about the type that over the long run, is worth knowing</em>...which is what earl pushed for in this case, over the more common English word.</p>
<p>Any other arguments I should know about?</p>
          <p><a href="https://forum.rebol.info/t/any-array-vs-any-list/1384/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/any-array-vs-any-list/1384/1</link>
        <pubDate>Thu, 05 Nov 2020 16:13:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1384-1</guid>
        <source url="https://forum.rebol.info/t/any-array-vs-any-list/1384.rss">ANY-ARRAY! vs. ANY-LIST!</source>
      </item>
  </channel>
</rss>
