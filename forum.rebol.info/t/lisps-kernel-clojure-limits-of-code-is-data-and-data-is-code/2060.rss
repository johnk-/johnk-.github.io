<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Lisps, Kernel, Clojure: limits of &quot;Code is Data and Data is Code&quot;</title>
    <link>https://forum.rebol.info/t/lisps-kernel-clojure-limits-of-code-is-data-and-data-is-code/2060</link>
    <description>I had little-to-no Lisp experience when I encountered Rebol.  I just knew the general concept of &quot;code is data, and data is code&quot;, and assumed they were similar.

But as it turns out, *executing arbitrary structures of code constructed at runtime is taboo in most Lisps.*  This comes under the umbrella of &quot;EVAL&quot;, and [warned against for all the reasons that people say it&#39;s bad in any language](https://stackoverflow.com/questions/2571401/why-exactly-is-eval-evil)...such as why you wouldn&#39;t want to run an arbitrary string of JavaScript code.  About the only exception they seem to consider is the Read-Eval-Print-Loop: **`(loop (print (eval (read))))`**.

There are warnings about the inefficiency of EVAL not being compiled...or the security concerns of running fully arbitrary code that is cobbled together from possibly unsanitized sources (which Rebol deliberately ignores).

If you&#39;re willing to ignore that, you still face the Big Mechanical Problem:

&gt; *&quot;[EVAL] evaluates under the global environment, losing your local context.&quot;*

## But If So... How Do Branches Work in Lisps?

If you have a branching function like EITHER, and it has two legs of the branch with the intent to only run one of them... doesn&#39;t that require selectively running an &quot;EVAL&quot;?  The EITHER receives a condition and then two &quot;blocks&quot; (lists) specifying arbitrary code.  If you lose all your local variables known at the callsite of the EITHER, how can it work?

The answer depends on which Lisp variation you are using.  If you are using a classical Lisp (or Clojure), it simply has a list of exceptions... or &quot;special forms&quot;.  These constructs are treated weirdly by the compiler and it&#39;s just swept under the rug.  For example:

**[Special Forms in Clojure](https://clojure.org/reference/special_forms)**

Another possibility would be if there was some kind of environment capture at the callsite, and the EITHER received this environment as a parameter.  Then it could pass that environment to EVAL...so the eval would happen as if it were at the callsite.

Were that written in a Rebol-like syntax, it would be quoting all its arguments and look like:

     either: func [
         &#39;condition [group!]  ; conditions would have to be grouped
         &#39;true_branch [block!]
         &#39;false_branch [block!]
         &lt;environment&gt; env  ; implicit capture of environment at callsite
     ][
         if do/environment condition env [  ; let&#39;s say IF is a native
             return do/environment true_branch env
         ]
         return do/environment false_branch env
     ]

Now that you&#39;re familiar with the idea, here is that written in how the [&quot;Kernel&quot; Lisp Variant](https://web.cs.wpi.edu/~jshutt/kernel.html) does it:

    ($define! $either
       ($vau (condition true_branch false_branch) env
           ($if (&gt;=? (eval condition env) 0)
               (eval true_branch env)
               (eval false_branch env))))

Notably, **Kernel is considered a very experimental black-sheep of the Lisp world**, due to how much slower this generalized method of thinking is.  Special forms understood by the compiler are the norm.

However, being able to pass environments to EVAL is [seemingly endorsed in modern Scheme](https://www.gnu.org/software/texinfo/gsoc-2017-js-example/kawa/Eval-and-Environments.html).  But that&#39;s not a feature of Clojure.

## Macros Cover Some Monkeying-With-Code-Structure Cases

Lisp Macros can be used for source-to-source transformations, manipulating structure in the free-wheeling way we might think of doing in Rebol.  But that transformation happens only once.

This Reddit question [asks about the difference between macros and receiving arguments unevaluated](https://www.reddit.com/r/lisp/comments/13rmllb/difference_between_function_with_quoted_arguments/):

&gt; *&quot;If we put a backtick in front of the body of a function and we pass arguments quoted when calling it, wouldn&#39;t the function work the same as a macro (except that macros are evaluated in an earlier stage)? What would be the difference in practice? And how does this approach compare to fexpr?&quot;*

The answers outline the difference... macros just run once, and they don&#39;t call EVAL on the code they get... they just return new code which will be evaluated later.  If you wrote something like an EITHER as a macro, you would have to transform it into IFs, and be dependent on the special forms to do the actual &quot;weird&quot; mechanic.

## Isn&#39;t This Kind of Weak for the &quot;Data is Code&quot; Mantra?

It does seem disappointing.  :-/

But Lisps haven&#39;t taken over the world, and maybe this is part of why.</description>
    
    <lastBuildDate>Mon, 13 Nov 2023 05:03:26 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/lisps-kernel-clojure-limits-of-code-is-data-and-data-is-code/2060.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Lisps, Kernel, Clojure: limits of &quot;Code is Data and Data is Code&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I had little-to-no Lisp experience when I encountered Rebol.  I just knew the general concept of "code is data, and data is code", and assumed they were similar.</p>
<p>But as it turns out, <em>executing arbitrary structures of code constructed at runtime is taboo in most Lisps.</em>  This comes under the umbrella of "EVAL", and <a href="https://stackoverflow.com/questions/2571401/why-exactly-is-eval-evil">warned against for all the reasons that people say it's bad in any language</a>...such as why you wouldn't want to run an arbitrary string of JavaScript code.  About the only exception they seem to consider is the Read-Eval-Print-Loop: <strong><code>(loop (print (eval (read))))</code></strong>.</p>
<p>There are warnings about the inefficiency of EVAL not being compiled...or the security concerns of running fully arbitrary code that is cobbled together from possibly unsanitized sources (which Rebol deliberately ignores).</p>
<p>If you're willing to ignore that, you still face the Big Mechanical Problem:</p>
<blockquote>
<p><em>"[EVAL] evaluates under the global environment, losing your local context."</em></p>
</blockquote>
<h2><a name="p-6724-but-if-so-how-do-branches-work-in-lisps-1" class="anchor" href="https://forum.rebol.info#p-6724-but-if-so-how-do-branches-work-in-lisps-1"></a>But If So... How Do Branches Work in Lisps?</h2>
<p>If you have a branching function like EITHER, and it has two legs of the branch with the intent to only run one of them... doesn't that require selectively running an "EVAL"?  The EITHER receives a condition and then two "blocks" (lists) specifying arbitrary code.  If you lose all your local variables known at the callsite of the EITHER, how can it work?</p>
<p>The answer depends on which Lisp variation you are using.  If you are using a classical Lisp (or Clojure), it simply has a list of exceptions... or "special forms".  These constructs are treated weirdly by the compiler and it's just swept under the rug.  For example:</p>
<p><strong><a href="https://clojure.org/reference/special_forms">Special Forms in Clojure</a></strong></p>
<p>Another possibility would be if there was some kind of environment capture at the callsite, and the EITHER received this environment as a parameter.  Then it could pass that environment to EVAL...so the eval would happen as if it were at the callsite.</p>
<p>Were that written in a Rebol-like syntax, it would be quoting all its arguments and look like:</p>
<pre><code> either: func [
     'condition [group!]  ; conditions would have to be grouped
     'true_branch [block!]
     'false_branch [block!]
     &lt;environment&gt; env  ; implicit capture of environment at callsite
 ][
     if do/environment condition env [  ; let's say IF is a native
         return do/environment true_branch env
     ]
     return do/environment false_branch env
 ]
</code></pre>
<p>Now that you're familiar with the idea, here is that written in how the <a href="https://web.cs.wpi.edu/~jshutt/kernel.html">"Kernel" Lisp Variant</a> does it:</p>
<pre><code>($define! $either
   ($vau (condition true_branch false_branch) env
       ($if (&gt;=? (eval condition env) 0)
           (eval true_branch env)
           (eval false_branch env))))
</code></pre>
<p>Notably, <strong>Kernel is considered a very experimental black-sheep of the Lisp world</strong>, due to how much slower this generalized method of thinking is.  Special forms understood by the compiler are the norm.</p>
<p>However, being able to pass environments to EVAL is <a href="https://www.gnu.org/software/texinfo/gsoc-2017-js-example/kawa/Eval-and-Environments.html">seemingly endorsed in modern Scheme</a>.  But that's not a feature of Clojure.</p>
<h2><a name="p-6724-macros-cover-some-monkeying-with-code-structure-cases-2" class="anchor" href="https://forum.rebol.info#p-6724-macros-cover-some-monkeying-with-code-structure-cases-2"></a>Macros Cover Some Monkeying-With-Code-Structure Cases</h2>
<p>Lisp Macros can be used for source-to-source transformations, manipulating structure in the free-wheeling way we might think of doing in Rebol.  But that transformation happens only once.</p>
<p>This Reddit question <a href="https://www.reddit.com/r/lisp/comments/13rmllb/difference_between_function_with_quoted_arguments/">asks about the difference between macros and receiving arguments unevaluated</a>:</p>
<blockquote>
<p><em>"If we put a backtick in front of the body of a function and we pass arguments quoted when calling it, wouldn't the function work the same as a macro (except that macros are evaluated in an earlier stage)? What would be the difference in practice? And how does this approach compare to fexpr?"</em></p>
</blockquote>
<p>The answers outline the difference... macros just run once, and they don't call EVAL on the code they get... they just return new code which will be evaluated later.  If you wrote something like an EITHER as a macro, you would have to transform it into IFs, and be dependent on the special forms to do the actual "weird" mechanic.</p>
<h2><a name="p-6724-isnt-this-kind-of-weak-for-the-data-is-code-mantra-3" class="anchor" href="https://forum.rebol.info#p-6724-isnt-this-kind-of-weak-for-the-data-is-code-mantra-3"></a>Isn't This Kind of Weak for the "Data is Code" Mantra?</h2>
<p>It does seem disappointing.  :-/</p>
<p>But Lisps haven't taken over the world, and maybe this is part of why.</p>
          <p><a href="https://forum.rebol.info/t/lisps-kernel-clojure-limits-of-code-is-data-and-data-is-code/2060/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/lisps-kernel-clojure-limits-of-code-is-data-and-data-is-code/2060/1</link>
        <pubDate>Sat, 11 Nov 2023 21:52:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2060-1</guid>
        <source url="https://forum.rebol.info/t/lisps-kernel-clojure-limits-of-code-is-data-and-data-is-code/2060.rss">Lisps, Kernel, Clojure: limits of &quot;Code is Data and Data is Code&quot;</source>
      </item>
  </channel>
</rss>
