<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should NOTHING and NIHIL be Offered as Named Actions?</title>
    <link>https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234</link>
    <description>Sometimes it&#39;s nice to say things like **`return blank`** instead of **`return _`**

It can just look better.  So there are named versions of a few symbolic things, like BLANK and TRASH.

    &gt;&gt; blank
    == _

    &gt;&gt; trash
    == ~

But there are also named versions of NIHIL and NOTHING.

    &gt;&gt; nothing  ; no console display

    &gt;&gt; nihil
    == ~[]~  ; anti


But how does that work?  NIHIL can&#39;t be stored in a variable, it&#39;s an unstable isotope.  And NOTHING represents an unset variable, so variables containing it would error.

So of course, these aren&#39;t variables holding the states... they&#39;re variables holding actions, and they return the state.  So:

    &gt;&gt; nada: nothing  ; I&#39;d like to alias this for spanish, please...

    &gt;&gt; nada
    ** Script Error: nada is ~ antiform (see ^(...) and GET/ANY)

And you might be surprised at the result of GET:

    &gt;&gt; get $nihil
    == ~#[frame! []]~ ; anti  (hey, that&#39;s not nihil!)

Does this sort of suggest that we&#39;re doing people a disservice by suggesting you can &quot;name&quot; these particular antiforms?

Would it be better if we just said you&#39;re supposed to use quasiforms if you want to generate these antiforms?

    &gt;&gt; ~

    &gt;&gt; ~[]~
    == ~[]~  ; anti

It&#39;s easier to not name them now, and add the name later, vs. provide the name and take it away.

Also--not that it really matters--but it&#39;s faster.  :-)  The evaluator can tweak the quoting byte to antiform on those literals faster than making a function call.</description>
    
    <lastBuildDate>Sun, 29 Sep 2024 20:03:10 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should NOTHING and NIHIL be Offered as Named Actions?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; 1 + 2 xxx
== 3

&gt;&gt; action? get $xxx
== ~okay~  ; anti  ("and I expected that!")
</code></pre>
<p>Solve for XXX.</p>
</blockquote>
</aside>
<p>Maybe <strong><code>NO-OP</code></strong> ? (or just <strong><code>noop</code></strong> if that is common-enough terminology to where the hyphen is dumb, which probably is the case)</p>
<p>I don't know if no-op implies invisibility in particular.  If not then it could be what generates nothing, instead.</p>
<pre><code>&gt;&gt; 1 + 2 noop
== ~  ; anti

&gt;&gt; 1 + 2 noop
== 3
</code></pre>
<p>The second may be more surprising.</p>
<p>It may be missing a chance for being more informative with a tripwire:</p>
<pre><code>&gt;&gt; 1 + 2 no-op
== ~&lt;no-op&gt;~  ; anti
</code></pre>
<p>That's kind of neat, in a "this space intentionally left blank" kind of way.</p>
<p>I might like the hyphenated form.  Anyway, this doesn't solve the original question but does offer a way to make an ornery value with a single-arity word...which couldn't be fetched from a word reference...and yet you wouldn't be surprised that it is a function and not the value...</p>
<p>...although, the risk of people thinking it's a "no op value" is greater if it returns <code>~&lt;no-op&gt;~</code> than if it just returns nothing.  We could help by not having a no-op? tester that says <code>~&lt;no-op&gt;~</code> is a "no-op".  <img src="https://forum.rebol.info/images/emoji/twitter/face_with_diagonal_mouth.png?v=12" title=":face_with_diagonal_mouth:" class="emoji" alt=":face_with_diagonal_mouth:" loading="lazy" width="20" height="20"></p>
<p>Probably just returning plain nothing is the best way to avoid confusion.  Anyway, I think I like that.</p>
<pre><code>&gt;&gt; no-op
== ~  ; anti
</code></pre>
<p>Don't know about the hyphen.  "literate" but as it's an abbreviation already, kind of annoying.  We know what a noop is.</p>
          <p><a href="https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234/4</link>
        <pubDate>Sun, 29 Sep 2024 19:53:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2234-4</guid>
        <source url="https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234.rss">Should NOTHING and NIHIL be Offered as Named Actions?</source>
      </item>
      <item>
        <title>Should NOTHING and NIHIL be Offered as Named Actions?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Applying this change, I think it's an improvement.  It makes the nihils stand out, and I think the symbol does a good job of calling attention to the unusual state.  Despite being symbolic, the result is "lighter" in a way...and a quicker way to get the information.</p>
<p>Compare:</p>
<pre><code>comment: func* [
    "Ignores the argument value, but does no evaluation (see also ELIDE)"

    return: [nihil?]
    @discarded "Literal value to be ignored"
        [any-list? any-utf8? binary! any-scalar?]
][
    return nihil
]
</code></pre>
<p>With:</p>
<pre><code>comment: func* [
    "Ignores the argument value, but does no evaluation (see also ELIDE)"

    return: [~[]~]
    @discarded "Literal value to be ignored"
        [any-list? any-utf8? binary! any-scalar?]
][
    return ~[]~
]
</code></pre>
<p>If you've learned what it means, the latter is much easier to scan.  And given NIHIL's somewhat odd properties (causing an error if you try to assign it to a variable) it's nice to see where they are.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><em>I think the disadvantages outweigh any possible advantages of defining functions that synthesize these states.</em></p>
<p>Just teach people what <strong><code>~</code></strong> and <strong><code>~[]~</code></strong> are, and that's that.</p>
</blockquote>
</aside>
<p>So this doesn't mean that there can't be an arity-0 function that vaporizes.</p>
<p>We just don't want to call it "nihil" so it conflates with the official name of the state.  It has to be something you expect to be a function.</p>
<p>What would an arity-0 comment be called that gives the connotation "I am a function that's running and vanishing"?</p>
<pre><code>&gt;&gt; 1 + 2 xxx
== 3

&gt;&gt; action? get $xxx
== ~okay~  ; anti  ("and I expected that!")
</code></pre>
<p>Solve for XXX.</p>
<p>In practice, I don't know how often this would be used...just musing about what it would be called if it existed.  I am okay calling it <strong><code>~[]~</code></strong> (the quasiform)</p>
          <p><a href="https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234/3</link>
        <pubDate>Tue, 24 Sep 2024 21:59:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2234-3</guid>
        <source url="https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234.rss">Should NOTHING and NIHIL be Offered as Named Actions?</source>
      </item>
      <item>
        <title>Should NOTHING and NIHIL be Offered as Named Actions?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2234">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Does this sort of suggest that we're doing people a disservice by suggesting you can "name" these particular antiforms?</p>
</blockquote>
</aside>
<p>I'm pretty strongly leaning toward thinking it is--indeed--a disservice.</p>
<p>I had some definitions that were useful during the time where everything was shifting around:</p>
<pre><code>void': meta void
null': meta null
okay': meta okay
trash': meta trash
nothing': meta nothing  ; where NOTHING is a function
nihil': meta nihil  ; where NIHIL is a function
</code></pre>
<p>Today, you can effectively get <strong><code>void'</code></strong> by just saying <strong><code>^void</code></strong> and it's not subject to any ambiguity.</p>
<p>(Ending a variable name in <strong><code>'</code></strong> can mean anything you want.  Leading a variable with ^ will fetch its meta version unconditionally.)</p>
<p>So I'd like to wipe these out and just use <strong><code>[^void ^null ^okay ^trash]</code></strong>.</p>
<p>But this won't work for <strong><code>^nihil</code></strong> or <strong><code>^nothing</code></strong>, because you'd get a quasi-frame...since those are not states you can fetch from a value-bearing WORD!.</p>
<p><em>I think the disadvantages outweigh any possible advantages of defining functions that synthesize these states.</em></p>
<p>Just teach people what <strong><code>~</code></strong> and <strong><code>~[]~</code></strong> are, and that's that.</p>
<p>Technically you can still define NOTHING as just being an unset variable, but people could only use it as <strong><code>^nothing</code></strong> or with <strong><code>get/any $nothing</code></strong> because it really is a variable that holds nothing...</p>
          <p><a href="https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234/2</link>
        <pubDate>Tue, 24 Sep 2024 14:55:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2234-2</guid>
        <source url="https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234.rss">Should NOTHING and NIHIL be Offered as Named Actions?</source>
      </item>
      <item>
        <title>Should NOTHING and NIHIL be Offered as Named Actions?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Sometimes it's nice to say things like <strong><code>return blank</code></strong> instead of <strong><code>return _</code></strong></p>
<p>It can just look better.  So there are named versions of a few symbolic things, like BLANK and TRASH.</p>
<pre><code>&gt;&gt; blank
== _

&gt;&gt; trash
== ~
</code></pre>
<p>But there are also named versions of NIHIL and NOTHING.</p>
<pre><code>&gt;&gt; nothing  ; no console display

&gt;&gt; nihil
== ~[]~  ; anti
</code></pre>
<p>But how does that work?  NIHIL can't be stored in a variable, it's an unstable isotope.  And NOTHING represents an unset variable, so variables containing it would error.</p>
<p>So of course, these aren't variables holding the states... they're variables holding actions, and they return the state.  So:</p>
<pre><code>&gt;&gt; nada: nothing  ; I'd like to alias this for spanish, please...

&gt;&gt; nada
** Script Error: nada is ~ antiform (see ^(...) and GET/ANY)
</code></pre>
<p>And you might be surprised at the result of GET:</p>
<pre><code>&gt;&gt; get $nihil
== ~#[frame! []]~ ; anti  (hey, that's not nihil!)
</code></pre>
<p>Does this sort of suggest that we're doing people a disservice by suggesting you can "name" these particular antiforms?</p>
<p>Would it be better if we just said you're supposed to use quasiforms if you want to generate these antiforms?</p>
<pre><code>&gt;&gt; ~

&gt;&gt; ~[]~
== ~[]~  ; anti
</code></pre>
<p>It's easier to not name them now, and add the name later, vs. provide the name and take it away.</p>
<p>Also--not that it really matters--but it's faster.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20">  The evaluator can tweak the quoting byte to antiform on those literals faster than making a function call.</p>
          <p><a href="https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234/1</link>
        <pubDate>Fri, 30 Aug 2024 18:12:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2234-1</guid>
        <source url="https://forum.rebol.info/t/should-nothing-and-nihil-be-offered-as-named-actions/2234.rss">Should NOTHING and NIHIL be Offered as Named Actions?</source>
      </item>
  </channel>
</rss>
