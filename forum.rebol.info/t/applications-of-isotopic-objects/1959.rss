<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Applications of Isotopic Objects</title>
    <link>https://forum.rebol.info/t/applications-of-isotopic-objects/1959</link>
    <description>Consider the example of a function that might want to have two modes... one that prints out readable information for the console, and another that keeps the data in easily processable form.

Traditionally you might think of controlling this with a refinement:

    &gt;&gt; stats
    -------------------
    Column 1   Column 2
    -------------------
    Alpha      10
    Beta       20

    &gt;&gt; stats/only
    == [
        [Alpha 10]
        [Beta 20
    ]

But then I wondered: what if there was only one isotopic result...that wrapped the data with functions?  So long as things stayed isotopic, you&#39;d be able to get at the functions.  But if it reified it would become the data.

    &gt;&gt; ^ stats
    == ~#[object! [... reify: ... form: ...]]~  ; isotope

    &gt;&gt; compose [statistics: (spread stats)]
    == [statistics: [Alpha 10] [Beta 20]]

    &gt;&gt; stats
    -------------------
    Column 1   Column 2
    -------------------
    Alpha      10
    Beta       20

    &gt;&gt; if true [print stats, &lt;PRINT could react to FORM also&gt;]
    -------------------
    Column 1   Column 2
    -------------------
    Alpha      10
    Beta       20
    == &lt;PRINT could react to FORM also&gt;

So PRINT would be special, and instead of allowing its argument to reify normally it would specifically examine isotopic arguments to see if they could FORM.

In this case, the isotopic thing needs to be able to do two things: FORM or REIFY.  But maybe it could do more things, if you asked it?  And maybe no particular methods are mandatory.  Something that doesn&#39;t know how to REIFY just won&#39;t do that.

**This looks kickass.**</description>
    
    <lastBuildDate>Thu, 08 Sep 2022 12:29:06 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Applications of Isotopic Objects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>TL;DR: This establishes a very simple rule for THEN and ELSE.  If you don't like the consequences of the rule, you make an object that spells out what you want the THEN and ELSE behavior to be.  That object can also say how it will vaporize itself when not used with THENs or ELSEs...and when it does vanish in a puff of smoke it can turn into a multiple-return-value pack.</em></p>
<hr>
<p>Building on the emerging art of <strong>~[multi return packs]~</strong> and isotopic objects, I'm coming up with what <em>may</em> be a resolution to the THEN and ELSE issues surrounding NULL and VOID.</p>
<ul>
<li>
<p>As a default behavior, a "pure null" and a "pure void" are not reacted to by THEN.  It will pass them through and allow an ELSE to act on them.</p>
</li>
<li>
<p>If a NULL or VOID appear as part of a multi-return parameter pack, they <em>do not count</em> as "nothing having happened".  So THEN will react to a multi-return parameter pack--even if its first element is null or void.</p>
<ul>
<li>
<p>This means those writing multi-return functions intended to work with ELSE and THEN should <em>not</em> set their multi-returns if the overall result is VOID or NULL.</p>
</li>
<li>
<p>I've implemented this as the default behavior for <strong>return void</strong> and <strong>return null</strong> when using the auto-proxying features of function.  FUNC will not do the proxying--just as it does not do when you return a definitional (raised) error.</p>
<ul>
<li>You can think of this as being consistent with NULL being thought of as "soft failure"... if the function "fails" then the outputs are not written.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>The base case of parameter packs of <strong><code>~[_]~</code></strong> and <strong><code>~[~]~</code></strong> being single packs of "meta null" and "meta void" are also THEN-reactive and not ELSE-reactive, regardless of not having other parameters in the pack:</p>
<pre><code>&gt;&gt; if true [null]
== ~[_]~  ; isotope

&gt;&gt; x: if true [null]
; null

&gt;&gt; if true [null] then [print "NULL-in-multi-pack is not a NULL to THEN"]
NULL-in-multi-pack is not a NULL to THEN
</code></pre>
</li>
<li>
<p>These cheap mechanical rules should work for most cases... but lazy objects (object isotopes) can step in to fill in the gaps if there's a good ergonomic reason to bend these rules.</p>
</li>
</ul>
<h2>Solving A Tricky Case: TRAP</h2>
<p>The way I had defined TRAP, it's a good example of something that didn't want to follow these new rules.</p>
<p>TRAP was a multi-return function, whose main result is an ERROR!, or NULL if not an error.  But in the case of it being not an error, then a secondary return result would come back from it:</p>
<pre><code>&gt;&gt; [error result]: trap [1 / 0]
== make error! [...zero-divide...]

&gt;&gt; result
; null

&gt;&gt; [error result]: trap [1000 + 20]
; null

&gt;&gt; result
== 1020
</code></pre>
<p>Expecting that breaks the rule: <strong>you can't return any multi-return results if you are returning pure null</strong>.  But if it returned a heavy NULL you couldn't write code like this:</p>
<pre><code>trap [1 / 0] then e -&gt; [print ["Had an error" e.id"]]
</code></pre>
<p>Because if your code didn't have an error, it would still run the THEN branch:</p>
<pre><code>&gt;&gt; trap [1000 + 20]
== ~[_]~  ; isotope

&gt;&gt; trap [1000 + 20] then [print "No error, but we still get TRAP THEN"]
No error, but we still get TRAP THEN
</code></pre>
<p>So to get a TRAP that will work in this fashion, you need a lazy object.  And you can even make a lazy object that if asked to resolve itself, creates a parameter pack so you get the [error result]: assignability.</p>
<p>Here we can build that on top of ENTRAP (which returns a single value that's either an ERROR!, or the ^META result value)</p>
<pre><code>trap: func [
    return: [&lt;opt&gt; any-value!]
    code [block!]
    &lt;local&gt; result
][
    if error? result: entrap code [
        return/forward pack [result null]  ; /FORWARD stops decay to result
    ]

    return isotopic make object! [
        else: branch -&gt; [
            (pack [unmeta result]) then (:branch)  ; packs null, so it would run
        ]
        reify: [pack [null unmeta result]]
    ]
]
</code></pre>
<p>Believe it or not, this actually does work.  With THEN and ELSE:</p>
<pre><code> &gt;&gt; trap [1000 + 20] then e -&gt; [print ["E" e.id]] else r -&gt; [print ["R" r]]
 R 1020

 &gt;&gt; trap [1 / 0] then e -&gt; [print ["E" e.id]] else r -&gt; [print ["R" r]]
 E zero-divide
</code></pre>
<p>And for unpacking the values:</p>
<pre><code>&gt;&gt; [error result]: trap [1 / 0]
== make error! [
    type: 'Math
    id: 'zero-divide
    message: "attempt to divide by zero"
    near: [1 / 0 **]
    where: [/ entrap trap+ console]
    file: _
    line: 1
]

&gt;&gt; result
; null

&gt;&gt; [error result]: trap [1000 + 20]
; null

&gt;&gt; result
== 1020
</code></pre>
<p>So <a class="mention" href="/u/rgchris">@rgchris</a> can be happy because that is usable in a historically conventional way:</p>
<pre><code>either [error result]: trap [
   ... your code here ...
][
   ... code that reads ERROR here...
][
   ... code that reads RESULT here...
]
</code></pre>
<p>What's great here is how ENTRAP is an agnostic building block, which can then be wrapped and packaged to one's liking.</p>
<h2>Not Trivial To Understand, But Also Not Rocket Science</h2>
<p>These are concerns for the implementers of things like TRAP and PARSE--not for the users.  So it's important to see it in that light.  It's power for those who need it to get the usage patterns they want.</p>
<p>The RETURN/FORWARD is simply to address the normal behavior of decay of multi-return packs to the first item.</p>
<p>When you write <strong>x: some-function ...</strong> then you're only getting the first parameter in a pack.  We don't want <strong>return some-function ...</strong> to automatically turn your function into a multi-return function just because the SOME-FUNCTION you call happened to offer more outputs.</p>
<p>(I use the term /FORWARD in the sense of "forwarding"... whatever the results were, return them verbatim.)</p>
<p>Hopefully I don't discover any fatal flaws, because it's a really neat design--and I think these examples are only scratching the surface.</p>
          <p><a href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/applications-of-isotopic-objects/1959/5</link>
        <pubDate>Thu, 08 Sep 2022 01:16:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1959-5</guid>
        <source url="https://forum.rebol.info/t/applications-of-isotopic-objects/1959.rss">Applications of Isotopic Objects</source>
      </item>
      <item>
        <title>Applications of Isotopic Objects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>This can also be applied to the example of wanting COLLECT with no KEEPs to have special behavior with THEN and ELSE, while still becoming an empty block in the normal case.</p>
<p>If COLLECT wants to indicate an empty block, it does this:</p>
<pre><code>return isotopic make object! [
    else: branch -&gt; [if copy [] (branch)]  ; again using IF for branch-with-args
    reify: [copy []]
]
</code></pre>
<p>So that gives you:</p>
<pre><code>&gt;&gt; collect [print "no keeps (but no ELSE, so it reifies)!"]
no keeps (but no ELSE, so it reifies)!
== []

&gt;&gt; collect [print "no keeps!"] else [print "and the else branch ran!" copy [x]]
no keeps!
and the else branch ran!
== [x]

&gt;&gt; collect [keep &lt;keeping&gt;] else [print "So no else branch!"]
== [&lt;keeping&gt;]
</code></pre>
<p>It's all very new and I'm trying to put together enough examples to make solid reasoning about it (what if you put an isotopic object inside a multi-return pack?  what if something reifies to another isotopic object or multi-return?)</p>
<p>So no shortage of questions.  But that doesn't mean those questions can't have reasonable answers for what's legal and what isn't, and I think it points in a very promising direction.</p>
          <p><a href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/applications-of-isotopic-objects/1959/4</link>
        <pubDate>Wed, 07 Sep 2022 01:28:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1959-4</guid>
        <source url="https://forum.rebol.info/t/applications-of-isotopic-objects/1959.rss">Applications of Isotopic Objects</source>
      </item>
      <item>
        <title>Applications of Isotopic Objects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1959">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Under the design I'm using, I've gotten this to work:</p>
</blockquote>
</aside>
<p>If  you're curious what the parse wrapper looks like at the moment, it's pretty small.</p>
<p>PARSE* is the core parse that either raises an error isotope or gives you the value(s) returned by the BLOCK! combinator that kicked off the parse.</p>
<p>So that is ENCLOSE'd, and run with DO F:</p>
<pre><code>parse: enclose :parse* func [f &lt;local&gt; synthesized'] [
    [^synthesized']: do f catch e -&gt; [
        ;
        ; If the parse failed, we wrap it in a "lazy object" that will
        ; fail if you don't connect it to a then or else branch.
        ;
        return isotopic make object! compose [
            else: '(func [branch [any-branch!]] [if e (:branch)])  ; see [1]
            reify: '([raise e])
        ]
    ]
    ; The common case of wanting to transmit null or void states to a
    ; THEN are solved in a more lightweight fashion using isotopes, that
    ; save the trouble/cost of making objects.
    ;
    switch synthesized' [
        '~ [return/forward ~()~]
        '_ [return/forward ~[]~]
    ]
    return/forward unmeta synthesized'  ; see [2]
]
</code></pre>
<ol>
<li>
<p>It uses <strong><code>if e (:branch)</code></strong> to run the branch, because I haven't thought of a good name for doing branches "with" an argument yet.  And since errors are always truthy, it will always run that branch (whatever type it is) and pass it the error.  Some DO-like routine that took a /WITH argument would be clearer, but there's a lot up in the air with the interface on DO and EVAL so this is what's done for now.</p>
</li>
<li>
<p>The special RETURN/FORWARD is used for the new multi-returns, when you want to say that you want to return the parameter pack as a pack...vs having it just become the first element of that pack.  This new multi-return method is just being tested, but working very well so far!</p>
</li>
</ol>
          <p><a href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/applications-of-isotopic-objects/1959/3</link>
        <pubDate>Sun, 04 Sep 2022 21:50:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1959-3</guid>
        <source url="https://forum.rebol.info/t/applications-of-isotopic-objects/1959.rss">Applications of Isotopic Objects</source>
      </item>
      <item>
        <title>Applications of Isotopic Objects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1959">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This looks kickass.</p>
</blockquote>
</aside>
<h2><em><strong>Definitely kickass.</strong></em></h2>
<p>In looking for a new interface with "informative errors by default", I wanted a non-successful parse to return a value, but not run THEN.  ELSE seemed like it wouldn't be a candidate.  But by taking advantage of the idea of <a href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959">Isotopic Objects</a>, it's possible to make a novel version of something like JavaScript's "THEN-able Objects":</p>
<p><a href="https://masteringjs.io/tutorials/fundamentals/thenable" class="inline-onebox">Thenables in JavaScript - Mastering JS</a></p>
<p><em>(Isotopes have a key advantage, in that they fit into a greater story of how not to be mistaken for regular values, as part of a holistic system of what it means to be "isotopic" yet still "meta/quasi/reifiable".  Also of course, you can mix them with the ordinary language "keywords" so the syntax can be far more pleasant!)</em></p>
<p>Under the design I'm using, I've gotten this to work:</p>
<pre><code>&gt;&gt; parse "aaa" [some "a" (1020)] then x -&gt; [print ["Success:" x else ["null"]]]
Success: 1020

&gt;&gt; parse "aaa" [some "a" (null)] then x -&gt; [print ["Success:" x else ["null"]]]
Success: null   ; &lt;-- look, THEN got a NULL!

&gt;&gt; parse "aaa" [some "b" (&lt;not reached&gt;)] else e -&gt; [print ["Fail:" e.message]]
Fail: BLOCK! combinator at tail or not thru  ; look, ELSE got a value! ^--

&gt;&gt; result: parse "aaa" [some "b" (&lt;xxx&gt;)]
** Error: BLOCK! combinator at tail or not thru
** Where: ...
** Near: [...]  ; error information is pretty meaningless at the moment, omitted
** File: ...    ; but returning *any* error vs just NULL or FALSE is a start!
** Line: ...    ; (there's a lot of means for improvement now!)
</code></pre>
<p>The case of THEN being able to receive a NULL is handled by means of isotopic mechanisms already discussed elsewhere <em>(a "heavy null", currently represented by an empty block isotope, serves the purpose)</em></p>
<p>What's new-as-of-today here is:</p>
<ul>
<li>
<p><strong>ELSE is able to receive a value.</strong>  What's happening here is that a failing PARSE returns an isotopic object, and it has an ELSE method on it.  THEN knows to skip this object and pass it on.  <em>But ELSE will run the method and pass it the branch.</em>  It can do additional processing, but in this case what it wants to do is to pass in the error as an argument.  So ELSE gets it.</p>
</li>
<li>
<p><strong>If you don't use an ELSE with a failed PARSE showing you knew it didn't match, it will raise an error.</strong>  This is because the isotopic object returned by PARSE on the failure case has another method... REIFY... for when it's in a context being forced to a value.  And it just raises the error at that moment.</p>
</li>
</ul>
<p>I think the example above shows exactly what I'm looking for.  This feels like only the beginning of what's going to be possible with object isotopes...</p>
          <p><a href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/applications-of-isotopic-objects/1959/2</link>
        <pubDate>Sun, 04 Sep 2022 21:26:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1959-2</guid>
        <source url="https://forum.rebol.info/t/applications-of-isotopic-objects/1959.rss">Applications of Isotopic Objects</source>
      </item>
      <item>
        <title>Applications of Isotopic Objects</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Consider the example of a function that might want to have two modes... one that prints out readable information for the console, and another that keeps the data in easily processable form.</p>
<p>Traditionally you might think of controlling this with a refinement:</p>
<pre><code>&gt;&gt; stats
-------------------
Column 1   Column 2
-------------------
Alpha      10
Beta       20

&gt;&gt; stats/only
== [
    [Alpha 10]
    [Beta 20
]
</code></pre>
<p>But then I wondered: what if there was only one isotopic result...that wrapped the data with functions?  So long as things stayed isotopic, you'd be able to get at the functions.  But if it reified it would become the data.</p>
<pre><code>&gt;&gt; ^ stats
== ~#[object! [... reify: ... form: ...]]~  ; isotope

&gt;&gt; compose [statistics: (spread stats)]
== [statistics: [Alpha 10] [Beta 20]]

&gt;&gt; stats
-------------------
Column 1   Column 2
-------------------
Alpha      10
Beta       20

&gt;&gt; if true [print stats, &lt;PRINT could react to FORM also&gt;]
-------------------
Column 1   Column 2
-------------------
Alpha      10
Beta       20
== &lt;PRINT could react to FORM also&gt;
</code></pre>
<p>So PRINT would be special, and instead of allowing its argument to reify normally it would specifically examine isotopic arguments to see if they could FORM.</p>
<p>In this case, the isotopic thing needs to be able to do two things: FORM or REIFY.  But maybe it could do more things, if you asked it?  And maybe no particular methods are mandatory.  Something that doesn't know how to REIFY just won't do that.</p>
<p><strong>This looks kickass.</strong></p>
          <p><a href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/applications-of-isotopic-objects/1959/1</link>
        <pubDate>Sat, 03 Sep 2022 11:48:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1959-1</guid>
        <source url="https://forum.rebol.info/t/applications-of-isotopic-objects/1959.rss">Applications of Isotopic Objects</source>
      </item>
  </channel>
</rss>
