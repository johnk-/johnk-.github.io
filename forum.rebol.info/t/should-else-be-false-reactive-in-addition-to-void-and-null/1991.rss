<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should ELSE be FALSE-reactive? (in addition to void and null?)</title>
    <link>https://forum.rebol.info/t/should-else-be-false-reactive-in-addition-to-void-and-null/1991</link>
    <description>Historically one might have asked why ELSE doesn&#39;t think falseness is something worth reacting to:

    &gt;&gt; 1 = 2 else [print &quot;Why not print?&quot;]
    Why not print?  ; seems not so bad, right?

The idea was panned, because `#[false]` was *a value* and ELSE&#39;s main job was to react to the situation of a branching construct that didn&#39;t produce a value:

    &gt;&gt; math-broken: if 1 = 1 [false] else [true]
    == #[false]  ; if this were #[true], math seems broken

But now, the actual falsey `~false~` state is isotopic.  And some years of struggle with the parallel problem of what to do with branches that returned &quot;non-values&quot; bore curious fruit: a box that could hold a &quot;non-value&quot; like a null. 

    &gt;&gt; if false [null]
    == ~null~  ; isotope
         ^-- there is no result

    &gt;&gt; if true [null]
    == ~[~null~]~  ; isotope
         ^-- there is a result and it is null

Isotopic blocks containing one element will decay to that one element in most situations.  But ELSE is sensitive to the difference via a ^META parameter.  If someone has gone through the effort to box up a null or void vs leave it as a plain isotope, the ELSE assumes it&#39;s a meaningful result and should pass it on.  And conditional expressions know to do this; they box up nulls and voids if they are produced by executing branches.

**The same technique could work for false.**

    &gt;&gt; if 1 = 1 [false]
    == ~[~false~]~  ; isotope

    &gt;&gt; if 1 = 1 [false] else [true]
    == ~[~false~]~  ; isotope

    &gt;&gt; math-broken: if 1 = 1 [false] else [true]
    == ~false~  ; isotope

It&#39;s barely any additional work for conditionals to do on top of what they&#39;re doing already.  Although it can result in branches producing false to cost a small bit more than they do today *(I wouldn&#39;t worry about it, these single element boxes could be optimized if it was a problem)*

But I don&#39;t know how useful it would actually be.  :man_shrugging:  Just writing down the observation.</description>
    
    <lastBuildDate>Fri, 02 Dec 2022 12:20:12 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/should-else-be-false-reactive-in-addition-to-void-and-null/1991.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should ELSE be FALSE-reactive? (in addition to void and null?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Another idea that has been simmering in my head: <strong>What if ELSE was ERROR!-isotope reactive, but only if you use it with a function that takes an argument?</strong></p>
<p>Today that requires you use EXCEPT.</p>
<pre><code>&gt;&gt; if true [1 / 0] except e -&gt; [print mold e]
make error! [
    type: 'Math
    id: 'zero-divide
    message: "attempt to divide by zero"
    near: [1 / 0 **]
    where: [/ if _]
    file: ~null~
    line: 1
]
</code></pre>
<p>But what if this happened?</p>
<pre><code>&gt;&gt; if true [1 / 0] else [print "not reached"]
** Math Error: attempt to divide by zero
** Where: / if
** Near: [1 / 0 **]
** Line: 1

&gt;&gt; if true [1 / 0] else e -&gt; [print mold e]
make error! [
    type: 'Math
    id: 'zero-divide
    message: "attempt to divide by zero"
    near: [1 / 0 **]
    where: [/ if _]
    file: ~null~
    line: 1
]
</code></pre>
<p>This would conflate errors with null and void.  But maybe that's all right.</p>
<p>In the case of UPARSE, pure null or pure void is not returned by combinators at this time.  So you'd be able to write combinators using ELSE instead of the uglier EXCEPT.  And I guess if you didn't actually feel like giving a full error explaining why you were failing a parse combinator, null isn't a terrible shorthand for "I am lazy"...but we'd have to allow <code>raise null</code> to work as just returning null.</p>
          <p><a href="https://forum.rebol.info/t/should-else-be-false-reactive-in-addition-to-void-and-null/1991/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-else-be-false-reactive-in-addition-to-void-and-null/1991/2</link>
        <pubDate>Fri, 02 Dec 2022 12:20:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1991-2</guid>
        <source url="https://forum.rebol.info/t/should-else-be-false-reactive-in-addition-to-void-and-null/1991.rss">Should ELSE be FALSE-reactive? (in addition to void and null?)</source>
      </item>
      <item>
        <title>Should ELSE be FALSE-reactive? (in addition to void and null?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically one might have asked why ELSE doesn't think falseness is something worth reacting to:</p>
<pre><code>&gt;&gt; 1 = 2 else [print "Why not print?"]
Why not print?  ; seems not so bad, right?
</code></pre>
<p>The idea was panned, because <code>#[false]</code> was <em>a value</em> and ELSE's main job was to react to the situation of a branching construct that didn't produce a value:</p>
<pre><code>&gt;&gt; math-broken: if 1 = 1 [false] else [true]
== #[false]  ; if this were #[true], math seems broken
</code></pre>
<p>But now, the actual falsey <code>~false~</code> state is isotopic.  And some years of struggle with the parallel problem of what to do with branches that returned "non-values" bore curious fruit: a box that could hold a "non-value" like a null.</p>
<pre><code>&gt;&gt; if false [null]
== ~null~  ; isotope
     ^-- there is no result

&gt;&gt; if true [null]
== ~[~null~]~  ; isotope
     ^-- there is a result and it is null
</code></pre>
<p>Isotopic blocks containing one element will decay to that one element in most situations.  But ELSE is sensitive to the difference via a ^META parameter.  If someone has gone through the effort to box up a null or void vs leave it as a plain isotope, the ELSE assumes it's a meaningful result and should pass it on.  And conditional expressions know to do this; they box up nulls and voids if they are produced by executing branches.</p>
<p><strong>The same technique could work for false.</strong></p>
<pre><code>&gt;&gt; if 1 = 1 [false]
== ~[~false~]~  ; isotope

&gt;&gt; if 1 = 1 [false] else [true]
== ~[~false~]~  ; isotope

&gt;&gt; math-broken: if 1 = 1 [false] else [true]
== ~false~  ; isotope
</code></pre>
<p>It's barely any additional work for conditionals to do on top of what they're doing already.  Although it can result in branches producing false to cost a small bit more than they do today <em>(I wouldn't worry about it, these single element boxes could be optimized if it was a problem)</em></p>
<p>But I don't know how useful it would actually be.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=9" title=":man_shrugging:" class="emoji" alt=":man_shrugging:">  Just writing down the observation.</p>
          <p><a href="https://forum.rebol.info/t/should-else-be-false-reactive-in-addition-to-void-and-null/1991/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-else-be-false-reactive-in-addition-to-void-and-null/1991/1</link>
        <pubDate>Sun, 27 Nov 2022 06:00:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1991-1</guid>
        <source url="https://forum.rebol.info/t/should-else-be-false-reactive-in-addition-to-void-and-null/1991.rss">Should ELSE be FALSE-reactive? (in addition to void and null?)</source>
      </item>
  </channel>
</rss>
