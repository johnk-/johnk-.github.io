<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What should do of empty string (`DO &quot;&quot;`) do?</title>
    <link>https://forum.rebol.info/t/what-should-do-of-empty-string-do-do/2035</link>
    <description>[The question of what **do []** should return is now basically a done deal](https://forum.rebol.info/t/what-should-do-of-empty-block-do-do/1426)... it returns a modern VOID, which is the same value as a conditional that doesn&#39;t take it&#39;s branch:

    &gt;&gt; if true [&lt;a&gt;]
    == &lt;a&gt;

    &gt;&gt; if false [&lt;a&gt;]
    == ~void~  ; anti

    &gt;&gt; do []
    == ~void~  ; anti

One issue that I mused about was whether there should be parity in DO of an empty string... returning a more vanishable VOID instead of an ornery NULL:

    &gt;&gt; do &quot;&quot;
    == ~void~  ; anti

**On the one hand, being able to accept an empty string at face value as &quot;hey, I meant that empty string&quot; is part of the premise of the whole vocabulary of NULL vs VOID in the first place.**

In this school of thought, if you really intended to &quot;opt out of a DO&quot; you would pass it a void, not an empty string, and get a null back.

    &gt;&gt; do void
    == ~null~  ; isotope

Consider a comparison with something like PRINT:

* **print null** and thus **print unspaced [void void]** are errors
* **print void** and thus **print maybe unspaced [void void]]** is a no-op (returning NULL)
* **print &quot;&quot;** prints just a newline, assuming you meant no content for line
* ...hence so does **print unspaced [void &quot;&quot; void]** etc.

If you buy into all this, then instead of being paranoid about the historical ways in which empty strings might sneak in, you accept it as meaning what it does and cure the problem at the edges so that everywhere you have an empty string *you mean it*.

**On the other hand, sometimes you are in a situation where strings are the only medium of exchange, and not reacting to the potential problem they represent feels a little wrong.**  Think for example interfacing with C or JavaScript...

But maybe VOID is the right balance of reaction to this, and **do &quot;&quot;** returning VOID...instead of being paranoid prickly in some worse way to make NULL, is the coherent behavior of handling what you asked?

---

I was curious what the JS console in Chrome and Firefox did when you just hit &quot;enter&quot;, and found it interesting to see that neither let you; it has no response.  You have to at least hit &quot;space&quot;.  I think that&#39;s a bit frustrating in terms of not giving you a way to test the responsiveness.  In any case, hitting space gives you the same response as `eval(&quot;&quot;)` which is `undefined`.

You don&#39;t get any particular safety from this:

    &gt;&gt; x = eval(&quot;&quot;)
    &lt;- undefined

    &gt;&gt; if (x) { console.log(&quot;doesn&#39;t complain on undefineds?&quot;); }
    &lt;- undefined

JavaScript does actually consider &quot;undeclareds&quot; as different from &quot;undefineds&quot;, where a variable explicitly assigned undefined doesn&#39;t error on access (only attempts to dereference).  The &quot;undeclared&quot; state might be compared to &quot;unbound&quot;.

Anyway, just something to hmm about.</description>
    
    <lastBuildDate>Thu, 22 Aug 2024 04:41:07 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/what-should-do-of-empty-string-do-do/2035.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What should do of empty string (`DO &quot;&quot;`) do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2035">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>On the one hand, being able to accept an empty string at face value as "hey, I meant that empty string" is part of the premise of the whole vocabulary of NULL vs VOID in the first place.</p>
</blockquote>
</aside>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2035">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>On the one hand, being able to accept an empty string at face value as "hey, I meant that empty string" is part of the premise of the whole vocabulary of NULL vs VOID in the first place.</p>
</blockquote>
</aside>
<p>Well, seems the worry was for naught, because...</p>
<h2>
<a name="do-wont-take-strings-without-a-rebol-headerhttpsforumrebolinfotdo-of-text-as-synonym-of-do-of-file-containing-string2125-1" class="anchor" href="https://forum.rebol.info#do-wont-take-strings-without-a-rebol-headerhttpsforumrebolinfotdo-of-text-as-synonym-of-do-of-file-containing-string2125-1"></a><strong><a href="https://forum.rebol.info/t/do-of-text-as-synonym-of-do-of-file-containing-string/2125">DO Won't Take Strings Without a Rebol [...] Header.</a></strong>
</h2>
<pre><code>&gt;&gt; do ""
** Error: IMPORT and DO require a header on: &lt;source&gt;
</code></pre>
<p>Moreover, DO of a BLOCK! is targeted to not mean "run this block of code in the evaluator".</p>
<p>That will be handled by EVAL/EVALUATE, which won't accept strings.</p>
<p>If you have a string that represents code, and you don't want to combine that code with a header saying how it should be LOAD-ed... you have to TRANSCODE and bind it yourself.  Which is now not that hard to do, really... you can run code right where it stands.</p>
<pre><code>outer: 10

string: "outer + inner + arg"

demo: func [arg] [
    let inner: 20
    let code: inside [] (transcode string)
    print ["The result is" eval code]
]

&gt;&gt; demo 30
The result is 60
</code></pre>
<p>That might actually be useful.  As it is, DO of strings in R3-Alpha was basically useless... unless you were trying to DO a script you got from somewhere else (like, maybe a script stored in a database or something).  In which case you will be covered by the DO because you will have the header you need.</p>
          <p><a href="https://forum.rebol.info/t/what-should-do-of-empty-string-do-do/2035/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-do-of-empty-string-do-do/2035/2</link>
        <pubDate>Thu, 22 Aug 2024 04:35:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2035-2</guid>
        <source url="https://forum.rebol.info/t/what-should-do-of-empty-string-do-do/2035.rss">What should do of empty string (`DO &quot;&quot;`) do?</source>
      </item>
      <item>
        <title>What should do of empty string (`DO &quot;&quot;`) do?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://forum.rebol.info/t/what-should-do-of-empty-block-do-do/1426">The question of what <strong>do []</strong> should return is now basically a done deal</a>... it returns a modern VOID, which is the same value as a conditional that doesn't take it's branch:</p>
<pre><code>&gt;&gt; if true [&lt;a&gt;]
== &lt;a&gt;

&gt;&gt; if false [&lt;a&gt;]
== ~void~  ; anti

&gt;&gt; do []
== ~void~  ; anti
</code></pre>
<p>One issue that I mused about was whether there should be parity in DO of an empty string... returning a more vanishable VOID instead of an ornery NULL:</p>
<pre><code>&gt;&gt; do ""
== ~void~  ; anti
</code></pre>
<p><strong>On the one hand, being able to accept an empty string at face value as "hey, I meant that empty string" is part of the premise of the whole vocabulary of NULL vs VOID in the first place.</strong></p>
<p>In this school of thought, if you really intended to "opt out of a DO" you would pass it a void, not an empty string, and get a null back.</p>
<pre><code>&gt;&gt; do void
== ~null~  ; isotope
</code></pre>
<p>Consider a comparison with something like PRINT:</p>
<ul>
<li>
<strong>print null</strong> and thus <strong>print unspaced [void void]</strong> are errors</li>
<li>
<strong>print void</strong> and thus <strong>print maybe unspaced [void void]]</strong> is a no-op (returning NULL)</li>
<li>
<strong>print ""</strong> prints just a newline, assuming you meant no content for line</li>
<li>...hence so does <strong>print unspaced [void "" void]</strong> etc.</li>
</ul>
<p>If you buy into all this, then instead of being paranoid about the historical ways in which empty strings might sneak in, you accept it as meaning what it does and cure the problem at the edges so that everywhere you have an empty string <em>you mean it</em>.</p>
<p><strong>On the other hand, sometimes you are in a situation where strings are the only medium of exchange, and not reacting to the potential problem they represent feels a little wrong.</strong>  Think for example interfacing with C or JavaScript...</p>
<p>But maybe VOID is the right balance of reaction to this, and <strong>do ""</strong> returning VOID...instead of being paranoid prickly in some worse way to make NULL, is the coherent behavior of handling what you asked?</p>
<hr>
<p>I was curious what the JS console in Chrome and Firefox did when you just hit "enter", and found it interesting to see that neither let you; it has no response.  You have to at least hit "space".  I think that's a bit frustrating in terms of not giving you a way to test the responsiveness.  In any case, hitting space gives you the same response as <code>eval("")</code> which is <code>undefined</code>.</p>
<p>You don't get any particular safety from this:</p>
<pre><code>&gt;&gt; x = eval("")
&lt;- undefined

&gt;&gt; if (x) { console.log("doesn't complain on undefineds?"); }
&lt;- undefined
</code></pre>
<p>JavaScript does actually consider "undeclareds" as different from "undefineds", where a variable explicitly assigned undefined doesn't error on access (only attempts to dereference).  The "undeclared" state might be compared to "unbound".</p>
<p>Anyway, just something to hmm about.</p>
          <p><a href="https://forum.rebol.info/t/what-should-do-of-empty-string-do-do/2035/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-should-do-of-empty-string-do-do/2035/1</link>
        <pubDate>Thu, 10 Dec 2020 21:34:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2035-1</guid>
        <source url="https://forum.rebol.info/t/what-should-do-of-empty-string-do-do/2035.rss">What should do of empty string (`DO &quot;&quot;`) do?</source>
      </item>
  </channel>
</rss>
