<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Python Speedup Proposals</title>
    <link>https://forum.rebol.info/t/python-speedup-proposals/1992</link>
    <description>The original &quot;CPython&quot; implementation is in some ways similar to Rebol/Red... though these days Ren-C is more aligned with the stackless Python implementation...which is also written in C, but distinct from CPython. 

*(But Ren-C&#39;s design overall is a lot less comparable to anything, due to the number of very &quot;alien&quot; ideas in it, but that I think are what gives it more notable properties.)*

In any case, despite running an interpreter loop and doing kind-of-what-Rebol-does, they&#39;ve committed themselves to doing some speedup proposals and apparently it&#39;s paying off:

  https://devblogs.microsoft.com/python/python-311-faster-cpython-team/

Some of their proposals involve JIT-compiling things (which they know won&#39;t work on restrictive platforms like iOS).  But they apparently have done a lot of tweaks besides that which have turned out beneficial.  Because it&#39;s a C interpreter there might be something applicable to be learned by looking at their &quot;Stage 1&quot; and &quot;Stage 2&quot; changes.

&gt; ### Stage 1 -- Python 3.10
&gt;
&gt; The key improvement for 3.10 will be an adaptive, specializing interpreter. The interpreter will adapt to types and values during execution, exploiting type stability in the program, without needing runtime code generation.
&gt;
&gt; ### Stage 2 -- Python 3.11
&gt;
&gt; This stage will make many improvements to the runtime and key objects. Stage two will be characterized by lots of &quot;tweaks&quot;, rather than any &quot;headline&quot; improvement. The planned improvements include:
&gt;
&gt; * Improved performance for integers of less than one machine word.
&gt; * Improved peformance for binary operators.
&gt; * Faster calls and returns, through better handling of frames.
&gt; * Better object memory layout and reduced memory management overhead.
&gt; * Zero overhead exception handling.
&gt; * Further enhancements to the interpreter
&gt; * Other small enhancements.
&gt;
&gt; ### Stage 3 -- Python 3.12 (requires runtime code generation)
&gt;
&gt; Simple &quot;JIT&quot; compiler for small regions. Compile small regions of specialized code, using a relatively simple, fast compiler.
&gt;
&gt; ### Stage 4 -- Python 3.13 (requires runtime code generation)
&gt;
&gt; Extend regions for compilation. Enhance compiler to generate superior machine code.</description>
    
    <lastBuildDate>Tue, 05 Mar 2024 19:53:43 +0000</lastBuildDate>
    <category>Optimization</category>
    <atom:link href="https://forum.rebol.info/t/python-speedup-proposals/1992.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Python Speedup Proposals</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The original "CPython" implementation is in some ways similar to Rebol/Red... though these days Ren-C is more aligned with the stackless Python implementation...which is also written in C, but distinct from CPython.</p>
<p><em>(But Ren-C's design overall is a lot less comparable to anything, due to the number of very "alien" ideas in it, but that I think are what gives it more notable properties.)</em></p>
<p>In any case, despite running an interpreter loop and doing kind-of-what-Rebol-does, they've committed themselves to doing some speedup proposals and apparently it's paying off:</p>
<p><a href="https://devblogs.microsoft.com/python/python-311-faster-cpython-team/" class="inline-onebox">A Team at Microsoft is Helping Make Python Faster - Python</a></p>
<p>Some of their proposals involve JIT-compiling things (which they know won't work on restrictive platforms like iOS).  But they apparently have done a lot of tweaks besides that which have turned out beneficial.  Because it's a C interpreter there might be something applicable to be learned by looking at their "Stage 1" and "Stage 2" changes.</p>
<blockquote>
<h3>Stage 1 -- Python 3.10</h3>
<p>The key improvement for 3.10 will be an adaptive, specializing interpreter. The interpreter will adapt to types and values during execution, exploiting type stability in the program, without needing runtime code generation.</p>
<h3>Stage 2 -- Python 3.11</h3>
<p>This stage will make many improvements to the runtime and key objects. Stage two will be characterized by lots of "tweaks", rather than any "headline" improvement. The planned improvements include:</p>
<ul>
<li>Improved performance for integers of less than one machine word.</li>
<li>Improved peformance for binary operators.</li>
<li>Faster calls and returns, through better handling of frames.</li>
<li>Better object memory layout and reduced memory management overhead.</li>
<li>Zero overhead exception handling.</li>
<li>Further enhancements to the interpreter</li>
<li>Other small enhancements.</li>
</ul>
<h3>Stage 3 -- Python 3.12 (requires runtime code generation)</h3>
<p>Simple "JIT" compiler for small regions. Compile small regions of specialized code, using a relatively simple, fast compiler.</p>
<h3>Stage 4 -- Python 3.13 (requires runtime code generation)</h3>
<p>Extend regions for compilation. Enhance compiler to generate superior machine code.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/python-speedup-proposals/1992/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/python-speedup-proposals/1992/1</link>
        <pubDate>Sun, 27 Nov 2022 10:05:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1992-1</guid>
        <source url="https://forum.rebol.info/t/python-speedup-proposals/1992.rss">Python Speedup Proposals</source>
      </item>
  </channel>
</rss>
