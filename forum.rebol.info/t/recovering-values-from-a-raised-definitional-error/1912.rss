<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Recovering Values From A Raised Definitional Error</title>
    <link>https://forum.rebol.info/t/recovering-values-from-a-raised-definitional-error/1912</link>
    <description>So TRY is a way to convert definitional errors into soft failure, e.g. a NULL

    &gt;&gt; first null
    ** Error: FIRST on NULL requires use of TRY

    &gt;&gt; try first null
    == ~null~  ; anti

I had a thought that instead of just always returning NULL, there might be a way to have constructs raise errors that carried a payload... which would give a &quot;fallback&quot; value that represented something you might want vs. NULL in the case of acknowledging the error.  *(The only rule would be that a function emitting such an error should not have any side effects if it emits one of these errors.)*

So various constructs could offer meanings for what the TRY actually does:

    &gt;&gt; unquote first [&#39;abc]
    == abc

    &gt;&gt; unquote first [def]
    ** Error: Can&#39;t Unquote Plain WORD!, use TRY if Intentional

    &gt;&gt; try unquote first [def]
    == def

Another application: at one point I suggested it would be nice to be able to have a COLLECT that didn&#39;t actually KEEP anything return NULL, so it could be ELSE-reactive.  That meant if you really wanted an empty block, you&#39;d have to do something like **`any [collect [...], copy []]`** which was ugly.  But the error could hold a freshly-copied block to be the result of a TRY:

    &gt;&gt; collect [keep if false [&lt;not kept&gt;]]
    ** Error: COLLECT didn&#39;t KEEP anything, use TRY if intended

    &gt;&gt; try collect [keep if false [&lt;not kept&gt;]]
    == []

There are various technical reasons why ELSE can&#39;t be reactive to TRY-style errors.  One fairly important one would be that if you used ELSE with a branching construct, it wouldn&#39;t be able to tell the difference between a branch that had a TRY-error and no branch taken:

    &gt;&gt; case [true [unquote first [def]]] else [print &quot;Took branch, runs due to UNQUOTE&quot;]
    Took branch, runs due to UNQUOTE  ; this would be bad

But... maybe the trick could be that if you pass ELSE a function that takes an argument, it assumes that means you handle TRY-style errors?  (Because otherwise it could only be void/null... why take an arg?)

    &gt;&gt; (unquote first [def]) else arg -&gt; [print [&quot;TRY error&quot; arg]]
    TRY error def

It&#39;s a weird thought.  Anyway, just wanted to write up this parallel-universe TRY concept...</description>
    
    <lastBuildDate>Wed, 11 Sep 2024 08:56:58 +0000</lastBuildDate>
    <category>Errors</category>
    <atom:link href="https://forum.rebol.info/t/recovering-values-from-a-raised-definitional-error/1912.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Recovering Values From A Raised Definitional Error</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1912">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; unquote first ['abc]
== abc

&gt;&gt; unquote first [def]
** Error: Can't Unquote Plain WORD!, use TRY if Intentional

&gt;&gt; try unquote first [def]
== def
</code></pre>
</blockquote>
</aside>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1912">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's a weird thought.</p>
</blockquote>
</aside>
<p>Having now clocked some time with TRY, I like it how it is.  I don't really want it to do anything besides convert definitional errors to ~null~ antiforms...and <a href="https://forum.rebol.info/t/isotopes-and-nan-not-a-number/2245">maybe a particular definitional error to a ~NaN~ antiform</a>.  But I want what it gives back to be falsey if it traps an error.</p>
<p>That doesn't mean there isn't some kind of good idea here.  Perhaps a good enough idea to retake another word like ATTEMPT for it.</p>
          <p><a href="https://forum.rebol.info/t/recovering-values-from-a-raised-definitional-error/1912/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/recovering-values-from-a-raised-definitional-error/1912/2</link>
        <pubDate>Wed, 11 Sep 2024 08:56:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1912-2</guid>
        <source url="https://forum.rebol.info/t/recovering-values-from-a-raised-definitional-error/1912.rss">Recovering Values From A Raised Definitional Error</source>
      </item>
      <item>
        <title>Recovering Values From A Raised Definitional Error</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So TRY is a way to convert definitional errors into soft failure, e.g. a NULL</p>
<pre><code>&gt;&gt; first null
** Error: FIRST on NULL requires use of TRY

&gt;&gt; try first null
== ~null~  ; anti
</code></pre>
<p>I had a thought that instead of just always returning NULL, there might be a way to have constructs raise errors that carried a payload... which would give a "fallback" value that represented something you might want vs. NULL in the case of acknowledging the error.  <em>(The only rule would be that a function emitting such an error should not have any side effects if it emits one of these errors.)</em></p>
<p>So various constructs could offer meanings for what the TRY actually does:</p>
<pre><code>&gt;&gt; unquote first ['abc]
== abc

&gt;&gt; unquote first [def]
** Error: Can't Unquote Plain WORD!, use TRY if Intentional

&gt;&gt; try unquote first [def]
== def
</code></pre>
<p>Another application: at one point I suggested it would be nice to be able to have a COLLECT that didn't actually KEEP anything return NULL, so it could be ELSE-reactive.  That meant if you really wanted an empty block, you'd have to do something like <strong><code>any [collect [...], copy []]</code></strong> which was ugly.  But the error could hold a freshly-copied block to be the result of a TRY:</p>
<pre><code>&gt;&gt; collect [keep if false [&lt;not kept&gt;]]
** Error: COLLECT didn't KEEP anything, use TRY if intended

&gt;&gt; try collect [keep if false [&lt;not kept&gt;]]
== []
</code></pre>
<p>There are various technical reasons why ELSE can't be reactive to TRY-style errors.  One fairly important one would be that if you used ELSE with a branching construct, it wouldn't be able to tell the difference between a branch that had a TRY-error and no branch taken:</p>
<pre><code>&gt;&gt; case [true [unquote first [def]]] else [print "Took branch, runs due to UNQUOTE"]
Took branch, runs due to UNQUOTE  ; this would be bad
</code></pre>
<p>But... maybe the trick could be that if you pass ELSE a function that takes an argument, it assumes that means you handle TRY-style errors?  (Because otherwise it could only be void/null... why take an arg?)</p>
<pre><code>&gt;&gt; (unquote first [def]) else arg -&gt; [print ["TRY error" arg]]
TRY error def
</code></pre>
<p>It's a weird thought.  Anyway, just wanted to write up this parallel-universe TRY concept...</p>
          <p><a href="https://forum.rebol.info/t/recovering-values-from-a-raised-definitional-error/1912/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/recovering-values-from-a-raised-definitional-error/1912/1</link>
        <pubDate>Tue, 09 Aug 2022 13:28:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1912-1</guid>
        <source url="https://forum.rebol.info/t/recovering-values-from-a-raised-definitional-error/1912.rss">Recovering Values From A Raised Definitional Error</source>
      </item>
  </channel>
</rss>
