<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CLOCK as a Noun (and the CHRONO Dialect)</title>
    <link>https://forum.rebol.info/t/clock-as-a-noun-and-the-chrono-dialect/1956</link>
    <description>Boris made a timing function called &quot;CLOCK&quot;, as a sort of replacement for DELTA-TIME:

  https://github.com/red/red/blob/81ff4d605df371dfc430b92611605e80f5e5780b/environment/functions.red#L1126

    clock: function [
        &quot;Display execution time of code, returning result of it&#39;s evaluation&quot;
        code [block!]
        /times n [integer! float!]  ; float for e.g. `1e6` instead of `1&#39;000&#39;000`
            &quot;Repeat N times (default: once); displayed time is per iteration&quot;
        /delta &quot;Don&#39;t print the result, return time delta per iteration (in msec)&quot;
     ]

It builds in iteration...which is useful for timing, since you often want to loop over things they time.  And at least in theory it should be in the native timing construct--you&#39;d prefer not to have an interpreted call to REPEAT being part of what you count in your time.

(Perhaps the repeat count should just be a required first argument--since CLOCK 1 is so easy to type, why make people fuss over CLOCK/TIMES and then putting the number of times all the way at the end somewhere?)

## *But...* I Think CLOCK should be a Noun

**clock.time** and **clock.date** have many advantages over **now/time** and **now/date**.

It implies that you could pass a clock around or copy it...which is a good thing.  So by default the CLOCK could be UTC (for programming convenience).  But you could copy that clock and set your module&#39;s meaning of the word CLOCK to speak in terms of local time.

Also it resolves a big annoyance of mine: NOW being a function that has a lot of conflicting refinements.  If CLOCK were an object, then **.time** and **.date** would be separate methods of that object, so you couldn&#39;t say things like `clock.time.date`.

And then you could capture the current time into a variable as **`now: clock.time`** which makes more sense to me than saying &quot;now&quot; is itself a verb.  *(It then wouldn&#39;t stay current as &quot;now&quot; in the sense of &quot;exactly this moment&quot;, but in language we&#39;re pretty comfortable saying &quot;things are different now than they were in the &#39;80s&quot;...e.g. there can be a prolonged linguistic notion of now.  I prefer to use it in this sense.)*

As far as functional programming goes: because code doesn&#39;t have an intrinsic notion of time, you can show that a piece of code is dependent on a clock by passing one as a parameter.

This would allow you also to have code run simulating at a different time.  You could see how a piece of code would perform if it thought it were running at some pathological date, while working alongside other code that was operating with the current notion of time--e.g. to communicate with some webservers to upload results from a test of something like a Y2K problem simulated by other code.

## What to Call The Timing Construct?

To think in terms of super-powers, then you need...*a dialect* !

Perhaps it could be called &quot;CHRONO&quot;?

Maybe CHRONO quotes its argument, and if you give it a GROUP!, it thinks of that as something to time and run just once.

    &gt;&gt; chrono (my-function 1 2 3)
    0.14 μs
    == &lt;result&gt;
    
But if you pass a BLOCK! it could permit more options, like saying what you wanted the timing in terms of:

    chrono [msec (my-function 1 2 3)]
    chrono [usec (my-function 1 2 3)]

Or the repeat count (being a parameter to chrono means you&#39;re not timing a REPEAT inside your code, ideally).

    &gt;&gt; chrono [1e7 (1 + 2)]
    0.14 μs    [1 + 2]
    == 3

I&#39;m busy with other things and so I&#39;m not going to go research all the possible features you might want from a timing dialect--I&#39;m sure there&#39;s plenty of prior art in the domain.  Just wanted to get it started.  Use your imagination.  :unicorn:</description>
    
    <lastBuildDate>Mon, 05 Sep 2022 06:57:20 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/clock-as-a-noun-and-the-chrono-dialect/1956.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CLOCK as a Noun (and the CHRONO Dialect)</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>To clock the fastest time. Yes clock is both noun and verb. While CLOCK seems nice, DELTA-TIME is also exactly what is means. And the function you want to perform is register duration, not just watch on the clock if it is time to go home from work. Chronometer or stopwatch.<br>
CHRONO is fine.</p>
          <p><a href="https://forum.rebol.info/t/clock-as-a-noun-and-the-chrono-dialect/1956/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/clock-as-a-noun-and-the-chrono-dialect/1956/2</link>
        <pubDate>Mon, 05 Sep 2022 06:57:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1956-2</guid>
        <source url="https://forum.rebol.info/t/clock-as-a-noun-and-the-chrono-dialect/1956.rss">CLOCK as a Noun (and the CHRONO Dialect)</source>
      </item>
      <item>
        <title>CLOCK as a Noun (and the CHRONO Dialect)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Boris made a timing function called "CLOCK", as a sort of replacement for DELTA-TIME:</p>
<p><a href="https://github.com/red/red/blob/81ff4d605df371dfc430b92611605e80f5e5780b/environment/functions.red#L1126" class="inline-onebox">red/environment/functions.red at 81ff4d605df371dfc430b92611605e80f5e5780b · red/red · GitHub</a></p>
<pre><code>clock: function [
    "Display execution time of code, returning result of it's evaluation"
    code [block!]
    /times n [integer! float!]  ; float for e.g. `1e6` instead of `1'000'000`
        "Repeat N times (default: once); displayed time is per iteration"
    /delta "Don't print the result, return time delta per iteration (in msec)"
 ]
</code></pre>
<p>It builds in iteration...which is useful for timing, since you often want to loop over things they time.  And at least in theory it should be in the native timing construct--you'd prefer not to have an interpreted call to REPEAT being part of what you count in your time.</p>
<p>(Perhaps the repeat count should just be a required first argument--since CLOCK 1 is so easy to type, why make people fuss over CLOCK/TIMES and then putting the number of times all the way at the end somewhere?)</p>
<h2>
<a name="but-i-think-clock-should-be-a-noun-1" class="anchor" href="https://forum.rebol.info#but-i-think-clock-should-be-a-noun-1"></a><em>But...</em> I Think CLOCK should be a Noun</h2>
<p><strong>clock.time</strong> and <strong>clock.date</strong> have many advantages over <strong>now/time</strong> and <strong>now/date</strong>.</p>
<p>It implies that you could pass a clock around or copy it...which is a good thing.  So by default the CLOCK could be UTC (for programming convenience).  But you could copy that clock and set your module's meaning of the word CLOCK to speak in terms of local time.</p>
<p>Also it resolves a big annoyance of mine: NOW being a function that has a lot of conflicting refinements.  If CLOCK were an object, then <strong>.time</strong> and <strong>.date</strong> would be separate methods of that object, so you couldn't say things like <code>clock.time.date</code>.</p>
<p>And then you could capture the current time into a variable as <strong><code>now: clock.time</code></strong> which makes more sense to me than saying "now" is itself a verb.  <em>(It then wouldn't stay current as "now" in the sense of "exactly this moment", but in language we're pretty comfortable saying "things are different now than they were in the '80s"...e.g. there can be a prolonged linguistic notion of now.  I prefer to use it in this sense.)</em></p>
<p>As far as functional programming goes: because code doesn't have an intrinsic notion of time, you can show that a piece of code is dependent on a clock by passing one as a parameter.</p>
<p>This would allow you also to have code run simulating at a different time.  You could see how a piece of code would perform if it thought it were running at some pathological date, while working alongside other code that was operating with the current notion of time--e.g. to communicate with some webservers to upload results from a test of something like a Y2K problem simulated by other code.</p>
<h2>
<a name="what-to-call-the-timing-construct-2" class="anchor" href="https://forum.rebol.info#what-to-call-the-timing-construct-2"></a>What to Call The Timing Construct?</h2>
<p>To think in terms of super-powers, then you need...<em>a dialect</em> !</p>
<p>Perhaps it could be called "CHRONO"?</p>
<p>Maybe CHRONO quotes its argument, and if you give it a GROUP!, it thinks of that as something to time and run just once.</p>
<pre><code>&gt;&gt; chrono (my-function 1 2 3)
0.14 μs
== &lt;result&gt;
</code></pre>
<p>But if you pass a BLOCK! it could permit more options, like saying what you wanted the timing in terms of:</p>
<pre><code>chrono [msec (my-function 1 2 3)]
chrono [usec (my-function 1 2 3)]
</code></pre>
<p>Or the repeat count (being a parameter to chrono means you're not timing a REPEAT inside your code, ideally).</p>
<pre><code>&gt;&gt; chrono [1e7 (1 + 2)]
0.14 μs    [1 + 2]
== 3
</code></pre>
<p>I'm busy with other things and so I'm not going to go research all the possible features you might want from a timing dialect--I'm sure there's plenty of prior art in the domain.  Just wanted to get it started.  Use your imagination.  <img src="https://forum.rebol.info/images/emoji/twitter/unicorn.png?v=12" title=":unicorn:" class="emoji" alt=":unicorn:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/clock-as-a-noun-and-the-chrono-dialect/1956/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/clock-as-a-noun-and-the-chrono-dialect/1956/1</link>
        <pubDate>Sat, 03 Sep 2022 06:47:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1956-1</guid>
        <source url="https://forum.rebol.info/t/clock-as-a-noun-and-the-chrono-dialect/1956.rss">CLOCK as a Noun (and the CHRONO Dialect)</source>
      </item>
  </channel>
</rss>
