<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why Doesn&#39;t PRINT Return VOID?</title>
    <link>https://forum.rebol.info/t/why-doesnt-print-return-void/1466</link>
    <description>Since PRINT doesn&#39;t have an interesting return value, we might ask what the harm would be in making it return VOID...

## Canonizing VOID Has Misleading Opt-Out Properties

The evolution of void results is such that it&#39;s part of the void-in-null-out strategy, as well a way of doing things like opting out of an APPEND without raising an error.

So consider this:

    &gt;&gt; if 10 &gt; 20 [&lt;d&gt;]
    == ~void~  ; anti

    &gt;&gt; if 10 &lt; 20 [&lt;d&gt;]
    == &lt;d&gt;

    &gt;&gt; append [a b c] if 10 &gt; 20 [&lt;d&gt;]
    == [a b c]

    &gt;&gt; append [a b c] if 10 &lt; 20 [&lt;d&gt;]
    == [a b c &lt;d&gt;]

*That feels like a purposeful application of a void state.*  But if we were to say that PRINT returned void, we&#39;d be condoning things like:

    &gt;&gt; append [a b c] print &quot;does this seem right?&quot;
    does this seem right?
    == [a b c]

Somehow a function with an *uninteresting* result has been elevated to one that people might start assuming has an *interesting, void result*.  It seems to me that having PRINT return an &quot;ornery&quot; value is a safer and saner strategy:

    &gt;&gt; nothing? print &quot;this makes more sense&quot;
    this makes more sense
    == ~okay~  ; anti

    &gt;&gt; append [a b c] print &quot;I like this error&quot;
    I like this error
    ** Error: APPEND does not accept ~ antiform for its VALUE argument

## General Argument: Limiting Interface Flexibility

Let&#39;s generalize the question to SOME-FUNCTION where the key point is that at the time you write it, you haven&#39;t thought of a meaningful result for it.

If at the time of writing a function you know that it doesn&#39;t have a meaningful return value, then making it return void--instead of returning a nothing value--ties your hands in changing it.

People will start writing things like:

    all [
        ...
        some-function ...  ; user assumes no effect, because of void
        ...
    ]

But if SOME-FUNCTION had returned a nothing value, then they could have gotten the same effect more obviously with:

    all [
        ...
        elide some-function ...
        ...
    ]

This also gives more freedom to change the interface later, if you think of an interesting value to return.  You can progressively add more return types after the fact.  But once people assume you always return void, this trap will happen...you&#39;re locked in forever in a way that was pretty much completely avoidable.</description>
    
    <lastBuildDate>Thu, 12 Sep 2024 14:55:06 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://forum.rebol.info/t/why-doesnt-print-return-void/1466.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why Doesn&#39;t PRINT Return VOID?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Since PRINT doesn't have an interesting return value, we might ask what the harm would be in making it return VOID...</p>
<h2>
<a name="canonizing-void-has-misleading-opt-out-properties-1" class="anchor" href="https://forum.rebol.info#canonizing-void-has-misleading-opt-out-properties-1"></a>Canonizing VOID Has Misleading Opt-Out Properties</h2>
<p>The evolution of void results is such that it's part of the void-in-null-out strategy, as well a way of doing things like opting out of an APPEND without raising an error.</p>
<p>So consider this:</p>
<pre><code>&gt;&gt; if 10 &gt; 20 [&lt;d&gt;]
== ~void~  ; anti

&gt;&gt; if 10 &lt; 20 [&lt;d&gt;]
== &lt;d&gt;

&gt;&gt; append [a b c] if 10 &gt; 20 [&lt;d&gt;]
== [a b c]

&gt;&gt; append [a b c] if 10 &lt; 20 [&lt;d&gt;]
== [a b c &lt;d&gt;]
</code></pre>
<p><em>That feels like a purposeful application of a void state.</em>  But if we were to say that PRINT returned void, we'd be condoning things like:</p>
<pre><code>&gt;&gt; append [a b c] print "does this seem right?"
does this seem right?
== [a b c]
</code></pre>
<p>Somehow a function with an <em>uninteresting</em> result has been elevated to one that people might start assuming has an <em>interesting, void result</em>.  It seems to me that having PRINT return an "ornery" value is a safer and saner strategy:</p>
<pre><code>&gt;&gt; nothing? print "this makes more sense"
this makes more sense
== ~okay~  ; anti

&gt;&gt; append [a b c] print "I like this error"
I like this error
** Error: APPEND does not accept ~ antiform for its VALUE argument
</code></pre>
<h2>
<a name="general-argument-limiting-interface-flexibility-2" class="anchor" href="https://forum.rebol.info#general-argument-limiting-interface-flexibility-2"></a>General Argument: Limiting Interface Flexibility</h2>
<p>Let's generalize the question to SOME-FUNCTION where the key point is that at the time you write it, you haven't thought of a meaningful result for it.</p>
<p>If at the time of writing a function you know that it doesn't have a meaningful return value, then making it return void--instead of returning a nothing value--ties your hands in changing it.</p>
<p>People will start writing things like:</p>
<pre><code>all [
    ...
    some-function ...  ; user assumes no effect, because of void
    ...
]
</code></pre>
<p>But if SOME-FUNCTION had returned a nothing value, then they could have gotten the same effect more obviously with:</p>
<pre><code>all [
    ...
    elide some-function ...
    ...
]
</code></pre>
<p>This also gives more freedom to change the interface later, if you think of an interesting value to return.  You can progressively add more return types after the fact.  But once people assume you always return void, this trap will happen...you're locked in forever in a way that was pretty much completely avoidable.</p>
          <p><a href="https://forum.rebol.info/t/why-doesnt-print-return-void/1466/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-doesnt-print-return-void/1466/1</link>
        <pubDate>Mon, 18 Jan 2021 01:40:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1466-1</guid>
        <source url="https://forum.rebol.info/t/why-doesnt-print-return-void/1466.rss">Why Doesn&#39;t PRINT Return VOID?</source>
      </item>
      <item>
        <title>Why Doesn&#39;t PRINT Return VOID?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1466">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm not sure why PRINT returns a ~ antiform, and wonder if it wouldn't be better to have it be silent like ELIDE?</p>
</blockquote>
</aside>
<hr>
<p><strong>2024 UPDATE:</strong> Today's PRINT is silent, because the ~ antiform (NOTHING) does not display in the console.  Also NOTHING is a branch trigger, so it doesn't cause errors in ANY or ALL...though it does not opt out.</p>
<hr>
<p>But let's say you wanted actual invisibility--vs. a truthy meaningless result.</p>
<p>We could make <strong>print x</strong> a synonym for what you'd write today as <strong>elide print x</strong>.  e.g. PRINT would always return an empty pack (~<span class="chcklst-box fa fa-square-o fa-fw"></span>~ antiform) containing no values.  That would at least eliminate the possibility of misuse as an argument, as you would get with ELIDE PRINT today:</p>
<pre><code>&gt;&gt; append [a b c] elide print "no dice"
no dice
** Error: 0 Values Available in Empty Pack for APPEND's VALUE argument 
</code></pre>
<p>But it would would kill off an interesting feature of being able to respond to PRINT's variant responses in terms of the void-in-null-out protocol.</p>
<p>Today you can use that variance to tell whether the PRINT had output or not:</p>
<pre><code> &gt;&gt; line: "some text"
 &gt;&gt; (print line) then [print "We had output!"]
 some text
 We had output!

 &gt;&gt; line: null
 &gt;&gt; (print maybe line) then [print "We had output!"]
 == ~null~  ; anti
</code></pre>
<p>To do this kind of thing requires having an output value that wouldn't trigger THEN when there <em>is</em> output.  So not null, and not void.  The nothing antiform works for this, but nihil cannot be used this way.</p>
<p>Admittedly, in practice, this hasn't been used much with PRINT.  But PRINT itself uses this feature of WRITE-STDOUT:</p>
<pre><code>write-stdout (maybe spaced line) then [
    write-stdout newline
]
</code></pre>
<h2><a name="p-3832-if-you-want-you-can-make-your-print-vaporize-1" class="anchor" href="https://forum.rebol.info#p-3832-if-you-want-you-can-make-your-print-vaporize-1"></a>If You Want, You Can Make <em>Your</em> PRINT Vaporize!</h2>
<p>For some, how they want to use the word PRINT may be universal enough that they would rather it be fully invisible.  But that would involve a very specific understanding of a very common function...similar to how <strong>elide</strong> and <strong>comment</strong> and <strong>assert</strong> and <strong>--</strong> are known to have no result.</p>
<p>All you need to do in your "skin" library is this:</p>
<pre><code>&gt;&gt; print: chain [:lib/print, :elide]
== ~#[frame! {print} [line]]~  ; anti

&gt;&gt; 1 + 2 print "That's it."
That's it.
== 3
</code></pre>
<p>But I don't think the average "no meaningful result" function fits in this category, and I'd say I'm fairly skeptical if PRINT belongs in it.</p>
          <p><a href="https://forum.rebol.info/t/why-doesnt-print-return-void/1466/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-doesnt-print-return-void/1466/3</link>
        <pubDate>Tue, 30 Jun 2020 22:58:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1466-3</guid>
        <source url="https://forum.rebol.info/t/why-doesnt-print-return-void/1466.rss">Why Doesn&#39;t PRINT Return VOID?</source>
      </item>
      <item>
        <title>Why Doesn&#39;t PRINT Return VOID?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>On a tangential note: I'm not sure why PRINT returns a <strong><code>~</code></strong> antiform, and wonder if it wouldn't be better to have it be silent like ELIDE? Would that create havoc if new users did confuse its usage?</p>
          <p><a href="https://forum.rebol.info/t/why-doesnt-print-return-void/1466/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-doesnt-print-return-void/1466/2</link>
        <pubDate>Mon, 29 Jun 2020 15:03:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1466-2</guid>
        <source url="https://forum.rebol.info/t/why-doesnt-print-return-void/1466.rss">Why Doesn&#39;t PRINT Return VOID?</source>
      </item>
  </channel>
</rss>
