<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Accepting the availability of stdint.h and stdbool.h</title>
    <link>https://forum.rebol.info/t/accepting-the-availability-of-stdint-h-and-stdbool-h/2067</link>
    <description>One of Carl&#39;s comments in R3-Alpha complained about the lack of a standardization of integer sizes in C:

&gt; *&quot;One of the biggest flaws in the C language was not to indicate bitranges of integers. So, we do that here.  You cannot &#39;abstractly remove&#39; the range of a number.  It is a critical part of its definition.&quot;*

So he did some empirical platform detection to define things like REBI32 for a signed 32-bit integer, REBU64 for an unsigned 64-bit integer, etc.

But once C99 arrived, the file &lt;stdint.h&gt; offered several basic types, and basically covered the needs with types that had names like **int32_t** and **uint64_t**:

  http://en.cppreference.com/w/c/types/integer

So Ren-C was changed to use the C99 names and include `&lt;stdint.h&gt;`.  For pre-C99 compilers, it used a portable shim called &quot;pstdint&quot;, which it maintained its own copy of in the repository:

**[src/include/pstdint.h](https://github.com/metaeducation/ren-c/blob/e6e3e7fe0fcff165557f9ffc3de3e6713a50f99a/src/include/pstdint.h)**

By similar reasoning, booleans were shimmed with another found-file:

**[src/include/pstdbool.h](https://github.com/metaeducation/ren-c/blob/e6e3e7fe0fcff165557f9ffc3de3e6713a50f99a/src/include/pstdbool.h)**

## Ren-C Has Embraced C99, So Why Keep These Shims?

C99 is now a prerequisite for building the system.

It may be that some pre-C99 standards compiler *could* still build Ren-C with these shims, though it would need variadic macro support.  The odds of a compiler having that support yet lacking things like **bool** and **int32_t** are fairly slim.

In any case, these esoteric compilation environments could be &quot;shimmed&quot; by hacking in versions of stdint.h and stdbool.h to their include directories.  I feel like that&#39;s the responsibility of the build environment at this point... and that the Ren-C codebase need not be carrying the baggage.

So I&#39;m pulling the files out.  If anyone is on an esoteric platform and trying to build but finds these definitions being missing is the only problem, then they should dig up pstdint and pstdbool.</description>
    
    <lastBuildDate>Thu, 07 Dec 2023 20:26:57 +0000</lastBuildDate>
    <category>Build System</category>
    <atom:link href="https://forum.rebol.info/t/accepting-the-availability-of-stdint-h-and-stdbool-h/2067.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Accepting the availability of stdint.h and stdbool.h</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>One of Carl's comments in R3-Alpha complained about the lack of a standardization of integer sizes in C:</p>
<blockquote>
<p><em>"One of the biggest flaws in the C language was not to indicate bitranges of integers. So, we do that here.  You cannot 'abstractly remove' the range of a number.  It is a critical part of its definition."</em></p>
</blockquote>
<p>So he did some empirical platform detection to define things like REBI32 for a signed 32-bit integer, REBU64 for an unsigned 64-bit integer, etc.</p>
<p>But once C99 arrived, the file &lt;stdint.h&gt; offered several basic types, and basically covered the needs with types that had names like <strong>int32_t</strong> and <strong>uint64_t</strong>:</p>
<p><a href="http://en.cppreference.com/w/c/types/integer" class="inline-onebox">Fixed width integer types (since C99) - cppreference.com</a></p>
<p>So Ren-C was changed to use the C99 names and include <code>&lt;stdint.h&gt;</code>.  For pre-C99 compilers, it used a portable shim called "pstdint", which it maintained its own copy of in the repository:</p>
<p><strong><a href="https://github.com/metaeducation/ren-c/blob/e6e3e7fe0fcff165557f9ffc3de3e6713a50f99a/src/include/pstdint.h">src/include/pstdint.h</a></strong></p>
<p>By similar reasoning, booleans were shimmed with another found-file:</p>
<p><strong><a href="https://github.com/metaeducation/ren-c/blob/e6e3e7fe0fcff165557f9ffc3de3e6713a50f99a/src/include/pstdbool.h">src/include/pstdbool.h</a></strong></p>
<h2>
<a name="ren-c-has-embraced-c99-so-why-keep-these-shims-1" class="anchor" href="https://forum.rebol.info#ren-c-has-embraced-c99-so-why-keep-these-shims-1"></a>Ren-C Has Embraced C99, So Why Keep These Shims?</h2>
<p>C99 is now a prerequisite for building the system.</p>
<p>It may be that some pre-C99 standards compiler <em>could</em> still build Ren-C with these shims, though it would need variadic macro support.  The odds of a compiler having that support yet lacking things like <strong>bool</strong> and <strong>int32_t</strong> are fairly slim.</p>
<p>In any case, these esoteric compilation environments could be "shimmed" by hacking in versions of stdint.h and stdbool.h to their include directories.  I feel like that's the responsibility of the build environment at this point... and that the Ren-C codebase need not be carrying the baggage.</p>
<p>So I'm pulling the files out.  If anyone is on an esoteric platform and trying to build but finds these definitions being missing is the only problem, then they should dig up pstdint and pstdbool.</p>
          <p><a href="https://forum.rebol.info/t/accepting-the-availability-of-stdint-h-and-stdbool-h/2067/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/accepting-the-availability-of-stdint-h-and-stdbool-h/2067/1</link>
        <pubDate>Thu, 07 Dec 2023 18:40:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2067-1</guid>
        <source url="https://forum.rebol.info/t/accepting-the-availability-of-stdint-h-and-stdbool-h/2067.rss">Accepting the availability of stdint.h and stdbool.h</source>
      </item>
  </channel>
</rss>
