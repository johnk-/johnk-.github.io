<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>High-Level Parameterized Enums</title>
    <link>https://forum.rebol.info/t/high-level-parameterized-enums/1894</link>
    <description>So there&#39;s a neat feature in Haskell and Rust (and other languages) which is that you can make an enumerated type which takes parameters.  Here&#39;s Rust&#39;s version:

    enum Message {
        Quit,
        ChangeColor(i32, i32, i32),
        Move { x: i32, y: i32 },
        Write(String),
    }

In C++ there&#39;s not built-in support for this.  You have to implement it as a &quot;tagged union&quot;...where you have a struct that has a plain enum integer in it, and then a union of all the possibilities of what could be in that spot.

So this made me wonder what we could do to support it.

## Fans of History May Recall I Made an Enumerated Type Once

I wasn&#39;t much involved with the language until it was open-sourced.  But I did [tinker with it in 2009](http://blog.hostilefork.com/enumerated-type-for-rebol2/)

    &gt;&gt; fruit: make-enum-type [apple orange banana mango]

    &gt;&gt; favorite_fruit: make-enum fruit &#39;apple

    &gt;&gt; set-enum favorite_fruit &#39;shoe
    ** User Error: illegal enum value ( shoe ) when 
         possibilities are [ apple orange banana mango ]

Clearly we want better than that, which might look more like:

    fruit: new enum [apple [rotten: [logic!]] orange banana mango]

    favorite-fruit: new fruit.apple false

It raises some questions about how SWITCH might be able to be hooked to have some augmented feature, where it enforces you covering all the cases for the ENUM.

I don&#39;t have any great ideas offhand...but I just was hearing a talk where this was brought up and it reminded me that maybe it would be a good example to try and think through, as a feature users could add after-the-fact.</description>
    
    <lastBuildDate>Tue, 19 Jul 2022 00:15:39 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/high-level-parameterized-enums/1894.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>High-Level Parameterized Enums</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So there's a neat feature in Haskell and Rust (and other languages) which is that you can make an enumerated type which takes parameters.  Here's Rust's version:</p>
<pre><code>enum Message {
    Quit,
    ChangeColor(i32, i32, i32),
    Move { x: i32, y: i32 },
    Write(String),
}
</code></pre>
<p>In C++ there's not built-in support for this.  You have to implement it as a "tagged union"...where you have a struct that has a plain enum integer in it, and then a union of all the possibilities of what could be in that spot.</p>
<p>So this made me wonder what we could do to support it.</p>
<h2>Fans of History May Recall I Made an Enumerated Type Once</h2>
<p>I wasn't much involved with the language until it was open-sourced.  But I did <a href="http://blog.hostilefork.com/enumerated-type-for-rebol2/">tinker with it in 2009</a></p>
<pre><code>&gt;&gt; fruit: make-enum-type [apple orange banana mango]

&gt;&gt; favorite_fruit: make-enum fruit 'apple

&gt;&gt; set-enum favorite_fruit 'shoe
** User Error: illegal enum value ( shoe ) when 
     possibilities are [ apple orange banana mango ]
</code></pre>
<p>Clearly we want better than that, which might look more like:</p>
<pre><code>fruit: new enum [apple [rotten: [logic!]] orange banana mango]

favorite-fruit: new fruit.apple false
</code></pre>
<p>It raises some questions about how SWITCH might be able to be hooked to have some augmented feature, where it enforces you covering all the cases for the ENUM.</p>
<p>I don't have any great ideas offhand...but I just was hearing a talk where this was brought up and it reminded me that maybe it would be a good example to try and think through, as a feature users could add after-the-fact.</p>
          <p><a href="https://forum.rebol.info/t/high-level-parameterized-enums/1894/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/high-level-parameterized-enums/1894/1</link>
        <pubDate>Tue, 19 Jul 2022 00:15:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1894-1</guid>
        <source url="https://forum.rebol.info/t/high-level-parameterized-enums/1894.rss">High-Level Parameterized Enums</source>
      </item>
  </channel>
</rss>
