<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Common Lisp LOOP and ITERATE</title>
    <link>https://forum.rebol.info/t/common-lisp-loop-and-iterate/1878</link>
    <description>LOOP is about the shortest word you can get in the looping world &lt;sub&gt;(FOR is one letter shorter, I guess)&lt;/sub&gt;.

So in a language that claims itself to be all-about-dialects, it doesn&#39;t seem to make sense to make LOOP the dumbest iteration construct in the box.

In Ren-C **REPEAT** is arity-2, where the first parameter is a number of times the block as the second parameter should be invoked.  This is what historical Redbol called LOOP.

So with that out of the way... we can think about LOOP as being something more on the scale of PARSE (UPARSE!) in which you can richly express your iteration intent.

An obvious place to look for inspiration for such a dialect is Common Lisp&#39;s LOOP.  (There&#39;s also a kind of &quot;LOOP-lite&quot; called ITERATE)

* [https://lispcookbook.github.io/cl-cookbook/iteration.html](https://lispcookbook.github.io/cl-cookbook/iteration.html)

* [https://gigamonkeys.com/book/loop-for-black-belts.html](https://gigamonkeys.com/book/loop-for-black-belts.html)

* [https://iterate.common-lisp.dev/](https://iterate.common-lisp.dev/)

I&#39;ve skimmed these things but never actually used them.

Clearly we have an advantage in expressivity due to having more parts in the box.  But also, since we are oriented toward the visceral/extensible experience without much regard to performance, that could present some opportunities in clarity that they would not take.

Having built prototypes of [SWITCH2](https://forum.rebol.info/t/match-in-rust-vs-switch/1835/4?u=hostilefork) and [DESTRUCTURE](https://forum.rebol.info/t/destructure-dialect/1877) on top of UPARSE, I think it&#39;s past time to start prototyping what our take on LOOP might look like.

Anyone want to take a stab at designing it?  I&#39;d write it if there were a good examples of what it should look like.</description>
    
    <lastBuildDate>Wed, 13 Jul 2022 22:29:16 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/common-lisp-loop-and-iterate/1878.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Common Lisp LOOP and ITERATE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>LOOP is about the shortest word you can get in the looping world <sub>(FOR is one letter shorter, I guess)</sub>.</p>
<p>So in a language that claims itself to be all-about-dialects, it doesn't seem to make sense to make LOOP the dumbest iteration construct in the box.</p>
<p>In Ren-C <strong>REPEAT</strong> is arity-2, where the first parameter is a number of times the block as the second parameter should be invoked.  This is what historical Redbol called LOOP.</p>
<p>So with that out of the way... we can think about LOOP as being something more on the scale of PARSE (UPARSE!) in which you can richly express your iteration intent.</p>
<p>An obvious place to look for inspiration for such a dialect is Common Lisp's LOOP.  (There's also a kind of "LOOP-lite" called ITERATE)</p>
<ul>
<li>
<p><a href="https://lispcookbook.github.io/cl-cookbook/iteration.html">https://lispcookbook.github.io/cl-cookbook/iteration.html</a></p>
</li>
<li>
<p><a href="https://gigamonkeys.com/book/loop-for-black-belts.html">https://gigamonkeys.com/book/loop-for-black-belts.html</a></p>
</li>
<li>
<p><a href="https://iterate.common-lisp.dev/">https://iterate.common-lisp.dev/</a></p>
</li>
</ul>
<p>I've skimmed these things but never actually used them.</p>
<p>Clearly we have an advantage in expressivity due to having more parts in the box.  But also, since we are oriented toward the visceral/extensible experience without much regard to performance, that could present some opportunities in clarity that they would not take.</p>
<p>Having built prototypes of <a href="https://forum.rebol.info/t/match-in-rust-vs-switch/1835/4">SWITCH2</a> and <a href="https://forum.rebol.info/t/destructure-dialect/1877">DESTRUCTURE</a> on top of UPARSE, I think it's past time to start prototyping what our take on LOOP might look like.</p>
<p>Anyone want to take a stab at designing it?  I'd write it if there were a good examples of what it should look like.</p>
          <p><a href="https://forum.rebol.info/t/common-lisp-loop-and-iterate/1878/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/common-lisp-loop-and-iterate/1878/1</link>
        <pubDate>Wed, 13 Jul 2022 22:29:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1878-1</guid>
        <source url="https://forum.rebol.info/t/common-lisp-loop-and-iterate/1878.rss">Common Lisp LOOP and ITERATE</source>
      </item>
  </channel>
</rss>
