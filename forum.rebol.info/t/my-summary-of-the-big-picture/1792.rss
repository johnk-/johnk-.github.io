<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>My Summary of the Big Picture</title>
    <link>https://forum.rebol.info/t/my-summary-of-the-big-picture/1792</link>
    <description>I wrote this to someone in a GitHub issue and thought it was pretty salient:

&gt; What has drawn people to Rebol historically has varied. But a large number who praised it and used it were less interested in the language itself, rather the properties of the executable. It was small, and you could run on any OS without installing anything else...it came with a GUI built in.
&gt;
&gt; But when serious language theorists look at Rebol, they notice it is riddled with design holes. The language itself wasn&#39;t *composable* the way one might like languages to be: mixing constructs in new ways that weren&#39;t specifically accounted for never worked. It was more like a &quot;scriptable app&quot; that had a few features that pleased its userbase...and had to be extended by the designer every time a new need came up.
&gt;
&gt; So put briefly: If you don&#39;t understand what these holes are, then you won&#39;t appreciate the many issues that Ren-C is trying to solve.
&gt;
&gt; Once you know that historical Rebol was fundamentally broken, there are basically 3 choices:
&gt;
&gt; 1. Inventory and address the holes one at a time and try to fix or mitigate them
&gt; 2. Ignore the holes and just hope that if you add enough features and integration no one will notice
&gt; 3. Turn away and run from the crackpots using it, and work with a more solidly designed language
&gt;
&gt; (1) is Ren-C&#39;s hard-chosen path. Energy is spent on identifying certain patterns in source that users *must* be able to write and have work, if the language is to justify its existence at all. While it would be nice if stack traces were beautiful and if building the sources was 100% easy, all of that would be meaningless if the punch line was *&quot;oh, and the language this is all supporting doesn&#39;t actually work&quot;*
&gt;
&gt; (2) is chosen by people like Red and [Oldes&#39;s branch of R3-Alpha](https://github.com/Oldes/Rebol3), as well as some clones that have popped up over the years. Starting from scratch inevitably makes the same mistakes.
&gt;
&gt; (3) is probably the most sensible choice, but if I didn&#39;t think there was some promise in the language I wouldn&#39;t be pursuing (1).</description>
    
    <lastBuildDate>Mon, 01 Jan 2024 02:48:31 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://forum.rebol.info/t/my-summary-of-the-big-picture/1792.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>My Summary of the Big Picture</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="3" data-topic="1792">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>which <em>more solidly designed language</em> used by non-crackpots are people more likely to opt for vs. popular languages</p>
</blockquote>
</aside>
<p>I'd guess the sort of competition in the homoiconic space I'd have in mind would be people using things like Clojure (or <a href="https://clojurescript.org/">ClojureScript</a>).  But I think if you look at things like Julia or Go, there are some real strengths there.  And Rust and Haskell are good projects for those who want to step away from popularity but get rigor as a benefit.</p>
<blockquote>
<p>The language itself wasn't <em>composable</em> the way one might like languages to be</p>
</blockquote>
<p>I think if you look at the FOR-BOTH example in Ren-C, it really tells a story that isn't there in historical Rebol.</p>
<pre><code>for-both: func ['var blk1 blk2 body] [
    return unmeta* all [
        meta* for-each :var blk1 body
        meta* for-each :var blk2 body
    ]
]
</code></pre>
<p>It's just across the board more solid.  Not only does definitional RETURN mean that a return in the body will act as the person using the loop would expect, but BREAK and CONTINUE will behave correctly...returning the aggregate loop result.</p>
<pre><code> &gt;&gt; for-both x [1 2] [3 4] [print ["x is" x], x * 10]
 x is 1
 x is 2
 x is 3
 x is 4
 == 40

&gt;&gt; for-both x [] [] [print ["x is" x], &lt;result&gt;]

&gt;&gt; for-both x [1 2] [3 4] [print ["x is" x], if x = 2 [break]]
x is 1
x is 2
== ~null~  ; isotope
</code></pre>
<p>All the ideas come together here.  With META* ~ isotopes and ~null~ isotopes etc. become quasiforms that are truthy, NULL goes to NULL, VOID goes to VOID, everything else becomes one level more quoted than it was, and all QUOTED! are truthy.  NULL is reserved uniquely for the signal of BREAK, and so everything... works.</p>
          <p><a href="https://forum.rebol.info/t/my-summary-of-the-big-picture/1792/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/my-summary-of-the-big-picture/1792/4</link>
        <pubDate>Tue, 22 Feb 2022 20:24:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1792-4</guid>
        <source url="https://forum.rebol.info/t/my-summary-of-the-big-picture/1792.rss">My Summary of the Big Picture</source>
      </item>
      <item>
        <title>My Summary of the Big Picture</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Not disputing this overview <em>per se</em>—however these statements aren't immediately elucidated without some digging. Is there a succinct citation for each of them?</p>
<ul>
<li>
<p>When serious language theorists look at Rebol, they notice it is riddled with design holes</p>
</li>
<li>
<p>The language itself wasn't <em>composable</em> the way one might like languages to be</p>
</li>
</ul>
<hr>
<p>Would echo (I think) <a class="mention" href="https://forum.rebol.info/u/iarnold">@iArnold</a>'s sense on 3—which <em>more solidly designed language</em> used by non-crackpots are people more likely to opt for vs. popular languages which may have the same or worse design issues but have the security blanket implied by that popularity?</p>
          <p><a href="https://forum.rebol.info/t/my-summary-of-the-big-picture/1792/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/my-summary-of-the-big-picture/1792/3</link>
        <pubDate>Mon, 21 Feb 2022 22:21:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1792-3</guid>
        <source url="https://forum.rebol.info/t/my-summary-of-the-big-picture/1792.rss">My Summary of the Big Picture</source>
      </item>
      <item>
        <title>My Summary of the Big Picture</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>3 is also dealing with the shortcomings of the alternatives like there are ugly syntax and dependency hells.</p>
<p>Besides there are holes everywhere, they are more hidden or plugged with another library you do not control.<br>
And most important there is no fun and nothing to learn from option 3 and that is also a rectification for following option 2. We need to remember the state original Rebol was at before Red project started, it was not open sourced and it was abandonware.<br>
The effort of Oldes is imo to be placed as making it work for personal use mainly, like the World language and Boron.<br>
Kaj"s Meta is an interesting alternative bringing Rebol back to some computing roots to get the basics right, without need for fixing R3 or Red designs.</p>
          <p><a href="https://forum.rebol.info/t/my-summary-of-the-big-picture/1792/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/my-summary-of-the-big-picture/1792/2</link>
        <pubDate>Sat, 19 Feb 2022 22:16:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1792-2</guid>
        <source url="https://forum.rebol.info/t/my-summary-of-the-big-picture/1792.rss">My Summary of the Big Picture</source>
      </item>
      <item>
        <title>My Summary of the Big Picture</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I wrote this to someone in a GitHub issue and thought it was pretty salient:</p>
<blockquote>
<p>What has drawn people to Rebol historically has varied. But a large number who praised it and used it were less interested in the language itself, rather the properties of the executable. It was small, and you could run on any OS without installing anything else...it came with a GUI built in.</p>
<p>But when serious language theorists look at Rebol, they notice it is riddled with design holes. The language itself wasn't <em>composable</em> the way one might like languages to be: mixing constructs in new ways that weren't specifically accounted for never worked. It was more like a "scriptable app" that had a few features that pleased its userbase...and had to be extended by the designer every time a new need came up.</p>
<p>So put briefly: If you don't understand what these holes are, then you won't appreciate the many issues that Ren-C is trying to solve.</p>
<p>Once you know that historical Rebol was fundamentally broken, there are basically 3 choices:</p>
<ol>
<li>Inventory and address the holes one at a time and try to fix or mitigate them</li>
<li>Ignore the holes and just hope that if you add enough features and integration no one will notice</li>
<li>Turn away and run from the crackpots using it, and work with a more solidly designed language</li>
</ol>
<p>(1) is Ren-C's hard-chosen path. Energy is spent on identifying certain patterns in source that users <em>must</em> be able to write and have work, if the language is to justify its existence at all. While it would be nice if stack traces were beautiful and if building the sources was 100% easy, all of that would be meaningless if the punch line was <em>"oh, and the language this is all supporting doesn't actually work"</em></p>
<p>(2) is chosen by people like Red and <a href="https://github.com/Oldes/Rebol3">Oldes's branch of R3-Alpha</a>, as well as some clones that have popped up over the years. Starting from scratch inevitably makes the same mistakes.</p>
<p>(3) is probably the most sensible choice, but if I didn't think there was some promise in the language I wouldn't be pursuing (1).</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/my-summary-of-the-big-picture/1792/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/my-summary-of-the-big-picture/1792/1</link>
        <pubDate>Fri, 18 Feb 2022 19:37:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1792-1</guid>
        <source url="https://forum.rebol.info/t/my-summary-of-the-big-picture/1792.rss">My Summary of the Big Picture</source>
      </item>
  </channel>
</rss>
