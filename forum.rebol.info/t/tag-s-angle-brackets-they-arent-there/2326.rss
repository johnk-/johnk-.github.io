<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>TAG!s Angle Brackets: *They Aren&#39;t There!*</title>
    <link>https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326</link>
    <description>Implementation-wise, the delimiters of tag have been quite the thorn.

Are they there or not?

In Rebol2, Red, R3-Alpha...

    &gt;&gt; find &lt;abcd&gt; &quot;c&quot;
    == &lt;cd&gt;

    &gt;&gt; find &lt;abcd&gt; &quot;&gt;&quot;
    == none

Not there!

Or are they?  Reverse the arguments, and in Rebol2 and Red, they seem to magically appear:

    &gt;&gt; find &quot;ab&lt;c&gt;d&quot; &lt;c&gt;
    == &quot;&lt;c&gt;d&quot;

But... this was not the case in R3-Alpha...

    r3-alpha&gt;&gt; find &quot;abcd&quot; &lt;c&gt;
    == &quot;cd&quot;

    r3-alpha&gt;&gt; find &quot;ab&lt;c&gt;d&quot; &lt;c&gt;
    == &quot;c&gt;d&quot;

I know things have gone back and forth with people believing deeply in their little hearts that they are happier when routines act like the delimiters are there...

But for the baseline behavior: *I have come to believe R3-Alpha is right.*  They&#39;re string delimiters, and incidental to the default purpose, just as quotes are.

If you start looking at TAG! as it truly is--just another string class with different delimiters--it simplifies the mental model and the implementation model.  You can truly just use it like another string, and it suddenly becomes consistent.

Of course, it&#39;s still nice to be able to match the molded form of a tag.

But... why stop at tags? ðŸ¤” Why not have a syntax to match the molded form of anything?

In strings, where you can&#39;t match list elements literally anyway:

    &gt;&gt; parse &quot;&lt;a&gt; 100 (b c)&quot; [&#39;&lt;a&gt; space &#39;100 space &#39;(b c)]
    == (b c)

(The synthesized product may be more interesting, too.  As a reminder, Ren-C has taken words that might be better as variable names like END and uses plain tag as &lt;end&gt; instead, or &lt;input&gt; to synthesize the parse input, etc.)

    &gt;&gt; parse &quot;&lt;end&gt; asdf&quot; [&#39;&lt;end&gt; to &lt;end&gt; &lt;input&gt;]
    == &quot;&lt;end&gt; asdf&quot;

I don&#39;t know whether that is best done as just a PARSE feature, or if quoted things need to be searched for literally by FIND.

    &gt;&gt; find &quot;ab&lt;c&gt;d&quot; &lt;c&gt;
    == &quot;c&gt;d&quot;

    &gt;&gt; quote &lt;c&gt;
    == &#39;&lt;c&gt;

    &gt;&gt; find &quot;ab&lt;c&gt;d&quot; quote &lt;c&gt;
    == &quot;&lt;c&gt;d&quot;

    &gt;&gt; find &quot;ab&lt;c&gt;d&quot; mold &lt;c&gt;  ; one fewer character
    == &quot;&lt;c&gt;d&quot;</description>
    
    <lastBuildDate>Sun, 17 Nov 2024 02:52:43 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>TAG!s Angle Brackets: *They Aren&#39;t There!*</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>OK, I find that example more convincing than the TAG! one.</p>
          <p><a href="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/6</link>
        <pubDate>Sun, 17 Nov 2024 02:52:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2326-6</guid>
        <source url="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326.rss">TAG!s Angle Brackets: *They Aren&#39;t There!*</source>
      </item>
      <item>
        <title>TAG!s Angle Brackets: *They Aren&#39;t There!*</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's a choice.  The systemic pattern of letting you use quoted things to represent their molded representations gives you an economy I like:</p>
<pre><code>&gt;&gt; left: "foo"
&gt;&gt; right "bar"

&gt;&gt; unspaced [left '# right]
== "foo#bar"

&gt;&gt; unspaced [left "#" right]
== "foo#bar"
</code></pre>
<p>It's 3 fewer "ticks".</p>
<p>Of course, can't work for everything:</p>
<pre><code>&gt;&gt; unspaced [left "[" right]
== "foo[bar"
</code></pre>
<p>But where it does work, I think it's good.</p>
<p>People can make up their own minds on when it's more confusing than it is helpful.  Some might like it for string formation, but not string parsing.  Maybe even if a tag is a common parse instruction it might be in double quotes, while something like <strong><code>&lt;br /&gt;</code></strong> would be obviously not a parse instruction and matched by an apostrophe.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/5</link>
        <pubDate>Sat, 16 Nov 2024 15:36:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2326-5</guid>
        <source url="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326.rss">TAG!s Angle Brackets: *They Aren&#39;t There!*</source>
      </item>
      <item>
        <title>TAG!s Angle Brackets: *They Aren&#39;t There!*</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>Sure, I realise that you <em>can</em> do all these things. Iâ€™m just thinking that it seems less confusing to write their string representations as strings.</p>
          <p><a href="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/4</link>
        <pubDate>Sat, 16 Nov 2024 15:05:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2326-4</guid>
        <source url="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326.rss">TAG!s Angle Brackets: *They Aren&#39;t There!*</source>
      </item>
      <item>
        <title>TAG!s Angle Brackets: *They Aren&#39;t There!*</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2326">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>But what if (for whatever reason) you did want to match the quoted tag <code>'&lt;end&gt;</code>, say, in an input block?</p>
</blockquote>
</aside>
<p>You can say:</p>
<pre><code>&gt;&gt; parse ['&lt;end&gt; asdf] [''&lt;end&gt; to &lt;end&gt; &lt;input&gt;]
== ['&lt;end&gt; asdf]
</code></pre>
<p>Or alternately, <a href="https://forum.rebol.info/t/exact-matching-of-variables-with-the-types-in-uparse/1643/7">you can use LITERAL</a>:</p>
<pre><code>&gt;&gt; parse ['&lt;end&gt; asdf] [literal '&lt;end&gt; to &lt;end&gt; &lt;input&gt;]
== ['&lt;end&gt; asdf]
</code></pre>
<p>Abbreviated:</p>
<pre><code>&gt;&gt; parse ['&lt;end&gt; asdf] [lit '&lt;end&gt; to &lt;end&gt; &lt;input&gt;]
== ['&lt;end&gt; asdf]
</code></pre>
          <p><a href="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/3</link>
        <pubDate>Sat, 16 Nov 2024 12:46:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2326-3</guid>
        <source url="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326.rss">TAG!s Angle Brackets: *They Aren&#39;t There!*</source>
      </item>
      <item>
        <title>TAG!s Angle Brackets: *They Aren&#39;t There!*</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2326">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; parse "&lt;end&gt; asdf" ['&lt;end&gt; to &lt;end&gt; &lt;input&gt;]
== "&lt;end&gt; asdf"
</code></pre>
</blockquote>
</aside>
<p>But what if (for whatever reason) you did want to match the quoted tag <code>'&lt;end&gt;</code>, say, in an input block? I donâ€™t think thereâ€™s much advantage over just writing <code>["&lt;end&gt;" to &lt;end&gt; &lt;input&gt;]</code>, which is only one character longer, and strikes me as being clearer.</p>
          <p><a href="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/2</link>
        <pubDate>Sat, 16 Nov 2024 12:23:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2326-2</guid>
        <source url="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326.rss">TAG!s Angle Brackets: *They Aren&#39;t There!*</source>
      </item>
      <item>
        <title>TAG!s Angle Brackets: *They Aren&#39;t There!*</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Implementation-wise, the delimiters of tag have been quite the thorn.</p>
<p>Are they there or not?</p>
<p>In Rebol2, Red, R3-Alpha...</p>
<pre><code>&gt;&gt; find &lt;abcd&gt; "c"
== &lt;cd&gt;

&gt;&gt; find &lt;abcd&gt; "&gt;"
== none
</code></pre>
<p>Not there!</p>
<p>Or are they?  Reverse the arguments, and in Rebol2 and Red, they seem to magically appear:</p>
<pre><code>&gt;&gt; find "ab&lt;c&gt;d" &lt;c&gt;
== "&lt;c&gt;d"
</code></pre>
<p>But... this was not the case in R3-Alpha...</p>
<pre><code>r3-alpha&gt;&gt; find "abcd" &lt;c&gt;
== "cd"

r3-alpha&gt;&gt; find "ab&lt;c&gt;d" &lt;c&gt;
== "c&gt;d"
</code></pre>
<p>I know things have gone back and forth with people believing deeply in their little hearts that they are happier when routines act like the delimiters are there...</p>
<p>But for the baseline behavior: <em>I have come to believe R3-Alpha is right.</em>  They're string delimiters, and incidental to the default purpose, just as quotes are.</p>
<p>If you start looking at TAG! as it truly is--just another string class with different delimiters--it simplifies the mental model and the implementation model.  You can truly just use it like another string, and it suddenly becomes consistent.</p>
<p>Of course, it's still nice to be able to match the molded form of a tag.</p>
<p>But... why stop at tags? <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20"> Why not have a syntax to match the molded form of anything?</p>
<p>In strings, where you can't match list elements literally anyway:</p>
<pre><code>&gt;&gt; parse "&lt;a&gt; 100 (b c)" ['&lt;a&gt; space '100 space '(b c)]
== (b c)
</code></pre>
<p>(The synthesized product may be more interesting, too.  As a reminder, Ren-C has taken words that might be better as variable names like END and uses plain tag as  instead, or  to synthesize the parse input, etc.)</p>
<pre><code>&gt;&gt; parse "&lt;end&gt; asdf" ['&lt;end&gt; to &lt;end&gt; &lt;input&gt;]
== "&lt;end&gt; asdf"
</code></pre>
<p>I don't know whether that is best done as just a PARSE feature, or if quoted things need to be searched for literally by FIND.</p>
<pre><code>&gt;&gt; find "ab&lt;c&gt;d" &lt;c&gt;
== "c&gt;d"

&gt;&gt; quote &lt;c&gt;
== '&lt;c&gt;

&gt;&gt; find "ab&lt;c&gt;d" quote &lt;c&gt;
== "&lt;c&gt;d"

&gt;&gt; find "ab&lt;c&gt;d" mold &lt;c&gt;  ; one fewer character
== "&lt;c&gt;d"
</code></pre>
          <p><a href="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326/1</link>
        <pubDate>Fri, 08 Nov 2024 18:12:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2326-1</guid>
        <source url="https://forum.rebol.info/t/tag-s-angle-brackets-they-arent-there/2326.rss">TAG!s Angle Brackets: *They Aren&#39;t There!*</source>
      </item>
  </channel>
</rss>
