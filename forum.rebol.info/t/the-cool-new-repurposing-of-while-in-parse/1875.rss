<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Cool New Repurposing of WHILE in PARSE</title>
    <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875</link>
    <description>Historical Redbol PARSE had some cognitive dissonance over its &quot;looping constructs&quot;. 

One weird point was that WHILE was an arity-1 construct...a peculiar variant of a &quot;looping ANY&quot; which dropped the requirement of a need to make progress.  :confused: 

Just as [ANY could be improved](https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662) by making it do something more &quot;obvious&quot;, I think the obvious solution for WHILE is also the better one:

## So now, default PARSE has WHILE *and it&#39;s arity-2* !

These two things are synonyms:

     while rule1 rule2   &lt;=&gt;  opt some [rule1 rule2]

**One very common application is `WHILE [NOT &lt;END&gt;] [...]`**

This is such a clear case it&#39;s bizarre that no one seemed to go to bat for it before.

**It would make it cleaner to pair up code in a GROUP! with a rule:**

GROUP! rules always run their side effect and succeed.  So:

    opt some [rule (code to run on each match)]

Could instead be written as:

    while rule (code to run on each match)

I would use this frequently!

**It helps pscyhologically divide a process into two parts: trigger and response**

You can of course write things as:

    opt some [
         thing1 thing2 [
            thing3 thing4
         |  thing5 thing6
         ]
    ]

Or:

    opt some [thing1 thing2 [
        thing3 thing4
            |
       thing5 thing6
    ]]

But I think the WHILE structuring into a control half and response half helps you see this better:

    while [thing1 thing2] [
        thing3 thing4
            |
        thing5 thing6
    ]</description>
    
    <lastBuildDate>Mon, 09 Sep 2024 06:32:11 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Cool New Repurposing of WHILE in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1875">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>So now, default PARSE has WHILE <em>and it's arity-2</em></strong></p>
<p>These two things are synonyms:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext"> while rule1 rule2   &lt;=&gt;  opt some [rule1 rule2]
</code></pre>
</blockquote>
</aside>
<p>So there's something actually a little bit unfortunate here, in that there are two possible intents for WHILE's interpretation of the condition:</p>
<ol>
<li>
<p>WHILE rule1 has a successful match</p>
</li>
<li>
<p>WHILE rule1 creates a non-null product</p>
</li>
</ol>
<p>Since it's a PARSE construct, it's formulated as [1].</p>
<p>This means it's a little sad that if you have a logic condition and you want to use it, you have to write:</p>
<pre><code> while [when (true? flag)] ...
</code></pre>
<p>Though you don't need the brackets if you don't want them.</p>
<pre><code> while when (true? flag) ...
</code></pre>
<p>Prior to Flexible Logic, you could use a GET-GROUP! and say:</p>
<pre><code> while :(flag) ...
</code></pre>
<p>But now, you can't do that... if your flag is a boolean or similar, you need to test it and produce OKAY or NULL.  Then because splicing semantics consider NULL too potentially an error.  So if you wanted a GET-GROUP! it would look like:</p>
<pre><code> while :(maybe true? flag) ...
</code></pre>
<p>It's not terrible, but GET-GROUP! may be going away, at which point this would be:</p>
<pre><code> while reparse (maybe true? flag) ...
</code></pre>
<p>At which point you should have just done <strong><code>while when (true? flag)</code></strong></p>
<h2><a name="p-7610-could-while-do-both-stop-on-no-match-or-null-product-1" class="anchor" href="https://forum.rebol.info#p-7610-could-while-do-both-stop-on-no-match-or-null-product-1"></a>Could WHILE Do Both? (stop on no match or null product)</h2>
<p>Nope.</p>
<pre><code>&gt;&gt; parse "aabcabaaabc" [while [x: [some "a" "b" opt "c"]] (probe x)]
"c"
~null~  ; anti
"c"
</code></pre>
<p>NULL-producing rules are valid for WHILE, they can't stop the iteration.</p>
<h2><a name="p-7610-could-you-drive-it-with-the-while-action-combinator-2" class="anchor" href="https://forum.rebol.info#p-7610-could-you-drive-it-with-the-while-action-combinator-2"></a>Could You Drive It With The /WHILE Action Combinator?</h2>
<p>No, that wouldn't do what you wanted.  Calling the /WHILE combinator really just gives the WHILE native a condition block and body block, and has no interaction with PARSE again until that code is finished.</p>
<h2><a name="p-7610-could-you-use-get-group-with-flag-as-okay-vs-bypass-3" class="anchor" href="https://forum.rebol.info#p-7610-could-you-use-get-group-with-flag-as-okay-vs-bypass-3"></a>Could You Use GET-GROUP! With Flag As ~okay~ vs [BYPASS]?</h2>
<p>Yes, you can do that.  For the "just keep going" case you can use <code>~okay~</code> antiform, <code>~void~</code> antiform, an empty rule block... anything of that sort.</p>
<p>I would suggest not calling it "flag" if you do that, but calling it some term related to "guard", because you're saying it's a parse rule.</p>
<p>Then it just becomes as simple as  <strong><code>while guard ...</code></strong>  I think OKAY is the best choice of the passing options, as it gives you a reasonably literate way to talk about it in imperative code: <strong><code>if okay? guard</code></strong> to ask if the guard will continue the parse.</p>
<p>This is probably a good fit if you're in control of the flag state.  If it's coming from somewhere else and not under your purview, guess it's best to use <strong>while when (...)</strong>.</p>
<p>It is a little bit sad that UPARSE won't let you just say <strong>guard: 'bypass</strong> and treat that as a rule, making you use <strong>guard: [bypass]</strong>.  Maybe for the case of single-arity combinators, that should be allowed (definitely not allowed for multi-arity combinators).  I'll think about it.</p>
          <p><a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/3</link>
        <pubDate>Mon, 09 Sep 2024 06:23:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1875-3</guid>
        <source url="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875.rss">The Cool New Repurposing of WHILE in PARSE</source>
      </item>
      <item>
        <title>The Cool New Repurposing of WHILE in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historical Redbol PARSE had some cognitive dissonance over its "looping constructs".</p>
<p>One weird point was that WHILE was an arity-1 construct...a peculiar variant of a "looping ANY" which dropped the requirement of a need to make progress.  <img src="https://forum.rebol.info/images/emoji/twitter/confused.png?v=9" title=":confused:" class="emoji" alt=":confused:"></p>
<p>Just as <a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662">ANY could be improved</a> by making it do something more "obvious", I think the obvious solution for WHILE is also the better one:</p>
<h2>So now, default PARSE has WHILE <em>and it's arity-2</em> !</h2>
<p>These two things are synonyms:</p>
<pre><code> while rule1 rule2   &lt;=&gt;  opt some [rule1 rule2]
</code></pre>
<p><strong>One very common application is <code>WHILE [NOT &lt;END&gt;] [...]</code></strong></p>
<p>This is such a clear case it's bizarre that no one seemed to go to bat for it before.</p>
<p><strong>It would make it cleaner to pair up code in a GROUP! with a rule:</strong></p>
<p>GROUP! rules always run their side effect and succeed.  So:</p>
<pre><code>opt some [rule (code to run on each match)]
</code></pre>
<p>Could instead be written as:</p>
<pre><code>while rule (code to run on each match)
</code></pre>
<p>I would use this frequently!</p>
<p><strong>It helps pscyhologically divide a process into two parts: trigger and response</strong></p>
<p>You can of course write things as:</p>
<pre><code>opt some [
     thing1 thing2 [
        thing3 thing4
     |  thing5 thing6
     ]
]
</code></pre>
<p>Or:</p>
<pre><code>opt some [thing1 thing2 [
    thing3 thing4
        |
   thing5 thing6
]]
</code></pre>
<p>But I think the WHILE structuring into a control half and response half helps you see this better:</p>
<pre><code>while [thing1 thing2] [
    thing3 thing4
        |
    thing5 thing6
]</code></pre>
          <p><a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/1</link>
        <pubDate>Sat, 14 May 2022 23:34:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1875-1</guid>
        <source url="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875.rss">The Cool New Repurposing of WHILE in PARSE</source>
      </item>
      <item>
        <title>The Cool New Repurposing of WHILE in PARSE</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I like WHILE as described here and the improved consistency of ANY and ALL.</p>
          <p><a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/2</link>
        <pubDate>Sat, 27 Mar 2021 14:19:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1875-2</guid>
        <source url="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875.rss">The Cool New Repurposing of WHILE in PARSE</source>
      </item>
  </channel>
</rss>
