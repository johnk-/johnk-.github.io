<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Cool New Repurposing of WHILE in PARSE</title>
    <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875</link>
    <description>Historical Redbol PARSE had some cognitive dissonance over its &quot;looping constructs&quot;. 

One weird point was that WHILE was an arity-1 construct...a peculiar variant of a &quot;looping ANY&quot; which dropped the requirement of a need to make progress.  :confused: 

Just as [ANY could be improved](https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662) by making it do something more &quot;obvious&quot;, I think the obvious solution for WHILE is also the better one:

## So now, default PARSE has WHILE *and it&#39;s arity-2* !

These two things are synonyms:

     while rule1 rule2   &lt;=&gt;  opt some [rule1 rule2]

**One very common application is `WHILE [NOT &lt;END&gt;] [...]`**

This is such a clear case it&#39;s bizarre that no one seemed to go to bat for it before.

**It would make it cleaner to pair up code in a GROUP! with a rule:**

GROUP! rules always run their side effect and succeed.  So:

    opt some [rule (code to run on each match)]

Could instead be written as:

    while rule (code to run on each match)

I would use this frequently!

**It helps pscyhologically divide a process into two parts: trigger and response**

You can of course write things as:

    opt some [
         thing1 thing2 [
            thing3 thing4
         |  thing5 thing6
         ]
    ]

Or:

    opt some [thing1 thing2 [
        thing3 thing4
            |
       thing5 thing6
    ]]

But I think the WHILE structuring into a control half and response half helps you see this better:

    while [thing1 thing2] [
        thing3 thing4
            |
        thing5 thing6
    ]</description>
    
    <lastBuildDate>Wed, 26 Jul 2023 15:40:31 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Cool New Repurposing of WHILE in PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historical Redbol PARSE had some cognitive dissonance over its "looping constructs".</p>
<p>One weird point was that WHILE was an arity-1 construct...a peculiar variant of a "looping ANY" which dropped the requirement of a need to make progress.  <img src="https://forum.rebol.info/images/emoji/twitter/confused.png?v=9" title=":confused:" class="emoji" alt=":confused:"></p>
<p>Just as <a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662">ANY could be improved</a> by making it do something more "obvious", I think the obvious solution for WHILE is also the better one:</p>
<h2>So now, default PARSE has WHILE <em>and it's arity-2</em> !</h2>
<p>These two things are synonyms:</p>
<pre><code> while rule1 rule2   &lt;=&gt;  opt some [rule1 rule2]
</code></pre>
<p><strong>One very common application is <code>WHILE [NOT &lt;END&gt;] [...]</code></strong></p>
<p>This is such a clear case it's bizarre that no one seemed to go to bat for it before.</p>
<p><strong>It would make it cleaner to pair up code in a GROUP! with a rule:</strong></p>
<p>GROUP! rules always run their side effect and succeed.  So:</p>
<pre><code>opt some [rule (code to run on each match)]
</code></pre>
<p>Could instead be written as:</p>
<pre><code>while rule (code to run on each match)
</code></pre>
<p>I would use this frequently!</p>
<p><strong>It helps pscyhologically divide a process into two parts: trigger and response</strong></p>
<p>You can of course write things as:</p>
<pre><code>opt some [
     thing1 thing2 [
        thing3 thing4
     |  thing5 thing6
     ]
]
</code></pre>
<p>Or:</p>
<pre><code>opt some [thing1 thing2 [
    thing3 thing4
        |
   thing5 thing6
]]
</code></pre>
<p>But I think the WHILE structuring into a control half and response half helps you see this better:</p>
<pre><code>while [thing1 thing2] [
    thing3 thing4
        |
    thing5 thing6
]</code></pre>
          <p><a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/1</link>
        <pubDate>Sat, 14 May 2022 23:34:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1875-1</guid>
        <source url="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875.rss">The Cool New Repurposing of WHILE in PARSE</source>
      </item>
      <item>
        <title>The Cool New Repurposing of WHILE in PARSE</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I like WHILE as described here and the improved consistency of ANY and ALL.</p>
          <p><a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/2</link>
        <pubDate>Sat, 27 Mar 2021 14:19:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1875-2</guid>
        <source url="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875.rss">The Cool New Repurposing of WHILE in PARSE</source>
      </item>
  </channel>
</rss>
