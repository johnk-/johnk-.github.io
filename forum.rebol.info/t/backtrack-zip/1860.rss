<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Backtrack: Zip</title>
    <link>https://forum.rebol.info/t/backtrack-zip/1860</link>
    <description>In contemplating what I&#39;m looking to achieve with R3C, I&#39;ve been backtracking on ways in which I&#39;ve/we&#39;ve approached working with common formats.

I&#39;ve [mused over Zip](https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160) before and given thought I&#39;d revisit this first. [This time in Rebol 2](https://github.com/rgchris/Scripts/blob/master/rebol-2/zip.r) (along with a [core-friendly Deflate](https://github.com/rgchris/Scripts/blob/master/rebol-2/deflate.r) implementation).

# Unpacking

First goal here is versatility: no *unzip and be done*—rather try to isolate the atomic steps of retrieval so as to offer more control over the process. Thus:

```
archive: zip/load %archive.zip
```

Returns an object representing the archive and

```
entry: zip/step archive
```

Will return the next entry (or none if at the end). So far nothing has been decompressed thus is a relatively cheap operation. Metadata for that entry such as filename/date is readily available.

```
entry/filename
entry/date
```

As is the compressed content itself:

```
content: zip/unpack entry
```

With these building blocks, it&#39;s easy enough to extract a whole archive or target specific files:

```rebol
doc: zip/load %document.odt

while [
    file: zip/step doc
][
    if file/filename == %mimetype [
        probe zip/unpack file
        ; =&gt; &quot;application/vnd.oasis.opendocument.text&quot;
    ]
]
```

# Packing

This presented a few conceptional challenges as to how one represents archives/entries in construction. Essentially an archive is a block of entry objects sharing the same structure as above (conceptually you could just throw those extracted entry objects into a block and pack them, but in writing this I don&#39;t recall if I implemented that—need to go back and look, would be cool if so).

```
new-archive: reduce [
    zip/prepare %thing #{01234567}
]

write %thing.zip zip/pack new-archive
```

Again, a key here is to keep the steps atomized so they can be handled in different ways. One such way is a wrapper that provides shorthand contextual functions (in one sense a &#39;dialect&#39; but is just regular code).

```
write %thing.zip zip/build [
    add-file %mimetype &quot;application/x-rebol+zip&quot;

    repeat count 3 [
        add-file join %thing- count #{01234567}
    ]

    add-comment &quot;A possibly useful note&quot;
]
```

# Relevance

I don&#39;t think anything here resembles anything particularly revolutionary, only that it&#39;s a departure from the typical Rebol way of doing things that I think opens up some possibilities. This isn&#39;t an end point, there&#39;s a bit more digging to do</description>
    
    <lastBuildDate>Fri, 08 Jul 2022 17:22:08 +0000</lastBuildDate>
    <category>R3C</category>
    <atom:link href="https://forum.rebol.info/t/backtrack-zip/1860.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Backtrack: Zip</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="7" data-topic="1860">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I know that ZIP(/UNZIP) is familiar as a verb, but I'm tending to find that starting from here leads to burning such words on such a narrow subset</p>
</blockquote>
</aside>
<p>Maybe <strong><code>encode zip</code></strong> and <strong><code>decode zip</code></strong> could be a literate way of asking for the operation, leaving <strong>zip.xxx</strong> available as a namespace...</p>
<p><em>(This puts the burden on ENCODE and DECODE for explaining exactly what all it is they bring to the table as verbs, and what the "value-add" is over <code>zip.encode</code> and <code>zip.decode</code> as plain functions...but articulating that "value-add" is needed system-wide for things like READ and such as well.)</em></p>
          <p><a href="https://forum.rebol.info/t/backtrack-zip/1860/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtrack-zip/1860/8</link>
        <pubDate>Fri, 08 Jul 2022 17:22:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1860-8</guid>
        <source url="https://forum.rebol.info/t/backtrack-zip/1860.rss">Backtrack: Zip</source>
      </item>
      <item>
        <title>Backtrack: Zip</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1860">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>(Maybe it could be called ZIPPER or something like that to speak of its generality, and save ZIP for higher-level tools that could be very situationally specific to what people are doing in a particular project? Doesn't matter as everyone can redefine everything.)</p>
</blockquote>
</aside>
<p>There's a few areas where this would apply and I'm increasing leaning toward taking the format name (noun) and using that as a namespace for all operations pertaining to that format (where that makes sense). I know that ZIP(/UNZIP) is familiar as a verb, but I'm tending to find that starting from here leads to burning such words on such a narrow subset</p>
<p>I'd add DEFLATE(/INFLATE) as another data point: Deflate (the format) has more nuance to it than <code>thing &lt;-&gt; compressed-thing</code>. The current INFLATE verb, for instance, doesn't take advantage of Deflate's self-terminating quality, thus while it meets the most common need, more words are required for more subtle usage.</p>
<p>One solution could be to group such words in a single context: e.g. <code>formats/zip/unpack</code>. Idk, depends how messy that gets in code I guess.</p>
          <p><a href="https://forum.rebol.info/t/backtrack-zip/1860/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtrack-zip/1860/7</link>
        <pubDate>Fri, 08 Jul 2022 17:19:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1860-7</guid>
        <source url="https://forum.rebol.info/t/backtrack-zip/1860.rss">Backtrack: Zip</source>
      </item>
      <item>
        <title>Backtrack: Zip</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1860">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'd have to review to see how many of these attributes can be deferred to the directory at the end of the stream</p>
</blockquote>
</aside>
<p>You can possibly get away deferring everything to the index, however—I think it is considered best practice to have the index and entries match (<em><a href="https://www.bamsoftware.com/hacks/zipbomb/">A better Zip Bomb</a></em> is my guardrail for this)</p>
          <p><a href="https://forum.rebol.info/t/backtrack-zip/1860/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtrack-zip/1860/6</link>
        <pubDate>Tue, 05 Jul 2022 00:32:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1860-6</guid>
        <source url="https://forum.rebol.info/t/backtrack-zip/1860.rss">Backtrack: Zip</source>
      </item>
      <item>
        <title>Backtrack: Zip</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="4" data-topic="1860">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<pre><code>mimetype: add-file %mimetype "application/x-rebol+zip"
mimetype/date: now - 10
mimetype/is-executable: true
</code></pre>
</blockquote>
</aside>
<p>That is a good ability.  I guess I'd have to review to see how many of these attributes can be deferred to the directory at the end of the stream... maybe all of them can?</p>
<p>If so, ADD-FILE could already have sent the file over a network or whatever (maybe even be done by the time it returned, if it was quick).  Then if it keeps a memory of these metadata objects, it could write all your changes at the end...if it waited to write the directory until the very end of the build.</p>
<p>But anything that needs to be on the entry itself would have to be part of the input to ADD-FILE or you couldn't assume you could start streaming it yet.</p>
<p>(I haven't looked at zip in a while, so my knowledge is rusty.)</p>
          <p><a href="https://forum.rebol.info/t/backtrack-zip/1860/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtrack-zip/1860/5</link>
        <pubDate>Mon, 04 Jul 2022 22:13:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1860-5</guid>
        <source url="https://forum.rebol.info/t/backtrack-zip/1860.rss">Backtrack: Zip</source>
      </item>
      <item>
        <title>Backtrack: Zip</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1860">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Since you're looking at more granular means of not putting everything in memory at once, that might be relevant to consider... in terms of how the ZIP/BUILD might be able to emit information to a port as it goes.</p>
</blockquote>
</aside>
<p>Yes, but (and not a show stopper)—within ZIP/BUILD, individual functions return the entry so it can be manipulated:</p>
<pre><code class="lang-auto">write %thing.zip zip/build [
    mimetype: add-file %mimetype "application/x-rebol+zip"
    mimetype/date: now - 10
    mimetype/is-executable: true
]
</code></pre>
<p>I mean, sure—ADD-FILE could be refined to handle options, just food for thought</p>
          <p><a href="https://forum.rebol.info/t/backtrack-zip/1860/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtrack-zip/1860/4</link>
        <pubDate>Mon, 04 Jul 2022 22:05:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1860-4</guid>
        <source url="https://forum.rebol.info/t/backtrack-zip/1860.rss">Backtrack: Zip</source>
      </item>
      <item>
        <title>Backtrack: Zip</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I think in-memory is important when approaching Zip as a file format (ODT, ePub, etc) as opposed to an archive, so having a skeleton that can go in different directions is key</p>
          <p><a href="https://forum.rebol.info/t/backtrack-zip/1860/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtrack-zip/1860/3</link>
        <pubDate>Mon, 04 Jul 2022 21:48:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1860-3</guid>
        <source url="https://forum.rebol.info/t/backtrack-zip/1860.rss">Backtrack: Zip</source>
      </item>
      <item>
        <title>Backtrack: Zip</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I think it's a good approach (and a good tool for building higher-level zip dialects).</p>
<p>(Maybe it could be called ZIPPER or something like that to speak of its generality, and save ZIP for higher-level tools that could be very situationally specific to what people are doing in a particular project?  Doesn't matter as everyone can redefine everything.)</p>
<p>I would put in a plug for wherever this goes supporting the creation of a URI! for generalized reading, e.g. extracting single file, which I've mentioned before:</p>
<pre><code>data: read zip://wherever/something.zip/folder/file.dat
</code></pre>
<p>But that would be built on top of this.</p>
<aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1860">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>First goal here is versatility: no <em>unzip and be done</em>—rather try to isolate the atomic steps of retrieval so as to offer more control over the process.</p>
</blockquote>
</aside>
<p>I've been skeptical of the arity-2 unzip, because I feel like UNZIP with the "unzip and be done" should take a file/url/binary and dump it in the "current directory".  (But the current directory should be able to be in memory in a virtual filesystem...)</p>
<blockquote>
<pre><code>archive: zip/load %archive.zip
</code></pre>
</blockquote>
<p>My first thought was "hey that's kind of like a <a href="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311">generator or yielder</a>" <em>(note: not merged into mainline builds yet, though the stackless abilities they depend on are merged)</em></p>
<p>So I thought "maybe it could be an 'unzipper'"</p>
<pre><code>archive: unzipper %archive.zip  ; hmmm
</code></pre>
<p>But that makes ARCHIVE a function, which is hard to name.  Your approach is probably better to have the archive separately represent the state, and then call operations on it.</p>
<p><em>That said</em>, a generator/yielder might be useful in the internal implementation.  It may be easier to write ZIP/STEP if your enumeration can stay in the middle of whatever loop it's in and YIELD the data at each step, then communicate with the stepper.</p>
<blockquote>
<pre><code>write %thing.zip zip/build
</code></pre>
</blockquote>
<p>So zips can not only be read as streams, but also written as streams.  <a href="https://github.com/metaeducation/ren-c/blob/d4f0d1f281a0329f14d2e8f4f126eb9564ac7e91/scripts/unzip.reb#L345">I remark on something interesting about that</a>, involving a bug fixed in Ren-C's unzip:</p>
<pre><code>; NOTE: The original rebzip.r did decompression based on the local file
; header records in the zip file.  But due to streaming compression
; these can be incomplete and have zeros for the data sizes.  The only
; reliable source of sizes comes from the central file directory at
; the end of the archive.  That might seem redundant to those not aware
; of the streaming ZIP debacle, because a non-streaming zip can be
; decompressed without it...but streaming files definitely exist!
</code></pre>
<p>I guess since streamed-zip-writing came later in the lifetime of zip, there were a lot of files that had all the compressed sizes up front.  Enough so that some decompressions (at least unzip.reb) presumed that the person who wrote the files was <em>able</em> to go back and patch the bytes at the earlier point in the file.</p>
<p>Anyway, the point being that streaming zip writing is a thing.  Since you're looking at more granular means of not putting everything in memory at once, that might be relevant to consider... in terms of how the ZIP/BUILD might be able to emit information to a port as it goes.</p>
<p>Of course that's all in the "we don't know quite how to do this"...but stackless and green threads are things I believe will play in big with the streaming puzzle.</p>
          <p><a href="https://forum.rebol.info/t/backtrack-zip/1860/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtrack-zip/1860/2</link>
        <pubDate>Mon, 04 Jul 2022 21:19:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1860-2</guid>
        <source url="https://forum.rebol.info/t/backtrack-zip/1860.rss">Backtrack: Zip</source>
      </item>
      <item>
        <title>Backtrack: Zip</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>In contemplating what I'm looking to achieve with R3C, I've been backtracking on ways in which I've/we've approached working with common formats.</p>
<p>I've <a href="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160">mused over Zip</a> before and given thought I'd revisit this first. <a href="https://github.com/rgchris/Scripts/blob/master/rebol-2/zip.r">This time in Rebol 2</a> (along with a <a href="https://github.com/rgchris/Scripts/blob/master/rebol-2/deflate.r">core-friendly Deflate</a> implementation).</p>
<h1>Unpacking</h1>
<p>First goal here is versatility: no <em>unzip and be done</em>—rather try to isolate the atomic steps of retrieval so as to offer more control over the process. Thus:</p>
<pre><code class="lang-auto">archive: zip/load %archive.zip
</code></pre>
<p>Returns an object representing the archive and</p>
<pre><code class="lang-auto">entry: zip/step archive
</code></pre>
<p>Will return the next entry (or none if at the end). So far nothing has been decompressed thus is a relatively cheap operation. Metadata for that entry such as filename/date is readily available.</p>
<pre><code class="lang-auto">entry/filename
entry/date
</code></pre>
<p>As is the compressed content itself:</p>
<pre><code class="lang-auto">content: zip/unpack entry
</code></pre>
<p>With these building blocks, it's easy enough to extract a whole archive or target specific files:</p>
<pre><code class="lang-auto">doc: zip/load %document.odt

while [
    file: zip/step doc
][
    if file/filename == %mimetype [
        probe zip/unpack file
        ; =&gt; "application/vnd.oasis.opendocument.text"
    ]
]
</code></pre>
<h1>Packing</h1>
<p>This presented a few conceptional challenges as to how one represents archives/entries in construction. Essentially an archive is a block of entry objects sharing the same structure as above (conceptually you could just throw those extracted entry objects into a block and pack them, but in writing this I don't recall if I implemented that—need to go back and look, would be cool if so).</p>
<pre><code class="lang-auto">new-archive: reduce [
    zip/prepare %thing #{01234567}
]

write %thing.zip zip/pack new-archive
</code></pre>
<p>Again, a key here is to keep the steps atomized so they can be handled in different ways. One such way is a wrapper that provides shorthand contextual functions (in one sense a 'dialect' but is just regular code).</p>
<pre><code class="lang-auto">write %thing.zip zip/build [
    add-file %mimetype "application/x-rebol+zip"

    repeat count 3 [
        add-file join %thing- count #{01234567}
    ]

    add-comment "A possibly useful note"
]
</code></pre>
<h1>Relevance</h1>
<p>I don't think anything here resembles anything particularly revolutionary, only that it's a departure from the typical Rebol way of doing things that I think opens up some possibilities. This isn't an end point, there's a bit more digging to do</p>
          <p><a href="https://forum.rebol.info/t/backtrack-zip/1860/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtrack-zip/1860/1</link>
        <pubDate>Mon, 04 Jul 2022 20:23:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1860-1</guid>
        <source url="https://forum.rebol.info/t/backtrack-zip/1860.rss">Backtrack: Zip</source>
      </item>
  </channel>
</rss>
