<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Repurposing THE-XXX! (@xxx) For Undecorated Values</title>
    <link>https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135</link>
    <description>Historical Rebol used quoted words (LIT-WORD!) to pass variables to functions, with the idea the function could then later set or get those variables.  The quote level was removed under evaluation, meaning the function got a WORD!

    rebol2&gt;&gt; whatever: 10

    rebol2&gt;&gt; foo: func [var [word!]] [print [var &quot;is&quot; get var]]

    rebol2&gt;&gt; foo &#39;whatever
    whatever is 10

But we now have a general rule that quoting insulates whatever you quote from binding.  So you have to add the binding, by saying something like **`foo in [] &#39;whatever`**

This isn&#39;t the only option, if the callee was willing to receive something other than WORD!.  We also have THE-WORD!, which currently evaluates to the bound version of itself.

    &gt;&gt; @whatever
    == @whatever

    &gt;&gt; foo: func [var [the-word!]] [print [var &quot;is&quot; get var]]

    &gt;&gt; foo @whatever
    @whatever is 10

This gets you the binding you want, but now you have a decorated word, which would be annoying if FOO is trying to do something besides GET/SET the value.  Plain words are the norm.

If you wanted an undecorated word, you could use the standalone @ operator... which gives back its argument literally:

    &gt;&gt; @ a
    == a

**`@ a`** is a little bit uglier than **`&#39;a`** but not as bad as **`in [] &#39;a`**

    &gt;&gt; foo: func [var [word!]] [print [var &quot;is&quot; get var]]

    &gt;&gt; foo @ whatever
    whatever is 10

But the spacing just throws it off to where it no longer looks like a single argument.  And it doesn&#39;t look like one because it isn&#39;t (e.g. can&#39;t fill exactly one slot in the API or a COMPOSE).  @ is also a function under the current design (you can redefine it), so calling it incurs some overhead.

## Or... We Could Say that @ Things Evaluate And Drop The @

    &gt;&gt; @word
    == word  ; bound

    &gt;&gt; @(print &quot;Hello&quot;)
    == (print &quot;Hello&quot;)  ; bound

    &gt;&gt; @[print &quot;Hello&quot;]
    == [print &quot;Hello&quot;]  ; bound, less useful as plain block would have done that

This would make **`@word`** and **`@ word`** symmetrical, which is appealing.

But it&#39;s at the cost of losing the idea of a category of ANY-WORD! that stays somewhat as-is.

## How Big A Loss Is The &quot;Inert&quot; WORD!/GROUP!/TUPLE!/PATH!

In practice, the idea of inert words hasn&#39;t lived up to my hopes for them.  I thought maybe since they would be shielded from multiple phases of reducing, they might become popular for some kind of enumerated types.  But being a bit ugly, that&#39;s not materialized.

If it gives you any idea of how not-popular the application has been, I changed the evaluator behavior and it [only required *one* change in UPARSE to boot](https://github.com/metaeducation/ren-c/blob/0d2d7c39733f21e1088240ab2e5c7614072c8059/src/mezz/uparse.r#L151):

      (if spec.1 = &#39;@pending [
            assert [spec.2 = [&lt;opt&gt; block!]]
            autopipe: false  ; they&#39;re asking to handle pending themselves
            spread reduce [@pending spec.2]  ; &lt;-- this has to be &#39;@pending
            elide spec: my skip 2
        ] else [
            autopipe: true  ; they didn&#39;t mention pending, handle automatically
            spread [@pending [&lt;opt&gt; block!]]
        ])

They&#39;re still free to be used in dialects for whatever purpose (here we see them marking output parameters in the function spec dialect).  And they serve a good purpose in PARSE for &quot;treat this value literally&quot;:

    &gt;&gt; block: [some &quot;a&quot;]
 
    &gt;&gt; parse [&quot;a&quot; &quot;a&quot;] [block]
    == &quot;a&quot;

    &gt;&gt; parse [[some &quot;a&quot;] [some &quot;a&quot;]] [some @block]
    == [some &quot;a&quot;]

But it seems that with the new binding model, they have a higher calling in the evaluator... for producing undecorated bound things!

If you want wordlike things that do not reduce, there&#39;s blank-headed paths like **`/FOO`** (&quot;refinement&quot;).  They have a binding and can be looked up.  Today, blank-headed tuples like **`.FOO`** don&#39;t evaluate, but I&#39;m aiming to say that they do--and that they do member lookup in methods.  Or... y&#39;know... you could put the word in a block! **`[foo]`**

## Note That Decorated Types Have To Use @

There&#39;s no such thing as a THE-SET-BLOCK! (and I don&#39;t imagine there ever will be).

     &gt;&gt; @[x y]:
     ** Error: That doesn&#39;t exist

     &gt;&gt; @ [x y]:
     == [x y]:

So it&#39;s only the plain WORD!, TUPLE!, PATH!, GROUP! and (redundantly) BLOCK! that you can do this without a space.

But it&#39;s likely much rarer to be generating such material bound in isolation.

In any case, preliminary looking at the results, I think this is a solid change and much needed in the new binding world.</description>
    
    <lastBuildDate>Fri, 09 Feb 2024 01:11:27 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Repurposing THE-XXX! (@xxx) For Undecorated Values</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2135">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>Or... We Could Say that @ Things Evaluate And Drop The @</strong></p>
<pre><code class="lang-plaintext">&gt;&gt; @word
== word  ; bound

&gt;&gt; @(print "Hello")
== (print "Hello")  ; bound

&gt;&gt; @[print "Hello"]
== [print "Hello"]  ; bound, less useful as plain block would have done that
</code></pre>
</blockquote>
</aside>
<p>So the consequences of this decision have rippled around.</p>
<ul>
<li>
<p><a href="https://forum.rebol.info/t/should-we-point-the-blame-in-fail-with/1921/2">FAIL needs to use <code>@param</code></a> to blame parameters and implicate callsites, because <code>'param</code> would be unbound.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/3">Soft-quoted branches need to use @ branches to get bound material</a> since plain quoted material will be unbound.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/notation-for-outputs-in-function-specs/1414/8"><code>@arg</code> needs to mean quoted with binding</a> for parameters, so it can't be a marker of multi-return outputs in function specs.</p>
</li>
<li>
<p><a href="https://forum.rebol.info/t/literal-matching-with-the-types-in-uparse/1643/6"><code>@rule</code> will bind the rule product in the current parse data context</a>, pushing literal matches to the GET-XXX! types.  (At least... I think it should do that.)</p>
</li>
</ul>
<p>So this may all align with the idea that under evaluation, the @ operator is just a function that takes its argument as an @-parameter.</p>
<pre><code>@: lambda [@arg] [arg]
</code></pre>
<p>So it's fundamentally related to quoting...and binding.  There's a bit of an dissonance with the usage in PARSE, where it's related to binding but doesn't have anything to do with "quoting".  This is probably fine, it's just taking me a little while to shift the parts around and feel like everything is rational about that distinction.</p>
<p><strong>But maybe these should be BIND-XXX! and not THE-XXX!</strong>.  We may want THE to just take a quoted argument that doesn't bind, and that would shake this up.  Not enough words to describe the nuances, here...</p>
          <p><a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/6</link>
        <pubDate>Fri, 09 Feb 2024 01:11:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2135-6</guid>
        <source url="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135.rss">Repurposing THE-XXX! (@xxx) For Undecorated Values</source>
      </item>
      <item>
        <title>Repurposing THE-XXX! (@xxx) For Undecorated Values</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="https://forum.rebol.info/t/meaning-of-meta-block/2145">Meaning of META-BLOCK! ^[...]</a></p>
          <p><a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/2</link>
        <pubDate>Mon, 05 Feb 2024 19:39:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2135-2</guid>
        <source url="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135.rss">Repurposing THE-XXX! (@xxx) For Undecorated Values</source>
      </item>
      <item>
        <title>Repurposing THE-XXX! (@xxx) For Undecorated Values</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="2135">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>THE-BLOCK! evaluates to BLOCK!, so it is not evaluating to a bound self... it is evaluating to a bound "other"...</p>
</blockquote>
</aside>
<p>Oh, I didn’t realise this was the case. And I didn’t know THE-GROUP! exists either! So that means it’s all symmetrical anyway, and I had absolutely nothing to worry about.</p>
          <p><a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/5</link>
        <pubDate>Mon, 29 Jan 2024 23:37:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2135-5</guid>
        <source url="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135.rss">Repurposing THE-XXX! (@xxx) For Undecorated Values</source>
      </item>
      <item>
        <title>Repurposing THE-XXX! (@xxx) For Undecorated Values</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="bradrn" data-post="3" data-topic="2135">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>what does the above table look like if you <em>do</em> incorporate this change?</p>
<blockquote>
<p>Evaluates to bound self Words(???) Blocks(BLOCK! <small>(and THE-BLOCK!)</small>)</p>
</blockquote>
</blockquote>
</aside>
<p>THE-BLOCK! evaluates to BLOCK!, so it is not evaluating to a bound self... it is evaluating to a bound "other"...</p>
<aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2135">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>It would mean that a THE-BLOCK! evaluates to a bound GROUP!</p>
</blockquote>
</aside>
<p>...and THE-GROUP! evaluating to bound group makes more sense to me.  It looks pretty consistent, and it is useful in practice.</p>
<aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2135">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Under the prior behaviour, there was a nice symmetry between words and blocks:</p>
</blockquote>
</aside>
<p>My original intention for <code>@xxx</code> behavior was indeed the by-product of me thinking "what's missing", and there wasn't any word/path/group (it predated generic tuple) that evaluated to itself.  I thought @ forms might be useful for enumerations, so you didn't have to fret over quoting it everywhere.</p>
<pre><code>colors: [@red @blue @green]

obj: make object! compose [color: (colors.2)]  ; vs. [color: the (colors.2)]
</code></pre>
<p>But the ugliness made it unpopular for such purposes.  It also predated generic quoting in things like COMPOSE.  It's less an issue today, as you can <strong><code>compose [color: '(colors.2)]</code></strong>.</p>
<p>Attempts to leverage meaning from its unevaluatedness were made.  For a period of time, it was tried as an ill-fated solution to /ONLY, via a weird kind of parameter that could sense if the callsite was literally using an @, variations of:</p>
<pre><code>&gt;&gt; append [a b c] [d e]
== [a b c d e]

&gt;&gt; append [a b c] @[d e]
== [a b c [d e]]

&gt;&gt; var: @[d e]
&gt;&gt; append [a b c] var
== [a b c @[d e]]
</code></pre>
<p>Isotopes came and blew that nonsense out of the water...if you want to read a struggle in cognitive dissonance: <a href="https://forum.rebol.info/t/every-thought-on-array-splicing-has-been-had/1332">"Every Thought On Array Splicing Has Been Had  <img src="https://forum.rebol.info/images/emoji/twitter/exploding_head.png?v=12" title=":exploding_head:" class="emoji" alt=":exploding_head:" loading="lazy" width="20" height="20">"</a>.</p>
<p><em>(There was also a brief detour prior to the creation of <strong><code>^meta</code></strong> words when <strong><code>@word</code></strong> acted like meta, but was quickly deemed to warrant a new more semiotic type.)</em></p>
<p>What I can tell you is just that in practice, the need for bound plain words, tuples, and groups is now very pronounced... and the need for an inert form of word has barely ever registered.</p>
<p>Words don't exist in a vacuum, they are carried in containers.  And when you put a bunch of words and other values in a block, every value becomes inert.  Having an unevaluative decorated type that evaluates to itself wound up to be a mostly unused thing... and it just seems to mean you've created a case of not utilizing the evaluator when you had the chance.</p>
<p>So the justification for the "asymmetry" you may sense in the design can be understood as a product of this container vs. not-a-container asymmetry.</p>
<p>I have a large data set of code and tests to draw upon to say that the proposed behavior is very useful, so I'm pretty bullish on it at the moment.</p>
          <p><a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/4</link>
        <pubDate>Mon, 29 Jan 2024 16:00:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2135-4</guid>
        <source url="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135.rss">Repurposing THE-XXX! (@xxx) For Undecorated Values</source>
      </item>
      <item>
        <title>Repurposing THE-XXX! (@xxx) For Undecorated Values</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2135">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>We Could Say that @ Things Evaluate And Drop The @</p>
</blockquote>
</aside>
<p>I’m not sure I love this, as presented. Under the prior behaviour, there was a nice symmetry between words and blocks:</p>
<div class="md-table">
<table>
<thead>
<tr>
<th></th>
<th>Words</th>
<th>Blocks</th>
</tr>
</thead>
<tbody>
<tr>
<td>Evaluates to unbound self</td>
<td>quoted WORD!</td>
<td>quoted BLOCK!</td>
</tr>
<tr>
<td>Evaluates to bound self</td>
<td>THE-WORD!</td>
<td>BLOCK! <small>(and THE-BLOCK!)</small>
</td>
</tr>
<tr>
<td>Evaluates to result</td>
<td>WORD!</td>
<td>GROUP!</td>
</tr>
</tbody>
</table>
</div><p>This change disrupts the concept. Now, THE-WORD! transmutes to another data type under evaluation, while a BLOCK! stays the same type. Not that that’s <em>bad</em>, precisely… but in my experience, this kind of inelegance generally means that there’s a more powerful design waiting to be discovered.</p>
<p>This also reminds me of when I asked <a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092">why BLOCK!s aren’t quoted GROUP!s</a>. You responded that, given Rebol’s evaluation model, it’s helpful to have a data type which evaluates to itself, rather than transmuting into something else under evaluation. But now, THE-WORD!s get precisely that undesirable behaviour! So why does that reasoning apply to BLOCK!s rather than GROUP!s?  Again, it feels inconsistent.</p>
<p>But, regardless, let’s continue this train of thought… what does the above table look like if you <em>do</em> incorporate this change?</p>
<div class="md-table">
<table>
<thead>
<tr>
<th></th>
<th>Words</th>
<th>Blocks</th>
</tr>
</thead>
<tbody>
<tr>
<td>Evaluates to unbound self</td>
<td>quoted WORD!</td>
<td>quoted BLOCK!</td>
</tr>
<tr>
<td>Evaluates to bound self</td>
<td>???</td>
<td>BLOCK! <small>(and THE-BLOCK!)</small>
</td>
</tr>
<tr>
<td>Evaluates to bound other</td>
<td>THE-WORD!</td>
<td>???</td>
</tr>
<tr>
<td>Evaluates to result</td>
<td>WORD!</td>
<td>GROUP!</td>
</tr>
</tbody>
</table>
</div><p>So, it yields two unfilled cells. What could go in them?</p>
<p>To me, the form of the table suggests an intriguing possibility for the bottom-right unfilled cell: what if we moved THE-BLOCK! there? It would mean that a THE-BLOCK! evaluates to a bound GROUP! — filling the gap I noticed in the above thread. It’s not as obviously useful as THE-WORD!, but it might have some use somewhere. And at the very least, it would make THE-BLOCK! something more than a redundant duplicate of BLOCK!, which is nice.</p>
<p>And what of the top-left cell? That one stumps me a bit. It used to be THE-WORD!, but of course we’ve repurposed that now, largely due to uselessness. In any case, I think it can be simulated by a BLOCK! containing a single WORD!, so I’m not overly worried about it.</p>
          <p><a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/3</link>
        <pubDate>Mon, 29 Jan 2024 12:31:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2135-3</guid>
        <source url="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135.rss">Repurposing THE-XXX! (@xxx) For Undecorated Values</source>
      </item>
      <item>
        <title>Repurposing THE-XXX! (@xxx) For Undecorated Values</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historical Rebol used quoted words (LIT-WORD!) to pass variables to functions, with the idea the function could then later set or get those variables.  The quote level was removed under evaluation, meaning the function got a WORD!</p>
<pre><code>rebol2&gt;&gt; whatever: 10

rebol2&gt;&gt; foo: func [var [word!]] [print [var "is" get var]]

rebol2&gt;&gt; foo 'whatever
whatever is 10
</code></pre>
<p>But we now have a general rule that quoting insulates whatever you quote from binding.  So you have to add the binding, by saying something like <strong><code>foo in [] 'whatever</code></strong></p>
<p>This isn't the only option, if the callee was willing to receive something other than WORD!.  We also have THE-WORD!, which currently evaluates to the bound version of itself.</p>
<pre><code>&gt;&gt; @whatever
== @whatever

&gt;&gt; foo: func [var [the-word!]] [print [var "is" get var]]

&gt;&gt; foo @whatever
@whatever is 10
</code></pre>
<p>This gets you the binding you want, but now you have a decorated word, which would be annoying if FOO is trying to do something besides GET/SET the value.  Plain words are the norm.</p>
<p>If you wanted an undecorated word, you could use the standalone @ operator... which gives back its argument literally:</p>
<pre><code>&gt;&gt; @ a
== a
</code></pre>
<p><strong><code>@ a</code></strong> is a little bit uglier than <strong><code>'a</code></strong> but not as bad as <strong><code>in [] 'a</code></strong></p>
<pre><code>&gt;&gt; foo: func [var [word!]] [print [var "is" get var]]

&gt;&gt; foo @ whatever
whatever is 10
</code></pre>
<p>But the spacing just throws it off to where it no longer looks like a single argument.  And it doesn't look like one because it isn't (e.g. can't fill exactly one slot in the API or a COMPOSE).  @ is also a function under the current design (you can redefine it), so calling it incurs some overhead.</p>
<h2>
<a name="or-we-could-say-that-things-evaluate-and-drop-the-1" class="anchor" href="https://forum.rebol.info#or-we-could-say-that-things-evaluate-and-drop-the-1"></a>Or... We Could Say that @ Things Evaluate And Drop The @</h2>
<pre><code>&gt;&gt; @word
== word  ; bound

&gt;&gt; @(print "Hello")
== (print "Hello")  ; bound

&gt;&gt; @[print "Hello"]
== [print "Hello"]  ; bound, less useful as plain block would have done that
</code></pre>
<p>This would make <strong><code>@word</code></strong> and <strong><code>@ word</code></strong> symmetrical, which is appealing.</p>
<p>But it's at the cost of losing the idea of a category of ANY-WORD! that stays somewhat as-is.</p>
<h2>
<a name="how-big-a-loss-is-the-inert-wordgrouptuplepath-2" class="anchor" href="https://forum.rebol.info#how-big-a-loss-is-the-inert-wordgrouptuplepath-2"></a>How Big A Loss Is The "Inert" WORD!/GROUP!/TUPLE!/PATH!</h2>
<p>In practice, the idea of inert words hasn't lived up to my hopes for them.  I thought maybe since they would be shielded from multiple phases of reducing, they might become popular for some kind of enumerated types.  But being a bit ugly, that's not materialized.</p>
<p>If it gives you any idea of how not-popular the application has been, I changed the evaluator behavior and it <a href="https://github.com/metaeducation/ren-c/blob/0d2d7c39733f21e1088240ab2e5c7614072c8059/src/mezz/uparse.r#L151">only required <em>one</em> change in UPARSE to boot</a>:</p>
<pre><code>  (if spec.1 = '@pending [
        assert [spec.2 = [&lt;opt&gt; block!]]
        autopipe: false  ; they're asking to handle pending themselves
        spread reduce [@pending spec.2]  ; &lt;-- this has to be '@pending
        elide spec: my skip 2
    ] else [
        autopipe: true  ; they didn't mention pending, handle automatically
        spread [@pending [&lt;opt&gt; block!]]
    ])
</code></pre>
<p>They're still free to be used in dialects for whatever purpose (here we see them marking output parameters in the function spec dialect).  And they serve a good purpose in PARSE for "treat this value literally":</p>
<pre><code>&gt;&gt; block: [some "a"]

&gt;&gt; parse ["a" "a"] [block]
== "a"

&gt;&gt; parse [[some "a"] [some "a"]] [some @block]
== [some "a"]
</code></pre>
<p>But it seems that with the new binding model, they have a higher calling in the evaluator... for producing undecorated bound things!</p>
<p>If you want wordlike things that do not reduce, there's blank-headed paths like <strong><code>/FOO</code></strong> ("refinement").  They have a binding and can be looked up.  Today, blank-headed tuples like <strong><code>.FOO</code></strong> don't evaluate, but I'm aiming to say that they do--and that they do member lookup in methods.  Or... y'know... you could put the word in a block! <strong><code>[foo]</code></strong></p>
<h2>
<a name="note-that-decorated-types-have-to-use-3" class="anchor" href="https://forum.rebol.info#note-that-decorated-types-have-to-use-3"></a>Note That Decorated Types Have To Use @</h2>
<p>There's no such thing as a THE-SET-BLOCK! (and I don't imagine there ever will be).</p>
<pre><code> &gt;&gt; @[x y]:
 ** Error: That doesn't exist

 &gt;&gt; @ [x y]:
 == [x y]:
</code></pre>
<p>So it's only the plain WORD!, TUPLE!, PATH!, GROUP! and (redundantly) BLOCK! that you can do this without a space.</p>
<p>But it's likely much rarer to be generating such material bound in isolation.</p>
<p>In any case, preliminary looking at the results, I think this is a solid change and much needed in the new binding world.</p>
          <p><a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/1</link>
        <pubDate>Mon, 29 Jan 2024 06:12:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2135-1</guid>
        <source url="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135.rss">Repurposing THE-XXX! (@xxx) For Undecorated Values</source>
      </item>
  </channel>
</rss>
