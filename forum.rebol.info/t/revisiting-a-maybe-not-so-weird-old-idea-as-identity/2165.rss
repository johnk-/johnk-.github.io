<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Revisiting a Maybe-Not-So-Weird Old Idea: &lt;- as IDENTITY</title>
    <link>https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165</link>
    <description>So at one point I had a kind of strange idea for what to do with **`&lt;-`**.

It would just pass through what you gave on its right.  And the idea was that you could use this in various situations as a kind of visual signal that you intended to produce a value that would be used by... something.

You could use it to hint when a line is being continued:

    browse join
        &lt;- https://github.com/metaeducation/ren-c/blob/master/CHANGES.md#
        &lt;- unspaced [system.version.1 &quot;.&quot; system.version.2 &quot;.&quot; system.version.3]
       
That JOIN is arity 2.   The arrows do nothing, but quickly pass through what they were passed. 

The current alternative you might reach for are parentheses, but you can only put it around the outermost level, and it&#39;s noticeably inferior:

    browse (join
        https://github.com/metaeducation/ren-c/blob/master/CHANGES.md#
        unspaced [system.version.1 &quot;.&quot; system.version.2 &quot;.&quot; system.version.3]
    )

I had another idea that the arrow might be nice for signaling when you&#39;re at the end of a branch to help hint that the branch result is actually used.

     something: case [
         ... [...]
         ... [...]
         ; lots of code to where SOMETHING: has scrolled off the screen
         ... [
             your code here
             more code here
             &lt;- append data &quot;stuff&quot;
         ]
     ]

It gives you a nice hint that the result of the append (the head of the appended series) is actually used. 
 **But, these two uses are in contention.**  You can&#39;t use it to mean &quot;continue the line above&quot; and &quot;pipe result out to some higher level.  Perhaps this is better done with an impromptu CATCH/THROW?

     something: catch [case [
         ... [... throw ...]
         ... [... throw ...]
         ; lots of code to where SOMETHING: has scrolled off the screen
         ... [
             your code here
             more code here
             throw append data &quot;stuff&quot;
         ]
     ]]

(Note that CATCH/THROW have nothing to do with errors in Rebol, it&#39;s a lightweight construct for doing this kind of manipulation.)

## Why Did I Kill Off The &lt;- As Identity?

It was changed shortly after deciding to take **-&gt;** for an infix lambda operation.

     foo: x -&gt; [print [&quot;I&#39;m a lambda&quot; x]]

     &gt;&gt; foo 1020
     I&#39;m a lambda 1020

This is particularly nice-looking in branching when you want to pass the branch result.

    all [
        1 &lt; 2
        3 &lt; 4
        #something
    ] then x -&gt; [
       print [&quot;X is&quot; mold x]  ; X is #something
    ]

The first incarnation used **`=&gt;`** as JavaScript did.  But not only is the arrow lighter, it doesn&#39;t weigh on the question of whether **`=&gt;`** is an &quot;arrow&quot;, when **`&lt;=`** is not one.  (Debate has been had over whether =&gt; should be a synonym for &gt;=, and =&lt; a synonym for &lt;=, etc. but status quo has won out.)

So **`&lt;-`** was targeted as another function generator, namely for doing tacit programming as an alias for POINTFREE.

    foo: &lt;- [append [a b c]]

    &gt;&gt; foo &#39;d
    == [a b c d]

The attempt to write POINTFREE entirely in usermode stalled a bit in the face of other priorities, though it&#39;s still very much desired.  And it doesn&#39;t seem like a bad idea to have &lt;- and -&gt; both connected as fundamental convenient function generators.

I&#39;ve not really questioned the decision to strike &lt;- as identity until I realized looking at some old code that it really is nice to have some alias for identity, used for one of the annotation purposes I mention.

Backtick is available, though backticks are kind of a blight in general:

    browse join
      ` https://github.com/metaeducation/ren-c/blob/master/CHANGES.md#
      ` unspaced [system.version.1 &quot;.&quot; system.version.2 &quot;.&quot; system.version.3]

There&#39;s a few other ugly options, e.g. backslash which we still haven&#39;t given meaning to either.

    browse join
      \ https://github.com/metaeducation/ren-c/blob/master/CHANGES.md#
      \ unspaced [system.version.1 &quot;.&quot; system.version.2 &quot;.&quot; system.version.3]

**Anyway, the cool idea here was just that line continuation not be a scanner feature, but be signaled by means of a normal token that ran the identity function... and you&#39;d be cued into realizing that it was a continuation just because there&#39;s no point in calling the identity function in source unless you were applying it like this.**

We could throw in a little help by having the evaluator only allow this if it was--actually--an argument to a function.

Based on the above, I&#39;m liking the backtick, and am not sure I&#39;d want heavier for line continuation.

The idea of &lt;- being an alternate way of saying identity that is used for the other annotation purpose (this result is used by the higher up stack level) would then be a possibility.  The system could maybe help a little bit here too, by making sure the **&lt;-** *isn&#39;t* an argument to a function...

POINTFREE would need some other shorthand.  But maybe it&#39;s just an alternate mode of LAMBDA.  Or maybe it doesn&#39;t really need a shorthand.

    foo: ... -&gt; [append [a b c]]

    foo: &lt;*&gt; -&gt; [append [a b c]]

    foo: |-&gt; [append [a b c]]

    foo: -|&gt; [append [a b c]]

    foo: pointfree [append [a b c]]

    &gt;&gt; foo &#39;d
    == [a b c d]</description>
    
    <lastBuildDate>Mon, 30 Sep 2024 03:39:07 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Revisiting a Maybe-Not-So-Weird Old Idea: &lt;- as IDENTITY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2165">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>re-indented to make the structure clearer:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">tests:
    if try first system.options.args [
        local-to-file first system.options.args
    ] else [
        %core-tests.r
    ]
</code></pre>
</blockquote>
</aside>
<p>Using indentation is interesting, but I do prefer:</p>
<pre><code>tests: if try first system.options.args [
    &lt;- local-to-file first system.options.args
] else [
    %core-tests.r
]
</code></pre>
<p>The nice thing is, you choose.  Maybe from things you have gathered you might have your own insights to add to <a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136">Fundamental Distinguishing Features of Rebol</a>, if any have stood out.</p>
<p>But crucially, little is fixed.  <code>&lt;-</code> isn't...<code>IF</code> isn't.  You can define IF as something totally different in the scope of a function, and that's fine if you have a good reason to do it...!</p>
          <p><a href="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/4</link>
        <pubDate>Mon, 30 Sep 2024 03:01:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2165-4</guid>
        <source url="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165.rss">Revisiting a Maybe-Not-So-Weird Old Idea: &lt;- as IDENTITY</source>
      </item>
      <item>
        <title>Revisiting a Maybe-Not-So-Weird Old Idea: &lt;- as IDENTITY</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2165">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But that's a bit lame considering you could say:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">tests: if try first system.options.args [
    local-to-file first system.options.args
] else [
    %core-tests.r
]
</code></pre>
</blockquote>
</aside>
<p>I strongly prefer this style. Or rather, this style but re-indented to make the structure clearer:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">tests:
    if try first system.options.args [
        local-to-file first system.options.args
    ] else [
        %core-tests.r
    ]
</code></pre>
          <p><a href="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/3</link>
        <pubDate>Mon, 30 Sep 2024 02:38:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2165-3</guid>
        <source url="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165.rss">Revisiting a Maybe-Not-So-Weird Old Idea: &lt;- as IDENTITY</source>
      </item>
      <item>
        <title>Revisiting a Maybe-Not-So-Weird Old Idea: &lt;- as IDENTITY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Due to the change that <a href="https://forum.rebol.info/t/caching-binding-lookup-and-attachment-binding/2128/6">enforces "strict mode" everywhere</a>, you can't just write randomly into your module's global space (or script's global space, at this time scripts are isolated in the same way as modules but do new executions each time you run them and return a result that's not the module they are contained in)... you have to pre-declare things.</p>
<p>So this code broke:</p>
<pre><code>if try first system.options.args [
    tests: local-to-file first system.options.args
] else [
    tests: %core-tests.r
]
</code></pre>
<p>One way to go about it would be to have a top-level declaration that you predeclare and write to it:</p>
<pre><code>tests: ~
if try first system.options.args [
    tests: local-to-file first system.options.args
] else [
    tests: %core-tests.r
]
</code></pre>
<p>But that's a bit lame considering you could say:</p>
<pre><code>tests: if try first system.options.args [
    local-to-file first system.options.args
] else [
    %core-tests.r
]
</code></pre>
<p><em><strong>But here's where I think readability suffers a bit.</strong></em>  Even in this short example, I feel that the fact that the result from LOCAL-TO-FILE is used isn't as <em>obvious</em> as it was.  The longer the distance from that SET-WORD! to the expression the worse that disconnect gets.</p>
<p>This is why I advocated for:</p>
<pre><code>tests: if try first system.options.args [
    &lt;- local-to-file first system.options.args
] else [
    &lt;- %core-tests.r
]
</code></pre>
<p>It would be completely optional.  And in fact, you could make a good argument that it's not necessary on the second branch since you "know" it will be used, as it's not a function call with side-effects:</p>
<pre><code>tests: if try first system.options.args [
    &lt;- local-to-file first system.options.args
] else [
    %core-tests.r
]
</code></pre>
<p>Like other decisions in this medium, it's an aesthetic call, and you make the call you want.</p>
<p>The operator could do something I've talked about, which is <a href="https://forum.rebol.info/t/operator-meaning-complete-fully-what-is-that/792">be an operator that means complete fully</a>.  e.g. this could error:</p>
<pre><code>tests: if try first system.options.args [
    &lt;- local-to-file first system.options.args 10  ; FAIL: "extra stuff"
] else [
    %core-tests.r
]
</code></pre>
<p>So you could pick between:</p>
<pre><code>foo // [arg1 arg2]
(&lt;- foo arg1 arg2)
</code></pre>
<p>Eerily the same length.  But, anyway, you get the idea.</p>
<p>It would be a little weird that <strong><code>-&gt;</code></strong> is a function generator and <strong><code>&lt;-</code></strong> would be the identity operator, but there is a sort of logic in terms of the direction of information flow.</p>
<p>I definitely consider this to be back on the table.</p>
<hr>
<h2>
<a name="in-the-damn-tripwires-are-cool-category-1" class="anchor" href="https://forum.rebol.info#in-the-damn-tripwires-are-cool-category-1"></a>In the "Damn, Tripwires are Cool" Category</h2>
<p>Here is what I did for now.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<pre><code>tests: ~&lt;https://forum.rebol.info/t/2165/2&gt;~

if try first system.options.args [
    tests: local-to-file first system.options.args
] else [
    tests: %core-tests.r
]
</code></pre>
          <p><a href="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/2</link>
        <pubDate>Mon, 30 Sep 2024 01:26:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2165-2</guid>
        <source url="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165.rss">Revisiting a Maybe-Not-So-Weird Old Idea: &lt;- as IDENTITY</source>
      </item>
      <item>
        <title>Revisiting a Maybe-Not-So-Weird Old Idea: &lt;- as IDENTITY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So at one point I had a kind of strange idea for what to do with <strong><code>&lt;-</code></strong>.</p>
<p>It would just pass through what you gave on its right.  And the idea was that you could use this in various situations as a kind of visual signal that you intended to produce a value that would be used by... something.</p>
<p>You could use it to hint when a line is being continued:</p>
<pre><code>browse join
    &lt;- https://github.com/metaeducation/ren-c/blob/master/CHANGES.md#
    &lt;- unspaced [system.version.1 "." system.version.2 "." system.version.3]
</code></pre>
<p>That JOIN is arity 2.   The arrows do nothing, but quickly pass through what they were passed.</p>
<p>The current alternative you might reach for are parentheses, but you can only put it around the outermost level, and it's noticeably inferior:</p>
<pre><code>browse (join
    https://github.com/metaeducation/ren-c/blob/master/CHANGES.md#
    unspaced [system.version.1 "." system.version.2 "." system.version.3]
)
</code></pre>
<p>I had another idea that the arrow might be nice for signaling when you're at the end of a branch to help hint that the branch result is actually used.</p>
<pre><code> something: case [
     ... [...]
     ... [...]
     ; lots of code to where SOMETHING: has scrolled off the screen
     ... [
         your code here
         more code here
         &lt;- append data "stuff"
     ]
 ]
</code></pre>
<p>It gives you a nice hint that the result of the append (the head of the appended series) is actually used.<br>
<strong>But, these two uses are in contention.</strong>  You can't use it to mean "continue the line above" and "pipe result out to some higher level.  Perhaps this is better done with an impromptu CATCH/THROW?</p>
<pre><code> something: catch [case [
     ... [... throw ...]
     ... [... throw ...]
     ; lots of code to where SOMETHING: has scrolled off the screen
     ... [
         your code here
         more code here
         throw append data "stuff"
     ]
 ]]
</code></pre>
<p>(Note that CATCH/THROW have nothing to do with errors in Rebol, it's a lightweight construct for doing this kind of manipulation.)</p>
<h2>
<a name="why-did-i-kill-off-the-as-identity-1" class="anchor" href="https://forum.rebol.info#why-did-i-kill-off-the-as-identity-1"></a>Why Did I Kill Off The &lt;- As Identity?</h2>
<p>It was changed shortly after deciding to take <strong>-&gt;</strong> for an infix lambda operation.</p>
<pre><code> foo: x -&gt; [print ["I'm a lambda" x]]

 &gt;&gt; foo 1020
 I'm a lambda 1020
</code></pre>
<p>This is particularly nice-looking in branching when you want to pass the branch result.</p>
<pre><code>all [
    1 &lt; 2
    3 &lt; 4
    #something
] then x -&gt; [
   print ["X is" mold x]  ; X is #something
]
</code></pre>
<p>The first incarnation used <strong><code>=&gt;</code></strong> as JavaScript did.  But not only is the arrow lighter, it doesn't weigh on the question of whether <strong><code>=&gt;</code></strong> is an "arrow", when <strong><code>&lt;=</code></strong> is not one.  (Debate has been had over whether =&gt; should be a synonym for &gt;=, and =&lt; a synonym for &lt;=, etc. but status quo has won out.)</p>
<p>So <strong><code>&lt;-</code></strong> was targeted as another function generator, namely for doing tacit programming as an alias for POINTFREE.</p>
<pre><code>foo: &lt;- [append [a b c]]

&gt;&gt; foo 'd
== [a b c d]
</code></pre>
<p>The attempt to write POINTFREE entirely in usermode stalled a bit in the face of other priorities, though it's still very much desired.  And it doesn't seem like a bad idea to have &lt;- and -&gt; both connected as fundamental convenient function generators.</p>
<p>I've not really questioned the decision to strike &lt;- as identity until I realized looking at some old code that it really is nice to have some alias for identity, used for one of the annotation purposes I mention.</p>
<p>Backtick is available, though backticks are kind of a blight in general:</p>
<pre><code>browse join
  ` https://github.com/metaeducation/ren-c/blob/master/CHANGES.md#
  ` unspaced [system.version.1 "." system.version.2 "." system.version.3]
</code></pre>
<p>There's a few other ugly options, e.g. backslash which we still haven't given meaning to either.</p>
<pre><code>browse join
  \ https://github.com/metaeducation/ren-c/blob/master/CHANGES.md#
  \ unspaced [system.version.1 "." system.version.2 "." system.version.3]
</code></pre>
<p><strong>Anyway, the cool idea here was just that line continuation not be a scanner feature, but be signaled by means of a normal token that ran the identity function... and you'd be cued into realizing that it was a continuation just because there's no point in calling the identity function in source unless you were applying it like this.</strong></p>
<p>We could throw in a little help by having the evaluator only allow this if it was--actually--an argument to a function.</p>
<p>Based on the above, I'm liking the backtick, and am not sure I'd want heavier for line continuation.</p>
<p>The idea of &lt;- being an alternate way of saying identity that is used for the other annotation purpose (this result is used by the higher up stack level) would then be a possibility.  The system could maybe help a little bit here too, by making sure the <strong>&lt;-</strong> <em>isn't</em> an argument to a function...</p>
<p>POINTFREE would need some other shorthand.  But maybe it's just an alternate mode of LAMBDA.  Or maybe it doesn't really need a shorthand.</p>
<pre><code>foo: ... -&gt; [append [a b c]]

foo: &lt;*&gt; -&gt; [append [a b c]]

foo: |-&gt; [append [a b c]]

foo: -|&gt; [append [a b c]]

foo: pointfree [append [a b c]]

&gt;&gt; foo 'd
== [a b c d]
</code></pre>
          <p><a href="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/1</link>
        <pubDate>Wed, 06 Mar 2024 14:20:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2165-1</guid>
        <source url="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165.rss">Revisiting a Maybe-Not-So-Weird Old Idea: &lt;- as IDENTITY</source>
      </item>
  </channel>
</rss>
