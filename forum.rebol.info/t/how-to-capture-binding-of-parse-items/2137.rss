<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to Capture Binding Of PARSE Items</title>
    <link>https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137</link>
    <description>Consider some simple code that used to &quot;work&quot; (in of course only the simplest of cases)

    &gt;&gt; parse [word: 10] [
           let word: set-word! let val: integer! (
               set word val
           )
       ]

We&#39;re getting some unbound values by structural extraction.  But now that structural extraction doesn&#39;t propagate bindings... how do we look those values up in an environment?

We&#39;d get the wrong answer if we said **set (inside [] word) val**... that would try to bind the &quot;word&quot; word to the LET variable from the rule.  I made it conflict just to stress the point that the processing code is not the right environment to be looking up values in the data most of the time.

When PARSE is doing the processing (and recursions in our data for us), we&#39;re cut out of the loop on binding.

## Solution Tactics

You can use the `&lt;input&gt;` TAG! combinator to get the input, and if there were an IN combinator you could do this yourself... handling recursions

    &gt;&gt; parse [[word: 10]] [
           let i: &lt;input&gt;
           subparse in (i) block! [  ; make subparse input propagate specifier
               let sub: &lt;input&gt;
               let word: set-word! let val: integer! (
                   set (in sub word) val 
               )
           ]
       ]

Making this a little easier might be a combinator for capturing the parse state object, for getting the input more easily at any time.

    &gt;&gt; parse [[word: 10]] [
           let s: &lt;state&gt;
           subparse in (s.input) block! [  ; subparse changes s.input
               let word: set-word! let val: integer! (
                   set (in s.input word) val
               )
           ]
       ]

Certainly some pain involved here.  Perhaps @bradrn can appreciate the reason why propagating binding through structure automatically seemed necessary so things like this worked &quot;like magic&quot;.

*But it was bad magic.*  If the structural operations presume ideas about binding, that ties our hands in the interpretation of binding for the input block.  We have **[[word: 10]]** now, but what if we wanted something like **[let word [word: 10]]**?  It&#39;s up to the parse of this &quot;dialect&quot; to decide the bindings, not have it automatic.  It&#39;s only the refusal of the automaticness allowing the LET in PARSE above to be implemented!

Though actually in this simple case, you could just say:

    &gt;&gt; parse [[word: 10]] [
           subparse in &lt;input&gt; block! [  ; make subparse input propagate specifier
               let word: in &lt;input&gt; set-word! let val: integer! (
                   set (in sub word) val 
               )
           ]
       ]

Even briefer, a TAG! combinator `&lt;in&gt;` that means **`in &lt;input&gt;`**:

    parse [[word: 10]] [
       subparse &lt;in&gt; block! [
           let word: &lt;in&gt; set-word! let val: integer! (
               set word val
           )
       ]
    ]

Not too arduous, and you have the necessary hook points for alternative binding interpretation when you need it.  And if you&#39;re just processing code structurally, you don&#39;t have to worry about it.

*(Note: Trying this I remembered that TAG! combinators haven&#39;t been set up to take arguments.  Should they be able to?  Maybe not... none do at the moment, and it seems a reasonable policy to say they don&#39;t.  If not a TAG! then what should this be?  It could be the behavior of the `@` operator... which is a bit incongruous with how `@word` etc. are handled in PARSE, but lines up sort of with wanting to capture the current sense of binding on the next argument.  Something to think about, I&#39;m calling it **`*in*`** as a placeholder just to move along)*

## Other Places This Pops Up

If you&#39;re writing something like a FOR-EACH loop, and you want to get the bindings of things, you can look the thing up in an environment that you have on hand:

    &gt;&gt; block: [word: 10]
    &gt;&gt; for-each [word val] block [
          set (in block word) val
       ]

    &gt;&gt; word
    == 10

It&#39;s manual, but it works.  But what if the block were literal, and you didn&#39;t have access to it?

    &gt;&gt; for-each [word val] [word: 10] [
          set (??? word) val
       ]

Where this may be pointing is that instead of trying to imagine weirdly designed FOR-EACH variants that incorporate binding, it may be that you should think in terms of PARSE as the tool for when you want to enumerate with binding...</description>
    
    <lastBuildDate>Wed, 02 Oct 2024 23:58:49 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to Capture Binding Of PARSE Items</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">parse [[word: 10]] [
   subparse *in* block! [
       let word: *in* set-word! let val: integer! (
           set word val
       )
   ]
]
</code></pre>
</blockquote>
</aside>
<p>So we're now in a situation where the <strong><code>$</code></strong> operator in plain code will bind what it gets in the "current environment".</p>
<p>This makes <strong><code>$ foo</code></strong> a synonym for <strong><code>inside [] foo</code></strong></p>
<p>It is very tempting to call this arity-1 <strong><code>$</code></strong> operator "BIND", and to say that <strong><code>$foo</code></strong> is a BIND-WORD!, and <strong><code>$(a b c)</code></strong> is a BIND-GROUP!... etc.</p>
<p>That would require some pushing around of terms to get an arity-2 form, e.g.</p>
<pre><code>bind element  ; use "curent context" of callsite

bind:in element context  ; use passed-in context
</code></pre>
<p>(I know I've insisted that there not be a lot of these functions that sense the callsite's context. Yes they are dicey, there should not be many of them.  But $ / BIND is an exception.)</p>
<p>So if we were willing to say that arity-1 BIND is "bind by default, where it makes sense" we could have:</p>
<pre><code>parse [[word: 10]] [
   subparse bind block! [
       let word: bind set-word! let val: integer! (
           set word val
       )
   ]
]
</code></pre>
<p>Or:</p>
<pre><code>parse [[word: 10]] [
   subparse $ block! [
       let word: $ set-word! let val: integer! (
           set word val
       )
   ]
]
</code></pre>
<p>Or even:</p>
<pre><code>parse [[word: 10]] [
   subparse $block! [
       let word: $set-word! let val: integer! (
           set word val
       )
   ]
]
</code></pre>
<p>Though as WRAP is showing, binding environments are going to be pretty dynamic. UPARSE's slightly-informed-guesswork may not cover your case.</p>
<p>So there will presumably need to be some programmatic manipulation of the "current" environment to account for whatever the dialect you are parsing is doing.</p>
<p><strong>I'm not 100% sure about the arity-1 BIND idea, but it's starting to seem sensible.</strong></p>
          <p><a href="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/7</link>
        <pubDate>Wed, 02 Oct 2024 23:58:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2137-7</guid>
        <source url="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137.rss">How to Capture Binding Of PARSE Items</source>
      </item>
      <item>
        <title>How to Capture Binding Of PARSE Items</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's hard to say how "natural" this will feel.</p>
</blockquote>
</aside>
<p>It feels pretty natural to me: conceptually, <code>foobar</code> is now a simple name, while <code>@foobar</code> is the variable that name refers to. On the other hand, Iâ€™m not sure I would have noticed it on simply perusing this code.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm trying to avoid a generalized <strong><code>harden-bindings [tabbed whitespace-at-eol]</code></strong> as long as I can, because I don't really like the idea of that being a common way to solve problems.</p>
</blockquote>
</aside>
<p>Agreed on that point.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>should all things be hardened, or just things the evaluator would... so quoted values remain unaffected?</p>
</blockquote>
</aside>
<p>I think it should work like this:</p>
<pre><code class="lang-plaintext">harden-bindings: func [block] [
    return collect [for-each value block [
        keep in block value
    ]]
]
</code></pre>
<p>(Apologies if I made any mistakes there, Iâ€™m still not great with actually programming in Rebol, but hopefully it should be clear enough.)</p>
<p>But I guess this just pushes back the problem to the behaviour of IN: what happens if you do <code>in block ''word</code>? (Or, if you prefer, <code>in block first ['word]</code>.) Personally, I think it should make a bound, quoted word. Perhaps one could defend a situation where quoted words can never be bound, but I donâ€™t love that.</p>
          <p><a href="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/6</link>
        <pubDate>Wed, 31 Jan 2024 04:45:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2137-6</guid>
        <source url="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137.rss">How to Capture Binding Of PARSE Items</source>
      </item>
      <item>
        <title>How to Capture Binding Of PARSE Items</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's manual, but it works. But what if the block were literal, and you didn't have access to it?</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; for-each [word val] [word: 10] [
      set (??? word) val
   ]
</code></pre>
</blockquote>
</aside>
<p>There was an instance of this in <a class="mention" href="https://forum.rebol.info/u/brett">@Brett</a>'s <code>%source-analysis.r</code> (yes, it's still running...and presenting ponderable situations).</p>
<pre><code>    for-each list [tabbed whitespace-at-eol] [
        if not empty? get list [
            emit as tag! list [(file) (get list)]
        ]
    ]
</code></pre>
<p>Here you can say "well, those variables are in the current context anyway" and write:</p>
<pre><code>    for-each list [tabbed whitespace-at-eol] [
        if not empty? get inside [] list [
            emit as tag! list [(file) (get inside [] list)]
        ]
    ]
</code></pre>
<p>Not a great answer.  But it's there.</p>
<p>However, another idea is to use <code>@word</code> under reduction, picking up the binding:</p>
<pre><code>    for-each list reduce [@tabbed @whitespace-at-eol] [
        if not empty? get list [
            emit as tag! list [(file) (get list)]
        ]
    ]
</code></pre>
<p>And if you are a fan of GET-BLOCK! for REDUCE this becomes:</p>
<pre><code>    for-each list :[@tabbed @whitespace-at-eol] [
        if not empty? get list [
            emit as tag! list [(file) (get list)]
        ]
    ]
</code></pre>
<p>It's hard to say how "natural" this will feel.  Maybe someone who has always experienced that <strong><code>get 'tabbed</code></strong> is the same as <strong><code>get first [tabbed whitespace-at-eol]</code></strong> and won't work... but <strong><code>get @tabbed</code></strong> will work and requires evaluation... this might be a perfectly obvious thing to reach for.</p>
<p>I'm trying to avoid a generalized <strong><code>harden-bindings [tabbed whitespace-at-eol]</code></strong> as long as I can, because I don't really like the idea of that being a common way to solve problems.  At some point, something like that will have to be made, but it's going to raise a lot of questions (should all things be hardened, or just things the evaluator would... so quoted values remain unaffected?)</p>
          <p><a href="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/5</link>
        <pubDate>Wed, 31 Jan 2024 02:35:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2137-5</guid>
        <source url="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137.rss">How to Capture Binding Of PARSE Items</source>
      </item>
      <item>
        <title>How to Capture Binding Of PARSE Items</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Not sure what you're referring to being similar?</p>
</blockquote>
</aside>
<p>What I quoted:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>a combinator for capturing the parse state object</p>
</blockquote>
</aside>
<p>Iâ€™m saying that such combinators, which capture the parse state, are standard in parser combinator libraries.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>SUBPARSE in Ren-C (traditionally INTO) spans only one element</p>
</blockquote>
</aside>
<p>Ah, in that case I didnâ€™t mean â€˜subparseâ€™ in the same way. The <code>match</code> combinator I mentioned in <code>megaparsec</code> sounds like ACROSS here.</p>
          <p><a href="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/4</link>
        <pubDate>Tue, 30 Jan 2024 00:30:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2137-4</guid>
        <source url="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137.rss">How to Capture Binding Of PARSE Items</source>
      </item>
      <item>
        <title>How to Capture Binding Of PARSE Items</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>itâ€™s worth noting that these kinds of combinators are quite standard in parser combinator libraries,</p>
</blockquote>
</aside>
<p>Not sure what you're referring to being similar?  The binding is a very distinct issue.</p>
<p>Just to get on the same page for terminology...</p>
<p>SUBPARSE in Ren-C (traditionally INTO) spans only one element...the sub-series you are parsing.</p>
<pre><code> &gt;&gt; parse [1 "aabb"] [integer! subparse text! [some "a" some "b"]]
 == "b"

 &gt;&gt; parse [1 [a a b b]] [integer! subparse block! [some 'a some 'b]]
 == b
</code></pre>
<p>If you want to get a span of data out of a rule's match, there is ACROSS in Ren-C (traditionally COPY):</p>
<pre><code>&gt;&gt; parse "aaabcbcaabc" [collect some [some "a" | keep across some ["b" | "c"]]]
== ["bcbc" "bc"]
</code></pre>
<p><em>(It doesn't have a secondary multi-return of the original synthesized product of the rule you copied across, but it could.)</em></p>
<p>But this doesn't help with the binding issue at hand, because when you copy data out of input arrays that is what I'm calling "structural".  So it doesn't take the specifier into account.</p>
          <p><a href="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/3</link>
        <pubDate>Tue, 30 Jan 2024 00:11:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2137-3</guid>
        <source url="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137.rss">How to Capture Binding Of PARSE Items</source>
      </item>
      <item>
        <title>How to Capture Binding Of PARSE Items</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2137">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Making this a little easier might be a combinator for capturing the parse state object, for getting the input more easily at any time.</p>
</blockquote>
</aside>
<p>Although a combinator <code>&lt;in&gt;</code> (or, from the other thread, <code>*in*</code>) seems like the best option here, itâ€™s worth noting that these kinds of combinators are quite standard in parser combinator libraries, e.g. <a href="https://hackage.haskell.org/package/megaparsec-9.6.1/docs/Text-Megaparsec.html#g:7"><code>megaparsec</code></a>. It lets you write a bunch of really useful things: for instance <a href="https://hackage.haskell.org/package/megaparsec-9.6.1/docs/Text-Megaparsec.html#v:match"><code>match</code></a>, which yields the portion of the input which was consumed during a subparse.</p>
          <p><a href="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/2</link>
        <pubDate>Mon, 29 Jan 2024 23:59:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2137-2</guid>
        <source url="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137.rss">How to Capture Binding Of PARSE Items</source>
      </item>
      <item>
        <title>How to Capture Binding Of PARSE Items</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Consider some simple code that used to "work" (in of course only the simplest of cases)</p>
<pre><code>&gt;&gt; parse [word: 10] [
       let word: set-word! let val: integer! (
           set word val
       )
   ]
</code></pre>
<p>We're getting some unbound values by structural extraction.  But now that structural extraction doesn't propagate bindings... how do we look those values up in an environment?</p>
<p>We'd get the wrong answer if we said <strong>set (inside [] word) val</strong>... that would try to bind the "word" word to the LET variable from the rule.  I made it conflict just to stress the point that the processing code is not the right environment to be looking up values in the data most of the time.</p>
<p>When PARSE is doing the processing (and recursions in our data for us), we're cut out of the loop on binding.</p>
<h2>
<a name="solution-tactics-1" class="anchor" href="https://forum.rebol.info#solution-tactics-1"></a>Solution Tactics</h2>
<p>You can use the <code>&lt;input&gt;</code> TAG! combinator to get the input, and if there were an IN combinator you could do this yourself... handling recursions</p>
<pre><code>&gt;&gt; parse [[word: 10]] [
       let i: &lt;input&gt;
       subparse in (i) block! [  ; make subparse input propagate specifier
           let sub: &lt;input&gt;
           let word: set-word! let val: integer! (
               set (in sub word) val 
           )
       ]
   ]
</code></pre>
<p>Making this a little easier might be a combinator for capturing the parse state object, for getting the input more easily at any time.</p>
<pre><code>&gt;&gt; parse [[word: 10]] [
       let s: &lt;state&gt;
       subparse in (s.input) block! [  ; subparse changes s.input
           let word: set-word! let val: integer! (
               set (in s.input word) val
           )
       ]
   ]
</code></pre>
<p>Certainly some pain involved here.  Perhaps <a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a> can appreciate the reason why propagating binding through structure automatically seemed necessary so things like this worked "like magic".</p>
<p><em>But it was bad magic.</em>  If the structural operations presume ideas about binding, that ties our hands in the interpretation of binding for the input block.  We have <strong>[[word: 10]]</strong> now, but what if we wanted something like <strong>[let word [word: 10]]</strong>?  It's up to the parse of this "dialect" to decide the bindings, not have it automatic.  It's only the refusal of the automaticness allowing the LET in PARSE above to be implemented!</p>
<p>Though actually in this simple case, you could just say:</p>
<pre><code>&gt;&gt; parse [[word: 10]] [
       subparse in &lt;input&gt; block! [  ; make subparse input propagate specifier
           let word: in &lt;input&gt; set-word! let val: integer! (
               set (in sub word) val 
           )
       ]
   ]
</code></pre>
<p>Even briefer, a TAG! combinator <code>&lt;in&gt;</code> that means <strong><code>in &lt;input&gt;</code></strong>:</p>
<pre><code>parse [[word: 10]] [
   subparse &lt;in&gt; block! [
       let word: &lt;in&gt; set-word! let val: integer! (
           set word val
       )
   ]
]
</code></pre>
<p>Not too arduous, and you have the necessary hook points for alternative binding interpretation when you need it.  And if you're just processing code structurally, you don't have to worry about it.</p>
<p><em>(Note: Trying this I remembered that TAG! combinators haven't been set up to take arguments.  Should they be able to?  Maybe not... none do at the moment, and it seems a reasonable policy to say they don't.  If not a TAG! then what should this be?  It could be the behavior of the <code>@</code> operator... which is a bit incongruous with how <code>@word</code> etc. are handled in PARSE, but lines up sort of with wanting to capture the current sense of binding on the next argument.  Something to think about, I'm calling it <strong><code>*in*</code></strong> as a placeholder just to move along)</em></p>
<h2>
<a name="other-places-this-pops-up-2" class="anchor" href="https://forum.rebol.info#other-places-this-pops-up-2"></a>Other Places This Pops Up</h2>
<p>If you're writing something like a FOR-EACH loop, and you want to get the bindings of things, you can look the thing up in an environment that you have on hand:</p>
<pre><code>&gt;&gt; block: [word: 10]
&gt;&gt; for-each [word val] block [
      set (in block word) val
   ]

&gt;&gt; word
== 10
</code></pre>
<p>It's manual, but it works.  But what if the block were literal, and you didn't have access to it?</p>
<pre><code>&gt;&gt; for-each [word val] [word: 10] [
      set (??? word) val
   ]
</code></pre>
<p>Where this may be pointing is that instead of trying to imagine weirdly designed FOR-EACH variants that incorporate binding, it may be that you should think in terms of PARSE as the tool for when you want to enumerate with binding...</p>
          <p><a href="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137/1</link>
        <pubDate>Mon, 29 Jan 2024 19:44:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2137-1</guid>
        <source url="https://forum.rebol.info/t/how-to-capture-binding-of-parse-items/2137.rss">How to Capture Binding Of PARSE Items</source>
      </item>
  </channel>
</rss>
