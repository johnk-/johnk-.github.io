<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;Binding Indirection&quot;</title>
    <link>https://forum.rebol.info/t/binding-indirection/2112</link>
    <description>[quote=&quot;bradrn, post:17, topic:2098&quot;]
[quote=&quot;Brett, post:16, topic:2098&quot;]
I think rebol needs some more sophisticated binding operations.  I think @hostilefork noted something similar recently too.  I wonder if there could be binding operations that allow a bit of indirection. Intuitively I feel that one should be able to define a binding scheme which can become an operator in your code.  For example, with **ctx.prop**, CTX is a specific object. I might be delusional, but maybe CTX could be a binding scheme/function one can define which has access to a set of environments already encountered, that one may want to bind to?
[/quote]

Since I’m not familiar with Rebol 2, I don’t really understand this paragraph. Could you give an example of what you might consider a binding operation with indirection?
[/quote]

My hand wavy intuition is that that it could be useful if CTX we could define to be some binding function that can return the appropriate context/environment that &quot;should&quot; be bound to, given PROP.  Where &quot;should&quot; is determined by some user defined scheme or policy.  This function would have access to environments the interpreter knows about like the enclosing function or loop or something else interesting.

For example, this might allow one to simulate how scopes work in a language other than rebol, allowing the CTX.PROP notation to be used in that way, instead of Rebol&#39;s default method of words carrying their binding. Or maybe the policy would allow a novel module search for CTX.

I admit this intuitive idea is certainly not fully formed and is full of gaps, but might be interesting. Apologies :slight_smile:</description>
    
    <lastBuildDate>Sat, 13 Jan 2024 00:34:51 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/binding-indirection/2112.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;Binding Indirection&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'll mention my little pet idea, which is that I've wanted method members to be accessed via BLANK!-headed TUPLE!s.</p>
<p>Anywhere blanks occur in tuples and paths, they're just an invisible slot in the render:</p>
<pre><code>&gt;&gt; for-each item '//a// [probe item]
_
_
a
_
_
== _
</code></pre>
<p>A blank headed tuple is, e.g.:</p>
<pre><code>&gt;&gt; to tuple! [_ something]
== .something
</code></pre>
<p>There's also SET-TUPLE! and GET-TUPLE! variants and all of that.</p>
<pre><code>&gt;&gt; to set-tuple! [_ something]
== .something:
</code></pre>
<p>So anyway, I've wondered what the evaluator behavior should be for these.  And I've thought it would be nice if they would give you the kind of comprehensibility benefit that <strong><code>this-&gt;member</code></strong> or <strong><code>self.member</code></strong> offers.  So when METHOD invocation patched the environment to the body invocation, it would somehow affect the environment in a way that said <em>"don't put the instance in the main WORD!=&gt;VALUE! mapping, put it in a secondary mapping you get to via <strong>.xxx</strong> access"</em>:</p>
<p><a href="https://forum.rebol.info/t/word-as-member-selection/1843" class="inline-onebox">.WORD as Member Selection</a></p>
<p>It seems like it's becoming more feasible with this idea that the binding gets sticky and isn't removed after that.  Because you could wind up carrying the <strong>.xxx</strong> over somewhere else where it wouldn't have that secondary mapping available but it didn't matter...because it would still look up so long as it got bound by evaluation in its original location.</p>
<p>It's a feature I'd like, because it can be near-incomprehensible trying to read code and not knowing whether something is an object member.  Maintaining <a href="https://forum.rebol.info/t/new-build-executables-new-build-strategy/1432">Rebmake</a> is particularly miserable due to this.</p>
          <p><a href="https://forum.rebol.info/t/binding-indirection/2112/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-indirection/2112/7</link>
        <pubDate>Sat, 13 Jan 2024 00:34:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2112-7</guid>
        <source url="https://forum.rebol.info/t/binding-indirection/2112.rss">&quot;Binding Indirection&quot;</source>
      </item>
      <item>
        <title>&quot;Binding Indirection&quot;</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="2112">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Perhaps what you are suggesting is being able to do things like:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; x: 10

&gt;&gt; foo: func [x] [print ["local" x "super" super.x]]

&gt;&gt; foo 20
local 20 super 10
</code></pre>
</blockquote>
</aside>
<p>If environments are first-class values (<a href="https://forum.rebol.info/t/what-dialects-need-from-binding/2111/5">as I just suggested</a>), then implementing this should become pretty easy, along the lines of:</p>
<pre><code class="lang-plaintext">foo: func [x] [
    env: get-current-environment
    super: parent env
    print ["local" x "super" super.x]
]
</code></pre>
          <p><a href="https://forum.rebol.info/t/binding-indirection/2112/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-indirection/2112/6</link>
        <pubDate>Fri, 12 Jan 2024 15:09:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2112-6</guid>
        <source url="https://forum.rebol.info/t/binding-indirection/2112.rss">&quot;Binding Indirection&quot;</source>
      </item>
      <item>
        <title>&quot;Binding Indirection&quot;</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>Yes.</p>
<p>Also, I don't know, maybe it would be useful if "super" is not a keyword but an instruction to invoke a specified binding policy. Perhaps other policies might be user specified and nameable.</p>
          <p><a href="https://forum.rebol.info/t/binding-indirection/2112/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-indirection/2112/5</link>
        <pubDate>Fri, 12 Jan 2024 03:02:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2112-5</guid>
        <source url="https://forum.rebol.info/t/binding-indirection/2112.rss">&quot;Binding Indirection&quot;</source>
      </item>
      <item>
        <title>&quot;Binding Indirection&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Brett" data-post="1" data-topic="2112">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/brett/48/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>For example, this might allow one to simulate how scopes work in a language other than rebol, allowing the CTX.PROP notation to be used in that way, instead of Rebol's default method of words carrying their binding. Or maybe the policy would allow a novel module search for CTX.</p>
</blockquote>
</aside>
<p>Perhaps what you are suggesting is being able to do things like:</p>
<pre><code>&gt;&gt; x: 10

&gt;&gt; foo: func [x] [print ["local" x "super" super.x]]

&gt;&gt; foo 20
local 20 super 10
</code></pre>
          <p><a href="https://forum.rebol.info/t/binding-indirection/2112/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-indirection/2112/4</link>
        <pubDate>Fri, 12 Jan 2024 02:37:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2112-4</guid>
        <source url="https://forum.rebol.info/t/binding-indirection/2112.rss">&quot;Binding Indirection&quot;</source>
      </item>
      <item>
        <title>&quot;Binding Indirection&quot;</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="bradrn" data-post="17" data-topic="2098">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"><a href="https://forum.rebol.info/t/block-creation-vs-evaluation/2098/17">Block Creation Vs. Evaluation</a></div>
<blockquote>
<aside class="quote no-group quote-modified" data-username="Brett" data-post="16" data-topic="2098">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/brett/48/177_2.png" class="avatar"><a href="https://forum.rebol.info/t/block-creation-vs-evaluation/2098/16">Block Creation Vs. Evaluation</a></div>
<blockquote>
<p>I think rebol needs some more sophisticated binding operations.  I think <a class="mention" href="https://forum.rebol.info/u/hostilefork">@hostilefork</a> noted something similar recently too.  I wonder if there could be binding operations that allow a bit of indirection. Intuitively I feel that one should be able to define a binding scheme which can become an operator in your code.  For example, with <strong>ctx.prop</strong>, CTX is a specific object. I might be delusional, but maybe CTX could be a binding scheme/function one can define which has access to a set of environments already encountered, that one may want to bind to?</p>
</blockquote>
</aside>
<p>Since I’m not familiar with Rebol 2, I don’t really understand this paragraph. Could you give an example of what you might consider a binding operation with indirection?</p>
</blockquote>
</aside>
<p>My hand wavy intuition is that that it could be useful if CTX we could define to be some binding function that can return the appropriate context/environment that "should" be bound to, given PROP.  Where "should" is determined by some user defined scheme or policy.  This function would have access to environments the interpreter knows about like the enclosing function or loop or something else interesting.</p>
<p>For example, this might allow one to simulate how scopes work in a language other than rebol, allowing the CTX.PROP notation to be used in that way, instead of Rebol's default method of words carrying their binding. Or maybe the policy would allow a novel module search for CTX.</p>
<p>I admit this intuitive idea is certainly not fully formed and is full of gaps, but might be interesting. Apologies <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/binding-indirection/2112/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-indirection/2112/1</link>
        <pubDate>Thu, 11 Jan 2024 07:27:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2112-1</guid>
        <source url="https://forum.rebol.info/t/binding-indirection/2112.rss">&quot;Binding Indirection&quot;</source>
      </item>
  </channel>
</rss>
