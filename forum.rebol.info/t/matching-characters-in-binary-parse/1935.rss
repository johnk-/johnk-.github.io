<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Matching Characters in BINARY! PARSE</title>
    <link>https://forum.rebol.info/t/matching-characters-in-binary-parse/1935</link>
    <description>In Rebol2, you can&#39;t match a character (or string) against a binary!:

    rebol2&gt;&gt; to binary! &quot; &quot;
    == #{20}

    rebol2&gt;&gt; parse #{20} [&quot; &quot;]
    == false

    rebol2&gt;&gt; parse #{20} [#&quot; &quot;]
    == false

In Red and R3-Alpha, you can do both...

    red&gt;&gt; parse #{20} [&quot; &quot;]
    == true

    red&gt;&gt; parse #{20} [#&quot; &quot;]
    == true

But their unicode model means they really don&#39;t know what they&#39;re doing in any general sense, and I&#39;m sure whatever&#39;s under the hood is incoherent:

    red&gt;&gt; to binary! &quot;Æ&quot;
    == #{C386}

    red&gt;&gt; parse #{C386} [&quot;Æ&quot;]
    == false

Ren-C is much more coherent!

    &gt;&gt; did parse #{C386} [&quot;Æ&quot;]
    == #[true]

## So the PARSE Succeeds, but... what should it return?

Right now a parse on a string returns the *rule* when it matches.

    &gt;&gt; rule: &quot;cd&quot;

    &gt;&gt; result: parse &quot;abcd&quot; [&quot;ab&quot; rule]
    == &quot;cd&quot;

    &gt;&gt; append result &quot;ef&quot;
    == &quot;cdef&quot;

    &gt;&gt; rule
    &quot;cdef&quot;

**This is clearly correct, because you don&#39;t want it to make a copy if it doesn&#39;t know if you&#39;re going to use the copy.**  Basic rule matching should not produce a new series.

The same logic applies to BINARY!...but should it give you the string as a string, or aliased to its binary form?

    &gt;&gt; parse #{C386} [&quot;Æ&quot;]
    == &quot;Æ&quot;  ; option 1

    &gt;&gt; parse #{C386} [&quot;Æ&quot;]
    == #{C386}  ; option 2

I think the answer is that you should match it as whatever form it was in the rule.

But then...how about something like BLANK!, which acts equivalently to space if the input is a string... or BLANK! if it&#39;s an array?

    &gt;&gt; parse [_] [_]
    == _

    &gt;&gt; parse &quot; &quot; [_]
    == ???

    &gt;&gt; parse #{20} [_]
    == ???

If we&#39;re going with the idea of rule as being primacy, then the language of the match should be the same as the language of the rule... e.g. the above all return blank.

But this is something of a gray area, IMO.  I feel like blank is acting as a stand-in for space and should probably be looked at as if you said space.

    &gt;&gt; parse &quot; &quot; [_]
    == #&quot; &quot;

    &gt;&gt; parse #{20} [_]
    == #&quot; &quot;  ; instead of 32

So this is what I&#39;m going with, unless someone has a really good argument for something else.</description>
    
    <lastBuildDate>Mon, 22 Aug 2022 10:05:29 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/matching-characters-in-binary-parse/1935.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Matching Characters in BINARY! PARSE</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>If you don’t break the rule to give back the rule, then it is in your hands what you want to get back. Blank, or space character, or one character string.</p>
          <p><a href="https://forum.rebol.info/t/matching-characters-in-binary-parse/1935/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/matching-characters-in-binary-parse/1935/2</link>
        <pubDate>Mon, 22 Aug 2022 10:05:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1935-2</guid>
        <source url="https://forum.rebol.info/t/matching-characters-in-binary-parse/1935.rss">Matching Characters in BINARY! PARSE</source>
      </item>
      <item>
        <title>Matching Characters in BINARY! PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In Rebol2, you can't match a character (or string) against a binary!:</p>
<pre><code>rebol2&gt;&gt; to binary! " "
== #{20}

rebol2&gt;&gt; parse #{20} [" "]
== false

rebol2&gt;&gt; parse #{20} [#" "]
== false
</code></pre>
<p>In Red and R3-Alpha, you can do both...</p>
<pre><code>red&gt;&gt; parse #{20} [" "]
== true

red&gt;&gt; parse #{20} [#" "]
== true
</code></pre>
<p>But their unicode model means they really don't know what they're doing in any general sense, and I'm sure whatever's under the hood is incoherent:</p>
<pre><code>red&gt;&gt; to binary! "Æ"
== #{C386}

red&gt;&gt; parse #{C386} ["Æ"]
== false
</code></pre>
<p>Ren-C is much more coherent!</p>
<pre><code>&gt;&gt; did parse #{C386} ["Æ"]
== #[true]
</code></pre>
<h2>So the PARSE Succeeds, but... what should it return?</h2>
<p>Right now a parse on a string returns the <em>rule</em> when it matches.</p>
<pre><code>&gt;&gt; rule: "cd"

&gt;&gt; result: parse "abcd" ["ab" rule]
== "cd"

&gt;&gt; append result "ef"
== "cdef"

&gt;&gt; rule
"cdef"
</code></pre>
<p><strong>This is clearly correct, because you don't want it to make a copy if it doesn't know if you're going to use the copy.</strong>  Basic rule matching should not produce a new series.</p>
<p>The same logic applies to BINARY!...but should it give you the string as a string, or aliased to its binary form?</p>
<pre><code>&gt;&gt; parse #{C386} ["Æ"]
== "Æ"  ; option 1

&gt;&gt; parse #{C386} ["Æ"]
== #{C386}  ; option 2
</code></pre>
<p>I think the answer is that you should match it as whatever form it was in the rule.</p>
<p>But then...how about something like BLANK!, which acts equivalently to space if the input is a string... or BLANK! if it's an array?</p>
<pre><code>&gt;&gt; parse [_] [_]
== _

&gt;&gt; parse " " [_]
== ???

&gt;&gt; parse #{20} [_]
== ???
</code></pre>
<p>If we're going with the idea of rule as being primacy, then the language of the match should be the same as the language of the rule... e.g. the above all return blank.</p>
<p>But this is something of a gray area, IMO.  I feel like blank is acting as a stand-in for space and should probably be looked at as if you said space.</p>
<pre><code>&gt;&gt; parse " " [_]
== #" "

&gt;&gt; parse #{20} [_]
== #" "  ; instead of 32
</code></pre>
<p>So this is what I'm going with, unless someone has a really good argument for something else.</p>
          <p><a href="https://forum.rebol.info/t/matching-characters-in-binary-parse/1935/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/matching-characters-in-binary-parse/1935/1</link>
        <pubDate>Sun, 21 Aug 2022 05:43:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1935-1</guid>
        <source url="https://forum.rebol.info/t/matching-characters-in-binary-parse/1935.rss">Matching Characters in BINARY! PARSE</source>
      </item>
  </channel>
</rss>
