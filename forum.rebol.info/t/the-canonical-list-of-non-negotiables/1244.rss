<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Canonical List of Non-Negotiables</title>
    <link>https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244</link>
    <description>I realized this is something that maybe hasn&#39;t been attempted, but would be very useful.  That is **a list of concrete code samples where if Rebol won&#39;t run that code looking that way, *then it is dead to you*.**

I&#39;d imagine it&#39;s easier to say things like *&quot;it&#39;s dead to me if it requires me to install Java&quot;*.  But there must be something other than the meta-properties of the language which people consider foundational?  Actual code--looking and acting an actual way?

I&#39;m not looking for *controversial* things here--rather things generally agreed on as good.    But naming some of them out loud might have benefit.  I&#39;ll start.

## COMPOSE, UNSPACED, ETC. VAPORIZING CONDITIONALS

The lack of conditional vaporization bugged me to no end about Rebol2:

    rebol2&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
    == [&lt;a&gt; none &lt;c&gt;]

    rebol2&gt;&gt; rejoin [&quot;a&quot; if false [&quot;b&quot;] &quot;c&quot;]
    == &quot;anonec&quot;

You had to throw in an EITHER with an empty branch, to get an UNSET!.

    rebol2&gt;&gt; compose [&lt;a&gt; (either false [&lt;b&gt;] []) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]

    rebol2&gt;&gt; rejoin [&quot;a&quot; either false [&quot;b&quot;] [] &quot;c&quot;]
    == &quot;ac&quot;

So I advocated vaporizing NONE! by default for a while...facing resistance from those wanting to use them as placeholders in blocks, adamant that NONE! *was a value*.

Hence the idea was moved around to being more like a failed conditional would return an UNSET!.  But because UNSET! was &quot;a value&quot;, it could legitimately be put into blocks.

Hence Ren-C rethought the playing field to have &quot;non-valued&quot; states...like NULL (which you couldn&#39;t put in blocks, but could assign to a variable) and the transient VOID state (which you could neither put in blocks nor assign variables to...attempting to do so would &quot;unset&quot; the variable).

So failed conditionals were re-tuned to return VOID:

    &gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]

    &gt;&gt; unspaced [&quot;a&quot; if false [&quot;b&quot;] &quot;c&quot;]
    == &quot;ac&quot;

The NULL state was decided to be an error in these situations.  So you can&#39;t go directly from a NULL variable to a vanishing slot without something that turns it into VOID.   The construct that does so is called MAYBE.

    &gt;&gt; var: null

    &gt;&gt; compose [&lt;a&gt; (var) &lt;c&gt;]
    ** Error: need non-NULL value in COMPOSE slot

    &gt;&gt; compose [&lt;a&gt; (maybe var) &lt;c&gt;]
    == [&lt;a&gt; &lt;c&gt;]


## DEFINITIONAL RETURN

Novices using Rebol2 or Red aren&#39;t really clear on how their RETURN works.  (Or *doesn&#39;t* work, as the case my be.)  RETURN climbs the stack until it finds a function that is willing to accept returns.

* Functions in Rebol2/Red that *won&#39;t* accept returns: **IF, WHILE, or pretty much any native**
* Functions in Rebol2/Red that *will* accept returns: **any user FUNC you write**

To give a brutally simple example, you cannot implement UNLESS in terms of IF:

     rebol2&gt;&gt; foo: func [x] [if not x = 10 [return &quot;not 10&quot;] return &quot;it&#39;s 10!&quot;]
     rebol2&gt;&gt; foo 20
     == &quot;not 10&quot;

     rebol2&gt;&gt; unless: func [cond block] [if not cond block]
     rebol2&gt;&gt; bar: func [x] [unless x = 10 [return &quot;not 10&quot;] return &quot;it&#39;s 10!&quot;]
     rebol2&gt;&gt; bar 20
     == &quot;it&#39;s 10&quot;  ; D&#39;oh

That UNLESS, because it&#39;s a FUNC and not a native, is a candidate for receiving RETURN.  So the UNLESS itself returned &quot;not 10&quot; instead of returning from bar.  Execution continued and the `return &quot;it&#39;s 10!&quot; ran.  **I maintain that correct behavior constitutes another must-have, [and I was by no means alone in this, nor the first to say so](https://github.com/rebol/rebol-issues/issues/539#issuecomment-170878011)**.

    &gt;&gt; unless: function [cond block] [if not cond (block)]  ; see note re: group!
    &gt;&gt; bar: function [x] [unless x = 10 [return &quot;not 10&quot;] return &quot;it&#39;s 10!&quot;]
    &gt;&gt; bar 20
    == &quot;not 10&quot;

**I do not consider annotating UNLESS to say &quot;I&#39;m the kind of thing that doesn&#39;t catch returns&quot; to be remotely acceptable.**  I&#39;d sooner throw out the project than go that route.  Addressing definitional returns wasn&#39;t at all trivial...even though conceptually it was understood what needed to be done.  It was one of the first things I tried to do in open-sourced R3-Alpha.  The rearranging I had to do in order to understand the code well enough to accomplish it laid the groundwork for many features to come.

So this belongs in the non-negotiable list.

*(Note: The reason you have to put a group! around `block` (or say `:block`) is due to soft-quoted branching, and I [argue for the tradeoff here](https://forum.rebol.info/t/stylistic-questions-and-soft-quoted-branching/1220).  I would not consider that one of my non-negotiable points for this list, though I&#39;ve offered what I believe to be some compelling arguments.  I do--however--consider FUNCTION instead of FUNC to be a non-negotiable way of writing this, with current leaning that [FUNC is a full synonym for FUNCTION](https://forum.rebol.info/t/abbreviations-as-synonyms/1211))*

## ...and...

That&#39;s only two off the top of my head.  But my idea was that we can keep adding posts to this thread whenever someone thinks of something.  What *has* to work else it&#39;s &quot;dead to you&quot;?  @IngoHohmann, @rgchris, @gchiu, @Mark-hi, @BlackAttr... ?

Like I say: please avoid functionality concepts like &quot;has to talk to ODBC&quot;...unless you have a very specific code sample that looks *exactly* right for how it needs to look for some case.</description>
    
    <lastBuildDate>Mon, 16 Aug 2021 18:40:15 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were merged into an existing topic: <a href="/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1858/7">The R3C Branch ("Chris's Rebol" or "Rebol 3 Conservative")</a></p>
          <p><a href="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/3</link>
        <pubDate>Mon, 15 Aug 2022 01:25:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1244-3</guid>
        <source url="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I don't have any non-negotiables at this stage of things. In the R2 past I've had minor annoyances, and I'm sure as I use Ren-C there will be things that I wish were more simple or compact.</p>
          <p><a href="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/2</link>
        <pubDate>Mon, 02 Dec 2019 16:25:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1244-2</guid>
        <source url="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
      <item>
        <title>The Canonical List of Non-Negotiables</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I realized this is something that maybe hasn't been attempted, but would be very useful.  That is <strong>a list of concrete code samples where if Rebol won't run that code looking that way, <em>then it is dead to you</em>.</strong></p>
<p>I'd imagine it's easier to say things like <em>"it's dead to me if it requires me to install Java"</em>.  But there must be something other than the meta-properties of the language which people consider foundational?  Actual code--looking and acting an actual way?</p>
<p>I'm not looking for <em>controversial</em> things here--rather things generally agreed on as good.    But naming some of them out loud might have benefit.  I'll start.</p>
<h2>COMPOSE, UNSPACED, ETC. VAPORIZING CONDITIONALS</h2>
<p>The lack of conditional vaporization bugged me to no end about Rebol2:</p>
<pre><code>rebol2&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; none &lt;c&gt;]

rebol2&gt;&gt; rejoin ["a" if false ["b"] "c"]
== "anonec"
</code></pre>
<p>You had to throw in an EITHER with an empty branch, to get an UNSET!.</p>
<pre><code>rebol2&gt;&gt; compose [&lt;a&gt; (either false [&lt;b&gt;] []) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]

rebol2&gt;&gt; rejoin ["a" either false ["b"] [] "c"]
== "ac"
</code></pre>
<p>So I advocated vaporizing NONE! by default for a while...facing resistance from those wanting to use them as placeholders in blocks, adamant that NONE! <em>was a value</em>.</p>
<p>Hence the idea was moved around to being more like a failed conditional would return an UNSET!.  But because UNSET! was "a value", it could legitimately be put into blocks.</p>
<p>Hence Ren-C rethought the playing field to have "non-valued" states...like NULL (which you couldn't put in blocks, but could assign to a variable) and the transient VOID state (which you could neither put in blocks nor assign variables to...attempting to do so would "unset" the variable).</p>
<p>So failed conditionals were re-tuned to return VOID:</p>
<pre><code>&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]

&gt;&gt; unspaced ["a" if false ["b"] "c"]
== "ac"
</code></pre>
<p>The NULL state was decided to be an error in these situations.  So you can't go directly from a NULL variable to a vanishing slot without something that turns it into VOID.   The construct that does so is called MAYBE.</p>
<pre><code>&gt;&gt; var: null

&gt;&gt; compose [&lt;a&gt; (var) &lt;c&gt;]
** Error: need non-NULL value in COMPOSE slot

&gt;&gt; compose [&lt;a&gt; (maybe var) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]
</code></pre>
<h2>DEFINITIONAL RETURN</h2>
<p>Novices using Rebol2 or Red aren't really clear on how their RETURN works.  (Or <em>doesn't</em> work, as the case my be.)  RETURN climbs the stack until it finds a function that is willing to accept returns.</p>
<ul>
<li>Functions in Rebol2/Red that <em>won't</em> accept returns: <strong>IF, WHILE, or pretty much any native</strong>
</li>
<li>Functions in Rebol2/Red that <em>will</em> accept returns: <strong>any user FUNC you write</strong>
</li>
</ul>
<p>To give a brutally simple example, you cannot implement UNLESS in terms of IF:</p>
<pre><code> rebol2&gt;&gt; foo: func [x] [if not x = 10 [return "not 10"] return "it's 10!"]
 rebol2&gt;&gt; foo 20
 == "not 10"

 rebol2&gt;&gt; unless: func [cond block] [if not cond block]
 rebol2&gt;&gt; bar: func [x] [unless x = 10 [return "not 10"] return "it's 10!"]
 rebol2&gt;&gt; bar 20
 == "it's 10"  ; D'oh
</code></pre>
<p>That UNLESS, because it's a FUNC and not a native, is a candidate for receiving RETURN.  So the UNLESS itself returned "not 10" instead of returning from bar.  Execution continued and the `return "it's 10!" ran.  <strong>I maintain that correct behavior constitutes another must-have, <a href="https://github.com/rebol/rebol-issues/issues/539#issuecomment-170878011">and I was by no means alone in this, nor the first to say so</a></strong>.</p>
<pre><code>&gt;&gt; unless: function [cond block] [if not cond (block)]  ; see note re: group!
&gt;&gt; bar: function [x] [unless x = 10 [return "not 10"] return "it's 10!"]
&gt;&gt; bar 20
== "not 10"
</code></pre>
<p><strong>I do not consider annotating UNLESS to say "I'm the kind of thing that doesn't catch returns" to be remotely acceptable.</strong>  I'd sooner throw out the project than go that route.  Addressing definitional returns wasn't at all trivial...even though conceptually it was understood what needed to be done.  It was one of the first things I tried to do in open-sourced R3-Alpha.  The rearranging I had to do in order to understand the code well enough to accomplish it laid the groundwork for many features to come.</p>
<p>So this belongs in the non-negotiable list.</p>
<p><em>(Note: The reason you have to put a group! around <code>block</code> (or say <code>:block</code>) is due to soft-quoted branching, and I <a href="https://forum.rebol.info/t/stylistic-questions-and-soft-quoted-branching/1220">argue for the tradeoff here</a>.  I would not consider that one of my non-negotiable points for this list, though I've offered what I believe to be some compelling arguments.  I do--however--consider FUNCTION instead of FUNC to be a non-negotiable way of writing this, with current leaning that <a href="https://forum.rebol.info/t/abbreviations-as-synonyms/1211">FUNC is a full synonym for FUNCTION</a>)</em></p>
<h2>...and...</h2>
<p>That's only two off the top of my head.  But my idea was that we can keep adding posts to this thread whenever someone thinks of something.  What <em>has</em> to work else it's "dead to you"?  <a class="mention" href="/u/ingohohmann">@IngoHohmann</a>, <a class="mention" href="/u/rgchris">@rgchris</a>, <a class="mention" href="/u/gchiu">@gchiu</a>, <a class="mention" href="/u/mark-hi">@Mark-hi</a>, <a class="mention" href="/u/blackattr">@BlackAttr</a>... ?</p>
<p>Like I say: please avoid functionality concepts like "has to talk to ODBC"...unless you have a very specific code sample that looks <em>exactly</em> right for how it needs to look for some case.</p>
          <p><a href="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244/1</link>
        <pubDate>Fri, 29 Nov 2019 05:04:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1244-1</guid>
        <source url="https://forum.rebol.info/t/the-canonical-list-of-non-negotiables/1244.rss">The Canonical List of Non-Negotiables</source>
      </item>
  </channel>
</rss>
