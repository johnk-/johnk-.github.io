<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Soft Quoted Branching: Light, Elegant, Fast</title>
    <link>https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020</link>
    <description>It&#39;s uncommon to use expressions that evaluate to branches passed to conditionals.  And when you do use one, you probably don&#39;t mind putting it in a GROUP! (especially considering that 99% of the time in the *far* more common cases you were willing to put it in a BLOCK!).

So Ren-C now uses that fact--plus generalized quoting--to allow for a briefer and faster way to evaluate to literals in your conditionals:

    &gt;&gt; if okay &#39;[block as data]
    == [block as data]

Simply pass in a QUOTED! item of any kind, and that item will be what a branch evaluates to.  It will be one less level of quoting than what you pass in:

    &gt;&gt; if okay &#39;&lt;tag&gt;
    == &lt;tag&gt;

Previous attempts to get something like this used an /ONLY refinement.  But this lets you mix and match in the same operator, as opposed to switching the operator into a &quot;mode&quot;:

    &gt;&gt; either okay &#39;[1 + 2] [1 + 2]
    == [1 + 2]

    &gt;&gt; either null &#39;[1 + 2] [1 + 2]
    == 3

## It Solves Some Problems for CASE

Historically, CASE was more lax in accepting types than the corresponding IFs would be:

    &gt;&gt; case [1 = 1 &lt;foo&gt;]
    == &lt;foo&gt;

It would allow the by-products of arbitrary evaluation to be used:

    &gt;&gt; word: &lt;foo&gt;
    &gt;&gt; case [1 = 1 word]
    == &lt;foo&gt;

Sometimes this resulted in double-evaluation:

    &gt;&gt; word: [print &quot;surprise&quot;]
    &gt;&gt; case [1 = 1 word]
    surprise
    == true

The dodgy nature of this &quot;may be a double evaluation, may be not&quot; with no way to tell at source level raised some concerns, which are laid out in the [&quot;backpedaling on non-block branches&quot;](https://forum.rebol.info/t/backpedaling-on-non-block-branches/476) post.

The combination of soft quoting and generalized quoting lets the same patterns that work for IF work in CASE.  It lowers the risks in a legible way:

    &gt;&gt; case [1 = 1 &#39;&lt;foo&gt;]
    == &lt;foo&gt;

## It&#39;s Faster and More Efficient

Quoting is done with a byte in cells.  So you can count up to 254 levels of quoting without really costing anything.  *(If you&#39;re wondering why not 255 levels since a byte can be from 0..255, it&#39;s because 255 is reserved for &quot;isotopes&quot;.)*

So **&#39;[x]** costs less storage (and has better locality with the surrounding cells) than **[[x]]**.

Outside of the reduced storage, it&#39;s also lighter on the evaluator, because it doesn&#39;t have to push an evaluator frame to run the block!

## The consequences

There were very few pieces of code in the Ren-C repo that were affected.  One was a help test.  It wanted to generate a real-world block to run, and didn&#39;t want to call DO for some reason:

    for-each w words of lib [
        dump w
        if not set? w [continue]
        if action? get w
            compose [help (w)]   ; errors now...IF thinks the COMPOSE word! is branch
        else [
            help (get w)
        ]
    ]

It&#39;s easy enough to change that to `(compose [help (w)])`...this kind of usage is very rare.

The one common case of passing code to a conditional originated from Ren-C...the use of lambdas that could take the argument of what drove the conditional:

     trap [1 / 0] then error -&gt; [print [error]]

So you have to put it in a GROUP!:

     trap [1 / 0] then (error -&gt; [print [error]])

I&#39;m pretty sure this can be rethought to work as before, given the strategy of &quot;right quoting always wins&quot;.  But the evaluator has some kind of strict horse-blinder rules that guide its design, so not all things are possible.  We&#39;ll see.

&gt; **UPDATE 2020**: The required rules have been implemented, and hard quoted left parameters on the right win in this instance, so the group is not necessary.  :sushi:

Even if it couldn&#39;t get fixed, in the scheme of things it&#39;s worth it.  And it isn&#39;t like people aren&#39;t used to putting branches in delimiters for blocks anyway!</description>
    
    <lastBuildDate>Tue, 01 Oct 2024 00:46:53 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Soft Quoted Branching: Light, Elegant, Fast</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1020">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Soft-quoted branching requires you to put that WRAP in a group.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">if blah blah blah (wrap [
    x: ...
    y: ...
])
</code></pre>
<p>Not the end of the world. But all things being equal, I'd prefer:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">if (blah blah blah) wrap [
    x: ...
    y: ...
]
</code></pre>
</blockquote>
</aside>
<h2><a name="p-7807-but-no-theres-a-reason-for-style-1-1" class="anchor" href="https://forum.rebol.info#p-7807-but-no-theres-a-reason-for-style-1-1"></a>BUT NO!  THERE'S A REASON FOR STYLE 1</h2>
<p><em><strong>You don't want to pay for the WRAP if the branch is not taken.</strong></em></p>
<p>Unfortunately, given the nature of soft-quoting at the moment, that requires:</p>
<pre><code>if blah blah blah @(wrap [
    x: ...
    y: ...
])
</code></pre>
<p><a href="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373">I've gone back and forth on the issue of whether group branches run unconditionally.</a></p>
<p>But looking at this concrete case now, I really <em>do not</em> like the @ being necessary there.  Unfortunately, it's not as easy as saying "take the branch as a hard literal" because <a href="https://forum.rebol.info/t/implicit-escaping-to-tiebreak-literal-arguments/2290">doing so ruins the tiebreaking that lets you put lambdas in branch slots</a>.</p>
<p>Going to have to sleep on it.  <img src="https://forum.rebol.info/images/emoji/twitter/sleeping.png?v=12" title=":sleeping:" class="emoji" alt=":sleeping:" loading="lazy" width="20" height="20"> But looks like soft literal branches are safe.</p>
          <p><a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/6</link>
        <pubDate>Tue, 01 Oct 2024 00:46:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1020-6</guid>
        <source url="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020.rss">Soft Quoted Branching: Light, Elegant, Fast</source>
      </item>
      <item>
        <title>Soft Quoted Branching: Light, Elegant, Fast</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h3>
<a name="possible-snag-for-soft-quoted-branching-1" class="anchor" href="https://forum.rebol.info#possible-snag-for-soft-quoted-branching-1"></a>Possible Snag For Soft-Quoted Branching?</h3>
<p>That snag <a href="https://forum.rebol.info/t/caching-binding-lookup-and-attachment-binding/2128/6">is the growing need for WRAP</a>.</p>
<p>Previously it wasn't too common you wanted to pass an evaluated branch into a function.  Now it might be common.</p>
<pre><code>if some-condition [
    let x: ...
    let y: ...
]
</code></pre>
<p>=&gt;</p>
<pre><code>if some-condition wrap [
    x: ...
    y: ...
]
</code></pre>
<p>Soft-quoted branching requires you to put that WRAP in a group.</p>
<pre><code>if blah blah blah (wrap [
    x: ...
    y: ...
])
</code></pre>
<p>Not the end of the world.  But all things being equal, I'd prefer:</p>
<pre><code>if (blah blah blah) wrap [
    x: ...
    y: ...
]
</code></pre>
<p>This isn't the first challenge to soft-quoted branching, but it's the strongest one yet.</p>
<p>I'm not fully ready to throw it out the window, and I've outlined points of why they're important in this thread.  But this is definitely giving me second thoughts...so hedging now.  <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<p>Without soft-quoted branching, the branches could still accept quoted items, they'd just have to be doubly quoted to survive the eval... or use something like JUST or THE</p>
<pre><code>&gt;&gt; if okay ''x
== x

&gt;&gt; if okay just 'x
== x
</code></pre>
<p>But <strong><code>if okay ['x]</code></strong> is better looking than either of those, albeit slower.  (<a href="https://forum.rebol.info/t/intrinsics-functions-without-frames/2050">JUST is an intrinsic</a>).</p>
          <p><a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/5</link>
        <pubDate>Tue, 01 Oct 2024 00:30:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1020-5</guid>
        <source url="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020.rss">Soft Quoted Branching: Light, Elegant, Fast</source>
      </item>
      <item>
        <title>Soft Quoted Branching: Light, Elegant, Fast</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1020">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's uncommon to use expressions that evaluate to branches passed to conditionals. And when you do use one, you probably don't mind putting it in a GROUP! (especially considering that 99% of the time in the <em>far</em> more common cases you were willing to put it in a BLOCK!).</p>
<p>So Ren-C now uses that fact--plus generalized quoting--to allow for a briefer and faster way to evaluate to literals in your conditionals:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; if okay '[block as data]
== [block as data]
</code></pre>
</blockquote>
</aside>
<p>So-called "soft-quoted branching" now runs up against the question of quoting's meaning for binding.</p>
<p>Generally we would assume the example above would mean you would get an unbound block (or, more accurately, the block with the binding it has... which is usually nothing if it's source).</p>
<p>This means it's semantically different from:</p>
<pre><code>if okay [[block as data]]
</code></pre>
<p>Because there, the block is evaluated... and under that evaluation, receives the current binding.</p>
<p>It would instead be the equivalent of:</p>
<pre><code>if okay ['[block as data]]
</code></pre>
<p>We can now consider the potential meaning of:</p>
<pre><code>if okay $[block as data]
</code></pre>
<p>This could be the real equivalent of <strong>if true [[block as data]]</strong>.</p>
<p>$ forms aren't available for all types the way quoted forms are, but have the curiously appropriate property (in the current model) that they are available for all <em>bindable</em> types... so we can imagine the meaning of $ branches being "as is, bound".</p>
          <p><a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/3</link>
        <pubDate>Thu, 08 Feb 2024 20:27:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1020-3</guid>
        <source url="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020.rss">Soft Quoted Branching: Light, Elegant, Fast</source>
      </item>
      <item>
        <title>Soft Quoted Branching: Light, Elegant, Fast</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here's another great argument for soft quoted branches:</p>
<pre><code>&gt;&gt; 1 + either okay [2] [3] + 4
== 7

&gt;&gt; 1 + either null [2] [3] + 4
== 8
</code></pre>
<p>If you try that in Rebol2 or Red, you get:</p>
<pre><code>red&gt; 1 + either true [2] [3] + 4
** Script Error: + does not allow block! for its value1 argument
</code></pre>
<p>In Ren-C you can even use IF/ELSE interchangeably with EITHER.  (This interchangeability now works 100% of the time):</p>
<pre><code> &gt;&gt; 1 + if okay [2] else [3] + 4
 == 7

 &gt;&gt; 1 + if null [2] else [3] + 4
 == 8
</code></pre>
<p>This might point to using soft quoting for more things in the system where you think it is infrequent that people will be passing constructed meta-code in.</p>
<pre><code>&gt;&gt; 1 + switch type of #x [issue! [2] tag! [3]] + 4
;... wouldn't it be nice if this were 7?
</code></pre>
<p>It's a bit touchy-feely to make that call.  You don't want to have to say <strong>compose (reduce [...])</strong> instead of just <strong>compose reduce [...]</strong>, but you're looking to get a <em>block</em> out of it.  How many evaluative infix operators want a block out of their left hand side?  I think if your construct is explicitly used in meta-coding, you want to bias it to fitting in with other meta-coding without needing to put arguments in groups.</p>
<p>But things like CASE and SWITCH might benefit from soft-quoting their case lists and switch lists, to favor the idea of fitting into more evaluative scenarios for using their product.  While not being "a branch" per se, their lists are a kind of a "proxy for branches".</p>
          <p><a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/2</link>
        <pubDate>Tue, 22 Jan 2019 00:44:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1020-2</guid>
        <source url="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020.rss">Soft Quoted Branching: Light, Elegant, Fast</source>
      </item>
      <item>
        <title>Soft Quoted Branching: Light, Elegant, Fast</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's uncommon to use expressions that evaluate to branches passed to conditionals.  And when you do use one, you probably don't mind putting it in a GROUP! (especially considering that 99% of the time in the <em>far</em> more common cases you were willing to put it in a BLOCK!).</p>
<p>So Ren-C now uses that fact--plus generalized quoting--to allow for a briefer and faster way to evaluate to literals in your conditionals:</p>
<pre><code>&gt;&gt; if okay '[block as data]
== [block as data]
</code></pre>
<p>Simply pass in a QUOTED! item of any kind, and that item will be what a branch evaluates to.  It will be one less level of quoting than what you pass in:</p>
<pre><code>&gt;&gt; if okay '&lt;tag&gt;
== &lt;tag&gt;
</code></pre>
<p>Previous attempts to get something like this used an /ONLY refinement.  But this lets you mix and match in the same operator, as opposed to switching the operator into a "mode":</p>
<pre><code>&gt;&gt; either okay '[1 + 2] [1 + 2]
== [1 + 2]

&gt;&gt; either null '[1 + 2] [1 + 2]
== 3
</code></pre>
<h2><a name="p-2979-it-solves-some-problems-for-case-1" class="anchor" href="https://forum.rebol.info#p-2979-it-solves-some-problems-for-case-1"></a>It Solves Some Problems for CASE</h2>
<p>Historically, CASE was more lax in accepting types than the corresponding IFs would be:</p>
<pre><code>&gt;&gt; case [1 = 1 &lt;foo&gt;]
== &lt;foo&gt;
</code></pre>
<p>It would allow the by-products of arbitrary evaluation to be used:</p>
<pre><code>&gt;&gt; word: &lt;foo&gt;
&gt;&gt; case [1 = 1 word]
== &lt;foo&gt;
</code></pre>
<p>Sometimes this resulted in double-evaluation:</p>
<pre><code>&gt;&gt; word: [print "surprise"]
&gt;&gt; case [1 = 1 word]
surprise
== true
</code></pre>
<p>The dodgy nature of this "may be a double evaluation, may be not" with no way to tell at source level raised some concerns, which are laid out in the <a href="https://forum.rebol.info/t/backpedaling-on-non-block-branches/476">"backpedaling on non-block branches"</a> post.</p>
<p>The combination of soft quoting and generalized quoting lets the same patterns that work for IF work in CASE.  It lowers the risks in a legible way:</p>
<pre><code>&gt;&gt; case [1 = 1 '&lt;foo&gt;]
== &lt;foo&gt;
</code></pre>
<h2><a name="p-2979-its-faster-and-more-efficient-2" class="anchor" href="https://forum.rebol.info#p-2979-its-faster-and-more-efficient-2"></a>It's Faster and More Efficient</h2>
<p>Quoting is done with a byte in cells.  So you can count up to 254 levels of quoting without really costing anything.  <em>(If you're wondering why not 255 levels since a byte can be from 0..255, it's because 255 is reserved for "isotopes".)</em></p>
<p>So <strong>'[x]</strong> costs less storage (and has better locality with the surrounding cells) than <strong>[[x]]</strong>.</p>
<p>Outside of the reduced storage, it's also lighter on the evaluator, because it doesn't have to push an evaluator frame to run the block!</p>
<h2><a name="p-2979-the-consequences-3" class="anchor" href="https://forum.rebol.info#p-2979-the-consequences-3"></a>The consequences</h2>
<p>There were very few pieces of code in the Ren-C repo that were affected.  One was a help test.  It wanted to generate a real-world block to run, and didn't want to call DO for some reason:</p>
<pre><code>for-each w words of lib [
    dump w
    if not set? w [continue]
    if action? get w
        compose [help (w)]   ; errors now...IF thinks the COMPOSE word! is branch
    else [
        help (get w)
    ]
]
</code></pre>
<p>It's easy enough to change that to <code>(compose [help (w)])</code>...this kind of usage is very rare.</p>
<p>The one common case of passing code to a conditional originated from Ren-C...the use of lambdas that could take the argument of what drove the conditional:</p>
<pre><code> trap [1 / 0] then error -&gt; [print [error]]
</code></pre>
<p>So you have to put it in a GROUP!:</p>
<pre><code> trap [1 / 0] then (error -&gt; [print [error]])
</code></pre>
<p>I'm pretty sure this can be rethought to work as before, given the strategy of "right quoting always wins".  But the evaluator has some kind of strict horse-blinder rules that guide its design, so not all things are possible.  We'll see.</p>
<blockquote>
<p><strong>UPDATE 2020</strong>: The required rules have been implemented, and hard quoted left parameters on the right win in this instance, so the group is not necessary.  <img src="https://forum.rebol.info/images/emoji/twitter/sushi.png?v=12" title=":sushi:" class="emoji" alt=":sushi:" loading="lazy" width="20" height="20"></p>
</blockquote>
<p>Even if it couldn't get fixed, in the scheme of things it's worth it.  And it isn't like people aren't used to putting branches in delimiters for blocks anyway!</p>
          <p><a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020/1</link>
        <pubDate>Fri, 18 Jan 2019 12:56:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1020-1</guid>
        <source url="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020.rss">Soft Quoted Branching: Light, Elegant, Fast</source>
      </item>
  </channel>
</rss>
