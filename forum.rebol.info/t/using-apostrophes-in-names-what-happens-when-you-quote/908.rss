<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using Apostrophes in Names: What Happens When You Quote?</title>
    <link>https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908</link>
    <description>Apostrophes have been on the rise purposefully in names also throws.  Not only is there **`isn&#39;t`** and **`didn&#39;t`** coming very soon to wide use, but I do kind of like the mathematical convention of ticking apostrophes on the tail of things to make &quot;derived&quot; versions of them (`f`, `f&#39;`, `f&#39;&#39;`)

    block: [isn&#39;t &quot;Hello&quot;]
    switch first block [
        &#39;isn&#39;t [print &quot;This runs&quot;]
    ]

    foo&#39;: specialize &#39;f [arg1: 10]
    foo&#39;&#39;: specialize &#39;f&#39; [arg2: 20]
    action: get &#39;f&#39;&#39;

&gt; **2022 UPDATE:** Terminal apostrophes in variable names is also a common practice now to indicate a variable holds a meta quantity.

## Might There Be An Alternative Choice For QUOTED! ?

Something I haven&#39;t been able to shake since the beginning of seeing the usage of apostrophe for LIT-WORD! is that it is *too slight* for something as important as it is.

There&#39;s a big difference between `foo` and `&#39;foo` but it&#39;s rather hard to see.     This is kind of slight:

    code: &#39;(
        #foo [baz bar]
        whole bunch of stuff ...
    )


## But What About... the Neglected Backslash?

Backslash is currently unused.  We&#39;ve thrown around ideas for backslash from time to time.  It was the original expression barrier concept, before **|** took that over.

Despite its common uses for escaping in other languages and mediums, it&#39;s never come up as the idea for being the generic literal escape.  But, it actually seems pretty well-suited to it.

Looking at some options with unused characters:

&gt; **UPDATE 2022:** Uses for @ and ^ are now more or less &quot;set in stone&quot; (to the extent anything in Ren-C ever is)

    if word = \isn&#39;t [...]
    if word = &#39;isn&#39;t [...]
    if word = ^isn&#39;t [...]
    if word = @isn&#39;t [...]

    if string = \&quot;something&quot; [...]
    if string = &#39;&quot;something&quot; [...]
    if string = ^&quot;something&quot; [...]
    if string = @&quot;something&quot; [...]

    &gt;&gt; compose [(1 + 2) \(1 + 2) \\(1 + 2)]
    == [3 (1 + 2) \(1 + 2)]
 
    block: [a b c]
    switch block [
        \[a b c] [print &quot;literal match!&quot;]
        ...
    ]

Benefits:

* Doubled-up usage can&#39;t be visually confused with another symbol (like how two apostrophes look like quotes, or an apostrophe and quotes can look like quotes and an apostrophe)
* It doesn&#39;t require shift to type on most keyboards (though a little bit of a pinky-reach)
* Known usage for escaping in other languages

*(Note: The benefit of it being used for escaping in other mediums also makes it a bit of a drawback, as when you&#39;re typing in code in some text or markdown environment and use a backslash it can trip it up...because it thinks you&#39;re trying to escape.  Of course you run into that problem with any code... like typing `*` and having it think you&#39;re trying to bold something, etc.  Still, backslashes can be one of the trickiest things to get these mediums to *actually* display how you want.)*

Caret isn&#39;t bad-looking either.  But the big problem with caret is that you don&#39;t want the escaping method used for weird characters in strings to interact with commonly-used characters in code.  Because code is often carried in strings (or molded to it, etc.)  It&#39;s best if caret occurrences are few and far-between, but literals would be a lot of places.  You&#39;ve got to diversify your escaping mechanisms, otherwise you have to escape your escapes more often.

## Radical Brainstorm: Beginning And End For Quotes

The other thought I had when first questioning `&#39;`  was what if double quotes weren&#39;t used for strings, but for quoting arbitrary material literally:

    block: [isn&#39;t {Hello}]

    switch first block [
        &quot;isn&#39;t&quot; [print {This runs}]
    ]

It would look better when quoting SET-WORD!s as `&quot;foo:&quot;`, and provide clearer and more visible delimiting on GROUP!s:

    code: &quot;(
        #foo [baz bar]
        whole bunch of stuff ...
    )&quot;

Because it would be part of a paired delimiter, you wouldn&#39;t have to worry about nested quoted material.

While this is sort of &quot;interesting&quot; it&#39;s *completely* incompatible.  It makes you type two delimiters when a common case only required one.  And from my experiments trying using only braced-strings to see if quotes could be freed up for something else, I found the braces were far too heavy when used for *every* string. 
 Plus the presence of two styles letting you conveniently have things like a string with a single brace `&quot;{&quot;`.</description>
    
    <lastBuildDate>Fri, 10 Jul 2020 00:16:12 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using Apostrophes in Names: What Happens When You Quote?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995/5">QUOTED! arrives (formerly known as "lit bit")</a></p>
          <p><a href="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/6</link>
        <pubDate>Fri, 19 Aug 2022 01:30:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-6</guid>
        <source url="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908.rss">Using Apostrophes in Names: What Happens When You Quote?</source>
      </item>
      <item>
        <title>Using Apostrophes in Names: What Happens When You Quote?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/should-we-point-the-blame-in-fail-with/1921">Should We Point The Blame in FAIL With "@"?</a></p>
          <p><a href="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/10</link>
        <pubDate>Fri, 19 Aug 2022 01:12:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-10</guid>
        <source url="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908.rss">Using Apostrophes in Names: What Happens When You Quote?</source>
      </item>
      <item>
        <title>Using Apostrophes in Names: What Happens When You Quote?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've buried the hatchet, and stopped questioning apostrophe for quotes.  I accept it for the purpose it was originally intended.</p>
<p>The acceptance is based on three premises.</p>
<h2>First, accept apostrophe's slight appearance as a benefit</h2>
<p>In <a href="https://chat.stackoverflow.com/transcript/message/44949299#44949299">@rgchris's words</a>:</p>
<blockquote>
<p><em>"I am a member of the apostrophe fan club--I think its inherent discretion is part of what makes Rebol a more elegant language."</em></p>
</blockquote>
<p>When you look at a lot of average-case code, the near-equivalence of <code>'foo</code> and <code>foo</code> becomes a feature instead of a bug:</p>
<pre><code>parse [apple banana banana] ['apple some 'banana]
parse [apple banana banana] [@apple some @banana]
</code></pre>
<h2>Secondly, use THE for literal forms in the source</h2>
<pre><code> if word = the isn't [...]
</code></pre>
<p>It may be that even the quoted values could find an alternate rendering...like how <strong>"^""</strong> will be picked to render as <strong>{"}</strong> by molding.  So perhaps <strong><code>'isn't</code></strong> or <strong><code>''double-quoted-double-primed''</code></strong> could have some options too.</p>
<blockquote>
<p><strong>UPDATE 2022:</strong> Indeed, this is the case with <a href="https://forum.rebol.info/t/weird-word-s-allow-but-escape-them/1560">weird WORD!s</a>... you use vertical bars!</p>
<pre><code>&gt;&gt; '|isn't|
== isn't

&gt;&gt; ''|double-quoted-double-primed''|
== '|double-quoted-double-primed''|
</code></pre>
</blockquote>
<h2>Thirdly, stop using WORD! for enumerations.</h2>
<p>If you used something weightier like an ISSUE!, the fact that apostrophe is so skinny wouldn't come up.</p>
<pre><code> switch mode [
     'read [print "too skinny!"]
     #read [print "better..."]
     &lt;read&gt; [print "also better..."]
     %read [print "fine too."]
     @read [print "coming someday..."]
 ]
</code></pre>
<p>If you only use words when you need evaluation, you'll need escaping less.  And you'll be doing yourself a favor in COMPOSE situations where you won't constantly have to be worrying about the word getting its quote knocked off and then evaluating in some other situation.</p>
<hr>
<p>The full post announcing the "finalized" (cough) generic quoting mechanism is here:</p>
<aside class="quote quote-modified" data-post="1" data-topic="995">
  <div class="title">
    <div class="quote-controls"></div>
    <img alt="" width="20" height="20" src="/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/quoted-arrives-formerly-known-as-lit-bit/995">QUOTED! arrives (formerly known as "lit bit")</a> <a class="badge-wrapper  bullet" href="https://forum.rebol.info/c/usage/feature-discover/24"><span class="badge-category-parent-bg" style="background-color: #3AB54A;"></span><span class="badge-category-bg" style="background-color: #3AB54A;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Rebol and Red have quite a few cool features - this is PR for them.">Feature Discover</span></a>
  </div>
  <blockquote>
    I'm pleased to say that the day has come that you can use apostrophe to escape any value...not just WORD! and PATH!.  And since I said any value, that means you can also quote quoted values...as deeply as you like! 
&gt;&gt; '(1 + 2)
== (1 + 2)

&gt;&gt; ''(1 + 2)
== '(1 + 2)

&gt;&gt; quoted? first [''{double quoted text!}]
== #[true]

&gt;&gt; quotes of first ['''''''''''''''''&lt;whoa!&gt;]
== 17

It opens up a whole new box of parts for dialecting, and makes your every day code shorter and clearer (when used properly).  B…
  </blockquote>
</aside>

          <p><a href="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/9</link>
        <pubDate>Sat, 05 Jan 2019 06:04:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-9</guid>
        <source url="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908.rss">Using Apostrophes in Names: What Happens When You Quote?</source>
      </item>
      <item>
        <title>Using Apostrophes in Names: What Happens When You Quote?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://forum.rebol.info/u/hostilefork">@hostilefork</a> +1 on your second post.</p>
          <p><a href="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/4</link>
        <pubDate>Sun, 18 Nov 2018 22:22:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-4</guid>
        <source url="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908.rss">Using Apostrophes in Names: What Happens When You Quote?</source>
      </item>
      <item>
        <title>Using Apostrophes in Names: What Happens When You Quote?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="BlackATTR" data-post="2" data-topic="908">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I usually pronounce the @ symbol in my head as “at”, so I’m not in love with the idea of using it to represent a lit-word. It’s not a big deal, I’d get over it.</p>
</blockquote>
</aside>
<p>I brought it up just because it's an idea that I have whenever I get frustrated with <code>'</code> and look at a particular case where it falls down.  The recent frustration triggering the thought was having a variable <code>d'</code> and then quoting it and getting <code>'d'</code> and thinking how bad that looked, as if it were a string or character literal.  This then ties into the fears of letting apostrophe-words become common, like <code>isn't</code>, and how that's going to play.</p>
<p>Maybe so long as you make sure THE is always available as an option to fall back on, it's not so bad.  <strong><code>'d'</code></strong> is terrible, but <strong><code>the d'</code></strong> is legible.  Escaping is a hard general problem, that pops up everywhere...you can write <code>http://http.http//http.http</code>.</p>
<blockquote>
<p>could the # symbol be used to denote a lit-word? It’s very eye-grabbing.</p>
</blockquote>
<p>I've become a big fan of using <span class="hashtag">#issues</span> in places that do not intend to bind, because the fact that they don't decay in the evaluator increases their usability for that purpose.</p>
<p>Consider something like in ZeroMQ, where <a href="https://github.com/metaeducation/ren-c/blob/8b8b9a53ed1b767b933388663d6bb5c428b2c59c/src/extensions/zeromq/mod-zeromq.c#L372">a <code>type</code> constant is passed by WORD!</a>.  The consequence of that is that when you splice it into code, you have to take pains to unevaluate it (done there with <code>rebQ()</code>).  But if it had been an ISSUE!, you wouldn't have to worry as it would be completely reduced.</p>
<p>Similarly, I feel TAG! should be picked up in a lot of places people casually use quoted WORD!s today.  It puts more diversity in the source and helps hint that you aren't dereferencing.</p>
          <p><a href="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/3</link>
        <pubDate>Fri, 16 Nov 2018 22:33:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-3</guid>
        <source url="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908.rss">Using Apostrophes in Names: What Happens When You Quote?</source>
      </item>
      <item>
        <title>Using Apostrophes in Names: What Happens When You Quote?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>This may be an unhelpful, half-baked reply. I usually pronounce the @ symbol in my head as "at", so I'm not in love with the idea of using it to represent a lit-word. It's not a big deal, I'd get over it. <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
I've sometimes thought that the @ symbol could be used as a glyph for anything that can be addressed, including the location of source-data. The @ could be at the beginning of a URL, email, port, etc.</p>
<p>I don't have much reasoning behind this, but could the # symbol be used to denote a lit-word? It's very eye-grabbing.</p>
          <p><a href="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/2</link>
        <pubDate>Fri, 16 Nov 2018 16:21:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-2</guid>
        <source url="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908.rss">Using Apostrophes in Names: What Happens When You Quote?</source>
      </item>
      <item>
        <title>Using Apostrophes in Names: What Happens When You Quote?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Apostrophes have been on the rise purposefully in names also throws.  Not only is there <strong><code>isn't</code></strong> and <strong><code>didn't</code></strong> coming very soon to wide use, but I do kind of like the mathematical convention of ticking apostrophes on the tail of things to make "derived" versions of them (<code>f</code>, <code>f'</code>, <code>f''</code>)</p>
<pre><code>block: [isn't "Hello"]
switch first block [
    'isn't [print "This runs"]
]

foo': specialize 'f [arg1: 10]
foo'': specialize 'f' [arg2: 20]
action: get 'f''
</code></pre>
<blockquote>
<p><strong>2022 UPDATE:</strong> Terminal apostrophes in variable names is also a common practice now to indicate a variable holds a meta quantity.</p>
</blockquote>
<h2>Might There Be An Alternative Choice For QUOTED! ?</h2>
<p>Something I haven't been able to shake since the beginning of seeing the usage of apostrophe for LIT-WORD! is that it is <em>too slight</em> for something as important as it is.</p>
<p>There's a big difference between <code>foo</code> and <code>'foo</code> but it's rather hard to see.     This is kind of slight:</p>
<pre><code>code: '(
    #foo [baz bar]
    whole bunch of stuff ...
)
</code></pre>
<h2>But What About... the Neglected Backslash?</h2>
<p>Backslash is currently unused.  We've thrown around ideas for backslash from time to time.  It was the original expression barrier concept, before <strong>|</strong> took that over.</p>
<p>Despite its common uses for escaping in other languages and mediums, it's never come up as the idea for being the generic literal escape.  But, it actually seems pretty well-suited to it.</p>
<p>Looking at some options with unused characters:</p>
<blockquote>
<p><strong>UPDATE 2022:</strong> Uses for @ and ^ are now more or less "set in stone" (to the extent anything in Ren-C ever is)</p>
</blockquote>
<pre><code>if word = \isn't [...]
if word = 'isn't [...]
if word = ^isn't [...]
if word = @isn't [...]

if string = \"something" [...]
if string = '"something" [...]
if string = ^"something" [...]
if string = @"something" [...]

&gt;&gt; compose [(1 + 2) \(1 + 2) \\(1 + 2)]
== [3 (1 + 2) \(1 + 2)]

block: [a b c]
switch block [
    \[a b c] [print "literal match!"]
    ...
]
</code></pre>
<p>Benefits:</p>
<ul>
<li>Doubled-up usage can't be visually confused with another symbol (like how two apostrophes look like quotes, or an apostrophe and quotes can look like quotes and an apostrophe)</li>
<li>It doesn't require shift to type on most keyboards (though a little bit of a pinky-reach)</li>
<li>Known usage for escaping in other languages</li>
</ul>
<p><em>(Note: The benefit of it being used for escaping in other mediums also makes it a bit of a drawback, as when you're typing in code in some text or markdown environment and use a backslash it can trip it up...because it thinks you're trying to escape.  Of course you run into that problem with any code... like typing <code>*</code> and having it think you're trying to bold something, etc.  Still, backslashes can be one of the trickiest things to get these mediums to <em>actually</em> display how you want.)</em></p>
<p>Caret isn't bad-looking either.  But the big problem with caret is that you don't want the escaping method used for weird characters in strings to interact with commonly-used characters in code.  Because code is often carried in strings (or molded to it, etc.)  It's best if caret occurrences are few and far-between, but literals would be a lot of places.  You've got to diversify your escaping mechanisms, otherwise you have to escape your escapes more often.</p>
<h2>Radical Brainstorm: Beginning And End For Quotes</h2>
<p>The other thought I had when first questioning <code>'</code>  was what if double quotes weren't used for strings, but for quoting arbitrary material literally:</p>
<pre><code>block: [isn't {Hello}]

switch first block [
    "isn't" [print {This runs}]
]
</code></pre>
<p>It would look better when quoting SET-WORD!s as <code>"foo:"</code>, and provide clearer and more visible delimiting on GROUP!s:</p>
<pre><code>code: "(
    #foo [baz bar]
    whole bunch of stuff ...
)"
</code></pre>
<p>Because it would be part of a paired delimiter, you wouldn't have to worry about nested quoted material.</p>
<p>While this is sort of "interesting" it's <em>completely</em> incompatible.  It makes you type two delimiters when a common case only required one.  And from my experiments trying using only braced-strings to see if quotes could be freed up for something else, I found the braces were far too heavy when used for <em>every</em> string.<br>
Plus the presence of two styles letting you conveniently have things like a string with a single brace <code>"{"</code>.</p>
          <p><a href="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908/1</link>
        <pubDate>Fri, 16 Nov 2018 08:26:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-908-1</guid>
        <source url="https://forum.rebol.info/t/using-apostrophes-in-names-what-happens-when-you-quote/908.rss">Using Apostrophes in Names: What Happens When You Quote?</source>
      </item>
  </channel>
</rss>
