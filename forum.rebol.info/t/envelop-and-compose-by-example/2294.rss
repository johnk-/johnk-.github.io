<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ENVELOP (and COMPOSE!) By Example</title>
    <link>https://forum.rebol.info/t/envelop-and-compose-by-example/2294</link>
    <description>Prior to splices, we were considering rethinking **append/only [a b c] [d e]** as **append [a b c] only [d e]**, where ONLY would just envelop its argument in a block.

@rgchris didn&#39;t care for the name:

[quote=&quot;rgchris, post:1, topic:1873&quot;]
Correct me if I&#39;m wrong, but this proposed ONLY function would simply create a single value cell with the block reference, which would seem pretty efficient.

It&#39;d be very easy to shim:

```
only: func [value][
    reduce [value]
]
```

I&#39;m still fond of ENVELOP over BLOCKIFY as a name. I don&#39;t think ONLY would make the cut. Naming is tricky as it is sort of a hackâ€”it&#39;s purpose is to make a block a singular value but in actuality it is creating a new value of which the old one just happens to be the only content.
[/quote]

As it happens, ONLY defined in this way stuck around for a while.  (I actually thought it had been deleted, but it turns out it was hiding as **`only*`, so just finally deleted it now!)

I agree that ENVELOP is a better and more useful name for the category of operations.  Today we have ENBLOCK and ENGROUP:

    &gt;&gt; enblock [a b c]
    == [[a b c]]

    &gt;&gt; enblock &lt;tag&gt;
    == [&lt;tag&gt;]

    &gt;&gt; engroup [a b c]
    == ([a b c])

    &gt;&gt; engroup &lt;tag&gt;
    == (&lt;tag&gt;)

But there&#39;s no generalized ENVELOP.

## &quot;Envelop by Example&quot; Seems Like an Important Construct

    &gt;&gt; something: 1020

    &gt;&gt; word: &#39;something  ; demo behavior when unbound (binding from context)

    &gt;&gt; envelop &#39;[] word
    == [something]

    &gt;&gt; envelop &#39;() word
    == (something)

    &gt;&gt; envelop &#39;@[] word  ; would work with sigil-decorated types
    == @[something]

    &gt;&gt; envelop &#39;(()) word  ; could work with nested envelopes
    == ((something))

There&#39;s a big advantage in passing in a block or group &quot;by example&quot;.  It means you can implicitly pass along a binding, which can be integrated in the same step...if that&#39;s what you want.  (The modern art of writing Ren-C code requires a lot of consciousness about the decision to use bound or unbound material.)

    &gt;&gt; eval envelop &#39;(()) word  ; quoting means no binding
    ** Error: something not defined

    &gt;&gt; eval envelop $(()) word  ; if binding passed in, it&#39;s used
    == 1020

ENVELOP might even support [Synthetic Asymmetric Delimiters](https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893)

    &gt;&gt; envelop &#39;(| |) word
    == (| something |)

    &gt;&gt; envelop &#39;(|) word  ; shorthand--assume paired?
    == (| something |)

    &gt;&gt; envelop &#39;(&lt;*&gt;) word  ; maybe not assume, for COMPOSE marker compatibility
    == (&lt;*&gt; something)


## ENGROUP and ENBLOCK Still Useful

I do think that ENGROUP and ENBLOCK as specializations of ENVELOP turn out to be what you&#39;ll use at least 90% of the time...so they&#39;re worth having around.

But as arity-1 functions, the returned block or group would be unbound at its tip.  So you&#39;d have to use the ENVELOP-by-example to pass in a binding.

## This Overlaps [the MORPH Proposal](https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334) Somewhat

MORPH has the ability to change the decorations on the value you&#39;re passing in, whereas ENVELOP would assume you wanted the item as-is, just enclosed in some other stuff.

My instinct is to say that this takes the pressure off MORPH to be all things to all people... vs. the idea that we don&#39;t need ENVELOP and it should just become a subfeature of morph.  But I dunno.</description>
    
    <lastBuildDate>Wed, 20 Nov 2024 00:32:38 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/envelop-and-compose-by-example/2294.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ENVELOP (and COMPOSE!) By Example</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I went ahead and did the transition to arity-2 COMPOSE, so I could see the effects.</p>
<p>Since bootstrap needs to still work, I needed to have a name for the arity-1 version, and I called it <strong><code>compose1</code></strong>  <em>Which actually isn't a terrible name for the arity-1 version.</em>  Maybe <strong><code>compose-1</code></strong> would separate the <strong>e</strong> and the <strong>1</strong> a little better, but it also adds noise.</p>
<p>There's also the possibility of <strong><code>compose*</code></strong>, though adding a star usually means "lower level version".  But more generally it could be argued that it's a "special version".</p>
<p>What its doing is actually:</p>
<pre><code>compose1 list
=&gt;
compose (inside list '()) list
</code></pre>
<p>So maybe calling it <strong><code>compose-inside</code></strong> would be more informative, but that wouldn't tell you that you were using groups, so it's <strong><code>compose-groups-inside</code></strong>...</p>
<aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2294">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Stealing the binding from the tip of the block you're composing and using that in the slots is a kind of "weird backchannel". If that's what you're doing, <em>you're the weird one</em>, so maybe your code should reflect that.</p>
</blockquote>
</aside>
<p>Well, when I put it that way, <strong><code>COMPOSE*</code></strong> might be good for this.</p>
<p>Anyway, I think the competition is between calling it <strong><code>COMPOSE*</code></strong> or <strong><code>COMPOSE1</code></strong></p>
<p>If we had <a href="https://forum.rebol.info/t/dialecting-function-calls-new-weird-powerful/2310">CHAIN! dialecting</a>, it might permit:</p>
<pre><code>&gt;&gt; compose [a (1 + 2) b]
== [a 3 b]

&gt;&gt; compose:${{}} [(a) {{1 + 2}} {b}]
== [(a) 3 {b}]
</code></pre>
<p>But that feature is very speculative, and binding issues may make it non-feasible.</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="5" data-topic="2294">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But, It Would Drive The "Noise" Level Higher...</p>
<p>Some (like <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a>) do not like symbols in code at all.</p>
<p>Having COMPOSE frequently instantiated as <strong><code>compose $() [...]</code></strong> would be a thorn. (Though as I've stated, I think you really should be doing <strong><code>compose $() '[...]</code></strong> much more than one would think).</p>
</blockquote>
</aside>
<p><strong>This is a pretty tough call, but I think I'm on the side of saying that COMPOSE should be arity-2.</strong></p>
<p>Beyond the necessity of providing a binding environment when you want to apply COMPOSE to strings, I'm seeing too many places where an arity-1 COMPOSE <em>can't</em> do what you want.</p>
<p>I also feel like taking away the assumption of COMPOSE being groups is good--it's not groups, it's the pattern you choose.  I like <strong><code>{{...}}</code></strong> because at least now, that has no meaning and stands out a lot better.</p>
<p><strong>The harsh reality is that to really make things work... binding has to be thrust into the awareness of those who are building and composing code.</strong></p>
<p>Being able to evaluate templated code groups (or blocks, or fences...) in an environment that is different than the environment of the surrounding code is not something that has been easy before.</p>
<p>But I think it's foundational--and as I've said, the most common surrounding context is likely <em>no</em> context... with the intention of inheriting the meaning from wherever you are putting the composed code.</p>
          <p><a href="https://forum.rebol.info/t/envelop-and-compose-by-example/2294/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/envelop-and-compose-by-example/2294/6</link>
        <pubDate>Wed, 20 Nov 2024 00:32:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2294-6</guid>
        <source url="https://forum.rebol.info/t/envelop-and-compose-by-example/2294.rss">ENVELOP (and COMPOSE!) By Example</source>
      </item>
      <item>
        <title>ENVELOP (and COMPOSE!) By Example</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="2294">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Let's bring back an old term...and call it COMBINE.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; code: combine $() '[x + (var)]
== [x + y]  ; worked even though we passed in an unbound block!

&gt;&gt; eval compose [let x: 10 let y: 20 (as group! code)]
== 30
</code></pre>
<p>...Old COMPOSE Is Still Useful Day-To-Day</p>
<p>It's useful enough to keep its name, and do what it does. It works out a lot of the time.</p>
</blockquote>
</aside>
<p>So I've been stressing over the mental overhead of having two constructs, instead of just one.</p>
<h2><a name="p-7912-one-big-advantage-of-arity-2-compose-1" class="anchor" href="https://forum.rebol.info#p-7912-one-big-advantage-of-arity-2-compose-1"></a>One Big Advantage of ARITY-2 COMPOSE</h2>
<p>It's hard to think of a name for string interpolation, and expanding the scope of COMPOSE's powers seems like it would be a fit.</p>
<p>But that would <em>always</em> need you to give some capture of context as a parameter.</p>
<pre><code> &gt;&gt; compose $() "Strings (pick [do don't] 2) have binding"
 == "Strings don't have binding"
</code></pre>
<h2><a name="p-7912-composing-unbound-material-should-be-common-2" class="anchor" href="https://forum.rebol.info#p-7912-composing-unbound-material-should-be-common-2"></a>Composing Unbound Material Should Be Common</h2>
<p>In the modern binding model, unbound code is very much the default currency.</p>
<p>Many COMPOSEs should probably be making unbound material, and just aren't.  While we're getting away with not doing it, I think that's kind of accidental (and increasingly I've been running into problems where bound compose results are messing things up).</p>
<h2><a name="p-7912-would-stress-that-you-have-a-choice-3" class="anchor" href="https://forum.rebol.info#p-7912-would-stress-that-you-have-a-choice-3"></a>Would Stress That You Have a Choice</h2>
<p>If parentheses aren't the best choice for your situation, you can pick something else.</p>
<pre><code>&gt;&gt; compose ${{}} [{a} (b) [c] {{first [&lt;d&gt; #Z]}} {e}]
== [{a} (b) [c] &lt;d&gt; {e}]
</code></pre>
<h2><a name="p-7912-a-refinement-would-be-wordy-4" class="anchor" href="https://forum.rebol.info#p-7912-a-refinement-would-be-wordy-4"></a>A Refinement Would Be Wordy</h2>
<p>I'm questioning trying to differentiate the operations with a name difference (COMBINE vs. COMPOSE).  That's confusing.</p>
<p>A refinement makes more sense.  But even in the ideal case (where refinements are moved to the head) we'd have:</p>
<pre><code>compose:with $() [...]
</code></pre>
<p>And I don't know that ":WITH" is the best name, it acts as if it's adding something vs. overriding a default.  More honestly it would be:</p>
<pre><code>compose:pattern $() [...]
</code></pre>
<h2><a name="p-7912-weird-semantics-5" class="anchor" href="https://forum.rebol.info#p-7912-weird-semantics-5"></a>Weird Semantics...</h2>
<p>The behavior of stealing the binding from the block means that understanding COMPOSE as a specialization with $() is wrong.</p>
<p>Stealing the binding from the tip of the block you're composing and using that in the slots is a kind of "weird backchannel".  If that's what you're doing, <em>you're the weird one</em>, so maybe your code should reflect that.</p>
<h1><a name="p-7912-but-it-would-drive-the-noise-level-higher-6" class="anchor" href="https://forum.rebol.info#p-7912-but-it-would-drive-the-noise-level-higher-6"></a>But, It Would Drive The "Noise" Level Higher</h1>
<p>Some (like <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a>) do not like symbols in code at all.</p>
<p>Having COMPOSE frequently instantiated as <strong><code>compose $() [...]</code></strong>  would be a thorn.  (Though as I've stated, I think you really should be doing <strong><code>compose $() '[...]</code></strong> much more than one would think).</p>
<p>And it is unfortunate that you need the $ to get the binding and suppress evaluation, plus you might think that would act on the pattern <strong><code>[... $(...) ...]</code></strong></p>
<p>But the game here is getting correctness.  And it seems to me that if you give people a powerful fundamental, they can adapt and specialize it to do whatever they want, under any name they want.</p>
<h2><a name="p-7912-should-sneaky-capture-be-the-default-7" class="anchor" href="https://forum.rebol.info#p-7912-should-sneaky-capture-be-the-default-7"></a>Should "Sneaky" Capture Be The Default?</h2>
<p>For COMPOSE to work with strings it either needs to take a pattern parameter, or be one of the sneaky constructs that uses the current context by default.</p>
<p>If it shifted to the "sneaky" behavior, then it would be more useful on unbound blocks:</p>
<pre><code>&gt;&gt; x: 10, compose '[a b (x + 1) c d]
== [a b 11 c d]

&gt;&gt; x: 10, compose "a b (x + 1) c d"
== [a b 11 c d]
</code></pre>
<p>But if you move code that says <strong><code>compose block</code></strong> from point A to point B, then you will be changing what it uses for its scope.  The same would be true of moving <strong><code>compose $() block</code></strong>, but at least there you can see the capturing construct... the <strong><code>$()</code></strong> should (?) call your attention to it.</p>
<hr>
<h1><a name="p-7912-i-think-my-biases-lead-me-to-arity-2-8" class="anchor" href="https://forum.rebol.info#p-7912-i-think-my-biases-lead-me-to-arity-2-8"></a>I Think My Biases Lead Me To Arity-2</h1>
<p>Looking at all the angles here, I just don't think it's that much of an imposition to pass the pattern.  And you live in a murky binding world if you don't.</p>
<p>If you are writing enough code where the <strong><code>compose $() [...]</code></strong> pattern is frequent enough to get on your nerves, then there are probably other ways you can attack that repetition that are even larger scale than just specializing that bit out.</p>
          <p><a href="https://forum.rebol.info/t/envelop-and-compose-by-example/2294/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/envelop-and-compose-by-example/2294/5</link>
        <pubDate>Mon, 18 Nov 2024 19:16:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2294-5</guid>
        <source url="https://forum.rebol.info/t/envelop-and-compose-by-example/2294.rss">ENVELOP (and COMPOSE!) By Example</source>
      </item>
      <item>
        <title>ENVELOP (and COMPOSE!) By Example</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2294">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This is all quite cool. Agree, <a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a>?</p>
</blockquote>
</aside>
<p>Yep, this looks good!</p>
<p>(Not sure how happy I am with bindings on sigils, though. That feels like it may open up the same can of worms as bindings on strings do.)</p>
          <p><a href="https://forum.rebol.info/t/envelop-and-compose-by-example/2294/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/envelop-and-compose-by-example/2294/4</link>
        <pubDate>Tue, 24 Sep 2024 01:14:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2294-4</guid>
        <source url="https://forum.rebol.info/t/envelop-and-compose-by-example/2294.rss">ENVELOP (and COMPOSE!) By Example</source>
      </item>
      <item>
        <title>ENVELOP (and COMPOSE!) By Example</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2294">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; code: combine $() '[x + (var)]
== [x + y]  ; worked even though we passed in an unbound block!
</code></pre>
</blockquote>
</aside>
<p>There's a bit of a missed opportunity here with being able to use sigils for COMBINE...to say the sigil is enough, you don't need a list:</p>
<pre><code>&gt;&gt; var: 'x

&gt;&gt; combine '$ '[x + $var]
== [x + y]  ; unbound
</code></pre>
<p>Besides letting you avoid lists, it could be useful with lists when you want to generalize the same compose operation across GROUP!s and BLOCK!s (and FENCE!s)</p>
<pre><code>&gt;&gt; combine '@ '[[some stuff] @[spread [a b]] (other stuff) @(reverse [c d])]
== [[some stuff] a b (other stuff) [d c]]
</code></pre>
<p>There's no binding, so it won't work.  BUT I WANT IT!  <img src="https://forum.rebol.info/images/emoji/twitter/pouting_cat.png?v=12" title=":pouting_cat:" class="emoji" alt=":pouting_cat:" loading="lazy" width="20" height="20"></p>
<h2><a name="p-7762-could-sigils-carry-a-context-like-an-any-list-can-1" class="anchor" href="https://forum.rebol.info#p-7762-could-sigils-carry-a-context-like-an-any-list-can-1"></a>Could SIGIL!s Carry a Context, like an ANY-LIST Can?</h2>
<p>It wouldn't necessarily be hard to give them list-like properties of carrying contexts, but getting the binding on them would be annoying:</p>
<pre><code>&gt;&gt; combine (inside [] '$) '[x + $var]
== [x + y]  ; unbound
</code></pre>
<p>Could <code>$$</code> mean "bind the $ sigil", and <code>$@</code> mean bind the <code>@</code> sigil, etc?</p>
<pre><code>&gt;&gt; $$
== $  ; bound

&gt;&gt; combine $$ '[x + $var]
== [x + y]  ; unbound
</code></pre>
<p>That could work, with $$ being its own SIGIL! with this particularly strange behavior.</p>
<p>Note that $ being a WORD! (which it shouldn't/can't) would likely not help--because words do not today store "contexts"/"specifiers".  Once they are bound, they are glued to the thing they are bound to...this is a performance point, because it means each fetch of a bound word doesn't have to look it up again.  Only the binding process itself does the lookup for words.  So leveraging the "not a word" nature of SIGIL! to have a weird property like being able to store contexts might make their strangeness useful vs. just strange.</p>
<p>I am having a hard time thinking about how it would fit into a more general mechanic... I don't know that implies <strong><code>$$word</code></strong> and <strong><code>$$block</code></strong> etc. would need to exist, and I'm 99% sure I don't want them to.</p>
<p>But maybe just being a magical outlier is all right.  It is called "SIGIL" after all:</p>
<blockquote>
<p>A <strong>sigil</strong> (/ËˆsÉªdÊ’Éªl/) is a type of symbol used in magic. The term usually refers to a pictorial signature of a deity or spirit (such as an angel or demon. In modern usage, especially in the context of chaos magic, a sigil refers to a symbolic representation of the practitioner's desired outcome.</p>
</blockquote>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/1e48053a72b28f541530f40fb06fa17973ef7122.jpeg" data-download-href="https://forum.rebol.info/uploads/default/1e48053a72b28f541530f40fb06fa17973ef7122" title="Heptameron_magic_circle"><img src="https://forum.rebol.info/uploads/default/optimized/1X/1e48053a72b28f541530f40fb06fa17973ef7122_2_259x250.jpeg" alt="Heptameron_magic_circle" data-base62-sha1="4jSCSNo1ndqkp8DwwHr3yrMrxEC" width="259" height="250" srcset="https://forum.rebol.info/uploads/default/optimized/1X/1e48053a72b28f541530f40fb06fa17973ef7122_2_259x250.jpeg, https://forum.rebol.info/uploads/default/optimized/1X/1e48053a72b28f541530f40fb06fa17973ef7122_2_388x375.jpeg 1.5x, https://forum.rebol.info/uploads/default/optimized/1X/1e48053a72b28f541530f40fb06fa17973ef7122_2_518x500.jpeg 2x" data-dominant-color="D3D3D3"></a></div><p></p>
          <p><a href="https://forum.rebol.info/t/envelop-and-compose-by-example/2294/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/envelop-and-compose-by-example/2294/3</link>
        <pubDate>Mon, 23 Sep 2024 16:47:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2294-3</guid>
        <source url="https://forum.rebol.info/t/envelop-and-compose-by-example/2294.rss">ENVELOP (and COMPOSE!) By Example</source>
      </item>
      <item>
        <title>ENVELOP (and COMPOSE!) By Example</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2294">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But as arity-1 functions, the returned block or group would be unbound at its tip. So you'd have to use the ENVELOP-by-example to pass in a binding.</p>
</blockquote>
</aside>
<p>I have realized that this is an incredibly useful ability...</p>
<p>...but even more importantly...</p>
<h2><a name="p-7761-the-binding-aspect-motivates-compose-by-example-1" class="anchor" href="https://forum.rebol.info#p-7761-the-binding-aspect-motivates-compose-by-example-1"></a>The Binding Aspect Motivates <strong>COMPOSE-by-Example</strong></h2>
<p>Since today's COMPOSE is arity-1, to get it to work at all you have to run it on a bound block (assuming the nested groups you're composing aren't somehow already bound).  The tip of the binding of that block is what COMPOSE sloppily borrows to use when evaluating the inner groups.</p>
<pre><code>&gt;&gt; x: 1, y: 2  ; let's say these are incidental definitions

&gt;&gt; var: 'y

&gt;&gt; code: compose '[x + (var)]
** Error: var is not bound

&gt;&gt; code: compose [x + (var)]  ; eval'd BLOCK! binds, compose borrows that binding
== [x + y]  ; but the result tip still has the binding

&gt;&gt; eval compose [let x: 10 let y: 20 (as group! code)]
== 3  ; let's say this is not what I meant
</code></pre>
<p>If you didn't want the final result of a COMPOSE to be unbound, you still have to bind the block long enough for compose to find the bindings...and then unbind it.</p>
<p>Not only is that awkward, what if you had a meaningful binding on the input you wanted to keep.  You'd have to store the binding somehow... bind to the context for your groups long enough for the compose to work, then rebind it to the stored binding...</p>
<h2><a name="p-7761-compose-by-example-can-fix-this-smiley-2" class="anchor" href="https://forum.rebol.info#p-7761-compose-by-example-can-fix-this-smiley-2"></a>Compose-By-Example Can Fix This!  <img src="https://forum.rebol.info/images/emoji/twitter/smiley.png?v=12" title=":smiley:" class="emoji" alt=":smiley:" loading="lazy" width="20" height="20"></h2>
<p>Let's bring back an old term...and call it COMBINE.</p>
<pre><code>&gt;&gt; code: combine $() '[x + (var)]
== [x + y]  ; worked even though we passed in an unbound block!

&gt;&gt; eval compose [let x: 10 let y: 20 (as group! code)]
== 30
</code></pre>
<p>So not only do you get the freedom to specify what delimiters (or synthetic/nested delimiters) you want to use, you can also supply an arbitrary binding.</p>
<h2><a name="p-7761-old-compose-is-still-useful-day-to-day-3" class="anchor" href="https://forum.rebol.info#p-7761-old-compose-is-still-useful-day-to-day-3"></a>Old COMPOSE Is Still Useful Day-To-Day</h2>
<p>It's useful enough to keep its name, and do what it does.  It works out a lot of the time.</p>
<p>But the strange thing here is that COMPOSE wouldn't just be a specialization of COMBINE with an unbound group <strong><code>'()</code></strong>.  I think that would imply leaving the bindings on the groups as-is, not stealing the binding off of the other argument.</p>
<p>So COMPOSE would likely instead be an adaptation of COMBINE that would take the binding off of the thing you passed it, and put it onto the "example".  Let's say the two arguments to COMBINE are PATTERN and TEMPLATE (<a href="https://forum.rebol.info/t/generalized-argument-removal-specialize-relax/2297">see post on <strong><code>specialize:relax</code></strong></a>):</p>
<pre><code>compose: adapt (specialize:relax get $combine [
    pattern: ~&lt;removed from interface (ADAPT phase fills in)&gt;~
]) [
    pattern: inside template '()
]
</code></pre>
<p>This is all quite cool.  Agree, <a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a>?</p>
          <p><a href="https://forum.rebol.info/t/envelop-and-compose-by-example/2294/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/envelop-and-compose-by-example/2294/2</link>
        <pubDate>Mon, 23 Sep 2024 16:23:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2294-2</guid>
        <source url="https://forum.rebol.info/t/envelop-and-compose-by-example/2294.rss">ENVELOP (and COMPOSE!) By Example</source>
      </item>
      <item>
        <title>ENVELOP (and COMPOSE!) By Example</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Prior to splices, we were considering rethinking <strong>append/only [a b c] [d e]</strong> as <strong>append [a b c] only [d e]</strong>, where ONLY would just envelop its argument in a block.</p>
<p><a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> didn't care for the name:</p>
<aside class="quote no-group" data-username="rgchris" data-post="1" data-topic="1873">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"><a href="https://forum.rebol.info/t/1873/1">On another topic</a></div>
<blockquote>
<p>Correct me if I'm wrong, but this proposed ONLY function would simply create a single value cell with the block reference, which would seem pretty efficient.</p>
<p>It'd be very easy to shim:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">only: func [value][
    reduce [value]
]
</code></pre>
<p>I'm still fond of ENVELOP over BLOCKIFY as a name. I don't think ONLY would make the cut. Naming is tricky as it is sort of a hackâ€”it's purpose is to make a block a singular value but in actuality it is creating a new value of which the old one just happens to be the only content.</p>
</blockquote>
</aside>
<p>As it happens, ONLY defined in this way stuck around for a while.  (I actually thought it had been deleted, but it turns out it was hiding as **<code>only*</code>, so just finally deleted it now!)</p>
<p>I agree that ENVELOP is a better and more useful name for the category of operations.  Today we have ENBLOCK and ENGROUP:</p>
<pre><code>&gt;&gt; enblock [a b c]
== [[a b c]]

&gt;&gt; enblock &lt;tag&gt;
== [&lt;tag&gt;]

&gt;&gt; engroup [a b c]
== ([a b c])

&gt;&gt; engroup &lt;tag&gt;
== (&lt;tag&gt;)
</code></pre>
<p>But there's no generalized ENVELOP.</p>
<h2><a name="p-7757-envelop-by-example-seems-like-an-important-construct-1" class="anchor" href="https://forum.rebol.info#p-7757-envelop-by-example-seems-like-an-important-construct-1"></a>"Envelop by Example" Seems Like an Important Construct</h2>
<pre><code>&gt;&gt; something: 1020

&gt;&gt; word: 'something  ; demo behavior when unbound (binding from context)

&gt;&gt; envelop '[] word
== [something]

&gt;&gt; envelop '() word
== (something)

&gt;&gt; envelop '@[] word  ; would work with sigil-decorated types
== @[something]

&gt;&gt; envelop '(()) word  ; could work with nested envelopes
== ((something))
</code></pre>
<p>There's a big advantage in passing in a block or group "by example".  It means you can implicitly pass along a binding, which can be integrated in the same step...if that's what you want.  (The modern art of writing Ren-C code requires a lot of consciousness about the decision to use bound or unbound material.)</p>
<pre><code>&gt;&gt; eval envelop '(()) word  ; quoting means no binding
** Error: something not defined

&gt;&gt; eval envelop $(()) word  ; if binding passed in, it's used
== 1020
</code></pre>
<p>ENVELOP might even support <a href="https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893">Synthetic Asymmetric Delimiters</a></p>
<pre><code>&gt;&gt; envelop '(| |) word
== (| something |)

&gt;&gt; envelop '(|) word  ; shorthand--assume paired?
== (| something |)

&gt;&gt; envelop '(&lt;*&gt;) word  ; maybe not assume, for COMPOSE marker compatibility
== (&lt;*&gt; something)
</code></pre>
<h2><a name="p-7757-engroup-and-enblock-still-useful-2" class="anchor" href="https://forum.rebol.info#p-7757-engroup-and-enblock-still-useful-2"></a>ENGROUP and ENBLOCK Still Useful</h2>
<p>I do think that ENGROUP and ENBLOCK as specializations of ENVELOP turn out to be what you'll use at least 90% of the time...so they're worth having around.</p>
<p>But as arity-1 functions, the returned block or group would be unbound at its tip.  So you'd have to use the ENVELOP-by-example to pass in a binding.</p>
<h2><a name="p-7757-this-overlaps-the-morph-proposalhttpsforumrebolinfotsetify-plainify-getify-symify-or-morph1334-somewhat-3" class="anchor" href="https://forum.rebol.info#p-7757-this-overlaps-the-morph-proposalhttpsforumrebolinfotsetify-plainify-getify-symify-or-morph1334-somewhat-3"></a>This Overlaps <a href="https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334">the MORPH Proposal</a> Somewhat</h2>
<p>MORPH has the ability to change the decorations on the value you're passing in, whereas ENVELOP would assume you wanted the item as-is, just enclosed in some other stuff.</p>
<p>My instinct is to say that this takes the pressure off MORPH to be all things to all people... vs. the idea that we don't need ENVELOP and it should just become a subfeature of morph.  But I dunno.</p>
          <p><a href="https://forum.rebol.info/t/envelop-and-compose-by-example/2294/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/envelop-and-compose-by-example/2294/1</link>
        <pubDate>Mon, 23 Sep 2024 12:43:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2294-1</guid>
        <source url="https://forum.rebol.info/t/envelop-and-compose-by-example/2294.rss">ENVELOP (and COMPOSE!) By Example</source>
      </item>
  </channel>
</rss>
