<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Wrapping And Forwarding Multi-Returns</title>
    <link>https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926</link>
    <description>[quote=&quot;hostilefork, post:1, topic:1134&quot;]
It seemed clearly preferable that rather than choose between **[x]:** and **[x y]:** and knowing in advance how many values you&#39;re taking or throwing away... someone who only asked for one value should be able to be blissfully ignorant. So the choice would be between:

    &gt;&gt; x: multi-return ...
    &gt;&gt; [x y]: multi-return ...

Even though the first case is a multiple return, you wouldn&#39;t set x to a block of values, *but just get the first value*. An interface like this would also solve the issue of returning NULL.
[/quote]

Yup, sounds really useful.

One question, what do functions see? 

    f: function [a][]
    f multi-return

Does f get the return as a block, or the first value?

What happens with multiple parameters in f? With refinements? With variadics? When f is enfixed?</description>
    
    <lastBuildDate>Thu, 22 Jun 2023 15:42:17 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Wrapping And Forwarding Multi-Returns</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1926">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><em>I'm concerned this could lead to counter-intuitive situations</em>, where this would be a multi-return:</p>
<pre><code> return some-function
</code></pre>
<p>...whereas this seemingly-innocent transformation would turn the code into a mono-return:</p>
<pre><code>x: some-function
return x
</code></pre>
<p>It feels like you'd want <em>some</em> kind of signal before having these act differently.</p>
</blockquote>
</aside>
<p>What I've tried for a while to address this was to add a /FORWARD refinement to RETURN.  If you don't use the refinement then it decays to just one value.  (This decay also means raised errors decay to trigger actual runtime failures, etc.)</p>
<p>But this adds a creeping complexity, where the concern starts showing up other places.  If you're doing a CATCH with a THROW, do you need THROW/FORWARD?</p>
<p>By contrast, the approach of assuming you want forwarding in such constructs lets you use a common DECAY primitive without contaminating them all with extra refinements.  In the scheme of things, I'm not sure that an accidental leakage of multi-return information is obviously a worse default than the accidental loss of multi-return function.</p>
<p>There may be ways that a type signature can help here: if your RETURN: spec says you return an integer and you try to return a PACK!, it could automatically decay and type check the decayed form.  (Though this wouldn't apply to the likes of CATCH and THROW, so that should be kept in mind.)</p>
<p>As for the decay on assignment... <em>it may come down to making people comfortable with the idea that if you go through a non-meta assignment to a single variable you may lose information.</em>  You always have to read <strong>x: some-function</strong> as <strong>x: decay some-function</strong> and appreciate that potential for data loss.   If you don't want to lose data:</p>
<pre><code>x: meta some-function
return unmeta x
</code></pre>
          <p><a href="https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926/4</link>
        <pubDate>Thu, 22 Jun 2023 15:42:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1926-4</guid>
        <source url="https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926.rss">Wrapping And Forwarding Multi-Returns</source>
      </item>
      <item>
        <title>Wrapping And Forwarding Multi-Returns</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>That was six questions.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p><strong>UPDATE: The compacted history of multi-returns answers how it evolved from a hacked prototype into the isotopic PACK! solution of today... people should read it!</strong></p>
<aside class="quote quote-modified" data-post="1" data-topic="1134">
  <div class="title">
    <div class="quote-controls"></div>
    <img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/the-history-of-multi-return-in-ren-c/1134">The History of Multi-Return in Ren-C</a> <a class="badge-wrapper  bullet" href="https://forum.rebol.info/c/development/functions/59"><span class="badge-category-parent-bg" style="background-color: #25AAE2;"></span><span class="badge-category-bg" style="background-color: #25AAE2;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Discussions of Functions and Generators, e.g. how things like RETURN work... or the mechanics of generators and composers like ADAPT, SPECIALIZE, ENCLOSE, HIJACK, etc.">Functions</span></a>
  </div>
  <blockquote>
    This thread merges discussions of history across several threads to cover the key points, starting with material from the post announcing the addition of the SET-BLOCK! and GET-BLOCK!...and then folding in important points from later posts in the relative chronology of when they happened.  So it's broken up into sections by approximate date. 

March 2019: SET-BLOCK! and GET-BLOCK! Added
These were generic parts which you could use in dialects however you wanted...just like other types. 
But a keâ€¦
  </blockquote>
</aside>

<h2>
<a name="a-huge-question-forwarding-1" class="anchor" href="https://forum.rebol.info#a-huge-question-forwarding-1"></a>A Huge Question: Forwarding</h2>
<aside class="quote no-group" data-username="IngoHohmann" data-post="1" data-topic="1926">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<pre><code>f: function [a][]
f multi-return
</code></pre>
<p>Does f get the return as a block, or the first value?</p>
</blockquote>
</aside>
<p>Retroactively summing up the answer to this is that since <strong><code>a</code></strong> is an ordinary parameter, the PACK! isotope would "decay" and it would only receive the first value.  But if it was a meta-parameter as <strong><code>^a</code></strong> it would get a quasi-block containing all the multi-returns.</p>
<p>But what kind of argument does RETURN take.  Does it take its return value as ^META and forward the multi-return values, or does it "decay"?</p>
<pre><code>my-wrapper: func [arg1 arg2] [
     return multi-return arg1 arg2
]
</code></pre>
<p>It might seem nice to have the wrapper forward the returns by default, and use an explicit request to decay if that was not desired:</p>
<pre><code>multi-wrapper: func [arg1 arg2] [
    return multi-return arg1 arg2  ; returns PACK! isotope
]

mono-wrapper: func [arg1 arg2] [
    return decay multi-return arg1 arg2  ; just returns first PACK! item
]
</code></pre>
<p><em>But I'm concerned this could lead to counter-intuitive situations</em>, where this would be a multi-return:</p>
<pre><code> return some-function
</code></pre>
<p>...whereas this seemingly-innocent transformation would turn the code into a mono-return:</p>
<pre><code> x: some-function
 return x
</code></pre>
<p>It feels like you'd want <em>some</em> kind of signal before having these act differently.</p>
          <p><a href="https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926/2</link>
        <pubDate>Tue, 07 Apr 2020 16:52:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1926-2</guid>
        <source url="https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926.rss">Wrapping And Forwarding Multi-Returns</source>
      </item>
      <item>
        <title>Wrapping And Forwarding Multi-Returns</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1134">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/the-history-of-multi-return-in-ren-c/1134/1">The History of Multi-Return in Ren-C</a>
</div>
<blockquote>
<p>It seemed clearly preferable that rather than choose between <strong>[x]:</strong> and <strong>[x y]:</strong> and knowing in advance how many values you're taking or throwing away... someone who only asked for one value should be able to be blissfully ignorant. So the choice would be between:</p>
<pre><code>&gt;&gt; x: multi-return ...
&gt;&gt; [x y]: multi-return ...
</code></pre>
<p>Even though the first case is a multiple return, you wouldn't set x to a block of values, <em>but just get the first value</em>. An interface like this would also solve the issue of returning NULL.</p>
</blockquote>
</aside>
<p>Yup, sounds really useful.</p>
<p>One question, what do functions see?</p>
<pre><code>f: function [a][]
f multi-return
</code></pre>
<p>Does f get the return as a block, or the first value?</p>
<p>What happens with multiple parameters in f? With refinements? With variadics? When f is enfixed?</p>
          <p><a href="https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926/1</link>
        <pubDate>Thu, 28 Mar 2019 06:09:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1926-1</guid>
        <source url="https://forum.rebol.info/t/wrapping-and-forwarding-multi-returns/1926.rss">Wrapping And Forwarding Multi-Returns</source>
      </item>
  </channel>
</rss>
