<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How Console Displays Things With No Literal Representation</title>
    <link>https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096</link>
    <description>It&#39;s tricky to think of what to do to print out things that don&#39;t have representation.

For example, isotopes (&quot;antiforms&quot;) don&#39;t have representations and cannot be molded. (For a proposal of the exception of MOLD of splices, see **[MOLD/ONLY vs spread](https://forum.rebol.info/t/mold-only-vs-mold-spread/2059)**)

So what&#39;s traditionally been done is just render it as a quasiform (so the tilde at the beginning hints something its up), and then add a comment at the end of the rendering.

If the [renaming of &quot;isotope&quot; to &quot;anti&quot; were taken](https://forum.rebol.info/t/quasiforms-stable-unstable-isotopes-simpler-terminology/2005/7?u=hostilefork), this would look like:

    &gt;&gt; anti &#39;null
    == ~null~  ; anti

The representational issue is a bit of a thorn in the console, but you have to print something. (Well, unless it&#39;s a void, where printing nothing is the design.)</description>
    
    <lastBuildDate>Tue, 09 Jan 2024 01:43:21 +0000</lastBuildDate>
    <category>Console</category>
    <atom:link href="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How Console Displays Things With No Literal Representation</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="https://forum.rebol.info/t/why-is-type-of-1-an-integer-and-not-integer/2097">Why is TYPE OF 1 an &amp;INTEGER and not INTEGER!</a></p>
          <p><a href="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/5</link>
        <pubDate>Tue, 09 Jan 2024 01:45:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2096-5</guid>
        <source url="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096.rss">How Console Displays Things With No Literal Representation</source>
      </item>
      <item>
        <title>How Console Displays Things With No Literal Representation</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2096">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Avoiding that direction and having the console endorsing giving back things that evaluate to the result is another idea</p>
</blockquote>
</aside>
<p>This could work if done systematically… but then, you have to consider that you’re no longer looking at the result of your evaluation, but something <em>which evaluates to the result</em>. That feels confusing.</p>
<p>I think there’s a reasonable compromise similar to what is done now: show the literal form of the value if it has one, otherwise give back code which evaluates to that value. That would be unambiguous and consistent, but still easy to read.</p>
          <p><a href="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/4</link>
        <pubDate>Tue, 09 Jan 2024 01:03:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2096-4</guid>
        <source url="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096.rss">How Console Displays Things With No Literal Representation</source>
      </item>
      <item>
        <title>How Console Displays Things With No Literal Representation</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Among things that have historically lacked literal forms are objects, so giving back code is what it has done:</p>
<pre><code>&gt;&gt; make object! [a: 10 b: 20]
== make object! [a: 10 b: 20]
</code></pre>
<p>The idea that all things need literal forms gave rise to "construction syntax", which was a series of proposals going in this direction:</p>
<pre><code>&gt;&gt; make object! [a: 10 b: 20]
== #[object! [a: 10 b: 20]]
</code></pre>
<p>Avoiding that direction and having the console endorsing giving back things that evaluate to the result is another idea:</p>
<pre><code>&gt;&gt; first [a b c]
== 'a

&gt;&gt; any [1 &gt; 2, 3 &gt; 4]
== ~null~
</code></pre>
<p>But would be confusing if you didn't do it systemically, e.g. left the quote off of inert things:</p>
<pre><code>&gt;&gt; first [[a b] c d]
== [a b]

&gt;&gt; first ['[a b] c d]
== ''[a b]
</code></pre>
<p>So I think the quote would probably need to always be there... and maybe people would get used to it to the point it would be acceptable.  Generic quoting opens the door to it being an option.</p>
<pre><code>&gt;&gt; print "Void outputs should still be skipped, probably?"
Void outputs should still be skipped, probably?
== '

&gt;&gt;
</code></pre>
          <p><a href="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/3</link>
        <pubDate>Tue, 09 Jan 2024 00:07:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2096-3</guid>
        <source url="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096.rss">How Console Displays Things With No Literal Representation</source>
      </item>
      <item>
        <title>How Console Displays Things With No Literal Representation</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's tricky to think of what to do to print out things that don't have representation.</p>
<p>For example, isotopes ("antiforms") don't have representations and cannot be molded. (For a proposal of the exception of MOLD of splices, see <strong><a href="https://forum.rebol.info/t/mold-only-vs-mold-spread/2059">MOLD/ONLY vs spread</a></strong>)</p>
<p>So what's traditionally been done is just render it as a quasiform (so the tilde at the beginning hints something its up), and then add a comment at the end of the rendering.</p>
<p>If the <a href="https://forum.rebol.info/t/quasiforms-stable-unstable-isotopes-simpler-terminology/2005/7">renaming of "isotope" to "anti" were taken</a>, this would look like:</p>
<pre><code>&gt;&gt; anti 'null
== ~null~  ; anti
</code></pre>
<p>The representational issue is a bit of a thorn in the console, but you have to print something. (Well, unless it's a void, where printing nothing is the design.)</p>
          <p><a href="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/1</link>
        <pubDate>Mon, 08 Jan 2024 23:58:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2096-1</guid>
        <source url="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096.rss">How Console Displays Things With No Literal Representation</source>
      </item>
      <item>
        <title>How Console Displays Things With No Literal Representation</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2096">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; anti 'null
== ~null~  ; anti
</code></pre>
<p>The representational issue is a bit of a thorn in the console, but you have to print something.</p>
</blockquote>
</aside>
<p>Could it perhaps work to just print <code>anti 'null</code>? (Or <code>unmeta 'null</code>, as the case may be.) After all, they don’t really have a syntactic representation to print out in the first place.</p>
<p>For prior art, Haskell often does this kind of thing:</p>
<pre data-code-wrap="hs"><code class="lang-hs">ghci&gt; import Data.Map.Strict
ghci&gt; fromList [('a',1), ('b',2), ('c',3)]
fromList [('a',1),('b',2),('c',3)]
ghci&gt; singleton 'a' 1
fromList [('a',1)]
ghci&gt; empty
fromList []
</code></pre>
          <p><a href="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096/2</link>
        <pubDate>Mon, 08 Jan 2024 23:42:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2096-2</guid>
        <source url="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096.rss">How Console Displays Things With No Literal Representation</source>
      </item>
  </channel>
</rss>
