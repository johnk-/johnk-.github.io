<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Upcoming Datatype $WORD... What Will It Mean?</title>
    <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146</link>
    <description>Something that has been nagging at me is that I&#39;ve known I want to introduce **$WORD**, **$(GR O UP)**, **$TU.P.LE** etc. (tentative names VAR-WORD!, VAR-GROUP!, VAR-TUPLE!).

At first glance it seems like it would be a loss if $XXX didn&#39;t in the baseline evaluator evaluate to looking up environment variables.

But this would be a different behavior for an ANY-WORD!...which up until now, the type of word has not mattered.  Would it spread to SET?

    &gt;&gt; set-env &quot;SOMETHING&quot; &quot;TRUE&quot;

    &gt;&gt; SOMETHING: 10
 
    &gt;&gt; set (in [] &#39;$SOMETHING) &quot;FALSE&quot;
    == &quot;FALSE&quot;

    &gt;&gt; SOMETHING
    == 10

    &gt;&gt; get-env &quot;SOMETHING&quot;
    == &quot;FALSE&quot;

Hmmm.  Lots of issues there...including that Unix environment variables are case-sensitive, Windows ones are not.

The implementation mechanism of this would presumably have to introduce some sort of &quot;pseudo-object&quot; named `environment`/`env`, and then the &quot;specifier&quot; would have to say (in a similar way to which the &quot;.WORD&quot; lookups would say to look in a &quot;current object&quot;) that the $ words should look up in env.   *(See related discussion about [&quot;Binding Indirection&quot;](https://forum.rebol.info/t/binding-indirection/2112))*

## Simpler Thought...

A simpler thought (that doesn&#39;t rock the boat for one feature) would be that this is a bridge too far for an ANY-WORD!, and they should look up just like any other word, and it&#39;s only weird shell dialects that would think that a $WORD meant environment variables.

But then the question might be what the $ buys you.

Maybe I was too hasty in saying that the @ was the right thing to sacrifice for &quot;get variable with binding&quot;, and $ should have done that?

    &gt;&gt; $word
    == word  ; bound

    &gt;&gt; @word
    == @word  ; bound?

(A line of argumentation that `@word` should be bound, is that if you want an unbound one you can get it by quoting with `&#39;@word`, but then again if the @ operator does not bind e.g. @ foo... but $ does, e.g. $ foo.  So maybe not affecting the binding is the better choice.)

This would let us put back the @ for &quot;as-is&quot; variable usage in parse.  And it would make more sense for a thing named VAR-WORD! (bound variable in evaluator, environment var in shell dialect...)

Urrrgh.  I hate that it seems like that&#39;s probably right.  :-/   *(Thankfully, git lets us audit/reverse such decisions...assuming you&#39;re diligent about not changing too many unrelated things in one commit, which I thankfully was careful about with the @ change.)*

## Loss of $ For Weird Idea I Had

If the $ operator were used for binding that would be a bit sad, as I&#39;d kind of hoped that could be a variadic function that could run the [shell dialect](https://github.com/metaeducation/ren-c/blob/3e5f724197f55d2745436a52ca1dfa7c5d7e4db5/scripts/shell.r#L4):

    extension: &quot;txt&quot;

    $ ls -alF *.(extension)

But, maybe that&#39;s a bad way to package it in the box, and specialty scripts that don&#39;t care about a $ operator for binding purposes can override it, encouraging the more traditional:

    extension: &quot;txt&quot;

    shell [ls -alF *.(extension), echo $SOMETHING]</description>
    
    <lastBuildDate>Fri, 16 Feb 2024 23:30:28 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="10" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Currently, there is only one exception to that trend: TYPE-*, which has no particular relationship to these operations, but can modify other datatypes nonetheless. And it shows, in that the usage of TYPE-GROUP! and TYPE-BLOCK! seems fairly ad-hoc, in that it’s hard to predict from the types themselves.</p>
</blockquote>
</aside>
<p>I will willingly admit/shout that there is a whole lot of nebulous murk regarding the question of datatypes, and I am extremely open to suggestions on what to do better.</p>
<p>I made a new thread where you can solve it:</p>
<p><a href="https://forum.rebol.info/t/datatype-ugliness-less-ugly-than-history-but-can-we-do-better/2151" class="inline-onebox">Ugly Types: Less Ugly Than History, Can We Do Better?</a></p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/11</link>
        <pubDate>Fri, 16 Feb 2024 23:30:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-11</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'd thought you were somewhat convinced by the argument that being able to put sigils on array classes is sort of the "composition API" for those sigils.</p>
</blockquote>
</aside>
<p>Yes, I find this argument convincing… for those sigils which do allow composition at all. But there’s at least one which doesn’t, namely ISSUE! — we don’t see any ISSUE-BLOCK!s or anything like that. So there’s precedent for saying, ‘these sigils can’t be composed with other types because it makes no sense’.</p>
<p>From a broader perspective, I’ve been unhappy with the way some sigils combine with a specific set of types, while others only combine with one. <a href="https://forum.rebol.info/t/a-proliferation-of-word-s/2147/6">I eventually rationalised it</a> by saying that the sigils which can modify many types are those related to word-specific operations (getting/setting/binding), and the types they modify are either words or series of words.</p>
<p>Currently, there is only one exception to that trend: TYPE-*, which has no particular relationship to these operations, but can modify other datatypes nonetheless. And it shows, in that the usage of TYPE-GROUP! and TYPE-BLOCK! seems fairly ad-hoc, in that it’s hard to predict from the types themselves. And that situation makes me feel uncomfortable.</p>
<p>This is why I’m so unhappy with re-adding a whole series of ‘evaluate-to-self’ types: not only are they largely useless, they further muddy the waters by making the point of sigils even less clear. I can see only one reason to justify them, namely that they’re useful in dialects… but if ‘useful in dialects’ alone becomes sufficient reason to add new datatypes, then there’s a <a href="https://forum.rebol.info/t/a-proliferation-of-word-s/2147/3">whole bunch more</a> which we could add. And we’ve already established that adding those isn’t a great idea, largely because such types are only useful in such limited ways.</p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/10</link>
        <pubDate>Fri, 16 Feb 2024 15:33:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-10</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="8" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Like I said previously, I quite strongly believe that <code>@[block]</code> et al. should not exist, since they’re completely useless.</p>
</blockquote>
</aside>
<p>I use them.  But I may not be able to convincingly argue that the project as a whole isn't useless... so you might be in that sense right.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/cceb312ac1abc236e7d59dbb2f7b434bb3f8e47f.jpeg" data-download-href="https://forum.rebol.info/uploads/default/cceb312ac1abc236e7d59dbb2f7b434bb3f8e47f" title="1 KCXtXtfeWXS9Zmyg4Vj3DA"><img src="https://forum.rebol.info/uploads/default/optimized/1X/cceb312ac1abc236e7d59dbb2f7b434bb3f8e47f_2_287x250.jpeg" alt="1 KCXtXtfeWXS9Zmyg4Vj3DA" data-base62-sha1="teNiDDlk8IvUS6HniaWRZ0OKuLR" width="287" height="250" srcset="https://forum.rebol.info/uploads/default/optimized/1X/cceb312ac1abc236e7d59dbb2f7b434bb3f8e47f_2_287x250.jpeg, https://forum.rebol.info/uploads/default/optimized/1X/cceb312ac1abc236e7d59dbb2f7b434bb3f8e47f_2_430x375.jpeg 1.5x, https://forum.rebol.info/uploads/default/optimized/1X/cceb312ac1abc236e7d59dbb2f7b434bb3f8e47f_2_574x500.jpeg 2x" data-dominant-color="7C7978"></a></div><p></p>
<p>I'd thought you were somewhat convinced by the argument that being able to put sigils on array classes is sort of the "composition API" for those sigils.  You can't say <strong><code>@foo:</code></strong> but you can say <strong><code>@[foo:]</code></strong> and <strong><code>[@foo]:</code></strong>, and there are known mechanisms for picking those structures apart, with this extending indefinitely e.g. <strong><code>[@[@[foo:]]]:</code></strong></p>
<p>But either way... since they're useless... why don't we deal with this conundrum for now by having you not use them.  We'll put a pin in it for later discussion, after all the other problems are solved, and maybe that would be a good time to take them out.</p>
<aside class="quote no-group" data-username="bradrn" data-post="8" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Could this not take an ISSUE!? At least to me, it feels reasonable to write <code>import #library</code>.</p>
</blockquote>
</aside>
<p>Using words+paths+tuples vs. strings have advantages.  Word symbols are interned (words that are spelled the same look up to the same UTF-8 bytes in memory) which all things being equal makes storage less, comparisons faster, etc.</p>
<p>Limiting library names to what's legal in words has the advantage that you can turn that word into other forms, so if you wanted to make some dialect that mentioned libraries named by symbol you'd have those parts to manipulate.  You could use them as keys in objects, etc.</p>
<p>And that manipulation being easy is an advantage of having things like a version tuple be part of a path.  It's easier to parse because much of the parsing is already done for you, and easier to do things like compose...with the usual niceties of having the structure and checking and such all working for you:</p>
<pre><code>&gt;&gt; version: 1.1.20

&gt;&gt; first version
== 1

&gt;&gt; version.3
== 20

&gt;&gt; compose @library/(version)
== @library/1.1.20

&gt;&gt; curtail compose @library/(version) 
== @library/1.1.20


&gt;&gt; version: null
== ~null~  ; anti

&gt;&gt; compose @library/(version)
** Script Error: non-NULL value required (see MAYBE, TRY, REIFY)
** Near: [@library ** (version)]

&gt;&gt; curtail compose @library/(version) 

&gt;&gt; compose @library/(maybe version)
== @library
</code></pre>
<p><em>(See <a href="https://forum.rebol.info/t/reacting-to-definitional-errors-curtail/2118">explanation of CURTAIL</a>)</em></p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/9</link>
        <pubDate>Fri, 16 Feb 2024 08:15:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-9</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>Actually, I just had a thought…</p>
<aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's good to consider "top of the page" issues, and having a nice-looking way to import libraries seems good to me:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">import @library
</code></pre>
</blockquote>
</aside>
<p>Could this not take an ISSUE!? At least to me, it feels reasonable to write <code>import #library</code>.</p>
<hr>
<aside class="quote no-group" data-username="hostilefork" data-post="7" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The intention is to be a substitute for rebQ()-then-evaluate...where rebQ() adds a quoting level to the value when it's spliced into the va_arg instruction stream.</p>
<p>Here the API code is wishing to not influence the binding that's already on word. So if it's unbound, it should stay unbound.</p>
</blockquote>
</aside>
<p>Ah, OK. I must have gotten confused.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="7" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm a bit puzzled about whether the <code>@word</code> <code>@[block]</code> etc. should bind or not. Making them not bind in the evaluator may fall under the category of consistent-but-useless behavior. The decoration is on the value so it's already different by keeping it, so binding should probably be done too.</p>
</blockquote>
</aside>
<p>If I think of <code>@word</code> as the word-level analogue to blocks — as a value which evaluates to itself — then it makes sense for it to also bind under evaluation. Like I said previously, I quite strongly believe that <code>@[block]</code> et al. should not exist, since they’re completely useless.</p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/8</link>
        <pubDate>Fri, 16 Feb 2024 07:48:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-8</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="6" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>As far as I understand it, the intention is for <code>@ word</code> to also evaluate to bound <code>word</code>, and we’d like the two to behave the same.</p>
</blockquote>
</aside>
<p>The intention is to be a substitute for rebQ()-then-evaluate...where rebQ() adds a quoting level to the value when it's spliced into the va_arg instruction stream.</p>
<p>Here the API code is wishing to not influence the binding that's already on word.  So if it's unbound, it should stay unbound.</p>
<p>Imagining that WORD is <code>some-unbound</code>, the equivalence is:</p>
<pre><code>append word-list word  ; some-unbound shielded from exec/bind by WORD! lookup
=&gt;
do compose [append word-list '(word)]  ; shielded from exec/bind by quotation
=&gt;
rebElide("append word-list", rebQ(word));  // C var shielded by rebQ() splice w/quote
=&gt;
append word-list 'some-unbound
</code></pre>
<p>So when you substitute with the @ operator you want that same semantic, just cleaner:</p>
<pre><code>rebElide("append word-list @", word);
=&gt;
append word-list @ some-unbound
</code></pre>
<p>Hence @ definitely should not bind.</p>
<p>I'm a bit puzzled about whether the <code>@word</code> <code>@[block]</code> etc. should bind or not.  Making them not bind in the evaluator may fall under the category of consistent-but-useless behavior.  The decoration is on the value so it's already different by keeping it, so binding should probably be done too.</p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/7</link>
        <pubDate>Fri, 16 Feb 2024 07:38:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-7</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But also, I'm partial to @ meaning "next thing literally", and it's used extensively in the API. $ doesn't feel as good to me for that.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext"> rebElide("append word-list", rebQ(word));  // verbosity I'd often like to avoid

 rebElide("append word-list @", word);  // I've liked this since it was instituted

 rebElide("append word-list $", word);  // don't really like this for the purpose
</code></pre>
</blockquote>
</aside>
<p>Is this not an argument for <code>@word</code> evaluating to bound <code>word</code>? As far as I understand it, the intention is for <code>@ word</code> to also evaluate to bound <code>word</code>, and we’d like the two to behave the same.</p>
<p>But on the other hand, <code>get $var</code> does make sense, as does <code>import @library</code>. So I suppose there’s arguments for both syntactic choices.</p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/6</link>
        <pubDate>Fri, 16 Feb 2024 07:26:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-6</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="4" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>I’m rather partial to using <code>@word</code> for bound words, and would like to keep that syntax. Besides, if we want shell-like environment variables, I personally feel that fits the concept of ‘evaluates to itself’ much better than it fits ‘evaluates to a bound word’.</p>
</blockquote>
</aside>
<p>On this aesthetic choice, I lean pretty strongly the opposite way.</p>
<p>It's good to consider "top of the page" issues, and having a nice-looking way to import libraries seems good to me:</p>
<pre><code>import @library
</code></pre>
<p>Perhaps even putting in versions as @ paths:</p>
<pre><code>import @library/1.1.3
</code></pre>
<p>Something possible when sigils don't vanish under evaluation is they can eliminate the need for a block, while still giving a signal to the callee that you passed what you meant intentionally.  When IMPORT has to take WORD! and PATH! in its type signature it can't tell the difference if you'd just said <strong><code>import 'library</code></strong> vs <strong><code>import @library</code></strong> if the sigil vanished.  I don't really want that axis of flexibility in this case.</p>
<p>Swapping out the behaviors to <strong><code>import $library</code></strong> with the $ being sticky, I don't care for as much.</p>
<p>But also, I'm partial to @ meaning "next thing literally", and it's used extensively in the API.  $ doesn't feel as good to me for that.</p>
<pre><code> rebElide("append word-list", rebQ(word));  // verbosity I'd often like to avoid

 rebElide("append word-list @", word);  // I've liked this since it was instituted

 rebElide("append word-list $", word);  // don't really like this for the purpose
</code></pre>
<p>The idea of $ having "something to do with variables" is fairly common, and can be suggested with a name (VAR-WORD!).  And I think this jibes:</p>
<pre><code>&gt;&gt; var: 1020

&gt;&gt; get 'var  ; receives `var` plain WORD!, unbound
** Error: var is not bound to a context

&gt;&gt; get $var  ; receives `var` plain WORD!, bound
== 1020
</code></pre>
<p>The concept of a free $ being a binding operator synonym for <strong><code>in []</code></strong> (or in PARSE serving the role of what I called <strong><code>*in*</code></strong>) feels good to me.  Now that people are being forced to confront binding more directly in their everyday programming (when doing anything interesting) it makes sense to be able to do it succinctly.</p>
<p>(Also, single-arity functions can be <a href="https://forum.rebol.info/t/intrinsics-functions-without-frames/2050">optimized as intrinsics</a>, for what that's worth.  I haven't yet decided if I want to make things like $ and @ their own datatypes that can't be overridden in the evaluator... but now that we can have more datatypes, I might go that direction as well...)</p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/5</link>
        <pubDate>Fri, 16 Feb 2024 06:48:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-5</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It is true that the <code>@word</code> =&gt; <code>@word</code> evaluative behavior didn't turn out to be terribly useful, as I argued when making the change. But having it not be interesting meant in a sense that it was "free" for dialects.</p>
</blockquote>
</aside>
<p>With my <a href="https://forum.rebol.info/t/a-proliferation-of-word-s/2147/8">improved understanding of sigils</a>, I think I can pinpoint more precisely why this behaviour bothers me. Currently — at least in the main evaluator — all the sigils except one serve some purpose relating to getting, setting or binding the word(s) they modify. This turns what would otherwise be a rather <em>ad hoc</em> matrix of datatypes into a powerful toolkit for manipulating variables and bindings.</p>
<p>The proposed (and former) behaviour goes against the grain of this. Making <code>@word</code> evaluate to <code>@word</code> has very little in common with the purpose of the other sigils. It’s simply a value which evaluates to itself. Even worse, it makes no sense when extended to other types: <a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/2">as I’ve complained before</a>, THE-GROUP! and THE-BLOCK! become completely redundant types with this behaviour, having the same meaning as plain BLOCK!.</p>
<p>(Incidentally, this is also a problem with TYPE-* sigils, as you’ve mentioned — which is surely related to <a href="https://forum.rebol.info/t/why-is-type-of-1-an-integer-and-not-integer/2097">my expressed dislike of them</a>. At least I’m consistent, I guess!)</p>
<p>Instead, I’ll make an alternative proposal: if we do go back to that behaviour, scrap <code>@(groups)</code>, <code>@[blocks]</code> and all the other useless types, and just make the single datatype <code>@word</code>. That particular datatype fills a real usecase, in that it’s the word-level equivalent of blocks. It can be like <code>#issue</code> — a type which is useful on its own, but where its sigil doesn’t need to be extended to other things.</p>
<p>Incidentally, in that case, I’d also prefer to keep the existing meaning of <code>@</code>, and give this new type the syntax of <code>$word</code>. I’m rather partial to using <code>@word</code> for bound words, and would like to keep that syntax. Besides, if we want shell-like environment variables, I personally feel that fits the concept of ‘evaluates to itself’ much better than it fits ‘evaluates to a bound word’.</p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/4</link>
        <pubDate>Thu, 15 Feb 2024 13:11:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-4</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Using <span class="mention">@WORD</span> for bound variables felt to me like the right thing to do. I never could see the point of its old semantics, anyway.</p>
</blockquote>
</aside>
<p>It is true that the <code>@word</code> =&gt; <code>@word</code> evaluative behavior didn't turn out to be terribly useful, as I argued when making the change.  But having it not be interesting meant in a sense that it was "free" for dialects.</p>
<p>One thing that is pretty key about the @ semantics is the standalone behavior meaning "take the next thing literally":</p>
<p>This comes in especially handy in the API:</p>
<pre><code> REBVAL* word = rebValue("in [] 'var");

 REBVAL* value = rebValue("get @", word);
</code></pre>
<p>If you didn't have the @ operator to mean "get me this as is" then you'd have to write:</p>
<pre><code> REBVAL* value = rebValue("get the", word);

 REBVAL* value = rebValue("get", rebQ(word));
</code></pre>
<p>I think having a single-character operator that means "exactly the next thing" is pretty important.  I glossed over the fact that it is now adding binding to things that don't have them, because it wasn't causing any problems (that I saw yet) in the API code... but it needed resolution, and I think the right resolution is that it should not affect binding... which raises the question of what an operator should do that does.</p>
<p>My concept here would be that the $ operator would be evaluative but add the binding, so an alternative for <strong><code>in []</code></strong>:</p>
<pre><code>&gt;&gt; $ 'foo
== foo  ; bound
</code></pre>
<p>This helps resolve my concern about the operator's behavior in PARSE, where it is effectively "evaluative" vs. "quoting".  (I mentioned that the "deals with quoting, and with binding" was overloaded.)</p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/3</link>
        <pubDate>Tue, 13 Feb 2024 13:01:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-3</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>I don’t love this proposal. Outside dialects, I see no particular need to add yet another kind of $WORD. I feel particularly worried about the idea of making them look up environment variables by default — it’s clever, but could run into subtle cross-platform difficulties like you mention.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2146">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Maybe I was too hasty in saying that the @ was the right thing to sacrifice for "get variable with binding", and $ should have done that?</p>
</blockquote>
</aside>
<p>I don’t love this either. Using <span class="mention">@WORD</span> for bound variables felt to me like the right thing to do. I never could see the point of its old semantics, anyway.</p>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/2</link>
        <pubDate>Tue, 13 Feb 2024 12:26:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-2</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
      <item>
        <title>Upcoming Datatype $WORD... What Will It Mean?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Something that has been nagging at me is that I've known I want to introduce <strong>$WORD</strong>, <strong>$(GR O UP)</strong>, <strong>$TU.P.LE</strong> etc. (tentative names VAR-WORD!, VAR-GROUP!, VAR-TUPLE!).</p>
<p>At first glance it seems like it would be a loss if $XXX didn't in the baseline evaluator evaluate to looking up environment variables.</p>
<p>But this would be a different behavior for an ANY-WORD!...which up until now, the type of word has not mattered.  Would it spread to SET?</p>
<pre><code>&gt;&gt; set-env "SOMETHING" "TRUE"

&gt;&gt; SOMETHING: 10

&gt;&gt; set (in [] '$SOMETHING) "FALSE"
== "FALSE"

&gt;&gt; SOMETHING
== 10

&gt;&gt; get-env "SOMETHING"
== "FALSE"
</code></pre>
<p>Hmmm.  Lots of issues there...including that Unix environment variables are case-sensitive, Windows ones are not.</p>
<p>The implementation mechanism of this would presumably have to introduce some sort of "pseudo-object" named <code>environment</code>/<code>env</code>, and then the "specifier" would have to say (in a similar way to which the ".WORD" lookups would say to look in a "current object") that the $ words should look up in env.   <em>(See related discussion about <a href="https://forum.rebol.info/t/binding-indirection/2112">"Binding Indirection"</a>)</em></p>
<h2>
<a name="simpler-thought-1" class="anchor" href="https://forum.rebol.info#simpler-thought-1"></a>Simpler Thought...</h2>
<p>A simpler thought (that doesn't rock the boat for one feature) would be that this is a bridge too far for an ANY-WORD!, and they should look up just like any other word, and it's only weird shell dialects that would think that a $WORD meant environment variables.</p>
<p>But then the question might be what the $ buys you.</p>
<p>Maybe I was too hasty in saying that the @ was the right thing to sacrifice for "get variable with binding", and $ should have done that?</p>
<pre><code>&gt;&gt; $word
== word  ; bound

&gt;&gt; @word
== @word  ; bound?
</code></pre>
<p>(A line of argumentation that <code>@word</code> should be bound, is that if you want an unbound one you can get it by quoting with <code>'@word</code>, but then again if the @ operator does not bind e.g. @ foo... but $ does, e.g. $ foo.  So maybe not affecting the binding is the better choice.)</p>
<p>This would let us put back the @ for "as-is" variable usage in parse.  And it would make more sense for a thing named VAR-WORD! (bound variable in evaluator, environment var in shell dialect...)</p>
<p>Urrrgh.  I hate that it seems like that's probably right.  :-/   <em>(Thankfully, git lets us audit/reverse such decisions...assuming you're diligent about not changing too many unrelated things in one commit, which I thankfully was careful about with the @ change.)</em></p>
<h2>
<a name="loss-of-for-weird-idea-i-had-2" class="anchor" href="https://forum.rebol.info#loss-of-for-weird-idea-i-had-2"></a>Loss of $ For Weird Idea I Had</h2>
<p>If the $ operator were used for binding that would be a bit sad, as I'd kind of hoped that could be a variadic function that could run the <a href="https://github.com/metaeducation/ren-c/blob/3e5f724197f55d2745436a52ca1dfa7c5d7e4db5/scripts/shell.r#L4">shell dialect</a>:</p>
<pre><code>extension: "txt"

$ ls -alF *.(extension)
</code></pre>
<p>But, maybe that's a bad way to package it in the box, and specialty scripts that don't care about a $ operator for binding purposes can override it, encouraging the more traditional:</p>
<pre><code>extension: "txt"

shell [ls -alF *.(extension), echo $SOMETHING]
</code></pre>
          <p><a href="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146/1</link>
        <pubDate>Tue, 13 Feb 2024 11:51:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2146-1</guid>
        <source url="https://forum.rebol.info/t/upcoming-datatype-word-what-will-it-mean/2146.rss">Upcoming Datatype $WORD... What Will It Mean?</source>
      </item>
  </channel>
</rss>
