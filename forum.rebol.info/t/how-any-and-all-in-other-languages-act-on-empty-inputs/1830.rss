<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How ANY and ALL In Other Languages Act on Empty Inputs</title>
    <link>https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830</link>
    <description>I was looking around in the &quot;Red Enhancement Process&quot; repository to see if there was anything there of interest, and one thing that&#39;s at least useful was [a survey of how other language constructs paralleling ANY and ALL act](https://github.com/red/REP/issues/85) when given empty inputs.

The repository is BSD-licensed and so I&#39;ll reproduce the list here.  :-P

---

**Red**

    &gt;&gt; all [] == none
    &gt;&gt; any [] == none

**Rebol2 &amp; Rebol3:**

    &gt;&gt; all [] == true
    &gt;&gt; any [] == none

**Scheme:**

    (and) #t
    (or) #f

**Common Lisp:**

    (and) T
    (or) NIL

**R:**

    all() [1] TRUE
    any() [1] FALSE

**J:**

    *./&gt;a: 1
    +./&gt;a: 0

**Julia:**

    all([]) true
    any([]) false

**Python:**

    all([]) True
    any([]) False

**Javascript:**

    [].every(function(){}) true
    [].some(function(){}) false

---

# Lotsa Precedent For `ALL []` Truthy, `ANY []` Falsey...

If you squint hard enough, there are legitimate reasons for favoring this choice--if both have to be constrained to just TRUE and FALSE.

The arguments sort of parallel **[why it&#39;s reasonable to say that TRUE &gt; FALSE](https://ae1020.github.io/is-true-greater-than-false/)**.  But it&#39;s sort of abstract...and you wind up talking about *&quot;mathematical consensus regarding bounded lattices…more specifically, a complemented distributive lattice.&quot;*

# ...BUT...We Can Do Better, With ~VOID~ ISOTOPES!

:man_scientist: :atom_symbol: :microscope: 

VOID is the utter absence of value, and I don&#39;t think we would want this:

    &gt;&gt; expr1: [comment &quot;I&#39;m a comment&quot;]
    &gt;&gt; expr2: [elide print &quot;Vanishing!&quot;]

    &gt;&gt; x: 10

    &gt;&gt; 1 + 2, x: all compose [((expr1)) ((expr2))]
    Vanishing
    == 3

    &gt;&gt; x
    == 10

Functions that become *truly* invisible should be somewhat rare, and do so by contract.  Things kind of turn into chaos if you let the property seep too far.

### But ~VOID~ ISOTOPES Are Another Thing Altogether

The idea behind a ~void~ isotope is that a function can say that in spirit it produced nothing, but still give back *some* result... *an isotope representation of void intent*.  You can then work with that, such as to use MAYBE to convert the intent into an actual manifestation of voidness.

So if you are at a callsite and you know that something like an ALL or an ANY might vaporize all of its clauses, you are in the driver&#39;s seat to make the call:

    &gt;&gt; x: 10

    &gt;&gt; 1 + 2, x: all compose [((expr1)) ((expr2))]
    == ~void~  ; isotope

    &gt;&gt; x: 10

    &gt;&gt; 1 + 2 x: maybe all compose [((expr1)) ((expr2))]
    == 3  ; or 10, or ~void~ isotope...still thinking about this...

    &gt;&gt; x
    == 10  ; &lt;-- BUT this is the important bit

I think that the fact ANY [] and ALL [] have kind of eluded a standardized consensus in the Redbol world considers that historically they didn&#39;t come up in practice much.

BUT I&#39;ve got some powerful use cases coming up to demonstrate that take advantage of the ability to erase and MAYBE&#39;-ify the results of ANY and ALL.  These use cases blow away any microscopic benefit given by declaring the answers here to be true or false.  And for ALL to be truthy it would have to lie in some way--by fabricating an arbitrary truthy value.

You won&#39;t have to take my word for it that this is a big win...you&#39;ll see for yourself!

:eye: :pig_nose:  :eye:</description>
    
    <lastBuildDate>Thu, 26 May 2022 07:23:38 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How ANY and ALL In Other Languages Act on Empty Inputs</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I was looking around in the "Red Enhancement Process" repository to see if there was anything there of interest, and one thing that's at least useful was <a href="https://github.com/red/REP/issues/85">a survey of how other language constructs paralleling ANY and ALL act</a> when given empty inputs.</p>
<p>The repository is BSD-licensed and so I'll reproduce the list here.  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<hr>
<p><strong>Red</strong></p>
<pre><code>&gt;&gt; all [] == none
&gt;&gt; any [] == none
</code></pre>
<p><strong>Rebol2 &amp; Rebol3:</strong></p>
<pre><code>&gt;&gt; all [] == true
&gt;&gt; any [] == none
</code></pre>
<p><strong>Scheme:</strong></p>
<pre><code>(and) #t
(or) #f
</code></pre>
<p><strong>Common Lisp:</strong></p>
<pre><code>(and) T
(or) NIL
</code></pre>
<p><strong>R:</strong></p>
<pre><code>all() [1] TRUE
any() [1] FALSE
</code></pre>
<p><strong>J:</strong></p>
<pre><code>*./&gt;a: 1
+./&gt;a: 0
</code></pre>
<p><strong>Julia:</strong></p>
<pre><code>all([]) true
any([]) false
</code></pre>
<p><strong>Python:</strong></p>
<pre><code>all([]) True
any([]) False
</code></pre>
<p><strong>Javascript:</strong></p>
<pre><code>[].every(function(){}) true
[].some(function(){}) false
</code></pre>
<hr>
<h1>Lotsa Precedent For <code>ALL []</code> Truthy, <code>ANY []</code> Falsey...</h1>
<p>If you squint hard enough, there are legitimate reasons for favoring this choice--if both have to be constrained to just TRUE and FALSE.</p>
<p>The arguments sort of parallel <strong><a href="https://ae1020.github.io/is-true-greater-than-false/">why it's reasonable to say that TRUE &gt; FALSE</a></strong>.  But it's sort of abstract...and you wind up talking about <em>"mathematical consensus regarding bounded lattices…more specifically, a complemented distributive lattice."</em></p>
<h1>...BUT...We Can Do Better, With ~VOID~ ISOTOPES!</h1>
<p><img src="https://forum.rebol.info/images/emoji/twitter/man_scientist.png?v=9" title=":man_scientist:" class="emoji only-emoji" alt=":man_scientist:"> <img src="https://forum.rebol.info/images/emoji/twitter/atom_symbol.png?v=9" title=":atom_symbol:" class="emoji only-emoji" alt=":atom_symbol:"> <img src="https://forum.rebol.info/images/emoji/twitter/microscope.png?v=9" title=":microscope:" class="emoji only-emoji" alt=":microscope:"></p>
<p>VOID is the utter absence of value, and I don't think we would want this:</p>
<pre><code>&gt;&gt; expr1: [comment "I'm a comment"]
&gt;&gt; expr2: [elide print "Vanishing!"]

&gt;&gt; x: 10

&gt;&gt; 1 + 2, x: all compose [((expr1)) ((expr2))]
Vanishing
== 3

&gt;&gt; x
== 10
</code></pre>
<p>Functions that become <em>truly</em> invisible should be somewhat rare, and do so by contract.  Things kind of turn into chaos if you let the property seep too far.</p>
<h3>But ~VOID~ ISOTOPES Are Another Thing Altogether</h3>
<p>The idea behind a ~void~ isotope is that a function can say that in spirit it produced nothing, but still give back <em>some</em> result... <em>an isotope representation of void intent</em>.  You can then work with that, such as to use MAYBE to convert the intent into an actual manifestation of voidness.</p>
<p>So if you are at a callsite and you know that something like an ALL or an ANY might vaporize all of its clauses, you are in the driver's seat to make the call:</p>
<pre><code>&gt;&gt; x: 10

&gt;&gt; 1 + 2, x: all compose [((expr1)) ((expr2))]
== ~void~  ; isotope

&gt;&gt; x: 10

&gt;&gt; 1 + 2 x: maybe all compose [((expr1)) ((expr2))]
== 3  ; or 10, or ~void~ isotope...still thinking about this...

&gt;&gt; x
== 10  ; &lt;-- BUT this is the important bit
</code></pre>
<p>I think that the fact ANY [] and ALL [] have kind of eluded a standardized consensus in the Redbol world considers that historically they didn't come up in practice much.</p>
<p>BUT I've got some powerful use cases coming up to demonstrate that take advantage of the ability to erase and MAYBE'-ify the results of ANY and ALL.  These use cases blow away any microscopic benefit given by declaring the answers here to be true or false.  And for ALL to be truthy it would have to lie in some way--by fabricating an arbitrary truthy value.</p>
<p>You won't have to take my word for it that this is a big win...you'll see for yourself!</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/eye.png?v=9" title=":eye:" class="emoji" alt=":eye:"> <img src="https://forum.rebol.info/images/emoji/twitter/pig_nose.png?v=9" title=":pig_nose:" class="emoji" alt=":pig_nose:">  <img src="https://forum.rebol.info/images/emoji/twitter/eye.png?v=9" title=":eye:" class="emoji" alt=":eye:"></p>
          <p><a href="https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830/1</link>
        <pubDate>Thu, 26 May 2022 06:39:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1830-1</guid>
        <source url="https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830.rss">How ANY and ALL In Other Languages Act on Empty Inputs</source>
      </item>
  </channel>
</rss>
