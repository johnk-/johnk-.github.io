<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How ANY and ALL In Other Languages Act on Empty Inputs</title>
    <link>https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830</link>
    <description>I was looking around in the &quot;Red Enhancement Process&quot; repository to see if there was anything there of interest, and one thing that&#39;s at least useful was [a survey of how other language constructs paralleling ANY and ALL act](https://github.com/red/REP/issues/85) when given empty inputs.

The repository is BSD-licensed and so I&#39;ll reproduce the list here.  :-P

---

**Red**

    &gt;&gt; all [] == none
    &gt;&gt; any [] == none

**Rebol2 &amp; Rebol3:**

    &gt;&gt; all [] == true
    &gt;&gt; any [] == none

**Scheme:**

    (and) #t
    (or) #f

**Common Lisp:**

    (and) T
    (or) NIL

**R:**

    all() [1] TRUE
    any() [1] FALSE

**J:**

    *./&gt;a: 1
    +./&gt;a: 0

**Julia:**

    all([]) true
    any([]) false

**Python:**

    all([]) True
    any([]) False

**Javascript:**

    [].every(function(){}) true
    [].some(function(){}) false

---

# Lotsa Precedent For `ALL []` Truthy, `ANY []` Falsey...

If you squint hard enough, there are legitimate reasons for favoring this choice--if both have to be constrained to just TRUE and FALSE.

The arguments sort of parallel **[why it&#39;s reasonable to say that TRUE &gt; FALSE](https://ae1020.github.io/is-true-greater-than-false/)**.  But it&#39;s sort of abstract...and you wind up talking about *&quot;mathematical consensus regarding bounded lattices…more specifically, a complemented distributive lattice.&quot;*

# ...BUT...We Can Do Better, With VOID

The idea behind VOID (as opposed to NIHIL) is that a function can say that in spirit it produced nothing, but still give back *some* result... *a representation of void intent*.  Some contexts like the condition of an IF will error on voids.  But others like ANY and ALL will consider it &quot;no vote&quot; and skip it.

I think that the fact ANY [] and ALL [] have kind of eluded a standardized consensus in the Redbol world considers that historically they didn&#39;t come up in practice much.

BUT I&#39;ve got some powerful use cases coming up to demonstrate that take advantage of the ability to erase results of ANY and ALL.  These use cases blow away any microscopic benefit given by declaring the answers here to be true or false.  And for ALL to be truthy it would have to lie in some way--by fabricating an arbitrary truthy value.

You won&#39;t have to take my word for it that this is a big win...see for yourself:

https://forum.rebol.info/t/demonstrating-for-both-loop-composability-for-the-win/1833

:eye: :pig_nose:  :eye:</description>
    
    <lastBuildDate>Fri, 29 Dec 2023 18:46:53 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How ANY and ALL In Other Languages Act on Empty Inputs</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I was looking around in the "Red Enhancement Process" repository to see if there was anything there of interest, and one thing that's at least useful was <a href="https://github.com/red/REP/issues/85">a survey of how other language constructs paralleling ANY and ALL act</a> when given empty inputs.</p>
<p>The repository is BSD-licensed and so I'll reproduce the list here.  <img src="https://forum.rebol.info/images/emoji/twitter/stuck_out_tongue.png?v=12" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:" loading="lazy" width="20" height="20"></p>
<hr>
<p><strong>Red</strong></p>
<pre><code>&gt;&gt; all [] == none
&gt;&gt; any [] == none
</code></pre>
<p><strong>Rebol2 &amp; Rebol3:</strong></p>
<pre><code>&gt;&gt; all [] == true
&gt;&gt; any [] == none
</code></pre>
<p><strong>Scheme:</strong></p>
<pre><code>(and) #t
(or) #f
</code></pre>
<p><strong>Common Lisp:</strong></p>
<pre><code>(and) T
(or) NIL
</code></pre>
<p><strong>R:</strong></p>
<pre><code>all() [1] TRUE
any() [1] FALSE
</code></pre>
<p><strong>J:</strong></p>
<pre><code>*./&gt;a: 1
+./&gt;a: 0
</code></pre>
<p><strong>Julia:</strong></p>
<pre><code>all([]) true
any([]) false
</code></pre>
<p><strong>Python:</strong></p>
<pre><code>all([]) True
any([]) False
</code></pre>
<p><strong>Javascript:</strong></p>
<pre><code>[].every(function(){}) true
[].some(function(){}) false
</code></pre>
<hr>
<h1><a name="p-5876-lotsa-precedent-for-all-truthy-any-falsey-1" class="anchor" href="https://forum.rebol.info#p-5876-lotsa-precedent-for-all-truthy-any-falsey-1"></a>Lotsa Precedent For <code>ALL []</code> Truthy, <code>ANY []</code> Falsey...</h1>
<p>If you squint hard enough, there are legitimate reasons for favoring this choice--if both have to be constrained to just TRUE and FALSE.</p>
<p>The arguments sort of parallel <strong><a href="https://ae1020.github.io/is-true-greater-than-false/">why it's reasonable to say that TRUE &gt; FALSE</a></strong>.  But it's sort of abstract...and you wind up talking about <em>"mathematical consensus regarding bounded lattices…more specifically, a complemented distributive lattice."</em></p>
<h1><a name="p-5876-butwe-can-do-better-with-void-2" class="anchor" href="https://forum.rebol.info#p-5876-butwe-can-do-better-with-void-2"></a>...BUT...We Can Do Better, With VOID</h1>
<p>The idea behind VOID (as opposed to NIHIL) is that a function can say that in spirit it produced nothing, but still give back <em>some</em> result... <em>a representation of void intent</em>.  Some contexts like the condition of an IF will error on voids.  But others like ANY and ALL will consider it "no vote" and skip it.</p>
<p>I think that the fact ANY <span class="chcklst-box fa fa-square-o fa-fw"></span> and ALL <span class="chcklst-box fa fa-square-o fa-fw"></span> have kind of eluded a standardized consensus in the Redbol world considers that historically they didn't come up in practice much.</p>
<p>BUT I've got some powerful use cases coming up to demonstrate that take advantage of the ability to erase results of ANY and ALL.  These use cases blow away any microscopic benefit given by declaring the answers here to be true or false.  And for ALL to be truthy it would have to lie in some way--by fabricating an arbitrary truthy value.</p>
<p>You won't have to take my word for it that this is a big win...see for yourself:</p>
<aside class="quote quote-modified" data-post="1" data-topic="1833">
  <div class="title">
    <div class="quote-controls"></div>
    <img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/demonstrating-for-both-loop-composability-for-the-win/1833">Demonstrating FOR-BOTH: Loop Composability For The Win <img width="20" height="20" src="https://forum.rebol.info/images/emoji/twitter/exclamation.png?v=12" title="exclamation" alt="exclamation" class="emoji"></a> <a class="badge-category__wrapper " href="https://forum.rebol.info/c/usage/show-and-tell/33"><span data-category-id="33" style="--category-badge-color: #3AB54A; --category-badge-text-color: #FFFFFF; --parent-category-badge-color: #3AB54A;" data-parent-category-id="7" data-drop-close="true" class="badge-category --has-parent" title="Created something short and syrupy sweet?  Then post your scripts here; not confined to infinite length one-liners!"><span class="badge-category__name">Show &amp; Tell</span></span></a>
  </div>
  <blockquote>
    FOR-BOTH was an early talking point for an extremely simple usermode loop construct that would be built out of two FOR-EACH loops: 
 &gt;&gt; for-both 'x [1 2] [3 4] [print [x], x = 5]
 1
 2
 3
 4
 ; first in pack of 1 item
 == ~null~  ; anti

A naive implementation of this in Rebol2 might look like: 
 for-both-naive: func [var blk1 blk2 body] [
     foreach (var) blk1 body
     foreach (var) blk2 body
 ]

...but... 


It will not honor BREAK correctly 
&gt;&gt; for-both-naive 'x [1 2] [3 4] [if x = 2 [brea…
  </blockquote>
</aside>

<p><img src="https://forum.rebol.info/images/emoji/twitter/eye.png?v=12" title=":eye:" class="emoji" alt=":eye:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/pig_nose.png?v=12" title=":pig_nose:" class="emoji" alt=":pig_nose:" loading="lazy" width="20" height="20">  <img src="https://forum.rebol.info/images/emoji/twitter/eye.png?v=12" title=":eye:" class="emoji" alt=":eye:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830/1</link>
        <pubDate>Thu, 26 May 2022 06:39:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1830-1</guid>
        <source url="https://forum.rebol.info/t/how-any-and-all-in-other-languages-act-on-empty-inputs/1830.rss">How ANY and ALL In Other Languages Act on Empty Inputs</source>
      </item>
  </channel>
</rss>
