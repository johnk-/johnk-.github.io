<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>QUOTE_BYTE Values (Antiform, Normal, Quasi, Quoted)</title>
    <link>https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091</link>
    <description>The &quot;game&quot; of Rebol is played with cells that are the size of four platform pointers.  So on a 32-bit platform a cell is 16 bytes in size, and on a 64-bit platform they are 32 bytes in size.

I&#39;ve illustrated Ren-C&#39;s spin on this &quot;game&quot; previously:

![ren-c-cell|690x281](upload://3E5omo3mg1b0FRQoFVFHU57OGqt.png)

The bits and bytes in the header are arranged in a platform-independent way.  Regardless of the endianness of the machine, the bits in the header will be in the same order.  The first byte is chosen with a pattern that specifically will never occur as a leading byte in a UTF-8 sequence...allowing an arbitrary pointer to be discerned as pointing to a cell or to the beginning of a UTF-8 string.

The &quot;payload&quot; is specifically aligned to a 64-bit boundary on both 32-bit and 64-bit platforms.  This is important if it contains something like a double precision floating point number.  It is also a union, which means that if it has constituent fields, they must be read from exactly the same union definition which was used to assign them.  The &quot;extra&quot; is separate, meaning it is decoupled from the payload and can be assigned and read on its own terms (e.g. BLOCK! and WORD! could have a &quot;binding&quot; in extra that is read and written in common, without invalidating their payloads).

The HEART_BYTE encodes what we would think of as the underlying datatype, and cues the interpretation of the contents of the cell.  For instance the byte corresponding to a BLOCK! tells us that the payload consists of a pointer to an array of more cells as well as an index into the block.

## Enter the QUOTE_BYTE

Bits in the header are scarce.  And at one time, quoting was implemented by only two bits... for quoting levels of 0, 1, 2, or 3.  Higher quoting levels were achieved by changing the HEART_BYTE to indicate QUOTED!, and then the payload was changed to point to a single-element array that held the quoted cell, and an integer of the quoting level up beyond millions.  It was tricky to do, but it worked.

Eventually, the complex mechanics behind flipping to a different payload for higher levels of quoting was scrapped, and an entire byte in the header was sacrificed for the quote level.  This permitted from 0-255 levels of quoting, and I decided that was more than enough.

When isotopes were originally introduced, there was a flag taken to say something was an antiform.  However, I realized that something should not be quoted and be an antiform at the same time.  Hence the antiform state could be thought of as a special value of the QUOTE_BYTE.

Initially I chose 255 for antiforms, leaving 0-254 as the ordinary quoting levels.  But the theory of isotopes evolved to where not only were there antiforms, but there needed to be a form of quoting that would produce antiforms under evaluation...so-called *quasiforms*.  And it began to make sense to think of the antiform state as being obviously &quot;less&quot; than other quoting levels, so it became 0.

What it worked out to was:

* Quoting byte of 0 is an isotope: **`#define ANTIFORM_0 0`**

* Quoting byte of 1 is plain not-quoted: **`#define NOQUOTE_1 1`**

* Quoting byte of 2 is a quasiform: **`#define QUASI_2 2`**

* Quoting byte of 3 is single quoted plain form: **`#define ONEQUOTE_3 3`**

A quoting byte of 4 is a single-quoted quasiform.  e.g. there&#39;s no such thing as a quasi-quoted, just a quoted-quasi: **`&#39;~foo~`** is legal but **`~&#39;foo~`** is not.

So the interpretation of the QUOTE_BYTE proceeds like that.

* Quoting byte of 5 is a double quoted plain form

* Quoting byte of 6 is a double quoted quasiform

* Quoting byte of 7 is a triple quoted plain form

* Quoting byte of 8 is a triple quoted quasiform

etc.

So although mechanically the byte holds a value of 0 for antiform, it still conceptually is what we might call a quote level of &quot;negative one&quot;.

Evaluator drops one level of quoting, with the base case that quasiforms produce antiform and the normal form does whatever its evaluator rule is (WORD! looks up, etc.)

The QUOTE operator won&#39;t work on antiforms and the UNQUOTE operator won&#39;t work on quasiforms.  Instead you have to use the META and UNMETA operations, which handle those exceptions but just act like QUOTE and UNQUOTE otherwise.</description>
    
    <lastBuildDate>Fri, 05 Jan 2024 07:25:25 +0000</lastBuildDate>
    <category>C/C++ Implementation</category>
    <atom:link href="https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>QUOTE_BYTE Values (Antiform, Normal, Quasi, Quoted)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/why-have-both-block-and-group/2092">Why Have Both BLOCK! and GROUP!</a></p>
          <p><a href="https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091/3</link>
        <pubDate>Fri, 05 Jan 2024 07:29:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2091-3</guid>
        <source url="https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091.rss">QUOTE_BYTE Values (Antiform, Normal, Quasi, Quoted)</source>
      </item>
      <item>
        <title>QUOTE_BYTE Values (Antiform, Normal, Quasi, Quoted)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="5" data-topic="2088">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"><a href="https://forum.rebol.info/t/bradrn-brad/2088/5">bradrn (Brad)</a></div>
<blockquote>
<p>why do <code>quote</code>/<code>unquote</code> exist when <code>meta</code>/<code>unmeta</code> do the same thing while handling more cases?</p>
</blockquote>
</aside>
<p>Sanity check.  Antiforms are weird, and creating them (or tolerating them) when you didn't mean to is good to avoid.</p>
<p>Unstable antiforms are particularly weird...for instance antiform BLOCK! cannot be stored in variables.  In normal assignments it decays to its first element, while multi-assignments and other particular constructs interpret it as multiple values:</p>
<pre><code>&gt;&gt; quasiform: '~[1 2]~
== ~[1 2]~

&gt;&gt; x: unmeta quasiform
== 1

&gt;&gt; [x y]: unmeta quasiform
== 1

&gt;&gt; y
== 2
</code></pre>
<p>This is how multi-return functions are implemented.</p>
<p>What's nice about UNQUOTE vs UNMETA is that if you are really not suspecting you're dealing with a quasiform that should become an antiform, you can avoid the potential confusion caused.</p>
<p>And QUOTE has a similar convenience of not tolerating an antiform when you didn't think there'd be one.</p>
<p>A narrower operator of QUASI and UNQUASI exists to make it clear when you're only adding or removing a quasi state.  So you can QUASI only plain non-quoted things, and UNQUASI only non-quoted quasiforms.  Then NOQUASI will pass through all values except drop the quasi from quasiforms.</p>
<p>Just helps readers get their bearings on what's going on if that's all that's happening.</p>
          <p><a href="https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091/2</link>
        <pubDate>Fri, 05 Jan 2024 05:33:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2091-2</guid>
        <source url="https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091.rss">QUOTE_BYTE Values (Antiform, Normal, Quasi, Quoted)</source>
      </item>
      <item>
        <title>QUOTE_BYTE Values (Antiform, Normal, Quasi, Quoted)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The "game" of Rebol is played with cells that are the size of four platform pointers.  So on a 32-bit platform a cell is 16 bytes in size, and on a 64-bit platform they are 32 bytes in size.</p>
<p>I've illustrated Ren-C's spin on this "game" previously:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/198e92149d15782107ac8c2852d336c9cea200d1.png" data-download-href="https://forum.rebol.info/uploads/default/198e92149d15782107ac8c2852d336c9cea200d1" title="ren-c-cell"><img src="https://forum.rebol.info/uploads/default/optimized/1X/198e92149d15782107ac8c2852d336c9cea200d1_2_690x281.png" alt="ren-c-cell" data-base62-sha1="3E5omo3mg1b0FRQoFVFHU57OGqt" width="690" height="281" srcset="https://forum.rebol.info/uploads/default/optimized/1X/198e92149d15782107ac8c2852d336c9cea200d1_2_690x281.png, https://forum.rebol.info/uploads/default/optimized/1X/198e92149d15782107ac8c2852d336c9cea200d1_2_1035x421.png 1.5x, https://forum.rebol.info/uploads/default/original/1X/198e92149d15782107ac8c2852d336c9cea200d1.png 2x" data-dominant-color="EDEDED"></a></div><p></p>
<p>The bits and bytes in the header are arranged in a platform-independent way.  Regardless of the endianness of the machine, the bits in the header will be in the same order.  The first byte is chosen with a pattern that specifically will never occur as a leading byte in a UTF-8 sequence...allowing an arbitrary pointer to be discerned as pointing to a cell or to the beginning of a UTF-8 string.</p>
<p>The "payload" is specifically aligned to a 64-bit boundary on both 32-bit and 64-bit platforms.  This is important if it contains something like a double precision floating point number.  It is also a union, which means that if it has constituent fields, they must be read from exactly the same union definition which was used to assign them.  The "extra" is separate, meaning it is decoupled from the payload and can be assigned and read on its own terms (e.g. BLOCK! and WORD! could have a "binding" in extra that is read and written in common, without invalidating their payloads).</p>
<p>The HEART_BYTE encodes what we would think of as the underlying datatype, and cues the interpretation of the contents of the cell.  For instance the byte corresponding to a BLOCK! tells us that the payload consists of a pointer to an array of more cells as well as an index into the block.</p>
<h2><a name="p-6802-enter-the-quote_byte-1" class="anchor" href="https://forum.rebol.info#p-6802-enter-the-quote_byte-1"></a>Enter the QUOTE_BYTE</h2>
<p>Bits in the header are scarce.  And at one time, quoting was implemented by only two bits... for quoting levels of 0, 1, 2, or 3.  Higher quoting levels were achieved by changing the HEART_BYTE to indicate QUOTED!, and then the payload was changed to point to a single-element array that held the quoted cell, and an integer of the quoting level up beyond millions.  It was tricky to do, but it worked.</p>
<p>Eventually, the complex mechanics behind flipping to a different payload for higher levels of quoting was scrapped, and an entire byte in the header was sacrificed for the quote level.  This permitted from 0-255 levels of quoting, and I decided that was more than enough.</p>
<p>When isotopes were originally introduced, there was a flag taken to say something was an antiform.  However, I realized that something should not be quoted and be an antiform at the same time.  Hence the antiform state could be thought of as a special value of the QUOTE_BYTE.</p>
<p>Initially I chose 255 for antiforms, leaving 0-254 as the ordinary quoting levels.  But the theory of isotopes evolved to where not only were there antiforms, but there needed to be a form of quoting that would produce antiforms under evaluation...so-called <em>quasiforms</em>.  And it began to make sense to think of the antiform state as being obviously "less" than other quoting levels, so it became 0.</p>
<p>What it worked out to was:</p>
<ul>
<li>
<p>Quoting byte of 0 is an isotope: <strong><code>#define ANTIFORM_0 0</code></strong></p>
</li>
<li>
<p>Quoting byte of 1 is plain not-quoted: <strong><code>#define NOQUOTE_1 1</code></strong></p>
</li>
<li>
<p>Quoting byte of 2 is a quasiform: <strong><code>#define QUASI_2 2</code></strong></p>
</li>
<li>
<p>Quoting byte of 3 is single quoted plain form: <strong><code>#define ONEQUOTE_3 3</code></strong></p>
</li>
</ul>
<p>A quoting byte of 4 is a single-quoted quasiform.  e.g. there's no such thing as a quasi-quoted, just a quoted-quasi: <strong><code>'~foo~</code></strong> is legal but <strong><code>~'foo~</code></strong> is not.</p>
<p>So the interpretation of the QUOTE_BYTE proceeds like that.</p>
<ul>
<li>
<p>Quoting byte of 5 is a double quoted plain form</p>
</li>
<li>
<p>Quoting byte of 6 is a double quoted quasiform</p>
</li>
<li>
<p>Quoting byte of 7 is a triple quoted plain form</p>
</li>
<li>
<p>Quoting byte of 8 is a triple quoted quasiform</p>
</li>
</ul>
<p>etc.</p>
<p>So although mechanically the byte holds a value of 0 for antiform, it still conceptually is what we might call a quote level of "negative one".</p>
<p>Evaluator drops one level of quoting, with the base case that quasiforms produce antiform and the normal form does whatever its evaluator rule is (WORD! looks up, etc.)</p>
<p>The QUOTE operator won't work on antiforms and the UNQUOTE operator won't work on quasiforms.  Instead you have to use the META and UNMETA operations, which handle those exceptions but just act like QUOTE and UNQUOTE otherwise.</p>
          <p><a href="https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091/1</link>
        <pubDate>Thu, 04 Jan 2024 18:16:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2091-1</guid>
        <source url="https://forum.rebol.info/t/quote-byte-values-antiform-normal-quasi-quoted/2091.rss">QUOTE_BYTE Values (Antiform, Normal, Quasi, Quoted)</source>
      </item>
  </channel>
</rss>
