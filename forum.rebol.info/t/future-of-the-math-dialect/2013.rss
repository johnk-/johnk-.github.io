<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Future of the MATH Dialect</title>
    <link>https://forum.rebol.info/t/future-of-the-math-dialect/2013</link>
    <description>It is basically inevitable that people coming to Rebol will ask about its mathematical evaluation being left-to-right, instead of obeying the precedence order that they are used to.  Red just had a new user try to file it as a bug... 3 days ago:

  https://github.com/red/red/issues/5276

**What seemed to make sense to people like me and BrianH was that the core ship with a dialect called MATH.**  The concept was that **math [1 + 2 * 3]** would give **7** and not **9**.  Having something in the box seemed better than having the first line of argument being *&quot;you don&#39;t want the precedence you think you do&quot;*.

But it turned out to be kind of hard to make pleasing.  One key difficulty which @Brett and I fretted over at some point was that since Rebol isn&#39;t &quot;psychic&quot; regarding arity, does not know a-priori how much code an expression will consume:

    math [1 + 2 * foo baz bar + 3]

    ; should it be...
    [1 + (2 * (foo baz bar)) + 3]

    ; or perhaps...
    [(1 + (2 * foo)) ((baz bar) + 3)]

    ; maybe...
    [(1 + (2 * foo)) baz (bar + 3)]

**It started to appear that the user would have to put anything that wasn&#39;t a number or a math operator in groups.**  There may be some heuristics which tolerate words that look up to numbers vs. functions, but it feels very slippery.

As I&#39;ve said I hate to be dropping things, but MATH is something that Rebol programmers don&#39;t really want in the first place--and I don&#39;t think non-Rebol programmers would be satisfied by it.  If it&#39;s included in the core that suggests support for it, and there are just too many things in play.

Here is an implementation that was previously included, by Gabriele:

    ; This MATH implementation is from Gabrielle Santilli circa 2001, found
    ; via http://www.rebol.org/ml-display-thread.r?m=rmlXJHS. It implements the
    ; much-requested (by new users) idea of * and / running before + and - in
    ; math expressions. Expanded to include functions.
    ;
    math: func [
        {Process expression taking &quot;usual&quot; operator precedence into account.}

        expr [block!]
            {Block to evaluate}
        /only
            {Translate operators to their prefix calls, but don&#39;t execute}

        ; !!! This creation of static rules helps avoid creating those rules
        ; every time, but has the problem that the references to what should
        ; be locals are bound to statics as well (e.g. everything below which
        ; is assigned with BLANK! really should be relatively bound to the
        ; function, so that it will refer to the specific call.)  It&#39;s not
        ; technically obvious how to do that, not the least of the problem is
        ; that statics are currently a usermode feature...and injecting relative
        ; binding information into something that&#39;s not the function body itself
        ; isn&#39;t implemented.

        &lt;static&gt;

        slash (the /)

        expr-val (_)

        expr-op (_)

        expression  ([
            term (expr-val: term-val)
            opt some [
                [&#39;+ (expr-op: &#39;add) | &#39;- (expr-op: &#39;subtract)]
                term (expr-val: compose [(expr-op) (expr-val) (term-val)])
            ]
            &lt;end&gt;
        ])

        term-val (_)

        term-op (_)

        term ([
            pow (term-val: power-val)
            opt some [
                [&#39;* (term-op: &#39;multiply) | slash (term-op: &#39;divide)]
                pow (term-val: compose [(term-op) (term-val) (power-val)])
            ]
        ])

        power-val (_)

        pow ([
            unary (power-val: unary-val)
            opt [&#39;** unary (power-val: compose [power (power-val) (unary-val)])]
        ])

        unary-val (_)

        pre-uop (_)

        post-uop (_)

        unary ([
            (post-uop: pre-uop: [])
            opt [&#39;- (pre-uop: &#39;negate)]
            primary
            opt [&#39;! (post-uop: &#39;factorial)]
            (unary-val: compose [(post-uop) (pre-uop) (prim-val)])
        ])

        prim-val (_)

        primary ([
            set prim-val any-number!
            | set prim-val [word! | path!] (prim-val: reduce [prim-val])
                ; might be a funtion call, looking for arguments
                opt some [
                    nested-expression (append prim-val take nested-expr-val)
                ]
            | ahead group! into nested-expression (prim-val: take nested-expr-val)
        ])

        p-recursion (_)

        nested-expr-val ([])

        save-vars (func [][
                p-recursion: reduce [
                    :p-recursion :expr-val :expr-op :term-val :term-op :power-val :unary-val
                    :pre-uop :post-uop :prim-val
                ]
            ])

        restore-vars (func [][
                set [
                    p-recursion expr-val expr-op term-val term-op power-val unary-val
                    pre-uop post-uop prim-val
                ] p-recursion
            ])

        nested-expression ([
                ;all of the static variables have to be saved
                (save-vars)
                expression
                (
                    ; This rule can be recursively called as well,
                    ; so result has to be passed via a stack
                    insert nested-expr-val expr-val
                    restore-vars
                )
                ; vars could be changed even it failed, so restore them and fail
                | (restore-vars) fail

        ])
    ][
        clear nested-expr-val
        let res: either parse3 expr expression [expr-val] [blank]

        either only [
            return res
        ][
            ret: reduce res
            all [
                1 = length of ret
                any-number? ret.1
            ] else [
                fail [
                    unspaced [&quot;Cannot be REDUCED to a number (&quot; mold ret &quot;)&quot;]
                    &quot;:&quot; mold res
                ]
            ]
            return ret.1
        ]
    ]</description>
    
    <lastBuildDate>Tue, 31 Jan 2023 19:40:45 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/future-of-the-math-dialect/2013.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Future of the MATH Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2013">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One key difficulty which <a class="mention" href="https://forum.rebol.info/u/brett">@Brett</a> and I fretted over at some point was that since Rebol isn't "psychic" regarding arity,</p>
</blockquote>
</aside>
<p>Note: if you want to ask "why isn't Rebol psychic?" consider cases like:</p>
<pre><code>mystery: func [a b] [return a * b]
tricky-negate: func [a] [mystery: :tricky-negate, return negate a]

1 + add tricky-negate 2 mystery 3 * 4
</code></pre>
<p>If a pre-pass tried to assume MYSTERY's arity and make decisions, those decisions might become invalid.  Ren-C features like variadics make this worse, but the problem is all tied in with Rebol being as dynamic as it is.</p>
<p>Explicit grouping is not a <em>terrible</em> thing, when you consider that most languages require parentheses to delimit function calls.  But it's certainly swimming upstream to be trying to ship MATH in the core.</p>
<p><em>Maybe this will change in the future, but Ren-C has bigger and more interesting issues to work on than trying to twist Rebol into a language that people who don't like Rebol would not want to use anyway.</em></p>
          <p><a href="https://forum.rebol.info/t/future-of-the-math-dialect/2013/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/future-of-the-math-dialect/2013/2</link>
        <pubDate>Tue, 31 Jan 2023 19:40:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2013-2</guid>
        <source url="https://forum.rebol.info/t/future-of-the-math-dialect/2013.rss">Future of the MATH Dialect</source>
      </item>
      <item>
        <title>Future of the MATH Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It is basically inevitable that people coming to Rebol will ask about its mathematical evaluation being left-to-right, instead of obeying the precedence order that they are used to.  Red just had a new user try to file it as a bug... 3 days ago:</p>
<p><a href="https://github.com/red/red/issues/5276">https://github.com/red/red/issues/5276</a></p>
<p><strong>What seemed to make sense to people like me and BrianH was that the core ship with a dialect called MATH.</strong>  The concept was that <strong>math [1 + 2 * 3]</strong> would give <strong>7</strong> and not <strong>9</strong>.  Having something in the box seemed better than having the first line of argument being <em>"you don't want the precedence you think you do"</em>.</p>
<p>But it turned out to be kind of hard to make pleasing.  One key difficulty which <a class="mention" href="https://forum.rebol.info/u/brett">@Brett</a> and I fretted over at some point was that since Rebol isn't "psychic" regarding arity, does not know a-priori how much code an expression will consume:</p>
<pre><code>math [1 + 2 * foo baz bar + 3]

; should it be...
[1 + (2 * (foo baz bar)) + 3]

; or perhaps...
[(1 + (2 * foo)) ((baz bar) + 3)]

; maybe...
[(1 + (2 * foo)) baz (bar + 3)]
</code></pre>
<p><strong>It started to appear that the user would have to put anything that wasn't a number or a math operator in groups.</strong>  There may be some heuristics which tolerate words that look up to numbers vs. functions, but it feels very slippery.</p>
<p>As I've said I hate to be dropping things, but MATH is something that Rebol programmers don't really want in the first place--and I don't think non-Rebol programmers would be satisfied by it.  If it's included in the core that suggests support for it, and there are just too many things in play.</p>
<p>Here is an implementation that was previously included, by Gabriele:</p>
<pre><code>; This MATH implementation is from Gabrielle Santilli circa 2001, found
; via http://www.rebol.org/ml-display-thread.r?m=rmlXJHS. It implements the
; much-requested (by new users) idea of * and / running before + and - in
; math expressions. Expanded to include functions.
;
math: func [
    {Process expression taking "usual" operator precedence into account.}

    expr [block!]
        {Block to evaluate}
    /only
        {Translate operators to their prefix calls, but don't execute}

    ; !!! This creation of static rules helps avoid creating those rules
    ; every time, but has the problem that the references to what should
    ; be locals are bound to statics as well (e.g. everything below which
    ; is assigned with BLANK! really should be relatively bound to the
    ; function, so that it will refer to the specific call.)  It's not
    ; technically obvious how to do that, not the least of the problem is
    ; that statics are currently a usermode feature...and injecting relative
    ; binding information into something that's not the function body itself
    ; isn't implemented.

    &lt;static&gt;

    slash (the /)

    expr-val (_)

    expr-op (_)

    expression  ([
        term (expr-val: term-val)
        opt some [
            ['+ (expr-op: 'add) | '- (expr-op: 'subtract)]
            term (expr-val: compose [(expr-op) (expr-val) (term-val)])
        ]
        &lt;end&gt;
    ])

    term-val (_)

    term-op (_)

    term ([
        pow (term-val: power-val)
        opt some [
            ['* (term-op: 'multiply) | slash (term-op: 'divide)]
            pow (term-val: compose [(term-op) (term-val) (power-val)])
        ]
    ])

    power-val (_)

    pow ([
        unary (power-val: unary-val)
        opt ['** unary (power-val: compose [power (power-val) (unary-val)])]
    ])

    unary-val (_)

    pre-uop (_)

    post-uop (_)

    unary ([
        (post-uop: pre-uop: [])
        opt ['- (pre-uop: 'negate)]
        primary
        opt ['! (post-uop: 'factorial)]
        (unary-val: compose [(post-uop) (pre-uop) (prim-val)])
    ])

    prim-val (_)

    primary ([
        set prim-val any-number!
        | set prim-val [word! | path!] (prim-val: reduce [prim-val])
            ; might be a funtion call, looking for arguments
            opt some [
                nested-expression (append prim-val take nested-expr-val)
            ]
        | ahead group! into nested-expression (prim-val: take nested-expr-val)
    ])

    p-recursion (_)

    nested-expr-val ([])

    save-vars (func [][
            p-recursion: reduce [
                :p-recursion :expr-val :expr-op :term-val :term-op :power-val :unary-val
                :pre-uop :post-uop :prim-val
            ]
        ])

    restore-vars (func [][
            set [
                p-recursion expr-val expr-op term-val term-op power-val unary-val
                pre-uop post-uop prim-val
            ] p-recursion
        ])

    nested-expression ([
            ;all of the static variables have to be saved
            (save-vars)
            expression
            (
                ; This rule can be recursively called as well,
                ; so result has to be passed via a stack
                insert nested-expr-val expr-val
                restore-vars
            )
            ; vars could be changed even it failed, so restore them and fail
            | (restore-vars) fail

    ])
][
    clear nested-expr-val
    let res: either parse3 expr expression [expr-val] [blank]

    either only [
        return res
    ][
        ret: reduce res
        all [
            1 = length of ret
            any-number? ret.1
        ] else [
            fail [
                unspaced ["Cannot be REDUCED to a number (" mold ret ")"]
                ":" mold res
            ]
        ]
        return ret.1
    ]
]</code></pre>
          <p><a href="https://forum.rebol.info/t/future-of-the-math-dialect/2013/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/future-of-the-math-dialect/2013/1</link>
        <pubDate>Tue, 31 Jan 2023 19:08:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2013-1</guid>
        <source url="https://forum.rebol.info/t/future-of-the-math-dialect/2013.rss">Future of the MATH Dialect</source>
      </item>
  </channel>
</rss>
