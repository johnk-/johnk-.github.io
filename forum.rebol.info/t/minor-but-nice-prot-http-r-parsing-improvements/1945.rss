<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Minor (but nice!) %prot-http.r parsing improvements</title>
    <link>https://forum.rebol.info/t/minor-but-nice-prot-http-r-parsing-improvements/1945</link>
    <description>Here&#39;s is R3-Alpha&#39;s [PARSE-WRITE-DIALECT](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/prot-http.r) from %prot-http.r

    parse-write-dialect: func [port block /local spec] [
        spec: port/spec
        parse block [
            [set block word! (spec/method: block) | (spec/method: &#39;post)]
            opt [set block [file! | url!] (spec/path: block)]
            [set block block! (spec/headers: block) | (spec/headers: [])]
            [set block [any-string! | binary!] (spec/content: block) | (spec/content: none)]
        ]
    ]

You couldn&#39;t set paths in R3-Alpha parse, which is weird.  So things had to be captured into a temporary variable (it reused the input block for some reason).

Let&#39;s imagine that setting paths were legal:

    parse-write-dialect: func [port block /local spec] [
        spec: port/spec
        parse block [
            [set spec/method word! | (spec/method: &#39;post)]
            opt [set spec/path [file! | url!]]
            [set spec/headers block! | (spec/headers: [])]
            [set spec/content [any-string! | binary!] | (spec/content: none)]
        ]
    ]

Let&#39;s do a quick transformation of this to PARSE3 in Ren-C, where the keyword TRY now replaces OPT:

    parse-write-dialect: func [port block &lt;local&gt; spec] [
        spec: port.spec
        parse3 block [  ; PARSE3 is R3-Alpha-compatible parse
            [set spec.method word! | (spec.method: &#39;post)]
            try [set spec.path [file! | url!]]
            [set spec.headers block! | (spec.headers: [])]
            [set spec.content [any-string! | binary!] | (spec.content: null)]
        ]
    ]

* The TUPLE!s help us see we&#39;re not making function calls, which is nice

* /LOCAL is a legitimate normal refinement, and `&lt;local&gt;` variables are truly local--you can&#39;t slip them in from the caller.  Because they are invisible, you can build function compositions that don&#39;t have to worry about colliding with their names.

    * It also frees up /LOCAL to just be a typical refinement, like TIME/LOCAL

Now let&#39;s throw in some UPARSE, with the SET-WORD!s for assignment...

    parse-write-dialect: func [port block &lt;local&gt; spec] [
        spec: port.spec
        parse block [  ; PARSE is now UPARSE
            [spec.method: word! | (spec.method: &#39;post)]
            try [spec.path: [file! | url!]]
            [spec.headers: block! | (spec.headers: [])]
            [spec.content: [any-string! | binary!] | (spec.content: null)]
        ]
    ]

It looks a little tighter...but then we also have the ability to factor the assignments out.  And as it happens, that last line could just be **try [any-string! | binary!]**, because TRY would assign the result to NULL if it can&#39;t match:

    parse-write-dialect: func [port block &lt;local&gt; spec] [
        spec: port.spec
        parse block [
            spec.method: [word! | (&#39;post)]
            spec.path: try [file! | url!]
            spec.headers: [block! | ([])]
            spec.content: try [any-string! | binary!]
        ]
    ]

Improved!</description>
    
    <lastBuildDate>Fri, 08 Dec 2023 02:14:06 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/minor-but-nice-prot-http-r-parsing-improvements/1945.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Minor (but nice!) %prot-http.r parsing improvements</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1945">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>parse-write-dialect: func [port block &lt;local&gt; spec] [
    spec: port.spec
    parse block [
        spec.method: [word! | ('post)]
        spec.path: opt [file! | url!]
        spec.headers: [block! | ([])]
        spec.content: try [any-string! | binary!]
    ]
]
</code></pre>
</blockquote>
</aside>
<p>Wow, that cleans up beautifully! You say it's minor, and maybe it is, but it looks like the kind of brevity you'll be thanking yourself for again and again when you revisit the code in the future.</p>
          <p><a href="https://forum.rebol.info/t/minor-but-nice-prot-http-r-parsing-improvements/1945/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/minor-but-nice-prot-http-r-parsing-improvements/1945/2</link>
        <pubDate>Sat, 27 Aug 2022 17:49:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1945-2</guid>
        <source url="https://forum.rebol.info/t/minor-but-nice-prot-http-r-parsing-improvements/1945.rss">Minor (but nice!) %prot-http.r parsing improvements</source>
      </item>
      <item>
        <title>Minor (but nice!) %prot-http.r parsing improvements</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here's is R3-Alpha's <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/prot-http.r">PARSE-WRITE-DIALECT</a> from %prot-http.r</p>
<pre><code>parse-write-dialect: func [port block /local spec] [
    spec: port/spec
    parse block [
        [set block word! (spec/method: block) | (spec/method: 'post)]
        opt [set block [file! | url!] (spec/path: block)]
        [set block block! (spec/headers: block) | (spec/headers: [])]
        [set block [any-string! | binary!] (spec/content: block) | (spec/content: none)]
    ]
]
</code></pre>
<p>You couldn't set paths in R3-Alpha parse, which is weird.  So things had to be captured into a temporary variable (it reused the input block for some reason).</p>
<p>Let's imagine that setting paths were legal:</p>
<pre><code>parse-write-dialect: func [port block /local spec] [
    spec: port/spec
    parse block [
        [set spec/method word! | (spec/method: 'post)]
        opt [set spec/path [file! | url!]]
        [set spec/headers block! | (spec/headers: [])]
        [set spec/content [any-string! | binary!] | (spec/content: none)]
    ]
]
</code></pre>
<p>Let's do a quick transformation of this to PARSE3 in Ren-C, where the keyword TRY now replaces OPT:</p>
<pre><code>parse-write-dialect: func [port block &lt;local&gt; spec] [
    spec: port.spec
    parse3 block [  ; PARSE3 is R3-Alpha-compatible parse
        [set spec.method word! | (spec.method: 'post)]
        try [set spec.path [file! | url!]]
        [set spec.headers block! | (spec.headers: [])]
        [set spec.content [any-string! | binary!] | (spec.content: null)]
    ]
]
</code></pre>
<ul>
<li>
<p>The TUPLE!s help us see we're not making function calls, which is nice</p>
</li>
<li>
<p>/LOCAL is a legitimate normal refinement, and <code>&lt;local&gt;</code> variables are truly local--you can't slip them in from the caller.  Because they are invisible, you can build function compositions that don't have to worry about colliding with their names.</p>
<ul>
<li>It also frees up /LOCAL to just be a typical refinement, like TIME/LOCAL</li>
</ul>
</li>
</ul>
<p>Now let's throw in some UPARSE, with the SET-WORD!s for assignment...</p>
<pre><code>parse-write-dialect: func [port block &lt;local&gt; spec] [
    spec: port.spec
    parse block [  ; PARSE is now UPARSE
        [spec.method: word! | (spec.method: 'post)]
        try [spec.path: [file! | url!]]
        [spec.headers: block! | (spec.headers: [])]
        [spec.content: [any-string! | binary!] | (spec.content: null)]
    ]
]
</code></pre>
<p>It looks a little tighter...but then we also have the ability to factor the assignments out.  And as it happens, that last line could just be <strong>try [any-string! | binary!]</strong>, because TRY would assign the result to NULL if it can't match:</p>
<pre><code>parse-write-dialect: func [port block &lt;local&gt; spec] [
    spec: port.spec
    parse block [
        spec.method: [word! | ('post)]
        spec.path: try [file! | url!]
        spec.headers: [block! | ([])]
        spec.content: try [any-string! | binary!]
    ]
]
</code></pre>
<p>Improved!</p>
          <p><a href="https://forum.rebol.info/t/minor-but-nice-prot-http-r-parsing-improvements/1945/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/minor-but-nice-prot-http-r-parsing-improvements/1945/1</link>
        <pubDate>Sat, 27 Aug 2022 17:38:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1945-1</guid>
        <source url="https://forum.rebol.info/t/minor-but-nice-prot-http-r-parsing-improvements/1945.rss">Minor (but nice!) %prot-http.r parsing improvements</source>
      </item>
  </channel>
</rss>
