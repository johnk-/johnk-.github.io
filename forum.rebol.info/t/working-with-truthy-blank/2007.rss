<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Working With Truthy BLANK!</title>
    <link>https://forum.rebol.info/t/working-with-truthy-blank/2007</link>
    <description>The current re-imagining of the concept of truthy/falsey involves the idea that *anything you can put into a block is truthy*.  That includes BLANK!.

~null~ isotopes are falsey, and will REIFY to be **`~null~`** which can be somewhat clumsy-looking.

But consider some test cases for seeing how SPLIT-PATH works, looking a bit like this:

    split-path-tests:  [
        %foo                            [_ %foo]
        %/c/test/test2                  [%/c/test/ %test2]
        %/c/test                        [%/c/ %test]
        %//test                         [%// %test]
        %/test                          [%/ %test]
        %//                             [%/ %/]
        %.                              [%./ _]
        %./                             [%./ _]
        %./.                            [%./ %./]
        &lt;...etc...&gt;
    ]

SPLIT-PATH is a multi-return routine, which gives back two values: the path and the filename.  But if one or the other is missing then that component will be null, which is useful for testing with IF (or using DEFAULT with).

But if we just blindly changed the tests to reify, it would become less legible:

    split-path-tests:  [
        %foo                            [~null~ %foo]
        %/c/test/test2                  [%/c/test/ %test2]
        %/c/test                        [%/c/ %test]
        %//test                         [%// %test]
        %/test                          [%/ %test]
        %//                             [%/ %/]
        %.                              [%./ ~null~]
        %./                             [%./ ~null~]
        %./.                            [%./ %./]
        &lt;...etc...&gt;
    ]

However...with blanks being truthy, this means you that you can take a variable which may be null and turn it into a blank, like this:

    reduce [any [path _] any [file _]]

That&#39;s rather succinct!  Probably so succinct that it doesn&#39;t need its own native to express.

(I thought it was neat.)</description>
    
    <lastBuildDate>Sat, 14 Jan 2023 15:21:04 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/working-with-truthy-blank/2007.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Working With Truthy BLANK!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The current re-imagining of the concept of truthy/falsey involves the idea that <em>anything you can put into a block is truthy</em>.  That includes BLANK!.</p>
<p>~null~ isotopes are falsey, and will REIFY to be <strong><code>~null~</code></strong> which can be somewhat clumsy-looking.</p>
<p>But consider some test cases for seeing how SPLIT-PATH works, looking a bit like this:</p>
<pre><code>split-path-tests:  [
    %foo                            [_ %foo]
    %/c/test/test2                  [%/c/test/ %test2]
    %/c/test                        [%/c/ %test]
    %//test                         [%// %test]
    %/test                          [%/ %test]
    %//                             [%/ %/]
    %.                              [%./ _]
    %./                             [%./ _]
    %./.                            [%./ %./]
    &lt;...etc...&gt;
]
</code></pre>
<p>SPLIT-PATH is a multi-return routine, which gives back two values: the path and the filename.  But if one or the other is missing then that component will be null, which is useful for testing with IF (or using DEFAULT with).</p>
<p>But if we just blindly changed the tests to reify, it would become less legible:</p>
<pre><code>split-path-tests:  [
    %foo                            [~null~ %foo]
    %/c/test/test2                  [%/c/test/ %test2]
    %/c/test                        [%/c/ %test]
    %//test                         [%// %test]
    %/test                          [%/ %test]
    %//                             [%/ %/]
    %.                              [%./ ~null~]
    %./                             [%./ ~null~]
    %./.                            [%./ %./]
    &lt;...etc...&gt;
]
</code></pre>
<p>However...with blanks being truthy, this means you that you can take a variable which may be null and turn it into a blank, like this:</p>
<pre><code>reduce [any [path _] any [file _]]
</code></pre>
<p>That's rather succinct!  Probably so succinct that it doesn't need its own native to express.</p>
<p>(I thought it was neat.)</p>
          <p><a href="https://forum.rebol.info/t/working-with-truthy-blank/2007/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/working-with-truthy-blank/2007/1</link>
        <pubDate>Sat, 14 Jan 2023 15:21:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2007-1</guid>
        <source url="https://forum.rebol.info/t/working-with-truthy-blank/2007.rss">Working With Truthy BLANK!</source>
      </item>
  </channel>
</rss>
