<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Cool New Repurposing of ANY In PARSE</title>
    <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662</link>
    <description>It&#39;s a bit of a pain to collect alternate rules.  For instance:

    alternates: copy []

    rules: [[some integer!] [3 text!]]

    for-each rule rules [
        append alternates compose [(rule) |]
    ]

    parse data [alternates]

That will give you alternates as **[[some integer!] | [3 text!] |]** 

But that rule will *always succeed*...should both the component rules fail to match, it will act as a no-op.  Because it&#39;s equivalent to **[[some integer!] | [3 text!] | []]**, and **[]** will always succeed.

You get a similar problem if you go the other way.

    for-each rule rules [
        append alternates compose [| (rule)]
    ]

Now you&#39;ve got a rule that is always a no-op: **[| [some integer!] | [3 text!]]**.  Again, this is equivalent to **[[] | [some integer!] | [3 text!]]**, and this time the **[]** succeeds before the other rules get a chance.

You can hack around this by starting out with **alternates: [false]**.  This way, you can add the **[| (rule)]** and it will never run the false.  So it works.

## Wouldn&#39;t a New Meaning for the ANY Combinator be Better?

Having reclaimed ANY it seems it would be perfect for this.  Why not:

    rules: [[some integer!] [3 text!]]
    parse data [any (rules)]

You could leave your block in its regular old form, and use it that way.  Dyn-o-mite!

# Subtlety: A Different Meaning For BLOCK!s

When you use ANY with a literal block, there&#39;s something a bit unusual going on:

     &gt;&gt; parse [1 &quot;two&quot; &lt;three&gt;] [some any [integer! text! tag!]]
     == &lt;three&gt;

Ordinarily, a block like **`[integer! text! tag!]`** would expect to see three things in sequence.  But under the context of ANY, the rules change... it&#39;s taking its parameter not as a *combinator*, but as a *BLOCK! by value*.

:hushed:

At first I thought this was bad, and we&#39;d have to enforce taking the blocks by value, e.g. as the product of a GROUP!:

     &gt;&gt; parse [1 &quot;two&quot; &lt;three&gt;] [some any ([integer! text! tag!])]
     == &lt;three&gt;

...or perhaps there&#39;d be some non-pure-BLOCK! way of helping to reassure people that the block wasn&#39;t going to be processed by PARSE&#39;s default BLOCK! combinator:

     &gt;&gt; parse [1 &quot;two&quot; &lt;three&gt;] [some any @[integer! text! tag!]]
     == &lt;three&gt;

But we&#39;re adults, here.  **And we&#39;re using a language whose whole concept is context-dependent meaning.**  If you can&#39;t cope with the interpretation of blocks changing depending on what you pass the block to, you&#39;re in the wrong place.

However, do note that under today&#39;s logic, fetching blocks through a WORD! reference will still run them through the BLOCK! combinator.  Hence you can&#39;t say:

    rules: [[some integer!] [3 text!]]
    parse data [any rules]  ; nope, you have to say [any (rules)]

So you need a group there, for now.  I don&#39;t have an offhand proof of why a variable fetch in that context should run the block combinator--maybe it shouldn&#39;t?  It&#39;s something to think about.

But long story short: Cool Feature, Use It!</description>
    
    <lastBuildDate>Sat, 09 Mar 2024 14:39:58 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Cool New Repurposing of ANY In PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="BlackATTR" data-post="2" data-topic="1662">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>This is a good one.</p>
</blockquote>
</aside>
<p>...indeed...</p>
<h2>
<a name="what-a-success-story-any-turned-out-to-be-astonished-1" class="anchor" href="https://forum.rebol.info#what-a-success-story-any-turned-out-to-be-astonished-1"></a>...What a Success Story ANY Turned Out To Be!!  <img src="https://forum.rebol.info/images/emoji/twitter/astonished.png?v=12" title=":astonished:" class="emoji" alt=":astonished:" loading="lazy" width="20" height="20">
</h2>
<p>The first place I thought to try it out was in REWORD, because I remembered it created a list of alternate patterns for what it was going to replace.  So if you say:</p>
<pre><code> reword/escape "a(thing)b(thing2)c" [thing "ALPHA" "thing2" "BETA"] ["(" ")"]
</code></pre>
<p>A simplified concept of the rules it built looked like:</p>
<pre><code>keyword-suffix-rules: [
    false
       |
    "thing" ")" (key: 'thing)
       |
    "thing2" ")" (key: "thing2")
]

match-rule: ["(" keyword-suffix-rules]
</code></pre>
<p><em>(If you're wondering why it's repeating the suffix ")" in each rule: the problem with putting it outside would be that "thing" would match "thing2" and then jump outside the rule block and see ")".  It would then be too late to consider thing2.)</em></p>
<p>So here we see that false match thing.  We can get rid of that, and the |, AND use UPARSE rule synthesis to get the <strong>key:</strong> on the outside!</p>
<pre><code>keyword-suffix-rules: [
    ["thing" ")" ('thing)]
    ["thing2" ")" ("thing2")]
]

match-rule: ["(", key: any (keyword-suffix-rules)]
</code></pre>
<h2>
<a name="thats-nothing-compared-to-what-it-did-to-whitespace-2" class="anchor" href="https://forum.rebol.info#thats-nothing-compared-to-what-it-did-to-whitespace-2"></a>That's Nothing Compared To What It Did To Whitespace!</h2>
<p>Continuing to look at the "generated list of alternates" scenario, it's a HUGE win for whitespace, which generates two levels of selection... one at the category level, and then for the instructions in the category:</p>
<pre><code>any ([[
    [space]
    collect any [
        [keep just push space keep Number]
        [keep just duplicate-top lf space]
        [keep just duplicate-indexed tab space keep Number]
        [keep just swap-top-2 lf tab]
        [keep just discard-top lf lf]
        [keep just slide-n-values tab lf keep Number]
    ]
] [
    [tab space]
    collect any [
        [keep just add space space]
        ...
    ]
    ...
]])
</code></pre>
<p>That's the stuff!  No sign of those pesky | and the weird edge cases they introduce.</p>
<h2>
<a name="but-there-was-a-surprise-application-for-any-3" class="anchor" href="https://forum.rebol.info#but-there-was-a-surprise-application-for-any-3"></a>But There Was A Surprise Application For ANY...</h2>
<p>What if you don't feel the | are just wrong for your generated expressions, but not  right for your source expression?</p>
<p>Let's say you're writing something with this kind of pattern:</p>
<pre><code>uparse data [while [not &lt;end&gt;] [
    ;
    ; Here are some comments about what we're doing here
    ; They might be long
    ;
    some "a", between "(" ")", '&lt;whatever&gt;
|
    ; It's not totally clear where to put that |.  Some people would put it
    ; aligned in the same column as the SOME, others would put it at
    ; indent level deeper.  But it's a non-sequitur
    ;
    x: [integer! | text!]
    keep (:[{Writing random code for an example is a pain} x])
|
    ; This could go on for a number of alternates, let's stop here.
    ; By the way, did you know there's a FAIL combinator now?  :-)
    ; It will set the `near` of the error message to the input position.
    ;
    fail "Tired of making things up, want to finish post"
]]
</code></pre>
<p><strong>This can be an application for ANY too!</strong>  Maybe you'd prefer to cluster your code in blocks and leave out the distracting <strong>|</strong>...</p>
<pre><code>uparse data [while [not &lt;end&gt;] any [
    ;
    ; Here are some comments about what we're doing here
    ; They might be long
    ;
    [some "a", between "(" ")", '&lt;whatever&gt;]

    ; It's not totally clear where to put that |.  Some people would put it
    ; aligned in the same column as the SOME, others would put it at
    ; indent level deeper.  But it's a non-sequitur
    [
        x: [integer! | text!]
        keep (:[{Writing random code for an example is a pain} x])
    ]

    ; This could go on for a number of alternates, let's stop here.
    ; By the way, did you know there's a FAIL combinator now?  :-)
    ; It will set the `near` of the error message to the input position.
    ;
    fail "Tired of making things up, want to finish post"
]]
</code></pre>
<p><strong>I hadn't thought of that, so it being useful for this was a surprise.</strong></p>
<p>Note that you don't need to put the rules inside an ANY in BLOCK!s if they are single rules.  <strong><code>any [some "a" some "b"]</code></strong> is legal, not just <strong><code>any [[some "a"] [some "b"]]</code></strong>  The FAIL at the end there isn't in a block, for instance.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/partying_face.png?v=12" title=":partying_face:" class="emoji only-emoji" alt=":partying_face:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662/4</link>
        <pubDate>Sun, 15 Aug 2021 05:55:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1662-4</guid>
        <source url="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662.rss">The Cool New Repurposing of ANY In PARSE</source>
      </item>
      <item>
        <title>The Cool New Repurposing of ANY In PARSE</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>This is a good one. <img src="https://forum.rebol.info/images/emoji/twitter/+1.png?v=9" title=":+1:" class="emoji" alt=":+1:"></p>
          <p><a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662/2</link>
        <pubDate>Sat, 14 Aug 2021 21:09:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1662-2</guid>
        <source url="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662.rss">The Cool New Repurposing of ANY In PARSE</source>
      </item>
      <item>
        <title>The Cool New Repurposing of ANY In PARSE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's a bit of a pain to collect alternate rules.  For instance:</p>
<pre><code>alternates: copy []

rules: [[some integer!] [3 text!]]

for-each rule rules [
    append alternates compose [(rule) |]
]

parse data [alternates]
</code></pre>
<p>That will give you alternates as <strong>[[some integer!] | [3 text!] |]</strong></p>
<p>But that rule will <em>always succeed</em>...should both the component rules fail to match, it will act as a no-op.  Because it's equivalent to <strong>[[some integer!] | [3 text!] | []]</strong>, and <strong>[]</strong> will always succeed.</p>
<p>You get a similar problem if you go the other way.</p>
<pre><code>for-each rule rules [
    append alternates compose [| (rule)]
]
</code></pre>
<p>Now you've got a rule that is always a no-op: <strong>[| [some integer!] | [3 text!]]</strong>.  Again, this is equivalent to <strong>[[] | [some integer!] | [3 text!]]</strong>, and this time the <strong>[]</strong> succeeds before the other rules get a chance.</p>
<p>You can hack around this by starting out with <strong>alternates: [false]</strong>.  This way, you can add the <strong>[| (rule)]</strong> and it will never run the false.  So it works.</p>
<h2>Wouldn't a New Meaning for the ANY Combinator be Better?</h2>
<p>Having reclaimed ANY it seems it would be perfect for this.  Why not:</p>
<pre><code>rules: [[some integer!] [3 text!]]
parse data [any (rules)]
</code></pre>
<p>You could leave your block in its regular old form, and use it that way.  Dyn-o-mite!</p>
<h1>Subtlety: A Different Meaning For BLOCK!s</h1>
<p>When you use ANY with a literal block, there's something a bit unusual going on:</p>
<pre><code> &gt;&gt; parse [1 "two" &lt;three&gt;] [some any [integer! text! tag!]]
 == &lt;three&gt;
</code></pre>
<p>Ordinarily, a block like <strong><code>[integer! text! tag!]</code></strong> would expect to see three things in sequence.  But under the context of ANY, the rules change... it's taking its parameter not as a <em>combinator</em>, but as a <em>BLOCK! by value</em>.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/hushed.png?v=9" title=":hushed:" class="emoji only-emoji" alt=":hushed:"></p>
<p>At first I thought this was bad, and we'd have to enforce taking the blocks by value, e.g. as the product of a GROUP!:</p>
<pre><code> &gt;&gt; parse [1 "two" &lt;three&gt;] [some any ([integer! text! tag!])]
 == &lt;three&gt;
</code></pre>
<p>...or perhaps there'd be some non-pure-BLOCK! way of helping to reassure people that the block wasn't going to be processed by PARSE's default BLOCK! combinator:</p>
<pre><code> &gt;&gt; parse [1 "two" &lt;three&gt;] [some any @[integer! text! tag!]]
 == &lt;three&gt;
</code></pre>
<p>But we're adults, here.  <strong>And we're using a language whose whole concept is context-dependent meaning.</strong>  If you can't cope with the interpretation of blocks changing depending on what you pass the block to, you're in the wrong place.</p>
<p>However, do note that under today's logic, fetching blocks through a WORD! reference will still run them through the BLOCK! combinator.  Hence you can't say:</p>
<pre><code>rules: [[some integer!] [3 text!]]
parse data [any rules]  ; nope, you have to say [any (rules)]
</code></pre>
<p>So you need a group there, for now.  I don't have an offhand proof of why a variable fetch in that context should run the block combinator--maybe it shouldn't?  It's something to think about.</p>
<p>But long story short: Cool Feature, Use It!</p>
          <p><a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662/1</link>
        <pubDate>Sat, 14 Aug 2021 18:35:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1662-1</guid>
        <source url="https://forum.rebol.info/t/the-cool-new-repurposing-of-any-in-parse/1662.rss">The Cool New Repurposing of ANY In PARSE</source>
      </item>
  </channel>
</rss>
