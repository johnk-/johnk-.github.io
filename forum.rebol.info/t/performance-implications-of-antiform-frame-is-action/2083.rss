<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Performance Implications of Antiform-FRAME!-is-Action</title>
    <link>https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083</link>
    <description>Making the antiform state of frames be [*&quot;interpret this frame as an action when referenced through a WORD!&quot;*](https://forum.rebol.info/t/taking-action-on-function-vs-action/596/6?u=hostilefork) is a *deep* change.  The implications haven&#39;t been fully absorbed, and there are some things I noticed that create troubles for optimization.

Looking again at a simple example:

    &gt;&gt; f: make frame! :append
    == make frame! [
        series: ~
        value: ~
        part: ~
        dup: ~
        line: ~
    ]

    &gt;&gt; f.value: 5

    &gt;&gt; append5: anti f
    == ~make frame! [
        series: ~
        value: 5
        part: ~
        dup: ~
        line: ~
    ]~  ; anti

    &gt;&gt; append5 [a b c]
    == [a b c 5]

That&#39;s cool, for sure.  And it removes the number of things we have to name in the system (I was particularly annoyed by having to differentiate &quot;action&quot; and &quot;activation&quot; when there was a separate ACTION! datatype).

## But What If The Frame Is Modified...?

Say the user writes this:

    &gt;&gt; append5 (f.series: [d e f], [a b c])
    == ???

When running the specialization **append5** we&#39;d already decided that the series parameter wasn&#39;t specialized and needed to be fulfilled.  But the user is *specializing the series parameter during the fulfillment*.

At best, this is semantically messy (and can manifest as hard-to-comprehend behavior when the example is less obvious than this one).  At worst, the internal bookkeeping of the evaluator gets confused and it crashes due to having the slot it&#39;s filling changed out from under it.

## We Could Snapshot The Frame... But Snapshots Aren&#39;t Free

If we are forced to make a snapshot of the frame state at the start of execution, then that means making a copy, which takes time and space.

The space isn&#39;t actually the problem...because we can just put the snapshot in the frame space we&#39;re already making for the function call.

Where we pay is that it effectively adds an extra traversal of the arguments.  We&#39;re traversing the space to make the copy (with some slots unspecialized and needing to be fulfilled).  Then we&#39;re traversing the space again to do the fulfillment of the unspecialized arguments.

With no snapshot, we could leave the memory for the frame cells completely garbage at the outset... and fill them as we go with either a fulfillment or a specialization.  **Empirically, avoiding the snapshot could save as much as 5% of the average total runtime of the interpreter.**

## Another Issue: No Moment To Cache Optimizations

When there was a separate &quot;make an action! out of this frame&quot; step, the action was a way of saying &quot;freeze!&quot; on the arguments, so they could no longer be changed.  So it avoids the problem of changes during fulfillment.

But it did something else: it meant properties of the arguments could be studied...to remember things like *&quot;what&#39;s the first unspecialized argument slot&quot;*.

(It might seem that it would be easy to find the first unspecialized argument slot.  But this isn&#39;t just a search from the beginning of the frame, because it&#39;s possible to reorder arguments or have partial specializations.  So it&#39;s tricky.)

## How About Just Freezing The Frames If They&#39;re Executed?

The simplest idea here is just to say that once you invoke a frame, it&#39;s frozen...you can&#39;t change its fields anymore.  Then that freezing process can do the caching of properties that accelerate action execution, and all is well.

If you want to keep a frame mutable, then COPY it before making it an antiform.  The issue is just that changes to the frame won&#39;t be seen by the isotope you made.

## Do Technicalities Like This Make Me Question FRAME!-as-Action?

Well, it&#39;s a delicate balance of choices, and I&#39;m still feeling it out.

The worry is that the number of concerns being exposed to users is such that the properties of &quot;the kind frame you can run is different enough that you basically have to think of it as a different type&quot;.

To avoid that in this case, it&#39;s better to do the freezing implicitly vs. saying that you need a special routine like RUNS to bless a frame as runnable.  This way, RUNS can be understood as simply taking in a plain frame! and giving back an isotopic frame!... something you could easily write yourself.

Crafting a uniformity of experience with FRAME! so it doesn&#39;t feel like it&#39;s making up for a missing ACTION! type is certainly something to continue to be mindful of.  But performance needs to be minded too at some point, so I&#39;m doing what I can about that.</description>
    
    <lastBuildDate>Mon, 09 Dec 2024 09:23:08 +0000</lastBuildDate>
    <category>Optimization</category>
    <atom:link href="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Performance Implications of Antiform-FRAME!-is-Action</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="2083">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It does mean that if you want to actually take an antiform parameter as an argument, it has to be a ^META parameter...even though it's stable. But that's not such a problem.</p>
</blockquote>
</aside>
<p>It ultimately turned out that this <em>was</em> a problem, and a problem that is resolved now...by pushing back to where NOTHING (antiform blank, e.g. ~ antiform) is the only stable form that requires you to use ^META conventions.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="2083">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>When you look at what I mention in the other thread about how you can't really "re-skin" actions anyway (at least with trivial mechanics), I think this suggests that whatever the "MAKE FRAME!" operator is needs to go back to filling the unfulfilled arguments with antiform blank. Antiform parameters need to be friendly when reflecting specs.</p>
</blockquote>
</aside>
<p><a href="https://forum.rebol.info/t/default-values-and-make-frame-2024-edition/2347/2">I followed through the implications of this</a>, to really get all the ducks in a row.</p>
<p>The results are converging on something quite coherent and useful:</p>
<pre><code>&gt;&gt; append/
== ~#[frame! "append" [series value part dup line]]]~  ; anti

&gt;&gt; words of append/
== [series value part dup line]

&gt;&gt; append.dup
== ~#[parameter! :[any-number? pair!]]~  ; anti

&gt;&gt; append.dup.text
== "Duplicates the append a specified number of times"

&gt;&gt; append.dup.optional  ; seems better than ".is-refinement"
== ~okay~  ; anti

&gt;&gt; append.dup.spec  ; would ".types" be better?  :-/
== [any-number? pair!]
</code></pre>
<p>Here we see the real power coming from the Ren-C concepts.  We're exploiting the duality of FRAME! and action, where the antiform of a frame <em>is</em> the action.  And then further, the idea that there's a separate dot operation for tuple picking...we can keep that meaning so that it still works on the antiform frame, to select out the antiform parameters.</p>
<p>And MAKE FRAME! goes back to unsetting slots:</p>
<pre><code>&gt;&gt; make frame! append/
== #[frame! [
    series: ~
    value: ~
    part: ~
    dup: ~
    line: ~
]]
</code></pre>
<p>While COPY UNRUN can be used to get a FRAME! that lets you tinker with the interface:</p>
<pre><code>&gt;&gt; copy unrun append/  ; UNRUN is just UNQUASI META for antiform frames
== #[frame! [
    series: ~#[parameter! [
        ~void~ any-series? port! map! object! module! bitset!]
    ]~
    value: ~#[parameter! [~void~ element? splice?]]~
    part: ~#[parameter! :[any-number? any-series? pair!]]~
    dup: ~#[parameter! :[any-number? pair!]]~
    line: ~#[parameter! :[]]~
]]
</code></pre>
<p>This stuff may look obvious or clear in retrospect (well it <em>should</em> look clear and obvious, though you'd probably have to use it to really have it sink in.)  But it's quite hard to reason about and adjust in a system that has to keep running.</p>
          <p><a href="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/5</link>
        <pubDate>Mon, 09 Dec 2024 09:07:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2083-5</guid>
        <source url="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083.rss">Performance Implications of Antiform-FRAME!-is-Action</source>
      </item>
      <item>
        <title>Performance Implications of Antiform-FRAME!-is-Action</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://forum.rebol.info/t/frame-action-duality-examined/1898/2">I've written up some of the issues that have arisen in another thread</a>.</p>
<p>But I wanted to mention something else that's emerged:</p>
<h3><a name="p-7930-antiform-parameter-being-orneryunset-is-a-headache-1" class="anchor" href="https://forum.rebol.info#p-7930-antiform-parameter-being-orneryunset-is-a-headache-1"></a>Antiform PARAMETER! Being Ornery/"unset" is A Headache</h3>
<p>One thing is a good idea: that's the premise of having FRAME! cells with antiform parameters in them be <em>the</em> representation of an unfulfilled parameter (or "Hole").</p>
<p>This means a function's interface can be expressed without having a special hidden "bit" to say what's a parameter description vs. a specialized parameter value <em>("locals" historically were specializations to nothing, but <a href="https://forum.rebol.info/t/dropping-with-in-static/2335">now you can use any value</a> that isn't a parameter antiform)</em>.  The antiform parameter state becomes the "I'm an unfulfilled parameter" bit, which is already a sunk cost in the system for how to deal with it.</p>
<p>It does mean that if you want to actually take an antiform parameter as an argument, it has to be a ^META parameter...even though it's stable.  But that's not such a problem.</p>
<p>What <em>is</em> a headache is having antiform parameters be just as hard to handle as nothings/tripwires.</p>
<p>When you look at what I mention in the other thread about how you can't really "re-skin" actions anyway (at least with trivial mechanics), I think this suggests that whatever the "MAKE FRAME!" operator is needs to go back to filling the unfulfilled arguments with antiform blank.  Antiform parameters need to be friendly when reflecting specs.</p>
<p>The optimization/correctness issues simply need to be addressed some other way.</p>
          <p><a href="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/4</link>
        <pubDate>Wed, 27 Nov 2024 22:15:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2083-4</guid>
        <source url="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083.rss">Performance Implications of Antiform-FRAME!-is-Action</source>
      </item>
      <item>
        <title>Performance Implications of Antiform-FRAME!-is-Action</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2083">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Say the user writes this:</p>
<pre><code>&gt;&gt; f: make frame! :append
&gt;&gt; f.value: 5
&gt;&gt; append5: anti f

&gt;&gt; append5 (f.series: [d e f], [a b c])
== ???
</code></pre>
<p>When running the specialization <strong>append5</strong> we'd already decided that the series parameter wasn't specialized and needed to be fulfilled. But the user is <em>specializing the series parameter during the fulfillment</em>.</p>
<p><em>We Could Snapshot The Frame... But Snapshots Aren't Free</em>...</p>
</blockquote>
</aside>
<p>So I think the answer here is just to give users the choice.  If you want more efficiency, instead of just ANTI-ing the frame, you can freeze it as well:  <img src="https://forum.rebol.info/images/emoji/twitter/cold_face.png?v=12" title=":cold_face:" class="emoji" alt=":cold_face:" loading="lazy" width="20" height="20"></p>
<pre><code>append5: anti freeze f
</code></pre>
<p><em>(A little unfortunate that reads as if it's negating the freezing.  I guess we could have a longer word for <strong>antiformify</strong> or <strong>antiformize</strong> if you wanted to be clearer.  I wouldn't want to call it ANTIFORM as that is a good noun for a variable holding an antiform.)</em></p>
<p>Since a frozen frame can be reliably trusted to be used as reference for the parameter typechecking from start to finish, there's no need to make a copy to start with.  But a non-frozen frame has to be copied or the system must do so automatically.</p>
<p>We could say that RUNS will freeze a frame that isn't already frozen by default.</p>
<pre><code>runs f
=&gt; 
anti freeze ensure frame! f
</code></pre>
<p>If people are upset that their frame can't be modified after they use RUNS, then they can choose between either <strong>runs copy f</strong>, or <strong>anti f</strong>... each of which offers more flexibility for some cost (either memory cost once for the copy, or on every call with the anti).</p>
<h2><a name="p-7623-more-general-note-on-using-up-frames-vs-copying-1" class="anchor" href="https://forum.rebol.info#p-7623-more-general-note-on-using-up-frames-vs-copying-1"></a>More General Note On Using Up Frames vs. Copying</h2>
<p>It's a fairly large efficiency point that when you do something like an ENCLOSE that when you EVAL the FRAME! you receive, it uses that for the function call.  So EVAL FRAME will effectively destroy it from the point of view of the person who calls EVAL.  I've figured it is easy enough to say <strong>eval copy frame</strong> if you intend to use the frame multiple times.</p>
<p>I think this should extend to RUN, which is variadic (EVAL will not gather unspecialized parameters from the callsite, but rather consider them to be null).</p>
<pre><code>&gt;&gt; f: make frame! :append

&gt;&gt; f.value: [d e]

&gt;&gt; run f [a b c]
== [a b c [d e]]
</code></pre>
<p>So in my thinking here, passing a frame to EVAL or RUN means it should be consumed.  But presumably not <em>antiform frames</em>, which we could assume are intended for multiple executions.</p>
<p>It gets a bit fuzzier in other cases which accept FRAME! but know you don't intend to treat it disposably...such as passing it as a predicate.  However they ran the frame, it would have to make a copy...ideally threaded in with the execution.  We could restrict it to say such arguments insist you pass them frozen frames, in order to guide you toward efficient choices.  <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<h2><a name="p-7623-residue-of-when-frames-had-an-action-2" class="anchor" href="https://forum.rebol.info#p-7623-residue-of-when-frames-had-an-action-2"></a>Residue of When FRAME!s "had-an" ACTION!</h2>
<p>The original "actions are antiform frames" change still had under the hood two different formats for what underlied a FRAME!.  Each had a different cell layout...one inherited from legacy action, and the other from frame.</p>
<p>We're still going to need the two layouts for purposes of optimization.  When you ADAPT some code onto an existing frame, you're creating a new function identity...but you're reusing the other frame's argument definitions and typechecking, adding nothing.  So it makes sense for the action's new implementation array (called a "Details") to serve as the identity for that action.  But when you make a specialization you are reusing the implementation while providing arguments, meaning the variables are the unique thing (called a Varlist).</p>
<p>If we standardized on all FRAME! cells pointing at a Varlist, it would be consistent and make the implementation easier.  But it would be wasteful.  I'd like it if the implementation could completely hide the optimization, so that to the user's eyes it seems like Details-based frames are equivalent to frozen Varlist frames.</p>
<p>I <em>think</em> I can do this.  One place where we lose a bit would be if you just want to copy an action's identity for the purposes of avoiding it being able to be hijacked...and that lightweight copying mechanic was all that COPY of an action meant.  But now, if COPY on a frame insists on giving you something where the fields can be edited, then we can't use that.  we could have a fused FROZEN-COPY operation that would notice it could make an optimization?  :-/  I can try that for now.</p>
          <p><a href="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/3</link>
        <pubDate>Tue, 10 Sep 2024 19:20:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2083-3</guid>
        <source url="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083.rss">Performance Implications of Antiform-FRAME!-is-Action</source>
      </item>
      <item>
        <title>Performance Implications of Antiform-FRAME!-is-Action</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2083">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; f: make frame! :append
== make frame! [
    series: ~
    value: ~
    part: ~
    dup: ~
    line: ~
]
</code></pre>
</blockquote>
</aside>
<h2><a name="p-6772-another-performance-wrinkle-looking-in-two-places-1" class="anchor" href="https://forum.rebol.info#p-6772-another-performance-wrinkle-looking-in-two-places-1"></a>Another Performance Wrinkle: Looking In Two Places</h2>
<p>During the argument gathering process, when the evaluator is visiting a slot it needs to have one of two things on hand:</p>
<ul>
<li><strong>the parameter specification</strong> (so it can know if it's a refinement or quoted or whatever while it gathers it)<br>
-or-</li>
<li><strong>the specialized value</strong></li>
</ul>
<p>With the idea that FRAME!s are just automatically transmuted into actions by virtue of being antiform, we are saying that the specialization comes from the frame's cell for that slot if it's not "nothing" (~ antiform).  But if it <em>is</em> nothing, we have to look somewhere else for the parameter information (namely the "parent" of the frame--whatever frame this was copied or instantiated from).</p>
<p><em>Having to look in two different places adds a not-insignificant cost.</em>  It means traversing two lists instead of one (incrementing two unrelated pointers), and is also a locality issue from not being able to just work on one location.</p>
<p>That caused me to wonder if the moment I describe of a <code>Force_Frame_Runnable()</code> that locks the frame and caches optimizations could sneakily write in the parameter information over any unset cells.  This would be done only once, and execution could be faster.</p>
<p>But this would weave a tangled web.  It would mean that an actual specialized frame would wind up looking like this after an execution:</p>
<pre><code>&gt;&gt; f
== make frame! [
    series: ~#[parameter! [types: [any-series?] refinement: ~false~ ...]]~
    value: 5
    part: ~#[parameter! [types: [integer! any-series?] refinement: ~true~ ...]]~
    dup: ~#[parameter! [types: [integer!] refinement: ~true~ ...]]~
    line: ~#[parameter! [types: ~null~  refinement: ~true~ ...]]~
]
</code></pre>
<p><em>(If you're wondering what a PARAMETER! is, it's an internal type which I've been inching toward exposing as a user-visible type for manipulating parameters.  Basically a compressed object--something like R3-Alpha's EVENT!--which only has very specific fields pertinent to parameter fulfillment.)</em></p>
<p>Hence I've been wracking my brain trying to figure out how to preserve the illusion of these fields being unset, when they've actually got a parameter specification in them.</p>
<p><em>It's a difficult illusion to implement</em>, and trying to do so starts bending the codebase pretty far from the goal of simplicity, just to accomplish some more performance.</p>
<h2><a name="p-6772-what-if-we-embrace-parameter-as-unspecialized-2" class="anchor" href="https://forum.rebol.info#p-6772-what-if-we-embrace-parameter-as-unspecialized-2"></a>WHAT IF... We Embrace PARAMETER!-as-Unspecialized?</h2>
<p><strong>This way the "optimization" of using an unspecialized parameter slot to hold a parameter definition becomes the actual way in which parameters can be specified and reflected.</strong></p>
<p>You could build a function from scratch by making a FRAME! with these antiform parameters in it, and then ADAPT'ing some code into it.</p>
<pre><code>&gt;&gt; f: make frame! [x: anti make parameter! [integer!]]
== make frame! [
    x: ~#[parameter! [integer!]]~  ; anti
]

&gt;&gt; test: adapt f [print ["x is" x]]
== ~#[frame! ...]~  ; anti

&gt;&gt; test 10
x is 10
</code></pre>
<p>This is starting to look very much like my prophetic post: <strong><a href="https://forum.rebol.info/t/seeing-all-action-s-as-variadic-frame-makers/1002">"Seeing all ACTION!s as Variadic FRAME!-makers"</a></strong>.  The idea gives the reflection we'd want of being able to extract the parameter information, as well as to be able to modify it.  The help string could actually go inside the parameter as well, which would solve some bloat that we experience due to putting this in a copied state elsewhere.</p>
<p>This would also mean that you could specialize parameters to be trash, as an isotopic parameter would be the only kind of value you couldn't specialize to.  The term for an isotopic parameter! could be "unspecialized?", so above <strong>unspecialized? f.series</strong> would return true.</p>
<h2><a name="p-6772-what-about-downsides-3" class="anchor" href="https://forum.rebol.info#p-6772-what-about-downsides-3"></a>What About Downsides?</h2>
<p>Obviously the rendering is hideous, and I lament losing the elegance of the ~ that the unset state had.  The web console has much more leeway than a pure text one (for this and other rendering difficulties), like being able to show a collapsed form you can expand for more details.</p>
<p>We could try workarounds, like simply abbreviating when things are inside the frame, and then blow them up when they were extracted:</p>
<pre><code>&gt;&gt; f: make frame! [x: isotopic make parameter! [integer!]
== make frame! [
    x: ~#[parameter! ...]~
]

&gt;&gt; f.x
== ~#[parameter! [integer!]]  ; anti
</code></pre>
<p>You wouldn't be able to use DEFAULT to act on unspecialized fields, like <strong>f.x: default [...]</strong>, unless DEFAULT was rethought to consider unspecialized states as one of the things it considers "non-valued".</p>
<p>Once you overwrote an unspecialized slot, there wouldn't be an easy way to undo it.  Not necessarily important... just mentioning that it's different from today, where you can put a value in a slot and then change your mind by just overwriting it with nothing again.</p>
<p>Using an unspecialized frame state wouldn't cause an error on access (though we'd presume there'd be relatively few places you could pass an antiform parameter as an argument, especially since they're not legal in parameter fulfillments since they represent the unspecialized state).</p>
<h2><a name="p-6772-still-only-partial-exposure-of-frame-magic-4" class="anchor" href="https://forum.rebol.info#p-6772-still-only-partial-exposure-of-frame-magic-4"></a>Still Only Partial Exposure of FRAME! Magic</h2>
<p>The code that runs from a frame still lurks behind the scenes.  When you say <strong>adapt frame [...]</strong> to put code into it, you get back a FRAME! that looks identical to the one you put in--at least as far as the parameters and specializations are concerned.</p>
<p>This is kind of par for the course.  In JavaScript, digging into what it gives back for a function doesn't really give a body when you drill down...just the prototype:</p>
<p><img src="https://forum.rebol.info/uploads/default/original/1X/2415b9c261f2f11e18382b622ac6025a1148e3fc.png" alt="image" data-base62-sha1="59dJCFLQg9e2oLJ4zASlYkpUcgs" width="426" height="478"></p>
<p>And of course, native code won't show a body (though we conceivably could expose the C code as a string, at the cost of having to ship that C code in the executable and take up space).</p>
<p>It's good to look at something like JavaScript just to get a reminder that nothing is perfect, and at least Ren-C's model is packing some serious functionality.</p>
          <p><a href="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/2</link>
        <pubDate>Wed, 20 Dec 2023 22:38:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2083-2</guid>
        <source url="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083.rss">Performance Implications of Antiform-FRAME!-is-Action</source>
      </item>
      <item>
        <title>Performance Implications of Antiform-FRAME!-is-Action</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Making the antiform state of frames be <a href="https://forum.rebol.info/t/taking-action-on-function-vs-action/596/6"><em>"interpret this frame as an action when referenced through a WORD!"</em></a> is a <em>deep</em> change.  The implications haven't been fully absorbed, and there are some things I noticed that create troubles for optimization.</p>
<p>Looking again at a simple example:</p>
<pre><code>&gt;&gt; f: make frame! :append
== make frame! [
    series: ~
    value: ~
    part: ~
    dup: ~
    line: ~
]

&gt;&gt; f.value: 5

&gt;&gt; append5: anti f
== ~make frame! [
    series: ~
    value: 5
    part: ~
    dup: ~
    line: ~
]~  ; anti

&gt;&gt; append5 [a b c]
== [a b c 5]
</code></pre>
<p>That's cool, for sure.  And it removes the number of things we have to name in the system (I was particularly annoyed by having to differentiate "action" and "activation" when there was a separate ACTION! datatype).</p>
<h2>
<a name="but-what-if-the-frame-is-modified-1" class="anchor" href="https://forum.rebol.info#but-what-if-the-frame-is-modified-1"></a>But What If The Frame Is Modified...?</h2>
<p>Say the user writes this:</p>
<pre><code>&gt;&gt; append5 (f.series: [d e f], [a b c])
== ???
</code></pre>
<p>When running the specialization <strong>append5</strong> we'd already decided that the series parameter wasn't specialized and needed to be fulfilled.  But the user is <em>specializing the series parameter during the fulfillment</em>.</p>
<p>At best, this is semantically messy (and can manifest as hard-to-comprehend behavior when the example is less obvious than this one).  At worst, the internal bookkeeping of the evaluator gets confused and it crashes due to having the slot it's filling changed out from under it.</p>
<h2>
<a name="we-could-snapshot-the-frame-but-snapshots-arent-free-2" class="anchor" href="https://forum.rebol.info#we-could-snapshot-the-frame-but-snapshots-arent-free-2"></a>We Could Snapshot The Frame... But Snapshots Aren't Free</h2>
<p>If we are forced to make a snapshot of the frame state at the start of execution, then that means making a copy, which takes time and space.</p>
<p>The space isn't actually the problem...because we can just put the snapshot in the frame space we're already making for the function call.</p>
<p>Where we pay is that it effectively adds an extra traversal of the arguments.  We're traversing the space to make the copy (with some slots unspecialized and needing to be fulfilled).  Then we're traversing the space again to do the fulfillment of the unspecialized arguments.</p>
<p>With no snapshot, we could leave the memory for the frame cells completely garbage at the outset... and fill them as we go with either a fulfillment or a specialization.  <strong>Empirically, avoiding the snapshot could save as much as 5% of the average total runtime of the interpreter.</strong></p>
<h2>
<a name="another-issue-no-moment-to-cache-optimizations-3" class="anchor" href="https://forum.rebol.info#another-issue-no-moment-to-cache-optimizations-3"></a>Another Issue: No Moment To Cache Optimizations</h2>
<p>When there was a separate "make an action! out of this frame" step, the action was a way of saying "freeze!" on the arguments, so they could no longer be changed.  So it avoids the problem of changes during fulfillment.</p>
<p>But it did something else: it meant properties of the arguments could be studied...to remember things like <em>"what's the first unspecialized argument slot"</em>.</p>
<p>(It might seem that it would be easy to find the first unspecialized argument slot.  But this isn't just a search from the beginning of the frame, because it's possible to reorder arguments or have partial specializations.  So it's tricky.)</p>
<h2>
<a name="how-about-just-freezing-the-frames-if-theyre-executed-4" class="anchor" href="https://forum.rebol.info#how-about-just-freezing-the-frames-if-theyre-executed-4"></a>How About Just Freezing The Frames If They're Executed?</h2>
<p>The simplest idea here is just to say that once you invoke a frame, it's frozen...you can't change its fields anymore.  Then that freezing process can do the caching of properties that accelerate action execution, and all is well.</p>
<p>If you want to keep a frame mutable, then COPY it before making it an antiform.  The issue is just that changes to the frame won't be seen by the isotope you made.</p>
<h2>
<a name="do-technicalities-like-this-make-me-question-frame-as-action-5" class="anchor" href="https://forum.rebol.info#do-technicalities-like-this-make-me-question-frame-as-action-5"></a>Do Technicalities Like This Make Me Question FRAME!-as-Action?</h2>
<p>Well, it's a delicate balance of choices, and I'm still feeling it out.</p>
<p>The worry is that the number of concerns being exposed to users is such that the properties of "the kind frame you can run is different enough that you basically have to think of it as a different type".</p>
<p>To avoid that in this case, it's better to do the freezing implicitly vs. saying that you need a special routine like RUNS to bless a frame as runnable.  This way, RUNS can be understood as simply taking in a plain frame! and giving back an isotopic frame!... something you could easily write yourself.</p>
<p>Crafting a uniformity of experience with FRAME! so it doesn't feel like it's making up for a missing ACTION! type is certainly something to continue to be mindful of.  But performance needs to be minded too at some point, so I'm doing what I can about that.</p>
          <p><a href="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083/1</link>
        <pubDate>Wed, 20 Dec 2023 02:09:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2083-1</guid>
        <source url="https://forum.rebol.info/t/performance-implications-of-antiform-frame-is-action/2083.rss">Performance Implications of Antiform-FRAME!-is-Action</source>
      </item>
  </channel>
</rss>
