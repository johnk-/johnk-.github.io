<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Could we replace PARSE&#39;s OPT with TRY ?</title>
    <link>https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888</link>
    <description>The modern sense of TRY (circa 2023) works in concert with [definitional errors](https://forum.rebol.info/t/fail-vs-return-raise-the-new-age-of-definitional-failures/1852) to say *&quot;hey, wait, don&#39;t fail... you can be a no-op, that&#39;s fine.&quot;*

For example:

    &gt;&gt; block: []

    &gt;&gt; take block
    ** Error: Cannot take from empty series position

    &gt;&gt; try take block
    == ~null~  ; isotope

**This definition makes it a candidate for being a very literate alternative to OPT in parse!**

    &gt;&gt; parse &quot;aaaccc&quot; [some &quot;a&quot;, try some &quot;b&quot;, some &quot;c&quot;]
    == &quot;c&quot;

It helps make [the loss of &quot;ANY&quot; as a parse looping construct](https://forum.rebol.info/t/should-parse3s-any-be-rethought-repurposed/741) more palatable, as **`try some`**  is easier on the eyes than **`opt some`**.

## Haskell Offers Precedent Using TRY This Way

Haskell has **[try](https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:try)** defined as *&quot;Take a parser that may consume input, and on failure, go back to where we started and fail as if we didn&#39;t consume input.&quot;*

If I&#39;m reading that correctly, this is a parallel meaning to OPT.</description>
    
    <lastBuildDate>Thu, 03 Aug 2023 11:38:57 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Could we replace PARSE&#39;s OPT with TRY ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1888">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This definition makes it a candidate for being a very literate alternative to OPT in parse!</p>
<pre><code>&gt;&gt; parse "aaaccc" [some "a", try some "b", some "c"]
== "c"
</code></pre>
</blockquote>
</aside>
<p>I'd been letting this turn over in my head a bit before committing to it <em>(and deprecating OPT in the main UPARSE combinator set...though it would be defined in Redbol's parse a.k.a. PARSE2)</em>.</p>
<p>I started going through replacing it.  For the most part I think it reads much smoother, yet there was a little bit of a speedbump when I saw it used with literals.</p>
<p>For example, changing:</p>
<pre><code>parse url ["http" opt "s" "://gitlab.com/" ...]
</code></pre>
<p>To:</p>
<pre><code>parse url ["http" try "s" "://gitlab.com/" ...]
</code></pre>
<p>TRY feels imperative...like it is telling you to attempt to run some function.  While OPT feels more declarative... this is a thing that may or may not be there.</p>
<p>As it happens, it really is imperative: you are running a function... "s" produces a combinator.  That combinator can be redefined in parse variants via the combinator map.</p>
<p>Yet it still felt a bit strange to me at first to say you were "trying S".</p>
<p><strong>I think this is just a lack of familiarity, and it will seem more natural with time.</strong>  Even looking at it now, I think the OPT is ugly, and I can rationalize why it's even probably better to have people think of it as "trying S".</p>
<aside class="quote no-group" data-username="gchiu" data-post="3" data-topic="1888">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/gchiu/40/22_2.png" class="avatar"> gchiu:</div>
<blockquote>
<p>If you wanted one could try <code>MAYBE</code></p>
</blockquote>
</aside>
<p>I did give this a shot... and it can be argued to be the most coherent choice in reading:</p>
<pre><code>parse url ["http" maybe "s" "://gitlab.com/" ...]
</code></pre>
<p>But its alignment with how MAYBE is used in the language to produce voids and invisibility is not clear.  having MAYBE return null instead of void feels confusing.  Whereas TRY will align more closely.</p>
<p><strong>It feels safe to say that TRY is better than OPT when you look at the big picture.</strong>  I don't think having synonyms in the default combinator set is a good idea, and so that rules out OPT.  Perhaps MAYBE could be a combinator if we figure out what the difference is in a way that aligns with its other uses.</p>
          <p><a href="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/5</link>
        <pubDate>Thu, 03 Aug 2023 11:38:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1888-5</guid>
        <source url="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888.rss">Could we replace PARSE&#39;s OPT with TRY ?</source>
      </item>
      <item>
        <title>Could we replace PARSE&#39;s OPT with TRY ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1888">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This makes it a candidate for being a very literate alternative to OPT in parse!</p>
<pre><code>&gt;&gt; parse "aaaccc" [some "a", try some "b", some "c"]
== "c"
</code></pre>
</blockquote>
</aside>
<p><strong>Potentially influencing this, is that I've rewritten the inner guts of UPARSE such that <a href="https://forum.rebol.info/t/the-fail-that-wins-big-combinator-definitional-errors/1922">definitional errors are used to signal a combinator failure</a>...not "pure" NULL.</strong></p>
<p>In the original concept, I'd been playing on the difference between null isotopes and pure NULL--to distinguish when a combinator "actually returned null" vs. when it wanted to indicate a mismatched rule failure.  But using a definitional error is a cleaner solution, that really allows a combinator to synthesize any value.</p>
<ul>
<li>
<p>It could mean that TRY makes more sense.  It could leverage the same error, and any infix operations that work with it (e.g. if an ELSE-like construct reacts to the same error as TRY).</p>
</li>
<li>
<p>Though it might make less sense... as combinators that raise definitional errors are already sort of being TRY'd and having their errors defused... then moving on to the next alternate.  <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<ul>
<li>So the TRY has in effect already happened, and you're asking it to take an additional disposition of not moving on to the next alternate.</li>
</ul>
</li>
</ul>
          <p><a href="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/2</link>
        <pubDate>Sun, 14 Aug 2022 22:17:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1888-2</guid>
        <source url="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888.rss">Could we replace PARSE&#39;s OPT with TRY ?</source>
      </item>
      <item>
        <title>Could we replace PARSE&#39;s OPT with TRY ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The modern sense of TRY (circa 2023) works in concert with <a href="https://forum.rebol.info/t/fail-vs-return-raise-the-new-age-of-definitional-failures/1852">definitional errors</a> to say <em>"hey, wait, don't fail... you can be a no-op, that's fine."</em></p>
<p>For example:</p>
<pre><code>&gt;&gt; block: []

&gt;&gt; take block
** Error: Cannot take from empty series position

&gt;&gt; try take block
== ~null~  ; isotope
</code></pre>
<p><strong>This definition makes it a candidate for being a very literate alternative to OPT in parse!</strong></p>
<pre><code>&gt;&gt; parse "aaaccc" [some "a", try some "b", some "c"]
== "c"
</code></pre>
<p>It helps make <a href="https://forum.rebol.info/t/should-parse3s-any-be-rethought-repurposed/741">the loss of "ANY" as a parse looping construct</a> more palatable, as <strong><code>try some</code></strong>  is easier on the eyes than <strong><code>opt some</code></strong>.</p>
<h2>
<a name="haskell-offers-precedent-using-try-this-way-1" class="anchor" href="https://forum.rebol.info#haskell-offers-precedent-using-try-this-way-1"></a>Haskell Offers Precedent Using TRY This Way</h2>
<p>Haskell has <strong><a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:try">try</a></strong> defined as <em>"Take a parser that may consume input, and on failure, go back to where we started and fail as if we didn't consume input."</em></p>
<p>If I'm reading that correctly, this is a parallel meaning to OPT.</p>
          <p><a href="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/1</link>
        <pubDate>Sat, 16 Jul 2022 15:36:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1888-1</guid>
        <source url="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888.rss">Could we replace PARSE&#39;s OPT with TRY ?</source>
      </item>
      <item>
        <title>Could we replace PARSE&#39;s OPT with TRY ?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>It's not? It's listed as a verb in most English dictionaries that I'm aware of.</p>
          <p><a href="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/4</link>
        <pubDate>Tue, 14 Dec 2021 13:57:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1888-4</guid>
        <source url="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888.rss">Could we replace PARSE&#39;s OPT with TRY ?</source>
      </item>
      <item>
        <title>Could we replace PARSE&#39;s OPT with TRY ?</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <p><code>OPT</code> isn't an English word. If you wanted one could try <code>MAYBE</code></p>
          <p><a href="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/3</link>
        <pubDate>Tue, 14 Dec 2021 07:44:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1888-3</guid>
        <source url="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888.rss">Could we replace PARSE&#39;s OPT with TRY ?</source>
      </item>
  </channel>
</rss>
