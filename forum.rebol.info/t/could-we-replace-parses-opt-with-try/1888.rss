<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Could we replace PARSE&#39;s OPT with TRY ?</title>
    <link>https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888</link>
    <description>Just a week ago, things stood at the idea that TRY was for &quot;defusing NULL&quot; by turning it into a BLANK!:

    &gt;&gt; try null
    == _  ; tolerated by some functions that would not tolerate NULL

But that&#39;s all out the window, now.  TRY is for saying *&quot;hey, wait, don&#39;t fail... you can be a no-op, that&#39;s fine.&quot;*  Nothing to do with blanks anymore.

**This makes it a candidate for being a very literate alternative to OPT in parse!**

    &gt;&gt; parse &quot;aaaccc&quot; [some &quot;a&quot;, try some &quot;b&quot;, some &quot;c&quot;]
    == &quot;c&quot;

It helps make the loss of &quot;ANY&quot; as a looping construct more palatable, as **`try some`**  is easier on the eyes than **`opt some`**.

**But...what about conflation with the purpose of defusing NULL arguments?**

    &gt;&gt; rule: null

    &gt;&gt; parse &quot;aaaccc&quot; [some &quot;a&quot;, try some rule, some &quot;c&quot;]
    == &quot;c&quot;  ; ???

Hmmm.  And what if you wanted to require it *unless* it was null? 

    &gt;&gt; rule: &quot;b&quot;

    &gt;&gt; parse &quot;aaaccc&quot; [some &quot;a&quot;, try some rule, some &quot;c&quot;]
    ; null  (e.g. conceptually I was TRY-ing RULE, not the SOME)

That doesn&#39;t feel right.  And I don&#39;t like the idea that we&#39;d be seeing things like **opt try some rule** on any kind of regular basis.

## Let&#39;s Remember: This is a Dialect

Things are already stretched around a bit, and we make things line up when they make sense...and unalign them when they do not.

**We&#39;re free to say that TRY has nothing (or little?) to do with tolerating NULL inputs to parse rules, but where it shares heritage in meaning is &quot;a no-op here is okay&quot;.**

I think there are two reasonable options:

1.  Keep the current policy that most times, passing a NULL to rules is an error.  If you want a no-op rule, use **`[]`** or for more efficiency, **(the &#39;)** (a quoted null)

    * So this would mean that the decision is on a per-combinator basis, vs. saying all parser arguments to combinators are implicitly `[&lt;try&gt;]` ... and so things like SOME would not choose to label its argument that way.

    * Exceptions could be made for things like SEEK, where **try seek (null)** would be a way to say it&#39;s okay if you don&#39;t provide a seek position.

2. Systemically allow conflation on all combinators, where **some null** errors but **try some null** is legal.

Off the top of my head here, I think (1) is probably the better choice.  If someone disagrees, we might want to make it easier to change via a switch vs. having to copy all the combinators and add `&lt;try&gt;` to their arguments.

But I *definitely* don&#39;t like the idea that a rule prefaced with TRY would be expected to succeed if its argument were non-null.  TRY should mean the rule cannot fail its match (other than by raising an error).</description>
    
    <lastBuildDate>Thu, 25 Aug 2022 12:47:59 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Could we replace PARSE&#39;s OPT with TRY ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1888">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>This makes it a candidate for being a very literate alternative to OPT in parse!</p>
<pre><code>&gt;&gt; parse "aaaccc" [some "a", try some "b", some "c"]
== "c"
</code></pre>
</blockquote>
</aside>
<p><strong>Potentially influencing this, is that I've rewritten the inner guts of UPARSE such that <a href="https://forum.rebol.info/t/the-fail-that-wins-big-combinator-definitional-errors/1922">definitional errors are used to signal a combinator failure</a>...not "pure" NULL.</strong></p>
<p>In the original concept, I'd been playing on the difference between null isotopes and pure NULL--to distinguish when a combinator "actually returned null" vs. when it wanted to indicate a mismatched rule failure.  But using a definitional error is a cleaner solution, that really allows a combinator to synthesize any value.</p>
<ul>
<li>
<p>It could mean that TRY makes more sense.  It could leverage the same error, and any infix operations that work with it (e.g. if an ELSE-like construct reacts to the same error as TRY).</p>
</li>
<li>
<p>Though it might make less sense... as combinators that raise definitional errors are already sort of being TRY'd and having their errors defused... then moving on to the next alternate.  <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=9" title=":thinking:" class="emoji" alt=":thinking:"></p>
<ul>
<li>So the TRY has in effect already happened, and you're asking it to take an additional disposition of not moving on to the next alternate.</li>
</ul>
</li>
</ul>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1888">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But...what about conflation with the purpose of defusing NULL arguments?</p>
<pre><code>&gt;&gt; rule: null

&gt;&gt; parse "aaaccc" [some "a", try some rule, some "c"]
== "c"  ; ???
</code></pre>
</blockquote>
</aside>
<p>I'm somewhat uncomfortable conflating the two concepts:</p>
<ol>
<li>
<p>"it's okay if the specification I give you is too incomplete for you to test for a match"</p>
</li>
<li>
<p>"it's okay if you can't match a completely specified rule"</p>
</li>
</ol>
<p>It feels like this would cover up errors.</p>
<p><strong>So far, we've been getting by with NULL rules being illegal, always.</strong></p>
<p>But think about something like CURTAIL, which doesn't have to do with whether the rule match is successful or not, but defusing constructs that complain about NULL:</p>
<pre><code>&gt;&gt; rule: null

&gt;&gt; parse "a" ["a" rule]
** Error: RULE is NULL

&gt;&gt; parse "a" ["a" curtail rule] 
== "a"  ; e.g. curtail was void
</code></pre>
<p>So if you used CURTAIL and your rule wasn't null, it would have to match... it's the <em>rule</em> that's optional, not the matching:</p>
<pre><code> &gt;&gt; rule: [some "b"]

 &gt;&gt; parse "a" ["a" curtail rule]
 ; null

 &gt;&gt; parse "abbb" ["a" curtail rule]
 == "b"</code></pre>
          <p><a href="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/2</link>
        <pubDate>Sun, 14 Aug 2022 22:17:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1888-2</guid>
        <source url="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888.rss">Could we replace PARSE&#39;s OPT with TRY ?</source>
      </item>
      <item>
        <title>Could we replace PARSE&#39;s OPT with TRY ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Just a week ago, things stood at the idea that TRY was for "defusing NULL" by turning it into a BLANK!:</p>
<pre><code>&gt;&gt; try null
== _  ; tolerated by some functions that would not tolerate NULL
</code></pre>
<p>But that's all out the window, now.  TRY is for saying <em>"hey, wait, don't fail... you can be a no-op, that's fine."</em>  Nothing to do with blanks anymore.</p>
<p><strong>This makes it a candidate for being a very literate alternative to OPT in parse!</strong></p>
<pre><code>&gt;&gt; parse "aaaccc" [some "a", try some "b", some "c"]
== "c"
</code></pre>
<p>It helps make the loss of "ANY" as a looping construct more palatable, as <strong><code>try some</code></strong>  is easier on the eyes than <strong><code>opt some</code></strong>.</p>
<p><strong>But...what about conflation with the purpose of defusing NULL arguments?</strong></p>
<pre><code>&gt;&gt; rule: null

&gt;&gt; parse "aaaccc" [some "a", try some rule, some "c"]
== "c"  ; ???
</code></pre>
<p>Hmmm.  And what if you wanted to require it <em>unless</em> it was null?</p>
<pre><code>&gt;&gt; rule: "b"

&gt;&gt; parse "aaaccc" [some "a", try some rule, some "c"]
; null  (e.g. conceptually I was TRY-ing RULE, not the SOME)
</code></pre>
<p>That doesn't feel right.  And I don't like the idea that we'd be seeing things like <strong>opt try some rule</strong> on any kind of regular basis.</p>
<h2>Let's Remember: This is a Dialect</h2>
<p>Things are already stretched around a bit, and we make things line up when they make sense...and unalign them when they do not.</p>
<p><strong>We're free to say that TRY has nothing (or little?) to do with tolerating NULL inputs to parse rules, but where it shares heritage in meaning is "a no-op here is okay".</strong></p>
<p>I think there are two reasonable options:</p>
<ol>
<li>
<p>Keep the current policy that most times, passing a NULL to rules is an error.  If you want a no-op rule, use <strong><code>[]</code></strong> or for more efficiency, <strong>(the ')</strong> (a quoted null)</p>
<ul>
<li>
<p>So this would mean that the decision is on a per-combinator basis, vs. saying all parser arguments to combinators are implicitly <code>[&lt;try&gt;]</code> ... and so things like SOME would not choose to label its argument that way.</p>
</li>
<li>
<p>Exceptions could be made for things like SEEK, where <strong>try seek (null)</strong> would be a way to say it's okay if you don't provide a seek position.</p>
</li>
</ul>
</li>
<li>
<p>Systemically allow conflation on all combinators, where <strong>some null</strong> errors but <strong>try some null</strong> is legal.</p>
</li>
</ol>
<p>Off the top of my head here, I think (1) is probably the better choice.  If someone disagrees, we might want to make it easier to change via a switch vs. having to copy all the combinators and add <code>&lt;try&gt;</code> to their arguments.</p>
<p>But I <em>definitely</em> don't like the idea that a rule prefaced with TRY would be expected to succeed if its argument were non-null.  TRY should mean the rule cannot fail its match (other than by raising an error).</p>
          <p><a href="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888/1</link>
        <pubDate>Sat, 16 Jul 2022 15:36:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1888-1</guid>
        <source url="https://forum.rebol.info/t/could-we-replace-parses-opt-with-try/1888.rss">Could we replace PARSE&#39;s OPT with TRY ?</source>
      </item>
  </channel>
</rss>
