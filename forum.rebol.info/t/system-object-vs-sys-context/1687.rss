<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;System Object&quot; vs. &quot;Sys Context&quot;</title>
    <link>https://forum.rebol.info/t/system-object-vs-sys-context/1687</link>
    <description>Let&#39;s say I asked you to explain the difference between the system context (**sys**) and the system object (**system**)--and why they are two different things.

I&#39;m betting you&#39;d probably not be able to explain it.  Because I get them mixed up all the time.  :yawning_face:

TL; DR: - **Having something called SYSTEM that is distinct from SYS isn&#39;t doing anyone any cognitive favors, and it should be changed.**  I propose SYS and SYSTEM be synonyms for the system context, and what is currently known as SYS become SYS.UTIL.

## **sys** System Context: Usermode Helpers for the Core

There&#39;s a lot of support code behind things like booting, or LOAD or DO, or registration of codecs or whatever... that the average user is probably not going to want to call on a day-to-day basis.  An example is **`make-scheme`**.

These routines don&#39;t necessarily compete for names with things in LIB.  But putting them in SYS helps to call out that most users probably don&#39;t need to be concerned with them.

* Pretty much every function in LIB routines is supposed to be something you could imagine a user being interested in calling in their scripts.

* SYS functions are things that would generally only be called from extensions, or internally as a support function for natives or LIB functions.

## **system** System Object: Global Variables and Template Objects

The system object is specified by a file called **%sysobj.r**.

As most people know, this is where you go to look for global state like the arguments that were passed to the interpreter when it ran...or the list of modules that have been loaded.  But it also contains a large number of empty objects.

The **make prep** process creates a header file of constants of the integer indices of the fields in these objects.  That makes it fast and easy for the core C code to directly address those fields, instead of having to linear search for them by key name.

Using these template objects has the effect that no matter how you create a derived object, it will get the fields named in them in that particular order.  So the precalculated indexes will always be able to find the fields where they are looking... *as long as that object **was** used as the base object*.

But these template objects aren&#39;t just about interfacing quickly between C and the structures.  Using common objects as keys helps save on allocations of lists of the keys...as the objects will share that list (as long as the object isn&#39;t expanded or created with more keys than specified in the base.

*(I actually think it is a mistake to be doing objects this way, and that we should adopt JavaScript&#39;s model of [&quot;hidden classes&quot;](https://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html) to get a more systemic optimization.)*

## Proposal: SYS =&gt; SYS.UTIL, SYSTEM &lt;=&gt; SYS

Having to type **sys.util** when you want something like **sys.util.make-scheme** isn&#39;t that oppressive.

UTIL is abbreviated, but so is SYS.  We could make UTIL just an alias for UTILITIES, so the verbose-minded could write **system.utilities.make-scheme** if it pleased them.</description>
    
    <lastBuildDate>Fri, 01 Jul 2022 20:02:09 +0000</lastBuildDate>
    <category>Modules</category>
    <atom:link href="https://forum.rebol.info/t/system-object-vs-sys-context/1687.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;System Object&quot; vs. &quot;Sys Context&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1687">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>TL; DR: - <strong>Having something called SYSTEM that is distinct from SYS isn't doing anyone any cognitive favors, and it should be changed.</strong> I propose SYS and SYSTEM be synonyms for the system context, and what is currently known as SYS become SYS.UTIL.</p>
</blockquote>
</aside>
<p>Clearly I got around to doing this as quickly as possible...</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/snail.png?v=12" title=":snail:" class="emoji only-emoji" alt=":snail:" loading="lazy" width="20" height="20"></p>
<p>...but better late than never.  I doubt most people will notice (when is the last time you called SYS.MAKE-SCHEME ?)  But a few places were affected.</p>
<p>For most people, the big difference would be that you can now say <strong>sys.script.args</strong> instead of <strong>system.script.args</strong>.</p>
<h2><a name="p-5972-whats-in-sysutil-anyway-1" class="anchor" href="https://forum.rebol.info#p-5972-whats-in-sysutil-anyway-1"></a>What's in SYS.UTIL, anyway?</h2>
<p>It's kind of a grab bag of weird things at the moment, all of which can probably use more thought.</p>
<p>But one key reason for its existence is that there's a bootstrap phase of <em>"Everything you need in order for LOAD of a MODULE to work"</em>... and then everything after that.</p>
<p>So SYS.UTIL is where various service routines pertinent to loading live, like codecs and IMPORT mechanics.  If you're going to load from a file, you need the FILE! scheme, so things like MAKE-SCHEME live there too.</p>
<p>Once the SYS.UTIL code has been processed by bootstrap, it makes some things available in LIB.  So if you say <strong>sys.util.load</strong> you're getting the same function as <strong>lib.load</strong>, which you typically invoke simply as LOAD.</p>
<p>Here's some of those foundations that get exported to LIB:</p>
<ul>
<li>MODULE</li>
<li>LOAD-VALUE</li>
<li>LOAD</li>
<li>DECODE</li>
<li>ENCODE</li>
<li>DECODE-URL</li>
</ul>
<p>Then there's other miscellany...</p>
<h3><a name="p-5972-sysutilmake-scheme-2" class="anchor" href="https://forum.rebol.info#p-5972-sysutilmake-scheme-2"></a>SYS.UTIL.MAKE-SCHEME</h3>
<p>The MAKE-SCHEME function is used to register some callbacks that know how to deal with things like <strong><code>read file://</code></strong>.  You say the scheme name is "file" and then you give some handlers for what to do when that gets a handful of possible verbs, like READ or DELETE etc.</p>
<p>On the surface this is cool, in practice there's a lot of unanswered questions that I won't go into here.</p>
<aside class="onebox category-onebox" style="box-shadow: -5px 0px #25AAE2;">
  <article class="onebox-body category-onebox-body">
    <h3>
      <a class="badge-category__wrapper" href="https://forum.rebol.info/c/development/ports/37">
         <span class="badge-category__name">Ports</span>
       
      </a>
    </h3>
      <div>
        <span class="description">
          <p>To discuss the port model and also the implementation of ports with respect to networking.</p>
        </span>
      </div>
  </article>
  <div class="clearfix"></div>
</aside>

<h3><a name="p-5972-sysutiladjust-url-for-raw-3" class="anchor" href="https://forum.rebol.info#p-5972-sysutiladjust-url-for-raw-3"></a>SYS.UTIL.ADJUST-URL-FOR-RAW</h3>
<p>In the Web Repl, we had the idea of letting you say <strong>do</strong> on a short GitHub URL for a file...which would give back decorated HTML if you were to READ it.  This kept you from having to hunt down the raw link for a file, you could just use the same URL that would show in your browser.</p>
<p>(Notably we <em>don't</em> want READ to do that jump to the raw URL.  It's specific to DO, because we ostensibly know you can't mean to "run the HTML".)</p>
<p>Once we had this feature it was so useful we wondered "why can't the desktop builds do that too?"  So the logic for translating URLs on GitHub and GitLab in this way was moved into <strong>sys.util.adjust-url-for-raw</strong>, because it's needed by the low-level DO commands</p>
<h3><a name="p-5972-sysutiluparse-4" class="anchor" href="https://forum.rebol.info#p-5972-sysutiluparse-4"></a>SYS.UTIL.UPARSE</h3>
<p>We're in a delicate situation with UPARSE.  It is the <a href="https://forum.rebol.info/t/dead-red-redemption-starting-uparse-on-the-right-foot/1649">best-tested Redbol parse ever</a>, and the dialect is too powerful to not use.  but also it's slow, gives terrible error messages, and is still under development.</p>
<p>So it's kind of risky to use it in low-level bootstrap.  Not so much for being slow, but because debugging the error messages prior to boot can be <em>very painful</em>.</p>
<p>However, some non-bootstrap uses are permitted.  So once bootstrap is done, the UPARSE module pokes a copy of its action into sys.util, so that "non-essentials" like decode-url can use it.</p>
<h3><a name="p-5972-sysutildo-5" class="anchor" href="https://forum.rebol.info#p-5972-sysutildo-5"></a>SYS.UTIL.DO*</h3>
<p>This is a service routine called by the DO native when handling for the type is easier to write in usermode than it is as a bunch of C code.</p>
<p>So if you DO something like a BLOCK!, that just runs the evaluator inside the interpreter as C...nothing special.  But if you DO a FILE! then there's a lot of machinery that needs to come into play, and so the DO native will delegate to this <strong><code>sys.util.do*</code></strong> function.</p>
<h3><a name="p-5972-sysutilimport-6" class="anchor" href="https://forum.rebol.info#p-5972-sysutilimport-6"></a>SYS.UTIL.IMPORT*</h3>
<p>This is the workhorse for much of the shared code that runs underneath DO and IMPORT.  Really, DO is just a skin of this function that reverses its return values: IMPORT* returns the imported module as its main parameter, and the evaluated result of the body as its second parameter.  DO swaps that.</p>
<p>(Much of this is still under review for design.  But the key is that much of what mechanics should be shared, are shared.)</p>
<p>A big difference between this IMPORT* and IMPORT is that you tell it <em>where</em> to import to...instead of it just assuming it should be your "current context".</p>
<p><em>(If you're wondering how IMPORT knows what the "current context" is... it's just a trick, like with definitional RETURN.  Each module declares its own IMPORT function, that's a specialization of IMPORT</em> with the "where" as being itself.)*</p>
<h3><a name="p-5972-sysutilexport-7" class="anchor" href="https://forum.rebol.info#p-5972-sysutilexport-7"></a>SYS.UTIL.EXPORT*</h3>
<p>This is the counterpart to IMPORT* which pokes a definition (or definitions) into the exports list of the current module.  Again there is a local EXPORT function for every module, specialized to say that where to export from is itself.</p>
<h3><a name="p-5972-sysutilmake-port-8" class="anchor" href="https://forum.rebol.info#p-5972-sysutilmake-port-8"></a>SYS.UTIL.MAKE-PORT*</h3>
<p>This is the code that runs when you call MAKE PORT! on something.  I have better things to do with my day than be a broken record talking about how bad/underdesigned all the port stuff was.  Anyway, this is still relatively unchanged since R3-Alpha...for better or worse.</p>
<h3><a name="p-5972-sysutilregister-codec-9" class="anchor" href="https://forum.rebol.info#p-5972-sysutilregister-codec-9"></a>SYS.UTIL.REGISTER-CODEC*</h3>
<p>This is used only by the BMP, PNG, JPEG, and GIF extensions.</p>
<p>Codecs were simplified in Ren-C to not have a specialized C-style interface, but to talk in terms of BINARY! values and use natives.  That part was a good decision, but other than that, there's not been any real development on codecs.  Exactly how they are supposed to be different from streaming ports is not clear.</p>
<p><em>(I've lamented that we have a lot of stream-capable code now...from zlib and mbedTLS...but no real way to expose it.)</em></p>
<h3><a name="p-5972-sysutilparse-url-10" class="anchor" href="https://forum.rebol.info#p-5972-sysutilparse-url-10"></a>SYS.UTIL.*PARSE-URL</h3>
<p>This is the ruleset used by DECODE-URL.  It's really only outside the function to save on an indentation level, which is kind of lame.</p>
<h3><a name="p-5972-sysutilscript-pre-load-hook-11" class="anchor" href="https://forum.rebol.info#p-5972-sysutilscript-pre-load-hook-11"></a>SYS.UTIL.SCRIPT-PRE-LOAD-HOOK</h3>
<p>This is something that gets called every time a script gets loaded.  The default prints out the fact that it did...which Graham wanted disabled in the ReplPad.</p>
<p>It might be nice to put these somewhere like <strong>sys.hooks</strong> ... but the key reason for this living inside <strong>sys.util</strong> is so that SYS.UTIL.LOAD can see it at that phase of bootstrap.</p>
          <p><a href="https://forum.rebol.info/t/system-object-vs-sys-context/1687/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/system-object-vs-sys-context/1687/2</link>
        <pubDate>Fri, 01 Jul 2022 20:02:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1687-2</guid>
        <source url="https://forum.rebol.info/t/system-object-vs-sys-context/1687.rss">&quot;System Object&quot; vs. &quot;Sys Context&quot;</source>
      </item>
      <item>
        <title>&quot;System Object&quot; vs. &quot;Sys Context&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Let's say I asked you to explain the difference between the system context (<strong>sys</strong>) and the system object (<strong>system</strong>)--and why they are two different things.</p>
<p>I'm betting you'd probably not be able to explain it.  Because I get them mixed up all the time.  <img src="https://forum.rebol.info/images/emoji/twitter/yawning_face.png?v=9" title=":yawning_face:" class="emoji" alt=":yawning_face:"></p>
<p>TL; DR: - <strong>Having something called SYSTEM that is distinct from SYS isn't doing anyone any cognitive favors, and it should be changed.</strong>  I propose SYS and SYSTEM be synonyms for the system context, and what is currently known as SYS become SYS.UTIL.</p>
<h2>
<strong>sys</strong> System Context: Usermode Helpers for the Core</h2>
<p>There's a lot of support code behind things like booting, or LOAD or DO, or registration of codecs or whatever... that the average user is probably not going to want to call on a day-to-day basis.  An example is <strong><code>make-scheme</code></strong>.</p>
<p>These routines don't necessarily compete for names with things in LIB.  But putting them in SYS helps to call out that most users probably don't need to be concerned with them.</p>
<ul>
<li>
<p>Pretty much every function in LIB routines is supposed to be something you could imagine a user being interested in calling in their scripts.</p>
</li>
<li>
<p>SYS functions are things that would generally only be called from extensions, or internally as a support function for natives or LIB functions.</p>
</li>
</ul>
<h2>
<strong>system</strong> System Object: Global Variables and Template Objects</h2>
<p>The system object is specified by a file called <strong>%sysobj.r</strong>.</p>
<p>As most people know, this is where you go to look for global state like the arguments that were passed to the interpreter when it ran...or the list of modules that have been loaded.  But it also contains a large number of empty objects.</p>
<p>The <strong>make prep</strong> process creates a header file of constants of the integer indices of the fields in these objects.  That makes it fast and easy for the core C code to directly address those fields, instead of having to linear search for them by key name.</p>
<p>Using these template objects has the effect that no matter how you create a derived object, it will get the fields named in them in that particular order.  So the precalculated indexes will always be able to find the fields where they are looking... <em>as long as that object <strong>was</strong> used as the base object</em>.</p>
<p>But these template objects aren't just about interfacing quickly between C and the structures.  Using common objects as keys helps save on allocations of lists of the keys...as the objects will share that list (as long as the object isn't expanded or created with more keys than specified in the base.</p>
<p><em>(I actually think it is a mistake to be doing objects this way, and that we should adopt JavaScript's model of <a href="https://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html">"hidden classes"</a> to get a more systemic optimization.)</em></p>
<h2>Proposal: SYS =&gt; SYS.UTIL, SYSTEM &lt;=&gt; SYS</h2>
<p>Having to type <strong>sys.util</strong> when you want something like <strong>sys.util.make-scheme</strong> isn't that oppressive.</p>
<p>UTIL is abbreviated, but so is SYS.  We could make UTIL just an alias for UTILITIES, so the verbose-minded could write <strong>system.utilities.make-scheme</strong> if it pleased them.</p>
          <p><a href="https://forum.rebol.info/t/system-object-vs-sys-context/1687/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/system-object-vs-sys-context/1687/1</link>
        <pubDate>Fri, 27 Aug 2021 00:07:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1687-1</guid>
        <source url="https://forum.rebol.info/t/system-object-vs-sys-context/1687.rss">&quot;System Object&quot; vs. &quot;Sys Context&quot;</source>
      </item>
  </channel>
</rss>
