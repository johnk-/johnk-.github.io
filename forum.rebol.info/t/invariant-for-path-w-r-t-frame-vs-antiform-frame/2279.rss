<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Invariant for PATH! w.r.t. FRAME! vs. antiform FRAME!</title>
    <link>https://forum.rebol.info/t/invariant-for-path-w-r-t-frame-vs-antiform-frame/2279</link>
    <description>So I sort of feel like it would be a bit of a waste if you couldn&#39;t use the slash notation in paths to run a non-antiform FRAME!

So let&#39;s say you wrote:

    &gt;&gt; manipulators: reduce // [
           [get $append get $insert get $change]
           /predicate get $noquasi/reify  ; doesn&#39;t have a single name, should it?
       ] 
    == [#[frame! ...] #[frame! ...] #[frame! ...]

We definitely want picking with a TUPLE! to be inert, that&#39;s a central point of the good new world:

    &gt;&gt; manipulators.1
    == #[frame! ...]

But should you use a PATH!, I feel like this should work... I think... :thinking: 

    &gt;&gt; manipulators/1:dup [a b c] [d e] 2
    == [a b c [d e] [d e]]

It&#39;s a bit weird to see a number-headed chain used to run a function.  But, y&#39;know, that&#39;s consistent with history:

    red&gt;&gt; manipulators: reduce [:append :insert :change]
    == [make action! [...] make action! [...] make action! [...]]

    red&gt;&gt; manipulators/1/dup [a b c] [d e] 2
    == [a b c d e d e]

...and since they don&#39;t have the alternative of TUPLE!, [they don&#39;t have a way to avoid &quot;active accessors&quot;](https://rebol.tech/gitter.im/red/red/2019/#msg5c782ca0c1cab53d6f53dd6d).

:foot: :gun:

## More Often Useful Case Would Be Just **frame/**

It&#39;s actually useful to store inert frames in data structures.  UPARSE does it for the combinator map.  It comes up.

But I think people will want to do things like:

    &gt;&gt; frame: make frame! get $append
    &gt;&gt; frame.series: [a b c]
    &gt;&gt; frame.value: [d e]

    &gt;&gt; frame/  ; using this form of application would COPY the FRAME! before running
    == [a b c [d e]]

On the other hand, I believe that the correct meaning of **`/frame`** is that it should *not* run the inert frame.

## GET of (non-blank-headed) PATH! Should Yield An Antiform

We *could* disable GET of a PATH! when it looks up to a plain frame and not an antiform...and say that paths can only be used with inert frames during EVAL.  But I don&#39;t see the point of that (and it breaks the natural layering, where the code interpreting the path is the same for both GET and EVAL).

So I think you should be able to GET either one. 

But regardless of whether the thing you got to with the PATH! was a plain FRAME! or an antiform FRAME!... if you GET it I think you should receive an antiform frame back.

As a reader, I don&#39;t want to have to puzzle over what the result is going to be.  Seeing GET of a PATH! and knowing that&#39;s going to be an antiform frame is more useful than I can imagine preserving the distinction ever being.  Not only are antiform frames what you usually desire, *if you&#39;d wanted an inert frame you could have used a TUPLE! to get it instead*.

So this seems pretty well decided to me.

## Don&#39;t Permit QUASI-FRAME! or QUOTED-FRAME! To Run

I&#39;ve already written up my thoughts on [avoiding making quasiforms too friendly](https://forum.rebol.info/t/quasiforms-arent-super-friendly-and-they-shouldnt-be/2273).  It does make things awkward at times.  But I think that awkwardness is for the best.

The same applies to quoted frames.  I don&#39;t think tolerance of these forms by the core leads to anything good.  It ties into why I don&#39;t want **(&#39;a = first [&#39;&#39;a])** to be true... once you start ignoring things like quote marks and treating it as equivalent, people will get sloppy with their input...which ties your hands later on if you want to give quote levels some dialected meaning (e.g. use them for tunneling values in meta form).</description>
    
    <lastBuildDate>Sun, 15 Sep 2024 11:09:43 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/invariant-for-path-w-r-t-frame-vs-antiform-frame/2279.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Invariant for PATH! w.r.t. FRAME! vs. antiform FRAME!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I sort of feel like it would be a bit of a waste if you couldn't use the slash notation in paths to run a non-antiform FRAME!</p>
<p>So let's say you wrote:</p>
<pre><code>&gt;&gt; manipulators: reduce // [
       [get $append get $insert get $change]
       /predicate get $noquasi/reify  ; doesn't have a single name, should it?
   ] 
== [#[frame! ...] #[frame! ...] #[frame! ...]
</code></pre>
<p>We definitely want picking with a TUPLE! to be inert, that's a central point of the good new world:</p>
<pre><code>&gt;&gt; manipulators.1
== #[frame! ...]
</code></pre>
<p>But should you use a PATH!, I feel like this should work... I think... <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<pre><code>&gt;&gt; manipulators/1:dup [a b c] [d e] 2
== [a b c [d e] [d e]]
</code></pre>
<p>It's a bit weird to see a number-headed chain used to run a function.  But, y'know, that's consistent with history:</p>
<pre><code>red&gt;&gt; manipulators: reduce [:append :insert :change]
== [make action! [...] make action! [...] make action! [...]]

red&gt;&gt; manipulators/1/dup [a b c] [d e] 2
== [a b c d e d e]
</code></pre>
<p>...and since they don't have the alternative of TUPLE!, <a href="https://rebol.tech/gitter.im/red/red/2019/#msg5c782ca0c1cab53d6f53dd6d">they don't have a way to avoid "active accessors"</a>.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/foot.png?v=12" title=":foot:" class="emoji only-emoji" alt=":foot:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/gun.png?v=12" title=":gun:" class="emoji only-emoji" alt=":gun:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="more-often-useful-case-would-be-just-frame-1" class="anchor" href="https://forum.rebol.info#more-often-useful-case-would-be-just-frame-1"></a>More Often Useful Case Would Be Just <strong>frame/</strong>
</h2>
<p>It's actually useful to store inert frames in data structures.  UPARSE does it for the combinator map.  It comes up.</p>
<p>But I think people will want to do things like:</p>
<pre><code>&gt;&gt; frame: make frame! get $append
&gt;&gt; frame.series: [a b c]
&gt;&gt; frame.value: [d e]

&gt;&gt; frame/  ; using this form of application would COPY the FRAME! before running
== [a b c [d e]]
</code></pre>
<p>On the other hand, I believe that the correct meaning of <strong><code>/frame</code></strong> is that it should <em>not</em> run the inert frame.</p>
<h2>
<a name="get-of-non-blank-headed-path-should-yield-an-antiform-2" class="anchor" href="https://forum.rebol.info#get-of-non-blank-headed-path-should-yield-an-antiform-2"></a>GET of (non-blank-headed) PATH! Should Yield An Antiform</h2>
<p>We <em>could</em> disable GET of a PATH! when it looks up to a plain frame and not an antiform...and say that paths can only be used with inert frames during EVAL.  But I don't see the point of that (and it breaks the natural layering, where the code interpreting the path is the same for both GET and EVAL).</p>
<p>So I think you should be able to GET either one.</p>
<p>But regardless of whether the thing you got to with the PATH! was a plain FRAME! or an antiform FRAME!... if you GET it I think you should receive an antiform frame back.</p>
<p>As a reader, I don't want to have to puzzle over what the result is going to be.  Seeing GET of a PATH! and knowing that's going to be an antiform frame is more useful than I can imagine preserving the distinction ever being.  Not only are antiform frames what you usually desire, <em>if you'd wanted an inert frame you could have used a TUPLE! to get it instead</em>.</p>
<p>So this seems pretty well decided to me.</p>
<h2>
<a name="dont-permit-quasi-frame-or-quoted-frame-to-run-3" class="anchor" href="https://forum.rebol.info#dont-permit-quasi-frame-or-quoted-frame-to-run-3"></a>Don't Permit QUASI-FRAME! or QUOTED-FRAME! To Run</h2>
<p>I've already written up my thoughts on <a href="https://forum.rebol.info/t/quasiforms-arent-super-friendly-and-they-shouldnt-be/2273">avoiding making quasiforms too friendly</a>.  It does make things awkward at times.  But I think that awkwardness is for the best.</p>
<p>The same applies to quoted frames.  I don't think tolerance of these forms by the core leads to anything good.  It ties into why I don't want <strong>('a = first [''a])</strong> to be true... once you start ignoring things like quote marks and treating it as equivalent, people will get sloppy with their input...which ties your hands later on if you want to give quote levels some dialected meaning (e.g. use them for tunneling values in meta form).</p>
          <p><a href="https://forum.rebol.info/t/invariant-for-path-w-r-t-frame-vs-antiform-frame/2279/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/invariant-for-path-w-r-t-frame-vs-antiform-frame/2279/1</link>
        <pubDate>Sun, 15 Sep 2024 11:03:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2279-1</guid>
        <source url="https://forum.rebol.info/t/invariant-for-path-w-r-t-frame-vs-antiform-frame/2279.rss">Invariant for PATH! w.r.t. FRAME! vs. antiform FRAME!</source>
      </item>
  </channel>
</rss>
