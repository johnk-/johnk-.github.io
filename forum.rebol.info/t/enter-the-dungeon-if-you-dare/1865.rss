<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Enter the Dungeon ðŸ’€ ...if You Dare!</title>
    <link>https://forum.rebol.info/t/enter-the-dungeon-if-you-dare/1865</link>
    <description>## The Imaginary 3-D Dungeon Simulator of the Year, 1983...

NOW ON THE WEB!!

  **[http://hostilefork.com/media/shared/replpad-js/?do=dungeon](http://hostilefork.com/media/shared/replpad-js/?do=dungeon)**

Source code:

  [https://github.com/hostilefork/teenage-coding/blob/master/DUNGEON/dungeon.reb](https://github.com/hostilefork/teenage-coding/blob/master/DUNGEON/dungeon.reb)

## Backstory

When I was a kid (circa 1983, I&#39;d be about 8 or 9), I played the Intellivision game [Advanced Dungeons and Dragons: Treasure of Tarmin](http://en.wikipedia.org/wiki/Advanced_Dungeons_&amp;_Dragons:_Treasure_of_Tarmin). The 3-D graphics put you in a first-person-perspective point of view with shocking realism:

![Shockingly Realistic 3-D Graphics](https://i.stack.imgur.com/X4aGT.png)

But a year or two later, I got a C-64. And I was able to draw on the 40x25 character grid by cursoring around the screen, setting the color with the Ctrl key and a digit, and putting symbols anywhere I wanted *(why doesn&#39;t `bash` let me do that?)*. The character set had triangular components and solid block components.

![image|505x500, 50%](upload://1Rsurb7Q0aQ1IugNlN0VbFjgToE.jpeg) 

So I was able to reason through how one might generate a rendering of one&#39;s perspective in a grid through that medium.

In 2013, I found the nearly-three-decades-old spec, in spiral-bound notebook paper, about &quot;Dungeon Construction Set&quot;:

![enter image description here](https://i.stack.imgur.com/WHYpo.jpg)

*(Careful readers will notice that while it&#39;s almost right, this doesn&#39;t quite hold together on the slanted parts...)*

Though Treasure of Tarmin was played on a grid, the walls existed only on the *edges* of grid squares. Having learned what bytes were, I realized that if I made the map out of bytes...then each square on the map could have four possible states for each of its edges:

1. Unobstructed
2. Wall
3. Door
4. Something Else?

The design allows for the opportunity that adjacent cells would &quot;disagree&quot;...e.g. have a wall on one side and a door on the other.  I considered this a feature; these situations would give rise to one-way doors and walls that didn&#39;t appear until you passed through them and then turned around.

My idea was that a position on the map and a direction you were facing could &quot;light up&quot; regions on the screen...a bit like lighting up segments of a digit on an LCD.

But an implementation of the ideas eluded me.  It was a trickier program than I had written at the time, made even trickier because I was trying to implement it in a &quot;machine language monitor&quot;.  I had no assembler, and the book I read didn&#39;t discuss them...just the instruction set and workings of the 6502 chip.

(The machine-language-monitor programs could encode single instructions into specific memory locations.  But unlike an assembler, it had no labels or other abstractions...all addresses had to be kept track of on paper.)

By the time I knew enough about programming that I could do something like this in an evening, I no longer cared much about the idea.  But better late than never, right?

Although Unicode/ASCII don&#39;t have good &quot;seamless drawing&quot; characters to do this like the C-64 could, it can still get the idea across.

## [Originally Wrote this in Red (2013)](https://github.com/red/red/pull/612)

I decided I&#39;d use this relatively simple task as something where I would use Red the whole time--as opposed to writing it in Rebol2 or R3-Alpha and then porting the differences.  So that let me get a sense of where the pain points were regarding things like syntax error reporting, that sort of stuff.

Anyway, about a decade later, it&#39;s now a Ren-C sample.  Minor modifications were made, including taking advantage of the ReplPad&#39;s CLEAR-SCREEN ability (if running on the web).</description>
    
    <lastBuildDate>Wed, 06 Jul 2022 17:16:25 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/enter-the-dungeon-if-you-dare/1865.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Enter the Dungeon ðŸ’€ ...if You Dare!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1865">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>about a decade later, it's now a Ren-C sample. Minor modifications were made</p>
</blockquote>
</aside>
<p>It's probably worth mentioning what I had to change:</p>
<ul>
<li>
<p>I put <code>RETURN:</code> at the beginning of the parameter lists.</p>
<ul>
<li>
<p>This isn't yet a rule, but I think it might need to be.  This is in flux.</p>
</li>
<li>
<p>One issue we have is how ENCLOSE'd functions might widen the return conventions.  That might involve specializing out the old RETURN and augmenting with a new one.. which means the "active return" (the one typechecked for the enclose phase) might not be the 0th parameter.</p>
</li>
</ul>
</li>
<li>
<p>Slashes changed to dots for member access.  I am pretty gung ho about what differentiating refinements and member selection does for readability.  And of course, it looks better when you're using division:</p>
<pre><code>start-pos: reduce [  ; red version
    1 + (display/screen-size/1 / 2) - (dims/1 / 2) + (dims/1 * x-offset)
    1 + (display/screen-size/2 / 2) - (dims/2 / 2)
]

start-pos: reduce [  ; Ren-C version
    1 + (display.screen-size.1 / 2) - (dims.1 / 2) + (dims.1 * x-offset)
    1 + (display.screen-size.2 / 2) - (dims.2 / 2)
]
</code></pre>
</li>
<li>
<p>It uses <strong><code>fail msg</code></strong> instead of <strong><code>(print msg) quit</code></strong></p>
</li>
<li>
<p>It uses ELSE with SWITCH instead of SWITCH/DEFAULT</p>
</li>
<li>
<p>The Rebol2/Red form of REPEAT takes a variable and a count, so <code>repeat x 10 [...]</code> would run the body 10 times for the values 1 to 10.</p>
<ul>
<li>
<p>In Ren-C that is now <code>for x 10 [...]</code>, where the idea is that FOR speaks in the "for dialect" by default (or can be passed a generator function).  It's pretty wide open for what that will be able to be, but the base case of an integer is just to count from 1 to that.</p>
<ul>
<li>for x [1 to 10] [...]</li>
<li>for x [1 thru 10] [...]</li>
<li>for x 1..10 [...]</li>
<li>for x each [a b c] [...]  ; each makes a generator function</li>
</ul>
</li>
<li>
<p>REPEAT is what was called LOOP (which saves LOOP for some great loop dialect yet to be made, but a place is held for it to be inspired by <a href="https://gigamonkeys.com/book/loop-for-black-belts.html">CommonLisp's LOOP</a>)</p>
</li>
</ul>
</li>
</ul>
<p>It's a deliberately simple program, and it does not make use of PAIR! and its X and Y fields (possibly because Red didn't support it at the time? or maybe it was and I didn't use it).</p>
<p>It builds empty strings with loops instead of using APPEND/DUP or some similar construct (also, potentially because Red didn't have /DUP yet).</p>
<h2>Future Features...?</h2>
<p>I'm hesitant to go on any kind of enhancement kick for this.  But it could mock up a more C-64 looking square-with-slants screen in the JavaScript canvas, and do the dark green/light green alternations of Treasure of Tarmin.  Could add the blue doors...</p>
<p>Switching to a READ-KEY interface where you can use cursor keys and not get echo would mean adding the READ-KEY features to ReplPad.  I like having the fallback so it runs in a stdio terminal that doesn't have anything but echoing input and irreversible printing.  So it should do feature detection and work in both (kind of like how it does feature detection of CLEAR-SCREEN).</p>
<p>If there are any takers who want to improve it (or the ReplPad features to enable it), be my guest.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          <p><a href="https://forum.rebol.info/t/enter-the-dungeon-if-you-dare/1865/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enter-the-dungeon-if-you-dare/1865/2</link>
        <pubDate>Wed, 06 Jul 2022 16:56:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1865-2</guid>
        <source url="https://forum.rebol.info/t/enter-the-dungeon-if-you-dare/1865.rss">Enter the Dungeon ðŸ’€ ...if You Dare!</source>
      </item>
      <item>
        <title>Enter the Dungeon ðŸ’€ ...if You Dare!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>The Imaginary 3-D Dungeon Simulator of the Year, 1983...</h2>
<p>NOW ON THE WEB!!</p>
<p><strong><a href="http://hostilefork.com/media/shared/replpad-js/?do=dungeon">http://hostilefork.com/media/shared/replpad-js/?do=dungeon</a></strong></p>
<p>Source code:</p>
<p><a href="https://github.com/hostilefork/teenage-coding/blob/master/DUNGEON/dungeon.reb">https://github.com/hostilefork/teenage-coding/blob/master/DUNGEON/dungeon.reb</a></p>
<h2>Backstory</h2>
<p>When I was a kid (circa 1983, I'd be about 8 or 9), I played the Intellivision game <a href="http://en.wikipedia.org/wiki/Advanced_Dungeons_&amp;_Dragons:_Treasure_of_Tarmin">Advanced Dungeons and Dragons: Treasure of Tarmin</a>. The 3-D graphics put you in a first-person-perspective point of view with shocking realism:</p>
<p><img src="https://i.stack.imgur.com/X4aGT.png" alt="Shockingly Realistic 3-D Graphics" width="320" height="200"></p>
<p>But a year or two later, I got a C-64. And I was able to draw on the 40x25 character grid by cursoring around the screen, setting the color with the Ctrl key and a digit, and putting symbols anywhere I wanted <em>(why doesn't <code>bash</code> let me do that?)</em>. The character set had triangular components and solid block components.</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/0d0d338da02ccf2e47f3427a3ffc08fddfbfb7a4.jpeg" data-download-href="https://forum.rebol.info/uploads/default/0d0d338da02ccf2e47f3427a3ffc08fddfbfb7a4" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/0d0d338da02ccf2e47f3427a3ffc08fddfbfb7a4_2_252x250.jpeg" alt="image" data-base62-sha1="1Rsurb7Q0aQ1IugNlN0VbFjgToE" width="252" height="250" srcset="https://forum.rebol.info/uploads/default/optimized/1X/0d0d338da02ccf2e47f3427a3ffc08fddfbfb7a4_2_252x250.jpeg, https://forum.rebol.info/uploads/default/optimized/1X/0d0d338da02ccf2e47f3427a3ffc08fddfbfb7a4_2_378x375.jpeg 1.5x, https://forum.rebol.info/uploads/default/optimized/1X/0d0d338da02ccf2e47f3427a3ffc08fddfbfb7a4_2_504x500.jpeg 2x" data-small-upload="https://forum.rebol.info/uploads/default/optimized/1X/0d0d338da02ccf2e47f3427a3ffc08fddfbfb7a4_2_10x10.png"></a></div><p></p>
<p>So I was able to reason through how one might generate a rendering of one's perspective in a grid through that medium.</p>
<p>In 2013, I found the nearly-three-decades-old spec, in spiral-bound notebook paper, about "Dungeon Construction Set":</p>
<p><img src="https://i.stack.imgur.com/WHYpo.jpg" alt="enter image description here" width="320" height="320"></p>
<p><em>(Careful readers will notice that while it's almost right, this doesn't quite hold together on the slanted parts...)</em></p>
<p>Though Treasure of Tarmin was played on a grid, the walls existed only on the <em>edges</em> of grid squares. Having learned what bytes were, I realized that if I made the map out of bytes...then each square on the map could have four possible states for each of its edges:</p>
<ol>
<li>Unobstructed</li>
<li>Wall</li>
<li>Door</li>
<li>Something Else?</li>
</ol>
<p>The design allows for the opportunity that adjacent cells would "disagree"...e.g. have a wall on one side and a door on the other.  I considered this a feature; these situations would give rise to one-way doors and walls that didn't appear until you passed through them and then turned around.</p>
<p>My idea was that a position on the map and a direction you were facing could "light up" regions on the screen...a bit like lighting up segments of a digit on an LCD.</p>
<p>But an implementation of the ideas eluded me.  It was a trickier program than I had written at the time, made even trickier because I was trying to implement it in a "machine language monitor".  I had no assembler, and the book I read didn't discuss them...just the instruction set and workings of the 6502 chip.</p>
<p>(The machine-language-monitor programs could encode single instructions into specific memory locations.  But unlike an assembler, it had no labels or other abstractions...all addresses had to be kept track of on paper.)</p>
<p>By the time I knew enough about programming that I could do something like this in an evening, I no longer cared much about the idea.  But better late than never, right?</p>
<p>Although Unicode/ASCII don't have good "seamless drawing" characters to do this like the C-64 could, it can still get the idea across.</p>
<h2><a href="https://github.com/red/red/pull/612">Originally Wrote this in Red (2013)</a></h2>
<p>I decided I'd use this relatively simple task as something where I would use Red the whole time--as opposed to writing it in Rebol2 or R3-Alpha and then porting the differences.  So that let me get a sense of where the pain points were regarding things like syntax error reporting, that sort of stuff.</p>
<p>Anyway, about a decade later, it's now a Ren-C sample.  Minor modifications were made, including taking advantage of the ReplPad's CLEAR-SCREEN ability (if running on the web).</p>
          <p><a href="https://forum.rebol.info/t/enter-the-dungeon-if-you-dare/1865/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/enter-the-dungeon-if-you-dare/1865/1</link>
        <pubDate>Wed, 06 Jul 2022 04:59:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1865-1</guid>
        <source url="https://forum.rebol.info/t/enter-the-dungeon-if-you-dare/1865.rss">Enter the Dungeon ðŸ’€ ...if You Dare!</source>
      </item>
  </channel>
</rss>
