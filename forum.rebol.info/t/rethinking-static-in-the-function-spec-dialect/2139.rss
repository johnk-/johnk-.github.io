<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rethinking `&lt;static&gt;` in the Function Spec Dialect</title>
    <link>https://forum.rebol.info/t/rethinking-static-in-the-function-spec-dialect/2139</link>
    <description>In R3-Alpha, the FUNCTION construct was built on top of FUNC, and added features like statics as a refinement.  It looked pretty awkward, because the static was added at the end of the expression:

     r3-alpha&gt;&gt; foo: function/with [x] [return staticvar: add staticvar x] [staticvar: 0]

     r3-alpha&gt;&gt; foo 10
     == 10

     r3-alpha&gt;&gt; foo 20
     == 30

Ren-C tried extending the function spec dialect to support this in a nicer way:

     foo: function [x &lt;static&gt; staticvar (0)] [return staticvar: add staticvar x]

The low-level FUNC implementation doesn&#39;t know what `&lt;static&gt;` is, so it&#39;s added by a higher layer, that makes things slower... and since the function spec dialect is kind of foundational it may be the wrong place to be putting this for the core.

@hiiamboris [approaches this differently](https://forum.rebol.info/t/hiiamboriss-with/2138):

[quote]
#### create static storage for functions where existing literal forms don&#39;t allow you to:

```
factorial: func [x] with [cache: make hash! [0 1]] [
    any [
        select/skip cache x 2
        put cache x x * factorial x - 1
    ]
]
```
[/quote]

It&#39;s not the first time I&#39;ve thought it would be a better direction to break it out.  But putting it all as part of the function spec was supposed to have an advantage in that when the body was walked to create the copy, the binding to the static members would be done as well.  This is no longer applicable, because the bodies of functions are largely left unbound...

We do lose a feature of noticing when you are naming the static the same thing as something in your function frame and you don&#39;t get an error in that case, but maybe you don&#39;t want an error (perhaps you inherited the frame through an adaptation or something like that, and you don&#39;t care about the frame variable).

Boris&#39;s dialect is a bit overloaded, and Ren-C has more parts to help with that...[but it would help even more if there were FENCE!](https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727)

    foo: func [x] with [
        {staticvar: 0}
    ][
        return staticvar: add staticvar x
    ]

    foo: func [x] with {staticvar: 0} [
        return staticvar: add staticvar x
    ]

So this wouldn&#39;t be confused with any other WITH things you were doing, like trying to use objects or words and add them to a block that already had a binding.

    &gt;&gt; body: [keep staticvar: staticvar + x]

    &gt;&gt; collect [
           wrapper: func [x] with [&#39;keep {staticvar: 0}] body
           wrapper 1
           wrapper 10
           wrapper 100
       ]
    == [1 11 111]

(Just trying to drum up a little excitement for FENCE! there, but I think it&#39;s the tip of the iceberg.)

Anyway, there&#39;ve been educational lessons from showing that you *can* extend the FUNC spec dialect and build higher level features... but I think we should probably tear those out of the core and move to something like this.</description>
    
    <lastBuildDate>Wed, 31 Jan 2024 01:13:04 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/rethinking-static-in-the-function-spec-dialect/2139.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rethinking `&lt;static&gt;` in the Function Spec Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In R3-Alpha, the FUNCTION construct was built on top of FUNC, and added features like statics as a refinement.  It looked pretty awkward, because the static was added at the end of the expression:</p>
<pre><code> r3-alpha&gt;&gt; foo: function/with [x] [return staticvar: add staticvar x] [staticvar: 0]

 r3-alpha&gt;&gt; foo 10
 == 10

 r3-alpha&gt;&gt; foo 20
 == 30
</code></pre>
<p>Ren-C tried extending the function spec dialect to support this in a nicer way:</p>
<pre><code> foo: function [x &lt;static&gt; staticvar (0)] [return staticvar: add staticvar x]
</code></pre>
<p>The low-level FUNC implementation doesn't know what <code>&lt;static&gt;</code> is, so it's added by a higher layer, that makes things slower... and since the function spec dialect is kind of foundational it may be the wrong place to be putting this for the core.</p>
<p><span class="mention">@hiiamboris</span> <a href="https://forum.rebol.info/t/hiiamboriss-with/2138">approaches this differently</a>:</p>
<aside class="quote no-group">
<blockquote>
<h4>create static storage for functions where existing literal forms don't allow you to:</h4>
<pre><code class="lang-plaintext">factorial: func [x] with [cache: make hash! [0 1]] [
    any [
        select/skip cache x 2
        put cache x x * factorial x - 1
    ]
]
</code></pre>
</blockquote>
</aside>
<p>It's not the first time I've thought it would be a better direction to break it out.  But putting it all as part of the function spec was supposed to have an advantage in that when the body was walked to create the copy, the binding to the static members would be done as well.  This is no longer applicable, because the bodies of functions are largely left unbound...</p>
<p>We do lose a feature of noticing when you are naming the static the same thing as something in your function frame and you don't get an error in that case, but maybe you don't want an error (perhaps you inherited the frame through an adaptation or something like that, and you don't care about the frame variable).</p>
<p>Boris's dialect is a bit overloaded, and Ren-C has more parts to help with that...<a href="https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727">but it would help even more if there were FENCE!</a></p>
<pre><code>foo: func [x] with [
    {staticvar: 0}
][
    return staticvar: add staticvar x
]

foo: func [x] with {staticvar: 0} [
    return staticvar: add staticvar x
]
</code></pre>
<p>So this wouldn't be confused with any other WITH things you were doing, like trying to use objects or words and add them to a block that already had a binding.</p>
<pre><code>&gt;&gt; body: [keep staticvar: staticvar + x]

&gt;&gt; collect [
       wrapper: func [x] with ['keep {staticvar: 0}] body
       wrapper 1
       wrapper 10
       wrapper 100
   ]
== [1 11 111]
</code></pre>
<p>(Just trying to drum up a little excitement for FENCE! there, but I think it's the tip of the iceberg.)</p>
<p>Anyway, there've been educational lessons from showing that you <em>can</em> extend the FUNC spec dialect and build higher level features... but I think we should probably tear those out of the core and move to something like this.</p>
          <p><a href="https://forum.rebol.info/t/rethinking-static-in-the-function-spec-dialect/2139/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rethinking-static-in-the-function-spec-dialect/2139/1</link>
        <pubDate>Tue, 30 Jan 2024 21:48:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2139-1</guid>
        <source url="https://forum.rebol.info/t/rethinking-static-in-the-function-spec-dialect/2139.rss">Rethinking `&lt;static&gt;` in the Function Spec Dialect</source>
      </item>
  </channel>
</rss>
