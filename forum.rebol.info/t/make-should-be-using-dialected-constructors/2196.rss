<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>MAKE Should Be Using *Dialected Constructors*</title>
    <link>https://forum.rebol.info/t/make-should-be-using-dialected-constructors/2196</link>
    <description>[quote=&quot;hostilefork, post:1, topic:1591&quot;]
No one really uses the &quot;polymorphism&quot; of **make some-type some-definition** without really knowing what type or definition is, right? That seems essentially meaningless.
[/quote]

In thinking more about &quot;what is MAKE&quot;, I feel like it is fundamentally a constructor.

---

When you think about Rebol&#39;s value proposition vs. other languages, what&#39;s the key idea?

**DIALECTS.**  The freeform Jazz of programming.  :saxophone:

---

So what should be the differentiating factor about constructors in Rebol vs. other languages?

**CONSTRUCTOR DIALECTS.** :saxophone: :guitar: :drum: :musical_keyboard: 

---

When I say **`make my-type! [...]`** then what goes in that BLOCK! needs to be delegated to MY-TYPE! in some way to allow it the freedom to interpret the hell out of that block.

And it shouldn&#39;t only be allowed to be a BLOCK! full of madness.  Consistent with history where you can write things like **`(make block! 10)`** to preallocate a size, you should be able to pass anything you want.

    make my-type! &#39;some-word

    make my-type! /some-refinement

    make my-type! ${...}  ; gimme a bound FENCE!

    make my-type! @[...]  ; special meaning if &quot;inert&quot; block received?

---

### History Has Ridiculously Underformed The Potential

When you look at the TO/MAKE Matrix, it&#39;s full of meaningless choices:

    rebol2&gt;&gt; make block! [a b c]
    == [a b c]

Huh?  What the hell use is that.  Is it a copy?  Is it a deep copy?  *[Where&#39;s the beef?](https://www.youtube.com/watch?v=U80ebi4AKgs)*
    
Why isn&#39;t the constructor for block a literate landscape, subsuming the functionality of [ARRAY](http://www.rebol.com/docs/words/warray.html) (a terrible name for a verb) and much more?

    &gt;&gt; make block! [4/8 initial: &#39;*]
    == [* * * *]  ; length 4, capacity 8, initialize elements with *

    &gt;&gt; make block! /8
    == []  ; just capacity 8

    &gt;&gt; make block! 4
    == [~ ~ ~ ~]  ; default to meta-TRASH

There&#39;s an answer here that &quot;dialect design is hard&quot;, and it&#39;s scary to put a dialect in the core.  But there&#39;s decades of experience at this point.  And maybe even ways for people to do their own rewrites and transformations so they don&#39;t have to use a **`make-block`** function but can customize **`make block!`** itself.

---

### Ren-C Has Opened Up The Skies, and Will Do More

I was musing on the behavior of FENCE! in the interpreter and thought, what if it wasn&#39;t narrowly defined as being OBJECT! related.  *What if it was MAKE-related, with an object-generating default?*

    &gt;&gt; {x: 10, y: 20}
    == #[object! x: 10 y: 20]

    &gt;&gt; {[block!] 4/8 initial: &#39;*}  ; maybe leading block means MAKE that?
    == [* * * *]

    &gt;&gt; {block! {4/8 initial: &#39;*}}  ; maybe nesting FENCE! does it?
    == [* * * *]

    &gt;&gt; {block! 4/8 initial: &#39;*}  ; maybe starting with WORD! is enough?
    == [* * * *]

    &gt;&gt; {block!}
    == []

It&#39;s a half-baked thought, and I don&#39;t know what the ideal syntax is.  But I feel like this could make FENCE! so much more.

---

## So Coming Soon: The Great MAKE Purge.

In the combinatoric TO/MAKE matrix, there is a ton of garbage.

I&#39;ve previously suggested that TO should not do any evaluation (e.g. be binding agnostic on what it gets in).  I think that remains a good idea, that it be purely mechanical.  [I had some other ideas that are lingering.](https://forum.rebol.info/t/hacking-away-on-the-to-and-make-matrix/649)

I think it&#39;s time to further cull the &quot;MAKE for the sake of thinking everything you pass needs to do something, even if it&#39;s trivial.&quot;  I&#39;ve been wiping out some of the garbage, but more is needed.

And we have to find a way to give users the ability to hook MAKE on their objects... such that something like **`make point-3D! [...]`** isn&#39;t locked into a trivial extension syntax of SET-WORD! and value, but truly able to do interesting things.</description>
    
    <lastBuildDate>Thu, 22 Aug 2024 15:40:18 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/make-should-be-using-dialected-constructors/2196.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>MAKE Should Be Using *Dialected Constructors*</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1591">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/debunking-the-arity-1-make/1591/1">Debunking the Arity-1 MAKE</a>
</div>
<blockquote>
<p>No one really uses the "polymorphism" of <strong>make some-type some-definition</strong> without really knowing what type or definition is, right? That seems essentially meaningless.</p>
</blockquote>
</aside>
<p>In thinking more about "what is MAKE", I feel like it is fundamentally a constructor.</p>
<hr>
<p>When you think about Rebol's value proposition vs. other languages, what's the key idea?</p>
<p><strong>DIALECTS.</strong>  The freeform Jazz of programming.  <img src="https://forum.rebol.info/images/emoji/twitter/saxophone.png?v=12" title=":saxophone:" class="emoji" alt=":saxophone:" loading="lazy" width="20" height="20"></p>
<hr>
<p>So what should be the differentiating factor about constructors in Rebol vs. other languages?</p>
<p><strong>CONSTRUCTOR DIALECTS.</strong> <img src="https://forum.rebol.info/images/emoji/twitter/saxophone.png?v=12" title=":saxophone:" class="emoji" alt=":saxophone:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/guitar.png?v=12" title=":guitar:" class="emoji" alt=":guitar:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/drum.png?v=12" title=":drum:" class="emoji" alt=":drum:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/musical_keyboard.png?v=12" title=":musical_keyboard:" class="emoji" alt=":musical_keyboard:" loading="lazy" width="20" height="20"></p>
<hr>
<p>When I say <strong><code>make my-type! [...]</code></strong> then what goes in that BLOCK! needs to be delegated to MY-TYPE! in some way to allow it the freedom to interpret the hell out of that block.</p>
<p>And it shouldn't only be allowed to be a BLOCK! full of madness.  Consistent with history where you can write things like <strong><code>(make block! 10)</code></strong> to preallocate a size, you should be able to pass anything you want.</p>
<pre><code>make my-type! 'some-word

make my-type! /some-refinement

make my-type! ${...}  ; gimme a bound FENCE!

make my-type! @[...]  ; special meaning if "inert" block received?
</code></pre>
<hr>
<h3>
<a name="history-has-ridiculously-underformed-the-potential-1" class="anchor" href="https://forum.rebol.info#history-has-ridiculously-underformed-the-potential-1"></a>History Has Ridiculously Underformed The Potential</h3>
<p>When you look at the TO/MAKE Matrix, it's full of meaningless choices:</p>
<pre><code>rebol2&gt;&gt; make block! [a b c]
== [a b c]
</code></pre>
<p>Huh?  What the hell use is that.  Is it a copy?  Is it a deep copy?  <em><a href="https://www.youtube.com/watch?v=U80ebi4AKgs">Where's the beef?</a></em></p>
<p>Why isn't the constructor for block a literate landscape, subsuming the functionality of <a href="http://www.rebol.com/docs/words/warray.html">ARRAY</a> (a terrible name for a verb) and much more?</p>
<pre><code>&gt;&gt; make block! [4/8 initial: '*]
== [* * * *]  ; length 4, capacity 8, initialize elements with *

&gt;&gt; make block! /8
== []  ; just capacity 8

&gt;&gt; make block! 4
== [~ ~ ~ ~]  ; default to meta-TRASH
</code></pre>
<p>There's an answer here that "dialect design is hard", and it's scary to put a dialect in the core.  But there's decades of experience at this point.  And maybe even ways for people to do their own rewrites and transformations so they don't have to use a <strong><code>make-block</code></strong> function but can customize <strong><code>make block!</code></strong> itself.</p>
<hr>
<h3>
<a name="ren-c-has-opened-up-the-skies-and-will-do-more-2" class="anchor" href="https://forum.rebol.info#ren-c-has-opened-up-the-skies-and-will-do-more-2"></a>Ren-C Has Opened Up The Skies, and Will Do More</h3>
<p>I was musing on the behavior of FENCE! in the interpreter and thought, what if it wasn't narrowly defined as being OBJECT! related.  <em>What if it was MAKE-related, with an object-generating default?</em></p>
<pre><code>&gt;&gt; {x: 10, y: 20}
== #[object! x: 10 y: 20]

&gt;&gt; {[block!] 4/8 initial: '*}  ; maybe leading block means MAKE that?
== [* * * *]

&gt;&gt; {block! {4/8 initial: '*}}  ; maybe nesting FENCE! does it?
== [* * * *]

&gt;&gt; {block! 4/8 initial: '*}  ; maybe starting with WORD! is enough?
== [* * * *]

&gt;&gt; {block!}
== []
</code></pre>
<p>It's a half-baked thought, and I don't know what the ideal syntax is.  But I feel like this could make FENCE! so much more.</p>
<hr>
<h2>
<a name="so-coming-soon-the-great-make-purge-3" class="anchor" href="https://forum.rebol.info#so-coming-soon-the-great-make-purge-3"></a>So Coming Soon: The Great MAKE Purge.</h2>
<p>In the combinatoric TO/MAKE matrix, there is a ton of garbage.</p>
<p>I've previously suggested that TO should not do any evaluation (e.g. be binding agnostic on what it gets in).  I think that remains a good idea, that it be purely mechanical.  <a href="https://forum.rebol.info/t/hacking-away-on-the-to-and-make-matrix/649">I had some other ideas that are lingering.</a></p>
<p>I think it's time to further cull the "MAKE for the sake of thinking everything you pass needs to do something, even if it's trivial."  I've been wiping out some of the garbage, but more is needed.</p>
<p>And we have to find a way to give users the ability to hook MAKE on their objects... such that something like <strong><code>make point-3D! [...]</code></strong> isn't locked into a trivial extension syntax of SET-WORD! and value, but truly able to do interesting things.</p>
          <p><a href="https://forum.rebol.info/t/make-should-be-using-dialected-constructors/2196/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/make-should-be-using-dialected-constructors/2196/1</link>
        <pubDate>Tue, 20 Aug 2024 05:41:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2196-1</guid>
        <source url="https://forum.rebol.info/t/make-should-be-using-dialected-constructors/2196.rss">MAKE Should Be Using *Dialected Constructors*</source>
      </item>
  </channel>
</rss>
