<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>2023, Another Year :dash: A Few Things That Happened</title>
    <link>https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089</link>
    <description>Happy New Year!

This was a (relatively) slow year for development on Ren-C.  There were a lot of life reasons.  But one technical reason is that there was a lot of drudge work to go through all the various ramifications that generalized isotopes had brought into the system.  There were hundreds of broken tests, each representing a question about the design of some feature.

Unlike forging ahead with the revelation of isotopes themselves, cleaning up the carnage wasn&#39;t glamorous or fun.  And of course, the world doesn&#39;t stand still--Emscripten makes changes, Cypress tests make changes, GitHub Actions makes changes.  Whenever they do, you have to move along with them or things won&#39;t work.  Syncing that up (just to get back to where you were before they changed it) is no fun either.

Looking through the commit log I&#39;ll spare you the boring details, and try to point out a few interesting things that differentiate what&#39;s known now that wasn&#39;t known in 2022.

## Neatest Demo: [Visual UPARSE Debugger](https://forum.rebol.info/t/replpad-visual-parse-debugger/2063)

https://www.youtube.com/watch?v=doS7NgajRxI

This shows the potential of where things are going, and shows a hint of some of the overall strategy to aim Ren-C at interactive debugging.

## Biggest Single Item: Actions as Isotopic FRAME!s

Shortly after conceiving of generalized isotopes, it occurred to me that there could be an isotopic form of functions that would run from a WORD!-dispatch... while a plain form would not.

This was the last piece of the puzzle to accomplish the invariant:

    block1: ...  ; any possible block!
    block2: copy []

    for-each item block1 [  ; items in block guaranteed not to be isotopic
       append block2 item  ; ITEM can&#39;t be isotope, so won&#39;t invoke an action
    ]

    assert [block1 = block2]  ; b.c. ITEM couldn&#39;t be splice, unset variable, etc.

But having two forms of functions was a conceptual quirk.  This rippled into a naming quirk of what to call these two distinct things.  &quot;ACTION&quot; vs. &quot;ACTIVATION&quot; was a first draft, with questions about whether &quot;FUNCTION&quot; vs. &quot;ACTION&quot; might be better (dredging up the old problem of the dual use of FUNCTION as a verb to create functions vs. the noun of the type).

To ultimately resolve the naming issue--as well as pare down the number of moving parts--***[I had an idea](https://forum.rebol.info/t/taking-action-on-function-vs-action/596/6?u=hostilefork)***.  If you made a FRAME! isotopic, then the behavior when referenced through a WORD! would be to make a copy of itself and invoke it.  Then we just refer to the isotopic form as an &quot;action&quot;.

There are implementation challenges with this that I&#39;m still chipping at.  Actions had evolved to be the &quot;same size&quot; as frames, but slots where frames put variables were used to hold parameter definition information for actions (quoted vs. normal, accepted types, etc.)  Merging the two is raising some complex and interesting issues, but not the kinds of things that resolve overnight.

## Other Naming Finalizations (Hopefully?)

What &quot;VOID&quot; means has been changed so many times that if someone saw that with no context... I&#39;d be empathetic to them thinking Ren-C is nuts.  But naming was tied up with fighting over the unique status of &quot;what can&#39;t be put into blocks&quot; in the pre-isotopic era... until it was realized there were a lot of these things.

*(For newcomers like @bradrn, please see for instance [Shades of Distinction in Non-Valued Intents](https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604))*

I&#39;ve tried to retcon the forum posts to be correct (sorry if my constant edits make posts show up as &quot;latest&quot; in the feed, that&#39;s just how this software works).  But the names feel stable to me now.  The last piece of the puzzle was being willing to call isotopic voids &quot;TRASH&quot;, [which seems to be AI approved](https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078).

## Typechecking Via Predicates (sped up with Intrinsics)

Isotopes raised a big question about type checking, in terms of &quot;What is the TYPE OF an isotope&quot;, and how do you say that a function accepts or doesn&#39;t accept them as arguments?

I couldn&#39;t come up with any bright ideas besides saying that all isotopes are of the same fundamental ISOTOPE! type, and you test for distinctions via predicate functions.

What&#39;s neat about this is that you could start writing things in your type constraints like **foo: func [x [even?]]**.  Yet this meant type checking would slow to a crawl.

Optimizations for this are still evolving.  But one big one was the [introduction of intrinsics](https://forum.rebol.info/t/intrinsics-functions-without-frames/2050).  These are natives which the evaluator can subvert building a FRAME! for, calculating one argument and asking for one result from a C function.  Lots of functions fit this model... typecheckers like INTEGER? or simple functions like NOT.

## COMMA! Evaluates to Isotopic Barrier State

I&#39;ve called COMMA! *&quot;the language world&#39;s weirdest comma mechanic&quot;*.  But it seemed that with the rise of empty parameter packs as &quot;vanishing&quot; that the evaluator behavior of commas could be the same as something like a COMMENT or an ELIDE.

Yet in practice, I realized that fusing barriers with invisible intent was not optimal.  Instead, [reserving another isotopic state--the isotopic comma](https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/7?u=hostilefork)--was a better solution.

## ODBC, Cryptography, Locale Use External API Only

The long bet in the libRebol API is to [use strings as currency](https://forum.rebol.info/t/limiting-api-entry-points-in-favor-of-exchanging-strings/540), in variadic functions that could splice in Rebol values.  Large things have been built on this API, like the Web console.  But to further prove that you can really do everything without needing to pick apart cells, this year I pushed several extensions to use this API exclusively...with no direct linkage to the internals.

ODBC contains really interesting examples of this coding stylization, which are worth a look:

[/extensions/odbc/mod-odbc.c (line 549)](https://github.com/metaeducation/ren-c/blob/815758fb571e88591908dc94f9320581f00d9331/extensions/odbc/mod-odbc.c#L549)

## QUERY Sync&#39;d And In Continuous Integration

The QUERY dialect [presented 4 years ago](https://www.youtube.com/watch?v=dPy27z0kseQ) is for letting you query the filesystem or web pages as a kind of replacement for GREP/SED/AWK kind of stuff, e.g. instead of writing:

    ls | awk -F . &#39;{print ${NF}&#39; | sort | uniq -c | awk &#39;{print $2,$1}&#39;

You could say:

    SELECT #fileext count (*) FROM files GROUP BY extension

While @BlackATTR had it working at one point, there were many changes...and some of those changes were inspired by seeing how much worse the query code got when imposing some experimental changes of the time.  I&#39;ve brought it up to date now, and so it should be in the corpus of codebases that are kept working from here on out.

## Behind the Scenes: Naming And Code Organization

I&#39;ve been slowly pushing on the internals to read better.  Particularly important is revisiting outdated comments and adjusting misleading things to reflect the current understandings.

Internal naming is moving to where instead of clumsy names like **`REBVAL`** and **`REBBLK`** we have things like **`Value`** and **`Array`** for types.  All-caps is being reserved for anything that&#39;s a macro with &quot;weird&quot; properties that an ordinary function couldn&#39;t have, e.g. things that can act as the left side of an assignment.  It&#39;s slowly getting cleaned up to have a consistent and readable look.

Various places where debug checks were creating invasive syntax like having to use **mutable_Foo(foo)** to use as the left hand of an assignment with **Foo(foo)** on the right hand side has been cleaned up with better use of C++.  This is done with container classes that defer the decision of whether they are the left hand or right hand side until the time of usage. 

Something that&#39;s been interesting to work on is figuring out how to hook in debug checks for casting operations.  I&#39;ve invented a `cast(type, value)` macro that in C just acts as `(type)(value)` but can do more interesting things in C++.  It has turned out to be quite the wild mechanic, and you can get the gist of a little of how wild it is by looking at [%sys-debug-casts.hpp](https://github.com/metaeducation/ren-c/blob/815758fb571e88591908dc94f9320581f00d9331/src/include/sys-debug-casts.hpp).  In any case, the neat thing is how transparent this is to the C build and the code reads obviously as just doing the cast, but you get extra checks.

# Onward to 2024... What&#39;s In The Plan?

The more things get pinned down the more performance is starting to be a meaningful sticking point in the design.  So I&#39;ve been looking at how fundamental choices impact performance, and seeing where the requirements can be bent to avoid situations which only afford expensive handling

[I still consider UPARSE to be the best showcase of dialecting, and how you can accomplish it in usermode.](https://forum.rebol.info/t/introducing-the-hackable-usermode-parse-uparse/1529).  But in practice, it is *painfully* slow on anything large.  I&#39;ve been trying to look at how to optimize it in ways that minimize how much of it needs to be written as native code... looking for features that provide cross-cutting benefits that would apply to more scenarios than just UPARSE.

Binding needs to get sorted out and simplified.  What&#39;s in the code right now is a real mess of experimentation, and it needs to be rewritten.  Even if there&#39;s no great answer--then I&#39;ll have to just pick a passable answer--so that this can get out the door.

What I&#39;m hoping is to have things done well enough that a good comprehensive paper and YouTube video could be made.  That way it might save others the trouble of re-inventing the same mistakes that all the Rebol clones seem to keep making.  There&#39;s some interesting ground covered here, and I want to make sure it&#39;s all documented.</description>
    
    <lastBuildDate>Thu, 04 Jan 2024 17:13:03 +0000</lastBuildDate>
    <category>Announcements</category>
    <atom:link href="https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>2023, Another Year :dash: A Few Things That Happened</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Unfortunately it's hard for me to make any specific promises about "fitness for purpose" of an end product.</p>
<p>How I feel about pushing things through has a lot to do with how things are going.  As I mentioned, the last year was not all that fun for me, and progress slowed down as a result.  It's easy to spend days or weeks just looking at other things.</p>
<p>If something interesting breaks through--a binding revelation, or something else big--it can be an impetus to keep going.  But there's a pretty big list of challenges...and whenever I have to do large-scale revisiting of the codebase I am reminded how much junk is in there.  If it's all challenges and no fun, then that may mean leaving things for the AIs to finish.</p>
<aside class="quote no-group" data-username="Brett" data-post="2" data-topic="2089">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>a stable artifact that an end-user like myself can have comfort in being a superset of and something that can finally replace Rebol 2 (what I'd originally hoped from the project).</p>
</blockquote>
</aside>
<p>It's telling that Red sought explicitly to be an open-source Rebol2 replacement and has taken a decade-and-some and not gotten there--despite not really challenging any of the design decisions.  What little I've read of their PORT! model suggests a lockstep repetition of bad ideas... and they still can't seem to get that done.</p>
<p>So far, Ren-C has IMO delivered more, while making fewer promises.  It may continue to do so.</p>
<p>But the best way to guide development to make sure it does what you need it to do is to have codebases represented in the list of things that are checked by GitHub Actions.</p>
          <p><a href="https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089/3</link>
        <pubDate>Thu, 04 Jan 2024 17:13:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2089-3</guid>
        <source url="https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089.rss">2023, Another Year :dash: A Few Things That Happened</source>
      </item>
      <item>
        <title>2023, Another Year :dash: A Few Things That Happened</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>Happy New Year to you too!</p>
<p>Just curious, perhaps I've missed where you defined it but what you mean by "this can get out the door"?  A completed language research project you're comfortable having exhausted the ideas and interest within (what I've come to believe is now the case) or a stable artifact that an end-user like myself can have comfort in being a superset of and something that can finally replace Rebol 2 (what I'd originally hoped from the project).</p>
<p>Just wondering what your end target looks like really.  Is the comprehensive paper and youtube video the final outcome of the project?</p>
          <p><a href="https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089/2</link>
        <pubDate>Tue, 02 Jan 2024 00:18:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2089-2</guid>
        <source url="https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089.rss">2023, Another Year :dash: A Few Things That Happened</source>
      </item>
      <item>
        <title>2023, Another Year :dash: A Few Things That Happened</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Happy New Year!</p>
<p>This was a (relatively) slow year for development on Ren-C.  There were a lot of life reasons.  But one technical reason is that there was a lot of drudge work to go through all the various ramifications that generalized isotopes had brought into the system.  There were hundreds of broken tests, each representing a question about the design of some feature.</p>
<p>Unlike forging ahead with the revelation of isotopes themselves, cleaning up the carnage wasn't glamorous or fun.  And of course, the world doesn't stand still--Emscripten makes changes, Cypress tests make changes, GitHub Actions makes changes.  Whenever they do, you have to move along with them or things won't work.  Syncing that up (just to get back to where you were before they changed it) is no fun either.</p>
<p>Looking through the commit log I'll spare you the boring details, and try to point out a few interesting things that differentiate what's known now that wasn't known in 2022.</p>
<h2>
<a name="neatest-demo-visual-uparse-debuggerhttpsforumrebolinfotreplpad-visual-parse-debugger2063-1" class="anchor" href="https://forum.rebol.info#neatest-demo-visual-uparse-debuggerhttpsforumrebolinfotreplpad-visual-parse-debugger2063-1"></a>Neatest Demo: <a href="https://forum.rebol.info/t/replpad-visual-parse-debugger/2063">Visual UPARSE Debugger</a>
</h2>
<p><a href="https://www.youtube.com/watch?v=doS7NgajRxI">Ren-C PARSE Hook Demo: Debugging</a></p>

<p>This shows the potential of where things are going, and shows a hint of some of the overall strategy to aim Ren-C at interactive debugging.</p>
<h2>
<a name="biggest-single-item-actions-as-isotopic-frames-2" class="anchor" href="https://forum.rebol.info#biggest-single-item-actions-as-isotopic-frames-2"></a>Biggest Single Item: Actions as Isotopic FRAME!s</h2>
<p>Shortly after conceiving of generalized isotopes, it occurred to me that there could be an isotopic form of functions that would run from a WORD!-dispatch... while a plain form would not.</p>
<p>This was the last piece of the puzzle to accomplish the invariant:</p>
<pre><code>block1: ...  ; any possible block!
block2: copy []

for-each item block1 [  ; items in block guaranteed not to be isotopic
   append block2 item  ; ITEM can't be isotope, so won't invoke an action
]

assert [block1 = block2]  ; b.c. ITEM couldn't be splice, unset variable, etc.
</code></pre>
<p>But having two forms of functions was a conceptual quirk.  This rippled into a naming quirk of what to call these two distinct things.  "ACTION" vs. "ACTIVATION" was a first draft, with questions about whether "FUNCTION" vs. "ACTION" might be better (dredging up the old problem of the dual use of FUNCTION as a verb to create functions vs. the noun of the type).</p>
<p>To ultimately resolve the naming issue--as well as pare down the number of moving parts--<em><strong><a href="https://forum.rebol.info/t/taking-action-on-function-vs-action/596/6">I had an idea</a></strong></em>.  If you made a FRAME! isotopic, then the behavior when referenced through a WORD! would be to make a copy of itself and invoke it.  Then we just refer to the isotopic form as an "action".</p>
<p>There are implementation challenges with this that I'm still chipping at.  Actions had evolved to be the "same size" as frames, but slots where frames put variables were used to hold parameter definition information for actions (quoted vs. normal, accepted types, etc.)  Merging the two is raising some complex and interesting issues, but not the kinds of things that resolve overnight.</p>
<h2>
<a name="other-naming-finalizations-hopefully-3" class="anchor" href="https://forum.rebol.info#other-naming-finalizations-hopefully-3"></a>Other Naming Finalizations (Hopefully?)</h2>
<p>What "VOID" means has been changed so many times that if someone saw that with no context... I'd be empathetic to them thinking Ren-C is nuts.  But naming was tied up with fighting over the unique status of "what can't be put into blocks" in the pre-isotopic era... until it was realized there were a lot of these things.</p>
<p><em>(For newcomers like <a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a>, please see for instance <a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604">Shades of Distinction in Non-Valued Intents</a>)</em></p>
<p>I've tried to retcon the forum posts to be correct (sorry if my constant edits make posts show up as "latest" in the feed, that's just how this software works).  But the names feel stable to me now.  The last piece of the puzzle was being willing to call isotopic voids "TRASH", <a href="https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078">which seems to be AI approved</a>.</p>
<h2>
<a name="typechecking-via-predicates-sped-up-with-intrinsics-4" class="anchor" href="https://forum.rebol.info#typechecking-via-predicates-sped-up-with-intrinsics-4"></a>Typechecking Via Predicates (sped up with Intrinsics)</h2>
<p>Isotopes raised a big question about type checking, in terms of "What is the TYPE OF an isotope", and how do you say that a function accepts or doesn't accept them as arguments?</p>
<p>I couldn't come up with any bright ideas besides saying that all isotopes are of the same fundamental ISOTOPE! type, and you test for distinctions via predicate functions.</p>
<p>What's neat about this is that you could start writing things in your type constraints like <strong>foo: func [x [even?]]</strong>.  Yet this meant type checking would slow to a crawl.</p>
<p>Optimizations for this are still evolving.  But one big one was the <a href="https://forum.rebol.info/t/intrinsics-functions-without-frames/2050">introduction of intrinsics</a>.  These are natives which the evaluator can subvert building a FRAME! for, calculating one argument and asking for one result from a C function.  Lots of functions fit this model... typecheckers like INTEGER? or simple functions like NOT.</p>
<h2>
<a name="comma-evaluates-to-isotopic-barrier-state-5" class="anchor" href="https://forum.rebol.info#comma-evaluates-to-isotopic-barrier-state-5"></a>COMMA! Evaluates to Isotopic Barrier State</h2>
<p>I've called COMMA! <em>"the language world's weirdest comma mechanic"</em>.  But it seemed that with the rise of empty parameter packs as "vanishing" that the evaluator behavior of commas could be the same as something like a COMMENT or an ELIDE.</p>
<p>Yet in practice, I realized that fusing barriers with invisible intent was not optimal.  Instead, <a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/7">reserving another isotopic state--the isotopic comma</a>--was a better solution.</p>
<h2>
<a name="odbc-cryptography-locale-use-external-api-only-6" class="anchor" href="https://forum.rebol.info#odbc-cryptography-locale-use-external-api-only-6"></a>ODBC, Cryptography, Locale Use External API Only</h2>
<p>The long bet in the libRebol API is to <a href="https://forum.rebol.info/t/limiting-api-entry-points-in-favor-of-exchanging-strings/540">use strings as currency</a>, in variadic functions that could splice in Rebol values.  Large things have been built on this API, like the Web console.  But to further prove that you can really do everything without needing to pick apart cells, this year I pushed several extensions to use this API exclusively...with no direct linkage to the internals.</p>
<p>ODBC contains really interesting examples of this coding stylization, which are worth a look:</p>
<p><a href="https://github.com/metaeducation/ren-c/blob/815758fb571e88591908dc94f9320581f00d9331/extensions/odbc/mod-odbc.c#L549">/extensions/odbc/mod-odbc.c (line 549)</a></p>
<h2>
<a name="query-syncd-and-in-continuous-integration-7" class="anchor" href="https://forum.rebol.info#query-syncd-and-in-continuous-integration-7"></a>QUERY Sync'd And In Continuous Integration</h2>
<p>The QUERY dialect <a href="https://www.youtube.com/watch?v=dPy27z0kseQ">presented 4 years ago</a> is for letting you query the filesystem or web pages as a kind of replacement for GREP/SED/AWK kind of stuff, e.g. instead of writing:</p>
<pre><code>ls | awk -F . '{print ${NF}' | sort | uniq -c | awk '{print $2,$1}'
</code></pre>
<p>You could say:</p>
<pre><code>SELECT #fileext count (*) FROM files GROUP BY extension
</code></pre>
<p>While <a class="mention" href="https://forum.rebol.info/u/blackattr">@BlackATTR</a> had it working at one point, there were many changes...and some of those changes were inspired by seeing how much worse the query code got when imposing some experimental changes of the time.  I've brought it up to date now, and so it should be in the corpus of codebases that are kept working from here on out.</p>
<h2>
<a name="behind-the-scenes-naming-and-code-organization-8" class="anchor" href="https://forum.rebol.info#behind-the-scenes-naming-and-code-organization-8"></a>Behind the Scenes: Naming And Code Organization</h2>
<p>I've been slowly pushing on the internals to read better.  Particularly important is revisiting outdated comments and adjusting misleading things to reflect the current understandings.</p>
<p>Internal naming is moving to where instead of clumsy names like <strong><code>REBVAL</code></strong> and <strong><code>REBBLK</code></strong> we have things like <strong><code>Value</code></strong> and <strong><code>Array</code></strong> for types.  All-caps is being reserved for anything that's a macro with "weird" properties that an ordinary function couldn't have, e.g. things that can act as the left side of an assignment.  It's slowly getting cleaned up to have a consistent and readable look.</p>
<p>Various places where debug checks were creating invasive syntax like having to use <strong>mutable_Foo(foo)</strong> to use as the left hand of an assignment with <strong>Foo(foo)</strong> on the right hand side has been cleaned up with better use of C++.  This is done with container classes that defer the decision of whether they are the left hand or right hand side until the time of usage.</p>
<p>Something that's been interesting to work on is figuring out how to hook in debug checks for casting operations.  I've invented a <code>cast(type, value)</code> macro that in C just acts as <code>(type)(value)</code> but can do more interesting things in C++.  It has turned out to be quite the wild mechanic, and you can get the gist of a little of how wild it is by looking at <a href="https://github.com/metaeducation/ren-c/blob/815758fb571e88591908dc94f9320581f00d9331/src/include/sys-debug-casts.hpp">%sys-debug-casts.hpp</a>.  In any case, the neat thing is how transparent this is to the C build and the code reads obviously as just doing the cast, but you get extra checks.</p>
<h1>
<a name="onward-to-2024-whats-in-the-plan-9" class="anchor" href="https://forum.rebol.info#onward-to-2024-whats-in-the-plan-9"></a>Onward to 2024... What's In The Plan?</h1>
<p>The more things get pinned down the more performance is starting to be a meaningful sticking point in the design.  So I've been looking at how fundamental choices impact performance, and seeing where the requirements can be bent to avoid situations which only afford expensive handling</p>
<p><a href="https://forum.rebol.info/t/introducing-the-hackable-usermode-parse-uparse/1529">I still consider UPARSE to be the best showcase of dialecting, and how you can accomplish it in usermode.</a>.  But in practice, it is <em>painfully</em> slow on anything large.  I've been trying to look at how to optimize it in ways that minimize how much of it needs to be written as native code... looking for features that provide cross-cutting benefits that would apply to more scenarios than just UPARSE.</p>
<p>Binding needs to get sorted out and simplified.  What's in the code right now is a real mess of experimentation, and it needs to be rewritten.  Even if there's no great answer--then I'll have to just pick a passable answer--so that this can get out the door.</p>
<p>What I'm hoping is to have things done well enough that a good comprehensive paper and YouTube video could be made.  That way it might save others the trouble of re-inventing the same mistakes that all the Rebol clones seem to keep making.  There's some interesting ground covered here, and I want to make sure it's all documented.</p>
          <p><a href="https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089/1</link>
        <pubDate>Mon, 01 Jan 2024 13:10:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2089-1</guid>
        <source url="https://forum.rebol.info/t/2023-another-year-a-few-things-that-happened/2089.rss">2023, Another Year :dash: A Few Things That Happened</source>
      </item>
  </channel>
</rss>
