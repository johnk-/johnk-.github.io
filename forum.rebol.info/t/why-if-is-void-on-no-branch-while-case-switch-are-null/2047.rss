<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why IF is void on no branch, while CASE+SWITCH are null</title>
    <link>https://forum.rebol.info/t/why-if-is-void-on-no-branch-while-case-switch-are-null/2047</link>
    <description>For a time, all control structures returned void when they did not branch.  This was motivated in particular by wanting IFs to vanish quietly when they didn&#39;t take their branch.  At first it was just COMPOSE:

     &gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
     == [&lt;a&gt; &lt;b&gt;]

But this spread to things like REDUCE, ANY, ALL, etc.

    &gt;&gt; reduce [1 + 2 if false [30] 100 + 200]
    == [3 300]

    &gt;&gt; all [&lt;a&gt; if false [&lt;b&gt;] if true [&lt;c&gt;]]
    == &lt;c&gt;

The cleanliness of this is extremely desirable.  It would lose a lot if you had to throw in a NULL-TO-VOID conversion (what we call &quot;MAYBE&quot;)

    &gt;&gt; compose [&lt;a&gt; (maybe if false [&lt;b&gt;]) &lt;c&gt;]
    == [&lt;a&gt; &lt;b&gt;]

    &gt;&gt; reduce [1 + 2 maybe if false [30] 100 + 200]
    == [3 300]

    &gt;&gt; all [&lt;a&gt; maybe if false [&lt;b&gt;] maybe if true [&lt;c&gt;]]
    == &lt;c&gt;

## VOID Becomes A Casualty Of Its Friendliness

At first, void variables would cause errors on access.  But this was softened, allowing them to be fetched without using GET-WORD! access or other fanfare:

    &gt;&gt; x: void

    &gt;&gt; append [a b c] x
    == [a b c]

Having things like CASE and SWITCH produce these is easily is a little bit unsettling.  All that has to happen is that you have a branch list that is not exhaustive.

For instance:

    lib: switch config.platform [
        &#39;Windows [%windows.lib]
        &#39;Linux [%linux.a]
    ]

You&#39;ve now got LIB as VOID.  It&#39;s uncomfortable to think about how such casual creation of voids makes a value that will go around opting out of things.

This puts a burden on people writing such lists to throw in a FAIL at the ending:

    lib: switch config.platform [
        &#39;Windows [%windows.lib]
        &#39;Linux [%linux.a]
        fail  ; not so hard to do this if you don&#39;t want VOIDs
    ]

## But...What if you *WANT* a NULL?

As it happens, due to the [SWITCH and CASE &quot;Fallout&quot; Feature](https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312), this also works with things like NULL:

    lib: switch config.platform [
        &#39;Windows [%windows.lib]
        &#39;Linux [%linux.a]
        null
    ]

Basically if you give an evaluative clause with no branch, the clause drops out if it is reached.

It is *weird*, but it&#39;s foreignness doesn&#39;t necessarily make it *bad*.  Though were it a CASE statement, some people might gravitate toward an always-TRUE branch as not violating the structure:

    lib: case [
        config.platform = &#39;Windows [%windows.lib]
        config.platform = &#39;Linux [%linux.a]
        true [null]
    ]

But SWITCH has no equivalent, so its either the fallout feature or an ELSE (which won&#39;t please @rgchris and I think I prefer fallout)

    lib: switch config.platform [
        &#39;Windows [%windows.lib]
        &#39;Linux [%linux.a]
    ] else [null]

## You&#39;d Need A VOID-TO-NULL Operator :thinking: 

You might think that TRY could nullify-voids, but this creates conflation of disabling raised errors returned by branches.  e.g. what if the Windows branch tried to READ a nonexistent file?

    lib: try switch config.platform [
        &#39;Windows [read %windowslibname.txt]  ; imagine raises error
        &#39;Linux [%linux.a]
    ]

Not being able to open the file would conflate with not taking a branch--no good.  This shows the use of TRY to convert voids to nulls is clearly a poor idea, and that needs to be a special purpose function.

So TRY is off the table at this point; it&#39;s an ignore-raised-error-and-continue.

DEVOID is a cryptic name that was actually proposed to turn VOIDs to NIHILs for vaporization in situations that didn&#39;t naturally vaporize voids:

    &gt;&gt; 1 + 2 void
    == ~void~  ; anti

    &gt;&gt; 1 + 2 devoid void
    == 3

So I will call this something like NULLIFY-IF-VOID until a better idea comes along.  Clearly not great for everyday use.

## Ultimately, NULL For Non-IF Control Structures Was Chosen

IFs can be as light as **`if condition &#39;10`**  It seems VOID is a relatively safe answer for IF, because it has one branch and you&#39;re very aware that it takes its branch or it doesn&#39;t.

But if you&#39;re writing a CASE or a SWITCH it&#39;s probably not tiny, and saying MAYBE CASE or MAYBE SWITCH isn&#39;t much of a burden.

So twistier constructs like SWITCH and CASE are more conservative and evaluate to NULL when a branch isn&#39;t taken.

(We might decide that the empty cases  **`case []`** and **`switch []`** are VOID, and then you have a bit more data of when no conditions were run.  Is that useful?)

## Some Casualties Of Equivalence

In a perfect world, I would like to be able to write something like:

     unmeta* any [
         meta* if condition1 [branch1]
         meta* if condition2 [branch2]
     ]

...and have it be the same as:

    case [
       condition1 [branch1]
       condition2 [branch2]
    ]

Transformations like this which relate constructs together means people can build on reliable parts.  The response of ANY when all expressions void out is to give a VOID, and that&#39;s by design.

But I don&#39;t know what part of the universe breaks if ANY on a bunch of IFs isn&#39;t the exact same as CASE.  It&#39;s the same if you pipe pure null to pure void.</description>
    
    <lastBuildDate>Thu, 12 Sep 2024 13:44:07 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://forum.rebol.info/t/why-if-is-void-on-no-branch-while-case-switch-are-null/2047.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why IF is void on no branch, while CASE+SWITCH are null</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>For a time, all control structures returned void when they did not branch.  This was motivated in particular by wanting IFs to vanish quietly when they didn't take their branch.  At first it was just COMPOSE:</p>
<pre><code> &gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
 == [&lt;a&gt; &lt;b&gt;]
</code></pre>
<p>But this spread to things like REDUCE, ANY, ALL, etc.</p>
<pre><code>&gt;&gt; reduce [1 + 2 if false [30] 100 + 200]
== [3 300]

&gt;&gt; all [&lt;a&gt; if false [&lt;b&gt;] if true [&lt;c&gt;]]
== &lt;c&gt;
</code></pre>
<p>The cleanliness of this is extremely desirable.  It would lose a lot if you had to throw in a NULL-TO-VOID conversion (what we call "MAYBE")</p>
<pre><code>&gt;&gt; compose [&lt;a&gt; (maybe if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; &lt;b&gt;]

&gt;&gt; reduce [1 + 2 maybe if false [30] 100 + 200]
== [3 300]

&gt;&gt; all [&lt;a&gt; maybe if false [&lt;b&gt;] maybe if true [&lt;c&gt;]]
== &lt;c&gt;
</code></pre>
<h2>
<a name="void-becomes-a-casualty-of-its-friendliness-1" class="anchor" href="https://forum.rebol.info#void-becomes-a-casualty-of-its-friendliness-1"></a>VOID Becomes A Casualty Of Its Friendliness</h2>
<p>At first, void variables would cause errors on access.  But this was softened, allowing them to be fetched without using GET-WORD! access or other fanfare:</p>
<pre><code>&gt;&gt; x: void

&gt;&gt; append [a b c] x
== [a b c]
</code></pre>
<p>Having things like CASE and SWITCH produce these is easily is a little bit unsettling.  All that has to happen is that you have a branch list that is not exhaustive.</p>
<p>For instance:</p>
<pre><code>lib: switch config.platform [
    'Windows [%windows.lib]
    'Linux [%linux.a]
]
</code></pre>
<p>You've now got LIB as VOID.  It's uncomfortable to think about how such casual creation of voids makes a value that will go around opting out of things.</p>
<p>This puts a burden on people writing such lists to throw in a FAIL at the ending:</p>
<pre><code>lib: switch config.platform [
    'Windows [%windows.lib]
    'Linux [%linux.a]
    fail  ; not so hard to do this if you don't want VOIDs
]
</code></pre>
<h2>
<a name="butwhat-if-you-want-a-null-2" class="anchor" href="https://forum.rebol.info#butwhat-if-you-want-a-null-2"></a>But...What if you <em>WANT</em> a NULL?</h2>
<p>As it happens, due to the <a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312">SWITCH and CASE "Fallout" Feature</a>, this also works with things like NULL:</p>
<pre><code>lib: switch config.platform [
    'Windows [%windows.lib]
    'Linux [%linux.a]
    null
]
</code></pre>
<p>Basically if you give an evaluative clause with no branch, the clause drops out if it is reached.</p>
<p>It is <em>weird</em>, but it's foreignness doesn't necessarily make it <em>bad</em>.  Though were it a CASE statement, some people might gravitate toward an always-TRUE branch as not violating the structure:</p>
<pre><code>lib: case [
    config.platform = 'Windows [%windows.lib]
    config.platform = 'Linux [%linux.a]
    true [null]
]
</code></pre>
<p>But SWITCH has no equivalent, so its either the fallout feature or an ELSE (which won't please <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> and I think I prefer fallout)</p>
<pre><code>lib: switch config.platform [
    'Windows [%windows.lib]
    'Linux [%linux.a]
] else [null]
</code></pre>
<h2>
<a name="youd-need-a-void-to-null-operator-thinking-3" class="anchor" href="https://forum.rebol.info#youd-need-a-void-to-null-operator-thinking-3"></a>You'd Need A VOID-TO-NULL Operator <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20">
</h2>
<p>You might think that TRY could nullify-voids, but this creates conflation of disabling raised errors returned by branches.  e.g. what if the Windows branch tried to READ a nonexistent file?</p>
<pre><code>lib: try switch config.platform [
    'Windows [read %windowslibname.txt]  ; imagine raises error
    'Linux [%linux.a]
]
</code></pre>
<p>Not being able to open the file would conflate with not taking a branch--no good.  This shows the use of TRY to convert voids to nulls is clearly a poor idea, and that needs to be a special purpose function.</p>
<p>So TRY is off the table at this point; it's an ignore-raised-error-and-continue.</p>
<p>DEVOID is a cryptic name that was actually proposed to turn VOIDs to NIHILs for vaporization in situations that didn't naturally vaporize voids:</p>
<pre><code>&gt;&gt; 1 + 2 void
== ~void~  ; anti

&gt;&gt; 1 + 2 devoid void
== 3
</code></pre>
<p>So I will call this something like NULLIFY-IF-VOID until a better idea comes along.  Clearly not great for everyday use.</p>
<h2>
<a name="ultimately-null-for-non-if-control-structures-was-chosen-4" class="anchor" href="https://forum.rebol.info#ultimately-null-for-non-if-control-structures-was-chosen-4"></a>Ultimately, NULL For Non-IF Control Structures Was Chosen</h2>
<p>IFs can be as light as <strong><code>if condition '10</code></strong>  It seems VOID is a relatively safe answer for IF, because it has one branch and you're very aware that it takes its branch or it doesn't.</p>
<p>But if you're writing a CASE or a SWITCH it's probably not tiny, and saying MAYBE CASE or MAYBE SWITCH isn't much of a burden.</p>
<p>So twistier constructs like SWITCH and CASE are more conservative and evaluate to NULL when a branch isn't taken.</p>
<p>(We might decide that the empty cases  <strong><code>case []</code></strong> and <strong><code>switch []</code></strong> are VOID, and then you have a bit more data of when no conditions were run.  Is that useful?)</p>
<h2>
<a name="some-casualties-of-equivalence-5" class="anchor" href="https://forum.rebol.info#some-casualties-of-equivalence-5"></a>Some Casualties Of Equivalence</h2>
<p>In a perfect world, I would like to be able to write something like:</p>
<pre><code> unmeta* any [
     meta* if condition1 [branch1]
     meta* if condition2 [branch2]
 ]
</code></pre>
<p>...and have it be the same as:</p>
<pre><code>case [
   condition1 [branch1]
   condition2 [branch2]
]
</code></pre>
<p>Transformations like this which relate constructs together means people can build on reliable parts.  The response of ANY when all expressions void out is to give a VOID, and that's by design.</p>
<p>But I don't know what part of the universe breaks if ANY on a bunch of IFs isn't the exact same as CASE.  It's the same if you pipe pure null to pure void.</p>
          <p><a href="https://forum.rebol.info/t/why-if-is-void-on-no-branch-while-case-switch-are-null/2047/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-if-is-void-on-no-branch-while-case-switch-are-null/2047/1</link>
        <pubDate>Mon, 14 Aug 2023 17:08:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2047-1</guid>
        <source url="https://forum.rebol.info/t/why-if-is-void-on-no-branch-while-case-switch-are-null/2047.rss">Why IF is void on no branch, while CASE+SWITCH are null</source>
      </item>
  </channel>
</rss>
