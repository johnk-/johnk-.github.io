<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>FRAME! / ACTION! Duality Examined</title>
    <link>https://forum.rebol.info/t/frame-action-duality-examined/1898</link>
    <description>The mechanics behind FRAME! and ACTION! have been mixed up and reshaped over time, to where they are very much tied together.

At times I&#39;ve wondered if we need both types.  If ACTION!s become inert unless they are isotopic, then that would seem to blur the distinction even more... since FRAME!s have kind of been &quot;inert actions&quot;.  

So I thought I&#39;d try writing up an explanation of the current state of things.

## First: What&#39;s a FRAME! ?

You can think of a FRAME! as an object which has keys and values for the arguments and locals of a function.  There&#39;s a flag on each cell which indicates whether the object member has been &quot;specialized out&quot;.  If the flag is set, the slot is presumed to contain the value it will have when the function runs.  Otherwise the object member is presumed to contain the type information for acquiring that parameter.

So when you make an ACTION! like:

    foo: func [x [integer!] y [text!] &lt;local&gt; z] [...]

It&#39;s internals are actually a FRAME! (called an &quot;exemplar&quot;) that looks *something* like:

    make frame! [
        x: [integer!]  ; unspecialized
        y: [text!]  ; unspecialized
        z: ~   ; specialized
    ]

## What&#39;s The Difference Between ACTION! and FRAME!, Then?

Looking at the above: **you wouldn&#39;t want to try and DO a FRAME! which has type information in the argument slots**.  When the code for the function runs, it&#39;s expected that X be *an integer instance*...not type information saying an integer is expected!

So when you MAKE FRAME! from an ACTION!, it goes through all the slots and wipes them out to be unset:

    &gt;&gt; make frame! :foo
    == make frame! [
        x: ~
        y: ~
    ]  ; ^-- local z is not shown, as it was already specialized to a value

But it still has to maintain a link to the original information about the parameter types, in order to validate them.  So there&#39;s a pointer from each of these &quot;non-exemplar&quot; FRAME!s to the &quot;exemplar&quot; FRAME! with the type information.

## So ACTION!s are FRAME!s w/typesets in slots where args would be? 

Kind of.  I glossed over some details there (there&#39;s more information in the parameter description than the type block...you need to know if it&#39;s quoted, or if it&#39;s a refinement, etc.)

Right now every FRAME! points at an ACTION! instance.  So you can ask **action of frame** and get an answer.  That answer leads you to the thing that the system will use to do type checking on that frame (and you can in theory use it yourself).

**It could truthfully be said that you never execute ACTION!s, you only execute FRAME!s.**  But when we say we &quot;execute an action&quot; all we mean is that a new frame is created for it, and then *that* frame is executed.

One might wonder why something like SPECIALIZE would create an ACTION! instead of just making a FRAME!.  One good reason is that this offers an opportunity to *completely erase* the specialized variables from the interface.  With the variables erased, the words become available again for use in AUGMENT-ing the composite function.

## So There&#39;s Some Info...

Things are sort of stable with this, but a big thing on the horizon is the possibility that there might be FRAME! instances for evaluators besides actions.  So you could have a FRAME! representing just the evaluation of a BLOCK!.  (Today that&#39;s *sort of* what a VARARGS! is.)</description>
    
    <lastBuildDate>Sat, 23 Jul 2022 17:43:10 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/frame-action-duality-examined/1898.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>FRAME! / ACTION! Duality Examined</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The mechanics behind FRAME! and ACTION! have been mixed up and reshaped over time, to where they are very much tied together.</p>
<p>At times I've wondered if we need both types.  If ACTION!s become inert unless they are isotopic, then that would seem to blur the distinction even more... since FRAME!s have kind of been "inert actions".</p>
<p>So I thought I'd try writing up an explanation of the current state of things.</p>
<h2>First: What's a FRAME! ?</h2>
<p>You can think of a FRAME! as an object which has keys and values for the arguments and locals of a function.  There's a flag on each cell which indicates whether the object member has been "specialized out".  If the flag is set, the slot is presumed to contain the value it will have when the function runs.  Otherwise the object member is presumed to contain the type information for acquiring that parameter.</p>
<p>So when you make an ACTION! like:</p>
<pre><code>foo: func [x [integer!] y [text!] &lt;local&gt; z] [...]
</code></pre>
<p>It's internals are actually a FRAME! (called an "exemplar") that looks <em>something</em> like:</p>
<pre><code>make frame! [
    x: [integer!]  ; unspecialized
    y: [text!]  ; unspecialized
    z: ~   ; specialized
]
</code></pre>
<h2>What's The Difference Between ACTION! and FRAME!, Then?</h2>
<p>Looking at the above: <strong>you wouldn't want to try and DO a FRAME! which has type information in the argument slots</strong>.  When the code for the function runs, it's expected that X be <em>an integer instance</em>...not type information saying an integer is expected!</p>
<p>So when you MAKE FRAME! from an ACTION!, it goes through all the slots and wipes them out to be unset:</p>
<pre><code>&gt;&gt; make frame! :foo
== make frame! [
    x: ~
    y: ~
]  ; ^-- local z is not shown, as it was already specialized to a value
</code></pre>
<p>But it still has to maintain a link to the original information about the parameter types, in order to validate them.  So there's a pointer from each of these "non-exemplar" FRAME!s to the "exemplar" FRAME! with the type information.</p>
<h2>So ACTION!s are FRAME!s w/typesets in slots where args would be?</h2>
<p>Kind of.  I glossed over some details there (there's more information in the parameter description than the type block...you need to know if it's quoted, or if it's a refinement, etc.)</p>
<p>Right now every FRAME! points at an ACTION! instance.  So you can ask <strong>action of frame</strong> and get an answer.  That answer leads you to the thing that the system will use to do type checking on that frame (and you can in theory use it yourself).</p>
<p><strong>It could truthfully be said that you never execute ACTION!s, you only execute FRAME!s.</strong>  But when we say we "execute an action" all we mean is that a new frame is created for it, and then <em>that</em> frame is executed.</p>
<p>One might wonder why something like SPECIALIZE would create an ACTION! instead of just making a FRAME!.  One good reason is that this offers an opportunity to <em>completely erase</em> the specialized variables from the interface.  With the variables erased, the words become available again for use in AUGMENT-ing the composite function.</p>
<h2>So There's Some Info...</h2>
<p>Things are sort of stable with this, but a big thing on the horizon is the possibility that there might be FRAME! instances for evaluators besides actions.  So you could have a FRAME! representing just the evaluation of a BLOCK!.  (Today that's <em>sort of</em> what a VARARGS! is.)</p>
          <p><a href="https://forum.rebol.info/t/frame-action-duality-examined/1898/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/frame-action-duality-examined/1898/1</link>
        <pubDate>Sat, 23 Jul 2022 17:43:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1898-1</guid>
        <source url="https://forum.rebol.info/t/frame-action-duality-examined/1898.rss">FRAME! / ACTION! Duality Examined</source>
      </item>
  </channel>
</rss>
