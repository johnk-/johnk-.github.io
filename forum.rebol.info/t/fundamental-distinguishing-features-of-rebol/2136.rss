<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Fundamental distinguishing features of Rebol</title>
    <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136</link>
    <description>Perhaps foolishly, I offered to give a talk at my local Functional Programming meetup next month. Given my recent interests, I’m thinking of giving an intro to Rebol and its basic concepts.

So that’s gotten me thinking: what *are* the basic concepts of Rebol as a programming paradigm, which distinguish it from all others? Here’s what I’ve come up with so far:

- **Everything is a datatype**: Rebol was built for networking. This means you should be able to take any value, serialise it in a human-readable way, and parse it back into a value. This means a lot of built-in datatypes for useful concepts.
- **Data is code**: Everything starts out its life as data. If you want, you can evaluate it in some way to get a result. Naturally, you can evaluate it using any rules you want, which gives you **dialecting** as a corollary.

  (It’s worth noting that this is the converse of Lisp’s famous maxim, ‘code is data’.)
- **Binding**: Word values are associated with their storage. This can be arbitrarily manipulated by the programmer, leading to **definitional scoping**.

- More generally, I might summarise all the above points as natural consequences of **computing with evaluation**: the fundamental operation of Rebol is taking values and extracting some kind of result from them. This necessitates the other points above: a rich set of datatypes to store both the original value and the result, the ability to treat those datatypes as code which can be evaluated, and a way to look up references during the evaluation process.

Does this all seem reasonable? Have I missed anything?</description>
    
    <lastBuildDate>Sat, 24 Aug 2024 18:42:03 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Just to add to this thread, <strong>the fundamental distinguishing feature of Ren-C</strong>...</p>
<aside class="quote quote-modified" data-post="1" data-topic="2217">
  <div class="title">
    <div class="quote-controls"></div>
    <img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/the-theory-of-meta-representability/2217">The Theory of Meta-Representability</a> <a class="badge-wrapper  bullet" href="https://forum.rebol.info/c/usage/philosophy/31"><span class="badge-category-parent-bg" style="background-color: #3AB54A;"></span><span class="badge-category-bg" style="background-color: #3AB54A;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="How does Rebol differ from other computer languages and what makes code Rebolish and functional vs procedural coding.">Philosophy</span></a>
  </div>
  <blockquote>
    I wrote this to try and give some context to an AI before asking it a naming question. 

Most imperative programming languages do not delve into the relationships between things like null and undefined... as if they were mathematical, and you were going to discover that if you take the square root of undefined you get null, etc.  <img width="20" height="20" src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title="slight_smile" alt="slight_smile" class="emoji">  But I am doing something analogous to that. 
In particular, I'm making it possible to push variables which may contain states like undefined and null "u…
  </blockquote>
</aside>

          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/17</link>
        <pubDate>Sat, 24 Aug 2024 18:42:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-17</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="1" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>So that’s gotten me thinking: what <em>are</em> the basic concepts of Rebol as a programming paradigm, which distinguish it from all others?</p>
</blockquote>
</aside>
<p>I think an important point I hadn't articulated before is this:</p>
<aside class="quote quote-modified" data-post="1" data-topic="2211">
  <div class="title">
    <div class="quote-controls"></div>
    <img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/trust-the-users-judgment-when-you-can/2211">Trust the User's Judgment... *When You Can*</a> <a class="badge-wrapper  bullet" href="https://forum.rebol.info/c/usage/philosophy/31"><span class="badge-category-parent-bg" style="background-color: #3AB54A;"></span><span class="badge-category-bg" style="background-color: #3AB54A;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="How does Rebol differ from other computer languages and what makes code Rebolish and functional vs procedural coding.">Philosophy</span></a>
  </div>
  <blockquote>
    When writing about <a href="https://forum.rebol.info/t/set-word-to-initialize-locals-in-function-specs/2210">whether we should have SET-WORD! for initializing locals in function specs</a>, I talked about whether to enforce the right hand side of the : 

I realized this kind of dove to the heart of Rebol philosophy: 
If you need to evaluate an expression multiple times, it has to be in an array.  But if you're doing an evaluation just once, trust the user to formulate the expression and use an array if they deem it necessary. 
Most people encounter this first with the difference between I…
  </blockquote>
</aside>

          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/16</link>
        <pubDate>Sat, 24 Aug 2024 03:47:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-16</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/feb-2024-talk-functional-programming-sydney/2175">Feb 2024 Talk, Functional Programming Sydney</a></p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/15</link>
        <pubDate>Fri, 22 Mar 2024 15:07:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-15</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="https://forum.rebol.info/t/rackets-language-oriented-programming/2143/2">Racket's Language-Oriented Programming</a></p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/14</link>
        <pubDate>Thu, 01 Feb 2024 00:55:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-14</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="12" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>For reasons you may be gathering, I really want Ren-C to be under the radar until the hammering through of things is done. Too much is in flux. I don't want it to be on hackernews or anything like that. Raising the bar to participation is deliberate... though I'm glad you found it! <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
</blockquote>
</aside>
<p>There’s a trade-off, though… more users can also mean that there’s more people to interrogate the design, suggest new ideas, and help with the implementation. I’d suggest that Ren-C be slowly made more accessible as the design grows slowly more stable. It already seems a lot less in-flux than it was a few years ago.</p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/13</link>
        <pubDate>Wed, 31 Jan 2024 01:15:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-13</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="8" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>The thing about Rebol is that it’s a <em>different programming paradigm</em>… on a par with the <a href="https://madhadron.com/programming/seven_ur_languages.html">major language families</a> of ALGOL-like, Lisp-like, ML-like, etc.</p>
</blockquote>
</aside>
<p>Shortly after finding Rebol (circa 2008), I wrote <strong><a href="http://blog.hostilefork.com/computer-languages-as-artistic-medium/">"Computer Languages as Artistic Medium"</a></strong></p>
<p><em>"What does it mean for a language to be a truly new medium, as opposed to a variation on a theme? That's rather debatable. A language I have been looking at lately is called Rebol, and its advocates believe it to be a unique new medium. This is despite the fact that on first glance, it is an incredibly small box of crayons with a special color or two added, and lots of "ugly" colors taken out."</em></p>
<p><em>"Yet to them it's also not like any other language that already exists. So if it were a product being introduced at Toys R Us, it wouldn't be a LEGO set with square plug-knobs instead of round ones....nor would it be finger paint that was merely a little stickier or a little easier to clean up. Beyond it's new-ness, its champions say it also has the property of good-ness: a hopeful new way to build fun art."</em></p>
<p>I link to <strong><a href="http://rebol.com/what-rebol.html">"What is Rebol?"</a></strong> on <code>rebol.com</code>, and do note how the dependency control and smallness of the system is very much forefront.</p>
<aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Ooh, this is great! I’d suggest making this more prominent on the repository, because I had absolutely no idea it existed. (I’ve been using the command-line interface instead.)</p>
</blockquote>
</aside>
<p>For reasons you may be gathering, I really want Ren-C to be under the radar until the hammering through of things is done.  Too much is in flux.  I don't want it to be on hackernews or anything like that.  Raising the bar to participation is deliberate... though I'm glad you found it!  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/12</link>
        <pubDate>Wed, 31 Jan 2024 01:04:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-12</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="https://forum.rebol.info/t/on-building-ren-c-with-c-compilers/1343/2">"On Building Ren-C With C++ Compilers"</a></p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/4</link>
        <pubDate>Tue, 30 Jan 2024 19:25:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-4</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[gchiu]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Ooh, this is great! I’d suggest making this more prominent on the repository, because I had absolutely no idea it existed. (I’ve been using the command-line interface instead.)</p>
</blockquote>
</aside>
<p>I also pretty much only use the web console on my PC though my other stuff runs in GitHub actions etc.</p>
<p>True we don't have a GUI but you can link to JavaScript for some flashy stuff. I have a demo that brings up a JS chess game. But I wish it were easier and we didn't have to rely on Red/view for those things in the shell.</p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/11</link>
        <pubDate>Tue, 30 Jan 2024 19:14:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-11</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Dialecting is that reliance on the types and the ordering to cue you into the semantics.</p>
</blockquote>
</aside>
<p>Reflecting further on this statement, I think it’s true not just of dialects as such, but of the whole Rebol language more broadly. Rebol code is very free-form: a lot of the time, it’s simply a list of values without much further structure. Thus, it’s possible for dialected and regular code to ‘feel’ very similar with minimal effort — both can appear reasonably free-form, with only the interpretation rules changing. In both cases, you are reliant on the types and ordering to understand the semantics.</p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/10</link>
        <pubDate>Tue, 30 Jan 2024 12:30:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-10</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="7" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'll mention the discussion of "what makes Rebol different" and "how do you explain the value" has happened a fair bit...it's hard because it's weird, but people try.</p>
</blockquote>
</aside>
<p>It all feels depressingly familiar to me. The thing about Rebol is that it’s a <em>different programming paradigm</em>… on a par with the <a href="https://madhadron.com/programming/seven_ur_languages.html" rel="noopener nofollow ugc">major language families</a> of ALGOL-like, Lisp-like, ML-like, etc. And people are strongly resistant to learning new paradigms, because it requires them to learn a new way of thinking and problem-solving.</p>
<p>I see this problem in Haskell all the time. Newcomers often have a very hard time dealing with the nature of the language: ‘What do you mean, I can’t do IO everywhere? Monads are complicated and stupid! This language is weird!’ If they persist, it eventually ‘clicks’ in their brain… but many people give up before that point, and just go back to using Python or Java or whatever.</p>
<p>(It works the other way round, too. I’ve seen a few people who learnt Haskell as their first programming language, and they find Python and Java horribly difficult and counterintuitive to use.)</p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/8</link>
        <pubDate>Tue, 30 Jan 2024 02:30:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-8</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'll mention the discussion of "what makes Rebol different" and "how do you explain the value" has happened a fair bit...it's hard because it's weird, but people try.  Here's an old post I've cited from DocKimbel:</p>
<p><a href="https://forum.rebol.info/t/rebols-target-market-newbies-experts-or-other/581/3" class="inline-onebox">Rebol's Target Market: Newbies, Experts, or Other? - #3 by hostilefork</a></p>
<p>Of course the devil's in the details of these examples with things like binding.  But you might find interesting thoughts in those threads if you dig around.</p>
<p>I'm the wet blanket who says nothing is that notable about it if it doesn't <em>work</em>, so I couldn't really demo what I find fundamental about it in Red/Rebol2/R3-Alpha, because they're just missing too much.</p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/7</link>
        <pubDate>Tue, 30 Jan 2024 02:21:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-7</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Dialecting is that reliance on the types and the ordering to cue you into the semantics.</p>
</blockquote>
</aside>
<p>I really love this definition, thanks! (Hope you don’t mind if I steal it for my talk…)</p>
<aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>By having early exercises iterate on a problem, where the solution the user is guided toward as the exercises go on is the development of a dialect to solve that problem.</p>
</blockquote>
</aside>
<p>I’d love this. It reminds me a lot of how Lisp tutorials introduce macros — not as special magical predefined things, but as a useful tool for solving problems, which you can and should be writing yourself.</p>
<p>That being said, as you note, writing non-trivial dialects is much harder than writing macros. For (at least unhygienic) macros, it’s simply a matter of transforming one data structure into another. But for dialects, you <em>also</em> need to take care of evaluation, which makes it more difficult.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Guess it's good for you to get experience with it, so long as when you hit something nonsensical you know where to ask about "is there a better answer for that?"</p>
</blockquote>
</aside>
<p>Oh, I <em>know</em> that Red has missed out on a lot of good approaches which are present in Ren-C. (Something which, unaccountably, their documentation fails to mention…) It’s purely a matter of which implementation looks nicest in a quick demo. Personally, I think the most compelling of the ‘standard’ dialects is VID, so in a demo to non-Rebolers I’d like to use an implementation which supports that. By contrast, Ren-C’s changes are great, but their need isn’t so immediately obvious in a demo.</p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/6</link>
        <pubDate>Tue, 30 Jan 2024 02:21:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-6</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>More related to data transfer than programming, but then data transfer is a pretty core part of Rebol in any case.</p>
<p>I don’t see the relation of that with dialecting, though</p>
</blockquote>
</aside>
<p>It's a spectrum.  From his example on the blog, I would say this is "not dialected":</p>
<pre><code>customer: [
    name:  "Bob Smith"
    email: bob@example.com
    site:  http://www.example.com/bob
    age:   27
    phone: #555-1212
    city: "Ukiah"
]
</code></pre>
<p>And then I would say this transformation he gave I would call "dialected":</p>
<pre><code>[
    "Bob Smith"
    bob@example.com 
    http://www.example.com
    "Ukiah"
    [age 27 phone #555-1212]
]
</code></pre>
<p>Dialecting is that reliance on the types and the ordering to cue you into the semantics.  Whether you use that to represent code, data, or a mixture isn't so important.  It doesn't suddenly go from not being a dialect to being a dialect if I throw a GROUP! in and say that runs code at some point.</p>
<pre><code>[
    "Bob Smith"
    bob@example.com 
    http://www.example.com
    "Ukiah"
    [age 27 phone #555-1212]
    (
         all [
             date.day = 21
             date.month = 4
          ][
              send-email "Happy Birthday $(name)"    
          ] 
    )  ; if this code is run daily...is it a dialect now?
]
</code></pre>
<aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Also, how <em>does</em> one treat dialecting as a first principle?</p>
</blockquote>
</aside>
<p>By having early exercises iterate on a problem, where the solution the user is guided toward as the exercises go on is the development of a dialect to solve that problem.</p>
<p>Giving people the Rebol language and VID + PARSE as the two showcase dialects--it just feels like using a language, because they're just handed down to you and there's no code for them.</p>
<p>But writing non-trivial dialects that build on the existing parts is hard.  My attempt to do something relatively "simple"--e.g. <a href="https://github.com/hostilefork/rebol-whitespacers">tailor the language for writing Whitespace Interpreters</a>--brings up all kinds of challenges.  As we push on binding, we're pushing on some of the biggest pain points.</p>
<p>I'd like to see tutorials that walk people through something like that, instead of "here's how to use a thing that builds forms".</p>
<aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>I see no contradiction in writing a bloated Rebol implementation, even if that would be a stupid thing to do.</p>
</blockquote>
</aside>
<p>It constrains the space of acceptable ways to solve problems in the language.  So there are features and behaviors you won't see in the language if they can't fit into a certain <em>je ne sais quoi</em> of how it can track in an implementation.</p>
<p>You can write a bloated implementation of the language spec that comes out as the product of that thinking.  But the bloated implementation couldn't have driven the mentality that produced that spec, and features that depend on the bloat would be disowned as "non-Rebol-y".</p>
<p>It's very much a <a href="https://en.wikipedia.org/wiki/Zen_and_the_Art_of_Motorcycle_Maintenance">Zen and The Art of Motorcycle Maintenance</a> thing.  <img src="https://forum.rebol.info/images/emoji/twitter/motorcycle.png?v=12" title=":motorcycle:" class="emoji" alt=":motorcycle:" loading="lazy" width="20" height="20"></p>
<aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Though, that being said, if I do a live demo I’ll probably end up using Red — not because it’s great as a language (it isn’t), but because it has a nice GUI with View dialect support, and it’s closer to baseline Rebol than Ren-C is.</p>
</blockquote>
</aside>
<p>Guess it's good for you to get experience with it, so long as when you hit something nonsensical you know where to ask about "is there a better answer for that?"  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/5</link>
        <pubDate>Tue, 30 Jan 2024 02:08:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-5</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I used <a href="http://hostilefork.com/media/shared/replpad-js/" rel="noopener nofollow ugc">the web console </a>, which you can Ctrl+ and zoom up big to type in demo code, and it has undo/redo/Shift-Enter to edit multiline code.</p>
</blockquote>
</aside>
<p>Ooh, this is great! I’d suggest making this more prominent on the repository, because I had absolutely no idea it existed. (I’ve been using the command-line interface instead.)</p>
<p>Though, that being said, if I do a live demo I’ll probably end up using Red — not because it’s great as a language (it isn’t), but because it has a nice GUI with View dialect support, and it’s closer to baseline Rebol than Ren-C is.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One of its most successful concepts--the one that inspired JSON--is the <strong>"it's okay to imply semantics"</strong> anti-XML worldview:</p>
<ul>
<li><a href="http://www.rebol.com/article/0108.html" rel="noopener nofollow ugc">Was XML Flawed from the Start?</a></li>
</ul>
<p>Writing interpreted Dialects is truly at the heart of the value proposition. But it hasn't historically been "taught" as a first principle (instead focusing misguidedly on 'things you can do in one line of code' out of the box).</p>
</blockquote>
</aside>
<p>That’s a good one! More related to data transfer than programming, but then data transfer is a pretty core part of Rebol in any case.</p>
<p>I don’t see the relation of that with dialecting, though… unless I’ve accidentally grouped together two separate paragraphs?</p>
<p>Also, how <em>does</em> one treat dialecting as a first principle? As someone who hasn’t actually used Rebol very much, I’m not sure I see how that’s possible.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I think a good demo would be to contrast it with how other languages do parser combinators... the leverage of parts with tags like <code>&lt;here&gt;</code> and <code>&lt;end&gt;</code>, with GROUP!s for code, and string literals or quoted values to match. No one's really put together that comparative study yet... because parser combinators weren't really well-known around the time of Rebol's release</p>
</blockquote>
</aside>
<p>As someone who loves parser combinators, I feel that UPARSE is actually really similar. I’ve suggested before that dialects are Rebol’s answer to monads, and it does feel like a similar style to what I’d do in Haskell.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>The <a href="http://2019.reb4.me/talks" rel="noopener nofollow ugc">"Amish Programming" angle</a>... that the deep dependency footprint be small (including compiler, libraries, make tools)... is core to the mission, and can't really be fully separated from the language concepts.</p>
</blockquote>
</aside>
<p>Another good one, thanks! Though I’m not sure I agree with ‘can’t be fully separated from the language’… I see no contradiction in writing a bloated Rebol implementation, even if that would be a stupid thing to do.</p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/3</link>
        <pubDate>Mon, 29 Jan 2024 23:47:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-3</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="1" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Perhaps foolishly, I offered to give a talk at my local Functional Programming meetup next month. Given my recent interests, I’m thinking of giving an intro to Rebol and its basic concepts.</p>
</blockquote>
</aside>
<p>Cool!  I gave a talk to a small group at <a href="https://www.meetup.com/philly-lambda/events/262414777/">a functional programming group in Philadelphia</a> in 2019.  I'm afraid I don't have any useful slides, as it was mostly an off-the-cuff demo.</p>
<p>I did have a slide that quoted <a href="https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule">Greenspun's Tenth Rule</a>  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>I used <a href="http://hostilefork.com/media/shared/replpad-js/">the web console</a>, which you can Ctrl+ and zoom up big to type in demo code, and it has undo/redo/Shift-Enter to edit multiline code.</p>
<p>The new binding should be mainline in time for your talk!</p>
<aside class="quote no-group" data-username="bradrn" data-post="1" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>So that’s gotten me thinking: what <em>are</em> the basic concepts of Rebol as a programming paradigm, which distinguish it from all others?</p>
</blockquote>
</aside>
<p>One of its most successful concepts--the one that inspired JSON--is the <strong>"it's okay to imply semantics"</strong> anti-XML worldview:</p>
<ul>
<li><a href="http://www.rebol.com/article/0108.html" class="inline-onebox">Was XML Flawed from the Start?</a></li>
</ul>
<p>Writing interpreted Dialects is truly at the heart of the value proposition.  But it hasn't historically been "taught" as a first principle (instead focusing misguidedly on 'things you can do in one line of code' out of the box).</p>
<p>One of my first Rebol experiments was the implementation of <strong><a href="http://uscii.hostilefork.com/encode/">USCII</a></strong>.  When I revisited the project many years later, it was an example of "seeing the light":</p>
<ul>
<li><a href="https://forum.rebol.info/t/uscii-seen-with-new-eyes/1713" class="inline-onebox">USCII Seen With New Eyes</a></li>
</ul>
<p>UPARSE is the most evolved dialect in existence, and breaking new ground by proving it can do what it does as usermode code.  I think a good demo would be to contrast it with how other languages do parser combinators... the leverage of parts with tags like <code>&lt;here&gt;</code> and <code>&lt;end&gt;</code>, with GROUP!s for code, and string literals or quoted values to match.  No one's really put together that comparative study yet... because parser combinators weren't really well-known around the time of Rebol's release <em>(and most Rebol people won't use Haskell or similar, so they <a href="https://www.red-lang.org/2013/11/041-introducing-parse.html">act like RegExp is the only competition</a>)</em></p>
<aside class="quote no-group" data-username="bradrn" data-post="1" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Does this all seem reasonable? Have I missed anything?</p>
</blockquote>
</aside>
<p>The <a href="http://2019.reb4.me/talks">"Amish Programming" angle</a>... that the deep dependency footprint be small (including compiler, libraries, make tools)... is core to the mission, and can't really be fully separated from the language concepts.</p>
<ul>
<li><a href="http://www.rebol.com/article/0497.html" class="inline-onebox">Fight Software Complexity Pollution</a></li>
</ul>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/2</link>
        <pubDate>Mon, 29 Jan 2024 17:35:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-2</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
      <item>
        <title>Fundamental distinguishing features of Rebol</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>Perhaps foolishly, I offered to give a talk at my local Functional Programming meetup next month. Given my recent interests, I’m thinking of giving an intro to Rebol and its basic concepts.</p>
<p>So that’s gotten me thinking: what <em>are</em> the basic concepts of Rebol as a programming paradigm, which distinguish it from all others? Here’s what I’ve come up with so far:</p>
<ul>
<li>
<p><strong>Everything is a datatype</strong>: Rebol was built for networking. This means you should be able to take any value, serialise it in a human-readable way, and parse it back into a value. This means a lot of built-in datatypes for useful concepts.</p>
</li>
<li>
<p><strong>Data is code</strong>: Everything starts out its life as data. If you want, you can evaluate it in some way to get a result. Naturally, you can evaluate it using any rules you want, which gives you <strong>dialecting</strong> as a corollary.</p>
<p>(It’s worth noting that this is the converse of Lisp’s famous maxim, ‘code is data’.)</p>
</li>
<li>
<p><strong>Binding</strong>: Word values are associated with their storage. This can be arbitrarily manipulated by the programmer, leading to <strong>definitional scoping</strong>.</p>
</li>
<li>
<p>More generally, I might summarise all the above points as natural consequences of <strong>computing with evaluation</strong>: the fundamental operation of Rebol is taking values and extracting some kind of result from them. This necessitates the other points above: a rich set of datatypes to store both the original value and the result, the ability to treat those datatypes as code which can be evaluated, and a way to look up references during the evaluation process.</p>
</li>
</ul>
<p>Does this all seem reasonable? Have I missed anything?</p>
          <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/1</link>
        <pubDate>Mon, 29 Jan 2024 12:55:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2136-1</guid>
        <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
      </item>
  </channel>
</rss>
