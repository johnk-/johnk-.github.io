<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Taking BLANK!-headed CHAIN!s Out-Of-Band</title>
    <link>https://forum.rebol.info/t/taking-blank-headed-chain-s-out-of-band/1043</link>
    <description>&gt; ***NOTE:** This post was originally about using old slash-oriented &quot;refinements&quot; like **/foo** and giving them meaning in formatting dialects.  Things have changed, and now those run functions... while it&#39;s **`:foo`** that&#39;s inert and used for refinements.  The same ideas apply, however.*

---

DELIMIT is the engine behind a family of functions (UNSPACED, SPACED, FAIL, PRINT, anything that uses that null/blank collapsing logic, forms things cleanly, understands not to put spaces at the ends of newlines, etc).  It&#39;s stuff you don&#39;t want to redo if you can avoid it.

One thing about using it as the basis of these functions is that it doesn&#39;t leave a whole lot of room for dialecting.  Let&#39;s say you have an idea for using TAG! to specify printing a number in hexadecimal:

    &gt;&gt; x: 15
    &gt;&gt; print [&lt;hex&gt; x]
    0F

Trying to take TAG! for this purpose not going to please people who were building a string with **`unspaced [&lt;div&gt; stuff &lt;/div&gt;]`**  And if you get the idea that FAIL is going to extract errors via URL!:

    fail [http://rebol.org/e/invalid-arg some-arg]

Then you&#39;re going to bother someone who wanted to just have a textual error message and point you to a URL in a string-like way that prints as part of a message...not an ID:

    fail [&quot;Must be a unit type&quot; https://en.wikipedia.org/wiki/Unit_type]

If it evaluates everything, and *everything* is game to be PRINT-ed, anything using this as a basis isn&#39;t going to have much of an opportunity to dialect.

But BLANK!-headed chains will be free...

##  You can now put &lt;strike&gt;anything&lt;/strike&gt; many things in these chains...

    &gt;&gt; text: &quot;Some really long string&quot;

    &gt;&gt; print [&quot;Integer could be a limit:&quot; :10 text]
    Integer could be a limit: Some reall

    &gt;&gt; print [&quot;Chain length &gt; 1:&quot; :10:&quot;...&quot; text]
    Path length &gt; 1: Some re...

    &gt;&gt; n: 5
    &gt;&gt; print [&quot;GROUP!s legal too:&quot; :(n + 5) text]
    GROUP!s legal too: Some re...

You could use pairs to give a min-size and max-size, 10x20.  *(PAIR! actually has the guts to do (n)x20 now and similar things, by the way, it just hasn&#39;t done it yet.)*</description>
    
    <lastBuildDate>Wed, 11 Sep 2024 12:25:44 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/taking-blank-headed-chain-s-out-of-band/1043.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Taking BLANK!-headed CHAIN!s Out-Of-Band</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><em><strong>NOTE:</strong> This post was originally about using old slash-oriented "refinements" like <strong>/foo</strong> and giving them meaning in formatting dialects.  Things have changed, and now those run functions... while it's <strong><code>:foo</code></strong> that's inert and used for refinements.  The same ideas apply, however.</em></p>
</blockquote>
<hr>
<p>DELIMIT is the engine behind a family of functions (UNSPACED, SPACED, FAIL, PRINT, anything that uses that null/blank collapsing logic, forms things cleanly, understands not to put spaces at the ends of newlines, etc).  It's stuff you don't want to redo if you can avoid it.</p>
<p>One thing about using it as the basis of these functions is that it doesn't leave a whole lot of room for dialecting.  Let's say you have an idea for using TAG! to specify printing a number in hexadecimal:</p>
<pre><code>&gt;&gt; x: 15
&gt;&gt; print [&lt;hex&gt; x]
0F
</code></pre>
<p>Trying to take TAG! for this purpose not going to please people who were building a string with <strong><code>unspaced [&lt;div&gt; stuff &lt;/div&gt;]</code></strong>  And if you get the idea that FAIL is going to extract errors via URL!:</p>
<pre><code>fail [http://rebol.org/e/invalid-arg some-arg]
</code></pre>
<p>Then you're going to bother someone who wanted to just have a textual error message and point you to a URL in a string-like way that prints as part of a message...not an ID:</p>
<pre><code>fail ["Must be a unit type" https://en.wikipedia.org/wiki/Unit_type]
</code></pre>
<p>If it evaluates everything, and <em>everything</em> is game to be PRINT-ed, anything using this as a basis isn't going to have much of an opportunity to dialect.</p>
<p>But BLANK!-headed chains will be free...</p>
<h2><a name="p-3037-you-can-now-put-strikeanythingstrike-many-things-in-these-chains-1" class="anchor" href="https://forum.rebol.info#p-3037-you-can-now-put-strikeanythingstrike-many-things-in-these-chains-1"></a>You can now put <strike>anything</strike> many things in these chains...</h2>
<pre><code>&gt;&gt; text: "Some really long string"

&gt;&gt; print ["Integer could be a limit:" :10 text]
Integer could be a limit: Some reall

&gt;&gt; print ["Chain length &gt; 1:" :10:"..." text]
Path length &gt; 1: Some re...

&gt;&gt; n: 5
&gt;&gt; print ["GROUP!s legal too:" :(n + 5) text]
GROUP!s legal too: Some re...
</code></pre>
<p>You could use pairs to give a min-size and max-size, 10x20.  <em>(PAIR! actually has the guts to do (n)x20 now and similar things, by the way, it just hasn't done it yet.)</em></p>
          <p><a href="https://forum.rebol.info/t/taking-blank-headed-chain-s-out-of-band/1043/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/taking-blank-headed-chain-s-out-of-band/1043/1</link>
        <pubDate>Wed, 30 Jan 2019 10:56:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1043-1</guid>
        <source url="https://forum.rebol.info/t/taking-blank-headed-chain-s-out-of-band/1043.rss">Taking BLANK!-headed CHAIN!s Out-Of-Band</source>
      </item>
  </channel>
</rss>
