<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The ^META of NULL and VOID</title>
    <link>https://forum.rebol.info/t/the-meta-of-null-and-void/1941</link>
    <description>[quote=&quot;hostilefork, post:1, topic:1915&quot;]
That doesn&#39;t resolve saying what the ^META of an actual void state is. Of course it could just be some weird non-sequitur thing, like **`@void`** (that&#39;s what it currently is, not to be confused with the new `~@void~` which would be the meta of an inert word isotope)

One possibility that crossed my mind is that it could actually be an isotopic state, e.g. producing actual unset variables:

    &gt;&gt; ^(comment &quot;hi&quot;)
    == ~  ; isotope

This runs counter to the idea that ^META values are always non-ornery--to make them easy to pipe around.
[/quote]

I tried this out, and... *it was a terrible idea*.  I knew that would be bad, but it was worse than I thought.  It wrecks the whole thing.

# But there&#39;s a much better option!

I&#39;ve been creeping toward convergence of the &quot;quoting ladder&quot; and the &quot;meta ladder&quot;.

**I now believe we should go whole hog with it, and say that the ^META of a NULL is the same answer as QUOTE NULL:**

    &gt;&gt; ^(null)
    == &#39;

    &gt;&gt; meta null
    == &#39;

    &gt;&gt; &#39;
    ; null

**But even further, I believe the ^META of VOID should be a Quasi-NULL**

    &gt;&gt; quasi null
    == ~

    &gt;&gt; meta void
    == ~

    &gt;&gt; ~
    ; void

    &gt;&gt; unquasi &#39;~
    ; null

**When you look at this in the overall pattern it means...**

 # ...VOID is the isotope form of NULL!!!

It&#39;s like everything inching up the reification scale by one notch.  **And it&#39;s much better.**  The way things cohere is instantly apparent.

:person_climbing:

## Why Was ^META of NULL Defined As NULL To Begin With?

I thought that since NULL was being used as the signal of &quot;soft failure&quot; and ELSE was reacting to it, that it would be nice if you could react to it even if a value had been ^META&#39;d.

UPARSE made use of this, e.g.

    ([^synthesized remainder]: parser input) then [
        ; do stuff with synthesized&#39; and remainder on parser success
    ] else [
        ; do stuff on failure, usually propagating the failure
        return null
    ]

The majority of the time, this pattern could have been done differently, simply by letting the ELSE branch run in the same operation as the parser, before the result is ^META&#39;d:

    [^synthesized remainder]: parser input else [
        ; do stuff on failure, usually propagating the failure
        return null
    ]

    ; do stuff with synthesized&#39; and remainder on parser success

*But excitingly, this is changing so that NULL isn&#39;t the cue at all.*  Instead, definitional errors are being used...which can convey more information about why the parser failed and help diagnose the moments and contexts of failure!

    [^synthesized remainder]: parser input except e -&gt; [
        ; do stuff on failure, usually propagating the failure
        return raise e
    ]

    ; do stuff with synthesized&#39; and remainder on parser success

With the synthesized NULL state recaptured, there&#39;s suddenly high value in having the null states quoted.  They&#39;re properly in the same family as all the other results.

*This may seem like esoteric stuff but I can assure you it&#39;s incredibly foundational, and getting it right has extremely pleasing consequences!*

## There&#39;s Still The Quandary of FOR-BOTH

I&#39;ve cited it a million times by now, but this means the resolution is that it will have to use some other operation besides meta and unmeta, which pass through void and null (if it&#39;s going to try the ALL trick):

    for-both: lambda [&#39;var blk1 blk2 body] [
        unmeta* all [
            meta* for-each (var) blk1 body
            meta* for-each (var) blk2 body
        ]
    ]

Plain META of VOID would make ~, which is truthy and would corrupt any prior result.

Plain META of NULL would make a quoted null, which is truthy, and wouldn&#39;t break the ALL as desired.

At this point what it comes down to is we have a naming problem for whatever the versions that pass through void and null should be called.  :thinking:   I&#39;ll keep pondering it.</description>
    
    <lastBuildDate>Thu, 25 Aug 2022 08:39:36 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/the-meta-of-null-and-void/1941.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The ^META of NULL and VOID</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1915">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/q-should-be-the-unevaluated-form-of-void/1915/1">Q: Should ~ Be The Unevaluated Form of VOID ?</a>
</div>
<blockquote>
<p>That doesn't resolve saying what the ^META of an actual void state is. Of course it could just be some weird non-sequitur thing, like <strong><code>@void</code></strong> (that's what it currently is, not to be confused with the new <code>~@void~</code> which would be the meta of an inert word isotope)</p>
<p>One possibility that crossed my mind is that it could actually be an isotopic state, e.g. producing actual unset variables:</p>
<pre><code>&gt;&gt; ^(comment "hi")
== ~  ; isotope
</code></pre>
<p>This runs counter to the idea that ^META values are always non-ornery--to make them easy to pipe around.</p>
</blockquote>
</aside>
<p>I tried this out, and... <em>it was a terrible idea</em>.  I knew that would be bad, but it was worse than I thought.  It wrecks the whole thing.</p>
<h1>But there's a much better option!</h1>
<p>I've been creeping toward convergence of the "quoting ladder" and the "meta ladder".</p>
<p><strong>I now believe we should go whole hog with it, and say that the ^META of a NULL is the same answer as QUOTE NULL:</strong></p>
<pre><code>&gt;&gt; ^(null)
== '

&gt;&gt; meta null
== '

&gt;&gt; '
; null
</code></pre>
<p><strong>But even further, I believe the ^META of VOID should be a Quasi-NULL</strong></p>
<pre><code>&gt;&gt; quasi null
== ~

&gt;&gt; meta void
== ~

&gt;&gt; ~
; void

&gt;&gt; unquasi '~
; null
</code></pre>
<p><strong>When you look at this in the overall pattern it means...</strong></p>
<h1>...VOID is the isotope form of NULL!!!</h1>
<p>It's like everything inching up the reification scale by one notch.  <strong>And it's much better.</strong>  The way things cohere is instantly apparent.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/person_climbing.png?v=9" title=":person_climbing:" class="emoji only-emoji" alt=":person_climbing:"></p>
<h2>Why Was ^META of NULL Defined As NULL To Begin With?</h2>
<p>I thought that since NULL was being used as the signal of "soft failure" and ELSE was reacting to it, that it would be nice if you could react to it even if a value had been ^META'd.</p>
<p>UPARSE made use of this, e.g.</p>
<pre><code>([^synthesized remainder]: parser input) then [
    ; do stuff with synthesized' and remainder on parser success
] else [
    ; do stuff on failure, usually propagating the failure
    return null
]
</code></pre>
<p>The majority of the time, this pattern could have been done differently, simply by letting the ELSE branch run in the same operation as the parser, before the result is ^META'd:</p>
<pre><code>[^synthesized remainder]: parser input else [
    ; do stuff on failure, usually propagating the failure
    return null
]

; do stuff with synthesized' and remainder on parser success
</code></pre>
<p><em>But excitingly, this is changing so that NULL isn't the cue at all.</em>  Instead, definitional errors are being used...which can convey more information about why the parser failed and help diagnose the moments and contexts of failure!</p>
<pre><code>[^synthesized remainder]: parser input except e -&gt; [
    ; do stuff on failure, usually propagating the failure
    return raise e
]

; do stuff with synthesized' and remainder on parser success
</code></pre>
<p>With the synthesized NULL state recaptured, there's suddenly high value in having the null states quoted.  They're properly in the same family as all the other results.</p>
<p><em>This may seem like esoteric stuff but I can assure you it's incredibly foundational, and getting it right has extremely pleasing consequences!</em></p>
<h2>There's Still The Quandary of FOR-BOTH</h2>
<p>I've cited it a million times by now, but this means the resolution is that it will have to use some other operation besides meta and unmeta, which pass through void and null (if it's going to try the ALL trick):</p>
<pre><code>for-both: lambda ['var blk1 blk2 body] [
    unmeta* all [
        meta* for-each (var) blk1 body
        meta* for-each (var) blk2 body
    ]
]
</code></pre>
<p>Plain META of VOID would make ~, which is truthy and would corrupt any prior result.</p>
<p>Plain META of NULL would make a quoted null, which is truthy, and wouldn't break the ALL as desired.</p>
<p>At this point what it comes down to is we have a naming problem for whatever the versions that pass through void and null should be called.  <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=9" title=":thinking:" class="emoji" alt=":thinking:">   I'll keep pondering it.</p>
          <p><a href="https://forum.rebol.info/t/the-meta-of-null-and-void/1941/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-meta-of-null-and-void/1941/1</link>
        <pubDate>Thu, 18 Aug 2022 15:23:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1941-1</guid>
        <source url="https://forum.rebol.info/t/the-meta-of-null-and-void/1941.rss">The ^META of NULL and VOID</source>
      </item>
  </channel>
</rss>
