<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rebmu&#39;s FUNQTION (FQ): Dialecting Function Definition Itself</title>
    <link>https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796</link>
    <description>&gt; After writing this I realized I had [already written a post about this in 2020](https://forum.rebol.info/t/function-mu-rebmus-function-generator-dialect/1379), but... here it is again, I guess!  Maybe I said it better or worse this time?

*(Note: FQ is pronounced EFF-QUEUE, say it carefully. :slight_smile:)*

So in Rebmu, **FN** is a superset of **FUNC** (itself a synonym for **FUNCTION**).

It doesn&#39;t do anything *terribly* tricky because its arguments are both evaluative.  So you can pass it specs and bodies that are variables.  Here&#39;s a useless example of taking advantage of that with a spec in a variable:

    ; define a spec which takes two arguments
    S[xY]   ; =&gt; s: [x y]

    ; define function A that adds X and Y.
    AfnS[adXy]  ; =&gt; a: fn s [ad x y]
                ; =&gt; a: function s [add x y]

    ; define function M that multiplies X and Y
    MfnS[mpXy]  ; =&gt; m: fn s [mp x y]
                ; =&gt; m: function s [multiply x y]

*...but what might a Code-Golf-Dialected FUNQTION (FQ) Do, unbound by rote evaluation of its parameters?*  Let&#39;s use our imagination...

## A Quoted Spec could permit Spec Compression

How about if you gave a WORD! that was a letter and a number, you&#39;d get 3 args starting with that letter?

    fqR3[adMPrSt]
    ; =&gt; fq r3 [ad mp r s t]
    ; =&gt; fn [r s t] [ad mp r s t]
    ; =&gt; function [r s t] [add multiply r s t]
    ; =&gt; function [r s t] [add (multiply r s) t]

That&#39;s a three character savings vs. having to express the block for **[r s t]** explicitly with a plain function:

    fn[rSt][adMPrSt]

If you didn&#39;t include a number that might be a different memoization of what the arguments were, such as:

    fqA[...] =&gt; fn [a] [...]
    fqB[...] =&gt; fn [a b] [...]
    fqC[...] =&gt; fn [a b c] [...]

    fqX[...] =&gt; fn [z y x] [...]
    fqY[...] =&gt; fn [z y] [...]
    fqZ[...] =&gt; fn [z] [...]

The idea being that you need to sort of spread out your variable names in code golf, for instance when working with nested functions.  From a tactical standpoint one might be served to throw in curveballs:

    fqM[...] =&gt; fn [m j z] [...]

Though that lessens the readability/learnability.  Anyway, what else...?

## Variadically Quoted Bodies Could Circumvent Brackets

Let&#39;s say if it found a word in the slot where the body block would ordinarily be, it would treat that as a function that should be called.

To make it easier, let&#39;s just think about this un-Rebmu&#39;d:

    foo: func [x y z] [any [x y z]]

    bar: funq [x y z] any [x y z]

If FUNQ is variadic and quoting its body slot, it could notice the body does not contain a block but a WORD!.  Seeing that function is ANY, it could count the number of parameters ANY needs and pick them up from the callsite.

*Such mechanics are within reach using today&#39;s FRAME!s*, in fact [they are used by things like POINTFREE](https://forum.rebol.info/t/looking-into-a-usermode-pointfree/1236)...itself clearly useful in Rebmu.

## What Else Might FQ do?

There&#39;s also things like GROUP!s, and **fq(x)...** could imply a completely different thing from **fq[x]...**, suggesting a mode switch in how the ensuing information is interpreted.

Or **fqX(...)** and **fqX[...]** could be completely different.  What about strings?  How might string interpolation fit into all of this?

    ZfqC{Implicit printing of $a and $b and $c?}
    ; =&gt; z: fn [a b c] [print interpolate {Implicit print of $a and $b and $c}]

Maybe the implicit printing is different, like FP, and FQ with a string simply interpolates it.

**Hopefully you get the drift.**  I&#39;m talking about making Rebmu a powerhouse showcase of what Ren-C is driving at.

How can quoting, variadics, frames, interpolation, and all of that be applied to dialecting the act of function definition itself?

# `[insert your ideas here]`</description>
    
    <lastBuildDate>Mon, 07 Mar 2022 07:25:36 +0000</lastBuildDate>
    <category>Rebmu</category>
    <atom:link href="https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rebmu&#39;s FUNQTION (FQ): Dialecting Function Definition Itself</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1796">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It doesn't do anything <em>terribly</em> tricky because its arguments are both evaluative.</p>
</blockquote>
</aside>
<p>I say <em>not terribly</em> tricky, but it's a <em>little</em> tricky.</p>
<p>It defines R and RT as local synonyms for the function's definitional return.  Remember you can't globally say something like:</p>
<pre><code>r: rt: :return
</code></pre>
<p>Because each function defines its own local RETURN function.  So you have to basically augment the body during construction to get it bound to local definitions of RT and R:</p>
<pre><code>fn: adapt :function [
    body: compose [
        let rt: :return
        let r: :rt 
        (as group! body)
    ]
]
</code></pre>
<p>Another twist I think would be smart would be that while normal parameters don't accept isotopes in plain functions...it could turn all normal parameters to be ^META and then un-meta them implicitly.  Though that would affect the function's interface in ways that could lead to undesirable behaviors, so it might be better to put that in FQ (or something else, FX?)</p>
<p>There could also be some decisions that once an argument has been evaluated, it could treat invalid types differently:</p>
<pre><code>X 1  ; =&gt; x: 1
Y 2  ; =&gt; y: 2
fnADxY[...] ; =&gt; fn ad x y [...]
            ; =&gt; function add x y [...]
            ; =&gt; function 3 [...]   ; could mean something vs. error?
</code></pre>
<p>But again: I don't know how far one wants to bend the "standard" definitions in the space where things are errors today.  Worth being cautious about it.</p>
          <p><a href="https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796/2</link>
        <pubDate>Mon, 07 Mar 2022 07:25:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1796-2</guid>
        <source url="https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796.rss">Rebmu&#39;s FUNQTION (FQ): Dialecting Function Definition Itself</source>
      </item>
      <item>
        <title>Rebmu&#39;s FUNQTION (FQ): Dialecting Function Definition Itself</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>After writing this I realized I had <a href="https://forum.rebol.info/t/function-mu-rebmus-function-generator-dialect/1379">already written a post about this in 2020</a>, but... here it is again, I guess!  Maybe I said it better or worse this time?</p>
</blockquote>
<p><em>(Note: FQ is pronounced EFF-QUEUE, say it carefully. <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20">)</em></p>
<p>So in Rebmu, <strong>FN</strong> is a superset of <strong>FUNC</strong> (itself a synonym for <strong>FUNCTION</strong>).</p>
<p>It doesn't do anything <em>terribly</em> tricky because its arguments are both evaluative.  So you can pass it specs and bodies that are variables.  Here's a useless example of taking advantage of that with a spec in a variable:</p>
<pre><code>; define a spec which takes two arguments
S[xY]   ; =&gt; s: [x y]

; define function A that adds X and Y.
AfnS[adXy]  ; =&gt; a: fn s [ad x y]
            ; =&gt; a: function s [add x y]

; define function M that multiplies X and Y
MfnS[mpXy]  ; =&gt; m: fn s [mp x y]
            ; =&gt; m: function s [multiply x y]
</code></pre>
<p><em>...but what might a Code-Golf-Dialected FUNQTION (FQ) Do, unbound by rote evaluation of its parameters?</em>  Let's use our imagination...</p>
<h2><a name="p-5788-a-quoted-spec-could-permit-spec-compression-1" class="anchor" href="https://forum.rebol.info#p-5788-a-quoted-spec-could-permit-spec-compression-1"></a>A Quoted Spec could permit Spec Compression</h2>
<p>How about if you gave a WORD! that was a letter and a number, you'd get 3 args starting with that letter?</p>
<pre><code>fqR3[adMPrSt]
; =&gt; fq r3 [ad mp r s t]
; =&gt; fn [r s t] [ad mp r s t]
; =&gt; function [r s t] [add multiply r s t]
; =&gt; function [r s t] [add (multiply r s) t]
</code></pre>
<p>That's a three character savings vs. having to express the block for <strong>[r s t]</strong> explicitly with a plain function:</p>
<pre><code>fn[rSt][adMPrSt]
</code></pre>
<p>If you didn't include a number that might be a different memoization of what the arguments were, such as:</p>
<pre><code>fqA[...] =&gt; fn [a] [...]
fqB[...] =&gt; fn [a b] [...]
fqC[...] =&gt; fn [a b c] [...]

fqX[...] =&gt; fn [z y x] [...]
fqY[...] =&gt; fn [z y] [...]
fqZ[...] =&gt; fn [z] [...]
</code></pre>
<p>The idea being that you need to sort of spread out your variable names in code golf, for instance when working with nested functions.  From a tactical standpoint one might be served to throw in curveballs:</p>
<pre><code>fqM[...] =&gt; fn [m j z] [...]
</code></pre>
<p>Though that lessens the readability/learnability.  Anyway, what else...?</p>
<h2><a name="p-5788-variadically-quoted-bodies-could-circumvent-brackets-2" class="anchor" href="https://forum.rebol.info#p-5788-variadically-quoted-bodies-could-circumvent-brackets-2"></a>Variadically Quoted Bodies Could Circumvent Brackets</h2>
<p>Let's say if it found a word in the slot where the body block would ordinarily be, it would treat that as a function that should be called.</p>
<p>To make it easier, let's just think about this un-Rebmu'd:</p>
<pre><code>foo: func [x y z] [any [x y z]]

bar: funq [x y z] any [x y z]
</code></pre>
<p>If FUNQ is variadic and quoting its body slot, it could notice the body does not contain a block but a WORD!.  Seeing that function is ANY, it could count the number of parameters ANY needs and pick them up from the callsite.</p>
<p><em>Such mechanics are within reach using today's FRAME!s</em>, in fact <a href="https://forum.rebol.info/t/looking-into-a-usermode-pointfree/1236">they are used by things like POINTFREE</a>...itself clearly useful in Rebmu.</p>
<h2><a name="p-5788-what-else-might-fq-do-3" class="anchor" href="https://forum.rebol.info#p-5788-what-else-might-fq-do-3"></a>What Else Might FQ do?</h2>
<p>There's also things like GROUP!s, and <strong>fq(x)...</strong> could imply a completely different thing from <strong>fq[x]...</strong>, suggesting a mode switch in how the ensuing information is interpreted.</p>
<p>Or <strong>fqX(...)</strong> and <strong>fqX[...]</strong> could be completely different.  What about strings?  How might string interpolation fit into all of this?</p>
<pre><code>ZfqC{Implicit printing of $a and $b and $c?}
; =&gt; z: fn [a b c] [print interpolate {Implicit print of $a and $b and $c}]
</code></pre>
<p>Maybe the implicit printing is different, like FP, and FQ with a string simply interpolates it.</p>
<p><strong>Hopefully you get the drift.</strong>  I'm talking about making Rebmu a powerhouse showcase of what Ren-C is driving at.</p>
<p>How can quoting, variadics, frames, interpolation, and all of that be applied to dialecting the act of function definition itself?</p>
<h1><a name="p-5788-insert-your-ideas-here-4" class="anchor" href="https://forum.rebol.info#p-5788-insert-your-ideas-here-4"></a><code>[insert your ideas here]</code></h1>
          <p><a href="https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796/1</link>
        <pubDate>Mon, 07 Mar 2022 07:07:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1796-1</guid>
        <source url="https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796.rss">Rebmu&#39;s FUNQTION (FQ): Dialecting Function Definition Itself</source>
      </item>
  </channel>
</rss>
