<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Wish: Multi-Returns For UPARSE Combinators</title>
    <link>https://forum.rebol.info/t/wish-multi-returns-for-uparse-combinators/1920</link>
    <description>Every combinator has a synthesized value.  But some combinators throw away values synthesized by their parser parameters.

For instance, TALLY.

    &gt;&gt; parse [1020 304] [int: some integer!]
    == 304

    &gt;&gt; parse [1020 304] [count: tally some integer!]
    == 2

TALLY knows what the result of the last call it made was, but doesn&#39;t preserve it.  What if you could?

    &gt;&gt; parse [1020 304] [[count int]: tally some integer!]
    == 2

    &gt;&gt; count
    == 2

    &gt;&gt; int
    == 304

That particular one is not necessarily a very interesting example, since you could get it yourself...

    parse [1020 304] [count: tally int: some integer!]

I only mention it because it was in a comment in UPARSE I wanted to delete, because it&#39;s a long enough file without becoming a wishlist compilation.  :-/

But there are certainly going to be other examples of combinators that might want to synthesize more than one value.  So hopefully the feature can be implemented at some point...</description>
    
    <lastBuildDate>Wed, 17 Aug 2022 14:43:49 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/wish-multi-returns-for-uparse-combinators/1920.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Wish: Multi-Returns For UPARSE Combinators</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Every combinator has a synthesized value.  But some combinators throw away values synthesized by their parser parameters.</p>
<p>For instance, TALLY.</p>
<pre><code>&gt;&gt; parse [1020 304] [int: some integer!]
== 304

&gt;&gt; parse [1020 304] [count: tally some integer!]
== 2
</code></pre>
<p>TALLY knows what the result of the last call it made was, but doesn't preserve it.  What if you could?</p>
<pre><code>&gt;&gt; parse [1020 304] [[count int]: tally some integer!]
== 2

&gt;&gt; count
== 2

&gt;&gt; int
== 304
</code></pre>
<p>That particular one is not necessarily a very interesting example, since you could get it yourself...</p>
<pre><code>parse [1020 304] [count: tally int: some integer!]
</code></pre>
<p>I only mention it because it was in a comment in UPARSE I wanted to delete, because it's a long enough file without becoming a wishlist compilation.  :-/</p>
<p>But there are certainly going to be other examples of combinators that might want to synthesize more than one value.  So hopefully the feature can be implemented at some point...</p>
          <p><a href="https://forum.rebol.info/t/wish-multi-returns-for-uparse-combinators/1920/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/wish-multi-returns-for-uparse-combinators/1920/1</link>
        <pubDate>Wed, 17 Aug 2022 14:43:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1920-1</guid>
        <source url="https://forum.rebol.info/t/wish-multi-returns-for-uparse-combinators/1920.rss">Wish: Multi-Returns For UPARSE Combinators</source>
      </item>
  </channel>
</rss>
