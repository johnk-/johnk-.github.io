<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Shades of Distinction In Non-Valued Intents</title>
    <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604</link>
    <description>***UPDATE 2022:** Rewritten completely to explain the modern answers for the topic than inbound links to this thread wanted to talk about.*

---

## Rebol2/R3-Alpha/Red Have Two Kinds of Nothing (both reified)

Historical Redbol gives you two main choices for &quot;nothingness&quot;...**`#[none]`** and **`#[unset]`**... both of which can be found either in variables, or as values in blocks:

    rebol2&gt;&gt; block: reduce [none print &quot;print returns unset&quot;]
    print returns unset
    == [none unset]  ; misleadingly renders as WORD!s

    rebol2&gt;&gt; type? first block
    == none!

    rebol2&gt;&gt; type? second block
    == unset!

Using `#[none]` has the advantage of being &quot;friendly&quot; on access via word, allowing you to write things like:

    rebol2&gt;&gt; var: none

    rebol2&gt;&gt; either var [print &quot;do something with var&quot;] [print &quot;do something else&quot;]
    do something else

But when var contained an #[unset], you&#39;d get an error instead:

    rebol2&gt;&gt; unset &#39;var

    rebol2&gt;&gt; either var [print &quot;do something with var&quot;] [print &quot;do something else&quot;]
    do something else

So instead of using var directly, you had to do something more circuitous and pass the word &quot;var&quot; into a special test routine (morally equivalent to today&#39;s **set? &#39;var**)

**Hence #[none] was reached for frequently out of convenience.  Yet this convenience came with a cost: it was very easy to accidentally append one to a block, even if its non-valued intent should have conveyed you might not have wanted to add anything at all.**

But it&#39;s hard to say: sometimes you *did* want to add #[none] to a block, to serve as a placeholder.  

Also, being able to enumerate a block which contained #[unset] values was problematic, because if you did something like a FOR-EACH it would appear that the variable you were enumerating with was itself not set.

## Early Ren-C Made Reified BLANK! and non-Valued NULL

One thing that bugged me was that there was no &quot;pretty&quot; representation for a non-valued state in a block... and that `#[none]` often thus displayed itself as the word `none` (seen in the example at the top of the post).

So the BLANK! datatype took the single underscore **_**.

    &gt;&gt; second [a _]
    == _

    &gt;&gt; if blank? _ [print &quot;yep, it&#39;s a blank&quot;]
    yep it&#39;s a blank

    &gt;&gt; if not _ [print &quot;blank is also falsey&quot;]
    blank is also falsey

And critically, one of the first things I tried to do was rethink the `#[unset]` state into something that you&#39;d never find in a block, and called it NULL (as well as made it correspond to C/Javascript null in the API):

    &gt;&gt; second [a _]
    == _

    &gt;&gt; third [a _]
    ; null

Since NULL couldn&#39;t be found in a block, it wasn&#39;t ambiguous when you got NULL back from a block operation as to whether there was a &quot;null in that position&quot;.

But it&#39;s still just two things:

  * **blank!** - A nothing you can put in a block
      * it was logically false
      * it was friendly via word access (no need for GET-WORD!)

  * **null** - A nothing you couldn&#39;t put in a block
       * it was also logically false
       * it was *unfriendly* via word access (need GET-WORD! for :VAR, or SET? &#39;VAR)

This put you in a difficult situation for your choices of emptiness when you were dealing with something like:

    append block value  ; what nothing state should you use for value?

If you wanted to avoid accidentally appending blanks to arrays, you kind of wanted NULL so you&#39;d get an error.  But once you used NULL, you could not write the convenient **`if value [...]`**  control structure.

## Later Ren-C added a separate &quot;ornery&quot; non-Value State

A third state was added to be neither logically true nor false, and that would trigger an error on accessing a variable with it.  (I&#39;ll whitewash history a bit and say this state was always called &quot;NIHIL&quot;, and also always could not be put in blocks.)

This was the new state of unset variables:

    &gt;&gt; unset &#39;x

    &gt;&gt; x
    ** Error: X is an unset variable

    &gt;&gt; get/any &#39;x
    ; nihil

    &gt;&gt; if get/any &#39;x [print &quot;Ornery!&quot;]
    ** Error: nihil is neither logically true nor false

So NULL now represented a middle ground.  It was something that was easy to test for being nothing (using IF) but that was impossible to accidentally put into a block.

This gave you three behaviors:

    [1]  &gt;&gt; nihil-value
         ** Error: NIHIL-VALUE variable is unset

    [2]  &gt;&gt; null-value
         ; null

         &gt;&gt; append [a b] null-value
         ** Error: APPEND does not allow adding NULL to blocks

    [3]  &gt;&gt; blank-value
         == _

         &gt;&gt; append [a b] blank-value
         == [a b _]

## WORD! Isotopes Brought Infinite Non-Valued Choices

Eventually the NULL state became the isotopic status of the WORD! null, so a **~null~** isotope.

It joined **~true~** and **~false~** as being isotopes you could test for truthiness and falseyness.  But if you were okay with getting an error on conditional testing, any other word could be used:

      config: ~initialize-system-not-called~

      initialize-system: func [
          {Let&#39;s say this function reads the config file}
      ][
          ...
          config: [...]
      ]

This usually causes a nice labeled message anytime someone tries to use CONFIG:

Going this route would create a pain point for anyone who thought they were going to test for whether you had a config initialized by testing **if config [...]**.  So that has to be considered as whether it&#39;s what you want.

Because on the other hand, you should use the null isotope as the initialization for something you may run some code and find it doesn&#39;t assign, and you want to be able to test that.

     directory: ~null~

     for-each [key val] config [
         if key = &#39;directory [
             if directory [
                 fail [&quot;Directory was already set by config:&quot; directory]
             ]
             directory: val
         ]
     ]

## VOID Provided a Clean &quot;Opt-Out&quot; Option

An unfortunate sacrifice that had been made in the design was that the &quot;non-valued&quot; status of NULL was chosen to raise attention to an error condition, rather than be an opportunity to opt-out of an APPEND:

    &gt;&gt; append [a b] null-value
    ** Error: This is the choice that we went with

    &gt;&gt; append [a b] null-value
    == [a b]  ; would have been another possibility, but too accident prone

Some &quot;strange&quot; things were tried...such as making it so that appending a BLANK! was a no-op, and if you wanted to append a literal blank you had to append a quoted blank:

     &gt;&gt; append [a b] _
     == [a b]  ; hmmm.

     &gt;&gt; append [a b] quote _
     == [a b _]  ; hmmm.

*(It wasn&#39;t that strange considering appending a BLOCK! would append its contents, and a quoted block was being tried as the way of specifying /ONLY.  This line of thinking ultimately led to the [designs for the isotopes that solve things like splicing intent](https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918), so it wasn&#39;t all for naught!)*

When invisibles were first introduced, you couldn&#39;t &quot;pass a void&quot; to a function.  Because so long as the evaluator processed an argument which vanished, it would keep re-triggering until it found one.

    &gt;&gt; append [a b] comment &quot;hi&quot; 1 + 2
    == [a b 3]  ; old idea was that comment vanished

This seemed justified because there wasn&#39;t anything you *could* pass.  Void was the absence of value, not something that a variable could take on.

But with a change in perspective, void became a state that variables were allowed to hold.  Not only that, but it could be quoted too:

    &gt;&gt; comment &quot;hi&quot;
    ; void

    &gt;&gt; quote comment &quot;hi&quot;
    == &#39;

The re-triggering was removed, and I realized that void was the perfect choice for opting out of operations:

    &gt;&gt; append [a b] comment &quot;hi&quot;
    == [a b]

    &gt;&gt; append comment &quot;hi&quot; [a b c]
    == ~null~  ; isotope

As you see above, an operation can return null when it doesn&#39;t have another good answer for giving back in case of a no-op.  This gives good error locality, since the null won&#39;t trigger another opting out unless you explicitly convert the null to a void with MAYBE.

    &gt;&gt; append (append comment &quot;hi&quot; [a b c]) [d e f]
    ** Error: APPEND doesn&#39;t accept ~NULL~ isotope for the series argument

    &gt;&gt; maybe null
    ; void

    &gt;&gt; append (maybe append comment &quot;hi&quot; [a b c]) [d e f]
    == ~null~  ; isotope

Void variables were deemed to be something it would be undesirable to have be &quot;too friendly&quot;.  So they were slated to be mean on WORD!-access, and instead MAYBE would be used with null variables.

This gives a (seemingly) complete picture

    [1]  &gt;&gt; nihil-value
         ** Error: NIHIL-VALUE variable is unset

          &gt;&gt; append [a b] get/any &#39;nihil-value
          ** Error: APPEND does not allow adding ~ isotopes to blocks
          
    [2]  &gt;&gt; void-value
         ** Error: VOID-VALUE is void (use GET-WORD! or GET/ANY)

         &gt;&gt; append [a b] :void-value
         == [a b]

    [3]  &gt;&gt; null-value
         == ~null~  ; isotope

         &gt;&gt; append [a b] null-value
         ** Error: APPEND does not allow adding NULL to blocks

    [3a] &gt;&gt; append [a b] maybe null-value
         == [a b]

    [4]  &gt;&gt; blank-value
         == _

         &gt;&gt; append [a b] blank-value
         == [a b _]</description>
    
    <lastBuildDate>Wed, 30 Nov 2022 05:22:53 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Shades of Distinction In Non-Valued Intents</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've brought the above discussion up to date, and I think it paints a pretty clear picture of why things are the way they are.</p>
<p>But I realized while thinking about what the right default for ARRAY would be, that there are effectively three single-character reified non-values:</p>
<pre><code>[1]  &gt;&gt; array 3
     == [_ _ _]  ; BLANK!s

[2]  &gt;&gt; array 3
     == [~ ~ ~]  ; Quasi-VOID!s

[3]  &gt;&gt; array 3
     == [' ' ']  ; Quoted-VOID!s
</code></pre>
<h2>This Offers Us Some Nuance Even If A State Must Be Reified!</h2>
<p>When it comes to the direct behavior of APPEND to a block, all these states have to work the same.  In the era of isotopes, all reified values are appended as-is... it cannot (and should not) be any more complex:</p>
<pre><code>&gt;&gt; append [a b] second [c _]
== [a b _]

&gt;&gt; append [a b] second [c ~]
== [a b ~]

&gt;&gt; append [a b] second [c ']
== [a b ']

&gt;&gt; append [a b] second [c [d e]]
== [a b [d e]]
</code></pre>
<p><strong>But when we throw in an extra operation, we can imagine a difference.</strong>  For instance, we could make BLANK! semantically equivalent to an empty array for the purposes of things like SPREAD or EMPTY?</p>
<pre><code>&gt;&gt; spread second [c []]
== ~[]~  ; isotope

&gt;&gt; spread second [c _]
== ~[]~  ; isotope

&gt;&gt; append [a b] spread second [c _]
== [a b]

&gt;&gt; empty? second [c _]
== ~true~  ; isotope
</code></pre>
<p>...and then we'd say that if you tried to do such things with a quasi-void or a quoted-void, it would be an error:</p>
<pre><code>&gt;&gt; spread second [c ~]
** Error: SPREAD does not accept QUASI-void arguments

&gt;&gt; empty? second [c ']
** Error: EMPTY? does not accept QUOTED-void arguments
</code></pre>
<p><em>I think this suggests that <code>~</code> makes a better choice for the default value of ARRAY elements!</em>  We can't default to an isotope like the one representing unset variables, but it's the closest thing.</p>
<p><em>Ultimately it came to seem that having only the isotopes ~null~ and ~false~ be falsey was more valuable than having BLANK! be falsey.</em>  Simply being able to assume that anything you can find in an array is truthy offered more leverage.  So blanks are now truthy, BUT they're empty.</p>
<h2>What About Opting Out Of As-Is Appends, etc?</h2>
<p>I mentioned that all items that can be found in a block have to act mechanically identically when it comes to TAKE-ing and APPEND-ing them.  But what would XXX be if you wanted the following?</p>
<pre><code>&gt;&gt; append [a b] xxx second [c [d e]]
== [a b [d e]]

&gt;&gt; append [a b] xxx second [c _]
== [a b _]

&gt;&gt; append [a b] xxx second [c ~]
** Error: Cannot append NIHIL (~ isotope) to a block

&gt;&gt; append [a b] xxx second [c ']
== [a b]
</code></pre>
<p>I suggest this operator be called DECAY.  It would turn all quasiforms into their corresponding isotope, and its behavior of turning QUOTED! void into a void would be a unique behavior for which that is the only quoted form that it would do that for.</p>
<pre><code>&gt;&gt; decay first [~asdf~]
== ~asdf~  ; isotope

&gt;&gt; decay first ['foo]
== 'foo

&gt;&gt; decay first [123]
== 123

&gt;&gt; decay first [']
; void
</code></pre>
<p>The reverse of this operator would be REIFY.</p>
<h2>What About FOR-EACH Variations?</h2>
<p>I think an additionally neat spin on how these can be treated differently can be how FOR-EACH responds.</p>
<pre><code>&gt;&gt; for-each x (second [c []]) [
       print "Loop never runs"
   ]
; void

&gt;&gt; for-each x (second [c _]) [
       print "Loop never runs"
   ]
; void

&gt;&gt; for-each x (second [c ']) [
       print "Loop never runs"
   ]
== ~null~  ; isotope (like a void in, null out... or if a BREAK was hit)

&gt;&gt; for-each x (second [c ~]) [
       print "Loop never runs"
   ]
** Error: FOR-EACH does not accept QUASI-VOID as its data argument
</code></pre>
<p>This is a bit more speculative, but I like the general idea that a quoted void could let you have a kind of nothing that gave you the "opt out" ability in places where it could... and quasi void could give you an error, while blank acts like an empty series.  This seems to offer some nice invariants that reduce overall code you have to write handling edge cases.</p>
<hr>
<p><strong>I hope that this all plugs together, <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a>.  Can you review this thread and tell me if I've finally gotten it all to gel for you?</strong></p>
          <p><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/3</link>
        <pubDate>Wed, 30 Nov 2022 04:00:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1604-3</guid>
        <source url="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss">Shades of Distinction In Non-Valued Intents</source>
      </item>
      <item>
        <title>Shades of Distinction In Non-Valued Intents</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em><strong>UPDATE 2022:</strong> Rewritten completely to explain the modern answers for the topic than inbound links to this thread wanted to talk about.</em></p>
<hr>
<h2>Rebol2/R3-Alpha/Red Have Two Kinds of Nothing (both reified)</h2>
<p>Historical Redbol gives you two main choices for "nothingness"...<strong><code>#[none]</code></strong> and <strong><code>#[unset]</code></strong>... both of which can be found either in variables, or as values in blocks:</p>
<pre><code>rebol2&gt;&gt; block: reduce [none print "print returns unset"]
print returns unset
== [none unset]  ; misleadingly renders as WORD!s

rebol2&gt;&gt; type? first block
== none!

rebol2&gt;&gt; type? second block
== unset!
</code></pre>
<p>Using <code>#[none]</code> has the advantage of being "friendly" on access via word, allowing you to write things like:</p>
<pre><code>rebol2&gt;&gt; var: none

rebol2&gt;&gt; either var [print "do something with var"] [print "do something else"]
do something else
</code></pre>
<p>But when var contained an #[unset], you'd get an error instead:</p>
<pre><code>rebol2&gt;&gt; unset 'var

rebol2&gt;&gt; either var [print "do something with var"] [print "do something else"]
do something else
</code></pre>
<p>So instead of using var directly, you had to do something more circuitous and pass the word "var" into a special test routine (morally equivalent to today's <strong>set? 'var</strong>)</p>
<p><strong>Hence #[none] was reached for frequently out of convenience.  Yet this convenience came with a cost: it was very easy to accidentally append one to a block, even if its non-valued intent should have conveyed you might not have wanted to add anything at all.</strong></p>
<p>But it's hard to say: sometimes you <em>did</em> want to add #[none] to a block, to serve as a placeholder.</p>
<p>Also, being able to enumerate a block which contained #[unset] values was problematic, because if you did something like a FOR-EACH it would appear that the variable you were enumerating with was itself not set.</p>
<h2>Early Ren-C Made Reified BLANK! and non-Valued NULL</h2>
<p>One thing that bugged me was that there was no "pretty" representation for a non-valued state in a block... and that <code>#[none]</code> often thus displayed itself as the word <code>none</code> (seen in the example at the top of the post).</p>
<p>So the BLANK! datatype took the single underscore <strong>_</strong>.</p>
<pre><code>&gt;&gt; second [a _]
== _

&gt;&gt; if blank? _ [print "yep, it's a blank"]
yep it's a blank

&gt;&gt; if not _ [print "blank is also falsey"]
blank is also falsey
</code></pre>
<p>And critically, one of the first things I tried to do was rethink the <code>#[unset]</code> state into something that you'd never find in a block, and called it NULL (as well as made it correspond to C/Javascript null in the API):</p>
<pre><code>&gt;&gt; second [a _]
== _

&gt;&gt; third [a _]
; null
</code></pre>
<p>Since NULL couldn't be found in a block, it wasn't ambiguous when you got NULL back from a block operation as to whether there was a "null in that position".</p>
<p>But it's still just two things:</p>
<ul>
<li>
<p><strong>blank!</strong> - A nothing you can put in a block</p>
<ul>
<li>it was logically false</li>
<li>it was friendly via word access (no need for GET-WORD!)</li>
</ul>
</li>
<li>
<p><strong>null</strong> - A nothing you couldn't put in a block</p>
<ul>
<li>it was also logically false</li>
<li>it was <em>unfriendly</em> via word access (need GET-WORD! for :VAR, or SET? 'VAR)</li>
</ul>
</li>
</ul>
<p>This put you in a difficult situation for your choices of emptiness when you were dealing with something like:</p>
<pre><code>append block value  ; what nothing state should you use for value?
</code></pre>
<p>If you wanted to avoid accidentally appending blanks to arrays, you kind of wanted NULL so you'd get an error.  But once you used NULL, you could not write the convenient <strong><code>if value [...]</code></strong>  control structure.</p>
<h2>Later Ren-C added a separate "ornery" non-Value State</h2>
<p>A third state was added to be neither logically true nor false, and that would trigger an error on accessing a variable with it.  (I'll whitewash history a bit and say this state was always called "NIHIL", and also always could not be put in blocks.)</p>
<p>This was the new state of unset variables:</p>
<pre><code>&gt;&gt; unset 'x

&gt;&gt; x
** Error: X is an unset variable

&gt;&gt; get/any 'x
; nihil

&gt;&gt; if get/any 'x [print "Ornery!"]
** Error: nihil is neither logically true nor false
</code></pre>
<p>So NULL now represented a middle ground.  It was something that was easy to test for being nothing (using IF) but that was impossible to accidentally put into a block.</p>
<p>This gave you three behaviors:</p>
<pre><code>[1]  &gt;&gt; nihil-value
     ** Error: NIHIL-VALUE variable is unset

[2]  &gt;&gt; null-value
     ; null

     &gt;&gt; append [a b] null-value
     ** Error: APPEND does not allow adding NULL to blocks

[3]  &gt;&gt; blank-value
     == _

     &gt;&gt; append [a b] blank-value
     == [a b _]
</code></pre>
<h2>WORD! Isotopes Brought Infinite Non-Valued Choices</h2>
<p>Eventually the NULL state became the isotopic status of the WORD! null, so a <strong>~null~</strong> isotope.</p>
<p>It joined <strong>~true~</strong> and <strong>~false~</strong> as being isotopes you could test for truthiness and falseyness.  But if you were okay with getting an error on conditional testing, any other word could be used:</p>
<pre><code>  config: ~initialize-system-not-called~

  initialize-system: func [
      {Let's say this function reads the config file}
  ][
      ...
      config: [...]
  ]
</code></pre>
<p>This usually causes a nice labeled message anytime someone tries to use CONFIG:</p>
<p>Going this route would create a pain point for anyone who thought they were going to test for whether you had a config initialized by testing <strong>if config [...]</strong>.  So that has to be considered as whether it's what you want.</p>
<p>Because on the other hand, you should use the null isotope as the initialization for something you may run some code and find it doesn't assign, and you want to be able to test that.</p>
<pre><code> directory: ~null~

 for-each [key val] config [
     if key = 'directory [
         if directory [
             fail ["Directory was already set by config:" directory]
         ]
         directory: val
     ]
 ]
</code></pre>
<h2>VOID Provided a Clean "Opt-Out" Option</h2>
<p>An unfortunate sacrifice that had been made in the design was that the "non-valued" status of NULL was chosen to raise attention to an error condition, rather than be an opportunity to opt-out of an APPEND:</p>
<pre><code>&gt;&gt; append [a b] null-value
** Error: This is the choice that we went with

&gt;&gt; append [a b] null-value
== [a b]  ; would have been another possibility, but too accident prone
</code></pre>
<p>Some "strange" things were tried...such as making it so that appending a BLANK! was a no-op, and if you wanted to append a literal blank you had to append a quoted blank:</p>
<pre><code> &gt;&gt; append [a b] _
 == [a b]  ; hmmm.

 &gt;&gt; append [a b] quote _
 == [a b _]  ; hmmm.
</code></pre>
<p><em>(It wasn't that strange considering appending a BLOCK! would append its contents, and a quoted block was being tried as the way of specifying /ONLY.  This line of thinking ultimately led to the <a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918">designs for the isotopes that solve things like splicing intent</a>, so it wasn't all for naught!)</em></p>
<p>When invisibles were first introduced, you couldn't "pass a void" to a function.  Because so long as the evaluator processed an argument which vanished, it would keep re-triggering until it found one.</p>
<pre><code>&gt;&gt; append [a b] comment "hi" 1 + 2
== [a b 3]  ; old idea was that comment vanished
</code></pre>
<p>This seemed justified because there wasn't anything you <em>could</em> pass.  Void was the absence of value, not something that a variable could take on.</p>
<p>But with a change in perspective, void became a state that variables were allowed to hold.  Not only that, but it could be quoted too:</p>
<pre><code>&gt;&gt; comment "hi"
; void

&gt;&gt; quote comment "hi"
== '
</code></pre>
<p>The re-triggering was removed, and I realized that void was the perfect choice for opting out of operations:</p>
<pre><code>&gt;&gt; append [a b] comment "hi"
== [a b]

&gt;&gt; append comment "hi" [a b c]
== ~null~  ; isotope
</code></pre>
<p>As you see above, an operation can return null when it doesn't have another good answer for giving back in case of a no-op.  This gives good error locality, since the null won't trigger another opting out unless you explicitly convert the null to a void with MAYBE.</p>
<pre><code>&gt;&gt; append (append comment "hi" [a b c]) [d e f]
** Error: APPEND doesn't accept ~NULL~ isotope for the series argument

&gt;&gt; maybe null
; void

&gt;&gt; append (maybe append comment "hi" [a b c]) [d e f]
== ~null~  ; isotope
</code></pre>
<p>Void variables were deemed to be something it would be undesirable to have be "too friendly".  So they were slated to be mean on WORD!-access, and instead MAYBE would be used with null variables.</p>
<p>This gives a (seemingly) complete picture</p>
<pre><code>[1]  &gt;&gt; nihil-value
     ** Error: NIHIL-VALUE variable is unset

      &gt;&gt; append [a b] get/any 'nihil-value
      ** Error: APPEND does not allow adding ~ isotopes to blocks
      
[2]  &gt;&gt; void-value
     ** Error: VOID-VALUE is void (use GET-WORD! or GET/ANY)

     &gt;&gt; append [a b] :void-value
     == [a b]

[3]  &gt;&gt; null-value
     == ~null~  ; isotope

     &gt;&gt; append [a b] null-value
     ** Error: APPEND does not allow adding NULL to blocks

[3a] &gt;&gt; append [a b] maybe null-value
     == [a b]

[4]  &gt;&gt; blank-value
     == _

     &gt;&gt; append [a b] blank-value
     == [a b _]</code></pre>
          <p><a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604/1</link>
        <pubDate>Fri, 14 May 2021 14:44:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1604-1</guid>
        <source url="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604.rss">Shades of Distinction In Non-Valued Intents</source>
      </item>
  </channel>
</rss>
