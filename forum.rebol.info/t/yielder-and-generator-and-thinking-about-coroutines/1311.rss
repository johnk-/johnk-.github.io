<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>YIELDER and GENERATOR (and thinking about Coroutines)</title>
    <link>https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311</link>
    <description>The stackless model so far has been built on a generic and comprehensible building block called a **YIELDER**.  I thought I&#39;d walk through it a little.

# To understand YIELDER, first look at GENERATOR

I think a generator is pretty easy to understand.  It is like a function, but instead of RETURN it has something called YIELD.  Each time YIELD is called the generator gives back the result but is left in a suspended state, and the next call to the generator will pick up right after the YIELD:

    counter: generator [
         let n: 0
         cycle [
              n: n + 1
              yield n
         ]
    ]

    &gt;&gt; counter
    == 1

    &gt;&gt; counter
    == 2

## Generators are building blocks, meant to be used with functions

Generators don&#39;t take parameters.  So if you want to parameterize them, you should combine them with a function.  Imagine you wanted to be able to specify a bump amount for your counter:

    make-counter: func [bump] [
         return generator [
             let n: 0
             cycle [yield n: n + 1]
         ]
    ]

    &gt;&gt; counter: make-counter 5

    &gt;&gt; counter
    == 1

    &gt;&gt; counter
    == 6

    &gt;&gt; counter
    == 11

## But functions aren&#39;t limited to being just &quot;generator makers&quot;...

For instance: functions can be generator wrappers, that actually delegate to the generator...or perhaps even destroy it and make new ones.  Consider making a resettable counter, as @giuliolunati has in his GENERATE usermode generator:

     counter: func [/reset &lt;static&gt; n (0) gen (null)] [
         if reset [n: 0, return]
         return reeval gen: default [
             generator [
                 cycle [yield n: n + 1]
             ]
         ]
     ]

     &gt;&gt; counter
     == 1

     &gt;&gt; counter
     == 2

     &gt;&gt; counter/reset

     &gt;&gt; counter
     == 1

     &gt;&gt; counter
     == 2

This gives a lot of flexibility in the design of generator interfaces.  Considering the above example alone: what if you are in a situation where you think the **counter/reset** should have returned 1 instead of being a separate step that had no return result?  Or maybe you think it should have returned what the last generator value was.

By making generators a &quot;simplistic&quot; building block, you&#39;re in control of these interface choices.

## The YIELDER hybridizes with functions for efficiency

I said that generators don&#39;t have parameters or a function spec, but that is because they are a specialization of a version that does have a spec... called a YIELDER.

    weird-print: yielder [x] [
        cycle [
            print [&quot;Odd print:&quot; x]
            yield ~
            print [&quot;Even print:&quot; x]
            yield ~
        ]
    ]

    &gt;&gt; weird-print &quot;Hello&quot;
    Odd print: Hello

    &gt;&gt; weird-print &quot;Weird&quot;
    Even print: Weird

    &gt;&gt; weird-print &quot;World&quot;
    Odd print: World

This isn&#39;t anything you couldn&#39;t have achieved with a function that wrapped a generator, that held that generator statically and then sub-dispatched to it.  It&#39;s just cleaner and more efficient.  *(Since GENERATOR is implemented as `yielder [] [...generator body...]` it&#39;s kind of like the DOES analogue to FUNC.)*

But this kind of gives you a sense of the parts box you have for building relatively efficient generator-type things.</description>
    
    <lastBuildDate>Tue, 24 Sep 2024 20:52:32 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>YIELDER and GENERATOR (and thinking about Coroutines)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1311">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>As I shuffle around how this kind of producer/consumer pattern might be managed more legibly, I feel a resonance with the writeup of <a href="http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">"What Color is Your Function"</a>. That author's conclusion seems like mine and maybe others which is that Go's channels and "goroutines" are probably a better answer than trying to emulate these other more bizarre coroutine examples.</p>
</blockquote>
</aside>
<p>So the Rebol-like <a href="https://forum.rebol.info/t/rye-language/1768">Rye Language</a> is written in Go, and actually has a <strong><code>go</code></strong> native.</p>
<p>There is a <a href="https://www.reddit.com/r/ryelang/comments/1aca580/goroutines_channels_waitgroups/">reddit post announcing some of the work</a>, with this picture:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/7646d548cd4947281b7a8caca5b95d03ea92eb3e.webp" data-download-href="https://forum.rebol.info/uploads/default/7646d548cd4947281b7a8caca5b95d03ea92eb3e" title="goroutines-channels-waitgroups-v0-1f02uzygbzec1"><img src="https://forum.rebol.info/uploads/default/optimized/1X/7646d548cd4947281b7a8caca5b95d03ea92eb3e_2_611x500.webp" alt="goroutines-channels-waitgroups-v0-1f02uzygbzec1" data-base62-sha1="gSk6fyffxDGOccNRk6p3KYdxbfE" width="611" height="500" srcset="https://forum.rebol.info/uploads/default/optimized/1X/7646d548cd4947281b7a8caca5b95d03ea92eb3e_2_611x500.webp, https://forum.rebol.info/uploads/default/optimized/1X/7646d548cd4947281b7a8caca5b95d03ea92eb3e_2_916x750.webp 1.5x, https://forum.rebol.info/uploads/default/original/1X/7646d548cd4947281b7a8caca5b95d03ea92eb3e.webp 2x" data-dominant-color="343539"></a></div><p></p>
<p>This area isn't something I'm currently focused on, but it will be interesting to see what the bridge between Go and a Rebol-like winds up being.</p>
          <p><a href="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311/4</link>
        <pubDate>Tue, 24 Sep 2024 20:52:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1311-4</guid>
        <source url="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311.rss">YIELDER and GENERATOR (and thinking about Coroutines)</source>
      </item>
      <item>
        <title>YIELDER and GENERATOR (and thinking about Coroutines)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1311">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>That author's conclusion seems like mine and maybe others which is that Go's channels and "goroutines" are probably a better answer than trying to emulate these other more bizarre coroutine examples.</p>
</blockquote>
</aside>
<p>I took a day to tinker and see what I could manage to mock up Goroutines, standing on the shoulders of the stackless work.</p>
<p>Based on that, here's a reimagining of this sample in the style of Go:</p>
<pre><code>producer: func [sentence [text!]] [ 
    let out: make-chan
    let tokens: split sentence space 

    go (func [] [
        for-next t tokens [  ; FOR-EACH is not stackless (yet), so...
            send-chan out t/1  ; ...FOR-EACH can't unwind when this blocks
        ]
        close-chan out
    ])

    return out
]
  
pattern_filter: func [in "channel" /pattern [text!]] [
    pattern: default ["ing"]
    print ["Searching for" mold pattern]

    let out: make-chan

    go (func [&lt;local&gt; token] [
        while [token: receive-chan in] [
            if find token pattern [
                send-chan out token
            ]
        ]
        close-chan out
        print "Done with filtering!!"
    ])

    return out
]

print_token: func [in] [
    print ["I'm sink, i'll print tokens"]

    let done: make-chan
    go (func [&lt;local&gt; token] [
        while [token: receive-chan in] [
            print [token]
        ]
        close-chan done

        print "Done with printing!"
    ])

    return done
]

  
let sentence: "Bob is running behind a fast moving car"

unfiltered: producer sentence
filtered: pattern_filter unfiltered
done: print_token filtered

receive-chan done
</code></pre>
<p>This replaces the idea of coroutines speaking to each other directly with the idea that they synchronize and communicate through "channels".</p>
<ul>
<li>The producer isn't itself a "coroutine" but <em>an ordinary function that instantiates a goroutine</em>, and returns a channel object that represents its stream of produced tokens.</li>
<li>The filter also isn't a coroutine... again an ordinary function, but one that takes a channel as an input parameter...returns a filtered channel as an output.  To get the filtered channel, it instantiates a goroutine whose job it is to take items from <code>in</code> and decide which ones to send to <code>out</code>.</li>
<li>The printer once again is an ordinary function that creates a goroutine to dump out a channel that it receives.</li>
</ul>
<p>You get the desired output:</p>
<pre><code>Searching for "ing"
I'm sink, i'll print tokens
running
moving
Done with filtering!!
Done with printing!
</code></pre>
<p>This seems a much smarter path than trying to deal with a contortion of generators like "special yielding syntax"!  Does it look clear?</p>
<p>Note: I didn't have to write it as functions that run goroutines and return channels... in fact, most examples you see in Go aren't styled this way.  Instead the main code makes the channel and then calls <strong>go</strong> on a goroutine that is parameterized with the channels.  But I thought it made responsibility clearer who was doing what, e.g. to have the producer both make the channel and close it--vs being given a pre-made channel to fill.</p>
          <p><a href="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311/3</link>
        <pubDate>Thu, 30 Jul 2020 16:57:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1311-3</guid>
        <source url="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311.rss">YIELDER and GENERATOR (and thinking about Coroutines)</source>
      </item>
      <item>
        <title>YIELDER and GENERATOR (and thinking about Coroutines)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>Note: This 2020 post was updated in 2024, some things have changed.</strong></p>
</blockquote>
<hr>
<p>Generators are related to coroutines...and I <em>thought</em> I knew what they were <img src="https://forum.rebol.info/images/emoji/twitter/face_with_raised_eyebrow.png?v=12" title=":face_with_raised_eyebrow:" class="emoji" alt=":face_with_raised_eyebrow:" loading="lazy" width="20" height="20">.  But looking at examples of Python coroutines made me wonder exactly what the difference was, and what (if anything) they could do that yielders + wrapping functions could not.</p>
<p>So I thought I'd try translating a coroutine example.</p>
<h2><a name="p-3903-python3-example-1" class="anchor" href="https://forum.rebol.info#p-3903-python3-example-1"></a>Python3 Example</h2>
<p>A top hit for Python coroutines is apparently <a href="https://www.geeksforgeeks.org/coroutine-in-python/">https://www.geeksforgeeks.org/coroutine-in-python/</a>.  I now take it this is out of date, and Python3 looks to have a much more JavaScript/C# async/await type feel to it.</p>
<pre><code># Python3 program for demonstrating
# coroutine chaining

def producer(sentence, next_coroutine):
    '''
    Producer which just split strings and
    feed it to pattern_filter coroutine
    '''
    tokens = sentence.split(" ")
    for token in tokens:
        next_coroutine.send(token)
    next_coroutine.close()

def pattern_filter(pattern="ing", next_coroutine=None):
    '''
    Search for pattern in received token 
    and if pattern got matched, send it to
    print_token() coroutine for printing
    '''
    print("Searching for {}".format(pattern))
    try:
        while True:
            token = (yield)
            if pattern in token:
                next_coroutine.send(token)
    except GeneratorExit:
        print("Done with filtering!!")
        next_coroutine.close()

def print_token():
    '''
    Act as a sink, simply print the
    received tokens
    '''
    print("I'm sink, i'll print tokens")
    try:
        while True:
            token = (yield)
            print(token)
    except GeneratorExit:
        print("Done with printing!")

pt = print_token()
pt.__next__()
pf = pattern_filter(next_coroutine = pt)
pf.__next__()

sentence = "Bob is running behind a fast moving car"
producer(sentence, pf)`
</code></pre>
<p><em>(This does look like it's leading toward async/await, which as I mentioned is what the <a href="https://docs.python.org/3/library/asyncio-task.html">Python3 stuff looks like</a>.  As I shuffle around how this kind of producer/consumer pattern might be managed more legibly, I feel a resonance with the writeup of <a href="http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">"What Color is Your Function"</a>.  That author's conclusion seems like mine and maybe others which is that Go's channels and "goroutines" are probably a better answer than trying to emulate these other more bizarre coroutine examples.)</em></p>
<h2><a name="p-3903-ren-c-version-of-that-example-2" class="anchor" href="https://forum.rebol.info#p-3903-ren-c-version-of-that-example-2"></a>Ren-C Version of That Example</h2>
<p>Here is what I put together, without changing names (just adding a couple of comments):</p>
<pre><code>/producer: func [sentence [text!] next-coroutine [action?]] [
    let tokens: split sentence space
    for-each 'token tokens [
        next-coroutine token  ; Python says `next_coroutine.send(token)`
    ]
    next-coroutine null  ; Python says `next_coroutine.close()`
]

/pattern-filter: func [next-coroutine [action?] :pattern [text!]] [
    pattern: default ["ing"]

    return yielder [token [~null~ text!]] [
        print ["Searching for" pattern]
        while [token] [  ; Python does a blocking `token = (yield)`
            if find token pattern [
                next-coroutine token
            ]
            yield ~  ; yield to producer, so it can call w/another token
        ]
        print "Done with filtering!!"
        next-coroutine null
        yield:final ~
    ]
]

/emit-token: yielder [token [~null~ text!]] [
    print ["I'm sink, I'll print tokens"]
    while [token] [  ; Python does a blocking `token = (yield)`
        print token
        yield ~  ; yield to pattern-filter, so it can call w/another token
    ]
    print "Done with printing!"
    yield:final ~
]

/et: emit-token/
/pf: pattern-filter et/

sentence: "Bob is running behind a fast moving car"
producer sentence pf/
</code></pre>
<p>The output matches the example.</p>
<h2><a name="p-3903-whats-different-3" class="anchor" href="https://forum.rebol.info#p-3903-whats-different-3"></a>What's Different?</h2>
<p>They're similar, though I think the Ren-C version is more elegant <em>(modulo the YIELD:FINAL, which I think we may want to fix, but I'll discuss that in a minute.)</em></p>
<p>You'll notice that a key difference is that Python uses YIELD as a method of getting input.</p>
<pre><code>while True:
    token = (yield)
    if pattern in token:
        next_coroutine.send(token)
</code></pre>
<p>This strikes me as... weird.  The idea is that you "send" the generators what they will experience as the return value of their yield.</p>
<p>With a Ren-C yielder, you "send" it the argument just by calling it as a function...and that can be any number of arguments, received normally in the frame.  Then the YIELD just gives you the opportunity to return a value to that call (which we don't need in this case).</p>
<p>It makes a <em>lot</em> more sense, because here you just think of it as a function that the next time you call it, will still be in the same state.  YIELD is just morally equivalent to RETURN.</p>
<h2><a name="p-3903-whats-the-yieldfinal-for-4" class="anchor" href="https://forum.rebol.info#p-3903-whats-the-yieldfinal-for-4"></a>What's the YIELD:FINAL for?</h2>
<p>So this is related to the idea that when you make a call to a generator and the body finishes, that typically means it has no generated value to give back... so it gives you a definitional raised error, that's the end signal.  This is part of enabling a <a href="https://forum.rebol.info/t/full-band-return-values-from-generators-yielders/2329">full-band generator result</a>.</p>
<p>But when you're calling a coroutine as a value sink and not a value source, you don't want the last call you make to the sink to return a raised error.  Because then you'd have to suppress the error at the callsite.</p>
<p>This does point to something a bit odd about YIELDER, which is that since you're passing them values, they are either not going to ever run out of values (and are just processing what you give them in a loop), or one of the values you pass them is a "close yourself" signal...and here we're using NULL.  If there's more than one parameter, this means your close signal would have to have some kind of dummy values to those parameters.</p>
<p>I think this probably means that there needs to be a way to send this close signal without passing parameters.  <strong><code>close next-coroutine/</code></strong> may or may not be a good syntax for it.</p>
<p>But, then we have to ask what kind of a clean exception model this would give.  One idea could be that if it's in a suspended state, then when it becomes unsuspended, then instead of returning the yielded value, it would return a raised error.  If you needed to handle being closed out from under yourself, then reacting to that exception would be the place to do it.</p>
<p>However...if you didn't have any exception handling on your YIELD, then the CLOSE would result in an abrupt failure.  Basically, you can only CLOSE yielders that are prepared to receive the message.</p>
<p>Subtle.  Anyway, this wasn't a super huge priority in 2020...and it still isn't here in 2024... but it's interesting to look at, and keep in mind.</p>
          <p><a href="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311/2</link>
        <pubDate>Tue, 28 Jul 2020 03:52:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1311-2</guid>
        <source url="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311.rss">YIELDER and GENERATOR (and thinking about Coroutines)</source>
      </item>
      <item>
        <title>YIELDER and GENERATOR (and thinking about Coroutines)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The stackless model so far has been built on a generic and comprehensible building block called a <strong>YIELDER</strong>.  I thought I'd walk through it a little.</p>
<h1>
<a name="to-understand-yielder-first-look-at-generator-1" class="anchor" href="https://forum.rebol.info#to-understand-yielder-first-look-at-generator-1"></a>To understand YIELDER, first look at GENERATOR</h1>
<p>I think a generator is pretty easy to understand.  It is like a function, but instead of RETURN it has something called YIELD.  Each time YIELD is called the generator gives back the result but is left in a suspended state, and the next call to the generator will pick up right after the YIELD:</p>
<pre><code>counter: generator [
     let n: 0
     cycle [
          n: n + 1
          yield n
     ]
]

&gt;&gt; counter
== 1

&gt;&gt; counter
== 2
</code></pre>
<h2>
<a name="generators-are-building-blocks-meant-to-be-used-with-functions-2" class="anchor" href="https://forum.rebol.info#generators-are-building-blocks-meant-to-be-used-with-functions-2"></a>Generators are building blocks, meant to be used with functions</h2>
<p>Generators don't take parameters.  So if you want to parameterize them, you should combine them with a function.  Imagine you wanted to be able to specify a bump amount for your counter:</p>
<pre><code>make-counter: func [bump] [
     return generator [
         let n: 0
         cycle [yield n: n + 1]
     ]
]

&gt;&gt; counter: make-counter 5

&gt;&gt; counter
== 1

&gt;&gt; counter
== 6

&gt;&gt; counter
== 11
</code></pre>
<h2>
<a name="but-functions-arent-limited-to-being-just-generator-makers-3" class="anchor" href="https://forum.rebol.info#but-functions-arent-limited-to-being-just-generator-makers-3"></a>But functions aren't limited to being just "generator makers"...</h2>
<p>For instance: functions can be generator wrappers, that actually delegate to the generator...or perhaps even destroy it and make new ones.  Consider making a resettable counter, as <a class="mention" href="https://forum.rebol.info/u/giuliolunati">@giuliolunati</a> has in his GENERATE usermode generator:</p>
<pre><code> counter: func [/reset &lt;static&gt; n (0) gen (null)] [
     if reset [n: 0, return]
     return reeval gen: default [
         generator [
             cycle [yield n: n + 1]
         ]
     ]
 ]

 &gt;&gt; counter
 == 1

 &gt;&gt; counter
 == 2

 &gt;&gt; counter/reset

 &gt;&gt; counter
 == 1

 &gt;&gt; counter
 == 2
</code></pre>
<p>This gives a lot of flexibility in the design of generator interfaces.  Considering the above example alone: what if you are in a situation where you think the <strong>counter/reset</strong> should have returned 1 instead of being a separate step that had no return result?  Or maybe you think it should have returned what the last generator value was.</p>
<p>By making generators a "simplistic" building block, you're in control of these interface choices.</p>
<h2>
<a name="the-yielder-hybridizes-with-functions-for-efficiency-4" class="anchor" href="https://forum.rebol.info#the-yielder-hybridizes-with-functions-for-efficiency-4"></a>The YIELDER hybridizes with functions for efficiency</h2>
<p>I said that generators don't have parameters or a function spec, but that is because they are a specialization of a version that does have a spec... called a YIELDER.</p>
<pre><code>weird-print: yielder [x] [
    cycle [
        print ["Odd print:" x]
        yield ~
        print ["Even print:" x]
        yield ~
    ]
]

&gt;&gt; weird-print "Hello"
Odd print: Hello

&gt;&gt; weird-print "Weird"
Even print: Weird

&gt;&gt; weird-print "World"
Odd print: World
</code></pre>
<p>This isn't anything you couldn't have achieved with a function that wrapped a generator, that held that generator statically and then sub-dispatched to it.  It's just cleaner and more efficient.  <em>(Since GENERATOR is implemented as <code>yielder [] [...generator body...]</code> it's kind of like the DOES analogue to FUNC.)</em></p>
<p>But this kind of gives you a sense of the parts box you have for building relatively efficient generator-type things.</p>
          <p><a href="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311/1</link>
        <pubDate>Tue, 28 Jul 2020 03:52:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1311-1</guid>
        <source url="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311.rss">YIELDER and GENERATOR (and thinking about Coroutines)</source>
      </item>
  </channel>
</rss>
