<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;Quasiforms&quot;, &quot;Stable/Unstable Isotopes&quot;: Simpler Terminology?</title>
    <link>https://forum.rebol.info/t/quasiforms-stable-unstable-isotopes-simpler-terminology/2005</link>
    <description>It&#39;s no secret that I&#39;m proud of the way the [design for generalized isotopes](https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918) is tearing through classic problems in Rebol.

At the same time, people&#39;s eyes can glaze over when you find yourself writing sentences like:

&gt; *&quot;All quasiforms become isotopic forms when evaluated, and when going the other way through a meta operation on an isotope, you&#39;ll get a quasiform back.&quot;*

It all makes sense to me.  But I don&#39;t want to overlook better terms, if they exist.

## How Did &quot;Isotopes&quot; Come To Be Called That

The term isotope originated from the &quot;decaying&quot; behavior, where a special form of null would run a THEN branch.  But this special form would not be something you could store in a variable...it would become an ordinary null at that point.  So getting stored in a variable would cause &quot;decay&quot;.

    &gt;&gt; null
    ; null

    &gt;&gt; if true [null]
    ; null isotope

    &gt;&gt; x: if true [null]
    ; null isotope

    &gt;&gt; x
    ; null

The decay means variables captured from expressions would have a different behavior when substituted for the expressions.  That was deemed to be an acceptable cost.

    &gt;&gt; if true [print &quot;then&quot;, null] else [print &quot;else&quot;]
    then

    &gt;&gt; temp: if true [print &quot;then&quot;, null]
    then

    &gt;&gt; temp else [print &quot;else&quot;]
    else

The parallel with decay of atomic isotopes seemed pretty clear, at least to me.  Many places would see it as a normal null, but a few special sites could use a &quot;sensor&quot; to detect the difference.  ELSE was an example of something that could detect.

As things moved forward, and when logic variables became ~true~ and ~false~ isotopes, it became clear these isotopic states would need to be able to stored in variables.  That meant there were &quot;unstable isotopes&quot; and &quot;stable isotopes&quot;... e.g. WORD! isotopes were stable, ERROR! isotopes were not.

***Having these stable isotopes actually strengthened the analogy.***

## How Did &quot;QUASI&quot; Become Called That?

Originally, things like `~foo~` were called &quot;bad words&quot;, designed to cause errors when accessed through a variable by default.  They were like an old-school UNSET! where you could give it a custom label.  But eventually everything was generalized so that everything had an isotopic form.

The fact that these forms stopped conveying an error condition meant considering them &quot;bad&quot; wasn&#39;t sensible.  I kind of latched onto &quot;quasi&quot; in part because of the tilde&#39;s use in approximation, e.g. (3.0001 ~= 3). 

(It also sounds a little like &quot;queasy&quot; and the squigglies look wavy and maybe a bit uncomfortable.  :nauseated_face:)

## So... Speak Now Or Hold Your Peace?

Bad naming can have an impact.  I think calling complex numbers &quot;imaginary&quot; is a good example of a bad name that probably caused a few problems.

But I think the names here are good.  It&#39;s just going to be a matter of figuring out how to teach people to not be afraid of them.</description>
    
    <lastBuildDate>Sun, 08 Jan 2023 21:18:39 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/quasiforms-stable-unstable-isotopes-simpler-terminology/2005.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;Quasiforms&quot;, &quot;Stable/Unstable Isotopes&quot;: Simpler Terminology?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>It's no secret that I'm proud of the way the <a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918">design for generalized isotopes</a> is tearing through classic problems in Rebol.</p>
<p>At the same time, people's eyes can glaze over when you find yourself writing sentences like:</p>
<blockquote>
<p><em>"All quasiforms become isotopic forms when evaluated, and when going the other way through a meta operation on an isotope, you'll get a quasiform back."</em></p>
</blockquote>
<p>It all makes sense to me.  But I don't want to overlook better terms, if they exist.</p>
<h2>How Did "Isotopes" Come To Be Called That</h2>
<p>The term isotope originated from the "decaying" behavior, where a special form of null would run a THEN branch.  But this special form would not be something you could store in a variable...it would become an ordinary null at that point.  So getting stored in a variable would cause "decay".</p>
<pre><code>&gt;&gt; null
; null

&gt;&gt; if true [null]
; null isotope

&gt;&gt; x: if true [null]
; null isotope

&gt;&gt; x
; null
</code></pre>
<p>The decay means variables captured from expressions would have a different behavior when substituted for the expressions.  That was deemed to be an acceptable cost.</p>
<pre><code>&gt;&gt; if true [print "then", null] else [print "else"]
then

&gt;&gt; temp: if true [print "then", null]
then

&gt;&gt; temp else [print "else"]
else
</code></pre>
<p>The parallel with decay of atomic isotopes seemed pretty clear, at least to me.  Many places would see it as a normal null, but a few special sites could use a "sensor" to detect the difference.  ELSE was an example of something that could detect.</p>
<p>As things moved forward, and when logic variables became ~true~ and ~false~ isotopes, it became clear these isotopic states would need to be able to stored in variables.  That meant there were "unstable isotopes" and "stable isotopes"... e.g. WORD! isotopes were stable, ERROR! isotopes were not.</p>
<p><em><strong>Having these stable isotopes actually strengthened the analogy.</strong></em></p>
<h2>How Did "QUASI" Become Called That?</h2>
<p>Originally, things like <code>~foo~</code> were called "bad words", designed to cause errors when accessed through a variable by default.  They were like an old-school UNSET! where you could give it a custom label.  But eventually everything was generalized so that everything had an isotopic form.</p>
<p>The fact that these forms stopped conveying an error condition meant considering them "bad" wasn't sensible.  I kind of latched onto "quasi" in part because of the tilde's use in approximation, e.g. (3.0001 ~= 3).</p>
<p>(It also sounds a little like "queasy" and the squigglies look wavy and maybe a bit uncomfortable.  <img src="https://forum.rebol.info/images/emoji/twitter/nauseated_face.png?v=9" title=":nauseated_face:" class="emoji" alt=":nauseated_face:">)</p>
<h2>So... Speak Now Or Hold Your Peace?</h2>
<p>Bad naming can have an impact.  I think calling complex numbers "imaginary" is a good example of a bad name that probably caused a few problems.</p>
<p>But I think the names here are good.  It's just going to be a matter of figuring out how to teach people to not be afraid of them.</p>
          <p><a href="https://forum.rebol.info/t/quasiforms-stable-unstable-isotopes-simpler-terminology/2005/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/quasiforms-stable-unstable-isotopes-simpler-terminology/2005/1</link>
        <pubDate>Sun, 08 Jan 2023 21:18:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2005-1</guid>
        <source url="https://forum.rebol.info/t/quasiforms-stable-unstable-isotopes-simpler-terminology/2005.rss">&quot;Quasiforms&quot;, &quot;Stable/Unstable Isotopes&quot;: Simpler Terminology?</source>
      </item>
  </channel>
</rss>
