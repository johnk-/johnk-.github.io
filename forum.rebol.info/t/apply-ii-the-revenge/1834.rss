<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>APPLY II: The Revenge!</title>
    <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834</link>
    <description>[quote=&quot;hostilefork, post:1, topic:1406&quot;]
It&#39;s time to bring back APPLY
[/quote]

...and by *&quot;it&#39;s time&quot; I apparently meant *&quot;within the next year, maybe&quot;*...

But better late than never, right?  It&#39;s in!

## Refinements Can be Provided In Any Order

    [a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
    [a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
    [a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

    [a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
    [a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]

## Any Parameter (Not Just Refinements) Can Be Used By Name

Once a parameter has been supplied by name, it is no longer considered for consuming positionally.

    [a b c d e] = apply :append [/series [a b c] /value [d e]]
    [a b c d e] = apply :append [/value [d e] /series [a b c]]

    [a b c d e] = apply :append [/series [a b c] [d e]]
    [a b c d e] = apply :append [/value [d e] [a b c]]

## Commas Are Ok So Long As They Are Interstitial

    [a b c d e d e] = apply :append [[a b c], [d e], /dup 2]
    [a b c d e d e] = apply :append [/dup 2, [a b c] [d e]]

    &gt;&gt; apply :append [/dup, 2 [a b c] [d e]]
    ** Script Error: end was reached while trying to set /dup

## Giving Too Many Arguments Is An Error

    &gt;&gt; apply :append [[a b c] [d e] [f g]]
    ** Script Error: Too many values in processed argument block of APPLY.

## Refinements Must Be Followed By A Non-Refinement

    &gt;&gt; apply :append [/dup /part 1 [a b c] [d e]]
    ** Script Error: end was reached while trying to set /dup

But you can pass refinements as arguments to refinements...just use a quote!

    &gt;&gt; tester: func [/refine [any-value!]] [refine]

    &gt;&gt; apply :tester [/refine &#39;/ta-da!]
    == /ta-da!

## No-Arg Refinements Permit LOGIC! But Set NULL or `#`

Remember: *the DO FRAME! mechanics do not change anything, besides ~unset~ isotopes being turned to NULLs.*  So if a refinement doesn&#39;t take an argument, [the only legal values for that refinement in the frame are # and NULL](https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735).

But APPLY isn&#39;t DO FRAME!.  It&#39;s a higher level thing that builds a frame from the values you supply, and then has an opportunity to look over them before running DO FRAME!.  So if it sees you gave a #[true] or a #[false] to a refinement with no argument, it will adjust it appropriately.

    &gt;&gt; testme: func [/refine] [refine]

    # = apply :testme [/refine #]
    null = apply :testme [/refine null]

    # = apply :testme [/refine true]
    null = apply :testme [/refine false]

## ^META Arguments Are Also Accounted For

For those following [the profound design points](https://forum.rebol.info/t/default-values-and-make-frame/1412), the DO FRAME! mechanic does not allow you to have isotopes in frame slots.  The way you get isotopes through to a function is through meta parameters, and by convention those parameters are quoted or otherwise &quot;leveled up&quot; into non-isotope status.

But as another convenience, APPLY detects when a parameter is meta and will level it up...because the low-level frame mechanics aren&#39;t allowed to editorialize:

    &gt;&gt; non-detector: func [arg] [arg]  ; not a meta argument, isotopes illegal

    &gt;&gt; apply :non-detector [~baddie~]
    ** Script Error: non-detector needs arg as ^META for ~baddie~ isotope

    &gt;&gt; detector: func [^arg] [arg]

    &gt;&gt; apply :detector [~baddie~]
    == ~baddie~

**I know not everyone has gotten their heads around isotopes yet, but they are critical... this stuff was the missing link to making it all gel.**

:dizzy: :dizzy: :dizzy:

# What&#39;s Next?!  Making It Easier To Use!

Imagine if we let **`&lt;-`** be an infix operator...taking the name of the function to apply on the left, and a block on the right:

    &lt;-: enfix func [
        &#39;action [word! tuple! path! group!]
        args [block]
    ][
        apply (if group? action [do action] else [get action]) args
    ]

It&#39;s rather slick!

    &gt;&gt; append &lt;- [[a b c] &lt;d&gt; /dup 2]
    == [a b c &lt;d&gt; &lt;d&gt;]

    &gt;&gt; append/only &lt;- [[a b c] [e f] /dup 2]
    == [a b c [e f] [e f]]

Of course, you can mix it up with your own freaky ideas, even variadic ones!

    &gt;&gt; $: enfixed func [&#39;name [word!] &#39;args [&lt;variadic&gt; &lt;end&gt; any-value!]] [
        args: make block! args
        apply :(get name) args
    ]

    &gt;&gt; data: [a b c]

    &gt;&gt; (append $ /dup 2, data [d e])

    &gt;&gt; print [&quot;data is&quot; mold data]
    data is [a b c d e d e]

The choice is up to you.  Which is what all this is about!</description>
    
    <lastBuildDate>Sun, 05 Jun 2022 08:20:19 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1834">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>For most anything you'd put in that position, it struggles with the question of "why would it mean APPLY". Even if &amp; wasn't hideous (and it is), there's no real tie-in that it has to other uses of &amp; we might imagine...so having it do function application just looks random:</p>
<pre><code>thing: append &amp; [series :value]
</code></pre>
</blockquote>
</aside>
<p>So one possibility that's growing on me is <strong><code>//</code></strong></p>
<pre><code>thing: append // [[a b c] &lt;d&gt; /dup 2]
</code></pre>
<p>It's no longer going to be a PATH!, just because <strong><code>//x</code></strong> and <strong><code>x//</code></strong> are paths.  <em>(It will be a WORD! that has some inter-convertibility to paths for operations like JOIN, e.g. <strong><code>join 'a/b as path! '//</code></strong> would get you the path <strong><code>a/b//</code></strong>)</em></p>
<p>It has a couple of things going for it:</p>
<ul>
<li>
<p>Slashes are now intimately entwined with function application in the core evaluator, so having a slashy thing be APPLY makes some sense</p>
</li>
<li>
<p>It's easy to type...doesn't require hitting shift, flows very naturally.</p>
</li>
<li>
<p>Visually non-disruptive; it's sort of "shapeless"</p>
</li>
</ul>
<p>It's used for comments in JavaScript and C++, but the syntaxes are 99% incompatible anyway.  I've made peace with semicolon as the comment character years ago, so desiring // for comments isn't an issue for me anymore.</p>
<p>If we wanted to bake the behavior into path dispatch, we could glue it onto the APPEND:</p>
<pre><code>thing: append// [[a b c] &lt;d&gt; /dup 2]
</code></pre>
<p>But, that makes it more built in to path dispatch (which is undesirable) and I don't think it looks as good.</p>
<p>I'm leaning a little more to liking this than the left arrow, because the arrow is kind of "noisy" as symbols go...and the idea that it's a meaningful "direction of flow" is a bit forced.</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/6</link>
        <pubDate>Sun, 05 Jun 2022 07:38:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-6</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="IngoHohmann" data-post="4" data-topic="1834">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I think it's worth trying.<br>
^-- <em>(RE: using <code>&lt;-</code> as infix quoting APPLY)</em></p>
</blockquote>
</aside>
<p>I've been giving it a shot, and trying out other ideas too.</p>
<p>I tried colon, which looks pretty good in isolation:</p>
<pre><code>&gt;&gt; append : [[a b c] &lt;d&gt; /dup 2]
== [a b c &lt;d&gt; &lt;d&gt;]

&gt;&gt; append/only : [[a b c] [e f] /dup 2]
== [a b c [e f] [e f]]
</code></pre>
<p>But it kind of gets lost in the noise of all the other usages of colon:</p>
<pre><code>thing: append : [series :value]
</code></pre>
<p>For most anything you'd put in that position, it struggles with the question of "why would it mean APPLY".  Even if &amp; wasn't hideous (and it is), there's no real tie-in that it has to other uses of &amp; we might imagine...so having it do function application just looks random:</p>
<pre><code>thing: append &amp; [series :value]
</code></pre>
<p>What <strong><code>&lt;-</code></strong> has going for it is that <strong><code>-&gt;</code></strong> is the lambda function generator.  So it looks like it's in the family of "function things".  Pointing right creates a function, pointing left applies it.</p>
<pre><code>&gt;&gt; (x -&gt; [print [x + 20]]) &lt;- [1000]
== 1020
</code></pre>
<p>So I think it's basically the best option.  But...again...configurable for those who want to think differently!</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/5</link>
        <pubDate>Thu, 02 Jun 2022 00:38:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-5</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="/t/design-issues-for-new-apply/1406/4">Design Issues for New APPLY</a></p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/2</link>
        <pubDate>Wed, 01 Jun 2022 22:02:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-2</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Imagine if we let <strong><code>&lt;-</code></strong> be an infix operator...taking the name of the function to apply on the left, and a block on the right:</p>
</blockquote>
<p>I think it's worth trying.</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/4</link>
        <pubDate>Fri, 10 Sep 2021 11:14:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-4</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1406">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/design-issues-for-new-apply/1406/1">Design Issues for New APPLY</a>
</div>
<blockquote>
<p>It's time to bring back APPLY</p>
</blockquote>
</aside>
<p>...and by *"it's time" I apparently meant <em>"within the next year, maybe"</em>...</p>
<p>But better late than never, right?  It's in!</p>
<h2>Refinements Can be Provided In Any Order</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
[a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
[a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

[a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
[a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]
</code></pre>
<h2>Any Parameter (Not Just Refinements) Can Be Used By Name</h2>
<p>Once a parameter has been supplied by name, it is no longer considered for consuming positionally.</p>
<pre><code>[a b c d e] = apply :append [/series [a b c] /value [d e]]
[a b c d e] = apply :append [/value [d e] /series [a b c]]

[a b c d e] = apply :append [/series [a b c] [d e]]
[a b c d e] = apply :append [/value [d e] [a b c]]
</code></pre>
<h2>Commas Are Ok So Long As They Are Interstitial</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c], [d e], /dup 2]
[a b c d e d e] = apply :append [/dup 2, [a b c] [d e]]

&gt;&gt; apply :append [/dup, 2 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<h2>Giving Too Many Arguments Is An Error</h2>
<pre><code>&gt;&gt; apply :append [[a b c] [d e] [f g]]
** Script Error: Too many values in processed argument block of APPLY.
</code></pre>
<h2>Refinements Must Be Followed By A Non-Refinement</h2>
<pre><code>&gt;&gt; apply :append [/dup /part 1 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<p>But you can pass refinements as arguments to refinements...just use a quote!</p>
<pre><code>&gt;&gt; tester: func [/refine [any-value!]] [refine]

&gt;&gt; apply :tester [/refine '/ta-da!]
== /ta-da!
</code></pre>
<h2>No-Arg Refinements Permit LOGIC! But Set NULL or <code>#</code>
</h2>
<p>Remember: <em>the DO FRAME! mechanics do not change anything, besides ~unset~ isotopes being turned to NULLs.</em>  So if a refinement doesn't take an argument, <a href="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735">the only legal values for that refinement in the frame are # and NULL</a>.</p>
<p>But APPLY isn't DO FRAME!.  It's a higher level thing that builds a frame from the values you supply, and then has an opportunity to look over them before running DO FRAME!.  So if it sees you gave a #[true] or a #[false] to a refinement with no argument, it will adjust it appropriately.</p>
<pre><code>&gt;&gt; testme: func [/refine] [refine]

# = apply :testme [/refine #]
null = apply :testme [/refine null]

# = apply :testme [/refine true]
null = apply :testme [/refine false]
</code></pre>
<h2>^META Arguments Are Also Accounted For</h2>
<p>For those following <a href="https://forum.rebol.info/t/default-values-and-make-frame/1412">the profound design points</a>, the DO FRAME! mechanic does not allow you to have isotopes in frame slots.  The way you get isotopes through to a function is through meta parameters, and by convention those parameters are quoted or otherwise "leveled up" into non-isotope status.</p>
<p>But as another convenience, APPLY detects when a parameter is meta and will level it up...because the low-level frame mechanics aren't allowed to editorialize:</p>
<pre><code>&gt;&gt; non-detector: func [arg] [arg]  ; not a meta argument, isotopes illegal

&gt;&gt; apply :non-detector [~baddie~]
** Script Error: non-detector needs arg as ^META for ~baddie~ isotope

&gt;&gt; detector: func [^arg] [arg]

&gt;&gt; apply :detector [~baddie~]
== ~baddie~
</code></pre>
<p><strong>I know not everyone has gotten their heads around isotopes yet, but they are critical... this stuff was the missing link to making it all gel.</strong></p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=9" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=9" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=9" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:"></p>
<h1>What's Next?!  Making It Easier To Use!</h1>
<p>Imagine if we let <strong><code>&lt;-</code></strong> be an infix operator...taking the name of the function to apply on the left, and a block on the right:</p>
<pre><code>&lt;-: enfix func [
    'action [word! tuple! path! group!]
    args [block]
][
    apply (if group? action [do action] else [get action]) args
]
</code></pre>
<p>It's rather slick!</p>
<pre><code>&gt;&gt; append &lt;- [[a b c] &lt;d&gt; /dup 2]
== [a b c &lt;d&gt; &lt;d&gt;]

&gt;&gt; append/only &lt;- [[a b c] [e f] /dup 2]
== [a b c [e f] [e f]]
</code></pre>
<p>Of course, you can mix it up with your own freaky ideas, even variadic ones!</p>
<pre><code>&gt;&gt; $: enfixed func ['name [word!] 'args [&lt;variadic&gt; &lt;end&gt; any-value!]] [
    args: make block! args
    apply :(get name) args
]

&gt;&gt; data: [a b c]

&gt;&gt; (append $ /dup 2, data [d e])

&gt;&gt; print ["data is" mold data]
data is [a b c d e d e]
</code></pre>
<p>The choice is up to you.  Which is what all this is about!</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/1</link>
        <pubDate>Tue, 17 Aug 2021 07:58:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-1</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
  </channel>
</rss>
