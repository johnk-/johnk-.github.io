<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>APPLY II: The Revenge!</title>
    <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834</link>
    <description>I&#39;d said *&quot;It&#39;s time to bring back APPLY&quot;*.  

...and by *&quot;it&#39;s time&quot;* I apparently meant *&quot;within the next year, maybe?&quot;*...

But better late than never, right?  It&#39;s in!

## Refinements Can be Provided In Any Order

    [a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
    [a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
    [a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

    [a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
    [a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]

## Any Parameter (Not Just Refinements) Can Be Used By Name

Once a parameter has been supplied by name, it is no longer considered for consuming positionally.

    [a b c d e] = apply :append [/series [a b c] /value [d e]]
    [a b c d e] = apply :append [/value [d e] /series [a b c]]

    [a b c d e] = apply :append [/series [a b c] [d e]]
    [a b c d e] = apply :append [/value [d e] [a b c]]

## Commas Are Ok So Long As They Are Interstitial

    [a b c d e d e] = apply :append [[a b c], [d e], /dup 2]
    [a b c d e d e] = apply :append [/dup 2, [a b c] [d e]]

    &gt;&gt; apply :append [/dup, 2 [a b c] [d e]]
    ** Script Error: end was reached while trying to set /dup

## Giving Too Many Arguments Defaults To An Error

    &gt;&gt; apply :append [[a b c] [d e] [f g]]
    ** Script Error: Too many values in processed argument block of APPLY.

If you want, you can ask it to /RELAX

    &gt;&gt; apply/relax :append [[a b c] [d e] [f g]]
    == [a b c [d e]] 

## Refinements Must Be Followed By A Non-Refinement

    &gt;&gt; apply :append [/dup /part 1 [a b c] [d e]]
    ** Script Error: end was reached while trying to set /dup

But you can pass refinements as arguments to refinements...just use a quote!

    &gt;&gt; tester: func [/refine [any-value!]] [refine]

    &gt;&gt; apply :tester [/refine &#39;/ta-da!]
    == /ta-da!

## No-Arg Refinements Permit OKAY and NULL

Remember: *the EVAL FRAME! mechanics do not change anything.*  So if a refinement doesn&#39;t take an argument, [the only legal values for that refinement in the frame are OKAY and NULL](https://forum.rebol.info/t/why-no-argument-refinements-are-okay-or-null/735).

    &gt;&gt; testme: func [/refine] [refine]

    &gt;&gt; apply :testme [/refine okay]
    == ~okay~  ; anti

    &gt;&gt; apply :testme [/refine null]
    == ~null~  ; anti

    &gt;&gt; apply :testme [/refine 1020]
    ** Error: No-Arg refinements can only be ~okay~ and ~null~ antiforms

## ^META Arguments Are Accounted For

APPLY detects when a parameter is meta and will level it up...because the low-level frame mechanics aren&#39;t allowed to editorialize:

    &gt;&gt; non-detector: func [arg] [arg]  ; not a meta argument, isotopes illegal

    &gt;&gt; apply :non-detector [pack [10 20]]
    == 10

    &gt;&gt; detector: func [^arg] [arg]

    &gt;&gt; apply :detector [pack [10 20]]
    == ~[&#39;10 &#39;20]~

**I know not everyone has gotten their heads around isotopes yet, but they are critical... this stuff was the missing link to making it all gel.**

:dizzy: :dizzy: :dizzy:</description>
    
    <lastBuildDate>Thu, 12 Sep 2024 14:58:31 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>6 posts were split to a new topic: <a href="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195">Naming The Infix APPLY Operator</a></p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/3</link>
        <pubDate>Tue, 20 Aug 2024 06:13:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-3</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/critiquing-reds-updated-apply-implementation/2194">Critiquing Red's Updated APPLY Implementation</a></p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/8</link>
        <pubDate>Tue, 20 Aug 2024 06:05:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-8</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>And now APPLY has an infix shorthand...</p>
<h2>
<a name="meet-the-operator-1" class="anchor" href="https://forum.rebol.info#meet-the-operator-1"></a>Meet The <strong><code>//</code></strong> Operator!</h2>
<p>The choice to use slashes for the operator became obvious, now that <strong><a href="https://forum.rebol.info/t/big-alien-proposal-word-runs-functions/1905/2"><code>/WORD</code> Runs Functions</a></strong> <em>(and <code>:WORD</code> is taking over refinement!)</em></p>
<pre><code class="lang-plaintext">&gt;&gt; append // [[a b c] &lt;d&gt; :dup 2]
== [a b c &lt;d&gt; &lt;d&gt;]

&gt;&gt; append // [:dup 2 [a b c] spread [e f]]
== [a b c e f e f]

&gt;&gt; append:dup // [[a b c] [e f] 2]
== [a b c [e f] [e f]]
</code></pre>
<p>It's strange but also it's a mixture of heavy and light, as a kind of "joiner" or concatenator, almost as if you were sticking the things together into a single thought.</p>
<pre><code>append//[[a b c] &lt;d&gt; :dup 2]
</code></pre>
<p>I know it's not perfect, but nothing will be.  I don't like an APPLY operator that sits to the left and quotes:</p>
<pre><code>apply append [[a b c] &lt;d&gt; :dup 2]  ; !!! bad
</code></pre>
<p>Because that makes it look too much like the BLOCK! is the first argument to APPEND.  So you really have to do APPLY with an inert form:</p>
<pre><code>apply get $append [[a b c] &lt;d&gt; :dup 2]

apply append. [[a b c] &lt;d&gt; :dup 2]
</code></pre>
<p>So if no GET-WORD! is to be used and quoting is in play, there has to be something learnable and infix to jolt the flow.  I've tried a <strong>lot</strong> of things at this point, this feels like the logical conclusion.</p>
<pre><code>append // [[a b c] &lt;d&gt; :dup 2]
</code></pre>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/9</link>
        <pubDate>Tue, 20 Aug 2024 03:31:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-9</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'd said <em>"It's time to bring back APPLY"</em>.</p>
<p>...and by <em>"it's time"</em> I apparently meant <em>"within the next year, maybe?"</em>...</p>
<p>But better late than never, right?  It's in!</p>
<h2>
<a name="refinements-can-be-provided-in-any-order-1" class="anchor" href="https://forum.rebol.info#refinements-can-be-provided-in-any-order-1"></a>Refinements Can be Provided In Any Order</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
[a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
[a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

[a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
[a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]
</code></pre>
<h2>
<a name="any-parameter-not-just-refinements-can-be-used-by-name-2" class="anchor" href="https://forum.rebol.info#any-parameter-not-just-refinements-can-be-used-by-name-2"></a>Any Parameter (Not Just Refinements) Can Be Used By Name</h2>
<p>Once a parameter has been supplied by name, it is no longer considered for consuming positionally.</p>
<pre><code>[a b c d e] = apply :append [/series [a b c] /value [d e]]
[a b c d e] = apply :append [/value [d e] /series [a b c]]

[a b c d e] = apply :append [/series [a b c] [d e]]
[a b c d e] = apply :append [/value [d e] [a b c]]
</code></pre>
<h2>
<a name="commas-are-ok-so-long-as-they-are-interstitial-3" class="anchor" href="https://forum.rebol.info#commas-are-ok-so-long-as-they-are-interstitial-3"></a>Commas Are Ok So Long As They Are Interstitial</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c], [d e], /dup 2]
[a b c d e d e] = apply :append [/dup 2, [a b c] [d e]]

&gt;&gt; apply :append [/dup, 2 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<h2>
<a name="giving-too-many-arguments-defaults-to-an-error-4" class="anchor" href="https://forum.rebol.info#giving-too-many-arguments-defaults-to-an-error-4"></a>Giving Too Many Arguments Defaults To An Error</h2>
<pre><code>&gt;&gt; apply :append [[a b c] [d e] [f g]]
** Script Error: Too many values in processed argument block of APPLY.
</code></pre>
<p>If you want, you can ask it to /RELAX</p>
<pre><code>&gt;&gt; apply/relax :append [[a b c] [d e] [f g]]
== [a b c [d e]] 
</code></pre>
<h2>
<a name="refinements-must-be-followed-by-a-non-refinement-5" class="anchor" href="https://forum.rebol.info#refinements-must-be-followed-by-a-non-refinement-5"></a>Refinements Must Be Followed By A Non-Refinement</h2>
<pre><code>&gt;&gt; apply :append [/dup /part 1 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<p>But you can pass refinements as arguments to refinements...just use a quote!</p>
<pre><code>&gt;&gt; tester: func [/refine [any-value!]] [refine]

&gt;&gt; apply :tester [/refine '/ta-da!]
== /ta-da!
</code></pre>
<h2>
<a name="no-arg-refinements-permit-okay-and-null-6" class="anchor" href="https://forum.rebol.info#no-arg-refinements-permit-okay-and-null-6"></a>No-Arg Refinements Permit OKAY and NULL</h2>
<p>Remember: <em>the EVAL FRAME! mechanics do not change anything.</em>  So if a refinement doesn't take an argument, <a href="https://forum.rebol.info/t/why-no-argument-refinements-are-okay-or-null/735">the only legal values for that refinement in the frame are OKAY and NULL</a>.</p>
<pre><code>&gt;&gt; testme: func [/refine] [refine]

&gt;&gt; apply :testme [/refine okay]
== ~okay~  ; anti

&gt;&gt; apply :testme [/refine null]
== ~null~  ; anti

&gt;&gt; apply :testme [/refine 1020]
** Error: No-Arg refinements can only be ~okay~ and ~null~ antiforms
</code></pre>
<h2>
<a name="meta-arguments-are-accounted-for-7" class="anchor" href="https://forum.rebol.info#meta-arguments-are-accounted-for-7"></a>^META Arguments Are Accounted For</h2>
<p>APPLY detects when a parameter is meta and will level it up...because the low-level frame mechanics aren't allowed to editorialize:</p>
<pre><code>&gt;&gt; non-detector: func [arg] [arg]  ; not a meta argument, isotopes illegal

&gt;&gt; apply :non-detector [pack [10 20]]
== 10

&gt;&gt; detector: func [^arg] [arg]

&gt;&gt; apply :detector [pack [10 20]]
== ~['10 '20]~
</code></pre>
<p><strong>I know not everyone has gotten their heads around isotopes yet, but they are critical... this stuff was the missing link to making it all gel.</strong></p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=12" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=12" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=12" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/1</link>
        <pubDate>Tue, 17 Aug 2021 07:58:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-1</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
  </channel>
</rss>
