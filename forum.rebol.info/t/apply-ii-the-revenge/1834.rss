<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>APPLY II: The Revenge!</title>
    <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834</link>
    <description>[quote=&quot;hostilefork, post:1, topic:1406&quot;]
It&#39;s time to bring back APPLY
[/quote]

...and by *&quot;it&#39;s time&quot; I apparently meant *&quot;within the next year, maybe&quot;*...

But better late than never, right?  It&#39;s in!

## Refinements Can be Provided In Any Order

    [a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
    [a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
    [a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

    [a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
    [a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]

## Any Parameter (Not Just Refinements) Can Be Used By Name

Once a parameter has been supplied by name, it is no longer considered for consuming positionally.

    [a b c d e] = apply :append [/series [a b c] /value [d e]]
    [a b c d e] = apply :append [/value [d e] /series [a b c]]

    [a b c d e] = apply :append [/series [a b c] [d e]]
    [a b c d e] = apply :append [/value [d e] [a b c]]

## Commas Are Ok So Long As They Are Interstitial

    [a b c d e d e] = apply :append [[a b c], [d e], /dup 2]
    [a b c d e d e] = apply :append [/dup 2, [a b c] [d e]]

    &gt;&gt; apply :append [/dup, 2 [a b c] [d e]]
    ** Script Error: end was reached while trying to set /dup

## Giving Too Many Arguments Is An Error

    &gt;&gt; apply :append [[a b c] [d e] [f g]]
    ** Script Error: Too many values in processed argument block of APPLY.

## Refinements Must Be Followed By A Non-Refinement

    &gt;&gt; apply :append [/dup /part 1 [a b c] [d e]]
    ** Script Error: end was reached while trying to set /dup

But you can pass refinements as arguments to refinements...just use a quote!

    &gt;&gt; tester: func [/refine [any-value!]] [refine]

    &gt;&gt; apply :tester [/refine &#39;/ta-da!]
    == /ta-da!

## No-Arg Refinements Permit LOGIC! But Set NULL or `#`

Remember: *the DO FRAME! mechanics do not change anything, besides ~unset~ isotopes being turned to NULLs.*  So if a refinement doesn&#39;t take an argument, [the only legal values for that refinement in the frame are # and NULL](https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735).

But APPLY isn&#39;t DO FRAME!.  It&#39;s a higher level thing that builds a frame from the values you supply, and then has an opportunity to look over them before running DO FRAME!.  So if it sees you gave a #[true] or a #[false] to a refinement with no argument, it will adjust it appropriately.

    &gt;&gt; testme: func [/refine] [refine]

    # = apply :testme [/refine #]
    null = apply :testme [/refine null]

    # = apply :testme [/refine true]
    null = apply :testme [/refine false]

## ^META Arguments Are Also Accounted For

For those following [the profound design points](https://forum.rebol.info/t/default-values-and-make-frame/1412), the DO FRAME! mechanic does not allow you to have isotopes in frame slots.  The way you get isotopes through to a function is through meta parameters, and by convention those parameters are quoted or otherwise &quot;leveled up&quot; into non-isotope status.

But as another convenience, APPLY detects when a parameter is meta and will level it up...because the low-level frame mechanics aren&#39;t allowed to editorialize:

    &gt;&gt; non-detector: func [arg] [arg]  ; not a meta argument, isotopes illegal

    &gt;&gt; apply :non-detector [~baddie~]
    ** Script Error: non-detector needs arg as ^META for ~baddie~ isotope

    &gt;&gt; detector: func [^arg] [arg]

    &gt;&gt; apply :detector [~baddie~]
    == ~baddie~

**I know not everyone has gotten their heads around isotopes yet, but they are critical... this stuff was the missing link to making it all gel.**

:dizzy: :dizzy: :dizzy:

# What&#39;s Next?!  Making It Easier To Use!

Imagine if we let **`&lt;-`** be an infix operator...taking the name of the function to apply on the left, and a block on the right:

    &lt;-: enfix func [
        &#39;action [word! tuple! path! group!]
        args [block]
    ][
        apply (if group? action [do action] else [get action]) args
    ]

It&#39;s rather slick!

    &gt;&gt; append &lt;- [[a b c] &lt;d&gt; /dup 2]
    == [a b c &lt;d&gt; &lt;d&gt;]

    &gt;&gt; append/only &lt;- [[a b c] [e f] /dup 2]
    == [a b c [e f] [e f]]

Of course, you can mix it up with your own freaky ideas, even variadic ones!

    &gt;&gt; $: enfixed func [&#39;name [word!] &#39;args [&lt;variadic&gt; &lt;end&gt; any-value!]] [
        args: make block! args
        apply :(get name) args
    ]

    &gt;&gt; data: [a b c]

    &gt;&gt; (append $ /dup 2, data [d e])

    &gt;&gt; print [&quot;data is&quot; mold data]
    data is [a b c d e d e]

The choice is up to you.  Which is what all this is about!</description>
    
    <lastBuildDate>Wed, 31 Aug 2022 02:06:54 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Mulling this has led me to a kind of seemingly inevitable conclusion...</p>
<p><strong>I think this should be the behavior of terminal slash</strong></p>
<p>Here it is demonstrated with one of rebmake's <em>"that-sure-is-a-lot-of-refinements"</em> functions:</p>
<pre><code>add-project-flags/ [
    ext-objlib
    /I app-config.includes
    /D compose [
        (either ext.mode = &lt;builtin&gt; ["REB_API"] ["REB_EXT"])
        (spread app-config.definitions)
    ]
    /c app-config.cflags
    /O app-config.optimization
    /g app-config.debug
]
</code></pre>
<p><strong>The slash marks a kind of barrier between the function and its block argument.</strong>   It's like it's saying <em>"whoa, hold up now, you're not actually taking that BLOCK! as a parameter!"</em></p>
<ul>
<li>
<p>This avoids what's upsetting about a quoting <strong>apply add-project-flags [...]</strong> syntax.  It may "look" nice on the surface, but you have to scan backwards to see "oh, there's an APPLY back there"</p>
</li>
<li>
<p>Non-quoting <strong>apply :add-project-flags [...]</strong> has the reverse problem: you think application is being <em>suppressed</em> and have to scan backwards to the APPLY and see "oh, no it's not, it's actually running".</p>
</li>
</ul>
<p>Terminal slash kills two birds with one stone: it keeps things in the range of function application (e.g. APPLY/ONLY has a slash and that's connoted with application), and gives the visual separation we want at the location we want it.</p>
<p>This bakes it into the evaluator a bit more (though I'm proposing evaluator hooks that parallel UPARSE's combinator MAP! to permit varying it).</p>
<p>But the proof of concept that you could write a function doing it has been done.  You can write this form of APPLY yourself with FRAME!, and design other APPLY-like operators.  Just because you <em>can</em> write an apply operator doesn't mean that the evaluator has to avoid giving a foundational notation to this very critical behavior.</p>
<p>This will mean rethinking the other applications for terminal slash that are in the mix right now...</p>
<h2>In The Evaluator, FOO/ Has Been A "This is a Function" Annotation</h2>
<p>I had it so that if you terminated something with a slash it would run it...but warn you if it wasn't an action:</p>
<pre><code> &gt;&gt; print/ "Hello"
 Hello

 &gt;&gt; mystery: 10

 &gt;&gt; mystery/ "Hello"
 ** Error: MYSTERY is not an action!, can't run with terminal /
</code></pre>
<p>That's been mostly a means of commenting.  A parallel concept I had was that you could ensure things where actions by assigning to paths with terminal slash:</p>
<pre><code>&gt;&gt; x: 10

&gt;&gt; foo/: :print
== #[action! [line]]

&gt;&gt; bar/: x
** Error: Can't assign non-ACTION! using terminal slash
</code></pre>
<h2>Terminal Slash Has Also Retriggered ACTION! Values</h2>
<p>Today, this behavior is useful with GROUP!</p>
<pre><code> &gt;&gt; (either true [:print] [:elide])
 == #[action! [line]]

 &gt;&gt; (either true [:print] [:elide])/ "Hello"
 Hello
</code></pre>
<p>This becomes more useful with the ACTION!-vs-isotopic-ACTION! distinction.  That's because plain WORD!s referring to actions wouldn't run in the evaluator.  So <strong>foo/</strong> could be a shorthand for <strong>run foo</strong> when FOO contained a plain  inert action.</p>
<p>But...here's a thought: you probably really should be enclosing things in some kind of array anyway, if you're getting a function value somewhere:</p>
<pre><code> dump-block: func [block [block!] dumper [action!]] [
     for-each item block [
         print "Dumping item..."
         dumper item  ; what if dumper doesn't take exactly 1 argument?
         print "Item was dumped."
     ]
 ]
</code></pre>
<p>When reading some of BrianH's code when first looking at Rebol, I'd notice in cases like this the calls would be in GROUP!s, e.g. <strong><code>(dumper item)</code></strong>.  It would quarantine the function.. and sometimes it would take advantage of the fact that if the function took fewer parameters, that would be tolerated (saying it just wasn't interested in those).</p>
<p>But using <strong><code>dumper/ [item]</code></strong> instead of <strong><code>(dumper item)</code></strong> has advantages, such as that you won't be impacted by parameter conventions like quoting.  So there's no way for the function you are calling to get the name of the variable you're passing--for instance.</p>
<h2>In UPARSE, a FOO/ Has Been Running the <a href="https://forum.rebol.info/t/if-action-combinators-dont-impress-i-dont-know-what-will/1608">ACTION! combinator</a>
</h2>
<p>The implementation is a bit convoluted at the moment.  But that it works at all as a usermode-implemented construct is pretty impressive:</p>
<pre><code>  &gt;&gt; parse [1 2 3] [collect some [
       keep negate/ integer!
  ]]
   == [-1 -2 -3]
</code></pre>
<p>This is not necessarily contentious--given that you are free to kick over into a GROUP! if you want a function invocation that doesn't draw arguments out of the parse stream.  But it could also be done by a RUN combinator that just picked up whatever came next.</p>
<pre><code>  &gt;&gt; parse [1 2 3] [collect some [
       keep run negate integer!
  ]]
   == [-1 -2 -3]
</code></pre>
<p>And we could carry over the apply behavior in case you wanted a midstream application:</p>
<pre><code>  &gt;&gt; parse [[a b] 2 "hello"] [
         series: &lt;any&gt;, n: integer!, append/ [series [c d] /dup n]]  text!
     ]
  == "hello"

  &gt;&gt; series
  == [a b [c d] [c d]]
</code></pre>
<h2>At Time Of Writing, Terminal-Slash-APPLY Looks Like a Winner</h2>
<p>I found that <strong><code>&lt;-</code></strong> was no good for me, nor was <strong><code>//</code></strong>.</p>
<p>I think the other purposes terminal slash has been used for can be rethought, certainly for such a big payoff.</p>
<p>There'd still be the option of APPLY if you want it, but I'm now pretty firm that it shouldn't quote.</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/7</link>
        <pubDate>Tue, 30 Aug 2022 23:12:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-7</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="IngoHohmann" data-post="4" data-topic="1834">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>I think it's worth trying.<br>
^-- <em>(RE: using <code>&lt;-</code> as infix quoting APPLY)</em></p>
</blockquote>
</aside>
<p>I've been giving it a shot, and trying out other ideas too.</p>
<p>I tried colon, which looks pretty good in isolation:</p>
<pre><code>&gt;&gt; append : [[a b c] &lt;d&gt; /dup 2]
== [a b c &lt;d&gt; &lt;d&gt;]

&gt;&gt; append/only : [[a b c] [e f] /dup 2]
== [a b c [e f] [e f]]
</code></pre>
<p>But it kind of gets lost in the noise of all the other usages of colon:</p>
<pre><code>thing: append : [series :value]
</code></pre>
<p>For most anything you'd put in that position, it struggles with the question of "why would it mean APPLY".  Even if &amp; wasn't hideous (and it is), there's no real tie-in that it has to other uses of &amp; we might imagine...so having it do function application just looks random:</p>
<pre><code>thing: append &amp; [series :value]
</code></pre>
<p>What <strong><code>&lt;-</code></strong> has going for it is that <strong><code>-&gt;</code></strong> is the lambda function generator.  So it looks like it's in the family of "function things".  Pointing right creates a function, pointing left applies it.</p>
<pre><code>&gt;&gt; (x -&gt; [print [x + 20]]) &lt;- [1000]
== 1020
</code></pre>
<p>So I think it's basically the best option.  But...again...configurable for those who want to think differently!</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/5</link>
        <pubDate>Thu, 02 Jun 2022 00:38:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-5</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="https://forum.rebol.info/t/design-issues-for-new-apply/1406/4">Design Issues for New APPLY</a></p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/2</link>
        <pubDate>Wed, 01 Jun 2022 22:02:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-2</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>Imagine if we let <strong><code>&lt;-</code></strong> be an infix operator...taking the name of the function to apply on the left, and a block on the right:</p>
</blockquote>
<p>I think it's worth trying.</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/4</link>
        <pubDate>Fri, 10 Sep 2021 11:14:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-4</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1406">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/design-issues-for-new-apply/1406/1">Design Issues for New APPLY</a>
</div>
<blockquote>
<p>It's time to bring back APPLY</p>
</blockquote>
</aside>
<p>...and by *"it's time" I apparently meant <em>"within the next year, maybe"</em>...</p>
<p>But better late than never, right?  It's in!</p>
<h2>Refinements Can be Provided In Any Order</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
[a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
[a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

[a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
[a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]
</code></pre>
<h2>Any Parameter (Not Just Refinements) Can Be Used By Name</h2>
<p>Once a parameter has been supplied by name, it is no longer considered for consuming positionally.</p>
<pre><code>[a b c d e] = apply :append [/series [a b c] /value [d e]]
[a b c d e] = apply :append [/value [d e] /series [a b c]]

[a b c d e] = apply :append [/series [a b c] [d e]]
[a b c d e] = apply :append [/value [d e] [a b c]]
</code></pre>
<h2>Commas Are Ok So Long As They Are Interstitial</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c], [d e], /dup 2]
[a b c d e d e] = apply :append [/dup 2, [a b c] [d e]]

&gt;&gt; apply :append [/dup, 2 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<h2>Giving Too Many Arguments Is An Error</h2>
<pre><code>&gt;&gt; apply :append [[a b c] [d e] [f g]]
** Script Error: Too many values in processed argument block of APPLY.
</code></pre>
<h2>Refinements Must Be Followed By A Non-Refinement</h2>
<pre><code>&gt;&gt; apply :append [/dup /part 1 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<p>But you can pass refinements as arguments to refinements...just use a quote!</p>
<pre><code>&gt;&gt; tester: func [/refine [any-value!]] [refine]

&gt;&gt; apply :tester [/refine '/ta-da!]
== /ta-da!
</code></pre>
<h2>No-Arg Refinements Permit LOGIC! But Set NULL or <code>#</code>
</h2>
<p>Remember: <em>the DO FRAME! mechanics do not change anything, besides ~unset~ isotopes being turned to NULLs.</em>  So if a refinement doesn't take an argument, <a href="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735">the only legal values for that refinement in the frame are # and NULL</a>.</p>
<p>But APPLY isn't DO FRAME!.  It's a higher level thing that builds a frame from the values you supply, and then has an opportunity to look over them before running DO FRAME!.  So if it sees you gave a #[true] or a #[false] to a refinement with no argument, it will adjust it appropriately.</p>
<pre><code>&gt;&gt; testme: func [/refine] [refine]

# = apply :testme [/refine #]
null = apply :testme [/refine null]

# = apply :testme [/refine true]
null = apply :testme [/refine false]
</code></pre>
<h2>^META Arguments Are Also Accounted For</h2>
<p>For those following <a href="https://forum.rebol.info/t/default-values-and-make-frame/1412">the profound design points</a>, the DO FRAME! mechanic does not allow you to have isotopes in frame slots.  The way you get isotopes through to a function is through meta parameters, and by convention those parameters are quoted or otherwise "leveled up" into non-isotope status.</p>
<p>But as another convenience, APPLY detects when a parameter is meta and will level it up...because the low-level frame mechanics aren't allowed to editorialize:</p>
<pre><code>&gt;&gt; non-detector: func [arg] [arg]  ; not a meta argument, isotopes illegal

&gt;&gt; apply :non-detector [~baddie~]
** Script Error: non-detector needs arg as ^META for ~baddie~ isotope

&gt;&gt; detector: func [^arg] [arg]

&gt;&gt; apply :detector [~baddie~]
== ~baddie~
</code></pre>
<p><strong>I know not everyone has gotten their heads around isotopes yet, but they are critical... this stuff was the missing link to making it all gel.</strong></p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=9" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=9" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=9" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:"></p>
<h1>What's Next?!  Making It Easier To Use!</h1>
<p>Imagine if we let <strong><code>&lt;-</code></strong> be an infix operator...taking the name of the function to apply on the left, and a block on the right:</p>
<pre><code>&lt;-: enfix func [
    'action [word! tuple! path! group!]
    args [block]
][
    apply (if group? action [do action] else [get action]) args
]
</code></pre>
<p>It's rather slick!</p>
<pre><code>&gt;&gt; append &lt;- [[a b c] &lt;d&gt; /dup 2]
== [a b c &lt;d&gt; &lt;d&gt;]

&gt;&gt; append/only &lt;- [[a b c] [e f] /dup 2]
== [a b c [e f] [e f]]
</code></pre>
<p>Of course, you can mix it up with your own freaky ideas, even variadic ones!</p>
<pre><code>&gt;&gt; $: enfixed func ['name [word!] 'args [&lt;variadic&gt; &lt;end&gt; any-value!]] [
    args: make block! args
    apply :(get name) args
]

&gt;&gt; data: [a b c]

&gt;&gt; (append $ /dup 2, data [d e])

&gt;&gt; print ["data is" mold data]
data is [a b c d e d e]
</code></pre>
<p>The choice is up to you.  Which is what all this is about!</p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/1</link>
        <pubDate>Tue, 17 Aug 2021 07:58:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-1</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
  </channel>
</rss>
