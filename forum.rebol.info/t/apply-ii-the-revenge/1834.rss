<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>APPLY II: The Revenge!</title>
    <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834</link>
    <description>[quote=&quot;hostilefork, post:1, topic:1406&quot;]
It&#39;s time to bring back APPLY
[/quote]

...and by *&quot;it&#39;s time&quot;* I apparently meant *&quot;within the next year, maybe&quot;*...

But better late than never, right?  It&#39;s in!

## Refinements Can be Provided In Any Order

    [a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
    [a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
    [a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

    [a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
    [a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]

## Any Parameter (Not Just Refinements) Can Be Used By Name

Once a parameter has been supplied by name, it is no longer considered for consuming positionally.

    [a b c d e] = apply :append [/series [a b c] /value [d e]]
    [a b c d e] = apply :append [/value [d e] /series [a b c]]

    [a b c d e] = apply :append [/series [a b c] [d e]]
    [a b c d e] = apply :append [/value [d e] [a b c]]

## Commas Are Ok So Long As They Are Interstitial

    [a b c d e d e] = apply :append [[a b c], [d e], /dup 2]
    [a b c d e d e] = apply :append [/dup 2, [a b c] [d e]]

    &gt;&gt; apply :append [/dup, 2 [a b c] [d e]]
    ** Script Error: end was reached while trying to set /dup

## Giving Too Many Arguments Is An Error

    &gt;&gt; apply :append [[a b c] [d e] [f g]]
    ** Script Error: Too many values in processed argument block of APPLY.

## Refinements Must Be Followed By A Non-Refinement

    &gt;&gt; apply :append [/dup /part 1 [a b c] [d e]]
    ** Script Error: end was reached while trying to set /dup

But you can pass refinements as arguments to refinements...just use a quote!

    &gt;&gt; tester: func [/refine [any-value!]] [refine]

    &gt;&gt; apply :tester [/refine &#39;/ta-da!]
    == /ta-da!

## No-Arg Refinements Permit LOGIC! But Set NULL or `#`

Remember: *the DO FRAME! mechanics do not change anything, besides ~unset~ isotopes being turned to NULLs.*  So if a refinement doesn&#39;t take an argument, [the only legal values for that refinement in the frame are # and NULL](https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735).

But APPLY isn&#39;t DO FRAME!.  It&#39;s a higher level thing that builds a frame from the values you supply, and then has an opportunity to look over them before running DO FRAME!.  So if it sees you gave a #[true] or a #[false] to a refinement with no argument, it will adjust it appropriately.

    &gt;&gt; testme: func [/refine] [refine]

    # = apply :testme [/refine #]
    null = apply :testme [/refine null]

    # = apply :testme [/refine true]
    null = apply :testme [/refine false]

## ^META Arguments Are Also Accounted For

For those following [the profound design points](https://forum.rebol.info/t/default-values-and-make-frame/1412), the DO FRAME! mechanic does not allow you to have isotopes in frame slots.  The way you get isotopes through to a function is through meta parameters, and by convention those parameters are quoted or otherwise &quot;leveled up&quot; into non-isotope status.

But as another convenience, APPLY detects when a parameter is meta and will level it up...because the low-level frame mechanics aren&#39;t allowed to editorialize:

    &gt;&gt; non-detector: func [arg] [arg]  ; not a meta argument, isotopes illegal

    &gt;&gt; apply :non-detector [~baddie~]
    ** Script Error: non-detector needs arg as ^META for ~baddie~ isotope

    &gt;&gt; detector: func [^arg] [arg]

    &gt;&gt; apply :detector [~baddie~]
    == ~baddie~

**I know not everyone has gotten their heads around isotopes yet, but they are critical... this stuff was the missing link to making it all gel.**

:dizzy: :dizzy: :dizzy:</description>
    
    <lastBuildDate>Tue, 20 Aug 2024 03:41:15 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>6 posts were split to a new topic: <a href="https://forum.rebol.info/t/naming-the-infix-apply-operator/2195">Naming The Infix APPLY Operator</a></p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/3</link>
        <pubDate>Tue, 20 Aug 2024 06:13:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-3</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/critiquing-reds-updated-apply-implementation/2194">Critiquing Red's Updated APPLY Implementation</a></p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/8</link>
        <pubDate>Tue, 20 Aug 2024 06:05:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-8</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
      <item>
        <title>APPLY II: The Revenge!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1406">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/design-issues-for-new-apply/1406/1">Design Issues for New APPLY</a>
</div>
<blockquote>
<p>It's time to bring back APPLY</p>
</blockquote>
</aside>
<p>...and by <em>"it's time"</em> I apparently meant <em>"within the next year, maybe"</em>...</p>
<p>But better late than never, right?  It's in!</p>
<h2>
<a name="refinements-can-be-provided-in-any-order-1" class="anchor" href="https://forum.rebol.info#refinements-can-be-provided-in-any-order-1"></a>Refinements Can be Provided In Any Order</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
[a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
[a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

[a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
[a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]
</code></pre>
<h2>
<a name="any-parameter-not-just-refinements-can-be-used-by-name-2" class="anchor" href="https://forum.rebol.info#any-parameter-not-just-refinements-can-be-used-by-name-2"></a>Any Parameter (Not Just Refinements) Can Be Used By Name</h2>
<p>Once a parameter has been supplied by name, it is no longer considered for consuming positionally.</p>
<pre><code>[a b c d e] = apply :append [/series [a b c] /value [d e]]
[a b c d e] = apply :append [/value [d e] /series [a b c]]

[a b c d e] = apply :append [/series [a b c] [d e]]
[a b c d e] = apply :append [/value [d e] [a b c]]
</code></pre>
<h2>
<a name="commas-are-ok-so-long-as-they-are-interstitial-3" class="anchor" href="https://forum.rebol.info#commas-are-ok-so-long-as-they-are-interstitial-3"></a>Commas Are Ok So Long As They Are Interstitial</h2>
<pre><code>[a b c d e d e] = apply :append [[a b c], [d e], /dup 2]
[a b c d e d e] = apply :append [/dup 2, [a b c] [d e]]

&gt;&gt; apply :append [/dup, 2 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<h2>
<a name="giving-too-many-arguments-is-an-error-4" class="anchor" href="https://forum.rebol.info#giving-too-many-arguments-is-an-error-4"></a>Giving Too Many Arguments Is An Error</h2>
<pre><code>&gt;&gt; apply :append [[a b c] [d e] [f g]]
** Script Error: Too many values in processed argument block of APPLY.
</code></pre>
<h2>
<a name="refinements-must-be-followed-by-a-non-refinement-5" class="anchor" href="https://forum.rebol.info#refinements-must-be-followed-by-a-non-refinement-5"></a>Refinements Must Be Followed By A Non-Refinement</h2>
<pre><code>&gt;&gt; apply :append [/dup /part 1 [a b c] [d e]]
** Script Error: end was reached while trying to set /dup
</code></pre>
<p>But you can pass refinements as arguments to refinements...just use a quote!</p>
<pre><code>&gt;&gt; tester: func [/refine [any-value!]] [refine]

&gt;&gt; apply :tester [/refine '/ta-da!]
== /ta-da!
</code></pre>
<h2>
<a name="no-arg-refinements-permit-logic-but-set-null-or-6" class="anchor" href="https://forum.rebol.info#no-arg-refinements-permit-logic-but-set-null-or-6"></a>No-Arg Refinements Permit LOGIC! But Set NULL or <code>#</code>
</h2>
<p>Remember: <em>the DO FRAME! mechanics do not change anything, besides ~unset~ isotopes being turned to NULLs.</em>  So if a refinement doesn't take an argument, <a href="https://forum.rebol.info/t/why-no-argument-refinements-are-blackhole-or-null/735">the only legal values for that refinement in the frame are # and NULL</a>.</p>
<p>But APPLY isn't DO FRAME!.  It's a higher level thing that builds a frame from the values you supply, and then has an opportunity to look over them before running DO FRAME!.  So if it sees you gave a #[true] or a #[false] to a refinement with no argument, it will adjust it appropriately.</p>
<pre><code>&gt;&gt; testme: func [/refine] [refine]

# = apply :testme [/refine #]
null = apply :testme [/refine null]

# = apply :testme [/refine true]
null = apply :testme [/refine false]
</code></pre>
<h2>
<a name="meta-arguments-are-also-accounted-for-7" class="anchor" href="https://forum.rebol.info#meta-arguments-are-also-accounted-for-7"></a>^META Arguments Are Also Accounted For</h2>
<p>For those following <a href="https://forum.rebol.info/t/default-values-and-make-frame/1412">the profound design points</a>, the DO FRAME! mechanic does not allow you to have isotopes in frame slots.  The way you get isotopes through to a function is through meta parameters, and by convention those parameters are quoted or otherwise "leveled up" into non-isotope status.</p>
<p>But as another convenience, APPLY detects when a parameter is meta and will level it up...because the low-level frame mechanics aren't allowed to editorialize:</p>
<pre><code>&gt;&gt; non-detector: func [arg] [arg]  ; not a meta argument, isotopes illegal

&gt;&gt; apply :non-detector [~baddie~]
** Script Error: non-detector needs arg as ^META for ~baddie~ isotope

&gt;&gt; detector: func [^arg] [arg]

&gt;&gt; apply :detector [~baddie~]
== ~baddie~
</code></pre>
<p><strong>I know not everyone has gotten their heads around isotopes yet, but they are critical... this stuff was the missing link to making it all gel.</strong></p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=12" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=12" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/dizzy.png?v=12" title=":dizzy:" class="emoji only-emoji" alt=":dizzy:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/apply-ii-the-revenge/1834/1</link>
        <pubDate>Tue, 17 Aug 2021 07:58:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1834-1</guid>
        <source url="https://forum.rebol.info/t/apply-ii-the-revenge/1834.rss">APPLY II: The Revenge!</source>
      </item>
  </channel>
</rss>
