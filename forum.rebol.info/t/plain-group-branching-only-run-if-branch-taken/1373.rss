<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Plain GROUP! &amp; Branching: Only Run If Branch Taken?</title>
    <link>https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373</link>
    <description>Something that came up early on was the question of parity in how CASE dealt with GROUP! branches and how IF dealt with GROUP! branches.

Because IF evaluated its arguments, the GROUP! would always run...even if the condition ruled out the BLOCK! that was evaluated to running:

     rebol2&gt;&gt; if true (print &quot;in group&quot; [print &quot;in block&quot;])
     in group
     in block

     rebol2&gt;&gt; if false (print &quot;in group&quot; [print &quot;in block&quot;])
     in group  ; ...still printed...just no &quot;in block&quot;

But with CASE, the branches lived inside a block passed in...making them effectively quoted.  Which meant not only *could* they be skipped, but they *were* skipped:

    rebol2&gt;&gt; case [true (print &quot;in group&quot; [print &quot;in block&quot;])]
    in group
    in block

    rebol2&gt;&gt; case [false (print &quot;in group&quot; [print &quot;in block&quot;])]
    == none  ; didn&#39;t say &quot;in group&quot; this time

Sensing something was amiss, Ren-C brought these two situations into sync...but biased to the IF behavior.  When a CASE saw a GROUP! in a branch slot it would run it, just as an IF would...regardless of whether that branch would run.

    ren-c&gt;&gt; case [false (print &quot;in group&quot; [print &quot;in block&quot;])]
    in group
    ; null

It wasn&#39;t really a question of which was the more -useful- behavior.  *Choosing it this way was because it was perceived as the only option.*  There was no way to stop the GROUP!s from running in IF, so long as the branches were evaluative, this was the only way to get parity...

## Suppressing Evaluation Considered for @(gr o up)

When trying to figure out what it was that @(...) did, one potential feature was to remedy this unwanted execution.  It would be like (...) but only run if the branch executed.

     &gt;&gt; branchy: func [flag] [either flag &#39;[&lt;a&gt;] &#39;[&lt;b&gt;]]

     &gt;&gt; either true (print &quot;a&quot; branchy true) (print &quot;b&quot; branchy false)
     a
     b
     == &lt;a&gt;

    &gt;&gt; either true @(print &quot;a&quot; branchy true) @(print &quot;b&quot; branchy false)
    a
    == &lt;a&gt;

Useful.  But then @(...) became desired for other purposes.

## Should Plain GROUP!s Only Run If The Branch Is Taken?

What if the branching constructs quoted the GROUP!s too, and ran them to generate branches only if the condition matched?

     &gt;&gt; branchy: func [flag] [either flag &#39;[&lt;a&gt;] &#39;[&lt;b&gt;]]

     &gt;&gt; either true (print &quot;a&quot; branchy true) (print &quot;b&quot; branchy false)
     a
     == &lt;a&gt;

    &gt;&gt; case [false (print &quot;in group&quot; [print &quot;in block&quot;])]
    ; null

I imagine if you conducted a poll, you&#39;d find a fair number of people who&#39;d say they&#39;d prefer that behavior...and would prefer this to using @(...) to get it.

Other people might say it rocks the boat to have a GROUP! at a callsite that doesn&#39;t execute unconditionally.  But branch slots are already rocking the boat...they&#39;re not evaluative, so they can see quotes:

     &gt;&gt; if true &#39;&lt;foo&gt;
     == &lt;foo&gt;

*(You can read all about it with [Soft-Quoted Branching](https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020)...if you&#39;ve forgotten)*

## What Would This Inhibit?

For most cases, not running the group unless the branch runs is better.  Even if your branch-making code has no side-effects, it&#39;s better for performance not to run it unless you have to.  Lambdas are a good example...if you wanted to say **switch x [...] then (x -&gt; [...])** you could avoid an entire function generation just by having it in a GROUP! like this.

But if you imagine something like a &quot;branch generator&quot; that generates branches in a certain order, and you wanted to position them using that order...you&#39;d need to use a COMPOSE:

     do compose [either (branch-gen) (branch-gen)]

I don&#39;t think that&#39;s too much of a tax to pay for that intent.  It looks fine and conveys exactly what it is...clearly running both branch generations for the COMPOSE step prior to the EITHER.

What I&#39;m more hesitant about is that hard-quoting behavior for branches to not run GROUP!s at the callsites is a fairly early curveball.

But maybe it&#39;s just an example of the language being fluid.

## Drat!  A Mechanical Foil

*(I&#39;m not sure if the practice of writing out the reasoning before trying experiments is a good one, because I usually find some issue pretty quickly when I try them...but...)*

So the feature of [Lambdas for Branches](https://forum.rebol.info/t/the-most-vexing-evaluation-lambda-meets-then-else/1361) relies on something that is tied to non-hard-quoting semantics.

Rightly or wrongly... the decision was that in an &quot;escapable&quot; quoting slot (e.g. one that would accept a GROUP! and evaluate code)...that escapable slot was also willing to accept something produced by a left-quoting construct on the right hand side.

I&#39;m not too keen on coming up with another parameter convention that is &quot;hard quoted unless a lambda decides it wants to evaluate and put something there&quot;.  So that sort of kills this idea...so long as it&#39;s plain GROUP! that is considered to be what defeats quoting.

**But there are still avenues of attack...**

One might be that GET-GROUP! is the &quot;sneaky quoting defeater&quot; instead of plain GROUP!.  When you think about it, if **X** and **X/Y** are quoted by soft quotes but **:X** and **:X/Y** aren&#39;t... why wouldn&#39;t it be **:(FOO BAR)** instead of **(FOO BAR)** to undermine a quoting site...with ordinary GROUP!s quoted normally?

So like this:

    &gt;&gt; either true (print &quot;a&quot; [&lt;a&gt;]) (print &quot;b&quot; [&lt;b&gt;])
    a
    == &lt;a&gt;

    &gt;&gt; either true :(print &quot;a&quot; [&lt;a&gt;]) :(print &quot;b&quot; [&lt;b&gt;])
    a
    b
    == &lt;a&gt;

To me, that feels more natural...that the colon is asking for subversion of the quote.

Interestingly, you could mix and match...here, seen getting it out of order:

    &gt;&gt; either true (print &quot;a&quot; [&lt;a&gt;]) :(print &quot;b&quot; [&lt;b&gt;])
    b
    a
    == &lt;a&gt;

If it were done this way, then it suggests that GROUP! is acceptable as a parameter from direct quoting...but what if you got a GROUP! produced by the subverted quoting? 

    &gt;&gt; if true :(print &quot;a&quot; &#39;(print &quot;b&quot; [&lt;c&gt;]))
    a
    b
    == &lt;c&gt;

That&#39;s just what would naturally happen.  Seems all right to me, but it&#39;s not clear how you would stop it if you wanted to (as in today&#39;s situation, you wouldn&#39;t know as the recipient of an escaped quote if what you got was generated by an escape or not.)  So if this bothered you, you couldn&#39;t use escaping and would have to hard quote it.

[**This idea feels rather appealing, but it suggests a different semiotics for arguments.**  e.g. an escapable quoted parameter would be **:x** or **`&#39;:x`**... not **`&#39;(x)`**](https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303/2?u=hostilefork)

Anyway, what this really does is raise some questions about how people feel about the quoting of groups and branching.

I am finding myself leaning pretty heavily on the side of saying that it is most convenient if a plain GROUP! in a branch slot does not run its branch generation behavior unless the branch is taken. Which is a bit of a shift for me...as I&#39;d favored &quot;normal&quot; evaluation semantics more often.  But it&#39;s just seeming that practically speaking it&#39;s cleaner to leverage the quoting.</description>
    
    <lastBuildDate>Fri, 11 Oct 2024 03:40:26 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Plain GROUP! &amp; Branching: Only Run If Branch Taken?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="3" data-topic="1373">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So...I think I'm just going to axe the whole "colon escaping" idea. GROUP! or bust.</p>
<p><strong>THE-GROUP! and biasing the other way is still on the table</strong></p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext"> &gt;&gt; branchy: func [flag] [either flag '[&lt;a&gt;] '[&lt;b&gt;]]

 &gt;&gt; either okay (print "a" branchy true) (print "b" branchy false)
 a
 b
 == &lt;a&gt;

&gt;&gt; either okay @(print "a" branchy true) @(print "b" branchy false)
a
== &lt;a&gt;
</code></pre>
<p>I mean... I guess we could do that?</p>
</blockquote>
</aside>
<p>So there's been a little bit of a twist, in that I'm leaning toward saying that <strong><code>obj.@x</code></strong> is equivalent to <strong><code>obj.(x)</code></strong>.</p>
<p><em>(Note that we couldn't really use <strong><code>obj.:x</code></strong> for this anymore even if we wanted to.  Because that's not a TUPLE! which holds <code>[obj :x]</code>, it's a CHAIN! that holds <code>[obj. x]</code>, which is structurally wrong for the purpose.)</em></p>
<p>So <strong><code>@</code></strong> is moving in on the space of being kind of like "indirect the thing, go fetch its value".  That resembles more its purpose in parse:</p>
<pre><code>&gt;&gt; var: [some "a"]

&gt;&gt; parse [[some "a"] [some "a"]] [some @var]
== [some "a"]
</code></pre>
<p>And when you say <strong><code>fail @var</code></strong> then FAIL has both the name of the variable, and the idea that you want to fetch that value as problematic.  So if <code>var</code> is 2 it can say: <code>"Bad Value for VAR: 2"</code></p>
<h3><a name="p-7840-so-could-actually-be-the-subversive-escaper-1" class="anchor" href="https://forum.rebol.info#p-7840-so-could-actually-be-the-subversive-escaper-1"></a>So Could @ Actually Be The Subversive Escaper?</h3>
<p>This is the reverse of my original suggestion:</p>
<pre><code>&gt;&gt; branchy: func [flag] [either flag '[&lt;a&gt;] '[&lt;b&gt;]]

&gt;&gt; either okay @(print "a" branchy true) @(print "b" branchy false)
a
b
== &lt;a&gt;

&gt;&gt; either okay (print "a" branchy true) (print "b" branchy false)
a
== &lt;a&gt;
</code></pre>
<p>It seems counter-intuitive if what you have in your head is that <code>@</code> is a "barrier to evaluation".  Because it seems like you'd plunk that heavy thing on a group to protect it from being evaluated:</p>
<pre><code>&gt;&gt; (1 + 2)
== 3

&gt;&gt; @(1 + 2)
== @(1 + 2)
</code></pre>
<p>But at this point, defining <code>@</code> through the lens of "barrier to evaluation" just because EVAL doesn't do anything with it (besides bind it) seems limited.  That's one role it plays.  In other contexts, it serves as a signal with varying meanings.</p>
<p><strong>And here we have a pretty clear case where we <em>know</em> the common desire of the undecorated group is not to run the code for the branch unless the branch runs.</strong>  Any work you do on a branch e.g. to WRAP it or otherwise bind it for execution is not work you want to do.  So is decorating it to make the request to evaluate escapedly so strange?</p>
<p>This is based on the concept that things like <code>@a</code> or <code>@a.b</code> would also be means of escaping the quote.</p>
<pre><code> &gt;&gt; foo: func [@(var) [word!]] [print ["Var is" (mold var)]]

 &gt;&gt; foo x
 Var is x

 &gt;&gt; word: 'hello

 &gt;&gt; foo @word
 Var is hello

 &gt;&gt; foo @(first [a b])
 Var is a

 &gt;&gt; foo (first [a b])
 ** Error: foo doesn't take GROUP! as its var argument
</code></pre>
<p>If we instead were to say that plain GROUP!s were what we escape, that plainness means it wouldn't be part of a family of things that escape.</p>
<h2><a name="p-7840-or-man_facepalming-should-there-be-more-nuance-in-the-model-2" class="anchor" href="https://forum.rebol.info#p-7840-or-man_facepalming-should-there-be-more-nuance-in-the-model-2"></a>Or <img src="https://forum.rebol.info/images/emoji/twitter/man_facepalming.png?v=12" title=":man_facepalming:" class="emoji" alt=":man_facepalming:" loading="lazy" width="20" height="20"> Should There Be More Nuance In The Model...</h2>
<p>I'm really trying to avoid the idea of having multiple different soft-literal escaping conventions.</p>
<p>The idea that some callsites work better with plain GROUP!s for escaping their literal slot vs. others working better with <code>@</code>-GROUP! and have to specify that on their interface is a complexity tax I'd like to avoid.</p>
<p>Now that FOR-EACH doesn't take its argument literally anymore, the big places we're looking at literal escaping in the wild are branches and the AND and OR statements.</p>
<pre><code>if x and (all [y z]) [...]
</code></pre>
<p>In those cases they want the GROUP! literally by default, so they can avoid running them.</p>
<p>Another place would be OF:</p>
<pre><code>(first [type length]) of series
</code></pre>
<p>In that case, it's inconvenient for OF to have to EVAL the group and typecheck the result.</p>
<p>But anyplace where what you take literally is code, then it's a more powerful default to not run it.</p>
<h2><a name="p-7840-waitaminute-should-this-be-driven-by-typechecking-3" class="anchor" href="https://forum.rebol.info#p-7840-waitaminute-should-this-be-driven-by-typechecking-3"></a>WAITAMINUTE.  Should This Be Driven By Typechecking?</h2>
<p>It seems to me that the places that you don't want the groups to evaluate are the places for which GROUP! is a valid argument type.</p>
<p>So if you see a group at the callsite, typecheck and it says "yup I'll take a group", pass it the group.</p>
<p>Otherwise, evaluate the group and pass it the product.</p>
<p><em>There may be something to that.</em>  It might make it a little harder to decipher at the callsite as to what sort of behavior you're going to get just from reading the spec, but I'm trying to do anything I can to avoid adding another parameter convention.</p>
          <p><a href="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/5</link>
        <pubDate>Fri, 11 Oct 2024 03:40:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1373-5</guid>
        <source url="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373.rss">Plain GROUP! &amp; Branching: Only Run If Branch Taken?</source>
      </item>
      <item>
        <title>Plain GROUP! &amp; Branching: Only Run If Branch Taken?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1373">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>My intuition is still that not running groups unless the branch is going to be taken is the more useful behavior. But... when you look at the available parts, the cleanest way to provide both capabilities is to say that the plain GROUP! evaluates unconditionally... and the THE-GROUP! only runs if the branch runs.</p>
</blockquote>
</aside>
<p>As it turns out, <em>there's no real choice but to run the groups unconditionally now</em>.</p>
<p>Changing escapable literals to use plain groups means that so long as branching structures use escapable literals for the branch, then groups will execute unconditionally and typecheck the result.</p>
<p>Changing away from escapable literals to use non-escapable ones would break the ability to get <a href="https://forum.rebol.info/t/implicit-escaping-to-tiebreak-literal-arguments/2290">implicit tiebreaking</a> and you couldn't use lambdas on the right of things like THEN and ELSE without putting them in groups.</p>
<p>Going away from literal arguments for branches altogether would kill off <a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020">soft-quoting branching</a></p>
<p>So if there's going to be a form of branch that doesn't calculate a synthesized branch unless the branch is going to be taken... I think THE-GROUP! is the answer.</p>
          <p><a href="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/4</link>
        <pubDate>Sat, 21 Sep 2024 18:52:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1373-4</guid>
        <source url="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373.rss">Plain GROUP! &amp; Branching: Only Run If Branch Taken?</source>
      </item>
      <item>
        <title>Plain GROUP! &amp; Branching: Only Run If Branch Taken?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="1373">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>What if You Want the Branch to Run Anyway?</strong></p>
<p>Right now the answer is to use a GET-GROUP!.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; branchy: func [flag] [either flag '[&lt;a&gt;] '[&lt;b&gt;]]

&gt;&gt; either okay (print "a" branchy true) (print "b" branchy false)
a
== &lt;a&gt;

&gt;&gt; either okay :(print "a" branchy true) :(print "b" branchy false)
a
b
== &lt;a&gt;
</code></pre>
</blockquote>
</aside>
<p>Leading colons won't mean "GET-" of anything.  It will be used for refinements.</p>
<p><em>That doesn't necessarily mean it can't be used for escaping.</em>  But...</p>
<p>Note that R3-Alpha and Red used plain GROUP! for escaping "soft literal" arguments... but then also permitted GET-WORD! and GET-PATH! so you could avoid using a group.  Allowing you to say <strong>for-each :var</strong> instead of <strong>for-each (var)</strong>  would mean you weren't creating a group! that might interfere with COMPOSE-ing (and I'm sure they also considered the "efficiency" of not allocating an array).</p>
<p>I changed it to GET-GROUP! for escaping, making plain GROUP! passed and typechecked literally.  My hunch was that the only reason that they didn't use a colon-prefixed group for the special "escaped" state was because they didn't have it for groups.</p>
<p>But really... this escaping is pretty rare (and will be even rarer now that loop variables aren't taken literally!).  And I've honestly always thought the colons looked ugly.</p>
<p>What would you rather read?</p>
<pre><code> &gt;&gt; integer! = (first [type length]) of 1
 == ~okay~  ; anti

 &gt;&gt; integer! = :(first [type length]) of 1
 == ~okay~  ; anti
</code></pre>
<p>I think it has just sort of emerged that functions which look for their arguments escapably-literally are not looking for literal GROUP!s.  It hasn't come up.  You either care about groups literally and don't escape, or you're escaping and don't have meaning for groups.</p>
<p>If you find yourself backed into a corner with a function that is forcing you to pass a literal argument when you don't want to do that... APPLY the function to bypass callsite conventions.  Or skin it with a new parameter convention.</p>
<p>So...I think I'm just going to axe the whole "colon escaping" idea.  GROUP! or bust.</p>
<h2><a name="p-7737-the-group-and-biasing-the-other-way-is-still-on-the-table-1" class="anchor" href="https://forum.rebol.info#p-7737-the-group-and-biasing-the-other-way-is-still-on-the-table-1"></a>THE-GROUP! and biasing the other way is still on the table</h2>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1373">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext"> &gt;&gt; branchy: func [flag] [either flag '[&lt;a&gt;] '[&lt;b&gt;]]

 &gt;&gt; either okay (print "a" branchy true) (print "b" branchy false)
 a
 b
 == &lt;a&gt;

&gt;&gt; either okay @(print "a" branchy true) @(print "b" branchy false)
a
== &lt;a&gt;
</code></pre>
</blockquote>
</aside>
<p>I mean... I guess we could do that?</p>
<p><strong>I Hate That I Still Have To Think About This.</strong> <img src="https://forum.rebol.info/images/emoji/twitter/face_with_head_bandage.png?v=12" title=":face_with_head_bandage:" class="emoji" alt=":face_with_head_bandage:" loading="lazy" width="20" height="20"></p>
<p>My intuition is still that not running groups unless the branch is going to be taken is the more useful behavior.  But... when you look at the available parts, the cleanest way to provide both capabilities is to say that the plain GROUP! evaluates unconditionally... and the THE-GROUP! only runs if the branch runs.</p>
<p>I don't personally generate branches all that often, and if I do it's in COMPOSE'd code... so the compose happens all at once without worrying too much about not running the branch generation in the case the branch isn't taken.</p>
<p>But it is an interesting nuance, and I might be more likely to take advantage of it if I didn't know this behavior has been in such flux.</p>
          <p><a href="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/3</link>
        <pubDate>Fri, 20 Sep 2024 19:08:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1373-3</guid>
        <source url="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373.rss">Plain GROUP! &amp; Branching: Only Run If Branch Taken?</source>
      </item>
      <item>
        <title>Plain GROUP! &amp; Branching: Only Run If Branch Taken?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1373">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Because IF evaluated its arguments, the GROUP! would always run...even if the condition ruled out the BLOCK! that was evaluated to running:</p>
<pre><code>rebol2&gt;&gt; if true (print "in group" [print "in block"])
in group
in block

rebol2&gt;&gt; if false (print "in group" [print "in block"])
in group  ; ...still printed...just no "in block"
</code></pre>
</blockquote>
</aside>
<p>While no one has really commented on this, I think my mind is made up:</p>
<p><strong>It's more intuitive and useful to NOT run the plain GROUP! when the triggering condition is false.</strong></p>
<p>Mechanically, Ren-C has long been able to make a different choice from historical Redbol here, due to changing the parameter conventions to facilitate <strong><a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020">soft-quoted branching</a></strong>.</p>
<p>...speaking of which, my mind is made up on that, too:</p>
<p><strong>Soft-quoted branching is now foundational.  I use it all the time, and like it.  And it's an even bigger efficiency advantage in stackless, where you can provide a value directly and not require pushing a stack frame.</strong></p>
<p>So the decision is made.</p>
<h2><a name="p-5974-what-if-you-want-the-branch-to-run-anyway-1" class="anchor" href="https://forum.rebol.info#p-5974-what-if-you-want-the-branch-to-run-anyway-1"></a>What if You Want the Branch to Run Anyway?</h2>
<p>Right now the answer is to use a GET-GROUP!.</p>
<pre><code>&gt;&gt; branchy: func [flag] [either flag '[&lt;a&gt;] '[&lt;b&gt;]]

&gt;&gt; either true (print "a" branchy true) (print "b" branchy false)
a
== &lt;a&gt;

&gt;&gt; either true :(print "a" branchy true) :(print "b" branchy false)
a
b
== &lt;a&gt;
</code></pre>
<p><strong>The reason it works is that right now, GET-GROUP! unconditional processing is done by the soft-quoting parameter convention.</strong>  So things like EITHER don't have a choice.  They receive a plain GROUP! quoted, but a GET-GROUP! will have ran before their code starts.</p>
<p><em>I'm less sure about this, and it ties into a lot of questions about parameter conventions and things-that-start-with-colon.</em>  Some of the more interesting ideas I have for GET-XXX have to do with a meta-like convention that would allow the implementations of things like APPEND to be able to reduce-and-splice:</p>
<p><a href="https://forum.rebol.info/t/beating-repend-a-new-parameter-convention/1673" class="inline-onebox">Beating REPEND: A New Parameter Convention?</a></p>
<p>So I'm unsure of how what might come out of that could affect these choices.  If APPEND expects to receive things like a GET-BLOCK! unadulterated so it can blend reducing with appending, they might expect GET-GROUP!s to be passed as-is also.  That might juggle things in these parameter convention ideas.</p>
<p>But I doubt anyone was really clamoring for the ability to run code in groups for branches that aren't taken.  If you are deeply affected, feel free to write a long sad essay here.  <img src="https://forum.rebol.info/images/emoji/twitter/sob.png?v=12" title=":sob:" class="emoji" alt=":sob:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/2</link>
        <pubDate>Sun, 03 Jul 2022 01:26:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1373-2</guid>
        <source url="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373.rss">Plain GROUP! &amp; Branching: Only Run If Branch Taken?</source>
      </item>
      <item>
        <title>Plain GROUP! &amp; Branching: Only Run If Branch Taken?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Something that came up early on was the question of parity in how CASE dealt with GROUP! branches and how IF dealt with GROUP! branches.</p>
<p>Because IF evaluated its arguments, the GROUP! would always run...even if the condition ruled out the BLOCK! that was evaluated to running:</p>
<pre><code> rebol2&gt;&gt; if true (print "in group" [print "in block"])
 in group
 in block

 rebol2&gt;&gt; if false (print "in group" [print "in block"])
 in group  ; ...still printed...just no "in block"
</code></pre>
<p>But with CASE, the branches lived inside a block passed in...making them effectively quoted.  Which meant not only <em>could</em> they be skipped, but they <em>were</em> skipped:</p>
<pre><code>rebol2&gt;&gt; case [true (print "in group" [print "in block"])]
in group
in block

rebol2&gt;&gt; case [false (print "in group" [print "in block"])]
== none  ; didn't say "in group" this time
</code></pre>
<p>Sensing something was amiss, Ren-C brought these two situations into sync...but biased to the IF behavior.  When a CASE saw a GROUP! in a branch slot it would run it, just as an IF would...regardless of whether that branch would run.</p>
<pre><code>ren-c&gt;&gt; case [false (print "in group" [print "in block"])]
in group
; null
</code></pre>
<p>It wasn't really a question of which was the more -useful- behavior.  <em>Choosing it this way was because it was perceived as the only option.</em>  There was no way to stop the GROUP!s from running in IF, so long as the branches were evaluative, this was the only way to get parity...</p>
<h2>Suppressing Evaluation Considered for @(gr o up)</h2>
<p>When trying to figure out what it was that @(...) did, one potential feature was to remedy this unwanted execution.  It would be like (...) but only run if the branch executed.</p>
<pre><code> &gt;&gt; branchy: func [flag] [either flag '[&lt;a&gt;] '[&lt;b&gt;]]

 &gt;&gt; either true (print "a" branchy true) (print "b" branchy false)
 a
 b
 == &lt;a&gt;

&gt;&gt; either true @(print "a" branchy true) @(print "b" branchy false)
a
== &lt;a&gt;
</code></pre>
<p>Useful.  But then @(...) became desired for other purposes.</p>
<h2>Should Plain GROUP!s Only Run If The Branch Is Taken?</h2>
<p>What if the branching constructs quoted the GROUP!s too, and ran them to generate branches only if the condition matched?</p>
<pre><code> &gt;&gt; branchy: func [flag] [either flag '[&lt;a&gt;] '[&lt;b&gt;]]

 &gt;&gt; either true (print "a" branchy true) (print "b" branchy false)
 a
 == &lt;a&gt;

&gt;&gt; case [false (print "in group" [print "in block"])]
; null
</code></pre>
<p>I imagine if you conducted a poll, you'd find a fair number of people who'd say they'd prefer that behavior...and would prefer this to using @(...) to get it.</p>
<p>Other people might say it rocks the boat to have a GROUP! at a callsite that doesn't execute unconditionally.  But branch slots are already rocking the boat...they're not evaluative, so they can see quotes:</p>
<pre><code> &gt;&gt; if true '&lt;foo&gt;
 == &lt;foo&gt;
</code></pre>
<p><em>(You can read all about it with <a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020">Soft-Quoted Branching</a>...if you've forgotten)</em></p>
<h2>What Would This Inhibit?</h2>
<p>For most cases, not running the group unless the branch runs is better.  Even if your branch-making code has no side-effects, it's better for performance not to run it unless you have to.  Lambdas are a good example...if you wanted to say <strong>switch x [...] then (x -&gt; [...])</strong> you could avoid an entire function generation just by having it in a GROUP! like this.</p>
<p>But if you imagine something like a "branch generator" that generates branches in a certain order, and you wanted to position them using that order...you'd need to use a COMPOSE:</p>
<pre><code> do compose [either (branch-gen) (branch-gen)]
</code></pre>
<p>I don't think that's too much of a tax to pay for that intent.  It looks fine and conveys exactly what it is...clearly running both branch generations for the COMPOSE step prior to the EITHER.</p>
<p>What I'm more hesitant about is that hard-quoting behavior for branches to not run GROUP!s at the callsites is a fairly early curveball.</p>
<p>But maybe it's just an example of the language being fluid.</p>
<h2>Drat!  A Mechanical Foil</h2>
<p><em>(I'm not sure if the practice of writing out the reasoning before trying experiments is a good one, because I usually find some issue pretty quickly when I try them...but...)</em></p>
<p>So the feature of <a href="https://forum.rebol.info/t/the-most-vexing-evaluation-lambda-meets-then-else/1361">Lambdas for Branches</a> relies on something that is tied to non-hard-quoting semantics.</p>
<p>Rightly or wrongly... the decision was that in an "escapable" quoting slot (e.g. one that would accept a GROUP! and evaluate code)...that escapable slot was also willing to accept something produced by a left-quoting construct on the right hand side.</p>
<p>I'm not too keen on coming up with another parameter convention that is "hard quoted unless a lambda decides it wants to evaluate and put something there".  So that sort of kills this idea...so long as it's plain GROUP! that is considered to be what defeats quoting.</p>
<p><strong>But there are still avenues of attack...</strong></p>
<p>One might be that GET-GROUP! is the "sneaky quoting defeater" instead of plain GROUP!.  When you think about it, if <strong>X</strong> and <strong>X/Y</strong> are quoted by soft quotes but <strong>:X</strong> and <strong>:X/Y</strong> aren't... why wouldn't it be <strong>:(FOO BAR)</strong> instead of <strong>(FOO BAR)</strong> to undermine a quoting site...with ordinary GROUP!s quoted normally?</p>
<p>So like this:</p>
<pre><code>&gt;&gt; either true (print "a" [&lt;a&gt;]) (print "b" [&lt;b&gt;])
a
== &lt;a&gt;

&gt;&gt; either true :(print "a" [&lt;a&gt;]) :(print "b" [&lt;b&gt;])
a
b
== &lt;a&gt;
</code></pre>
<p>To me, that feels more natural...that the colon is asking for subversion of the quote.</p>
<p>Interestingly, you could mix and match...here, seen getting it out of order:</p>
<pre><code>&gt;&gt; either true (print "a" [&lt;a&gt;]) :(print "b" [&lt;b&gt;])
b
a
== &lt;a&gt;
</code></pre>
<p>If it were done this way, then it suggests that GROUP! is acceptable as a parameter from direct quoting...but what if you got a GROUP! produced by the subverted quoting?</p>
<pre><code>&gt;&gt; if true :(print "a" '(print "b" [&lt;c&gt;]))
a
b
== &lt;c&gt;
</code></pre>
<p>That's just what would naturally happen.  Seems all right to me, but it's not clear how you would stop it if you wanted to (as in today's situation, you wouldn't know as the recipient of an escaped quote if what you got was generated by an escape or not.)  So if this bothered you, you couldn't use escaping and would have to hard quote it.</p>
<p><a href="https://forum.rebol.info/t/get-word-for-loop-vars-function-args-mean-allow-action-s/1303/2"><strong>This idea feels rather appealing, but it suggests a different semiotics for arguments.</strong>  e.g. an escapable quoted parameter would be <strong>:x</strong> or <strong><code>':x</code></strong>... not <strong><code>'(x)</code></strong></a></p>
<p>Anyway, what this really does is raise some questions about how people feel about the quoting of groups and branching.</p>
<p>I am finding myself leaning pretty heavily on the side of saying that it is most convenient if a plain GROUP! in a branch slot does not run its branch generation behavior unless the branch is taken. Which is a bit of a shift for me...as I'd favored "normal" evaluation semantics more often.  But it's just seeming that practically speaking it's cleaner to leverage the quoting.</p>
          <p><a href="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373/1</link>
        <pubDate>Mon, 26 Oct 2020 07:15:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1373-1</guid>
        <source url="https://forum.rebol.info/t/plain-group-branching-only-run-if-branch-taken/1373.rss">Plain GROUP! &amp; Branching: Only Run If Branch Taken?</source>
      </item>
  </channel>
</rss>
