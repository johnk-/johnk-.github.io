<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Multiple Return Values in JavaScript</title>
    <link>https://forum.rebol.info/t/multiple-return-values-in-javascript/2355</link>
    <description>rebRescue() in the C API returns an error, or null if no error... in which case your result is the value that&#39;s passed by pointer-to-pointer:

     Value* result;
     Value* error = rebRescue(&amp;result, &quot;append 123 456&quot;);  // illegal, fails
     if (error) {  // non-0 pointer value means not ~null~ antiform
         /* handle error */
     }
     else {
         /* result is valid */
     }

But JavaScript doesn&#39;t have pointer-to-value semantics.  So you have to use multi-returns.

I didn&#39;t know how they did that, so I looked it up.  [There are two ways](https://stackoverflow.com/questions/2917175/return-multiple-values-in-javascript/2917186#2917186).  You can destructure an array:

    function getValues() {
        return [getFirstValue(), getSecondValue()]
    }
    const [a, b] = getValues()  ; any names you want here

Or you can destructure an object, where you have to use the names of the fields as the same names as your destructure variables:

    function getValues() {
        return {
            first: getFirstValue(),
            second: getSecondValue(),
        }
    }

    const {first, second} = getValues()

If you don&#39;t want to use the exact names, there&#39;s another syntax:

    const {a: first, b: second} = getValues()

I don&#39;t know if naming multi-returns is super important, and have had bigger ambitions for antiform objects.

The StackOverflow question has someone prescribing that it&#39;s very important to pick the named version over the non-named one.  I don&#39;t agree, and plan on using the array form for `rebRescue()`

**The much bigger issue in my mind is forgetting to do the destructure, and getting back a value that&#39;s in-band as a plain array or object, when you really just forgot to destructure.**  Isotopes do a very good thing here, not seen in other languages...decaying to the first item by default, and generalizing moving the out-of-band into band via meta/quasi/etc. forms in order to write peer destructuring operators when you need to.

This is a repeat of JavaScript&#39;s issue with Promise, where if you forget to do an AWAIT then you wind up with a Promise by value that you didn&#39;t expect.  But AWAIT is terrible for all kinds of other reasons, so we&#39;re not going down that road.

  https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/</description>
    
    <lastBuildDate>Sat, 21 Dec 2024 18:32:13 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/multiple-return-values-in-javascript/2355.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Multiple Return Values in JavaScript</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>rebRescue() in the C API returns an error, or null if no error... in which case your result is the value that's passed by pointer-to-pointer:</p>
<pre><code> Value* result;
 Value* error = rebRescue(&amp;result, "append 123 456");  // illegal, fails
 if (error) {  // non-0 pointer value means not ~null~ antiform
     /* handle error */
 }
 else {
     /* result is valid */
 }
</code></pre>
<p>But JavaScript doesn't have pointer-to-value semantics.  So you have to use multi-returns.</p>
<p>I didn't know how they did that, so I looked it up.  <a href="https://stackoverflow.com/questions/2917175/return-multiple-values-in-javascript/2917186#2917186">There are two ways</a>.  You can destructure an array:</p>
<pre><code>function getValues() {
    return [getFirstValue(), getSecondValue()]
}
const [a, b] = getValues()  ; any names you want here
</code></pre>
<p>Or you can destructure an object, where you have to use the names of the fields as the same names as your destructure variables:</p>
<pre><code>function getValues() {
    return {
        first: getFirstValue(),
        second: getSecondValue(),
    }
}

const {first, second} = getValues()
</code></pre>
<p>If you don't want to use the exact names, there's another syntax:</p>
<pre><code>const {a: first, b: second} = getValues()
</code></pre>
<p>I don't know if naming multi-returns is super important, and have had bigger ambitions for antiform objects.</p>
<p>The StackOverflow question has someone prescribing that it's very important to pick the named version over the non-named one.  I don't agree, and plan on using the array form for <code>rebRescue()</code></p>
<p><strong>The much bigger issue in my mind is forgetting to do the destructure, and getting back a value that's in-band as a plain array or object, when you really just forgot to destructure.</strong>  Isotopes do a very good thing here, not seen in other languages...decaying to the first item by default, and generalizing moving the out-of-band into band via meta/quasi/etc. forms in order to write peer destructuring operators when you need to.</p>
<p>This is a repeat of JavaScript's issue with Promise, where if you forget to do an AWAIT then you wind up with a Promise by value that you didn't expect.  But AWAIT is terrible for all kinds of other reasons, so we're not going down that road.</p>
<p><a href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/" class="inline-onebox">What Color is Your Function? â€“ journal.stuffwithstuff.com</a></p>
          <p><a href="https://forum.rebol.info/t/multiple-return-values-in-javascript/2355/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/multiple-return-values-in-javascript/2355/1</link>
        <pubDate>Sat, 21 Dec 2024 18:32:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2355-1</guid>
        <source url="https://forum.rebol.info/t/multiple-return-values-in-javascript/2355.rss">Multiple Return Values in JavaScript</source>
      </item>
  </channel>
</rss>
