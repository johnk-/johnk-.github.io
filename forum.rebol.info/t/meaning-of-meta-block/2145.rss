<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Meaning of META-BLOCK! ^[...]</title>
    <link>https://forum.rebol.info/t/meaning-of-meta-block/2145</link>
    <description>[quote=&quot;hostilefork, post:1, topic:2135&quot;]
In any case, preliminary looking at the results **[(of repurposing the @xxx types)](https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135)**, I think this is a solid change and much needed in the new binding world.
[/quote]

Found one glitch... there was an idiom of using the inertness in some places with blocks.

    &gt;&gt; spaced [&quot;Reduced&quot; 1 + 2 &quot;Content&quot;]
    == &quot;Reduced 3 Content&quot;

    &gt;&gt; spaced @[&quot;Unreduced&quot; 1 + 2 &quot;Content&quot;]
    == &quot;Unreduced 1 + 2 Content&quot;

    &gt;&gt; meta pack [1 + 2 10 + 20]
    == ~[&#39;3 &#39;30]~

    &gt;&gt; meta pack @[1 + 2 10 + 20]
    == ~[&#39;1 &#39;+ &#39;2 &#39;10 &#39;+ &#39;20]~

This won&#39;t work anymore, as the evaluator isn&#39;t inert here.

HOWEVER... there is a construct that can pick up the slack.  The META-BLOCK!

    &gt;&gt; ^[1 + 2 10 + 20]
    == &#39;[1 + 2 10 + 20]

It produces a block which is quoted, and which captured a binding.  So it is suitable for this purpose.  It does raise questions like &quot;what to do if the block is double or triple quoted&quot; etc, but I think raising an error is fine for the moment.

---

Coincidentally, I was thinking about my desire to have a proper FOR dialect.

     &gt;&gt; for x [1 to 3] [print x]
     1
     2
     3

And then, the concept of &quot;going meta&quot; struck me as interesting:

     &gt;&gt; for x meta [1 to 3] [print x]
     1
     to
     3

Which would mean that FOR when given a quoted block would enumerate its contents vs. run the dialect.  Then you could also write that as:

     &gt;&gt; for x ^[1 to 3] [print x]
     1
     to
     3

If you didn&#39;t want a binding you need a quoted block and a generator applied to the resulting unbound block:

     &gt;&gt; for x each &#39;[1 to 3] [print x]
     1
     to
     3

It&#39;s interesting to see the parts coming together with some things not being as useless as first thought.</description>
    
    <lastBuildDate>Mon, 05 Feb 2024 19:39:07 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/meaning-of-meta-block/2145.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Meaning of META-BLOCK! ^[...]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2145">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>HOWEVER... there is a construct that can pick up the slack. The META-BLOCK!</p>
<pre><code class="lang-plaintext">&gt;&gt; ^[1 + 2 10 + 20]
== '[1 + 2 10 + 20]
</code></pre>
<p>It produces a block which is quoted, and which captured a binding.</p>
</blockquote>
</aside>
<p>So thinking about it more, I don't know if this is what META-BLOCK! should do.</p>
<p>META-GROUP! takes the evaluative behavior of GROUP! and metas the product:</p>
<pre><code>&gt;&gt; ^(1 + 2)
== '3

&gt;&gt; ^(null)
== ~null~
</code></pre>
<p>That makes sense.  So what if <strong>^[...]</strong> would reduce the block and meta each item?</p>
<pre><code> &gt;&gt; ^[1 + 2 null]
 == ['3 ~null~]
</code></pre>
<p>That's half the behavior of what we call PACK today.  If you make it an antiform, you can use it with multi return:</p>
<pre><code> [a b]: anti ^[1 + 2 null]
</code></pre>
<p>What good is half the behavior?  Well, it's more about the idea of having a REDUCE parallel that can actually reduce anything and put it in "suspended animation".  Packs are one place this has become useful, but other places could use it too.</p>
<p>It came up when I was thinking about what a META-FENCE! might do:</p>
<pre><code>&gt;&gt; ^{a: 3 b: null}
</code></pre>
<p>I was wondering if quoted-bound-fence made sense, and wondered if making all the assignments meta would make more sense.</p>
<p>Anyway, behavior of <strong>^[...]</strong> is something I'm rethinking.</p>
          <p><a href="https://forum.rebol.info/t/meaning-of-meta-block/2145/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/meaning-of-meta-block/2145/2</link>
        <pubDate>Mon, 05 Feb 2024 19:07:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2145-2</guid>
        <source url="https://forum.rebol.info/t/meaning-of-meta-block/2145.rss">Meaning of META-BLOCK! ^[...]</source>
      </item>
      <item>
        <title>Meaning of META-BLOCK! ^[...]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="2135">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135/1">Repurposing THE-XXX! (@xxx) For Undecorated Values</a>
</div>
<blockquote>
<p>In any case, preliminary looking at the results <strong><a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135">(of repurposing the @xxx types)</a></strong>, I think this is a solid change and much needed in the new binding world.</p>
</blockquote>
</aside>
<p>Found one glitch... there was an idiom of using the inertness in some places with blocks.</p>
<pre><code>&gt;&gt; spaced ["Reduced" 1 + 2 "Content"]
== "Reduced 3 Content"

&gt;&gt; spaced @["Unreduced" 1 + 2 "Content"]
== "Unreduced 1 + 2 Content"

&gt;&gt; meta pack [1 + 2 10 + 20]
== ~['3 '30]~

&gt;&gt; meta pack @[1 + 2 10 + 20]
== ~['1 '+ '2 '10 '+ '20]~
</code></pre>
<p>This won't work anymore, as the evaluator isn't inert here.</p>
<p>HOWEVER... there is a construct that can pick up the slack.  The META-BLOCK!</p>
<pre><code>&gt;&gt; ^[1 + 2 10 + 20]
== '[1 + 2 10 + 20]
</code></pre>
<p>It produces a block which is quoted, and which captured a binding.  So it is suitable for this purpose.  It does raise questions like "what to do if the block is double or triple quoted" etc, but I think raising an error is fine for the moment.</p>
<hr>
<p>Coincidentally, I was thinking about my desire to have a proper FOR dialect.</p>
<pre><code> &gt;&gt; for x [1 to 3] [print x]
 1
 2
 3
</code></pre>
<p>And then, the concept of "going meta" struck me as interesting:</p>
<pre><code> &gt;&gt; for x meta [1 to 3] [print x]
 1
 to
 3
</code></pre>
<p>Which would mean that FOR when given a quoted block would enumerate its contents vs. run the dialect.  Then you could also write that as:</p>
<pre><code> &gt;&gt; for x ^[1 to 3] [print x]
 1
 to
 3
</code></pre>
<p>If you didn't want a binding you need a quoted block and a generator applied to the resulting unbound block:</p>
<pre><code> &gt;&gt; for x each '[1 to 3] [print x]
 1
 to
 3
</code></pre>
<p>It's interesting to see the parts coming together with some things not being as useless as first thought.</p>
          <p><a href="https://forum.rebol.info/t/meaning-of-meta-block/2145/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/meaning-of-meta-block/2145/1</link>
        <pubDate>Mon, 29 Jan 2024 08:50:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2145-1</guid>
        <source url="https://forum.rebol.info/t/meaning-of-meta-block/2145.rss">Meaning of META-BLOCK! ^[...]</source>
      </item>
  </channel>
</rss>
