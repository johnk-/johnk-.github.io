<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SYSTEM.OPTIONS.ARGS vs. SYSTEM.SCRIPT.ARGS</title>
    <link>https://forum.rebol.info/t/system-options-args-vs-system-script-args/2303</link>
    <description>[I was looking at some code like](https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/2?u=hostilefork):

    tests: if try first system.options.args [
        local-to-file first system.options.args
    ] else [
        %core-tests.r
    ]

And it reminded me that I don&#39;t like the nuance between SYSTEM.OPTIONS.ARGS and SYSTEM.SCRIPT.ARGS.

One of them is supposed to capture the command line arguments that spawned the interpreter.  The other is the arguments to the currently running script.  If you spawn the interpreter in such a way that it runs a script, then the two will be the same when that script runs.

## I Don&#39;t Like the Naming Distinction or the Behavior

It seems flawed to me that you can confuse them (and many people do, in ways that break as their code gets more complex.)  One way to avoid confusion would be to say that all arguments should go one place or the other.

e.g. drop the idea of giving you verbatim what the command line was.  If you write the command line in such a way that some arguments are given to the script, then remove those from the place where you find the spawning arguments.

That would give us SYSTEM.BOOT.ARGS which is everything that didn&#39;t get picked off to pass to the script.  And the script gets SYSTEM.SCRIPT.ARGS.

## Should There Be SYSTEM.BOOT.ARGS At All?

I don&#39;t know if it&#39;s even a good idea.  Why should you be looking at that, vs. whatever was gleaned from it?  This just seems like a way to start building dependencies on the command line argument conventions of the executable that are none of your script&#39;s business.

Anyway, maybe I am wrong and SYSTEM.BOOT.ARGS giving you an exact capture of the arguments which started the executable is useful and should be preserved.  :man_shrugging:  I&#39;m just annoyed at how often I&#39;ve been bitten by this and maybe overreacting.

But at least renaming it to SYSTEM.BOOT.ARGS helps you avoid confusing it.  The SYSTEM.OPTIONS.ARGS vs. SYSTEM.SCRIPT.ARGS naming hath wrought nothing but pain.</description>
    
    <lastBuildDate>Mon, 30 Sep 2024 12:31:23 +0000</lastBuildDate>
    <category>Modules</category>
    <atom:link href="https://forum.rebol.info/t/system-options-args-vs-system-script-args/2303.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SYSTEM.OPTIONS.ARGS vs. SYSTEM.SCRIPT.ARGS</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://forum.rebol.info/t/revisiting-a-maybe-not-so-weird-old-idea-as-identity/2165/2">I was looking at some code like</a>:</p>
<pre><code>tests: if try first system.options.args [
    local-to-file first system.options.args
] else [
    %core-tests.r
]
</code></pre>
<p>And it reminded me that I don't like the nuance between SYSTEM.OPTIONS.ARGS and SYSTEM.SCRIPT.ARGS.</p>
<p>One of them is supposed to capture the command line arguments that spawned the interpreter.  The other is the arguments to the currently running script.  If you spawn the interpreter in such a way that it runs a script, then the two will be the same when that script runs.</p>
<h2>
<a name="i-dont-like-the-naming-distinction-or-the-behavior-1" class="anchor" href="https://forum.rebol.info#i-dont-like-the-naming-distinction-or-the-behavior-1"></a>I Don't Like the Naming Distinction or the Behavior</h2>
<p>It seems flawed to me that you can confuse them (and many people do, in ways that break as their code gets more complex.)  One way to avoid confusion would be to say that all arguments should go one place or the other.</p>
<p>e.g. drop the idea of giving you verbatim what the command line was.  If you write the command line in such a way that some arguments are given to the script, then remove those from the place where you find the spawning arguments.</p>
<p>That would give us SYSTEM.BOOT.ARGS which is everything that didn't get picked off to pass to the script.  And the script gets SYSTEM.SCRIPT.ARGS.</p>
<h2>
<a name="should-there-be-systembootargs-at-all-2" class="anchor" href="https://forum.rebol.info#should-there-be-systembootargs-at-all-2"></a>Should There Be SYSTEM.BOOT.ARGS At All?</h2>
<p>I don't know if it's even a good idea.  Why should you be looking at that, vs. whatever was gleaned from it?  This just seems like a way to start building dependencies on the command line argument conventions of the executable that are none of your script's business.</p>
<p>Anyway, maybe I am wrong and SYSTEM.BOOT.ARGS giving you an exact capture of the arguments which started the executable is useful and should be preserved.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20">  I'm just annoyed at how often I've been bitten by this and maybe overreacting.</p>
<p>But at least renaming it to SYSTEM.BOOT.ARGS helps you avoid confusing it.  The SYSTEM.OPTIONS.ARGS vs. SYSTEM.SCRIPT.ARGS naming hath wrought nothing but pain.</p>
          <p><a href="https://forum.rebol.info/t/system-options-args-vs-system-script-args/2303/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/system-options-args-vs-system-script-args/2303/1</link>
        <pubDate>Mon, 30 Sep 2024 12:31:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2303-1</guid>
        <source url="https://forum.rebol.info/t/system-options-args-vs-system-script-args/2303.rss">SYSTEM.OPTIONS.ARGS vs. SYSTEM.SCRIPT.ARGS</source>
      </item>
  </channel>
</rss>
