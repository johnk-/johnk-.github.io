<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Variadic Scanning in pure C First Example: *working*</title>
    <link>https://forum.rebol.info/t/variadic-scanning-in-pure-c-first-example-working/361</link>
    <description>&gt; **This post from October 2017 announces a turning point in the API, which has been very fruitful.**
&gt;
&gt;Many things have changed (including wrapping in a variadic macro that automatically supplies the &quot;END&quot;, and being able to [access native arguments in the code strings](https://forum.rebol.info/t/api-breakthrough-scope-detection-in-javascript-and-c/2157)).  But the basic idea remains the same.  The bit patterns for internal types carefully avoid having the first byte of those structures overlap legal leading bytes of a UTF-8 sequence, so you can splice together runs of code with cell and series pointers.
&gt;
&gt; Modern naming would be `DECLARE_NATIVE()` instead of `REBNATIVE()`, `Array*` instead of `REBARR*`, and `OUT` instead of `D_OUT`.

---

I&#39;m happy to report that a bit of hacking led to a successful first test flight of fully C-standards compliant, variadic scanning.

Here&#39;s a quick sample native:

    //
    //  variadic-scan-test: native [
    //
    //  {Demo the routine powering the variadic scanner with 3 items}
    //
    //      item1
    //      item2
    //      item3
    //  ]
    //
    REBNATIVE(variadic_scan_test)
    {
        INCLUDE_PARAMS_OF_VARIADIC_SCAN_TEST;

        REBARR *result = Scan_Va_Managed(
            &quot;if not&quot;, ARG(item1), &quot;[\n&quot;,
                ARG(item2), &quot;| print {Close brace separate from content}\n&quot;,
            &quot;] else [\n&quot;,
                ARG(item3), &quot;| print {Close brace with content}]\n&quot;,
            END
        );
        Init_Block(D_OUT, result);
        return R_OUT;
    }

Invoking it actually worked on the first try, as intended:

    &gt;&gt; variadic-scan-test 1 {Two} [T h r e e]
    == [if not 1 [
        &quot;Two&quot; | print &quot;Close brace separate from content&quot;
    ] else [
        [T h r e e] | print &quot;Close brace with content&quot;
    ]]

Pretty nifty, huh?

If you&#39;re not concerned about the newlines (most **rebDo()** or whatever you call it would perhaps not be) then it could look a bit cleaner.  We could also consider some separate token for that so it didn&#39;t make the code as ugly.</description>
    
    <lastBuildDate>Tue, 27 Feb 2024 23:13:17 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://forum.rebol.info/t/variadic-scanning-in-pure-c-first-example-working/361.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Variadic Scanning in pure C First Example: *working*</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            
          <p><a href="https://forum.rebol.info/t/variadic-scanning-in-pure-c-first-example-working/361/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variadic-scanning-in-pure-c-first-example-working/361/2</link>
        <pubDate>Tue, 27 Feb 2024 23:14:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-361-2</guid>
        <source url="https://forum.rebol.info/t/variadic-scanning-in-pure-c-first-example-working/361.rss">Variadic Scanning in pure C First Example: *working*</source>
      </item>
      <item>
        <title>Variadic Scanning in pure C First Example: *working*</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p><strong>This post from October 2017 announces a turning point in the API, which has been very fruitful.</strong></p>
<p>Many things have changed (including wrapping in a variadic macro that automatically supplies the "END", and being able to <a href="https://forum.rebol.info/t/api-breakthrough-scope-detection-in-javascript-and-c/2157">access native arguments in the code strings</a>).  But the basic idea remains the same.  The bit patterns for internal types carefully avoid having the first byte of those structures overlap legal leading bytes of a UTF-8 sequence, so you can splice together runs of code with cell and series pointers.</p>
<p>Modern naming would be <code>DECLARE_NATIVE()</code> instead of <code>REBNATIVE()</code>, <code>Array*</code> instead of <code>REBARR*</code>, and <code>OUT</code> instead of <code>D_OUT</code>.</p>
</blockquote>
<hr>
<p>I'm happy to report that a bit of hacking led to a successful first test flight of fully C-standards compliant, variadic scanning.</p>
<p>Here's a quick sample native:</p>
<pre><code>//
//  variadic-scan-test: native [
//
//  {Demo the routine powering the variadic scanner with 3 items}
//
//      item1
//      item2
//      item3
//  ]
//
REBNATIVE(variadic_scan_test)
{
    INCLUDE_PARAMS_OF_VARIADIC_SCAN_TEST;

    REBARR *result = Scan_Va_Managed(
        "if not", ARG(item1), "[\n",
            ARG(item2), "| print {Close brace separate from content}\n",
        "] else [\n",
            ARG(item3), "| print {Close brace with content}]\n",
        END
    );
    Init_Block(D_OUT, result);
    return R_OUT;
}
</code></pre>
<p>Invoking it actually worked on the first try, as intended:</p>
<pre><code>&gt;&gt; variadic-scan-test 1 {Two} [T h r e e]
== [if not 1 [
    "Two" | print "Close brace separate from content"
] else [
    [T h r e e] | print "Close brace with content"
]]
</code></pre>
<p>Pretty nifty, huh?</p>
<p>If you're not concerned about the newlines (most <strong>rebDo()</strong> or whatever you call it would perhaps not be) then it could look a bit cleaner.  We could also consider some separate token for that so it didn't make the code as ugly.</p>
          <p><a href="https://forum.rebol.info/t/variadic-scanning-in-pure-c-first-example-working/361/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/variadic-scanning-in-pure-c-first-example-working/361/1</link>
        <pubDate>Wed, 01 Nov 2017 03:05:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-361-1</guid>
        <source url="https://forum.rebol.info/t/variadic-scanning-in-pure-c-first-example-working/361.rss">Variadic Scanning in pure C First Example: *working*</source>
      </item>
  </channel>
</rss>
