<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Refinement Arguments at Head of Args List, Not Tail</title>
    <link>https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331</link>
    <description>In the corpus of code we have so far, it seems to me that when a refinement adds an argument to a function that it would be preferable if that argument would become the first parameter... not tacked onto the end.

Some cases might not be completely obvious one way or another:

    &gt;&gt; append [a b c] [d e]
    == [a b c [d e]]

    &gt;&gt; append:dup [a b c] [d e] 2  ; old way
    == [a b c [d e] [d e]] 

    &gt;&gt; append:dup 2 [a b c] [d e]  ; new idea
    == [a b c [d e] [d e]]

I think it&#39;s better if it&#39;s first, but it&#39;s not earth-shattering.

But in other cases it seems very much an improvement.  Consider the positioning of the argument to FAIL:BLAME...

    foo: func [arg thing] [
        if arg &lt; 0 [
            fail:blame [
               &quot;Here is some long error message:&quot; @thing
               &quot;Whatever...&quot;
            ] $arg
        ]
    ]

    foo: func [arg thing] [
        if arg &lt; 0 [
            fail:blame $arg [
               &quot;Here is some long error message:&quot; @thing
               &quot;Whatever...&quot;
            ]
        ]
    ]

Or an argument to COMPOSE giving a pattern to use:

    compose:pattern [
        some bunch of {{code that}} &lt;spans&gt;
        #multiple lines
        [and could go on for pages]
    ] ${{}}  ; afterthought...

    compose:pattern ${{}} [  ; forethought
        some bunch of {{code that}} &lt;spans&gt;
        #multiple {{lines}}
        [and could go on for pages]
    ]

This goes along with some Haskell philosophy I cited in [Parameter Order in Rebol](https://forum.rebol.info/t/parameter-order-in-rebol/1238):

&gt; *&quot;It&#39;s common practice in Haskell to order function parameters so that parameters which &quot;configure&quot; an operation come first, and the &quot;main thing being operated on&quot; comes last. This is often counter intuitive coming from other languages, since it tends to mean you end up passing the &quot;least important&quot; information first. It&#39;s especially jarring coming from OO where the &quot;main&quot; argument is usually the object on which the method is being invoked, occurring so early in in the call that it&#39;s out of the parameter list entirely!&quot;*

These refinements typically seem to be *configuring*, as if they are changing the function itself, and belong at the head.

e.g. above, the function you&#39;re conceptually applying is **`(compose:pattern ${{}})`**
 
## History Didn&#39;t Do It This Way, With Some Reasons

Refinements are typically listed at the end of the function spec.

From an implementation standpoint, that&#39;s also where their &quot;slots&quot; are in the argument list.

This means that as you are walking the argument list and fulfilling arguments from the callsite, if refinements were used you would have to skip over the &quot;normal&quot; arguments in a first pass, and then come back and fill them later.

Historical Redbols only had to be worried about the order of usage of refinements... if you used them out of order from the declaration, a second pass would be needed.  But using them in order would not require it.

This isn&#39;t a problem for Ren-C...it&#39;s designed for generic parameter reordering (refinements or otherwise) and it has an efficient way to beeline back to slots it skipped on a second pass.

So really the only issue is the mismatch between the visual order in the spec (which may be exposed mechanically by fixed orders of enumeration of FRAME! keys and values), compared with the gathering behavior.  But the disconnect of that order has always been there, with **foo/refine1/refine2** vs. **foo/refine2/refine1** in Redbol... the callsite order may not match the frame order.

## Is It Worth Changing?

The competing (complementary) idea of [CHAIN! dialecting](https://forum.rebol.info/t/dialecting-function-calls-new-weird-powerful/2310) offers something that&#39;s likely even more compelling:

    compose:pattern ${{}} [  ; better than today...
        some bunch of {{code that}} &lt;spans&gt;
        #multiple {{lines}}
        [and could go on for pages]
    ]

    compose:${{}} [  ; ...but this surpasses even that
        some bunch of {{code that}} &lt;spans&gt;
        #multiple {{lines}}
        [and could go on for pages]
    ]

Though it&#39;s kind of up in the air if and when that&#39;s going to get attacked, and how well it will work (it may run afoul of problems in binding, etc.)

My instincts tell me that it&#39;s worth changing.  In practice, refinements that take arguments are not super common... but when they do happen, being up front seems to make the most sense.</description>
    
    <lastBuildDate>Sun, 17 Nov 2024 01:16:10 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Refinement Arguments at Head of Args List, Not Tail</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2331">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In the corpus of code we have so far, it seems to me that when a refinement adds an argument to a function that it would be preferable if that argument would become the first parameter... not tacked onto the end.</p>
</blockquote>
</aside>
<p>As a counterexample... there's <strong><code>DO:ARGS</code></strong></p>
<pre><code>do %some-script.r

do:args %some-script.r ["hello" "world"]
</code></pre>
<p>That particular case has a possible workaround, that since DO is no longer used to evaluate blocks, the args could go in a block as part of a "do spec"</p>
<pre><code>do [%some-script.r, args: ["hello" "world"]]
</code></pre>
<p>I don't know, but I thought I'd point out the first example I'd noticed where injecting the argument first wasn't ideal.</p>
<p>Of course, these cases could do what we have to do with configuring refinements that aren't where we want them today, which is to use APPLY</p>
<pre><code>do // [%some-script.r :args ["hello" "world"]]
</code></pre>
<p><em>(Note: I'm still wondering if APPLY should use SET-WORD!s instead of ":refinements", there are tradeoffs for each...)</em></p>
          <p><a href="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/6</link>
        <pubDate>Sun, 17 Nov 2024 01:16:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2331-6</guid>
        <source url="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331.rss">Refinement Arguments at Head of Args List, Not Tail</source>
      </item>
      <item>
        <title>Refinement Arguments at Head of Args List, Not Tail</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>TUPLE! is the lowest (giving the pleasing hierarchy in terms of "heft"...lighter things are tighter).</p>
<p>One of the problems with putting arguments into the chain/tuples is that binding gets tricky.  There's some open issues with that, but if you embed arguments into a sequence then you're tying their binding up in the binding of that sequence.  It's still a ways out.</p>
<p>I think I still would prefer the "configuring" refinements to put their arguments earlier, it really seems to be preferable in practice.</p>
<pre><code>&gt;&gt; join:with '+ fence! ['a 'b 'c]
== {a + b + c}
</code></pre>
          <p><a href="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/5</link>
        <pubDate>Sat, 16 Nov 2024 15:12:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2331-5</guid>
        <source url="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331.rss">Refinement Arguments at Head of Args List, Not Tail</source>
      </item>
      <item>
        <title>Refinement Arguments at Head of Args List, Not Tail</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="2331">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>But I was thinking TUPLE! could do this more generically:</p>
<p><code>append:dup.2 [a b c] [d e]</code></p>
</blockquote>
</aside>
<p>Actually, this was what I wrote first… but then I remembered that CHAIN! binds tighter than TUPLE!, so this wouldn’t make sense. Or am I misremembering? If this can be done, I think it looks better than using CHAIN!.</p>
          <p><a href="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/4</link>
        <pubDate>Sat, 16 Nov 2024 15:07:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2331-4</guid>
        <source url="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331.rss">Refinement Arguments at Head of Args List, Not Tail</source>
      </item>
      <item>
        <title>Refinement Arguments at Head of Args List, Not Tail</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Using another CHAIN! element was intended to let you drop the refinement altogether, to accomplish briefer things like:</p>
<pre><code>append:2 [a b c] [d e]
</code></pre>
<p>But I was thinking TUPLE! could do this more generically:</p>
<pre><code>append:dup.2 [a b c] [d e]
</code></pre>
<p>Even so, if you used a variable, it would probably have to be decorated:</p>
<pre><code>append:dup.(n + 1) [a b c] [d e]

append:dup.@n [a b c] [d e]
</code></pre>
<p>The relatively "noiseless" injection to the head of the args list feels like a better answer to me:</p>
<pre><code>append:dup 2 [a b c] [d e]

append:dup n [a b c] [d e]
</code></pre>
          <p><a href="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/3</link>
        <pubDate>Sat, 16 Nov 2024 12:59:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2331-3</guid>
        <source url="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331.rss">Refinement Arguments at Head of Args List, Not Tail</source>
      </item>
      <item>
        <title>Refinement Arguments at Head of Args List, Not Tail</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>A thought… might it be possible to do something like this?</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">append:dup:2 [a b c] [d e]
</code></pre>
<p>Basically, this would mean that refinements don’t add new arguments <em>per se</em> — instead such cases can be unified with CHAIN! dialecting.</p>
<p>(I feel certain that we’ve discussed something like this before, but I can’t seem to find it with a quick search.)</p>
          <p><a href="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/2</link>
        <pubDate>Sat, 16 Nov 2024 12:31:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2331-2</guid>
        <source url="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331.rss">Refinement Arguments at Head of Args List, Not Tail</source>
      </item>
      <item>
        <title>Refinement Arguments at Head of Args List, Not Tail</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In the corpus of code we have so far, it seems to me that when a refinement adds an argument to a function that it would be preferable if that argument would become the first parameter... not tacked onto the end.</p>
<p>Some cases might not be completely obvious one way or another:</p>
<pre><code>&gt;&gt; append [a b c] [d e]
== [a b c [d e]]

&gt;&gt; append:dup [a b c] [d e] 2  ; old way
== [a b c [d e] [d e]] 

&gt;&gt; append:dup 2 [a b c] [d e]  ; new idea
== [a b c [d e] [d e]]
</code></pre>
<p>I think it's better if it's first, but it's not earth-shattering.</p>
<p>But in other cases it seems very much an improvement.  Consider the positioning of the argument to FAIL:BLAME...</p>
<pre><code>foo: func [arg thing] [
    if arg &lt; 0 [
        fail:blame [
           "Here is some long error message:" @thing
           "Whatever..."
        ] $arg
    ]
]

foo: func [arg thing] [
    if arg &lt; 0 [
        fail:blame $arg [
           "Here is some long error message:" @thing
           "Whatever..."
        ]
    ]
]
</code></pre>
<p>Or an argument to COMPOSE giving a pattern to use:</p>
<pre><code>compose:pattern [
    some bunch of {{code that}} &lt;spans&gt;
    #multiple lines
    [and could go on for pages]
] ${{}}  ; afterthought...

compose:pattern ${{}} [  ; forethought
    some bunch of {{code that}} &lt;spans&gt;
    #multiple {{lines}}
    [and could go on for pages]
]
</code></pre>
<p>This goes along with some Haskell philosophy I cited in <a href="https://forum.rebol.info/t/parameter-order-in-rebol/1238">Parameter Order in Rebol</a>:</p>
<blockquote>
<p><em>"It's common practice in Haskell to order function parameters so that parameters which "configure" an operation come first, and the "main thing being operated on" comes last. This is often counter intuitive coming from other languages, since it tends to mean you end up passing the "least important" information first. It's especially jarring coming from OO where the "main" argument is usually the object on which the method is being invoked, occurring so early in in the call that it's out of the parameter list entirely!"</em></p>
</blockquote>
<p>These refinements typically seem to be <em>configuring</em>, as if they are changing the function itself, and belong at the head.</p>
<p>e.g. above, the function you're conceptually applying is <strong><code>(compose:pattern ${{}})</code></strong></p>
<h2><a name="p-7889-history-didnt-do-it-this-way-with-some-reasons-1" class="anchor" href="https://forum.rebol.info#p-7889-history-didnt-do-it-this-way-with-some-reasons-1"></a>History Didn't Do It This Way, With Some Reasons</h2>
<p>Refinements are typically listed at the end of the function spec.</p>
<p>From an implementation standpoint, that's also where their "slots" are in the argument list.</p>
<p>This means that as you are walking the argument list and fulfilling arguments from the callsite, if refinements were used you would have to skip over the "normal" arguments in a first pass, and then come back and fill them later.</p>
<p>Historical Redbols only had to be worried about the order of usage of refinements... if you used them out of order from the declaration, a second pass would be needed.  But using them in order would not require it.</p>
<p>This isn't a problem for Ren-C...it's designed for generic parameter reordering (refinements or otherwise) and it has an efficient way to beeline back to slots it skipped on a second pass.</p>
<p>So really the only issue is the mismatch between the visual order in the spec (which may be exposed mechanically by fixed orders of enumeration of FRAME! keys and values), compared with the gathering behavior.  But the disconnect of that order has always been there, with <strong>foo/refine1/refine2</strong> vs. <strong>foo/refine2/refine1</strong> in Redbol... the callsite order may not match the frame order.</p>
<h2><a name="p-7889-is-it-worth-changing-2" class="anchor" href="https://forum.rebol.info#p-7889-is-it-worth-changing-2"></a>Is It Worth Changing?</h2>
<p>The competing (complementary) idea of <a href="https://forum.rebol.info/t/dialecting-function-calls-new-weird-powerful/2310">CHAIN! dialecting</a> offers something that's likely even more compelling:</p>
<pre><code>compose:pattern ${{}} [  ; better than today...
    some bunch of {{code that}} &lt;spans&gt;
    #multiple {{lines}}
    [and could go on for pages]
]

compose:${{}} [  ; ...but this surpasses even that
    some bunch of {{code that}} &lt;spans&gt;
    #multiple {{lines}}
    [and could go on for pages]
]
</code></pre>
<p>Though it's kind of up in the air if and when that's going to get attacked, and how well it will work (it may run afoul of problems in binding, etc.)</p>
<p>My instincts tell me that it's worth changing.  In practice, refinements that take arguments are not super common... but when they do happen, being up front seems to make the most sense.</p>
          <p><a href="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331/1</link>
        <pubDate>Tue, 12 Nov 2024 14:16:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2331-1</guid>
        <source url="https://forum.rebol.info/t/refinement-arguments-at-head-of-args-list-not-tail/2331.rss">Refinement Arguments at Head of Args List, Not Tail</source>
      </item>
  </channel>
</rss>
