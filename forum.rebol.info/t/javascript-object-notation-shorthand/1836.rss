<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>JavaScript object notation shorthand</title>
    <link>https://forum.rebol.info/t/javascript-object-notation-shorthand/1836</link>
    <description>I saw this syntax in JavaScript and thought it might be some feature from TypeScript or some other higher level layer:

    let text = &quot;Hello World&quot;
    let state = { fruit: &quot;banana&quot; }

    let obj = { text, state }

But it turns out in plain JavaScript that now does the same thing as:

    let obj = { text: &quot;Hello World&quot;, state: { fruit: &quot;banana&quot; } }

In fact they also have &quot;computed property names&quot;:

    let prop = &#39;foo&#39;;
    let o = {
        [prop]: &#39;hey&#39;,
        [&#39;b&#39; + &#39;ar&#39;]: &#39;there&#39;
    }

  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer

Ren-C is inches away from doing the computed property names in MAKE OBJECT! (using SET-GROUP! rather than SET-BLOCK! would be more appropriate).

But because of the freeform nature of the code block in MAKE OBJECT!, the appearance of a WORD! alone can&#39;t indicate an embedded field.

**It may be that there should be a less freeform alternative to MAKE OBJECT! which doesn&#39;t let you put arbitrary code in the middle of it.**  Or at the very least, you put that code in GROUP!s.

Perhaps MAKE OBJECT! itself should have that requirement.  It could be like PARSE and just ignore the GROUP!s as it goes.</description>
    
    <lastBuildDate>Mon, 02 Jan 2023 14:14:52 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>JavaScript object notation shorthand</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>In essence, there's already three BLOCK! constructors in traditional Rebol (REDUCE, COMPOSE and COLLECT) of which COLLECT is perhaps the most versatile. It does require KEEP for most values which is likely why it's not the only one, but gives you access to all of the other language features:</p>
<pre><code class="lang-nohighlight">; alt-ARRAY
;
collect [
    repeat value 4 [
        keep value
    ]
]
</code></pre>
<p>A few variations on KEEP would be similarly useful in OBJECT! and MAP! creation:</p>
<pre><code class="lang-nohighlight">collect-map [
    keep "key" "value"
    spread another-map
]

collect-object [
    keep foo: "Bar"
    keep ["a" 123] "A value"
    spread another-object
]
</code></pre>
<p>I do like the idea of implicit collection though as well. I don't know if it's at all possible to mix implicit/explicit collection in any sane way.</p>
<hr>
<p>This would completely mess with any trivial noodling around with the language, but you could use A in place of CONSTRUCTOR in the previous posting:</p>
<pre><code class="lang-nohighlight">a block! [
    1 2 [3 4] spread [5 6] a map! [
        combine ["a" 123] "A value"
        from another-key
        spread another-map
    ]
]
</code></pre>
          <p><a href="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/4</link>
        <pubDate>Mon, 02 Jan 2023 14:06:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1836-4</guid>
        <source url="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836.rss">JavaScript object notation shorthand</source>
      </item>
      <item>
        <title>JavaScript object notation shorthand</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1836">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I had to unlearn the idea that <code>[ ]</code> and <code>{ }</code> notation were <em>literals</em>; rather they are <em>constructors</em>.</p>
</blockquote>
</aside>
<p>I am not completely settled on my ideas about what I have called "fences":</p>
<p><a href="https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727" class="inline-onebox">{ Rethinking Braces }... as an array type?</a></p>
<p>The idea that braces evaluate to unstable fence isotopes and then decay into objects is so strange that I want to try it just to know what that might be like (!)</p>
          <p><a href="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/3</link>
        <pubDate>Mon, 02 Jan 2023 14:01:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1836-3</guid>
        <source url="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836.rss">JavaScript object notation shorthand</source>
      </item>
      <item>
        <title>JavaScript object notation shorthand</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>In understanding JavaScript more from a Rebol-brain (or even just with JSON priors), I had to unlearn the idea that <code>[ ]</code> and <code>{ }</code> notation were <em>literals</em>; rather they are <em>constructors</em>. I think this distinction is why JavaScript is at best awkwardly Lispy. Also constructors can't self-reference so e.g. within an object you can't reference a prior key set in the same construction (<code>{'a': 123, 'b': &lt; no way to get 'a' &gt;}</code>), although one 'benefit' to this is you can't inadvertently create a circularly referenced structure.</p>
<p>I do like the constructors in principle, but again in Rebol-land my inclination is to do this with language rather than syntaxâ€”the question is given how much heavy lifting syntax does in constructors, how much language/convention would need to be used to get some a degree of parity without being overly verbose:</p>
<pre><code class="lang-plaintext">[
    1, 2, [3, 4], ...[5, 6], {
        ["a" + 123]: "A value",
        anotherKey,
        ...anotherMap
    }
]

constructor block! [
    1 2 [3 4] spread [5 6] constructor map! [
        combine ["a" 123] "A value"
        from another-key
        spread another-map
    ]
]
</code></pre>
<p>I don't suppose it's a trivial exercise.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1836">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It may be that there should be a less freeform alternative to MAKE OBJECT! which doesn't let you put arbitrary code in the middle of it.</p>
</blockquote>
</aside>
<p>This sounds like CONSTRUCT as was.</p>
          <p><a href="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/2</link>
        <pubDate>Mon, 02 Jan 2023 13:36:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1836-2</guid>
        <source url="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836.rss">JavaScript object notation shorthand</source>
      </item>
      <item>
        <title>JavaScript object notation shorthand</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I saw this syntax in JavaScript and thought it might be some feature from TypeScript or some other higher level layer:</p>
<pre><code>let text = "Hello World"
let state = { fruit: "banana" }

let obj = { text, state }
</code></pre>
<p>But it turns out in plain JavaScript that now does the same thing as:</p>
<pre><code>let obj = { text: "Hello World", state: { fruit: "banana" } }
</code></pre>
<p>In fact they also have "computed property names":</p>
<pre><code>let prop = 'foo';
let o = {
    [prop]: 'hey',
    ['b' + 'ar']: 'there'
}
</code></pre>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer" class="inline-onebox">Object initializer - JavaScript | MDN</a></p>
<p>Ren-C is inches away from doing the computed property names in MAKE OBJECT! (using SET-GROUP! rather than SET-BLOCK! would be more appropriate).</p>
<p>But because of the freeform nature of the code block in MAKE OBJECT!, the appearance of a WORD! alone can't indicate an embedded field.</p>
<p><strong>It may be that there should be a less freeform alternative to MAKE OBJECT! which doesn't let you put arbitrary code in the middle of it.</strong>  Or at the very least, you put that code in GROUP!s.</p>
<p>Perhaps MAKE OBJECT! itself should have that requirement.  It could be like PARSE and just ignore the GROUP!s as it goes.</p>
          <p><a href="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/1</link>
        <pubDate>Tue, 07 Jun 2022 00:07:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1836-1</guid>
        <source url="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836.rss">JavaScript object notation shorthand</source>
      </item>
  </channel>
</rss>
