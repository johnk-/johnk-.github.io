<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>JavaScript object notation shorthand</title>
    <link>https://forum.rebol.info/t/javascript-object-notation-shorthand/1836</link>
    <description>I saw this syntax in JavaScript and thought it might be some feature from TypeScript or some other higher level layer:

    let text = &quot;Hello World&quot;
    let state = { fruit: &quot;banana&quot; }

    let obj = { text, state }

But it turns out in plain JavaScript that now does the same thing as:

    let obj = { text: &quot;Hello World&quot;, state: { fruit: &quot;banana&quot; } }

In fact they also have &quot;computed property names&quot;:

    let prop = &#39;foo&#39;;
    let o = {
        [prop]: &#39;hey&#39;,
        [&#39;b&#39; + &#39;ar&#39;]: &#39;there&#39;
    }

  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer

Ren-C is inches away from doing the computed property names in MAKE OBJECT! (using SET-GROUP! rather than SET-BLOCK! would be more appropriate).

But because of the freeform nature of the code block in MAKE OBJECT!, the appearance of a WORD! alone can&#39;t indicate an embedded field.

**It may be that there should be a less freeform alternative to MAKE OBJECT! which doesn&#39;t let you put arbitrary code in the middle of it.**  Or at the very least, you put that code in GROUP!s.

Perhaps MAKE OBJECT! itself should have that requirement.  It could be like PARSE and just ignore the GROUP!s as it goes.</description>
    
    <lastBuildDate>Tue, 07 Jun 2022 00:07:04 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>JavaScript object notation shorthand</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I saw this syntax in JavaScript and thought it might be some feature from TypeScript or some other higher level layer:</p>
<pre><code>let text = "Hello World"
let state = { fruit: "banana" }

let obj = { text, state }
</code></pre>
<p>But it turns out in plain JavaScript that now does the same thing as:</p>
<pre><code>let obj = { text: "Hello World", state: { fruit: "banana" } }
</code></pre>
<p>In fact they also have "computed property names":</p>
<pre><code>let prop = 'foo';
let o = {
    [prop]: 'hey',
    ['b' + 'ar']: 'there'
}
</code></pre>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer" class="inline-onebox">Object initializer - JavaScript | MDN</a></p>
<p>Ren-C is inches away from doing the computed property names in MAKE OBJECT! (using SET-GROUP! rather than SET-BLOCK! would be more appropriate).</p>
<p>But because of the freeform nature of the code block in MAKE OBJECT!, the appearance of a WORD! alone can't indicate an embedded field.</p>
<p><strong>It may be that there should be a less freeform alternative to MAKE OBJECT! which doesn't let you put arbitrary code in the middle of it.</strong>  Or at the very least, you put that code in GROUP!s.</p>
<p>Perhaps MAKE OBJECT! itself should have that requirement.  It could be like PARSE and just ignore the GROUP!s as it goes.</p>
          <p><a href="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/javascript-object-notation-shorthand/1836/1</link>
        <pubDate>Tue, 07 Jun 2022 00:07:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1836-1</guid>
        <source url="https://forum.rebol.info/t/javascript-object-notation-shorthand/1836.rss">JavaScript object notation shorthand</source>
      </item>
  </channel>
</rss>
