<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</title>
    <link>https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924</link>
    <description>There&#39;s a snazzy new potential for giving more informative messages / logs from failed parses... which means we now have a more interesting option than we might have had before.

Imagine something like:

    &gt;&gt; parse &quot;aaa&quot; [some &quot;a&quot; some &quot;b&quot;]
    ** Error: SOME requires at least one match
    ** Where: [some &quot;a&quot; \\ some &quot;b&quot; \\]
    ; Note: this failure can be intercepted by TRY, EXCEPT, ATTEMPT

It can&#39;t be perfect unless it maintains some kind of large error tree that accumulates the list of all the reasons it decided to fail, so you might have to be in a debugging mode to ask it to give you a bigger diagnostic.  But we can build it now with the participation of the combinators themselves.

**But not only this, we could open up the full spectrum of return values.**  Right now if your parse returns NULL, it has to be contorted into a &quot;heavy null&quot; PACK to avoid accidentally cuing an ELSE.  (Similar contortions for void.)

    result: parse block rules except e -&gt; [print &quot;Got an error&quot;, return ~]

    ; If you got here, you know result is good
    ; Even if it was a purposefully returned NULL, etc.

There&#39;d be some way to rig this up without using enfix.  I might make things more lax about letting you assign error antiforms, because the isotope will bubble through and cause a problem anyway.  So you could write something like:

     if raised? result: parse block rules [
         print &quot;You have a failure, use ^result to get it&quot;
     ]

If you were willing to collapse failure down to a NULL or somesuch, or didn&#39;t even care about the result, you could just TRY it.

     try parse block rules

## Too Good Not To Be The Default

Of course you&#39;ll be able to reskin it however you like for the R3C&#39;s or R3Chius out there.  But I think this looks like a perfect convergence to put in the box.

Errors aren&#39;t going to be that interesting on day one, but it&#39;s good to point the ship in the right direction.</description>
    
    <lastBuildDate>Fri, 13 Sep 2024 00:11:01 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1924">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So this is good when you're writing an expression that's supposed to return a value. But if you're only interested in if the parse reached the end or not, it's not good enough.</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; try parse "aaabbb" [some "a" opt some "b"]
== ~null~  ; anti
</code></pre>
<p>That parse reached the end, but the product of the OPT combinator inside the parse block when it doesn't match is NULL. So <strong>if try parse ...</strong> is unfortunately not a general answer to testing if a parse completed.</p>
</blockquote>
</aside>
<h2><a name="p-7180-i-think-i-have-the-answer-1" class="anchor" href="https://forum.rebol.info#p-7180-i-think-i-have-the-answer-1"></a>I Think I Have The Answer...</h2>
<p>...and that answer is <strong>PARSE/MATCH</strong>.</p>
<pre><code>&gt;&gt; parse/match "aaa" [some #a]
== "aaa"

&gt;&gt; parse/match "aaa" [some #b]
== ~null~  ; anti
</code></pre>
<p>If the only thing you're interested in testing for success or failure, then this variant of PARSE which evaluates to either the input series or null will give you a branch inhibitor result only if the parse does not succeed.</p>
<p>So don't do <strong>if parse ...</strong> unless you are testing for results of the rules that are logically synthesized based on the idea that's what the rules are outputting.</p>
<pre><code> if parse "ttt" [some "t" (okay) | some "f" (null)] [
     ...
 ]
</code></pre>
<p>If you're using arbitrary rules and not controlling the result carefully, you want PARSE/MATCH and not TRY PARSE.</p>
<p>The only uses of TRY PARSE should be if you don't care if the parse reaches the end <strong>and</strong> you don't care if the rules fail.  If you only want to allow for not reaching the end of the input, I've added PARSE/RELAX.</p>
<pre><code>&gt;&gt; parse "aaa" [#a]
== #a
** Error: PARSE partially matched the input, but didn't reach the tail

&gt;&gt; parse/relax "aaa" [#a]
== #a

&gt;&gt; parse "aaa" [#b]
** Error: PARSE BLOCK! combinator did not match input

&gt;&gt; parse/relax "aaa" [#b]
** Error: PARSE BLOCK! combinator did not match input
</code></pre>
<p><strong>It took a long time to get here, but I think this gives pretty complete coverage.</strong></p>
          <p><a href="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/5</link>
        <pubDate>Thu, 22 Feb 2024 08:50:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1924-5</guid>
        <source url="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924.rss">TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</source>
      </item>
      <item>
        <title>TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="1924">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Or if you just wanted it to ignore success or failure in a "classic" way, use TRY:</p>
<pre><code>root: try parse pdfname [between &lt;here&gt; ".pdf"]
</code></pre>
<p><em>That seems a good enough way to ask for the bad enough thing.</em> It will give you a NULL if there's no ".pdf" anywhere, and what's before .pdf for anything up-to-and-including <strong><code>something.pdfoobar</code></strong></p>
</blockquote>
</aside>
<p>So this is good when you're writing an expression that's supposed to return a value.  But if you're only interested in if the parse reached the end or not, it's not good enough.</p>
<pre><code>&gt;&gt; try parse "aaabbb" [some "a" opt some "b"]
== ~null~  ; anti
</code></pre>
<p>That parse reached the end, but the product of the OPT combinator inside the parse block when it doesn't match is NULL.  So <strong>if try parse ...</strong> is unfortunately not a general answer to testing if a parse completed.</p>
<ul>
<li>
<p><strong>if not raised? parse ...</strong> works but is overly verbose.</p>
</li>
<li>
<p><strong>if unraised? parse ...</strong> is a little shorter but awkward.</p>
</li>
<li>
<p><strong>if ok? parse ...</strong> is no longer an option due to the meaning of okay in <a href="https://forum.rebol.info/t/flexible-logic-system-terminology/2252">Flexible Logic</a></p>
</li>
<li>
<p><strong>if try? parse ...</strong> builds on the existing TRY concept so you can see the relationship, but is a bit weird.</p>
</li>
<li>
<p><strong>if did parse ...</strong> looks nice but DID is taken for something else, that I don't think should be conflated with error defusion.</p>
</li>
<li>
<p><strong>if success? parse ...</strong> or <strong>if succeeded? parse ...</strong> is a little bit like OK? in the sense that success is a pretty open-ended concept.  But TRY is tied up a bit with "success" so SUCCESS? as the complement to RAISED? isn't a terrible thing.</p>
</li>
<li>
<p><strong>if good? parse ...</strong> is weird, and the suggestion of BAD? as  a synonym for RAISED? is weird also.</p>
</li>
<li>
<p><strong>if parse? ...</strong> as a different form of PARSE that just returns true or false based on reaching the end is something that has shown up from time to time, but I've never been crazy about it.  Functions ending in question mark tend to take one argument.  This is like it's testing if something is a parse-state object or similar, and I can't quite read it as "if parse reached end".</p>
</li>
<li>
<p><strong>if completed? parse ...</strong> is appealing, it's a bit of a parallel to Rebol2's FOUND? to pair with FIND.  It leads to a world where <strong>completed? null</strong> is true.  While not being a generic word it would function generically to other things that might raise failures leading to misuse, and it's a long word.</p>
</li>
</ul>
<p>Everything has its upsides and downsides.</p>
<h2><a name="p-6735-or-a-refinement-to-parse-or-combinator-1" class="anchor" href="https://forum.rebol.info#p-6735-or-a-refinement-to-parse-or-combinator-1"></a>Or... A Refinement to PARSE, or Combinator?</h2>
<p>For the sake of covering all the bases, I'll mention this could be attacked on the insides of parse, as well.</p>
<pre><code>if parse/completed "aaabbb" [some "a" try some "b"] ...

if parse/tail? "aaabbb" [some "a" try some "b"]

if parse "aaabbb" [completed? [some "a" try some "b"]] ...

if parse "aaabbb" [some "a" try some "b" || accept &lt;end?&gt;] ...
</code></pre>
<h2><a name="p-6735-experience-probably-informs-this-2" class="anchor" href="https://forum.rebol.info#p-6735-experience-probably-informs-this-2"></a>Experience Probably Informs This</h2>
<p>I think it's hard to see clearly in particular having seen so many different return modes of PARSE over time.</p>
<p>People can of course easily make their own shorthands, even PARSE?, if they like it.</p>
          <p><a href="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/4</link>
        <pubDate>Tue, 28 Nov 2023 00:39:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1924-4</guid>
        <source url="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924.rss">TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</source>
      </item>
      <item>
        <title>TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>Since I feel RAISE of an error is such a superior option, I thought it would be worthwhile to go ahead and retrofit PARSE3 to do this as well.</strong></p>
<p>It really clarifies things.  For instance, there was some rather old code that looked like this:</p>
<pre><code>let directives: collect [
    let i
    if block? prior [
        parse3 prior [some [set i: issue! (keep i)]]
    ]
]
</code></pre>
<p>It predates COLLECT being a feature of PARSE3, so it uses regular COLLECT (which lacks the nice properties like backtracking the collected data when rules fail).</p>
<p>What it was trying to do was that you'd have something like:</p>
<pre><code>[#foo #baz #bar a b c d ...]
</code></pre>
<p>It would collect any issues at the head of the block, e.g. <strong><code>[#foo #baz #bar]</code></strong>.  There may be no issues at all, in which case the collected result would be an empty block <strong><code>[]</code></strong></p>
<p><em>But using a plain SOME rule is bad way of conveying this.</em>   The PARSE is failing, and that failure is just treated casually.  At the very least, this should be an <strong><code>opt some</code></strong>.</p>
<p>Then we have the issue of not reaching the end, and that being "okay".  But the okayness is nowhere in the rule formulation, meaning the person reading this code is in the dark.  It needs something like a <strong><code>to &lt;end&gt;</code></strong> or an <strong><code>accept (okay)</code></strong>.</p>
<pre><code>let directives: collect [
    let i
    if block? prior [
        parse3 prior [
            try some [set i: issue! (keep i)]
            accept (ok)
        ]
    ]
]
</code></pre>
<p>Of course, modern UPARSE is much slicker (!)</p>
<pre><code>let directives: parse prior [accept collect opt some keep issue!]
</code></pre>
<h2>
<a name="it-caught-the-fact-that-about-has-been-broken-for-years-1" class="anchor" href="https://forum.rebol.info#it-caught-the-fact-that-about-has-been-broken-for-years-1"></a>It caught the fact that ABOUT has been broken for <em>years</em>!</h2>
<p>If you look way back in the history of open source Rebol, you will find an simple dialect for printing out the ABOUT information.  The dialect looked like this:</p>
<pre><code>make-banner [
    *
    -
    "REBOL 3.0 [Alpha Test]"
    -
    = Copyright: [system/build/year "REBOL Technologies"]
    = "" "All rights reserved."
    = Website:  "www.REBOL.com"
    -
    = Version:  system/version
    = Platform: system/platform
    = Build:    system/build
    = Warning:  "For testing purposes only. Use at your own risk."
    -
    = Language: system/locale/language*
    = Locale:   system/locale/locale*
    = Home:     [to-local-file system/options/home]
    -
    *
]
</code></pre>
<p>By means of the <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/mezz-banner.r#L14">generation function MAKE-BANNER</a> it would transform into an asterisk-laden box, with the substitutions made:</p>
<pre><code>**************************************************************************
**                                                                      **
**  REBOL 3.0 [Alpha Test]                                              **
**                                                                      **
**    Copyright: 2014 REBOL Technologies                                **
**               All rights reserved.                                   **
**    Website:   www.REBOL.com                                          **
**                                                                      **
**    Version:   2.101.0.4.40                                           **
**    Platform:  Linux libc-x64                                         **
**    Build:     7-Nov-2014/18:50:11                                    **
**    Warning:   For testing purposes only. Use at your own risk.       **
**                                                                      **
**    Language:  none                                                   **
**    Locale:    none                                                   **
**    Home:      ./                                                     **
**                                                                      **
**************************************************************************
</code></pre>
<p>Simple though it is, I think it is a pretty good example of how you can "rethink" your problems in a dialect to pare down your code to express your intent.</p>
<p><strong>But it was based on a PARSE rule with <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/mezz-banner.r#L22">no check for whether the parse had actually succeeded or failed</a>!</strong>  This means that when paths like <strong>system/version</strong> were changed to tuples like <strong>system.version</strong> the parse rule stopped working, and only printed the top part of the box in Ren-C:</p>
<pre><code>**************************************************************************
**                                                                      **
**  REBOL 3.0 (Ren-C branch)                                            **
**                                                                      **
**    Copyright: 2012 REBOL Technologies                                **
**    Copyright: 2012-2021 Ren-C Open Source Contributors               **
**               Licensed Under LGPL 3.0, see LICENSE.                  **
**    Website:   http://github.com/metaeducation/ren-c                  **
</code></pre>
<p>Even though the tests would run ABOUT to make sure it didn't crash, it didn't catch this half-output-box.</p>
<h2>
<a name="i-was-convinced-now-im-more-convinced-2" class="anchor" href="https://forum.rebol.info#i-was-convinced-now-im-more-convinced-2"></a>I Was Convinced, Now I'm More Convinced</h2>
<p>As I go through the system and fix/clarify these issues, there's no regrets on the change.</p>
<p>Red's lack of definitional errors means they couldn't embrace the idea even if they wanted to.  Triggering an error when a parse didn't succeed would be conflated with any other error that happened inside the parse (typos etc.) so trapping errors would be impractical.  Oh well... <img src="https://forum.rebol.info/images/emoji/twitter/roll_eyes.png?v=12" title=":roll_eyes:" class="emoji" alt=":roll_eyes:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/3</link>
        <pubDate>Sat, 16 Sep 2023 01:09:32 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1924-3</guid>
        <source url="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924.rss">TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</source>
      </item>
      <item>
        <title>TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Looking at a parse rule in <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a>'s Pharmac project, I saw this:</p>
<pre><code>; get the SAnnnn part of the pdf name
;
root: parse pdfname [between &lt;here&gt; ".pdf"]
</code></pre>
<p><em>It's a clean, casual usage of the value-synthesizing abilities of UPARSE...</em></p>
<p><em>...and I think that cleanliness should offer you safety by default.</em></p>
<p>So it seems that if the filename is <strong><code>aspirin.pdf.zip</code></strong> you should get an error raised to draw your attention to the unexpected circumstance.</p>
<p>If you didn't want an error, you have a lot of options to craft your rules</p>
<pre><code>root: parse pdfname [between &lt;here&gt; ".pdf" elide ...]

parse pdfname [root: between &lt;here&gt; ".pdf" ...]

parse pdfname [root: between &lt;here&gt; ".pdf" to &lt;end&gt;]

root: parse pdfname [between &lt;here&gt; ".pdf" &lt;end&gt; | accept (#badfile)]
</code></pre>
<p>etc.  UPARSE dances and sings.  <img src="https://forum.rebol.info/images/emoji/twitter/man_dancing.png?v=12" title=":man_dancing:" class="emoji" alt=":man_dancing:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/studio_microphone.png?v=12" title=":studio_microphone:" class="emoji" alt=":studio_microphone:" loading="lazy" width="20" height="20"></p>
<p>Or if you just wanted it to ignore success or failure in a "classic" way, use TRY:</p>
<pre><code>root: try parse pdfname [between &lt;here&gt; ".pdf"]
</code></pre>
<p><em>That seems a good enough way to ask for the bad enough thing.</em>  It will give you a NULL if there's no ".pdf" anywhere, and what's before .pdf for anything up-to-and-including <strong><code>something.pdfoobar</code></strong></p>
<h2>
<a name="i-say-again-too-good-not-to-be-the-default-1" class="anchor" href="https://forum.rebol.info#i-say-again-too-good-not-to-be-the-default-1"></a>I Say Again: "Too Good Not To Be The Default"</h2>
<p>...but it's a pretty big change, which will take some figuring.</p>
          <p><a href="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/2</link>
        <pubDate>Fri, 11 Aug 2023 14:32:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1924-2</guid>
        <source url="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924.rss">TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</source>
      </item>
      <item>
        <title>TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's a snazzy new potential for giving more informative messages / logs from failed parses... which means we now have a more interesting option than we might have had before.</p>
<p>Imagine something like:</p>
<pre><code>&gt;&gt; parse "aaa" [some "a" some "b"]
** Error: SOME requires at least one match
** Where: [some "a" \\ some "b" \\]
; Note: this failure can be intercepted by TRY, EXCEPT, ATTEMPT
</code></pre>
<p>It can't be perfect unless it maintains some kind of large error tree that accumulates the list of all the reasons it decided to fail, so you might have to be in a debugging mode to ask it to give you a bigger diagnostic.  But we can build it now with the participation of the combinators themselves.</p>
<p><strong>But not only this, we could open up the full spectrum of return values.</strong>  Right now if your parse returns NULL, it has to be contorted into a "heavy null" PACK to avoid accidentally cuing an ELSE.  (Similar contortions for void.)</p>
<pre><code>result: parse block rules except e -&gt; [print "Got an error", return ~]

; If you got here, you know result is good
; Even if it was a purposefully returned NULL, etc.
</code></pre>
<p>There'd be some way to rig this up without using enfix.  I might make things more lax about letting you assign error antiforms, because the isotope will bubble through and cause a problem anyway.  So you could write something like:</p>
<pre><code> if raised? result: parse block rules [
     print "You have a failure, use ^result to get it"
 ]
</code></pre>
<p>If you were willing to collapse failure down to a NULL or somesuch, or didn't even care about the result, you could just TRY it.</p>
<pre><code> try parse block rules
</code></pre>
<h2>
<a name="too-good-not-to-be-the-default-1" class="anchor" href="https://forum.rebol.info#too-good-not-to-be-the-default-1"></a>Too Good Not To Be The Default</h2>
<p>Of course you'll be able to reskin it however you like for the R3C's or R3Chius out there.  But I think this looks like a perfect convergence to put in the box.</p>
<p>Errors aren't going to be that interesting on day one, but it's good to point the ship in the right direction.</p>
          <p><a href="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924/1</link>
        <pubDate>Fri, 19 Aug 2022 06:23:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1924-1</guid>
        <source url="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924.rss">TRY PARSE + PARSE EXCEPT : *RAISE* On Mismatch</source>
      </item>
  </channel>
</rss>
