<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Shall we CONTINUE?</title>
    <link>https://forum.rebol.info/t/shall-we-continue/1790</link>
    <description>At some point I added the ability of CONTINUE to take a parameter.  The idea was that CONTINUE with a parameter would act the same as if the loop body had completed with that value.  One place this is most useful is MAP-EACH:

    &gt;&gt; map-each x [1 2 3] [
           if x = 2 [continue &lt;twenty&gt;] else [x * 10]
       ]
    == [10 &lt;twenty&gt; 30]

But what should CONTINUE with no argument do?  In the MAP-EACH case, I think it should pretty obviously not add anything to the output.

    &gt;&gt; map-each x [1 2 3] [
           if x = 2 [continue] else [x * 10]
       ]
    == [10 30]

## Nice.  But what about &quot;ordinary&quot; loops?

How about WHILE or REPEAT or FOR-EACH?  If we wanted it to be novel, it could say &quot;don&#39;t change the pending overall result from whatever the last loop iteration would have returned&quot;:

    &gt;&gt; for-each x [1 2 3] [
         if x = 3 [continue] else [x * 10]
    ]
    == 20

Although I like that in theory, it would break the loop composition rules unless loops were allowed to be invisible.  :-/

Think about the [code I&#39;ve previously written down](https://forum.rebol.info/t/what-should-do-of-empty-block-do-do/1426/18?u=hostilefork) to implement FOR-BOTH:

    for-both: func [&#39;var blk1 blk2 body] [
        unmeta all [
            meta for-each var blk1 body
            meta for-each var blk2 body
        ]
    ]

That FOR-BOTH could not have a CONTINUE that would run in the body of the second FOR-EACH and carry over a value from the first FOR-EACH.

Given that we&#39;d be setting a standard that would be difficult to follow, I think the answer has to be:

    &gt;&gt; for-each x [1 2 3] [
         if x = 3 [continue] else [x * 10]
       ]
    == ~none~  ; isotope

## What about UNTIL and CONTINUE TRUE?

I&#39;ve given a rule that CONTINUE passed a parameter effectively jumps to the end of the loop body as if it had finished with that value.  But in UNTIL, the loop&#39;s body also is the condition.  So what about:

    &gt;&gt; until [print &quot;A&quot; if true [continue true] else [&lt;unreachable&gt;]] print &quot;B&quot;
    A
    B

It seems to make a certain amount of sense.</description>
    
    <lastBuildDate>Wed, 23 Feb 2022 16:57:16 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/shall-we-continue/1790.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Shall we CONTINUE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1790">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>How about WHILE or REPEAT or FOR-EACH? If we wanted it to be novel, it could say "don't change the pending overall result from whatever the last loop iteration would have returned":</p>
<pre><code>&gt;&gt; for-each x [1 2 3] [
     if x = 3 [continue] else [x * 10]
]
== 20
</code></pre>
<p>Although I like that in theory, it would break the loop composition rules unless loops were allowed to be invisible. :-/</p>
</blockquote>
</aside>
<p>So what I'd missed here in the composition rules is a wrinkle that if you try the FOR-BOTH construct and the second list is <em>empty</em>, then you wind up overwriting the last result from the first list.  It creates the same kind of problem as if you wanted a CONTINUE with ~none~ to preserve the last value.</p>
<p>The tool to tackle this would be something that vanishes plain ~none~ after a META, or a version of meta that elides ~none~ isotopes.  So:</p>
<pre><code>for-both: func ['var blk1 blk2 body] [
    unmeta all [
        meta for-each :var blk1 body
        none-to-void/meta meta for-each :var blk2 body
    ]
]
</code></pre>
<p>or:</p>
<pre><code>for-both: func ['var blk1 blk2 body] [
    unmeta all [
        meta for-each :var blk1 body
        meta/none-to-void for-each :var blk2 body
    ]
]
</code></pre>
<p>Naming is open to discussion there.  Could be META/VANISHABLE or somesuch.  You can also make it symmetrical by doing it for both loops, it just doesn't matter because the ALL will give ~none~ isotope if the body turns up empty:</p>
<pre><code>for-both: func ['var blk1 blk2 body] [
    unmeta all [
        meta/vanishable for-each :var blk1 body
        meta/vanishable for-each :var blk2 body
    ]
]
</code></pre>
<p>The consequence of this, though, is that you can't force a ~none~ isotope return result from a loop once the body has returned any non-~none~-isotope value.  You'd have to do something like a CATCH with a THROW of ~none~.</p>
<p>I can't offhand tell you if that's annoying or a feature.  You could always META your body result and UNMETA it outside the loop.</p>
          <p><a href="https://forum.rebol.info/t/shall-we-continue/1790/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shall-we-continue/1790/2</link>
        <pubDate>Wed, 23 Feb 2022 16:57:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1790-2</guid>
        <source url="https://forum.rebol.info/t/shall-we-continue/1790.rss">Shall we CONTINUE?</source>
      </item>
      <item>
        <title>Shall we CONTINUE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>At some point I added the ability of CONTINUE to take a parameter.  The idea was that CONTINUE with a parameter would act the same as if the loop body had completed with that value.  One place this is most useful is MAP-EACH:</p>
<pre><code>&gt;&gt; map-each x [1 2 3] [
       if x = 2 [continue &lt;twenty&gt;] else [x * 10]
   ]
== [10 &lt;twenty&gt; 30]
</code></pre>
<p>But what should CONTINUE with no argument do?  In the MAP-EACH case, I think it should pretty obviously not add anything to the output.</p>
<pre><code>&gt;&gt; map-each x [1 2 3] [
       if x = 2 [continue] else [x * 10]
   ]
== [10 30]
</code></pre>
<h2>Nice.  But what about "ordinary" loops?</h2>
<p>How about WHILE or REPEAT or FOR-EACH?  If we wanted it to be novel, it could say "don't change the pending overall result from whatever the last loop iteration would have returned":</p>
<pre><code>&gt;&gt; for-each x [1 2 3] [
     if x = 3 [continue] else [x * 10]
]
== 20
</code></pre>
<p>Although I like that in theory, it would break the loop composition rules unless loops were allowed to be invisible.  :-/</p>
<p>Think about the <a href="https://forum.rebol.info/t/what-should-do-of-empty-block-do-do/1426/18">code I've previously written down</a> to implement FOR-BOTH:</p>
<pre><code>for-both: func ['var blk1 blk2 body] [
    unmeta all [
        meta for-each var blk1 body
        meta for-each var blk2 body
    ]
]
</code></pre>
<p>That FOR-BOTH could not have a CONTINUE that would run in the body of the second FOR-EACH and carry over a value from the first FOR-EACH.</p>
<p>Given that we'd be setting a standard that would be difficult to follow, I think the answer has to be:</p>
<pre><code>&gt;&gt; for-each x [1 2 3] [
     if x = 3 [continue] else [x * 10]
   ]
== ~none~  ; isotope
</code></pre>
<h2>What about UNTIL and CONTINUE TRUE?</h2>
<p>I've given a rule that CONTINUE passed a parameter effectively jumps to the end of the loop body as if it had finished with that value.  But in UNTIL, the loop's body also is the condition.  So what about:</p>
<pre><code>&gt;&gt; until [print "A" if true [continue true] else [&lt;unreachable&gt;]] print "B"
A
B
</code></pre>
<p>It seems to make a certain amount of sense.</p>
          <p><a href="https://forum.rebol.info/t/shall-we-continue/1790/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/shall-we-continue/1790/1</link>
        <pubDate>Wed, 16 Feb 2022 04:10:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1790-1</guid>
        <source url="https://forum.rebol.info/t/shall-we-continue/1790.rss">Shall we CONTINUE?</source>
      </item>
  </channel>
</rss>
