<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
    <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113</link>
    <description>*(**UPDATE**: I&#39;ve edited this post to reflect the terminology change to NULL / NOTHING / isotopes.  But also, I found a post on Carl&#39;s blog titled [&quot;UNSET! is not first-class&quot;](http://www.rebol.net/r3blogs/0318.html).  It doesn&#39;t particularly add anything new, but shows signs of a desire to differentiate the state...which seems to naturally culminate in Ren-C&#39;s choice to make it impossible to store it in BLOCK!s.)*

Question asked of me was:

&gt; Could you explain in laymen terms why unset! is there in Rebol type languages, and why it&#39;s there?
To my brain, something like none makes more sense to use for &#39;no thing&#39;. I get that unset removes the reference between word and value(s), but unset pops up for &quot;no return value&quot;, even though it&#39;s a return value, and &#39;none&#39;-ish things.

UNSET!&#39;s existence is ostensibly from wanting to give a distinction between a variable that is not set (should cause an error if accessed) vs. set.  Rebol would be a more unsafe language if such a state were not available.  You&#39;d just go typing `if my-varable = 1 [...]` when you meant to say my-variable and there&#39;d be no indication of a problem.

Note that the reason you don&#39;t get a &quot;no binding&quot; error for a misspelling comes from the somewhat liberal choice to bind words dynamically in the user context just because they appear.  It&#39;s the reason you can write:

    &gt;&gt; print-foo: does [print foo]  ; gets bound here
    &gt;&gt; print-foo
    ** error (it&#39;s in bound state but not set)
    &gt;&gt; foo: 10
    &gt;&gt; print-foo
    10

The `foo` in `print foo` gets a binding to the user context, even though there was no `foo` defined there beforehand.  If that weren&#39;t the case and it expanded on seeing set-words only, there&#39;d be more
safety against typos...which might make it somewhat less critical to have a &quot;defined-but-not-set&quot; state.

Yet I&#39;d still argue that typos aside, it&#39;s valuable to have knowledge of when you&#39;ve used something before you&#39;ve explicitly assigned it.  So this &quot;bound yet triggers an error in casual usage&quot; state is generally useful.

But I agree with you on the next point... that conveying this state of a variable as a &quot;value&quot; which has a &quot;type&quot;, and can be inserted into a block, is a bad idea.

One could imagine it not being conveyable at all except through an `is-variable-set?` test for those concerned with the status...and other forms of access would be errors.  But one could also designate it a special transitional status that simply can&#39;t be put in blocks.... *which is what Ren-C does.*

So Ren-C&#39;s NOTHING and NULL are not thought of as &quot;array elements&quot;.  &quot;set?&quot; or &quot;unset?&quot; are questions asked of *variables*, e.g. `SET? &#39;X` or `UNSET? &#39;X/Y`.  The system protects against any instances of a [trash or isotope] making it into the body of a block or other array.

Now once you have non-array-element things, it would be a bit of a shame to waste their unique status.  Ren-C uses VOID as the outcome of a failed conditional, while forcing all successful conditionals to some value:

    &gt;&gt; block: copy [a b c]
    &gt;&gt; append block if 1 = 2 [&#39;d]
    == [a b c]
    &gt;&gt; append block if 1 = 1 [&#39;d]
    == [a b c d]
    &gt;&gt; append block meta if 1 = 2 [&#39;d]
    == [a b c d ~void~]  ; quasi of word! void is meta of void

Since you never meant to intentionally append voidness itself to a block (as that is impossible) you have this extra dimension of flexibility.

There is also &quot;refinement revocation&quot;, where voids un-ask for the refinement:

    &gt;&gt; block: copy [a b c]
    &gt;&gt; append/dup block &#39;foo if 1 = 2 [3]
    [a b c]
    &gt;&gt; append/dup block &#39;foo if 1 = 1 [3]
    [a b c foo foo foo]

The out-of-band nature is taken advantage of in operations, which differentiate between no value and a legitimate blank value:

    &gt;&gt; block: copy [a _]
    &gt;&gt; take block
    == a
    &gt;&gt; take block
    == _
    &gt;&gt; take block
    ** Error: Could not TAKE from empty block, use TRY if intentional
    &gt;&gt; try take block
    == ~null~  ; anti

Similar solutions help one put blank values in maps, and distinguish that from the absence of a value.

To summarize: the &quot;null&quot; state which is helpful in denoting a transient situation of &quot;absence of value&quot; becomes much more useful when you can confidently say it&#39;s never stored in blocks or other data structures.  Then it can really indicate some out-of-band quality.  Blanks (like historical &quot;nones&quot;) are too casually used as actual placeholders to serve these purposes.</description>
    
    <lastBuildDate>Sun, 25 Aug 2024 02:32:24 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="113">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I think generalized escaping and meta representation, use-mention distinction and self reference, is within the themes of the book...whether it uses the specific theorems or not.</p>
</blockquote>
</aside>
<p>Hmm, I guess I can see where you’re coming from. It’s not precisely the same idea but the similarity is there.</p>
<p>(‘Completeness’ really has nothing to do with it, though. I get <em>very</em> annoyed when I see people misusing that term.)</p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/10</link>
        <pubDate>Sun, 25 Aug 2024 02:32:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-10</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="8" data-topic="113">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>therefore Gödel’s theorems are irrelevant for it</p>
</blockquote>
</aside>
<p>I think generalized escaping and meta representation, use-mention distinction and self reference, is within the themes of the book...whether it uses the specific theorems or not.</p>
<p>Certainly reading the book would give someone a leg up mentally on addressing the kinds of problems you face when you're pushing things up and down meta levels.</p>
<p>The better analogy is the math one... complex numbers, zero, etc.</p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/9</link>
        <pubDate>Sun, 25 Aug 2024 02:28:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-9</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="113">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I suppose he hasn't read Godel, Escher, Bach.</p>
<p>The fact of the matter is that there is no such thing as a "complete" system. All we do is push complexity around in order to shape the territory to become suitable for our purposes.</p>
</blockquote>
</aside>
<p>I see this argument now and again and it always irritates me. The notion of ‘completeness’ in Gödel’s theorems is, essentially, a statement about what can be proved in formal systems. Nothing more than that. Ren-C can’t be used to write down mathematical proofs, therefore Gödel’s theorems are irrelevant for it. (They’re more relevant for proof languages like <a href="https://coq.inria.fr/">Coq</a> or <a href="https://lean-lang.org/">Lean</a>, with their much more elaborate type systems.)</p>
<p>Of course, Ren-C <em>is</em> designed better than Red nonetheless. But this is unrelated to anything Gödel or Hofstadter said.</p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/8</link>
        <pubDate>Sun, 25 Aug 2024 02:25:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-8</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rebolek" data-post="3" data-topic="113">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rebolek/48/232_2.png" class="avatar"> rebolek:</div>
<blockquote>
<p>This is correct explanation and Gödel, Escher and Bach have nothing to do with it</p>
</blockquote>
</aside>
<p>The proof of Ren-C is in that it works, while Red does not.</p>
<p>It's kind of like I have a patent on zero (NULL), negative numbers (QUASIFORM!), and <a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918">imaginary numbers (antiforms)</a>... and they're trying to do math without them.  <span class="hashtag-raw">#goodluckwiththat</span> !</p>
<p><em>This</em> is the correct explanation:</p>
<aside class="quote quote-modified" data-post="1" data-topic="2217">
  <div class="title">
    <div class="quote-controls"></div>
    <img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/the-theory-of-meta-representability/2217">Meta-Representability in Ren-C (Isotopic Theory)</a> <a class="badge-category__wrapper " href="https://forum.rebol.info/c/usage/philosophy/31"><span data-category-id="31" style="--category-badge-color: #3AB54A; --category-badge-text-color: #FFFFFF; --parent-category-badge-color: #3AB54A;" data-parent-category-id="7" data-drop-close="true" class="badge-category --has-parent" title="How does Rebol differ from other computer languages and what makes code Rebolish and functional vs procedural coding."><span class="badge-category__name">Philosophy</span></span></a>
  </div>
  <blockquote>
    I wrote this to try and give some context to an AI before asking it a naming question.  For a less high-level treatment, see <a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918">A Justification of Generalized Isotopes</a>. 

Most imperative programming languages do not delve into the relationships between things like null and undefined... as if they were mathematical, and you were going to discover that if you take the square root of undefined you get null, etc.  <img width="20" height="20" src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title="slight_smile" alt="slight_smile" class="emoji">  But I am doing something analogous to that. 
In particular, I'm making it…
  </blockquote>
</aside>

<p><a href="https://www.youtube.com/watch?v=B1J6Ou4q8vE">Red hasn't gotten past multiplication</a>.</p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/7</link>
        <pubDate>Sun, 25 Aug 2024 00:03:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-7</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918/4">A Justification of Generalized Isotopes</a></p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/6</link>
        <pubDate>Sat, 15 Oct 2022 20:51:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-6</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="2" data-topic="113">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It's strange how uneducated minds work.</p>
</blockquote>
</aside>
<p>This GitHub Issue is one of the many places where you can see Red suffering: <a href="https://github.com/red/red/issues/5183" class="inline-onebox">`transcode/next` at end-of-input design issue · Issue #5183 · red/red · GitHub</a></p>
<p>Whereas Ren-C is doing quite well: <a href="https://forum.rebol.info/t/incomplete-transcodes-actually-an-optimization-problem/1940" class="inline-onebox">Incomplete TRANSCODEs: Actually an Optimization Problem</a></p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/5</link>
        <pubDate>Thu, 25 Aug 2022 11:03:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-5</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I don't know what you have to gain by embracing this fallacy.</p>
<p><em>Variables</em> are "set" or "unset".  Not <strong>values</strong>.  All <em>values</em> should represent a "set" state.</p>
<pre><code>x: 10
if set? 'x [print "The variable is set."]

set 'x 20
if set? 'x [print "Yup, the variable is still set."]

unset 'x
x: ~  ; alternative unset method (~ is a QUASI! which evaluates to the "unset state")

if unset? 'x [print "Now it's unset."]
if none? get/any x [print "Here's another way to do it."]
</code></pre>
<p>Generic code has to process blocks of values, and it's just not helping anyone when you can put "unset values" in blocks.  Imagine enumerating this block, each item stored in a variable as you go.  The variable you are using to enumerate the block runs into a problem... it has to hold the current item, yet it also might be unset.  Don't you see why this is not right?</p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/4</link>
        <pubDate>Fri, 02 Jun 2017 08:21:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-4</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[rebolek]]></dc:creator>
        <description><![CDATA[
            <p>This is correct explanation and Gödel, Escher and Bach have nothing to do with it, they all died long before Rebol was written by Carl Sassenrath. It is of course strange how uneducated minds work, when they can't get correct explanation when they see one.</p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/3</link>
        <pubDate>Fri, 02 Jun 2017 07:30:05 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-3</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>On <a href="https://rebol.tech/gitter.im/red/red/welcome/2017/#msg592f79a33aeff8a61f64b9d7">gitter.im's red/red/welcome</a>, Nenad Rakocevic said::</p>
<blockquote>
<p><em>"Redbol languages are based on denotational semantics, where the meaning of every expression needs to have a representation in the language itself. Every expression needs to return a value. Without unset! there would be a hole in the language, several fundamental semantic rules would be collapsing, e.g. <strong><code>reduce [1 print ""]</code></strong> =&gt; <strong><code>[1]</code></strong> (reducing 2 expressions would return 1 expression)."</em></p>
</blockquote>
<p>I suppose he hasn't read Godel, Escher, Bach.</p>
<p>The fact of the matter is that there is no such thing as a "complete" system.  All we do is push complexity around in order to shape the territory to become suitable for our purposes.</p>
<p>Somehow, the idea that <strong>reduce [1 print ""]</strong> could be an <em>error</em> is by its definition <em>worse</em> than having a block that holds a "unset value".</p>
<p>It's strange how uneducated minds work.</p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/2</link>
        <pubDate>Thu, 01 Jun 2017 21:39:39 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-2</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
      <item>
        <title>Why have an &quot;Unset State&quot; in Rebol-like Languages?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(<strong>UPDATE</strong>: I've edited this post to reflect the terminology change to NULL / NOTHING / isotopes.  But also, I found a post on Carl's blog titled <a href="http://www.rebol.net/r3blogs/0318.html">"UNSET! is not first-class"</a>.  It doesn't particularly add anything new, but shows signs of a desire to differentiate the state...which seems to naturally culminate in Ren-C's choice to make it impossible to store it in BLOCK!s.)</em></p>
<p>Question asked of me was:</p>
<blockquote>
<p>Could you explain in laymen terms why unset! is there in Rebol type languages, and why it's there?<br>
To my brain, something like none makes more sense to use for 'no thing'. I get that unset removes the reference between word and value(s), but unset pops up for "no return value", even though it's a return value, and 'none'-ish things.</p>
</blockquote>
<p>UNSET!'s existence is ostensibly from wanting to give a distinction between a variable that is not set (should cause an error if accessed) vs. set.  Rebol would be a more unsafe language if such a state were not available.  You'd just go typing <code>if my-varable = 1 [...]</code> when you meant to say my-variable and there'd be no indication of a problem.</p>
<p>Note that the reason you don't get a "no binding" error for a misspelling comes from the somewhat liberal choice to bind words dynamically in the user context just because they appear.  It's the reason you can write:</p>
<pre><code>&gt;&gt; print-foo: does [print foo]  ; gets bound here
&gt;&gt; print-foo
** error (it's in bound state but not set)
&gt;&gt; foo: 10
&gt;&gt; print-foo
10
</code></pre>
<p>The <code>foo</code> in <code>print foo</code> gets a binding to the user context, even though there was no <code>foo</code> defined there beforehand.  If that weren't the case and it expanded on seeing set-words only, there'd be more<br>
safety against typos...which might make it somewhat less critical to have a "defined-but-not-set" state.</p>
<p>Yet I'd still argue that typos aside, it's valuable to have knowledge of when you've used something before you've explicitly assigned it.  So this "bound yet triggers an error in casual usage" state is generally useful.</p>
<p>But I agree with you on the next point... that conveying this state of a variable as a "value" which has a "type", and can be inserted into a block, is a bad idea.</p>
<p>One could imagine it not being conveyable at all except through an <code>is-variable-set?</code> test for those concerned with the status...and other forms of access would be errors.  But one could also designate it a special transitional status that simply can't be put in blocks.... <em>which is what Ren-C does.</em></p>
<p>So Ren-C's NOTHING and NULL are not thought of as "array elements".  "set?" or "unset?" are questions asked of <em>variables</em>, e.g. <code>SET? 'X</code> or <code>UNSET? 'X/Y</code>.  The system protects against any instances of a [trash or isotope] making it into the body of a block or other array.</p>
<p>Now once you have non-array-element things, it would be a bit of a shame to waste their unique status.  Ren-C uses VOID as the outcome of a failed conditional, while forcing all successful conditionals to some value:</p>
<pre><code>&gt;&gt; block: copy [a b c]
&gt;&gt; append block if 1 = 2 ['d]
== [a b c]
&gt;&gt; append block if 1 = 1 ['d]
== [a b c d]
&gt;&gt; append block meta if 1 = 2 ['d]
== [a b c d ~void~]  ; quasi of word! void is meta of void
</code></pre>
<p>Since you never meant to intentionally append voidness itself to a block (as that is impossible) you have this extra dimension of flexibility.</p>
<p>There is also "refinement revocation", where voids un-ask for the refinement:</p>
<pre><code>&gt;&gt; block: copy [a b c]
&gt;&gt; append/dup block 'foo if 1 = 2 [3]
[a b c]
&gt;&gt; append/dup block 'foo if 1 = 1 [3]
[a b c foo foo foo]
</code></pre>
<p>The out-of-band nature is taken advantage of in operations, which differentiate between no value and a legitimate blank value:</p>
<pre><code>&gt;&gt; block: copy [a _]
&gt;&gt; take block
== a
&gt;&gt; take block
== _
&gt;&gt; take block
** Error: Could not TAKE from empty block, use TRY if intentional
&gt;&gt; try take block
== ~null~  ; anti
</code></pre>
<p>Similar solutions help one put blank values in maps, and distinguish that from the absence of a value.</p>
<p>To summarize: the "null" state which is helpful in denoting a transient situation of "absence of value" becomes much more useful when you can confidently say it's never stored in blocks or other data structures.  Then it can really indicate some out-of-band quality.  Blanks (like historical "nones") are too casually used as actual placeholders to serve these purposes.</p>
          <p><a href="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113/1</link>
        <pubDate>Thu, 01 Jun 2017 00:46:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-113-1</guid>
        <source url="https://forum.rebol.info/t/why-have-an-unset-state-in-rebol-like-languages/113.rss">Why have an &quot;Unset State&quot; in Rebol-like Languages?</source>
      </item>
  </channel>
</rss>
