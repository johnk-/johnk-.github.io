<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Nice Blank Moment While Killing GET-PATH!/SET-PATH!</title>
    <link>https://forum.rebol.info/t/nice-blank-moment-while-killing-get-path-set-path/2241</link>
    <description>I&#39;m busily killing off all the stray SET-PATH! and GET-PATH! that exist... *(because [CHAIN! is going to be underneath PATH!](https://forum.rebol.info/t/introducingnew-chain-datatype/2226), you won&#39;t be able to put a path in a chain such that you would describe the path as being set or gotten... the colon can&#39;t be &quot;applied to&quot; the path)*.

I came across the pleasing SIGIL! test:

    for-each [sigil items] [
        ~null~  [  word    tu.p.le    pa/th    [bl o ck]    (gr o up)  ]
        ::      [  word:   tu.p.le:   pa/th:   [bl o ck]:   (gr o up): ]
        :       [ :word   :tu.p.le   :pa/th   :[bl o ck]   :(gr o up)  ]
        ^       [ ^word   ^tu.p.le   ^pa/th   ^[bl o ck]   ^(gr o up)  ]
        &amp;       [ &amp;word   &amp;tu.p.le   &amp;pa/th   &amp;[bl o ck]   &amp;(gr o up)  ]
        @       [ @word   @tu.p.le   @pa/th   @[bl o ck]   @(gr o up)  ]
        $       [ $word   $tu.p.le   $pa/th   $[bl o ck]   $(gr o up)  ]
        &#39;       [ &#39;word   &#39;tu.p.le   &#39;pa/th   &#39;[bl o ck]   &#39;(gr o up)  ]
        ~~      [ ~word~  ~tu.p.le~  ~pa/th~  ~[bl o ck]~  ~(gr o up)~ ]
    ][
        for-each item items [
            assert [any [quoted? item, quasi? item, bindable? item]]
            if (degrade sigil) &lt;&gt; sigil of item [
                fail [mold item]
            ]
        ]
    ]

**`:`** and **`::`** are not going to be SIGIL! at all soon.  But as a first step, I need to get rid of SET-PATH! and GET-PATH!

## Behold Just A Little Nice Rebolish Moment

I realized I needed to kill QUASI-TUPLE! and QUASI-PATH! also...

    for-each [sigil items] [
        ~null~  [  word    tu.p.le    pa/th    [bl o ck]    (gr o up)  ]
        ::      [  word:   tu.p.le:     _      [bl o ck]:   (gr o up): ]
        :       [ :word   :tu.p.le      _     :[bl o ck]   :(gr o up)  ]
        ^       [ ^word   ^tu.p.le   ^pa/th   ^[bl o ck]   ^(gr o up)  ]
        &amp;       [ &amp;word   &amp;tu.p.le   &amp;pa/th   &amp;[bl o ck]   &amp;(gr o up)  ]
        @       [ @word   @tu.p.le   @pa/th   @[bl o ck]   @(gr o up)  ]
        $       [ $word   $tu.p.le   $pa/th   $[bl o ck]   $(gr o up)  ]
        &#39;       [ &#39;word   &#39;tu.p.le   &#39;pa/th   &#39;[bl o ck]   &#39;(gr o up)  ]
        ~~      [ ~word~      _         _     ~[bl o ck]~  ~(gr o up)~ ]
    ][
        for-each item items [
            if blank? item [continue]
            assert [any [quoted? item, quasi? item, bindable? item]]
            if (degrade sigil) &lt;&gt; sigil of item [
                fail [mold item]
            ]
        ]
    ]

When you have the parts, you just use them...

Of course I could have used other things.

---
        ::      [  word:   tu.p.le:     ~    [bl o ck]:   (gr o up): ]
---
        ::      [  word:   tu.p.le:     #    [bl o ck]:   (gr o up): ]
---
        ::      [  word:   tu.p.le:    !!!   [bl o ck]:   (gr o up): ]
---
        ::      [  word:   tu.p.le:  &lt;dead&gt;  [bl o ck]:   (gr o up): ]
---
        ::      [  word:   tu.p.le:  ~null~  [bl o ck]:   (gr o up): ]
---
        ::      [  word:   tu.p.le:   #dead  [bl o ck]:   (gr o up): ]
---


It would be nice to have **`~dead~`**, but I have spoken about reserving WORD! quasi/antiforms.

(Maybe that could be relaxed, to where quasiforms are allowed for all WORD! but antiforms only for those endorsed by the system?  It might make sense.  You can dialect with `~null~` the quasiform all you like without having that mean anything to do with the behavior of null, so you could do that with any other quasiform word of the future... might as well let you make them, right?  But QUASI-TUPLE! and QUASI-PATH! don&#39;t get that allowance, so **`~/foo`** can be a PATH!)

In a lot of cases, trash (**`~`**) would be the right choice for a &quot;this is invalid slot&quot;.

But here, we&#39;ve got quasiforms in the mix as part of the discussion.  It favors picking blank as out of band.  And it gets out of the way a little more. 

## Note That `:pa/th` and `pa/th:` Will Become LOADable Again...

You just won&#39;t ask about colons applied on the head or tail of the paths, because you&#39;ll have to &quot;dig&quot; to find the chains underneath.</description>
    
    <lastBuildDate>Sat, 31 Aug 2024 20:50:46 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/nice-blank-moment-while-killing-get-path-set-path/2241.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Nice Blank Moment While Killing GET-PATH!/SET-PATH!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I'm busily killing off all the stray SET-PATH! and GET-PATH! that exist... <em>(because <a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226">CHAIN! is going to be underneath PATH!</a>, you won't be able to put a path in a chain such that you would describe the path as being set or gotten... the colon can't be "applied to" the path)</em>.</p>
<p>I came across the pleasing SIGIL! test:</p>
<pre><code>for-each [sigil items] [
    ~null~  [  word    tu.p.le    pa/th    [bl o ck]    (gr o up)  ]
    ::      [  word:   tu.p.le:   pa/th:   [bl o ck]:   (gr o up): ]
    :       [ :word   :tu.p.le   :pa/th   :[bl o ck]   :(gr o up)  ]
    ^       [ ^word   ^tu.p.le   ^pa/th   ^[bl o ck]   ^(gr o up)  ]
    &amp;       [ &amp;word   &amp;tu.p.le   &amp;pa/th   &amp;[bl o ck]   &amp;(gr o up)  ]
    @       [ @word   @tu.p.le   @pa/th   @[bl o ck]   @(gr o up)  ]
    $       [ $word   $tu.p.le   $pa/th   $[bl o ck]   $(gr o up)  ]
    '       [ 'word   'tu.p.le   'pa/th   '[bl o ck]   '(gr o up)  ]
    ~~      [ ~word~  ~tu.p.le~  ~pa/th~  ~[bl o ck]~  ~(gr o up)~ ]
][
    for-each item items [
        assert [any [quoted? item, quasi? item, bindable? item]]
        if (degrade sigil) &lt;&gt; sigil of item [
            fail [mold item]
        ]
    ]
]
</code></pre>
<p><strong><code>:</code></strong> and <strong><code>::</code></strong> are not going to be SIGIL! at all soon.  But as a first step, I need to get rid of SET-PATH! and GET-PATH!</p>
<h2>
<a name="behold-just-a-little-nice-rebolish-moment-1" class="anchor" href="https://forum.rebol.info#behold-just-a-little-nice-rebolish-moment-1"></a>Behold Just A Little Nice Rebolish Moment</h2>
<p>I realized I needed to kill QUASI-TUPLE! and QUASI-PATH! also...</p>
<pre><code>for-each [sigil items] [
    ~null~  [  word    tu.p.le    pa/th    [bl o ck]    (gr o up)  ]
    ::      [  word:   tu.p.le:     _      [bl o ck]:   (gr o up): ]
    :       [ :word   :tu.p.le      _     :[bl o ck]   :(gr o up)  ]
    ^       [ ^word   ^tu.p.le   ^pa/th   ^[bl o ck]   ^(gr o up)  ]
    &amp;       [ &amp;word   &amp;tu.p.le   &amp;pa/th   &amp;[bl o ck]   &amp;(gr o up)  ]
    @       [ @word   @tu.p.le   @pa/th   @[bl o ck]   @(gr o up)  ]
    $       [ $word   $tu.p.le   $pa/th   $[bl o ck]   $(gr o up)  ]
    '       [ 'word   'tu.p.le   'pa/th   '[bl o ck]   '(gr o up)  ]
    ~~      [ ~word~      _         _     ~[bl o ck]~  ~(gr o up)~ ]
][
    for-each item items [
        if blank? item [continue]
        assert [any [quoted? item, quasi? item, bindable? item]]
        if (degrade sigil) &lt;&gt; sigil of item [
            fail [mold item]
        ]
    ]
]
</code></pre>
<p>When you have the parts, you just use them...</p>
<p>Of course I could have used other things.</p>
<hr>
<pre><code>    ::      [  word:   tu.p.le:     ~    [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:     #    [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:    !!!   [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:  &lt;dead&gt;  [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:  ~null~  [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:   #dead  [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<p>It would be nice to have <strong><code>~dead~</code></strong>, but I have spoken about reserving WORD! quasi/antiforms.</p>
<p>(Maybe that could be relaxed, to where quasiforms are allowed for all WORD! but antiforms only for those endorsed by the system?  It might make sense.  You can dialect with <code>~null~</code> the quasiform all you like without having that mean anything to do with the behavior of null, so you could do that with any other quasiform word of the future... might as well let you make them, right?  But QUASI-TUPLE! and QUASI-PATH! don't get that allowance, so <strong><code>~/foo</code></strong> can be a PATH!)</p>
<p>In a lot of cases, trash (<strong><code>~</code></strong>) would be the right choice for a "this is invalid slot".</p>
<p>But here, we've got quasiforms in the mix as part of the discussion.  It favors picking blank as out of band.  And it gets out of the way a little more.</p>
<h2>
<a name="note-that-path-and-path-will-become-loadable-again-2" class="anchor" href="https://forum.rebol.info#note-that-path-and-path-will-become-loadable-again-2"></a>Note That <code>:pa/th</code> and <code>pa/th:</code> Will Become LOADable Again...</h2>
<p>You just won't ask about colons applied on the head or tail of the paths, because you'll have to "dig" to find the chains underneath.</p>
          <p><a href="https://forum.rebol.info/t/nice-blank-moment-while-killing-get-path-set-path/2241/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/nice-blank-moment-while-killing-get-path-set-path/2241/1</link>
        <pubDate>Sat, 31 Aug 2024 20:27:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2241-1</guid>
        <source url="https://forum.rebol.info/t/nice-blank-moment-while-killing-get-path-set-path/2241.rss">Nice Blank Moment While Killing GET-PATH!/SET-PATH!</source>
      </item>
  </channel>
</rss>
