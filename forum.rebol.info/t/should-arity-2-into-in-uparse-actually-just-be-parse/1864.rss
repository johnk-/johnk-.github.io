<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</title>
    <link>https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864</link>
    <description>There&#39;s a cool feature that UPARSE&#39;s INTO is willing to take a rule that gives the data you want to parse into, even if it has to be synthesized:

    &gt;&gt; uparse &quot;(1 1 1)&quot; [
        into [between &quot;(&quot; &quot;)&quot;] [data: &lt;here&gt; (print mold data) some integer!]
    ]

That will give you:

    &quot;1 1 1&quot;  ; notice no &quot;)&quot; because the INTO copied the data spanning the rule
    == 1

*(I threw in the INTEGER! transcode for fun there.  Note that Red allows the transcoding rules for datatypes as well, but only on BINARY! input series. It&#39;s because they don&#39;t have UTF-8 everywhere, they&#39;d have to rewrite their scanner to process variable-width strings. One of the uncountable Ren-C design advantages...)*

More generally, you can pass any variable you want to INTO.

    &gt;&gt; uparse [1 2 3] [some integer! into (&quot;aaa&quot;) some &quot;a&quot;]
    == &quot;a&quot;

## But... Couldn&#39;t We Just Call That PARSE?

This arity-2 INTO takes an input, and rules.  Why isn&#39;t that just PARSE?

Difference is that since it&#39;s inside a parse already, its first parameter will be treated as a rule and use the synthesized result...unless you put it in a GROUP!.  But that&#39;s implicit.  Maybe call it SUBPARSE to be clear?

It would free up the keyword INTO, maybe to be compatible with historical single-arity version, for cases that have already figured out they&#39;re at a series value and don&#39;t want to repeat themselves by giving a rule that matches where they know they are.</description>
    
    <lastBuildDate>Thu, 22 Feb 2024 03:54:54 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1864">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">parse [x: [$y z] "a" &lt;b&gt; %c] [
    words: accumulate [
        &amp;any-word?
        | spread validate block! [some &amp;any-word?]
    ]
    numbers: accumulate &amp;any-string?
]
</code></pre>
</blockquote>
</aside>
<p>I'll add that it might seem you don't need VALIDATE because you could just write instead:</p>
<pre><code>spread subparse block! [some &amp;any-word? &lt;subinput&gt;]
</code></pre>
<p>But it's worth mentioning a few reasons why VALIDATE as its own primitive is good...</p>
<p>It's not always as simple as adding  to the end:</p>
<pre><code>subparse block! ["foo" "bar" | some &amp;any-word? &lt;subinput&gt;]  ; oops
</code></pre>
<p>You need to make sure all the alternatives have finished:</p>
<pre><code>subparse block! [["foo" "bar" | some &amp;any-word?] &lt;subinput&gt;]
subparse block! ["foo" "bar" | some &amp;any-word? || &lt;subinput&gt;]
</code></pre>
<p>The rule may not be inline, so you could go from not needing a block at all to needing one, so you're adding a tag AND a block:</p>
<pre><code>subparse block! element-rule
subparse block! [element-rule &lt;subinput&gt;]
</code></pre>
<p>But overall, it's generally just very helpful to know ahead of time that you're expecting the input you're giving back out if it matches.  That aids comprehensibility, in particular if your rules are long:</p>
<pre><code>x: subparse block! [[
      ...
      pages of stuff that scroll off the screen
      ...
 ] &lt;subinput&gt;]
</code></pre>
<p>A reader has much more of a clue what's going on with:</p>
<pre><code>x: validate block! [
      ...
      pages of stuff that scroll off the screen
      ...
 ]
</code></pre>
<p>They know X can only be the block you just matched and passed to validate, or the rule fails and it the parse moves on.</p>
          <p><a href="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/6</link>
        <pubDate>Thu, 22 Feb 2024 03:54:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1864-6</guid>
        <source url="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864.rss">Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</source>
      </item>
      <item>
        <title>Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's another nuance here...</p>
<p>PARSE has a variant (currently called MATCH-PARSE) that returns the parse input when the rules match, and null if it does not:</p>
<pre><code>&gt;&gt; parse "aaa" [some #a]
== #a

&gt;&gt; parse "aaa" [some #b]
** Error: PARSE BLOCK! combinator did not match input

&gt;&gt; match-parse "aaa" [some #a]
== "aaa"

&gt;&gt; match-parse "aaa" [some #b]
== ~null~  ; anti
</code></pre>
<p>One concern here is that MATCH-PARSE has its parameters backwards from MATCH</p>
<ul>
<li>
<p>MATCH purposefully takes the "rules" of what to match first, because it expects the expression producing the data to be longer than the match rule in the general case.</p>
</li>
<li>
<p>PARSE purposefully takes the "rules" of what to match second, because it expects the rules to be an entire mini-program</p>
</li>
</ul>
<p>So I'm not sure how good a name it is in the first place.  Then, we'd need MATCH-SUBPARSE if we're going to use it as a combinator to operate on series encountered during the parse.</p>
<p>I was thinking of changing the name to just VALIDATE (it's implicit in other dialects like DESTRUCTURE that they are built on top of parse, so why not make the default meaning of LIB.VALIDATE be parse-oriented as well?)</p>
<p>And it's appealing to be able to just say VALIDATE in the PARSE rules.</p>
<pre><code>parse [x: [$y z] "a" &lt;b&gt; %c] [
    words: accumulate [
        &amp;any-word?
        | spread validate block! [some &amp;any-word?]
    ]
    numbers: accumulate &amp;any-string?
]

&gt;&gt; words
== [x &amp;y z]

&gt;&gt; strings
== ["a" &lt;b&gt; %c]
</code></pre>
<p>Saying SUBVALIDATE doesn't make sense, because we're not in an outer validation.  We're in an outer parse.</p>
<p>The reverse applies if you're in a VALIDATE (or a DESTRUCTURE, etc.)... or anything that doesn't make it completely obvious that it's being driven via PARSE.</p>
<aside class="quote no-group" data-username="IngoHohmann" data-post="2" data-topic="1864">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/48/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>We're in a different dialect there, so one has to be aware of that anyway.</p>
<p>Dialects all the way down.</p>
</blockquote>
</aside>
<p>SUBVALIDATE irks me more than SUBPARSE did, and it moves the needle to where I think this is probably the right way to look at it.</p>
<p>But I'll hold off on renaming SUBPARSE just yet, and see what the consequences are with using the name VALIDATE as both combinator-keyword and top-level function.</p>
          <p><a href="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/5</link>
        <pubDate>Thu, 22 Feb 2024 02:28:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1864-5</guid>
        <source url="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864.rss">Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</source>
      </item>
      <item>
        <title>Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="BlackATTR" data-post="3" data-topic="1864">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/48/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I think there's potential for confusion if it's just called PARSE.</p>
</blockquote>
</aside>
<p>Another argument for why to call it SUBPARSE is my proposal for functions automatically becoming combinators if they fit a certain pattern.</p>
<p>That pattern is to take an INPUT and then have on their return results something indicating progress.</p>
<p>What would happen then would be the function would act like a combinator...having one less parameter than usual (e.g. the INPUT is now implicit, from the data being parsed).</p>
<p>This would make PARSE an arity-1 synonym for <strong><code>SUBPARSE &lt;HERE&gt;</code></strong>, not plain SUBPARSE.</p>
<p>Whether UPARSE actually chooses to bend its interface to be willing to act as that combinator or not, it's still a point of coherence.  I'd say that pushes it over the edge to say it shouldn't be called just PARSE.  SUBPARSE seems good.</p>
          <p><a href="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/4</link>
        <pubDate>Wed, 06 Jul 2022 12:48:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1864-4</guid>
        <source url="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864.rss">Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</source>
      </item>
      <item>
        <title>Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I think SUBPARSE makes it more clear what's happening here. I think there's potential for confusion if it's just called PARSE.</p>
          <p><a href="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/3</link>
        <pubDate>Wed, 06 Jul 2022 12:33:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1864-3</guid>
        <source url="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864.rss">Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</source>
      </item>
      <item>
        <title>Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I would just call it parse. We're in a different dialect there, so one has to be aware of that anyway.</p>
<p>Dialects all the way down.</p>
          <p><a href="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/2</link>
        <pubDate>Wed, 06 Jul 2022 08:28:48 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1864-2</guid>
        <source url="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864.rss">Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</source>
      </item>
      <item>
        <title>Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's a cool feature that UPARSE's INTO is willing to take a rule that gives the data you want to parse into, even if it has to be synthesized:</p>
<pre><code>&gt;&gt; uparse "(1 1 1)" [
    into [between "(" ")"] [data: &lt;here&gt; (print mold data) some integer!]
]
</code></pre>
<p>That will give you:</p>
<pre><code>"1 1 1"  ; notice no ")" because the INTO copied the data spanning the rule
== 1
</code></pre>
<p><em>(I threw in the INTEGER! transcode for fun there.  Note that Red allows the transcoding rules for datatypes as well, but only on BINARY! input series. It's because they don't have UTF-8 everywhere, they'd have to rewrite their scanner to process variable-width strings. One of the uncountable Ren-C design advantages...)</em></p>
<p>More generally, you can pass any variable you want to INTO.</p>
<pre><code>&gt;&gt; uparse [1 2 3] [some integer! into ("aaa") some "a"]
== "a"
</code></pre>
<h2>
<a name="but-couldnt-we-just-call-that-parse-1" class="anchor" href="https://forum.rebol.info#but-couldnt-we-just-call-that-parse-1"></a>But... Couldn't We Just Call That PARSE?</h2>
<p>This arity-2 INTO takes an input, and rules.  Why isn't that just PARSE?</p>
<p>Difference is that since it's inside a parse already, its first parameter will be treated as a rule and use the synthesized result...unless you put it in a GROUP!.  But that's implicit.  Maybe call it SUBPARSE to be clear?</p>
<p>It would free up the keyword INTO, maybe to be compatible with historical single-arity version, for cases that have already figured out they're at a series value and don't want to repeat themselves by giving a rule that matches where they know they are.</p>
          <p><a href="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864/1</link>
        <pubDate>Wed, 06 Jul 2022 03:53:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1864-1</guid>
        <source url="https://forum.rebol.info/t/should-arity-2-into-in-uparse-actually-just-be-parse/1864.rss">Should &quot;Arity-2 INTO&quot; in UPARSE actually just be... PARSE?</source>
      </item>
  </channel>
</rss>
