<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Sending Values into a BLACKHOLE!</title>
    <link>https://forum.rebol.info/t/sending-values-into-a-blackhole/1347</link>
    <description>Multiple return values have an interesting angle to them: **the more values you request... the functionality you ask for might wind up being different**.

Consider TRANSCODE.  If you don&#39;t use multi-returns...or just ask for one return...you get the whole thing transcoded as a block:

    &gt;&gt; transcode &quot;&lt;abc&gt; &lt;def&gt;&quot;  ; plain behavior
    == [&lt;abc&gt; &lt;def&gt;]

    &gt;&gt; block: transcode &quot;&lt;abc&gt; &lt;def&gt;&quot;  ; set-word! (follows usual rules)
    == [&lt;abc&gt; &lt;def&gt;]

    &gt;&gt; [block]: transcode &quot;&lt;abc&gt; &lt;def&gt;&quot;  ; same behavior as `block:`, enforced
    == [&lt;abc&gt; &lt;def&gt;]

But if you supply it with a parameter in the second slot, it assumes you want /NEXT and will set that argument to the next position. 

    &gt;&gt; [value pos]: transcode &quot;&lt;abc&gt; &lt;def&gt;&quot;
    == &lt;abc&gt;

    &gt;&gt; pos
    == &quot; &lt;def&gt;&quot;

    &gt;&gt; value
    == &lt;abc&gt;

BLANK! gives you the ability to opt out of slots in the multiple return values that you don&#39;t want.  But opting out doesn&#39;t just keep you from having to name a variable, it also *un-requests the behavior*...

    &gt;&gt; [value _]: transcode &quot;&lt;abc&gt; &lt;def&gt;&quot;
    == [&lt;abc&gt; &lt;def&gt;]  ; not a /NEXT, it was &quot;revoked&quot;

What if you want to request the behavior, but not have to bother with creating a variable to store it in?  Well now that we are thinking **#** will be a shorthand for the immutable and not-appendable-to-strings &quot;codepoint 0&quot;, it&#39;s a perfect choice:

    &gt;&gt; [value #]: transcode &quot;&lt;abc&gt; &lt;def&gt;&quot;
    == &lt;abc&gt;  ; only the /NEXT item

The value was requested but disappeared...into a black hole.  In fact, BLACKHOLE! is now a datatype you can put in a spec to mean &quot;empty issue that is precisely `#`.  It&#39;s not validated yet (it&#39;s a synonym for ISSUE!...we&#39;ll need type constraints before it can work).  But it can help keep track of places that use this idea.  For instance, SET:

    &gt;&gt; set # 10
    == 10

The truthiness of # helps write code that distinguishes the wish to opt-out of a behavior from the wish to opt-out of getting its result.  Having SET error on blank helps you avoid calculations that may be unnecessary...so it works out perfectly:

     do-something: func [
         in
         /out [blank! word! path! blackhole!]
         &lt;local&gt; result
     ][
         process foo
          if bar [  ; unlike BLANK!, empty issue is truthy so branch runs
             result: process/more foo
             set bar result  ; blackhole SET is no-op (BLANK! would error)
          ]
     ]

*Elegante.*</description>
    
    <lastBuildDate>Wed, 18 May 2022 17:51:09 +0000</lastBuildDate>
    <category>Feature Discover</category>
    <atom:link href="https://forum.rebol.info/t/sending-values-into-a-blackhole/1347.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Sending Values into a BLACKHOLE!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Multiple return values have an interesting angle to them: <strong>the more values you request... the functionality you ask for might wind up being different</strong>.</p>
<p>Consider TRANSCODE.  If you don't use multi-returns...or just ask for one return...you get the whole thing transcoded as a block:</p>
<pre><code>&gt;&gt; transcode "&lt;abc&gt; &lt;def&gt;"  ; plain behavior
== [&lt;abc&gt; &lt;def&gt;]

&gt;&gt; block: transcode "&lt;abc&gt; &lt;def&gt;"  ; set-word! (follows usual rules)
== [&lt;abc&gt; &lt;def&gt;]

&gt;&gt; [block]: transcode "&lt;abc&gt; &lt;def&gt;"  ; same behavior as `block:`, enforced
== [&lt;abc&gt; &lt;def&gt;]
</code></pre>
<p>But if you supply it with a parameter in the second slot, it assumes you want /NEXT and will set that argument to the next position.</p>
<pre><code>&gt;&gt; [value pos]: transcode "&lt;abc&gt; &lt;def&gt;"
== &lt;abc&gt;

&gt;&gt; pos
== " &lt;def&gt;"

&gt;&gt; value
== &lt;abc&gt;
</code></pre>
<p>BLANK! gives you the ability to opt out of slots in the multiple return values that you don't want.  But opting out doesn't just keep you from having to name a variable, it also <em>un-requests the behavior</em>...</p>
<pre><code>&gt;&gt; [value _]: transcode "&lt;abc&gt; &lt;def&gt;"
== [&lt;abc&gt; &lt;def&gt;]  ; not a /NEXT, it was "revoked"
</code></pre>
<p>What if you want to request the behavior, but not have to bother with creating a variable to store it in?  Well now that we are thinking <strong>#</strong> will be a shorthand for the immutable and not-appendable-to-strings "codepoint 0", it's a perfect choice:</p>
<pre><code>&gt;&gt; [value #]: transcode "&lt;abc&gt; &lt;def&gt;"
== &lt;abc&gt;  ; only the /NEXT item
</code></pre>
<p>The value was requested but disappeared...into a black hole.  In fact, BLACKHOLE! is now a datatype you can put in a spec to mean "empty issue that is precisely <code>#</code>.  It's not validated yet (it's a synonym for ISSUE!...we'll need type constraints before it can work).  But it can help keep track of places that use this idea.  For instance, SET:</p>
<pre><code>&gt;&gt; set # 10
== 10
</code></pre>
<p>The truthiness of # helps write code that distinguishes the wish to opt-out of a behavior from the wish to opt-out of getting its result.  Having SET error on blank helps you avoid calculations that may be unnecessary...so it works out perfectly:</p>
<pre><code> do-something: func [
     in
     /out [blank! word! path! blackhole!]
     &lt;local&gt; result
 ][
     process foo
      if bar [  ; unlike BLANK!, empty issue is truthy so branch runs
         result: process/more foo
         set bar result  ; blackhole SET is no-op (BLANK! would error)
      ]
 ]
</code></pre>
<p><em>Elegante.</em></p>
          <p><a href="https://forum.rebol.info/t/sending-values-into-a-blackhole/1347/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/sending-values-into-a-blackhole/1347/1</link>
        <pubDate>Sat, 26 Sep 2020 20:19:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1347-1</guid>
        <source url="https://forum.rebol.info/t/sending-values-into-a-blackhole/1347.rss">Sending Values into a BLACKHOLE!</source>
      </item>
      <item>
        <title>Sending Values into a BLACKHOLE!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>With BLACKHOLE! and Isotopes, we have a new excellent choice for opting out of mutating operations...!</strong></p>
<p>Historically, BrianH and others (including me) believed that mutating operations should not let you "opt out" of the target for the mutation.  There was too much potential for confusion if you wrote <strong>append block [1 2 3]</strong> and it silently didn't append, because block was a NONE!.</p>
<p>So we have this:</p>
<pre><code>r3-alpha&gt;&gt; block: none
r3-alpha&gt;&gt; append block [1 2 3]
** Script error: append does not allow none! for its series argument

red&gt;&gt; block: none
red&gt;&gt; append block [1 2 3]
*** Script Error: append does not allow none! for its series argument
</code></pre>
<p>Operations without side effects were deemed to be harmless by comparison:</p>
<pre><code>r3-alpha&gt;&gt; block: none
r3-alpha&gt;&gt; select block 'a
== none

red&gt;&gt; block: none
red&gt;&gt; select block 'a
== none
</code></pre>
<p>But even that had a kind of nasty property.  You could write a long chain of non-mutating operations, and at the end of the pipe you could get a NONE! without knowing where in that pipe the error occurred.  <em>(All of this compounded on the fact that a NONE! could have even literally been something that was selected, so your opt-out value could have been an actual selection result!)</em>  <a href="https://forum.rebol.info/t/null-blank-void-history-under-scrutiny/1249"><strong>This gave rise to Ren-C's BLANK!-in, NULL out philosophy.</strong></a></p>
<h2>New Option: <strong>BLACKHOLE! in, Isotope Out</strong>
</h2>
<p>I've already shown how useful BLACKHOLE! is with "opted-in" multiple returns and SET.  But now, I've made it possible to give blackholes as the input series for operations like APPEND:</p>
<pre><code>&gt;&gt; append # [a b c]
== ~blackhole~  ; isotope
</code></pre>
<p>This keeps you from having to write annoying patterns like:</p>
<pre><code>if not blank? my-series [
    append my-series [a b c]
]
</code></pre>
<p>The reason it's different is because blackholes are a very conscious way of opting-in to something without saying where you want the content to go.  <em>And they're truthy</em>, so they are a more natural fit for control flow...as opposed to blanks.</p>
<pre><code>if my-series [  ; can be a series or blackhole
     append my-series calculation  ; want calculation even if not the append
]
</code></pre>
<p>By comparison, blanks and nulls are sort of "unintentional"...they are very close to being an uninitialized state (or at least a state that is set without thinking too much about it).</p>
<h2>Interim Syntax paralleling <code>&lt;blank&gt;</code>
</h2>
<p>If you want a function that does BLACKHOLE!-in-Isotope-Out, just label the argument with <code>&lt;blackhole&gt;</code>.</p>
<pre><code>&gt;&gt; add-period: func [x [&lt;blackhole&gt; text!]] [
      print "Running ADD-PERIOD"
      append x "."
  ]

&gt;&gt; add-period "Hello World"
Running ADD-PERIOD
== "Hello World."

&gt;&gt; add-period # 
== ~blackhole~  ; isotope
</code></pre>
<p>So note that although the APPEND would have opted out here, the entire function is skipped if you pass a <code>#</code> to the <code>&lt;blackhole&gt;</code> argument.  (APPEND itself uses this same annotation.)</p>
<p>As for whether ~blackhole~ isotopes should casually decay back into # the way ~null~ isotopes decay into NULL... I don't know.  I'm trying it out to see how I like it!</p>
          <p><a href="https://forum.rebol.info/t/sending-values-into-a-blackhole/1347/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/sending-values-into-a-blackhole/1347/2</link>
        <pubDate>Thu, 09 Apr 2020 14:46:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1347-2</guid>
        <source url="https://forum.rebol.info/t/sending-values-into-a-blackhole/1347.rss">Sending Values into a BLACKHOLE!</source>
      </item>
  </channel>
</rss>
