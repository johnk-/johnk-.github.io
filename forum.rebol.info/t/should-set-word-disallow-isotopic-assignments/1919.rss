<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should SET-WORD! Disallow Isotopic Assignments?</title>
    <link>https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919</link>
    <description>Historically, Rebol2 and R3-Alpha wouldn&#39;t let you assign UNSET! via a SET-WORD!, regardless of whether it was provided literally or through an evaluation.  You had to use SET/ANY:

    rebol2&gt;&gt; x: #[unset!]
    ** Script error: x: needs a value

    rebol2&gt;&gt; x: print &quot;hi&quot;
    hi
    ** Script error: x: needs a value

    rebol2&gt;&gt; set/any &#39;x #[unset!]

    rebol2&gt;&gt; x
    ** Script Error: x has no value

At first, I thought Red made a concession in the direct assignment case:

    red&gt;&gt; x: #[unset!]
    == unset!

    red&gt;&gt; x: print &quot;hi&quot;
    hi
    *** Script Error: x: needs a value

However, that&#39;s not what&#39;s happening...it&#39;s an incompatible interpretation...where Red considers #[unset!] to be the datatype for unset!, and #[unset] (no exclamation point, illegal in Rebol2) is an actual unset value:

    red&gt;&gt; type? #[unset!]
    == datatype!

    red&gt;&gt; type? #[unset]
    == unset!
 
    red&gt;&gt; x: #[unset]
    *** Script Error: x: needs a value
  
**But I bring it up because at one point in time, Ren-C actually had a specific behavior that it would only allow a SET-WORD! to assign an unset to a variable if it was *not* the product of a function call.**  Today this would look something like:

    &gt;&gt; x: ~

    &gt;&gt; x: print &quot;hi&quot;
    ** Error: Cannot assign evaluative isotopes to X

    &gt;&gt; set/any &#39;x ~

    &gt;&gt; x
    ** Error: X is ~ isotope (e.g. isotopic BLANK!, represents an unset state)

**I&#39;ve wondered if this rule strikes the right balance.**  If you really want to deal with isotopic values that are the result of an evaluation, you would use ^META, and get the non-isotopic (QUASI!) form.  There&#39;d be several ways of saying it:

    &gt;&gt; x: ^ print &quot;hi&quot;
    == ~

    &gt;&gt; x: ^(print &quot;hi&quot;)
    == ~

    &gt;&gt; x: meta print &quot;hi&quot;
    == ~

    &gt;&gt; [^x]: print &quot;hi&quot;
    == ~

This makes much more sense now than when NULL and &quot;unset&quot; were the same state.  And it would help keep isotopes under control.

## Implications for the &quot;Only Isotopic ACTION! Runs&quot; Idea

This would mess with my current experimental branch where [isotopic actions stored in variables are the WORD!-triggered kind](https://forum.rebol.info/t/attack-of-the-activated-actions/1900) (while regular actions would be inert).

It has FUNC returning isotopic actions, and you&#39;d get an error:

    &gt;&gt; foo: func [/refine] [...]
    ** Error: Cannot assign isotope to FOO with SET-WORD! (see SET/ANY)

Making an exception for action isotopes, and saying they could be assigned without an annotation really feels like it undermines the entire proposal and the safety you&#39;d get from it.

I will note that I really did get a warm fuzzy feeling when the generators produced plain ACTION!, and something had to tip it into being isotopic.  But I had to pan **`/foo: func [... /refine] [...]`** in no small part due to leading-slash being &quot;taken&quot; by refinements in function spec and apply.

This made me take a more serious look at the concept of retaking something like **`-&gt;`**.  Under the new rules that wouldn&#39;t have to finesse the assignment as well:

    foo: -&gt; func [/refine] [...]

    foo: runs func [/refine] [...]  ; for those who dislike symbols

So either of these would act like **`set/any &#39;foo isotopic func [/refine] [...]`**.

Wait... *UNLESS...* :thinking: 

I just had a rather compelling thought, that such a tool could *only accept isotopic ACTION!*, and that this would provide natural guidance not to screw it up... because a plain assignment would error:

    &gt;&gt; foo: func [/refine] [...]
    ** Error: Can&#39;t assign isotope ACTION! via SET-WORD!, use -&gt; or INERT

*So if all the function generators were committed to returning isotopes, it would be self-correcting.*  You wouldn&#39;t be able to forget to triage the assignment.

    &gt;&gt; foo: inert func [x] [print [&quot;x is&quot; x]]
    == #[action! [x]]

    &gt;&gt; foo
    == #[action! [x]]

    &gt;&gt; foo: -&gt; func [x] [print [&quot;x is&quot; x]]
    == ~#[action! [x]]~  ; isotope

    &gt;&gt; foo 10
    x is 10

Now THAT is clever.  You&#39;re forced into triage, and can&#39;t forget to do one or the other!  Forgetting the annotation was one of the big Achilles heels of making generator products inert by default (hard to find bugs) but this ties that up.

Very promising premise!  But there are tricky issues, like how today&#39;s METHOD needs to look back to quote what it&#39;s being assigned to, in order to know how to bind the value.  Maybe it wouldn&#39;t need to... if **`-&gt;`** also made that binding connection...and maybe there&#39;d be no such thing as METHOD.  :exploding_head: 

## Related Question: What About VOID ?

A corollary to this question is **&quot;Should SET-WORD! Stop Treating VOID Assignments as Unsetting Variables&quot;**

It might seem obvious to say &quot;yes, that should be an error too&quot;.  In fact...since I&#39;ve vetoed the idea of variables actually being able to hold &quot;voidness&quot; it might seem like an *even worse sin* that should be prohibited... because you&#39;re not actually preserving the &quot;integrity&quot; of the assignment.

*BUT*... when I tried to rule it out I noticed that it was used in frames for things like setting refinements, like:

    &gt;&gt; series [a b c]
    &gt;&gt; value: 3

    &gt;&gt; f: make frame! :append
    &gt;&gt; f.series: series
    &gt;&gt; f.value: value
    &gt;&gt; f.dup: if integer? value [value]

    &gt;&gt; do f
    == [a b c 3 3 3]

But should the IF evaluate to void...the /DUP would not be set.  That not-set state was leading the default behavior for the refinement being not set (to coerce it to NULL in the call).

This is an interesting use case, and it arguably isn&#39;t &quot;doing an isotopic assignment&quot; (void is not an isotope, and it has no QUASI! form).  It&#39;s making a subtle judgment call, and it might be a good one.  I&#39;ll keep this as-is for now.

## Ultimate Goal: Freedom Of Choice  :statue_of_liberty: 

It&#39;s still definitely want to make it possible to override these behaviors if you find they get in your way.  Certainly we&#39;d need it for Redbol...but it should work at other granularities.

Why shouldn&#39;t you be able to say *&quot;hey, for just this function&#39;s body I want all the SET-WORD!s to assign isotopes without complaint&quot;*?</description>
    
    <lastBuildDate>Tue, 20 Sep 2022 21:50:16 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should SET-WORD! Disallow Isotopic Assignments?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1919">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong><a href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959">Use Isotopic Objects!</a></strong> So the ordinary isotopic action behavior with something like SET-WORD! would be to error. BUT you'd have function generators instead make an isotopic object that is able to coordinate with a method understood by SET-WORD! and friends when they go to assign, to say "all right, the isotopic object will take over performing the actual assignment". And it just quietly assigns the isotope without complaint.</p>
</blockquote>
</aside>
<p>I do think this is a cool idea.</p>
<p>But trying to bulletproof things on the assignment-side here feels like a pretty serious uphill battle.  I've posted about how the existence of the isotopes <a href="https://forum.rebol.info/t/attack-of-the-activated-actions/1900/2">forces your hand in COMPOSE situations</a>.</p>
<p>You can't put isotopes in blocks.  So the list I present of the 3 main ways to triage an action isotope in a COMPOSE are:</p>
<blockquote>
<ol>
<li>
<p><strong>compose [x: (reify func [] [print "Hi", return 10])]</strong><br>
produces <code>[x: #[action! []]]</code> ; plain action evaluates as invocation</p>
</li>
<li>
<p><strong>compose [x: (meta func [] [print "Hi", return 10])]</strong><br>
produces <code>[x: ~#[action! []]~]</code> ; quasiform evaluates to isotope action</p>
</li>
<li>
<p><strong>compose [x: '(reify func [] [print "Hi", return 10])]</strong><br>
produces <code>[x: '#[action! []]]</code> ; quoted evaluates by dropping quote to normal action</p>
</li>
</ol>
</blockquote>
<p>That gives you the three basic intents (running the function once and storing its result in X, storing a function isotope in X that will execute when you reference X, and storing a function value in X that will be fetched as a regular function value when you reference X).</p>
<p><em>But that's before adding in the spin that you can't assign action isotopes via normal SET-WORD!, but you need an isotopic object to step in and communicate with the SET-WORD! to suppress the error message.</em></p>
<p>That means the product in case [2] would be weirder, a <strong>~#[object! [...]]~</strong> with some voodoo inside.</p>
<h2>Should ACTION! Isotopes Quit While They're Ahead?</h2>
<p>I'm not quite at home with isotopic objects yet, so seeing the already new and weird notion of FUNC returning an isotope form...replaced by returning an isotopic object...is even weirder.</p>
<p><em>An easy retreat from the weirdness is to just say that isotopic actions are allowed to assign via SET-WORD!, and leave it at that.</em></p>
<ul>
<li>
<p>We're already getting a lot of protection coming from parameter types (not allowing isotopes by default, but being able to add them...<a href="https://forum.rebol.info/t/array-initial-and-action-isotopes/1975">see the writeup of how this was done in ARRAY/INITIAL</a>).</p>
</li>
<li>
<p>I've pointed out above that trying to get things like DO to protect against giving back isotopes is sort of a losing battle, because it would just give back the object isotope from a black box...and you've got the same problem over again.</p>
</li>
<li>
<p>We already know there's not going to be a hard rule against isotopic assignments through SET-WORD!.  ~true~ and ~false~ isotopes will be allowed as <strong>x: true</strong> and <strong>y: false</strong> would show...and I've basically proven why that shouldn't be done with some indirection through isotopic objects.</p>
</li>
</ul>
<h2>...or Am I Just Being Chicken?  <img src="https://forum.rebol.info/images/emoji/twitter/chicken.png?v=9" title=":chicken:" class="emoji" alt=":chicken:">
</h2>
<p>It's rather tough to feel <em>this close</em> to using the isotope distinction to protect assignments from becoming invokable functions too easily.</p>
<p>Making it hard runs up against the fact that people want <strong>foo: func [...] [...]</strong> to work, as well as <strong>foo: (func [...] [...])</strong>, and <strong>foo: do [func [...] [...]]</strong> etc. etc.</p>
<p>C++ has techniques that are similar to isotopic objects, where a function can create transitional classes that aren't really intended to be used as-is...but can be accepted by the constructors of other classes, so they can act polymorphically.</p>
<p>Because isotopic objects aren't meant to be stored in variables (in their isotopic state), we could get protection against a likely major source of accidents...with SELECT out of objects or a GET.</p>
<p>I think I'll have to try it.  But there's a lot of impact to sort through even with the first draft (where isotopic assignments are allowed).  So I'll sift through those bits first.</p>
          <p><a href="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/7</link>
        <pubDate>Tue, 20 Sep 2022 21:50:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1919-7</guid>
        <source url="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919.rss">Should SET-WORD! Disallow Isotopic Assignments?</source>
      </item>
      <item>
        <title>Should SET-WORD! Disallow Isotopic Assignments?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="5" data-topic="1919">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Then make isotopic action assignments illegal most of the rest of the time!</p>
</blockquote>
</aside>
<p>The isotopic object idea would mean that anything which passes through those objects would be allowing you to get an assignable action back.  So things like this would work:</p>
<pre><code>foo: if condition [
    func [...] [...]
] else [
    lambda [...] [...]
]
</code></pre>
<p>You lose your safeguards the more of a black-box this becomes, e.g.</p>
<pre><code>foo: do block
</code></pre>
<p>If isotopic objects are allowed to come back from DO (<a href="https://forum.rebol.info/t/pushing-the-potential-of-polyglot-polymorphic-do/1846">or whatever replaces it</a>), and they rubber-stamp the assignment, then the ornery nature of action isotopes will do you no good here.</p>
<p>I'm doubtful there's any perfect answer, so being able to just stop actions-that-run-from-words from getting into those words accidentally 90% of the time would be good.  Solving enumerations like FOR-EACH and not getting unintended evaluations is still the main place to bulletproof.</p>
          <p><a href="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/6</link>
        <pubDate>Sun, 18 Sep 2022 17:29:10 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1919-6</guid>
        <source url="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919.rss">Should SET-WORD! Disallow Isotopic Assignments?</source>
      </item>
      <item>
        <title>Should SET-WORD! Disallow Isotopic Assignments?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="2" data-topic="1919">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>that would make it easy to build your own auto-annotating generators.</p>
</blockquote>
</aside>
<p>So I think maybe this is another place isotopic objects can offer a solution (!)</p>
<p>Rather than try and hand back an isotopic action directly, a generator would make an isotopic object that had some kind of "assign" behavior.  The SET-WORD! / SET-BLOCK! / SET-TUPLE! would coordinate with objects that implemented this method, allowing them to take over the process... subverting the standard rules of what would be legal just by default.</p>
<p>Then make isotopic action assignments illegal most of the rest of the time!</p>
<p>As rephrased in chat to <a class="mention" href="/u/blackattr">@BlackATTR</a>:</p>
<hr>
<blockquote>
<p>The working concept for isotopic actions is that they'd be the only kind that execute when they are attached to words.  Then we make it difficult to get them into variables so you're pretty conscious when you have to worry about it.  You won't be able to pick isotopic actions out of blocks/groups or put them into them because isotopes are illegal in arrays... and that will solve problems like <code>block.1</code> running a function when you don't expect it to, so you don't need <code>:block.1</code></p>
<p>But they <em>could</em> be in objects.  So we'd need protection by saying something like <code>for-each [key val] some-object [...]</code> would not casually give you a VAL that was an isotope--it would error if it hit one.</p>
<ul>
<li>
<p>You'd use <code>for-each [key ^val]</code> to get the meta form (if VAL was an action isotope in the object, it would become a QUASI-ACTION! in your enumeration, and not run from word references)</p>
</li>
<li>
<p>You'd use <code>for-each [key ~val~]</code> to get it isotopically (if VAL was an action isotope in the object, it would remain an action isotope in your loop body...but since you wrote ~val~ explicitly you pretty clearly know what you're setting yourself up for.  So you won't be shocked by having to reference it by :VAL if you don't want it to run.)</p>
</li>
</ul>
<p>The thorn in this scheme was that if isotopes are so unfriendly to put in variables, writing <code>something: func [...] [...]</code> gets awkward.  You don't want every time you declare a function to have to say <code>set/any 'something func [...] [...]</code></p>
<p>And having that done for you by a weird enfix operator like RUNS with <code>something: runs func [...] [...]</code> isn't just aesthetically annoying, it also has all the usual defeats of such things, e.g. <code>something: (runs func [...] [...])</code> can't work because now RUNS can't quote left</p>
<p>Drum roll... <img src="https://forum.rebol.info/images/emoji/twitter/drum.png?v=9" title=":drum:" class="emoji" alt=":drum:"></p>
<p><strong><a href="https://forum.rebol.info/t/applications-of-isotopic-objects/1959">Use Isotopic Objects!</a></strong>   So the ordinary isotopic action behavior with something like SET-WORD! would be to error.  BUT you'd have function generators instead make an isotopic object that is able to coordinate with a method understood by SET-WORD! and friends when they go to assign, to say "all right, the isotopic object will take over performing the actual assignment".  And it just quietly assigns the isotope without complaint.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/5</link>
        <pubDate>Thu, 15 Sep 2022 16:32:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1919-5</guid>
        <source url="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919.rss">Should SET-WORD! Disallow Isotopic Assignments?</source>
      </item>
      <item>
        <title>Should SET-WORD! Disallow Isotopic Assignments?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1919">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Historically, Rebol2 and R3-Alpha wouldn't let you assign UNSET! via a SET-WORD!, regardless of whether it was provided literally or through an evaluation. You had to use SET/ANY:</p>
</blockquote>
</aside>
<p>Something kind of interesting comes up with the nature of a void assignment, which is that it's fundamentally different from other "isotopic assignments".  Because there kind of "isn't any such thing as a void isotope":</p>
<pre><code>&gt;&gt; (1 + 2, ~something~)
== ~something~  ; isotope

&gt;&gt; (1 + 2, ~)
== 3
</code></pre>
<p>So really, these put the evaluator in different situations:</p>
<pre><code>&gt;&gt; 1 + 2 x: ~
== 3

&gt;&gt; 1 + 2 x: ~something~
; would be ~something~ isotope if we allowed it
</code></pre>
<p>I think it's pretty clear that assigning a variable voidness should not result in the variable being whatever was before it, e.g.</p>
<pre><code>&gt;&gt; 1 + 2 x: ~
== 3

&gt;&gt; x
== 3  ; this would be nonsense.
</code></pre>
<p>So what's actually being assigned in an evaluator sense is <em>staleness</em>.  And we can distinguish staleness, and tolerate it as something entirely different from trying to assign a "real isotope".</p>
<h2>Another Thought: Isotopic Assignment Syntax</h2>
<p>I had an idea for a syntax in SET-BLOCK!...including multi-returns...that would allow assigning isotopes.</p>
<pre><code>&gt;&gt; x: spread [1 2 3]
** Error: Cannot assign isotope BLOCK! using SET-WORD!

&gt;&gt; [~x~]: spread [1 2 3]
== ~[1 2 3]~  isotope
</code></pre>
<p>A bit weird, yes.  But it's less wordy than SET/ANY (I still don't know if I like /ANY as the name for that refinement):</p>
<pre><code>&gt;&gt; set/any 'x spread [1 2 3]
== ~[1 2 3]~  ; isotope
</code></pre>
<p>And now that the QUASI! and isotopic representations are generic you can use this with GROUP!s:</p>
<pre><code>&gt;&gt; [~(second [y x])~]: spread [1 2 3]
== ~[1 2 3]~  ; isotope
</code></pre>
<p><em>I really do think people should avoid putting isotopes in variables like this</em>--it's a fringe requirement, by design.  So if you're going to do it, I don't have a problem with it looking a bit dicey.</p>
<p>I definitely prefer it to other ideas like <strong><code>x.: spread [1 2 3]</code></strong>, for a number of reasons--but the visibility of what you are doing is certainly one of those reasons.</p>
<p>This could also allow you to permit isotopes in things like FOR-EACH over OBJECT!s that had isotopic states.</p>
          <p><a href="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/4</link>
        <pubDate>Sat, 27 Aug 2022 10:30:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1919-4</guid>
        <source url="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919.rss">Should SET-WORD! Disallow Isotopic Assignments?</source>
      </item>
      <item>
        <title>Should SET-WORD! Disallow Isotopic Assignments?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="2" data-topic="1919">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>if it is possible to use the annotation inside the generator on the return value, that would make it easy to build your own auto-annotating generators.</p>
</blockquote>
</aside>
<p>This would imply that things like FUNC and ADAPT would become enfix functions with a <code>&lt;skip&gt;</code>-able SET-WORD! or SET-TUPLE! on the left...and if they saw something there they <em>could</em> fold the behavior in for you... otherwise they'd just return the isotope.</p>
<p>Though if any code or branching separated the generator from the SET-XXX!, it wouldn't work.  They'd even be foiled by just a GROUP!:</p>
<pre><code>&gt;&gt; foo: func [...] [...]
== ~#[action! [...]]~  ; isotope

&gt;&gt; foo: (func [...] [...])
** Error: Can't assign isotope ACTION! via SET-WORD!, use -&gt; or INERT 
</code></pre>
<p>So it would be possible, but kinda dodgy...making things more confusing.</p>
<p>It would probably better serve people who object to -&gt; to have some module level setting that says <em>"allow ACTION! isotope assignment without complaint"</em>.</p>
          <p><a href="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/3</link>
        <pubDate>Wed, 17 Aug 2022 09:58:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1919-3</guid>
        <source url="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919.rss">Should SET-WORD! Disallow Isotopic Assignments?</source>
      </item>
      <item>
        <title>Should SET-WORD! Disallow Isotopic Assignments?</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>Just a thought ... if it is possible to use the annotation inside the generator on the return value, that would make it easy to build your own auto-annotating generators.</p>
          <p><a href="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/2</link>
        <pubDate>Wed, 17 Aug 2022 09:33:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1919-2</guid>
        <source url="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919.rss">Should SET-WORD! Disallow Isotopic Assignments?</source>
      </item>
      <item>
        <title>Should SET-WORD! Disallow Isotopic Assignments?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically, Rebol2 and R3-Alpha wouldn't let you assign UNSET! via a SET-WORD!, regardless of whether it was provided literally or through an evaluation.  You had to use SET/ANY:</p>
<pre><code>rebol2&gt;&gt; x: #[unset!]
** Script error: x: needs a value

rebol2&gt;&gt; x: print "hi"
hi
** Script error: x: needs a value

rebol2&gt;&gt; set/any 'x #[unset!]

rebol2&gt;&gt; x
** Script Error: x has no value
</code></pre>
<p>At first, I thought Red made a concession in the direct assignment case:</p>
<pre><code>red&gt;&gt; x: #[unset!]
== unset!

red&gt;&gt; x: print "hi"
hi
*** Script Error: x: needs a value
</code></pre>
<p>However, that's not what's happening...it's an incompatible interpretation...where Red considers #[unset!] to be the datatype for unset!, and #[unset] (no exclamation point, illegal in Rebol2) is an actual unset value:</p>
<pre><code>red&gt;&gt; type? #[unset!]
== datatype!

red&gt;&gt; type? #[unset]
== unset!

red&gt;&gt; x: #[unset]
*** Script Error: x: needs a value
</code></pre>
<p><strong>But I bring it up because at one point in time, Ren-C actually had a specific behavior that it would only allow a SET-WORD! to assign an unset to a variable if it was <em>not</em> the product of a function call.</strong>  Today this would look something like:</p>
<pre><code>&gt;&gt; x: ~

&gt;&gt; x: print "hi"
** Error: Cannot assign evaluative isotopes to X

&gt;&gt; set/any 'x ~

&gt;&gt; x
** Error: X is ~ isotope (e.g. isotopic BLANK!, represents an unset state)
</code></pre>
<p><strong>I've wondered if this rule strikes the right balance.</strong>  If you really want to deal with isotopic values that are the result of an evaluation, you would use ^META, and get the non-isotopic (QUASI!) form.  There'd be several ways of saying it:</p>
<pre><code>&gt;&gt; x: ^ print "hi"
== ~

&gt;&gt; x: ^(print "hi")
== ~

&gt;&gt; x: meta print "hi"
== ~

&gt;&gt; [^x]: print "hi"
== ~
</code></pre>
<p>This makes much more sense now than when NULL and "unset" were the same state.  And it would help keep isotopes under control.</p>
<h2>Implications for the "Only Isotopic ACTION! Runs" Idea</h2>
<p>This would mess with my current experimental branch where <a href="https://forum.rebol.info/t/attack-of-the-activated-actions/1900">isotopic actions stored in variables are the WORD!-triggered kind</a> (while regular actions would be inert).</p>
<p>It has FUNC returning isotopic actions, and you'd get an error:</p>
<pre><code>&gt;&gt; foo: func [/refine] [...]
** Error: Cannot assign isotope to FOO with SET-WORD! (see SET/ANY)
</code></pre>
<p>Making an exception for action isotopes, and saying they could be assigned without an annotation really feels like it undermines the entire proposal and the safety you'd get from it.</p>
<p>I will note that I really did get a warm fuzzy feeling when the generators produced plain ACTION!, and something had to tip it into being isotopic.  But I had to pan <strong><code>/foo: func [... /refine] [...]</code></strong> in no small part due to leading-slash being "taken" by refinements in function spec and apply.</p>
<p>This made me take a more serious look at the concept of retaking something like <strong><code>-&gt;</code></strong>.  Under the new rules that wouldn't have to finesse the assignment as well:</p>
<pre><code>foo: -&gt; func [/refine] [...]

foo: runs func [/refine] [...]  ; for those who dislike symbols
</code></pre>
<p>So either of these would act like <strong><code>set/any 'foo isotopic func [/refine] [...]</code></strong>.</p>
<p>Wait... <em>UNLESS...</em> <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=9" title=":thinking:" class="emoji" alt=":thinking:"></p>
<p>I just had a rather compelling thought, that such a tool could <em>only accept isotopic ACTION!</em>, and that this would provide natural guidance not to screw it up... because a plain assignment would error:</p>
<pre><code>&gt;&gt; foo: func [/refine] [...]
** Error: Can't assign isotope ACTION! via SET-WORD!, use -&gt; or INERT
</code></pre>
<p><em>So if all the function generators were committed to returning isotopes, it would be self-correcting.</em>  You wouldn't be able to forget to triage the assignment.</p>
<pre><code>&gt;&gt; foo: inert func [x] [print ["x is" x]]
== #[action! [x]]

&gt;&gt; foo
== #[action! [x]]

&gt;&gt; foo: -&gt; func [x] [print ["x is" x]]
== ~#[action! [x]]~  ; isotope

&gt;&gt; foo 10
x is 10
</code></pre>
<p>Now THAT is clever.  You're forced into triage, and can't forget to do one or the other!  Forgetting the annotation was one of the big Achilles heels of making generator products inert by default (hard to find bugs) but this ties that up.</p>
<p>Very promising premise!  But there are tricky issues, like how today's METHOD needs to look back to quote what it's being assigned to, in order to know how to bind the value.  Maybe it wouldn't need to... if <strong><code>-&gt;</code></strong> also made that binding connection...and maybe there'd be no such thing as METHOD.  <img src="https://forum.rebol.info/images/emoji/twitter/exploding_head.png?v=9" title=":exploding_head:" class="emoji" alt=":exploding_head:"></p>
<h2>Related Question: What About VOID ?</h2>
<p>A corollary to this question is <strong>"Should SET-WORD! Stop Treating VOID Assignments as Unsetting Variables"</strong></p>
<p>It might seem obvious to say "yes, that should be an error too".  In fact...since I've vetoed the idea of variables actually being able to hold "voidness" it might seem like an <em>even worse sin</em> that should be prohibited... because you're not actually preserving the "integrity" of the assignment.</p>
<p><em>BUT</em>... when I tried to rule it out I noticed that it was used in frames for things like setting refinements, like:</p>
<pre><code>&gt;&gt; series [a b c]
&gt;&gt; value: 3

&gt;&gt; f: make frame! :append
&gt;&gt; f.series: series
&gt;&gt; f.value: value
&gt;&gt; f.dup: if integer? value [value]

&gt;&gt; do f
== [a b c 3 3 3]
</code></pre>
<p>But should the IF evaluate to void...the /DUP would not be set.  That not-set state was leading the default behavior for the refinement being not set (to coerce it to NULL in the call).</p>
<p>This is an interesting use case, and it arguably isn't "doing an isotopic assignment" (void is not an isotope, and it has no QUASI! form).  It's making a subtle judgment call, and it might be a good one.  I'll keep this as-is for now.</p>
<h2>Ultimate Goal: Freedom Of Choice  <img src="https://forum.rebol.info/images/emoji/twitter/statue_of_liberty.png?v=9" title=":statue_of_liberty:" class="emoji" alt=":statue_of_liberty:">
</h2>
<p>It's still definitely want to make it possible to override these behaviors if you find they get in your way.  Certainly we'd need it for Redbol...but it should work at other granularities.</p>
<p>Why shouldn't you be able to say <em>"hey, for just this function's body I want all the SET-WORD!s to assign isotopes without complaint"</em>?</p>
          <p><a href="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919/1</link>
        <pubDate>Wed, 17 Aug 2022 08:32:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1919-1</guid>
        <source url="https://forum.rebol.info/t/should-set-word-disallow-isotopic-assignments/1919.rss">Should SET-WORD! Disallow Isotopic Assignments?</source>
      </item>
  </channel>
</rss>
