<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>.WORD as Member Selection</title>
    <link>https://forum.rebol.info/t/word-as-member-selection/1843</link>
    <description>I just got bit by a situation where there was something like this:

     obj: make object! [
         spec: &lt;whatever&gt;
         actor: make object! [
              thing: function [port] [
                   spec: any [global.spec, port.spec]
                   ...
              ]
         ]
     ]

I changed this from a FUNCTION to a LAMBDA, forgetting that changing things from a function (today) changes it from doing SET-WORD! gathering.

That means SPEC: went from being a local variable (like LET SPEC:) and referred to the outer SPEC.  It overwrote it.

There&#39;s a lot going on here, but it reminds me of an idea I&#39;ve had that perhaps if you are writing code that wants to access object members you identify annotate that as **`.member`**

This is something that languages have struggled with.  In C++ people are always wondering if they should be clear and write **`this-&gt;member`** or if you should name members specially like **m_member**.  Reading Rust code today it&#39;s often littered with the mandatory **self.member** until SELF is repeated so often in a method you can&#39;t read any of the rest of the code.

I had a lot of trouble deciphering Rebmake due to not knowing what was a function, an object, a member, or a global.  It&#39;s a big advantage just to have dots for member selection distinct from slashes for refinements.  But it would be a bigger advantage to be able to see at a glance that something was a member with the relatively brief dot annotation on **.member** 

As with most things pertaining to binding, I have no real clue how to make it work or cohere.  But it&#39;s something that has been on my mind--and comes back to my attention every time problems with member variables comes up.</description>
    
    <lastBuildDate>Thu, 16 Jun 2022 20:59:26 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/word-as-member-selection/1843.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>.WORD as Member Selection</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>In theory this might allow</p>
<p>.spec being spec in actor and<br>
..spec being spec in obj .</p>
          <p><a href="https://forum.rebol.info/t/word-as-member-selection/1843/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/word-as-member-selection/1843/2</link>
        <pubDate>Thu, 16 Jun 2022 20:59:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1843-2</guid>
        <source url="https://forum.rebol.info/t/word-as-member-selection/1843.rss">.WORD as Member Selection</source>
      </item>
      <item>
        <title>.WORD as Member Selection</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I just got bit by a situation where there was something like this:</p>
<pre><code> obj: make object! [
     spec: &lt;whatever&gt;
     actor: make object! [
          thing: function [port] [
               spec: any [global.spec, port.spec]
               ...
          ]
     ]
 ]
</code></pre>
<p>I changed this from a FUNCTION to a LAMBDA, forgetting that changing things from a function (today) changes it from doing SET-WORD! gathering.</p>
<p>That means SPEC: went from being a local variable (like LET SPEC:) and referred to the outer SPEC.  It overwrote it.</p>
<p>There's a lot going on here, but it reminds me of an idea I've had that perhaps if you are writing code that wants to access object members you identify annotate that as <strong><code>.member</code></strong></p>
<p>This is something that languages have struggled with.  In C++ people are always wondering if they should be clear and write <strong><code>this-&gt;member</code></strong> or if you should name members specially like <strong>m_member</strong>.  Reading Rust code today it's often littered with the mandatory <strong>self.member</strong> until SELF is repeated so often in a method you can't read any of the rest of the code.</p>
<p>I had a lot of trouble deciphering Rebmake due to not knowing what was a function, an object, a member, or a global.  It's a big advantage just to have dots for member selection distinct from slashes for refinements.  But it would be a bigger advantage to be able to see at a glance that something was a member with the relatively brief dot annotation on <strong>.member</strong></p>
<p>As with most things pertaining to binding, I have no real clue how to make it work or cohere.  But it's something that has been on my mind--and comes back to my attention every time problems with member variables comes up.</p>
          <p><a href="https://forum.rebol.info/t/word-as-member-selection/1843/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/word-as-member-selection/1843/1</link>
        <pubDate>Thu, 16 Jun 2022 09:17:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1843-1</guid>
        <source url="https://forum.rebol.info/t/word-as-member-selection/1843.rss">.WORD as Member Selection</source>
      </item>
  </channel>
</rss>
