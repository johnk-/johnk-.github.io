<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The PARSE of /PROGRESS</title>
    <link>https://forum.rebol.info/t/the-parse-of-progress/1349</link>
    <description>There has been a lot of fiddling over time with PARSE&#39;s return value.  :violin: 

It was long believed that a failed PARSE should return NULL.  This would make it play nicely with ELSE and THEN.  The question was thus what to return on success:

1. Just returning ~okay~ makes the output of PARSE easier to read in tutorials.  This isn&#39;t overwhelmingly important.

2. Returning the input value would make it easy to use PARSE as a validator for data.

       if parse data [integer! integer!] [  ; exactly two integers
          call-routine data
       ] else [fail]

       call-routine (parse data [integer! integer!] else [fail])  ; nicer

       call-routine non null parse data [integer! integer!]  ; even nicer :-)

3. Returning how far a successful parse got was strictly more informative, as the information on a partial process is difficult to reconstruct otherwise.

For at least some time, @rgchris favored #3, because many sophisticated tasks are helped by knowing how far PARSE got.  But that required a change to the semantics of PARSE to not automatically fail on partial inputs, so the rules had to explicitly ask to hit an **`&lt;end&gt;`**

But the need to tack on `&lt;end&gt;` made some things seem less concise and elegant.  And surveying how other languages do &quot;destructuring&quot; made me feel that PARSE requiring completion was the best answer in the Redbol world.  When you&#39;re matching a structure against `[tag! tag!]` it feels somewhat wrong for `[&lt;x&gt; &lt;y&gt; &lt;z&gt;]` to &quot;match&quot; when it seems &quot;over the limit&quot;.

## UPARSE Offers The Best Of All Worlds

Everything changed with UPARSE.

First of all, if a PARSE doesn&#39;t match **[it raises a definitional error](https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924)**.  This provides a welcome safety net.

    &gt;&gt; parse &quot;abc&quot; [&quot;ab&quot;]
    ** Error: PARSE partially matched the input, but didn&#39;t reach the tail

You can use TRY PARSE if you like, and get NULL..though possibly conflating with NULL.  You can use EXCEPT to specifically handle exceptions in a postfix manner.  Or using META/EXCEPT will give you a plain ERROR! on definitonal error, and a META&#39;d value otherwise.

All rules synthesize a result, and you can end the parse at any time with ACCEPT:

    &gt;&gt; parse &quot;abc&quot; [&quot;ab&quot;, accept &lt;input&gt;]
    == &quot;abc&quot;

    &gt;&gt; parse &quot;abc&quot; [&quot;ab&quot;, accept &lt;here&gt;]
    == &quot;c&quot;

You can even pack up multi-return values and give them back.  The possibilties are pretty much endless, and so the policy of returning the synthesized result has won out.</description>
    
    <lastBuildDate>Thu, 12 Sep 2024 23:18:12 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/the-parse-of-progress/1349.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The PARSE of /PROGRESS</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There has been a lot of fiddling over time with PARSE's return value.  <img src="https://forum.rebol.info/images/emoji/twitter/violin.png?v=12" title=":violin:" class="emoji" alt=":violin:" loading="lazy" width="20" height="20"></p>
<p>It was long believed that a failed PARSE should return NULL.  This would make it play nicely with ELSE and THEN.  The question was thus what to return on success:</p>
<ol>
<li>
<p>Just returning ~okay~ makes the output of PARSE easier to read in tutorials.  This isn't overwhelmingly important.</p>
</li>
<li>
<p>Returning the input value would make it easy to use PARSE as a validator for data.</p>
<pre><code>if parse data [integer! integer!] [  ; exactly two integers
   call-routine data
] else [fail]

call-routine (parse data [integer! integer!] else [fail])  ; nicer

call-routine non null parse data [integer! integer!]  ; even nicer :-)
</code></pre>
</li>
<li>
<p>Returning how far a successful parse got was strictly more informative, as the information on a partial process is difficult to reconstruct otherwise.</p>
</li>
</ol>
<p>For at least some time, <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> favored <span class="hashtag">#3</span>, because many sophisticated tasks are helped by knowing how far PARSE got.  But that required a change to the semantics of PARSE to not automatically fail on partial inputs, so the rules had to explicitly ask to hit an <strong><code>&lt;end&gt;</code></strong></p>
<p>But the need to tack on <code>&lt;end&gt;</code> made some things seem less concise and elegant.  And surveying how other languages do "destructuring" made me feel that PARSE requiring completion was the best answer in the Redbol world.  When you're matching a structure against <code>[tag! tag!]</code> it feels somewhat wrong for <code>[&lt;x&gt; &lt;y&gt; &lt;z&gt;]</code> to "match" when it seems "over the limit".</p>
<h2>
<a name="uparse-offers-the-best-of-all-worlds-1" class="anchor" href="https://forum.rebol.info#uparse-offers-the-best-of-all-worlds-1"></a>UPARSE Offers The Best Of All Worlds</h2>
<p>Everything changed with UPARSE.</p>
<p>First of all, if a PARSE doesn't match <strong><a href="https://forum.rebol.info/t/try-parse-parse-except-raise-on-mismatch/1924">it raises a definitional error</a></strong>.  This provides a welcome safety net.</p>
<pre><code>&gt;&gt; parse "abc" ["ab"]
** Error: PARSE partially matched the input, but didn't reach the tail
</code></pre>
<p>You can use TRY PARSE if you like, and get NULL..though possibly conflating with NULL.  You can use EXCEPT to specifically handle exceptions in a postfix manner.  Or using META/EXCEPT will give you a plain ERROR! on definitonal error, and a META'd value otherwise.</p>
<p>All rules synthesize a result, and you can end the parse at any time with ACCEPT:</p>
<pre><code>&gt;&gt; parse "abc" ["ab", accept &lt;input&gt;]
== "abc"

&gt;&gt; parse "abc" ["ab", accept &lt;here&gt;]
== "c"
</code></pre>
<p>You can even pack up multi-return values and give them back.  The possibilties are pretty much endless, and so the policy of returning the synthesized result has won out.</p>
          <p><a href="https://forum.rebol.info/t/the-parse-of-progress/1349/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-parse-of-progress/1349/1</link>
        <pubDate>Mon, 28 Sep 2020 17:02:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1349-1</guid>
        <source url="https://forum.rebol.info/t/the-parse-of-progress/1349.rss">The PARSE of /PROGRESS</source>
      </item>
  </channel>
</rss>
