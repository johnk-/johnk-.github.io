<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The PARSE of /PROGRESS</title>
    <link>https://forum.rebol.info/t/the-parse-of-progress/1349</link>
    <description>There has been a lot of fiddling over time with PARSE&#39;s return value.  :violin: 

In order to make it play nicely with ELSE and THEN, a failed parse should return NULL.  But a successful parse could return many things.

1. Just returning #[true] makes the output of PARSE easier to read in tutorials.  This isn&#39;t overwhelmingly important (and mitigated by DID in modern scenarios).

2. Returning the input value makes it easy to use PARSE as a validator for data.

       if parse data [integer! integer!] [  ; exactly two integers
          call-routine data
       ] else [fail]

       call-routine (parse data [integer! integer!] else [fail])  ; nicer

       call-routine non null parse data [integer! integer!]  ; even nicer :-)

3. Returning how far a successful parse got is strictly more informative, as the information on a partial process is difficult to reconstruct otherwise.

For at least some time, @rgchris favored #3, because many sophisticated tasks are helped by knowing how far PARSE got.  But that required a change to the semantics of PARSE to not automatically fail on partial inputs, so the rules had to explicitly ask to hit an **`&lt;end&gt;`**

But the need to tack on `&lt;end&gt;` made some things seem less concise and elegant.  And surveying how other languages do &quot;destructuring&quot; made me feel that PARSE requiring completion was the best answer in the Redbol world.  When you&#39;re matching a structure against `[tag! tag!]` it feels somewhat wrong for `[&lt;x&gt; &lt;y&gt; &lt;z&gt;]` to &quot;match&quot; when it seems &quot;over the limit&quot;.

## UPARSE Offers The Best Of All Worlds

Everything changed with UPARSE.  All rules synthesize a result, and you can end the parse at any time with RETURN:

    &gt;&gt; uparse &quot;abc&quot; [&quot;ab&quot;]
    ; null

    &gt;&gt; uparse &quot;abc&quot; [&quot;ab&quot;, return &lt;input&gt;]
    == &quot;abc&quot;

    &gt;&gt; uparse &quot;abc&quot; [&quot;ab&quot;, return &lt;here&gt;]
    == &quot;c&quot;

Regardless, there is a lower-level piece of implementation called `UPARSE*` that doesn&#39;t have the &quot;must reach end, unless there&#39;s a return&quot; condition.

    &gt;&gt; uparse* &quot;abc&quot; [&quot;ab&quot;]
    == &quot;ab&quot;</description>
    
    <lastBuildDate>Thu, 26 May 2022 21:11:33 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/the-parse-of-progress/1349.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The PARSE of /PROGRESS</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There has been a lot of fiddling over time with PARSE's return value.  <img src="https://forum.rebol.info/images/emoji/twitter/violin.png?v=9" title=":violin:" class="emoji" alt=":violin:"></p>
<p>In order to make it play nicely with ELSE and THEN, a failed parse should return NULL.  But a successful parse could return many things.</p>
<ol>
<li>
<p>Just returning #[true] makes the output of PARSE easier to read in tutorials.  This isn't overwhelmingly important (and mitigated by DID in modern scenarios).</p>
</li>
<li>
<p>Returning the input value makes it easy to use PARSE as a validator for data.</p>
<pre><code>if parse data [integer! integer!] [  ; exactly two integers
   call-routine data
] else [fail]

call-routine (parse data [integer! integer!] else [fail])  ; nicer

call-routine non null parse data [integer! integer!]  ; even nicer :-)
</code></pre>
</li>
<li>
<p>Returning how far a successful parse got is strictly more informative, as the information on a partial process is difficult to reconstruct otherwise.</p>
</li>
</ol>
<p>For at least some time, <a class="mention" href="/u/rgchris">@rgchris</a> favored <span class="hashtag">#3</span>, because many sophisticated tasks are helped by knowing how far PARSE got.  But that required a change to the semantics of PARSE to not automatically fail on partial inputs, so the rules had to explicitly ask to hit an <strong><code>&lt;end&gt;</code></strong></p>
<p>But the need to tack on <code>&lt;end&gt;</code> made some things seem less concise and elegant.  And surveying how other languages do "destructuring" made me feel that PARSE requiring completion was the best answer in the Redbol world.  When you're matching a structure against <code>[tag! tag!]</code> it feels somewhat wrong for <code>[&lt;x&gt; &lt;y&gt; &lt;z&gt;]</code> to "match" when it seems "over the limit".</p>
<h2>UPARSE Offers The Best Of All Worlds</h2>
<p>Everything changed with UPARSE.  All rules synthesize a result, and you can end the parse at any time with RETURN:</p>
<pre><code>&gt;&gt; uparse "abc" ["ab"]
; null

&gt;&gt; uparse "abc" ["ab", return &lt;input&gt;]
== "abc"

&gt;&gt; uparse "abc" ["ab", return &lt;here&gt;]
== "c"
</code></pre>
<p>Regardless, there is a lower-level piece of implementation called <code>UPARSE*</code> that doesn't have the "must reach end, unless there's a return" condition.</p>
<pre><code>&gt;&gt; uparse* "abc" ["ab"]
== "ab"</code></pre>
          <p><a href="https://forum.rebol.info/t/the-parse-of-progress/1349/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-parse-of-progress/1349/1</link>
        <pubDate>Mon, 28 Sep 2020 17:02:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1349-1</guid>
        <source url="https://forum.rebol.info/t/the-parse-of-progress/1349.rss">The PARSE of /PROGRESS</source>
      </item>
  </channel>
</rss>
