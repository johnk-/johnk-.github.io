<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should ANY and ALL Vaporize VOID (or require ELIDE-IF-VOID ?)</title>
    <link>https://forum.rebol.info/t/should-any-and-all-vaporize-void-or-require-elide-if-void/2040</link>
    <description>I&#39;ve written up how [the evolution of invisibility gave rise to VOID vs. NIHIL](https://forum.rebol.info/t/invisibility-reviewed-through-modern-eyes/2034).

The default evaluator (and UPARSE) accept that void is &quot;nothing&quot; and can&#39;t be put in blocks.  But they don&#39;t vaporize VOID on a whim: it will still be the result of expressions whose last result is a void.

    &gt;&gt; 1 + 2 if false [&lt;a&gt;]
    ; void

On the other hand, the empty parameter pack of NIHIL truly vaporizes unless you pipe it around with ^META:

    &gt;&gt; 1 + 2 nihil
    == 3

This means it&#39;s up to constructs to decide if they want to erase voids or not.  DELIMIT does, so you will see that reflected in things like UNSPACED:

    &gt;&gt; unspaced [&quot;A&quot; if false [&quot;B&quot;] &quot;C&quot;]
    == &quot;AC&quot;

COMPOSE vaporizes void slots (and errors on null ones).  [REDUCE is currently vaporizing VOID](https://forum.rebol.info/t/vaporizing-failed-conditionals-in-reduce/1665) because it seems like the default people want.

## Should ANY and ALL Vaporize Voids?

To me, this is a bit of a tough decision.

VOID is neither truthy nor falsey, and IF will reject it:

    &gt;&gt; if (if false [true]) [&lt;unreachable&gt;]
    ** Error: IF doesn&#39;t accept VOID as its condition argument

When there was no VOID/NIHIL distinction, then ANY and ALL were backed into a corner.  If they decided to error on void, you couldn&#39;t use an ELIDE or ASSERT in the middle of them.  If they didn&#39;t error on VOID then the risk was that you could write something like **`all [1 = 1, 2 = 2, value]`** and if VALUE was just incidentally void you&#39;d get the 2 = 2 result as ~true~.

Today, things like ELIDE and ASSERT return NIHIL and can be safely vaporized by ANY and ALL, while retaining the choice to error on voids as not being true or false.  If you really want to erase voids, we can have something that converts voids to nihil called ELIDE-IF-VOID

    &gt;&gt; value: void

    &gt;&gt; all [1 = 1, 2 = 2, value]
    ** Error: VALUE is VOID which is neither truthy nor falsey

    &gt;&gt; all [1 = 1, 2 = 2, elide-if-void value]
    == ~true~  ; isotope

## Things Like [FOR-BOTH](https://forum.rebol.info/t/demonstrating-for-both-loop-composability-for-the-win/1833) Would Get More Awkward...

I was fairly proud of this formulation:

    for-both: func [&#39;var blk1 blk2 body] [
        return unmeta* all [
            meta* for-each (var) blk1 body
            meta* for-each (var) blk2 body
        ]
    ]

(I wound up deciding that META would meta-raise everything--including pure null and void--so the asterisks were probably best included there for the alternative formulation.)

But if ALL and ANY errored on void, and you had to erase it, this would become:

    for-both: func [&#39;var blk1 blk2 body] [
        return unmeta* all [
            elide-if-void meta* for-each (var) blk1 body
            elide-if-void meta* for-each (var) blk2 body
        ]
    ]

If I put on my formalism hat, I can see how this is *safer*.  But I&#39;ve made similar arguments about why I don&#39;t want this:

    &gt;&gt; compose [a (if false [&#39;b]) c]
    ** Error: COMPOSE cannot erase VOID (use ELIDE-IF-VOID if intentional)

    &gt;&gt; compose [a (elide-if-void if false [&#39;b]) c]
    == [a c]

It is admittedly a bit different in ANY and ALL&#39;s case, because they&#39;re mixing in a test for truthiness.  But erasing voids by default has other advantages in writing wild control constructs.

I&#39;m really torn on this, as it&#39;s right on the edge.  **But when all things are mostly equal, safety isn&#39;t as compelling as enabling creativity in my current view of the language.**  I think I&#39;m going to wait until I see a really bad consequence of vaporizing the voids here... it hasn&#39;t broken any real code yet, and it has proven its convenience.</description>
    
    <lastBuildDate>Thu, 29 Jun 2023 02:51:00 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/should-any-and-all-vaporize-void-or-require-elide-if-void/2040.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should ANY and ALL Vaporize VOID (or require ELIDE-IF-VOID ?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've written up how <a href="https://forum.rebol.info/t/invisibility-reviewed-through-modern-eyes/2034">the evolution of invisibility gave rise to VOID vs. NIHIL</a>.</p>
<p>The default evaluator (and UPARSE) accept that void is "nothing" and can't be put in blocks.  But they don't vaporize VOID on a whim: it will still be the result of expressions whose last result is a void.</p>
<pre><code>&gt;&gt; 1 + 2 if false [&lt;a&gt;]
; void
</code></pre>
<p>On the other hand, the empty parameter pack of NIHIL truly vaporizes unless you pipe it around with ^META:</p>
<pre><code>&gt;&gt; 1 + 2 nihil
== 3
</code></pre>
<p>This means it's up to constructs to decide if they want to erase voids or not.  DELIMIT does, so you will see that reflected in things like UNSPACED:</p>
<pre><code>&gt;&gt; unspaced ["A" if false ["B"] "C"]
== "AC"
</code></pre>
<p>COMPOSE vaporizes void slots (and errors on null ones).  <a href="https://forum.rebol.info/t/vaporizing-failed-conditionals-in-reduce/1665">REDUCE is currently vaporizing VOID</a> because it seems like the default people want.</p>
<h2>
<a name="should-any-and-all-vaporize-voids-1" class="anchor" href="https://forum.rebol.info#should-any-and-all-vaporize-voids-1"></a>Should ANY and ALL Vaporize Voids?</h2>
<p>To me, this is a bit of a tough decision.</p>
<p>VOID is neither truthy nor falsey, and IF will reject it:</p>
<pre><code>&gt;&gt; if (if false [true]) [&lt;unreachable&gt;]
** Error: IF doesn't accept VOID as its condition argument
</code></pre>
<p>When there was no VOID/NIHIL distinction, then ANY and ALL were backed into a corner.  If they decided to error on void, you couldn't use an ELIDE or ASSERT in the middle of them.  If they didn't error on VOID then the risk was that you could write something like <strong><code>all [1 = 1, 2 = 2, value]</code></strong> and if VALUE was just incidentally void you'd get the 2 = 2 result as ~true~.</p>
<p>Today, things like ELIDE and ASSERT return NIHIL and can be safely vaporized by ANY and ALL, while retaining the choice to error on voids as not being true or false.  If you really want to erase voids, we can have something that converts voids to nihil called ELIDE-IF-VOID</p>
<pre><code>&gt;&gt; value: void

&gt;&gt; all [1 = 1, 2 = 2, value]
** Error: VALUE is VOID which is neither truthy nor falsey

&gt;&gt; all [1 = 1, 2 = 2, elide-if-void value]
== ~true~  ; isotope
</code></pre>
<h2>
<a name="things-like-for-bothhttpsforumrebolinfotdemonstrating-for-both-loop-composability-for-the-win1833-would-get-more-awkward-2" class="anchor" href="https://forum.rebol.info#things-like-for-bothhttpsforumrebolinfotdemonstrating-for-both-loop-composability-for-the-win1833-would-get-more-awkward-2"></a>Things Like <a href="https://forum.rebol.info/t/demonstrating-for-both-loop-composability-for-the-win/1833">FOR-BOTH</a> Would Get More Awkward...</h2>
<p>I was fairly proud of this formulation:</p>
<pre><code>for-both: func ['var blk1 blk2 body] [
    return unmeta* all [
        meta* for-each (var) blk1 body
        meta* for-each (var) blk2 body
    ]
]
</code></pre>
<p>(I wound up deciding that META would meta-raise everything--including pure null and void--so the asterisks were probably best included there for the alternative formulation.)</p>
<p>But if ALL and ANY errored on void, and you had to erase it, this would become:</p>
<pre><code>for-both: func ['var blk1 blk2 body] [
    return unmeta* all [
        elide-if-void meta* for-each (var) blk1 body
        elide-if-void meta* for-each (var) blk2 body
    ]
]
</code></pre>
<p>If I put on my formalism hat, I can see how this is <em>safer</em>.  But I've made similar arguments about why I don't want this:</p>
<pre><code>&gt;&gt; compose [a (if false ['b]) c]
** Error: COMPOSE cannot erase VOID (use ELIDE-IF-VOID if intentional)

&gt;&gt; compose [a (elide-if-void if false ['b]) c]
== [a c]
</code></pre>
<p>It is admittedly a bit different in ANY and ALL's case, because they're mixing in a test for truthiness.  But erasing voids by default has other advantages in writing wild control constructs.</p>
<p>I'm really torn on this, as it's right on the edge.  <strong>But when all things are mostly equal, safety isn't as compelling as enabling creativity in my current view of the language.</strong>  I think I'm going to wait until I see a really bad consequence of vaporizing the voids here... it hasn't broken any real code yet, and it has proven its convenience.</p>
          <p><a href="https://forum.rebol.info/t/should-any-and-all-vaporize-void-or-require-elide-if-void/2040/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-any-and-all-vaporize-void-or-require-elide-if-void/2040/1</link>
        <pubDate>Thu, 29 Jun 2023 02:09:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2040-1</guid>
        <source url="https://forum.rebol.info/t/should-any-and-all-vaporize-void-or-require-elide-if-void/2040.rss">Should ANY and ALL Vaporize VOID (or require ELIDE-IF-VOID ?)</source>
      </item>
  </channel>
</rss>
