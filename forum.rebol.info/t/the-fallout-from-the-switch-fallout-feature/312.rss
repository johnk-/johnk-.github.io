<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The fallout from the SWITCH fallout feature</title>
    <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312</link>
    <description>To try and be a little bit more clever, Ren-C added the ability of SWITCH to let the last value &quot;fall out&quot;.   So instead of writing:

    rebol2&gt;&gt; result: switch/default &quot;z&quot; [
                &quot;a&quot; [print &quot;won&#39;t run&quot; 10]
                &quot;b&quot; [print &quot;this either&quot; 20]
             ][
                30
             ]
    == 30

You could just write:

    &gt;&gt; result: switch &quot;z&quot; [
           &quot;a&quot; [print &quot;won&#39;t run&quot;, 10]
           &quot;b&quot; [print &quot;this either&quot;, 20]
           30
       ]
    == 30

Additionally, because Ren-C&#39;s switch cases evaluate, you could put arbitrary code and it will fall out:

    &gt;&gt; var: &quot;a&quot;
    &gt;&gt; result: switch &quot;z&quot; [
           var [print &quot;won&#39;t run&quot;, 10]
           (first [&quot;b&quot; &quot;c&quot;]) [print &quot;this either&quot;, 20]
           10 + 20
       ]
    == 30

It was an interesting idea of folding the default inside the same block as the clauses.  It that felt a bit like being able to fold defaults inside a CASE statement using TRUE:

    &gt;&gt; case [
          1 &gt; 2 [&lt;nope&gt;]
          3 &gt; 4 [&lt;nope&gt;]
          true [&lt;your default here&gt;]
    ]
    == &lt;your default here&gt;

But with ELSE and THEN, is this feature still interesting?

     result: switch &quot;z&quot; [
         &quot;a&quot; [print &quot;won&#39;t run&quot; | 10]
         &quot;b&quot; [print &quot;this either&quot; | 20]
     ] else [
         10 + 20
     ]

The fallout feature doesn&#39;t have much cost; it&#39;s nearly free.  And for the performance-minded, it&#39;s the fastest way to have a default value.

**Does fallout make SWITCH feel like it&#39;s fancier and has good dialecting bones, taking advantage of Rebol&#39;s unconventional-ness?  Or does it make SWITCH seem weird...like you&#39;re looking at incomplete code, missing the branch for the last switch case?  What do people think looking over it in the above examples?**</description>
    
    <lastBuildDate>Wed, 18 May 2022 08:29:49 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="312">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Does fallout make SWITCH feel like it’s fancier and has good dialecting bones, taking advantage of Rebol’s unconventional-ness?  Or does it make SWITCH seem weird…like you’re looking at incomplete code, missing the branch for the last switch case?  What do people think looking over it in the above examples?</p>
</blockquote>
</aside>
<p>I'm going to come out <strong>in favor of the switch fallout feature</strong>.  Reasons:</p>
<ol>
<li>
<p>Performance-wise, it is the fastest defaulting mechanism...faster than ELSE or SWITCH/DEFAULT.</p>
</li>
<li>
<p>If people don't like it, they don't have to use it.</p>
</li>
<li>
<p>Due to the nature of ELSE, it completes the left hand side of an expression.  Sometimes when an expression can be completed you don't want it to...and this means you need <code>&lt;-</code>, so for instance you have to write <strong>append x &lt;- switch [...] else [code]</strong>.  But with switch fallout, you can do it as <strong>append x switch [... (code)]</strong>.</p>
</li>
</ol>
<p>Point 3 is a reason to not blindly convert EITHERs into IF...ELSE.  Or CASEs ending in true [...] to CASE...ELSE.  Sometimes it's better to duck an arrow.</p>
<p>I've also noticed that CASE ending in <strong>true [...]</strong> can be more compact than a CASE...ELSE.  That applies to the fallout switch too, it's just shorter.</p>
<p><em>(Note: As some have pointed out, writing <strong>/else [...]</strong> as your last "truthy" case is actually faster, because there's no variable lookup involved (true =&gt; #[true]), /ELSE is just "truthy" by nature.  So we should probably prefer that as an idiom.)</em></p>
<p>Now a new question...</p>
<h3><a name="p-2353-should-case-also-support-fallout-1" class="anchor" href="https://forum.rebol.info#p-2353-should-case-also-support-fallout-1"></a>Should CASE also support fallout?</h3>
<p>There've been some increases to the strictness of CASE.  It now pretty much requires blocks for the clauses, and given that it does that, might we allow:</p>
<pre><code>&gt;&gt; case [
       1 &gt; 2 [...]
       3 &gt; 4 [...]
       10 + 20
   ]
== 30
</code></pre>
<p>It would be consistent with SWITCH, and the risks of such a construct are much lower than they used to be.  Note that since there's strict alternation, you couldn't say <strong>10 + 20 30</strong>, it would measure that exactly one expression ran and then it either ends or there's a source-level block.</p>
<p>A lot of the same arguments for why it's good for SWITCH apply here, too.  (And of course, useful for Code Golf...)  Certainly the "you don't have to use it if you don't want to" seems a pretty strong point.</p>
<blockquote>
<p><strong>Update:</strong> <a href="https://github.com/metaeducation/ren-c/pull/822">Fallout from CASE committed</a></p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/8</link>
        <pubDate>Tue, 19 Jun 2018 10:02:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-8</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[johnk]]></dc:creator>
        <description><![CDATA[
            <p>Removing <code>/default</code> makes sense given the availability of <code>else</code>. I'll add my vote to make this change.<br>
All of these small changes reduce the size of the language hence make it easier to learn.<br>
Good stuff. -John</p>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/3</link>
        <pubDate>Sun, 01 Oct 2017 00:31:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-3</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I should add that I'm seriously considering getting rid of <code>SWITCH/DEFAULT</code>.  With void as the generic signal for "this action was a no-op", there's a much richer landscape of ways to deal with defaulting that apply to every operation that obeys the conventions.</p>
<p>More useful IMO would be to add <code>SWITCH/ALL</code>.  With the ability to do soft-quoted evaluations, there are actually meaningful use cases for <code>switch/all x [...] also [...] else [...]</code></p>
<p>This would be a change to the core C native--obviously a SWITCH which supported /DEFAULT could be grafted on top of that.</p>
<blockquote>
<p><strong>Update June 2018:</strong> <a href="https://github.com/metaeducation/ren-c/pull/822">SWITCH/DEFAULT eliminated</a></p>
</blockquote>
<blockquote>
<p><strong>Update September 2019:</strong> <a href="https://forum.rebol.info/t/augment-add-parameters-and-refinements-after-the-fact/1216">/DEFAULT can be added back to a derivation of SWITCH for compatibility via AUGMENT</a></p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/2</link>
        <pubDate>Mon, 25 Sep 2017 21:59:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-2</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
      <item>
        <title>The fallout from the SWITCH fallout feature</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>To try and be a little bit more clever, Ren-C added the ability of SWITCH to let the last value "fall out".   So instead of writing:</p>
<pre><code>rebol2&gt;&gt; result: switch/default "z" [
            "a" [print "won't run" 10]
            "b" [print "this either" 20]
         ][
            30
         ]
== 30
</code></pre>
<p>You could just write:</p>
<pre><code>&gt;&gt; result: switch "z" [
       "a" [print "won't run", 10]
       "b" [print "this either", 20]
       30
   ]
== 30
</code></pre>
<p>Additionally, because Ren-C's switch cases evaluate, you could put arbitrary code and it will fall out:</p>
<pre><code>&gt;&gt; var: "a"
&gt;&gt; result: switch "z" [
       var [print "won't run", 10]
       (first ["b" "c"]) [print "this either", 20]
       10 + 20
   ]
== 30
</code></pre>
<p>It was an interesting idea of folding the default inside the same block as the clauses.  It that felt a bit like being able to fold defaults inside a CASE statement using TRUE:</p>
<pre><code>&gt;&gt; case [
      1 &gt; 2 [&lt;nope&gt;]
      3 &gt; 4 [&lt;nope&gt;]
      true [&lt;your default here&gt;]
]
== &lt;your default here&gt;
</code></pre>
<p>But with ELSE and THEN, is this feature still interesting?</p>
<pre><code> result: switch "z" [
     "a" [print "won't run" | 10]
     "b" [print "this either" | 20]
 ] else [
     10 + 20
 ]
</code></pre>
<p>The fallout feature doesn't have much cost; it's nearly free.  And for the performance-minded, it's the fastest way to have a default value.</p>
<p><strong>Does fallout make SWITCH feel like it's fancier and has good dialecting bones, taking advantage of Rebol's unconventional-ness?  Or does it make SWITCH seem weird...like you're looking at incomplete code, missing the branch for the last switch case?  What do people think looking over it in the above examples?</strong></p>
          <p><a href="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312/1</link>
        <pubDate>Mon, 25 Sep 2017 21:42:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-312-1</guid>
        <source url="https://forum.rebol.info/t/the-fallout-from-the-switch-fallout-feature/312.rss">The fallout from the SWITCH fallout feature</source>
      </item>
  </channel>
</rss>
