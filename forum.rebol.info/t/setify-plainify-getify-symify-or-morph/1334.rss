<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SETIFY, PLAINIFY, GETIFY, SYMIFY... or MORPH ?</title>
    <link>https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334</link>
    <description>There are historical cases where you have to navigate a situation like:

&gt; &quot;I have either a **foo** or a **foo/bar** and I want a **foo:** or a **foo/bar:** as appropriate.&quot;

You can&#39;t exactly classify this in the type system.  There&#39;s no **to set! value** that can do the right thing generically for WORD! and ANY-WORD!

This has gotten to be more of an issue, now that there are more such types.  This has led to a menagerie of morphing operations:

    &gt;&gt; setify &#39;foo
    == foo:

    &gt;&gt; setify &#39;foo/bar
    == foo/bar:

    &gt;&gt; plainify @[foo bar]
    == [foo bar]

    &gt;&gt; getify &#39;(foo bar):
    == :(foo bar)

    &gt;&gt; symify &#39;foo/bar
    == @foo/bar

The names aren&#39;t so hot.  But the functionality is important.

This kind of made me wonder if there might be a more clever operation, using quoting and driven by example:

     &gt;&gt; value: the foo/bar

     &gt;&gt; morph (value):
     == foo/bar:

     &gt;&gt; morph @(second [foo bar])
     == @bar

     &gt;&gt; value: &#39;[foo bar]:
     &gt;&gt; morph (value)  ; let no decoration on the group mean &quot;plainify&quot;
     == [foo bar]

You could technically make it more minimal than that...by fetching the word:

     &gt;&gt; value: the foo/bar

     &gt;&gt; morph value:
     == foo/bar

There&#39;d still have to be an escaping mechanism anyway, and I think it kind of scans better to have the parentheses in there.

Requiring a quote mark at the callsite might help hint that it&#39;s not running normal evaluation: 

     &gt;&gt; value: the foo/bar

     &gt;&gt; morph &#39;(value):
     == foo/bar:

But it needs to be a quoting function..we want the visual marker to be at the callsite:

     &gt;&gt; value: the foo/bar

     &gt;&gt; indirect: &#39;(value):

     &gt;&gt; morph indirect  ; this defeats the whole point of the idea
     == foo/bar:

Given that it has to quote anyway, people who know how to use morph would probably be more annoyed by the quote tic than feel informed by it.  *(Would you like it if THE (e.g. Rebol2 QUOTE) required you to put a quote mark on its argument, just to emphasize that it wasn&#39;t evaluated...or is it better to just know what it means and have less typing and characters?)*

Also it might be nice if the ticks let you set the quoting level on the output:

     &gt;&gt; value: [foo bar]

     &gt;&gt; morph &#39;(value):
     == &#39;[foo bar]:

So I think my suggestion is always have a GROUP! to have some container separation from the evaluation, don&#39;t have a tick mark unless you want the result quoted.  And MORPH seems like an okay-enough name.

But the quoting does mean it breaks the flow of evaluation, and forces you to put things in a GROUP! when you might not want to.  Does this mean PLAINIFY and friends are still necessary?

Another option to add here would be to morph the basic container type.  This is done less often.  I don&#39;t know exactly what you would call that:

    &gt;&gt; value: the [a b]:

    &gt;&gt; morph/class (value)
    == (a b):

    &gt;&gt; morph/class /value
    == a/b:

Fitting both isn&#39;t actually that interesting:

     &gt;&gt; morph/class/sigil @.value
     @a.b

...because the whole point is preservation of some information in the original.  You could have thrown all the original information out nearly as easily with:

     &gt;&gt; as sym-block! as tuple! value
     == @a.b

But, it&#39;s not useless.  Anyway, I&#39;m sure there are more creative or less creative ideas out there.  If the morphed value is always a GROUP!, there could be a skippable element in the middle:

     &gt;&gt; value: the [a b]:

     &gt;&gt; morph @(value)
     == @[a b]

     &gt;&gt; morph tuple! @(value)
     == @a.b

That&#39;s less puzzling than **morph/class/sigil @.value**.  So the remaining question might be how to get it to morph to a tuple while leaving the sigil alone more cleanly.  Quote marks might be used for this, meaning &quot;leave it alone, don&#39;t plainify it&quot;

     &gt;&gt; value: the [a b]:

     &gt;&gt; morph tuple! (value)
     == a.b

     &gt;&gt; morph tuple! &#39;(value)
     == a.b:

Seems a waste of being able to indicate how quoted you want the result.  Maybe this could be what BLOCK! does.

     &gt;&gt; value: the [a b]:

     &gt;&gt; morph tuple! [value]
     == a.b:

Another option would be that single group leaves it alone, and double group removes any sigil:

     &gt;&gt; value: the [a b]:

     &gt;&gt; morph (value)
     == [a b]:

     &gt;&gt; morph ((value))
     == [a b]

     &gt;&gt; morph tuple! (value)
     == a.b:

     &gt;&gt; morph tuple! (value)
     == a.b

That&#39;s not what COMPOSE does with `(( ))`, so it should probably be avoided.  I dunno.  *Actually*, keeping compatibility with COMPOSE and making `( )` do nothing and the BLOCK! plainify would be more consistent...

     &gt;&gt; value: the [a b]:

     &gt;&gt; morph tuple! [value]
     == a.b

     &gt;&gt; morph tuple! (value)
     == a.b:

It&#39;s just not an option in COMPOSE since it has only one type to work with.  Oh well.  That makes **morph (value)** a no-op... so it should probably just error and point you to the right thing to do.  Though maybe if you have some constructed code case that might have N quotes on it, then this could be a base case that you want as a no-op... hmmm.

Anyway...there&#39;s a very weird function proposal that could come in handy...I&#39;ll try it out for a while and see what I think.</description>
    
    <lastBuildDate>Wed, 09 Oct 2024 20:13:33 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SETIFY, PLAINIFY, GETIFY, SYMIFY... or MORPH ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1334">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>There are historical cases where you have to navigate a situation like:</p>
<blockquote>
<p>"I have either a <strong>foo</strong> or a <strong>foo/bar</strong> and I want a <strong>foo:</strong> or a <strong>foo/bar:</strong> as appropriate."</p>
</blockquote>
<p>You can't exactly classify this in the type system. There's no <strong>to set! value</strong> that can do the right thing generically for WORD! and ANY-WORD!</p>
</blockquote>
</aside>
<p>Now we have sigils, like <strong><code>&amp;</code></strong> <strong><code>$</code></strong> <strong><code>^</code></strong> as their own values of type SIGLI! (with special consideration for <strong><code>'</code></strong> as the SIGIL OF a quoted thing, and <strong><code>~~</code></strong> as the SIGIL OF a quasi thing)</p>
<p>That offers a kind of clean path toward generalizing this:</p>
<pre><code>&gt;&gt; morph '$ 'var
== $var

 &gt;&gt; morph '~~ 'var
 == ~var~

 &gt;&gt; morph void '$var  ; perhaps removal is better as (morph _ '$var) ?
 == var
</code></pre>
<p>If you mention array types, it would be assumed the thing you were morphing was also an array.</p>
<pre><code> &gt;&gt; morph '[]: '$(a b c)
 == [a b c]:

 &gt;&gt; morph '[]: 'a
 ** Error: a is not an any-array type, can't make it []
</code></pre>
<p>There are WORD!s for things like <strong><code>.</code></strong> and <strong><code>:</code></strong>, maybe they could have special behavior:</p>
<pre><code> &gt;&gt; morph '$. 'a/b/c
 == $a.b.c

 &gt;&gt; morph ': 'a/b/c
 == a/b/c:
</code></pre>
<p>Maybe it would be useful if it recursed if you had nestings of single items:</p>
<pre><code> &gt;&gt; morph '[({})]: '${[(a b c)]}
 == [({a b c})]:
</code></pre>
<p>Or maybe not.  Anyway, the general concept seems nice and orthogonal.</p>
<p>And importantly, it means you can do things like take a sigil off of one thing and put it onto another one.</p>
<pre><code>  morph (sigil of path-or-word-etc) other-path-or-word-etc
</code></pre>
          <p><a href="https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334/3</link>
        <pubDate>Tue, 20 Feb 2024 03:45:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1334-3</guid>
        <source url="https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334.rss">SETIFY, PLAINIFY, GETIFY, SYMIFY... or MORPH ?</source>
      </item>
      <item>
        <title>SETIFY, PLAINIFY, GETIFY, SYMIFY... or MORPH ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1334">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>That's not what COMPOSE does with <code>(( ))</code>, so it should probably be avoided. I dunno.</p>
</blockquote>
</aside>
<p>Three years later, COMPOSE no longer has any specific meaning for <strong><code>((...))</code></strong> slots, they act the same as <strong><code>(...)</code></strong>.  <em>(In the pre-isotopic era when SPREAD didn't exist, there was a period where doubled groups were used to mark slots that should splice blocks or groups, while single groups composed them as-is.)</em></p>
<p>So arguably, the MORPH operation could be defined as doing the same thing that COMPOSE does with its slots, and include this for plainify.</p>
<pre><code>&gt;&gt; set-word: 'foo:

&gt;&gt; compose [bar: '((set-word))]
== [bar: 'foo]

&gt;&gt; morph '((set-word))
== 'foo
</code></pre>
<p>Could work.  I definitely like the idea that the code would be common, so whatever that COMPOSE is doing is factored out into a reusable operation.</p>
<p>Perhaps for safety, the (( )) to plainify should be required if the type is not already plain?</p>
<pre><code>&gt;&gt; word: 'bar

&gt;&gt; morph :(word)
== :bar

&gt;&gt; morph :(set-word)
** Error: Must use (( )) to remove sigil in MORPH

&gt;&gt; morph :((set-word))
== :foo
</code></pre>
<p>I don't know if that's an interesting axis of protection or not.</p>
          <p><a href="https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334/2</link>
        <pubDate>Mon, 08 Jan 2024 09:17:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1334-2</guid>
        <source url="https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334.rss">SETIFY, PLAINIFY, GETIFY, SYMIFY... or MORPH ?</source>
      </item>
      <item>
        <title>SETIFY, PLAINIFY, GETIFY, SYMIFY... or MORPH ?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There are historical cases where you have to navigate a situation like:</p>
<blockquote>
<p>"I have either a <strong>foo</strong> or a <strong>foo/bar</strong> and I want a <strong>foo:</strong> or a <strong>foo/bar:</strong> as appropriate."</p>
</blockquote>
<p>You can't exactly classify this in the type system.  There's no <strong>to set! value</strong> that can do the right thing generically for WORD! and ANY-WORD!</p>
<p>This has gotten to be more of an issue, now that there are more such types.  This has led to a menagerie of morphing operations:</p>
<pre><code>&gt;&gt; setify 'foo
== foo:

&gt;&gt; setify 'foo/bar
== foo/bar:

&gt;&gt; plainify @[foo bar]
== [foo bar]

&gt;&gt; getify '(foo bar):
== :(foo bar)

&gt;&gt; symify 'foo/bar
== @foo/bar
</code></pre>
<p>The names aren't so hot.  But the functionality is important.</p>
<p>This kind of made me wonder if there might be a more clever operation, using quoting and driven by example:</p>
<pre><code> &gt;&gt; value: the foo/bar

 &gt;&gt; morph (value):
 == foo/bar:

 &gt;&gt; morph @(second [foo bar])
 == @bar

 &gt;&gt; value: '[foo bar]:
 &gt;&gt; morph (value)  ; let no decoration on the group mean "plainify"
 == [foo bar]
</code></pre>
<p>You could technically make it more minimal than that...by fetching the word:</p>
<pre><code> &gt;&gt; value: the foo/bar

 &gt;&gt; morph value:
 == foo/bar
</code></pre>
<p>There'd still have to be an escaping mechanism anyway, and I think it kind of scans better to have the parentheses in there.</p>
<p>Requiring a quote mark at the callsite might help hint that it's not running normal evaluation:</p>
<pre><code> &gt;&gt; value: the foo/bar

 &gt;&gt; morph '(value):
 == foo/bar:
</code></pre>
<p>But it needs to be a quoting function..we want the visual marker to be at the callsite:</p>
<pre><code> &gt;&gt; value: the foo/bar

 &gt;&gt; indirect: '(value):

 &gt;&gt; morph indirect  ; this defeats the whole point of the idea
 == foo/bar:
</code></pre>
<p>Given that it has to quote anyway, people who know how to use morph would probably be more annoyed by the quote tic than feel informed by it.  <em>(Would you like it if THE (e.g. Rebol2 QUOTE) required you to put a quote mark on its argument, just to emphasize that it wasn't evaluated...or is it better to just know what it means and have less typing and characters?)</em></p>
<p>Also it might be nice if the ticks let you set the quoting level on the output:</p>
<pre><code> &gt;&gt; value: [foo bar]

 &gt;&gt; morph '(value):
 == '[foo bar]:
</code></pre>
<p>So I think my suggestion is always have a GROUP! to have some container separation from the evaluation, don't have a tick mark unless you want the result quoted.  And MORPH seems like an okay-enough name.</p>
<p>But the quoting does mean it breaks the flow of evaluation, and forces you to put things in a GROUP! when you might not want to.  Does this mean PLAINIFY and friends are still necessary?</p>
<p>Another option to add here would be to morph the basic container type.  This is done less often.  I don't know exactly what you would call that:</p>
<pre><code>&gt;&gt; value: the [a b]:

&gt;&gt; morph/class (value)
== (a b):

&gt;&gt; morph/class /value
== a/b:
</code></pre>
<p>Fitting both isn't actually that interesting:</p>
<pre><code> &gt;&gt; morph/class/sigil @.value
 @a.b
</code></pre>
<p>...because the whole point is preservation of some information in the original.  You could have thrown all the original information out nearly as easily with:</p>
<pre><code> &gt;&gt; as sym-block! as tuple! value
 == @a.b
</code></pre>
<p>But, it's not useless.  Anyway, I'm sure there are more creative or less creative ideas out there.  If the morphed value is always a GROUP!, there could be a skippable element in the middle:</p>
<pre><code> &gt;&gt; value: the [a b]:

 &gt;&gt; morph @(value)
 == @[a b]

 &gt;&gt; morph tuple! @(value)
 == @a.b
</code></pre>
<p>That's less puzzling than <strong>morph/class/sigil @.value</strong>.  So the remaining question might be how to get it to morph to a tuple while leaving the sigil alone more cleanly.  Quote marks might be used for this, meaning "leave it alone, don't plainify it"</p>
<pre><code> &gt;&gt; value: the [a b]:

 &gt;&gt; morph tuple! (value)
 == a.b

 &gt;&gt; morph tuple! '(value)
 == a.b:
</code></pre>
<p>Seems a waste of being able to indicate how quoted you want the result.  Maybe this could be what BLOCK! does.</p>
<pre><code> &gt;&gt; value: the [a b]:

 &gt;&gt; morph tuple! [value]
 == a.b:
</code></pre>
<p>Another option would be that single group leaves it alone, and double group removes any sigil:</p>
<pre><code> &gt;&gt; value: the [a b]:

 &gt;&gt; morph (value)
 == [a b]:

 &gt;&gt; morph ((value))
 == [a b]

 &gt;&gt; morph tuple! (value)
 == a.b:

 &gt;&gt; morph tuple! (value)
 == a.b
</code></pre>
<p>That's not what COMPOSE does with <code>(( ))</code>, so it should probably be avoided.  I dunno.  <em>Actually</em>, keeping compatibility with COMPOSE and making <code>( )</code> do nothing and the BLOCK! plainify would be more consistent...</p>
<pre><code> &gt;&gt; value: the [a b]:

 &gt;&gt; morph tuple! [value]
 == a.b

 &gt;&gt; morph tuple! (value)
 == a.b:
</code></pre>
<p>It's just not an option in COMPOSE since it has only one type to work with.  Oh well.  That makes <strong>morph (value)</strong> a no-op... so it should probably just error and point you to the right thing to do.  Though maybe if you have some constructed code case that might have N quotes on it, then this could be a base case that you want as a no-op... hmmm.</p>
<p>Anyway...there's a very weird function proposal that could come in handy...I'll try it out for a while and see what I think.</p>
          <p><a href="https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334/1</link>
        <pubDate>Mon, 21 Sep 2020 07:54:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1334-1</guid>
        <source url="https://forum.rebol.info/t/setify-plainify-getify-symify-or-morph/1334.rss">SETIFY, PLAINIFY, GETIFY, SYMIFY... or MORPH ?</source>
      </item>
  </channel>
</rss>
