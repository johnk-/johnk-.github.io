<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why We Allow Isotope Assignments (e.g. variable: ~unset~)</title>
    <link>https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206</link>
    <description>&quot;UNSET!&quot; values were extremely ornery in historical Rebol and Red.  You couldn&#39;t assign them to variables:

    rebol2&gt;&gt; x: print &quot;message&quot;
    message
    ** Script Error: x needs a value

    red&gt;&gt; x: print &quot;message&quot;
    message
    *** Script Error: x: needs a value

In Rebol2 and R3-Alpha you couldn&#39;t test them for conditional truth or falsehood, either:

    rebol2&gt;&gt; if print &quot;message&quot; [1 + 2]
    message
    ** Script Error: if is missing its condition argument

But Red made the bizarre decision to say that &quot;UNSET!&quot; was truthy:

    &gt;&gt; if print &quot;message&quot; [1 + 2]
    message
    == 3

**Isotopes in Ren-C are a far more sophisticated story than UNSET!, and triggering errors in conditional slots is their raison d&#39;etre.**  They guide you to finding mistakes in your reasoning:

    &gt;&gt; value: false

    &gt;&gt; match [integer! logic!] value
    == ~false~  ; isotope

    &gt;&gt; if match [integer! logic!] value [print &quot;You probably want this to print!&quot;]
    ** Error: ~false~ isotope is not conditionally true or false, see DID and DIDN&#39;T

    &gt;&gt; did match [integer! logic!] value
    == #[true]  ; DID is isotope tolerant, and checks against pure NULL only

    &gt;&gt; if did match [integer! logic!] value [print &quot;Isotopes saved the day!&quot;]
    Isotopes saved the day!

So keeping that &quot;ornery&quot; behavior is important.  **But also important is *not* being ornery about assignment of isotopes via SET-WORD!.**

It has applications everywhere...[like in the round-tripping of OBJECT!s](https://forum.rebol.info/t/generic-quoting-makes-headway-on-make-object/997).

    &gt;&gt; first [~unset~]
    == ~unset~  ; ordinary BAD-WORD! (can appear in blocks, etc.)

    &gt;&gt; ~unset~
    == ~unset~  ; isotope  (plain BAD-WORD! under evaluation becomes isotope)

    &gt;&gt; make object! [u: ~unset~, bw: first [~unset~]]
    == make object! [
         u: ~unset~
         bw: &#39;~unset~
    ] 
    ; ^-- running this MAKE OBJECT! gets you back the isotope and BAD-WORD! correctly

And as the MATCH example above shows, isotopes aren&#39;t really synonymous with errors.  The falsey isotopes decay under variable assignments, so you don&#39;t get ornery effects on fetching them later via WORD!.

    &gt;&gt; x: match [logic! integer!] false
    == ~false~  ; isotope

    &gt;&gt; x
    == false

## FWIW: No One Spoke Up For Ornery UNSET! Assignments

I put out the question about the experience of blocked UNSET! assignment in historical Rebol:

&gt; **&quot;How often has this *actually helped anyone* vs. just being a PITA?&quot;**

I wouldn&#39;t be surprised if it helped catch *some* mistake, *somewhere*.  But my memories of it doing so are few and far between, while my memories of having to use SET/ANY when I didn&#39;t want to are uncountably large.

What did come to light in the survey was that allowing UNSET! fetches via GET-WORD! had caused tremendous problems, because an innocent request for **:varaiable** to try and not invoke a function would quietly give back an UNSET! for the misspelled `variable`.

So Ren-C requires you to use GET/ANY for isotopes, and GET-WORD!s will error--this has been a beneficial change.

## Savvy Programming Can Give You Much Better Checks

The supposed purpose of catching UNSET! assignments back in the day was to improve error locality.  It keeps you from saying **x: print &quot;message&quot;** and later down the line are surprised that X contains an ornery value, having to track down where it came from.

But conscientious programmers should be trying things like:

     &gt;&gt; x: ensure integer! add 1 2
     == 3

That&#39;s even stronger, and if you said **x: ensure integer! print &quot;Hello&quot;** you&#39;d catch the problem if you were so concerned.</description>
    
    <lastBuildDate>Wed, 01 Jul 2020 05:40:17 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why We Allow Isotope Assignments (e.g. variable: ~unset~)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="/t/why-isnt-print-invisible/1824">Why Isn't PRINT Invisible?</a></p>
          <p><a href="https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206/3</link>
        <pubDate>Wed, 18 May 2022 07:12:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-3</guid>
        <source url="https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206.rss">Why We Allow Isotope Assignments (e.g. variable: ~unset~)</source>
      </item>
      <item>
        <title>Why We Allow Isotope Assignments (e.g. variable: ~unset~)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1206">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm sure it's probably helped catch some mistake somewhere.</p>
</blockquote>
</aside>
<p>In the interest of a competitive analysis with JavaScript, let's look at what they do:</p>
<pre><code>&gt; function nothing() { return; }

&gt; let x = nothing()
&lt;- undefined

&gt; if (x) { console.log("it doesn't error even on dereference"); }
&lt;- undefined

&gt; if (!x) { console.log("because it's falsey"); }
because it's falsey
&lt;- undefined
</code></pre>
<p>That's even more forgiving.</p>
<p>But these simple things are not remotely in the same league as Ren-C's isotope design.</p>
          <p><a href="https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206/2</link>
        <pubDate>Mon, 30 Sep 2019 14:49:19 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-2</guid>
        <source url="https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206.rss">Why We Allow Isotope Assignments (e.g. variable: ~unset~)</source>
      </item>
      <item>
        <title>Why We Allow Isotope Assignments (e.g. variable: ~unset~)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>"UNSET!" values were extremely ornery in historical Rebol and Red.  You couldn't assign them to variables:</p>
<pre><code>rebol2&gt;&gt; x: print "message"
message
** Script Error: x needs a value

red&gt;&gt; x: print "message"
message
*** Script Error: x: needs a value
</code></pre>
<p>In Rebol2 and R3-Alpha you couldn't test them for conditional truth or falsehood, either:</p>
<pre><code>rebol2&gt;&gt; if print "message" [1 + 2]
message
** Script Error: if is missing its condition argument
</code></pre>
<p>But Red made the bizarre decision to say that "UNSET!" was truthy:</p>
<pre><code>&gt;&gt; if print "message" [1 + 2]
message
== 3
</code></pre>
<p><strong>Isotopes in Ren-C are a far more sophisticated story than UNSET!, and triggering errors in conditional slots is their raison d'etre.</strong>  They guide you to finding mistakes in your reasoning:</p>
<pre><code>&gt;&gt; value: false

&gt;&gt; match [integer! logic!] value
== ~false~  ; isotope

&gt;&gt; if match [integer! logic!] value [print "You probably want this to print!"]
** Error: ~false~ isotope is not conditionally true or false, see DID and DIDN'T

&gt;&gt; did match [integer! logic!] value
== #[true]  ; DID is isotope tolerant, and checks against pure NULL only

&gt;&gt; if did match [integer! logic!] value [print "Isotopes saved the day!"]
Isotopes saved the day!
</code></pre>
<p>So keeping that "ornery" behavior is important.  <strong>But also important is <em>not</em> being ornery about assignment of isotopes via SET-WORD!.</strong></p>
<p>It has applications everywhere...<a href="https://forum.rebol.info/t/generic-quoting-makes-headway-on-make-object/997">like in the round-tripping of OBJECT!s</a>.</p>
<pre><code>&gt;&gt; first [~unset~]
== ~unset~  ; ordinary BAD-WORD! (can appear in blocks, etc.)

&gt;&gt; ~unset~
== ~unset~  ; isotope  (plain BAD-WORD! under evaluation becomes isotope)

&gt;&gt; make object! [u: ~unset~, bw: first [~unset~]]
== make object! [
     u: ~unset~
     bw: '~unset~
] 
; ^-- running this MAKE OBJECT! gets you back the isotope and BAD-WORD! correctly
</code></pre>
<p>And as the MATCH example above shows, isotopes aren't really synonymous with errors.  The falsey isotopes decay under variable assignments, so you don't get ornery effects on fetching them later via WORD!.</p>
<pre><code>&gt;&gt; x: match [logic! integer!] false
== ~false~  ; isotope

&gt;&gt; x
== false
</code></pre>
<h2>FWIW: No One Spoke Up For Ornery UNSET! Assignments</h2>
<p>I put out the question about the experience of blocked UNSET! assignment in historical Rebol:</p>
<blockquote>
<p><strong>"How often has this <em>actually helped anyone</em> vs. just being a PITA?"</strong></p>
</blockquote>
<p>I wouldn't be surprised if it helped catch <em>some</em> mistake, <em>somewhere</em>.  But my memories of it doing so are few and far between, while my memories of having to use SET/ANY when I didn't want to are uncountably large.</p>
<p>What did come to light in the survey was that allowing UNSET! fetches via GET-WORD! had caused tremendous problems, because an innocent request for <strong>:varaiable</strong> to try and not invoke a function would quietly give back an UNSET! for the misspelled <code>variable</code>.</p>
<p>So Ren-C requires you to use GET/ANY for isotopes, and GET-WORD!s will error--this has been a beneficial change.</p>
<h2>Savvy Programming Can Give You Much Better Checks</h2>
<p>The supposed purpose of catching UNSET! assignments back in the day was to improve error locality.  It keeps you from saying <strong>x: print "message"</strong> and later down the line are surprised that X contains an ornery value, having to track down where it came from.</p>
<p>But conscientious programmers should be trying things like:</p>
<pre><code> &gt;&gt; x: ensure integer! add 1 2
 == 3
</code></pre>
<p>That's even stronger, and if you said <strong>x: ensure integer! print "Hello"</strong> you'd catch the problem if you were so concerned.</p>
          <p><a href="https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206/1</link>
        <pubDate>Sat, 14 Sep 2019 23:06:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1206-1</guid>
        <source url="https://forum.rebol.info/t/why-we-allow-isotope-assignments-e-g-variable-unset/1206.rss">Why We Allow Isotope Assignments (e.g. variable: ~unset~)</source>
      </item>
  </channel>
</rss>
