<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>New UPARSE Experiment: GATHER and EMIT</title>
    <link>https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531</link>
    <description>One thing&#39;s for sure about UPARSE, you can really try new ideas out fast.

Here&#39;s one... what if it were easier to make objects via PARSE?  Here&#39;s GATHER and EMIT...which feature rollback (just like COLLECT and KEEP) but are tailored for making objects:

    &gt;&gt; uparse [* * * 1 &lt;foo&gt; * * *] [
          some &#39;*
          g: gather [
              emit i: integer!, emit t: text! | emit i: integer!, emit t: tag!
          ]
          some &#39;*
       ]
    == *
   
    &gt;&gt; g
    == make object! [
        i: 1
        t: &lt;foo&gt;
    ]

This is more in line with Haskell-style parser combinators.  There, the type strictness says that each parser combinator has to produce a typed value, so you tend to build records in this fashion.

It may be useful enough that if you use EMIT at the top level with no gather, then it assumes you want the object to be the result of the parse:

    &gt;&gt; uparse [* * * 1 &lt;foo&gt; * * *] [
          some &#39;*
          [emit i: integer!, emit t: text! | emit i: integer!, emit t: tag!]
          some &#39;*
       ]
    == make object! [
        i: 1
        t: &lt;foo&gt;
    ]

So I added that in for now.  Really it can be reduced to the question of whether the EMIT combinator decides to raise an error when there&#39;s no gather in effect or not, so you could tweak just that one aspect.

Anyway, now&#39;s the time to experiment...so...</description>
    
    <lastBuildDate>Wed, 26 Jul 2023 17:20:03 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>New UPARSE Experiment: GATHER and EMIT</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1531">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>It may be useful enough that if you use EMIT at the top level with no gather, then it assumes you want the object to be the result of the parse.</p>
<p>So I added that in for now.</p>
</blockquote>
</aside>
<p><a class="mention" href="https://forum.rebol.info/u/giuliolunati">@giuliolunati</a> brought up the point that if "auto-gathering" exists, it is explicitly overriding what might have been an intended result.  He suggested this example:</p>
<pre><code>uparse "ab" [collect [emit x: "a" keep "b"]] =&gt; ?
</code></pre>
<p>There was no GATHER, so does the auto-gather override the COLLECT?  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>This kind of pattern looks more like a bug, where the author intended the collect result to be the overall expression result but just has a stray emit.  The implicit GATHER just creates confusion.</p>
<p>That seems like a pretty good disproof.  If you tell users that UPARSE gives the synthesized result of the BLOCK! rule, when can this auto-gather decide that result is less important than some half-articulated EMITs?</p>
<p>So I'm dropping this, but there's actually some pretty flexible room for defining handling of "leaked pendings".  If you don't ask for them, you'll get an error:</p>
<pre><code>&gt;&gt; uparse [10 20] [some keep integer!]
** Error: Residual items accumulated in pending array
</code></pre>
<p>But if you do ask for them (third multi-return result), it suppresses the error and lets you decide what to do with them:</p>
<pre><code>&gt;&gt; [result furthest pending]: uparse [10 20] [some keep integer!]
== 20

&gt;&gt; pending
== ['10 '20]
</code></pre>
<p>This shows you an implementation detail of COLLECT.  KEEP puts QUOTED! items in the pending array, and then COLLECT filters those out.</p>
<pre><code>&gt;&gt; [result furthest pending]: uparse* [10 20] [
    emit x: integer! emit y: integer!
]
== 20

&gt;&gt; pending
== [[x: '10] [y: '20]]
</code></pre>
<p>There's another implementation detail showing that EMIT puts BLOCK!s into the pending stream.</p>
<p>In any case, you can build UPARSE derivatives that take advantage of this knowledge if you can think of a reason to.</p>
<h2>Giulio's First-Reaction-Disproof Feedback Only Proves My Point...</h2>
<p><strong>I need people to be reading this stuff!</strong>  You can make a difference--even if you just fiddle in the ReplPad and ask "why didn't this thing I tried work".</p>
<p>I'm glad people are grokking what <img src="https://forum.rebol.info/images/emoji/twitter/fire.png?v=9" title=":fire:" class="emoji" alt=":fire:"> UPARSE is, but what will really make it strong is to bring more tests and more scenarios...and to question and challenge any rough or odd edges that I may be too close to the issues to see.</p>
          <p><a href="https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531/2</link>
        <pubDate>Thu, 12 Aug 2021 23:19:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1531-2</guid>
        <source url="https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531.rss">New UPARSE Experiment: GATHER and EMIT</source>
      </item>
      <item>
        <title>New UPARSE Experiment: GATHER and EMIT</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>I've added an interesting experiment with virtual binding, combining a GATHER'd object with the USE function...</strong></p>
<p>Consider this example for parsing out a base and extension from a filename:</p>
<pre><code>let result
let filename: "demo.txt"
result: parse filename [gather [
    emit base: between &lt;here&gt; "."
    emit extension: thru &lt;end&gt;
]] else [
    fail "Not a file with an extension"
]
print ["The base was" result.base]  ; demo
print ["The extension was" result.extension]  ; txt
</code></pre>
<p>But what if USE was a LET-like construct, that slipstreamed an object's fields into the context:</p>
<pre><code>if true [
    let filename: "demo.txt"
    use parse filename [
        emit base: between &lt;here&gt; "."
        emit extension: thru &lt;end&gt;
     ] else [
        fail "Not a file with an extension"
    ]
    print ["The base was" base]  ; demo
    print ["The extension was" extension]  ; txt
]
; base and extension would not be defined here!
</code></pre>
<p>Pretty cool!</p>
          <p><a href="https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531/8</link>
        <pubDate>Sun, 02 May 2021 16:48:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1531-8</guid>
        <source url="https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531.rss">New UPARSE Experiment: GATHER and EMIT</source>
      </item>
      <item>
        <title>New UPARSE Experiment: GATHER and EMIT</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>One thing's for sure about UPARSE, you can really try new ideas out fast.</p>
<p>Here's one... what if it were easier to make objects via PARSE?  Here's GATHER and EMIT...which feature rollback (just like COLLECT and KEEP) but are tailored for making objects:</p>
<pre><code>&gt;&gt; uparse [* * * 1 &lt;foo&gt; * * *] [
      some '*
      g: gather [
          emit i: integer!, emit t: text! | emit i: integer!, emit t: tag!
      ]
      some '*
   ]
== *

&gt;&gt; g
== make object! [
    i: 1
    t: &lt;foo&gt;
]
</code></pre>
<p>This is more in line with Haskell-style parser combinators.  There, the type strictness says that each parser combinator has to produce a typed value, so you tend to build records in this fashion.</p>
<p>It may be useful enough that if you use EMIT at the top level with no gather, then it assumes you want the object to be the result of the parse:</p>
<pre><code>&gt;&gt; uparse [* * * 1 &lt;foo&gt; * * *] [
      some '*
      [emit i: integer!, emit t: text! | emit i: integer!, emit t: tag!]
      some '*
   ]
== make object! [
    i: 1
    t: &lt;foo&gt;
]
</code></pre>
<p>So I added that in for now.  Really it can be reduced to the question of whether the EMIT combinator decides to raise an error when there's no gather in effect or not, so you could tweak just that one aspect.</p>
<p>Anyway, now's the time to experiment...so...</p>
          <p><a href="https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531/1</link>
        <pubDate>Tue, 02 Mar 2021 08:14:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1531-1</guid>
        <source url="https://forum.rebol.info/t/new-uparse-experiment-gather-and-emit/1531.rss">New UPARSE Experiment: GATHER and EMIT</source>
      </item>
  </channel>
</rss>
