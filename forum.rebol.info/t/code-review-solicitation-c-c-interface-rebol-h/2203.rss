<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Code Review Solicitation: C/C++ interface %rebol.h</title>
    <link>https://forum.rebol.info/t/code-review-solicitation-c-c-interface-rebol-h/2203</link>
    <description>The API has been relatively stable for a while, with the only major change this year [being quite a good one](https://forum.rebol.info/t/api-breakthrough-scope-detection-in-javascript-and-c/2157).

The actual %rebol.h file is generated by a [piece of Rebol code](https://github.com/metaeducation/ren-c/blob/master/tools/make-librebol.r) that analyzes the [definitions in %a-lib.c](https://github.com/metaeducation/ren-c/blob/master/src/core/a-lib.c).

There I explain the premise of the API, and mention the trickery is accomplished via [non-strict-alias endian-sensitive first-byte access](https://github.com/metaeducation/ren-c/blob/master/src/include/structs/struct-node.h), where patterns are chosen for Cells and Stubs that do not overlap leading valid bytes for UTF-8.

*(Also explained in the Rebol 2019 video: **[Abusing UTF-8 For Fun And Profit](http://2019.reb4.me/talks)**)*

---

    This is the &quot;external&quot; API, and %rebol.h contains its exported
    definitions.  That file (and %make-librebol.r which generates it) contains
    comments and notes which will help understand it.

    What characterizes the external API is that it is not necessary to #include
    the extensive definitions of `struct Series` or the APIs for dealing with
    all the internal details (e.g. Push_GC_Guard(), which are easy to get
    wrong).  Not only does this simplify the interface, but it also means that
    the C code using the library isn&#39;t competing as much for definitions in
    the global namespace.

    Also, due to the nature of the Node superclass (see %sys-node.h), it&#39;s
    possible to feed the scanner with a list of pointers that may be to UTF-8
    strings or to Rebol values.  The behavior is to &quot;splice&quot; in the values at
    the point in the scan that they occur, e.g.
   
        RebolValue* item1 = ...;
        RebolValue* item2 = ...;
        RebolValue* item3 = ...;
  
        RebolValue* result = rebValue(
           &quot;if not&quot;, item1, &quot;[\n&quot;,
               item2, &quot;| print {Close brace separate from content}\n&quot;,
            &quot;] else [\n&quot;,
                item3, &quot;| print {Close brace with content}]\n&quot;
        );

     (Note: C can&#39;t count how many arguments a variadic takes, so this is done
     by making things like rebValue() a macro that uses __VA_ARGS__ and tacks
     a rebEND onto the tail of the list.  There&#39;s lots of tricks in play--see
     %make-librebol.r for the nitty-gritty details.)

     While the approach is flexible, any token must be completed within its
     UTF-8 string component.  So you can&#39;t--for instance--divide a scan up like
      (&quot;{abc&quot;, &quot;def&quot;, &quot;ghi}&quot;) and get the TEXT! {abcdefghi}.  On that note,
     (&quot;a&quot;, &quot;/&quot;, &quot;b&quot;) produces `a / b` and not the PATH! `a/b`.

---

I think @iArnold may be the only person to have experienced the API at the C level besides myself.  But several people have engaged the JavaScript version, which bridges via WebAssembly to run the exact same code in %a-lib.c through some wrappers.

---

I&#39;m ready for feedback on it, and this post can be a thread for that.  (How&#39;s your C/C++, @bradrn?)  

Since the `rebol.h` file is generated and not committed to the repository, I have made a gist of what it compiles to at this moment:

   https://gist.github.com/hostilefork/8a8cf776387e9b66fe99ca77f560b5a8

There are a couple of bad names (e.g. REBDNG) which are left bad as a reminder that those are parts that need review, so skip those.  The rest is about as good as I&#39;ve been able to make it.</description>
    
    <lastBuildDate>Wed, 21 Aug 2024 02:08:40 +0000</lastBuildDate>
    <category>Language Bridging</category>
    <atom:link href="https://forum.rebol.info/t/code-review-solicitation-c-c-interface-rebol-h/2203.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Code Review Solicitation: C/C++ interface %rebol.h</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2203">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>(How's your C/C++, <a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a>?)</p>
</blockquote>
</aside>
<p>Pretty good. I can read it easily, and write it without too many difficulties (excepting that I can’t quite get my head around the intricacies of modern C++ memory management).</p>
<p>There’s been a lot of new posts here and I’m trying to read them all through… I’ll have a look at this code when I get around to it.</p>
          <p><a href="https://forum.rebol.info/t/code-review-solicitation-c-c-interface-rebol-h/2203/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/code-review-solicitation-c-c-interface-rebol-h/2203/2</link>
        <pubDate>Wed, 21 Aug 2024 02:08:40 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2203-2</guid>
        <source url="https://forum.rebol.info/t/code-review-solicitation-c-c-interface-rebol-h/2203.rss">Code Review Solicitation: C/C++ interface %rebol.h</source>
      </item>
      <item>
        <title>Code Review Solicitation: C/C++ interface %rebol.h</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The API has been relatively stable for a while, with the only major change this year <a href="https://forum.rebol.info/t/api-breakthrough-scope-detection-in-javascript-and-c/2157">being quite a good one</a>.</p>
<p>The actual %rebol.h file is generated by a <a href="https://github.com/metaeducation/ren-c/blob/master/tools/make-librebol.r">piece of Rebol code</a> that analyzes the <a href="https://github.com/metaeducation/ren-c/blob/master/src/core/a-lib.c">definitions in %a-lib.c</a>.</p>
<p>There I explain the premise of the API, and mention the trickery is accomplished via <a href="https://github.com/metaeducation/ren-c/blob/master/src/include/structs/struct-node.h">non-strict-alias endian-sensitive first-byte access</a>, where patterns are chosen for Cells and Stubs that do not overlap leading valid bytes for UTF-8.</p>
<p><em>(Also explained in the Rebol 2019 video: <strong><a href="http://2019.reb4.me/talks">Abusing UTF-8 For Fun And Profit</a></strong>)</em></p>
<hr>
<pre><code>This is the "external" API, and %rebol.h contains its exported
definitions.  That file (and %make-librebol.r which generates it) contains
comments and notes which will help understand it.

What characterizes the external API is that it is not necessary to #include
the extensive definitions of `struct Series` or the APIs for dealing with
all the internal details (e.g. Push_GC_Guard(), which are easy to get
wrong).  Not only does this simplify the interface, but it also means that
the C code using the library isn't competing as much for definitions in
the global namespace.

Also, due to the nature of the Node superclass (see %sys-node.h), it's
possible to feed the scanner with a list of pointers that may be to UTF-8
strings or to Rebol values.  The behavior is to "splice" in the values at
the point in the scan that they occur, e.g.

    RebolValue* item1 = ...;
    RebolValue* item2 = ...;
    RebolValue* item3 = ...;

    RebolValue* result = rebValue(
       "if not", item1, "[\n",
           item2, "| print {Close brace separate from content}\n",
        "] else [\n",
            item3, "| print {Close brace with content}]\n"
    );

 (Note: C can't count how many arguments a variadic takes, so this is done
 by making things like rebValue() a macro that uses __VA_ARGS__ and tacks
 a rebEND onto the tail of the list.  There's lots of tricks in play--see
 %make-librebol.r for the nitty-gritty details.)

 While the approach is flexible, any token must be completed within its
 UTF-8 string component.  So you can't--for instance--divide a scan up like
  ("{abc", "def", "ghi}") and get the TEXT! {abcdefghi}.  On that note,
 ("a", "/", "b") produces `a / b` and not the PATH! `a/b`.
</code></pre>
<hr>
<p>I think <a class="mention" href="https://forum.rebol.info/u/iarnold">@iArnold</a> may be the only person to have experienced the API at the C level besides myself.  But several people have engaged the JavaScript version, which bridges via WebAssembly to run the exact same code in %a-lib.c through some wrappers.</p>
<hr>
<p>I'm ready for feedback on it, and this post can be a thread for that.  (How's your C/C++, <a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a>?)</p>
<p>Since the <code>rebol.h</code> file is generated and not committed to the repository, I have made a gist of what it compiles to at this moment:</p>
<p><a href="https://gist.github.com/hostilefork/8a8cf776387e9b66fe99ca77f560b5a8" class="inline-onebox">Snapshot of auto-generated Ren-C rebol.h file, 20-Aug-2024 · GitHub</a></p>
<p>There are a couple of bad names (e.g. REBDNG) which are left bad as a reminder that those are parts that need review, so skip those.  The rest is about as good as I've been able to make it.</p>
          <p><a href="https://forum.rebol.info/t/code-review-solicitation-c-c-interface-rebol-h/2203/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/code-review-solicitation-c-c-interface-rebol-h/2203/1</link>
        <pubDate>Wed, 21 Aug 2024 02:05:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2203-1</guid>
        <source url="https://forum.rebol.info/t/code-review-solicitation-c-c-interface-rebol-h/2203.rss">Code Review Solicitation: C/C++ interface %rebol.h</source>
      </item>
  </channel>
</rss>
