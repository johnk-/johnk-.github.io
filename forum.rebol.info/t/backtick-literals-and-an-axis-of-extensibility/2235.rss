<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Backtick Literals (and an Axis of Extensibility?)</title>
    <link>https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235</link>
    <description>I&#39;ve been historically frustrated by the overlap between what I think make nicely regular language features (like TUPLE!, PATH!, and CHAIN!) running up against edges with literal representations.

* **`version/1.2`** would be nice if that could be interpreted as a tuple, but people want to write their decimal representations as **`1.02`** etc.

* **`1:10`** would be nice as a CHAIN! to represent a range, but people want to write TIME! representations as **`10:20`** etc.

* **`31-Aug-2024/0:36:30-4:00`** is a DATE!, but sure looks like a PATH!

Ad nauseum.

Because I think **`version/1.2`** has been genenerally the kind of thing that&#39;s more important to the domains Rebol is actually good for than math, I&#39;ve been willing to throw things like DECIMAL! under the bus.  So over time I&#39;ve suggested random things like *&quot;**`&amp;1.02`** to represent DECIMAL!&quot;*.  But not only have such ideas been loudly protested, the sigils have become pretty saturated to where everything has a meaning already.

But we do have one little crevice in notational space that isn&#39;t too hideous.

## Enclosing In \`Backticks\`

    adjusted-value: value / `1.02`

    set alarm for `10:20`

    [&lt;backdate-post&gt; `31-Aug-2024/0:36:30-4:00`]

    set $(coefficient-name) `6.22e23`

    [1020 : -304]  ; INTEGER! would of course be exempt.

The backticks are about as unobtrusive as this can get.

Having them on the start and end doesn&#39;t just make it look more balanced and symmetrical--it also lets the literal interpretation be sandboxed from the rest of the scanning.

## This Would Not Bother Me

Quite the contrary, I would be *thrilled* to see the regularity this would bring to the scanner.

It puts all the quirky exceptions in one place where they can fight amongst themselves, while the real work can proceed.

## A Place For Parameterized TRANSCODE?

When you call TRANSCODE it could offer you the ability to specify that file&#39;s interpretation of backtick&#39;d portions.  This would give you a way to customize things, throwing in your own pecking order for the literals...then using TO INTEGER! and TO DATE! etc as you wish (or after you&#39;ve picked over it, call some kind of generic TO-VALUE that goes through the default list).

Maybe.  I don&#39;t know.  It&#39;s a thought, that constraining these irregularities inside of a box could let that irregular space be what it wanted, while the rest of the scanner would be nailed down.

We could even say there&#39;s a mode you can load things in which it doesn&#39;t interpret the literals at all.  They&#39;d just be LITERAL!.

    &gt;&gt; code: transcode/illiterate -{foo: `whatever*you*say`}-
    == [foo: `whatever*you*say`]

    &gt;&gt; type of second code
    == &amp;[literal]

    &gt;&gt; as text! second code
    == &quot;whatever*you*say&quot;

## Doesn&#39;t (Necessarily) Stop Use Of Unbackticked Forms

You wouldn&#39;t be able to write plain **`1.02`** and get a TUPLE! that you could translate into a DECIMAL! (error, as an integer in the second slot would be loss of information).

But you could get away with some things.  More with something like the **[FUSED! Proposal](https://forum.rebol.info/t/no-interstitial-delimiter-sequence-proposal-scrunch/1503)**

If your notation is LOAD-able, and you&#39;re in a dialect context, you could transform what you got.

If people decide it&#39;s worth it to them to do transforms on **1.2em** to make it **\`1.2\`em** that&#39;s their dialect&#39;s business.  But we need to make leading-0s illegal in tuples, so you don&#39;t unwittingly lose information.

https://forum.rebol.info/t/tuple-troubles-version-0-3-01-vs-0-3-1/1755</description>
    
    <lastBuildDate>Sat, 31 Aug 2024 17:18:18 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Backtick Literals (and an Axis of Extensibility?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've been historically frustrated by the overlap between what I think make nicely regular language features (like TUPLE!, PATH!, and CHAIN!) running up against edges with literal representations.</p>
<ul>
<li>
<p><strong><code>version/1.2</code></strong> would be nice if that could be interpreted as a tuple, but people want to write their decimal representations as <strong><code>1.02</code></strong> etc.</p>
</li>
<li>
<p><strong><code>1:10</code></strong> would be nice as a CHAIN! to represent a range, but people want to write TIME! representations as <strong><code>10:20</code></strong> etc.</p>
</li>
<li>
<p><strong><code>31-Aug-2024/0:36:30-4:00</code></strong> is a DATE!, but sure looks like a PATH!</p>
</li>
</ul>
<p>Ad nauseum.</p>
<p>Because I think <strong><code>version/1.2</code></strong> has been genenerally the kind of thing that's more important to the domains Rebol is actually good for than math, I've been willing to throw things like DECIMAL! under the bus.  So over time I've suggested random things like <em>"<strong><code>&amp;1.02</code></strong> to represent DECIMAL!"</em>.  But not only have such ideas been loudly protested, the sigils have become pretty saturated to where everything has a meaning already.</p>
<p>But we do have one little crevice in notational space that isn't too hideous.</p>
<h2><a name="p-7485-enclosing-in-backticks-1" class="anchor" href="https://forum.rebol.info#p-7485-enclosing-in-backticks-1"></a>Enclosing In `Backticks`</h2>
<pre><code>adjusted-value: value / `1.02`

set alarm for `10:20`

[&lt;backdate-post&gt; `31-Aug-2024/0:36:30-4:00`]

set $(coefficient-name) `6.22e23`

[1020 : -304]  ; INTEGER! would of course be exempt.
</code></pre>
<p>The backticks are about as unobtrusive as this can get.</p>
<p>Having them on the start and end doesn't just make it look more balanced and symmetrical--it also lets the literal interpretation be sandboxed from the rest of the scanning.</p>
<h2><a name="p-7485-this-would-not-bother-me-2" class="anchor" href="https://forum.rebol.info#p-7485-this-would-not-bother-me-2"></a>This Would Not Bother Me</h2>
<p>Quite the contrary, I would be <em>thrilled</em> to see the regularity this would bring to the scanner.</p>
<p>It puts all the quirky exceptions in one place where they can fight amongst themselves, while the real work can proceed.</p>
<h2><a name="p-7485-a-place-for-parameterized-transcode-3" class="anchor" href="https://forum.rebol.info#p-7485-a-place-for-parameterized-transcode-3"></a>A Place For Parameterized TRANSCODE?</h2>
<p>When you call TRANSCODE it could offer you the ability to specify that file's interpretation of backtick'd portions.  This would give you a way to customize things, throwing in your own pecking order for the literals...then using TO INTEGER! and TO DATE! etc as you wish (or after you've picked over it, call some kind of generic TO-VALUE that goes through the default list).</p>
<p>Maybe.  I don't know.  It's a thought, that constraining these irregularities inside of a box could let that irregular space be what it wanted, while the rest of the scanner would be nailed down.</p>
<p>We could even say there's a mode you can load things in which it doesn't interpret the literals at all.  They'd just be LITERAL!.</p>
<pre><code>&gt;&gt; code: transcode/illiterate -{foo: `whatever*you*say`}-
== [foo: `whatever*you*say`]

&gt;&gt; type of second code
== &amp;[literal]

&gt;&gt; as text! second code
== "whatever*you*say"
</code></pre>
<h2><a name="p-7485-doesnt-necessarily-stop-use-of-unbackticked-forms-4" class="anchor" href="https://forum.rebol.info#p-7485-doesnt-necessarily-stop-use-of-unbackticked-forms-4"></a>Doesn't (Necessarily) Stop Use Of Unbackticked Forms</h2>
<p>You wouldn't be able to write plain <strong><code>1.02</code></strong> and get a TUPLE! that you could translate into a DECIMAL! (error, as an integer in the second slot would be loss of information).</p>
<p>But you could get away with some things.  More with something like the <strong><a href="https://forum.rebol.info/t/no-interstitial-delimiter-sequence-proposal-scrunch/1503">FUSED! Proposal</a></strong></p>
<p>If your notation is LOAD-able, and you're in a dialect context, you could transform what you got.</p>
<p>If people decide it's worth it to them to do transforms on <strong>1.2em</strong> to make it <strong>`1.2`em</strong> that's their dialect's business.  But we need to make leading-0s illegal in tuples, so you don't unwittingly lose information.</p>
<aside class="quote quote-modified" data-post="1" data-topic="1755">
  <div class="title">
    <div class="quote-controls"></div>
    <img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/tuple-troubles-version-0-3-01-vs-0-3-1/1755">Tuple Troubles: Version 0.3.01 vs 0.3.1</a> <a class="badge-category__wrapper " href="https://forum.rebol.info/c/development/datatypes/45"><span data-category-id="45" style="--category-badge-color: #25AAE2; --category-badge-text-color: #FFFFFF; --parent-category-badge-color: #25AAE2;" data-parent-category-id="8" data-drop-close="true" class="badge-category --has-parent" title="The datatypes category is for the discussion of the specific properties of datatypes themselves.  Sample topics might include:"><span class="badge-category__name">Datatypes</span></span></a>
  </div>
  <blockquote>
    For better or worse, versioning in Rebol has used TUPLE!.  e.g. 0.3.1 is 32-bit Windows, and 0.3.40 is 64-bit Windows 
If you go back and look at the old R3-Alpha file <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/tools/systems.r#L21">%systems.r</a> you can see that it's pretty typical for Carl to have written the versions out with leading zeros...but only in the third slot.  So 0.3.01 but not 00.03.01 
But ultimately the tuple discards this information.  And this has been the way it always worked: 
rebol2&gt;&gt; 0.3.01
== 0.3.1

red&gt;&gt; 0.3.01
== 0.3.1

ren-c&gt;&gt; 0.3.01
==…
  </blockquote>
</aside>

          <p><a href="https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235/1</link>
        <pubDate>Sat, 31 Aug 2024 04:54:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2235-1</guid>
        <source url="https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235.rss">Backtick Literals (and an Axis of Extensibility?)</source>
      </item>
      <item>
        <title>Backtick Literals (and an Axis of Extensibility?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2235">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Feels like it would be easy to make a mistake</p>
</blockquote>
</aside>
<p>A syntax highlighter which colored dots, colons, and slashes differently than the elements in the sequences would help a bit.</p>
<p>You'd have some pause when you saw your decimal point be a different color than the numbers on either side of it.  Then when you put it in the backticks, it would become all the same color.</p>
<aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2235">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>honestly that’s the case with most of Ren-C’s design…</p>
</blockquote>
</aside>
<p>The hope is that it gives you the power to create what you need with the constraints that are important to you, while not getting in the way of your "flow" when you find a representation is succinct and manageable for your situation.</p>
<p>It's a hope.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235/3</link>
        <pubDate>Sat, 31 Aug 2024 03:47:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2235-3</guid>
        <source url="https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235.rss">Backtick Literals (and an Axis of Extensibility?)</source>
      </item>
      <item>
        <title>Backtick Literals (and an Axis of Extensibility?)</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>I guess I could live with <code>`6.22e23`</code> etc. Feels like it would be easy to make a mistake, but honestly that’s the case with most of Ren-C’s design…</p>
          <p><a href="https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235/2</link>
        <pubDate>Sat, 31 Aug 2024 03:27:18 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2235-2</guid>
        <source url="https://forum.rebol.info/t/backtick-literals-and-an-axis-of-extensibility/2235.rss">Backtick Literals (and an Axis of Extensibility?)</source>
      </item>
  </channel>
</rss>
