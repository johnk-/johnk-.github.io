<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Mapping from Series =&gt; Series By Co-Opting The Key Series</title>
    <link>https://forum.rebol.info/t/mapping-from-series-series-by-co-opting-the-key-series/2166</link>
    <description>There was an unfinished idea in an old version of the interpreter.  It related to how to deal with problems like trying to make a copy of a block, and make sure any series with the same identity are only copied once in the new structure, and point to that one copied identity.

Rebol2 did not have this behavior:

    rebol2&gt;&gt; block: [a]
    == [a]

    rebol2&gt;&gt; original: reduce [block block]
    == [[a] [a]]

    rebol2&gt;&gt; append block &#39;b
    == [a b]

    rebol2&gt;&gt; original
    == [[a b] [a b]]  ; both aliases see the append

    rebol2&gt;&gt; duplicate: copy/deep original
    == [[a b] [a b]]

    rebol2&gt;&gt; append first duplicate &#39;c
    == [a b c]

    rebol2&gt;&gt; duplicate
    == [[a b c] [a b]]  ; considered by many to be wrong: independent copies

This post isn&#39;t about whether that is right or wrong (and having such questions may seem to some as an indication of *&quot;this language is madness! get me to Haskell&quot;*, etc. But as I&#39;ve said this is the game we&#39;re playing here so we roll with it.)

But to not get independent copies, you need a way to map series nodes to copies you&#39;ve already created...so you can consult that mapping before making new copies.  And the direction that was being pursued by the old interpreter I am looking at was to actually do surgery on the originating series nodes, to alter them so they shifted out some of their content, such that they could be their own keys in the mapping.

Generally speaking, all the bits in a series stub are spoken for.  So it would seem there&#39;s nowhere to stow a pointer to the new series you are creating in it.  What the implementation was doing was pushing a 4 pointer cell on the data stack, writing one pointer&#39;s worth of information from the stub into that cell, then replacing that pointer slot in the stub with the stack index.  Then it wrote the new series into the cell...so the cell contained one stowed pointer from the original series and one pointer for the new series.

This meant the original series was now in a &quot;weird&quot; state, that things like the GC had to know about and tolerate.  Other operations looking for the missing information in the stub needed to be caught if they tried to get at it without following the stack index through to the stack cell.

Having the cells on the data stack meant it was not necessary to enumerate all the series stubs after a copy to &quot;clean them up&quot;.  Otherwise, I&#39;d imagine it may be possible to make some kind of guarantee that for any series appearing in source, the union of the bits in the source series and the bits of the copied series can hold all the information necessary to construct two valid series... e.g. one pointer&#39;s worth of information is always redundant in those two copies.  If you can get *two* pointers&#39; worth of information redundant, the second could be used to chain a linked list as you go...removing the need for the stack cells to enumerate.

Though having the stack cells and no particular requirement of information redundancy in source series with their copies offers another benefit: being applicable for creating mappings that aren&#39;t copying-related.

Anyway, it was a little unfinished idea I ran across that I wanted to document.  I&#39;m cleaning up the bootstrap executable to refresh it with something that will help [in the FENCE! migration](https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727), and mercilessly deleting any code in the bootstrap executable that does not specifically benefit bootstrap... to reduce the instability surface, speed things up, and make it easier to debug the 6-year old executable if worst comes to worst.</description>
    
    <lastBuildDate>Wed, 06 Mar 2024 17:53:20 +0000</lastBuildDate>
    <category>Optimization</category>
    <atom:link href="https://forum.rebol.info/t/mapping-from-series-series-by-co-opting-the-key-series/2166.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Mapping from Series =&gt; Series By Co-Opting The Key Series</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There was an unfinished idea in an old version of the interpreter.  It related to how to deal with problems like trying to make a copy of a block, and make sure any series with the same identity are only copied once in the new structure, and point to that one copied identity.</p>
<p>Rebol2 did not have this behavior:</p>
<pre><code>rebol2&gt;&gt; block: [a]
== [a]

rebol2&gt;&gt; original: reduce [block block]
== [[a] [a]]

rebol2&gt;&gt; append block 'b
== [a b]

rebol2&gt;&gt; original
== [[a b] [a b]]  ; both aliases see the append

rebol2&gt;&gt; duplicate: copy/deep original
== [[a b] [a b]]

rebol2&gt;&gt; append first duplicate 'c
== [a b c]

rebol2&gt;&gt; duplicate
== [[a b c] [a b]]  ; considered by many to be wrong: independent copies
</code></pre>
<p>This post isn't about whether that is right or wrong (and having such questions may seem to some as an indication of <em>"this language is madness! get me to Haskell"</em>, etc. But as I've said this is the game we're playing here so we roll with it.)</p>
<p>But to not get independent copies, you need a way to map series nodes to copies you've already created...so you can consult that mapping before making new copies.  And the direction that was being pursued by the old interpreter I am looking at was to actually do surgery on the originating series nodes, to alter them so they shifted out some of their content, such that they could be their own keys in the mapping.</p>
<p>Generally speaking, all the bits in a series stub are spoken for.  So it would seem there's nowhere to stow a pointer to the new series you are creating in it.  What the implementation was doing was pushing a 4 pointer cell on the data stack, writing one pointer's worth of information from the stub into that cell, then replacing that pointer slot in the stub with the stack index.  Then it wrote the new series into the cell...so the cell contained one stowed pointer from the original series and one pointer for the new series.</p>
<p>This meant the original series was now in a "weird" state, that things like the GC had to know about and tolerate.  Other operations looking for the missing information in the stub needed to be caught if they tried to get at it without following the stack index through to the stack cell.</p>
<p>Having the cells on the data stack meant it was not necessary to enumerate all the series stubs after a copy to "clean them up".  Otherwise, I'd imagine it may be possible to make some kind of guarantee that for any series appearing in source, the union of the bits in the source series and the bits of the copied series can hold all the information necessary to construct two valid series... e.g. one pointer's worth of information is always redundant in those two copies.  If you can get <em>two</em> pointers' worth of information redundant, the second could be used to chain a linked list as you go...removing the need for the stack cells to enumerate.</p>
<p>Though having the stack cells and no particular requirement of information redundancy in source series with their copies offers another benefit: being applicable for creating mappings that aren't copying-related.</p>
<p>Anyway, it was a little unfinished idea I ran across that I wanted to document.  I'm cleaning up the bootstrap executable to refresh it with something that will help <a href="https://forum.rebol.info/t/rethinking-braces-as-an-array-type/1727">in the FENCE! migration</a>, and mercilessly deleting any code in the bootstrap executable that does not specifically benefit bootstrap... to reduce the instability surface, speed things up, and make it easier to debug the 6-year old executable if worst comes to worst.</p>
          <p><a href="https://forum.rebol.info/t/mapping-from-series-series-by-co-opting-the-key-series/2166/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/mapping-from-series-series-by-co-opting-the-key-series/2166/1</link>
        <pubDate>Wed, 06 Mar 2024 15:24:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2166-1</guid>
        <source url="https://forum.rebol.info/t/mapping-from-series-series-by-co-opting-the-key-series/2166.rss">Mapping from Series =&gt; Series By Co-Opting The Key Series</source>
      </item>
  </channel>
</rss>
