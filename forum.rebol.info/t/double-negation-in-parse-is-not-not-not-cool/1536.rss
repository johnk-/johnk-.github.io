<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
    <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536</link>
    <description>So there&#39;s a bit of an issue with the NOT combinator in UPARSE.  It fails when the rule you give it as a parameter succeeds:

    &gt;&gt; uparse [1] [not integer!]  ; fails... because it *was* an integer
    ; null

The NOT combinator received information about how much of the input the INTEGER! matched.  But it threw that information away.

So what if you tried to negate it again...with NOT NOT?

    &gt;&gt; uparse [1] [not not integer!]
    ; ???

Here the first NOT is negating the second rule that failed.  So it&#39;s a success in the traditional sense you&#39;d usually expect with a NOT.  But it doesn&#39;t know in that success how much to skip.  So the 1 is still pending.

Hence to get this to work you&#39;d have to say:

    &gt;&gt; uparse [1] [not not integer!, integer!]
    == [1]

**In other words, every NOT is effectively a NOT AHEAD.**

But Red actually tries to cancel out the NOTs:

    red&gt;&gt; parse [1] [set x not not integer!]
    == true

    red&gt;&gt; x
    == 1

This doesn&#39;t make a lot of sense.  It doesn&#39;t work with other failing rules... 1 is not a &quot;not integer!&quot; and it&#39;s also not a &quot;tag!&quot;, so why would this not capture it?

    red&gt;&gt; parse [1] [set x not tag!]
    == false

Here are the options for dealing with this in the combinator model:

1. Change the name of NOT to NOT-AHEAD.  This is how Haskell does it (they call it [**notFollowedBy**](https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:notFollowedBy)... that combinator list is good to look at, by the way).

2. Leave it as-is and assume that it&#39;s the kind of thing you can just learn.

3. Rig up a hack to make the specific case of NOT immediately followed by NOT a no-op.

4. Systematically build into the protocol the idea that a rule can separately signal that it failed as well as &quot;how much input it would have consumed if it had succeeded&quot;

I think (3) as in Red is a bad idea.  I&#39;m not even sure what (4) would mean...?

    red&gt;&gt; parse [1 2 3 4] [copy numbers not some not integer!]
    == false

I think my inclination would be (2).

---

&gt; **UPDATE:** Looking a little further, I think the NOT NOT behavior in Red is likely a bug and not an attempt to implement a nonsensical feature...[being caused by the same thing that made #1246 happen in R3-Alpha](https://github.com/metaeducation/rebol-issues/issues/1246), e.g. controlling negation via a single flag.</description>
    
    <lastBuildDate>Wed, 03 Apr 2024 09:01:21 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="Brett" data-post="9" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p><code>; Yen is in whole numbers.</code></p>
</blockquote>
</aside>
<p>You keep your money in Yen?  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<aside class="quote no-group" data-username="Brett" data-post="9" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/brett/40/177_2.png" class="avatar"> Brett:</div>
<blockquote>
<p>I guess UPARSE wouldn't have that problem if an <code>UNLESS</code> took some of the role of <code>NOT</code>.</p>
</blockquote>
</aside>
<p>I don't know that people would comprehend the difference between UNLESS vs. NOT.</p>
<p>If we're looking for uniform operators, it seems there are NOT-AHEAD and ONE-IF-NOT-AHEAD, where ONE-IF-NOT-AHEAD simply takes the next single item if the rule doesn't match:</p>
<pre><code>&gt;&gt; parse ["a"] [one-if-not-ahead [integer! integer!]]
== "a"
</code></pre>
<p>This ONE-IF-NOT-AHEAD operator is kind of clunky, though similar to how SET works in Rebol2/Red, to take the first item of a match (vs UPARSE's last synthesized product of "a block combinator").</p>
<pre><code>rebol2&gt;&gt; parse ["a" "b"] [set x [string! string!]]
== true

rebol2&gt;&gt; x
== "a"
</code></pre>
<p><strong>one-if-not-ahead rule</strong> is simply <strong>[not-ahead rule, one]</strong> (in the current <a href="https://forum.rebol.info/t/killing-off-historical-skip-in-parse/1557/15">ONE-is-historical-SKIP</a> model)</p>
<p>It would work with anything... but I'd personally rather have a NOT that wasn't compatible with everything, but covered common cases.  And if someone actually wanted ONE-IF-NOT-AHEAD they could write <strong>[not ahead rule, one]</strong> for themselves.</p>
<aside class="quote no-group" data-username="bradrn" data-post="8" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>Iâ€™m still not sure I see why NOT should exist as its own combinator.</p>
</blockquote>
</aside>
<p>It wouldn't really be a combinator, but a "combinator modifier".</p>
<p>Let me reiterate it's simply about being able to pass a refinement to combinators, even if they are triggered by a datatype and hence nowhere to put the refinement.</p>
<p>e.g. you can write <strong><code>ahead/not</code></strong> but you can't write <strong><code>#a/not</code></strong></p>
<p>I think <strong><code>not *combinator*</code></strong> being able to do this modification is a cool idea.</p>
<p>Though of course allowing general "combinator modifiers" creates a lot of obfuscations, due to the backchannel.  If I'm trying to make a debugger, then these refinements slipping in have to be presented somehow... otherwise once you've stepped into the <strong>not</strong> and all you see is <strong><span class="hashtag">#a</span></strong> it will be confusing when <strong><span class="hashtag">#b</span></strong> looks to be a match of <strong><span class="hashtag">#a</span></strong>.</p>
<p>Maybe negation is the <em>only</em> combinator modifier, so the system can account for it.</p>
<h2>
<a name="conservative-choice-for-now-1" class="anchor" href="https://forum.rebol.info#conservative-choice-for-now-1"></a>Conservative Choice For Now</h2>
<p>A conservative thing to do may just be to rename NOT as NOT-AHEAD and work on higher priority tasks.</p>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/10</link>
        <pubDate>Wed, 03 Apr 2024 07:56:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-10</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>In case it's of relevance or interest..</p>
<p>In Rebol 2 parse does not have a not, so <code>parsing-unless</code> is the function I use to implement the guard behaviour of <code>not ahead</code>.  I use it a lot, like in this code to parse the adhoc syntax of my bank account transactions:</p>
<pre><code>fxamt: [opt sp some digit opt [#"." some digit] sp cur-code] ; Yen is in whole numbers.
not-fxamt: parsing-unless [fxamt]
not-br: parsing-unless [{&lt;BR&gt;}]
nsp: complement charset { }

loc-word: [not-fxamt some [not-br nsp]]
</code></pre>
<p>So the <code>nsp</code> here is indeed a <code>some not space</code> in the positive sense. I use that a lot too but for my complex rules for me in Rebol 2 it will be some <code>[not-thing skip]</code></p>
<p>I do use the two senses a lot in practice:</p>
<ul>
<li>the negative/guard sense - I'm guarding the rest of the rule with the negated result of the match - the "unless".</li>
<li>the positive sense - I want the positive match of something that isn't the thing.</li>
</ul>
<p>The wrinkle I've had with guard rules is when I'm using some <a href="http://www.rebol.org/documentation.r?script=load-parse-tree.r">routine</a> that collects the input matched by rules that succeed - the guard rules succeed but I don't want their matching input (even if empty). For example, if I specified that I want to collect FXAMT then my routine will match when the <code>fxamt</code> inside <code>not-fxamt</code> succeeds.  My simple workaround is to create another rule with the same structure but different name.  I guess UPARSE wouldn't have that problem if an <code>UNLESS</code> took some of the role of <code>NOT</code>.</p>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/9</link>
        <pubDate>Sun, 31 Mar 2024 04:16:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-9</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>Iâ€™m still not sure I see why NOT should exist as its own combinator. The disadvantages seem to outweigh the disadvantages: it adds a lot of complexity, and as you note thereâ€™s some cases where it doesnâ€™t even seem to make sense.</p>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/8</link>
        <pubDate>Tue, 26 Mar 2024 02:32:29 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-8</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So my main concern is just the mechanics:</p>
</blockquote>
</aside>
<p>One observation is that it probably breaks the ability to take any isolated rule and put it in a BLOCK!, since the block combinator isn't generically negatable.</p>
<p>So <strong><code>not [integer!]</code></strong> wouldn't work, when <strong><code>not integer!</code></strong> would.</p>
<p>I don't know that trying to special case it works.  e.g. hacking it up to do <strong><code>not [integer! | word!]</code></strong>.  That case may seem to work, but what if you mixed concepts of negation... like <strong><code>not [integer! | ahead word!]</code></strong> ?</p>
<p>It's sort of like I said: that NOT becomes a way to slipstream a refinement into a single combinator for its meaning of negation.  You can't do that with a composite rule.</p>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/7</link>
        <pubDate>Tue, 26 Mar 2024 02:13:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-7</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="5" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>But then thereâ€™s the other problem I mentioned: what if you <em>do</em> want to invert the parserâ€™s failure state?</p>
</blockquote>
</aside>
<p>I think that's covered well enough by NOT AHEAD.</p>
<p>AHEAD is a nice generic combinator for <em>"take your combinated parser argument, apply it, but don't advance the input (or apply any 'pending' effects).  just stop the match if it didn't succeed, or continue if it did."</em></p>
<p>So having NOT AHEAD be the implementation of NOT-FOLLOWED-BY feels good.</p>
<aside class="quote no-group" data-username="bradrn" data-post="5" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>I see no particular reason to merge all these things under a single NOT combinator.</p>
</blockquote>
</aside>
<p>I like the brevity, and it feels "English-like" to me to be context-sensitive.</p>
<pre><code>&gt;&gt; parse ["a"] [not ahead integer!, text!]
== "a"

&gt;&gt; parse ["a"] [not integer!]
== "a"

&gt;&gt; parse ["a"] [not some integer!]
** Error: SOME combinator cannot be negated with NOT
</code></pre>
<p>So my main concern is just the mechanics: does it break something interesting.  (And as usual I'm suggesting it before actually trying it, which means I do not know if I will hit a contradiction while implementing it.)</p>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/6</link>
        <pubDate>Sun, 24 Mar 2024 05:50:46 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-6</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>A little touchy-feely perhaps that each parser can decide if there's a meaning to its negation (or if negation has no meaning at all) as opposed to something that has to be black-box decided from the parameterized parser's result. But it seems learnable to me.</p>
</blockquote>
</aside>
<p>But then thereâ€™s the other problem I mentioned: what if you <em>do</em> want to invert the parserâ€™s failure state? For instance, in <a href="https://github.com/bradrn/brassica/blob/b627a345043760a3b403bdbacf0c56c47f7ca992/src/Brassica/SoundChange/Parse.hs#L218">this parser</a> I used <code>notFollowedBy (symbol "//")</code> to match only the case with a single slash. But if <code>not "/"</code> instead matches anything except for <code>"/"</code>, then that leaves me no easy way to get that logic.</p>
<p>I think the cleanest design here would be to recognise that thereâ€™s two very different cases here, and therefore treat them differently:</p>
<ul>
<li>The â€˜fail on successâ€™ logic can apply to any other combinator, so give it its own dedicated name, like NOT-FOLLOWED-BY or something. (That nameâ€™s verbose, but this combinator is uncommon, so it wouldnâ€™t matter a huge amount.)</li>
<li>Other meanings of â€˜negationâ€™ are essentially parser-specific, so treat them as refinements for the individual parsers, like AHEAD/NOT. Characters canâ€™t be refined, so we could make a new combinator for them (call it something like EXCEPT-FOR). I see no particular reason to merge all these things under a single NOT combinator.</li>
</ul>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/5</link>
        <pubDate>Sun, 24 Mar 2024 05:46:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-5</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/40/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>But especially the last quoted paragraph seems to be conflating them. It sounds like you want NOT to sometimes invert the failure state, and sometimes change the characters that are matched. That strikes me as possibly being quite difficult to reason about.</p>
</blockquote>
</aside>
<p>You're more or less giving some parsers a refinement.  So AHEAD has AHEAD/NOT.  But it's letting people write that out as <strong>not ahead</strong>.  And when combinators are triggered by datatype, you can get the feature of slipstreaming that refinement to the combinator when there's nowhere to put the /NOT.</p>
<p>A little touchy-feely perhaps that each parser can decide if there's a meaning to its negation (or if negation has no meaning at all) as opposed to something that has to be black-box decided from the parameterized parser's result.  But it seems learnable to me.</p>
<p>The question of if this little backdoor communication breaks some other more interesting composability feature in UPARSE is the main one to answer.  <em>(It isn't the only such suggestion... I've wondered about a similar backchannel to suppress an error from the "null combinator", which a MAYBE combinator could uniquely suppress an error from.)</em></p>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/4</link>
        <pubDate>Sun, 24 Mar 2024 04:08:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-4</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I was reading some code using NOT that was like <strong>some [not space, one]</strong>.</p>
<p>Hence effectively this is <strong>some [not ahead space, one]</strong> e.g. some number of times look ahead to see a thing isn't a space, then consume one item (whatever the not space thing was).</p>
<p>This made me a bit disgruntled that I couldn't write <strong>some not space</strong>, which on the surface seems like a coherent thought... vs. something that acts like an <strong>some not ahead space</strong> e.g. an infinite loop.</p>
<p>[â€¦]</p>
<p>e.g. AHEAD could be a negatable combinator, producing a negatable parser. And maybe a single character, single byte, or single value combinator would be willing to be negated--with the negated rule being any single value that's not that. We could also negate character sets in the same way.</p>
</blockquote>
</aside>
<p>I feel thereâ€™s some confusion between two completely different notions of negation here:</p>
<ul>
<li>Complement of a character set: that is, â€˜match any character which is not in this setâ€™</li>
<li>Inversion of parser success: that is, â€˜make a parser which fails when another succeedsâ€™</li>
</ul>
<p>In Haskell, the latter is (as you note) <a href="https://hackage.haskell.org/package/megaparsec-9.6.1/docs/Text-Megaparsec.html#v:notFollowedBy"><code>notFollowedBy</code></a>, and the former needs to be created ad-hoc using combinators like <a href="https://hackage.haskell.org/package/megaparsec-9.6.1/docs/Text-Megaparsec.html#v:satisfy"><code>satisfy</code></a>. Ren-C could do a bit better than Haskell there, since it reifies character sets as values.</p>
<p>But especially the last quoted paragraph seems to be conflating them. It sounds like you want NOT to sometimes invert the failure state, and sometimes change the characters that are matched. That strikes me as possibly being quite difficult to reason about. Not only that, it would create difficulties in cases where both are plausible â€” e.g. if <code>not space</code> matches everything except spaces, then how do I create a parser which fails if a space is present?</p>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/3</link>
        <pubDate>Sun, 24 Mar 2024 03:52:11 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-3</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1536">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Here are the options for dealing with this in the combinator model:</p>
<ol>
<li>Change the name of NOT to NOT-AHEAD. This is how Haskell does it (they call it <a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:notFollowedBy"><strong>notFollowedBy</strong> </a>... that combinator list is good to look at, by the way).</li>
<li>Leave it as-is and assume that it's the kind of thing you can just learn.</li>
<li>Rig up a hack to make the specific case of NOT immediately followed by NOT a no-op.</li>
<li>Systematically build into the protocol the idea that a rule can separately signal that it failed as well as "how much input it would have consumed if it had succeeded"</li>
</ol>
<p>I think (3) as in Red is a bad idea.</p>
</blockquote>
</aside>
<p>I was reading some code using NOT that was like <strong>some [not space, one]</strong>.</p>
<p>Hence effectively this is <strong>some [not ahead space, one]</strong> e.g. some number of times look ahead to see a thing isn't a space, then consume one item (whatever the not space thing was).</p>
<p>This made me a bit disgruntled that I couldn't write <strong>some not space</strong>, which on the surface seems like a coherent thought... vs. something that acts like an <strong>some not ahead space</strong> e.g. an infinite loop.</p>
<p>In practice any input-consuming combinator has a bit of a coherence problem... because while the letter "A" is not a space, neither is reaching the end of input.  So to stop the infinite loop problem you'd have to at the very least omit a test against end.</p>
<blockquote>
<p>I'm not even sure what (4) would mean...?</p>
</blockquote>
<p>Maybe it means we're missing a concept like <em>negatable combinators</em>, which you can call as <strong>parser/not</strong> instead of just <strong>parser</strong>.  Then NOT would call the parser negatedly (maybe it's the only combinator that would do so, or maybe there would be others?)</p>
<p>e.g. AHEAD could be a negatable combinator, producing a negatable parser.  And maybe a single character, single byte, or single value combinator would be willing to be negated--with the negated rule being any single value that's not that.  We could also negate character sets in the same way.</p>
<p>So a string combinator <em>when matching in a BLOCK!</em> could be negated, and matching the end would not count:</p>
<pre><code>&gt;&gt; parse ["alpha"] [not "beta"]
== "alpha"

&gt;&gt; parse [] [not "beta"]  ; behave same as e.g. `parse [] ["alpha"]`
** Error: PARSE BLOCK! combinator did not match input
</code></pre>
<p>But when matching in a string, it couldn't</p>
<pre><code>&gt;&gt; parse "alpha" [not "beta"]
** Error: TEXT! combinator not negatable when parsing TEXT!
</code></pre>
<p>So there'd be a narrow interpretation of cases where it was clear how much a combinator intended to test and consume.  If you could say how much it intended to consume... and make a reasoned argument it could consume an equal amount in the negated case.  (Any combinator that consumed no input could thus be negatable.)</p>
<p>This strikes me as valuable, as it would give meaning to things like <strong>some not space</strong> that people would want, and dismiss with the confusion over NOT being implicitly NOT AHEAD.</p>
<p>It may mean that <strong><code>some not space</code></strong> would work, and <strong><code>some not " "</code></strong> would be different in string parsing, e.g. characters would be treated differently than strings of length 1.  Or perhaps a NOT of a string that didn't match would always advance one character?  :-/</p>
<hr>
<p>Observation: NOT could itself be a negatable combinator, making NOT NOT work.  It just would notice when it was called with /NOT and then use that as a signal to call its combinated parser parameter plainly, vs. using /NOT.</p>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/2</link>
        <pubDate>Sun, 24 Mar 2024 01:09:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-2</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
      <item>
        <title>Double Negation in PARSE is NOT NOT NOT Cool</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So there's a bit of an issue with the NOT combinator in UPARSE.  It fails when the rule you give it as a parameter succeeds:</p>
<pre><code>&gt;&gt; uparse [1] [not integer!]  ; fails... because it *was* an integer
; null
</code></pre>
<p>The NOT combinator received information about how much of the input the INTEGER! matched.  But it threw that information away.</p>
<p>So what if you tried to negate it again...with NOT NOT?</p>
<pre><code>&gt;&gt; uparse [1] [not not integer!]
; ???
</code></pre>
<p>Here the first NOT is negating the second rule that failed.  So it's a success in the traditional sense you'd usually expect with a NOT.  But it doesn't know in that success how much to skip.  So the 1 is still pending.</p>
<p>Hence to get this to work you'd have to say:</p>
<pre><code>&gt;&gt; uparse [1] [not not integer!, integer!]
== [1]
</code></pre>
<p><strong>In other words, every NOT is effectively a NOT AHEAD.</strong></p>
<p>But Red actually tries to cancel out the NOTs:</p>
<pre><code>red&gt;&gt; parse [1] [set x not not integer!]
== true

red&gt;&gt; x
== 1
</code></pre>
<p>This doesn't make a lot of sense.  It doesn't work with other failing rules... 1 is not a "not integer!" and it's also not a "tag!", so why would this not capture it?</p>
<pre><code>red&gt;&gt; parse [1] [set x not tag!]
== false
</code></pre>
<p>Here are the options for dealing with this in the combinator model:</p>
<ol>
<li>
<p>Change the name of NOT to NOT-AHEAD.  This is how Haskell does it (they call it <a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:notFollowedBy"><strong>notFollowedBy</strong></a>... that combinator list is good to look at, by the way).</p>
</li>
<li>
<p>Leave it as-is and assume that it's the kind of thing you can just learn.</p>
</li>
<li>
<p>Rig up a hack to make the specific case of NOT immediately followed by NOT a no-op.</p>
</li>
<li>
<p>Systematically build into the protocol the idea that a rule can separately signal that it failed as well as "how much input it would have consumed if it had succeeded"</p>
</li>
</ol>
<p>I think (3) as in Red is a bad idea.  I'm not even sure what (4) would mean...?</p>
<pre><code>red&gt;&gt; parse [1 2 3 4] [copy numbers not some not integer!]
== false
</code></pre>
<p>I think my inclination would be (2).</p>
<hr>
<blockquote>
<p><strong>UPDATE:</strong> Looking a little further, I think the NOT NOT behavior in Red is likely a bug and not an attempt to implement a nonsensical feature...<a href="https://github.com/metaeducation/rebol-issues/issues/1246">being caused by the same thing that made #1246 happen in R3-Alpha</a>, e.g. controlling negation via a single flag.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536/1</link>
        <pubDate>Wed, 03 Mar 2021 21:31:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1536-1</guid>
        <source url="https://forum.rebol.info/t/double-negation-in-parse-is-not-not-not-cool/1536.rss">Double Negation in PARSE is NOT NOT NOT Cool</source>
      </item>
  </channel>
</rss>
