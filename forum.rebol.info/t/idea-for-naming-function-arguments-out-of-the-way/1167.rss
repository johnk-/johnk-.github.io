<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Idea for Naming Function Arguments Out of the Way</title>
    <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167</link>
    <description>As part of Rebol&#39;s contention-for-short-names problem, there are many instances where refinements have names like /ALL where they conflict with common natives or lib functions.

When this happens, I tend to do something to name them out of the way and put the lib function back:

    foo: function [
        bar [block!]
        /all &quot;foo all the bars&quot;
    ][
        all_FOO: all
        all: :lib/all
        ...
    ]

Clearly we need a better pattern.  Something that occurred to me today was the idea of being able to name refinements in the spec via a longer path:

    foo: function [
        bar [block!]
        /x/all &quot;foo all the bars&quot;
    ][
        ...
    ]

The concept would be that the interface to the user (e.g. HELP) would still just show /ALL.  But you as the function author could clearly see that you were supposed to refer to the refinement as /X/ALL in the body of the function.  And the binding of ALL would be left alone inside the function body to whatever it would typically be.

For performance, the name you pick in the path could be set up as an alias for the frame of the function itself.  So if you probed the `x` above you would see it is a FRAME! with `bar` and `all` inside it.  If you wanted to, you could call `x` something more meaningful like `this`, or if you aren&#39;t making recursive calls you could even name it `foo`

The same could apply to normal arguments, just with no leading slash:

    foo: function [
        x/bar [block!]
        /x/all &quot;foo all the bars&quot;
    ][
        ...
    ]

So that would leave `bar` bound as-it-was in the body, vs. binding it to the `bar` argument.</description>
    
    <lastBuildDate>Sat, 20 Aug 2022 10:27:35 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Idea for Naming Function Arguments Out of the Way</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="6" data-topic="1167">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>While reading this, I had the thought, that tuples might be useful here, so I think this is in support of your idea.</p>
</blockquote>
</aside>
<p>Maybe there could be two features that work together on this.  One would be the ability to ask that the function's frame be passed in as a variable, and another would be to suppress binding of an argument in the body.</p>
<pre><code>foo: function [
    bar [block!]
    ./all "foo all the bars"
    &lt;frame&gt; f
][
    ... use F.ALL to access the instance's all parameter ... 
]
</code></pre>
<p>It's currently a little bit obtuse to get the function frame, e.g.:</p>
<pre><code>let f: binding of 'return
</code></pre>
<p>So having an easier way to get it would be nice.  And hinting that you would use a field reference to access the argument with the dot struck me as an interesting dialect choice.</p>
<p>One way or another, I think this issue needs to get addressed.</p>
          <p><a href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/7</link>
        <pubDate>Tue, 16 Aug 2022 17:08:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1167-7</guid>
        <source url="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss">Idea for Naming Function Arguments Out of the Way</source>
      </item>
      <item>
        <title>Idea for Naming Function Arguments Out of the Way</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>While reading this, I had the thought, that tuples might be useful here, so I think this is in support of your idea.<br>
I'm a bit surprised at how integral tuples seem to become to the features of whatever ren-c morphs into <img src="https://forum.rebol.info/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> as tuples have been one of the lesser useful datatypes of Rebol (at least to me).</p>
          <p><a href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/6</link>
        <pubDate>Sun, 27 Sep 2020 13:21:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1167-6</guid>
        <source url="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss">Idea for Naming Function Arguments Out of the Way</source>
      </item>
      <item>
        <title>Idea for Naming Function Arguments Out of the Way</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<pre><code>foo: func [bar /all/all-FOO] [
     ...
     all [... all-FOO ...] then [...]
 ]
</code></pre>
</blockquote>
<p>One thing that kind of displeased me about it is that if you did this with a normal parameter, it would get a slash in it.  But tuples might avoid that.  Also, the necessity to draw attention to it is less...because you see it up in the parameter list, so there's less odds you'll overlook it.  So the capitalization can probably be dropped:</p>
<pre><code>foo: func [bar.bar-foo /all.all-foo] [
    all [... all-foo bar-foo ...] then [...]
]
</code></pre>
<p>It might not be the most beautiful thing in the world, but this is a real problem that is very frustrating when it comes up.  And when you encourage people to play with words, they shouldn't be afraid to reuse them in refinements if they make sense.</p>
<p>Objections?  Better ideas?  <img src="https://forum.rebol.info/images/emoji/twitter/cricket.png?v=9" title=":cricket:" class="emoji" alt=":cricket:"> <img src="https://forum.rebol.info/images/emoji/twitter/cricket.png?v=9" title=":cricket:" class="emoji" alt=":cricket:"></p>
          <p><a href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/5</link>
        <pubDate>Mon, 21 Sep 2020 16:31:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1167-5</guid>
        <source url="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss">Idea for Naming Function Arguments Out of the Way</source>
      </item>
      <item>
        <title>Idea for Naming Function Arguments Out of the Way</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-post="2" data-topic="1167">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/mark-hi/40/212_2.png" class="avatar"> Mark-hi:</div>
<blockquote>
<p>So wouldn't you be able to use <strong>/all</strong> everywhere you meant to use the refinement-valued <strong>all</strong> ?</p>
</blockquote>
</aside>
<p>That wouldn't help with non-refinement parameters with names you didn't want to override...unless you decided to make every use of an argument null-tolerant.</p>
<p>Plus, I like not using the null tolerant form in places you've established the refinement was specified.</p>
<pre><code>foo: function [/bar [integer!]] [
    bar: default [1 + 2]
    ... ; no need to use /bar here, you know it's set.
]
</code></pre>
<p>To me, one of the big benefits of the new distinction is letting you convey to the reader your state of confidence (or lack of confidence) of whether something is set.  GET-WORD! didn't do that, because of its double meaning.</p>
<p>As I've said, I think this is kind of tying together to build sort of the best-case-scenario for the questions that plagued refinements and refinement arguments in the early establishment of null.<br>
That was when tradeoffs were being looked at with how Rebol2 would make refinement arguments blank in a way that might lead to them being accidentally used improperly when the refinement was not specified.  Trying to couple it so that a falsey refinement always forced the refinement arguments to null was not as good as this unification...it seems to tick all the boxes.</p>
          <p><a href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/3</link>
        <pubDate>Thu, 23 May 2019 17:44:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1167-3</guid>
        <source url="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss">Idea for Naming Function Arguments Out of the Way</source>
      </item>
      <item>
        <title>Idea for Naming Function Arguments Out of the Way</title>
        <dc:creator><![CDATA[Mark-hi]]></dc:creator>
        <description><![CDATA[
            <p>Quoting from <a href="https://forum.rebol.info/t/quoting-decisions-in-practice-null-refinements/1166:">https://forum.rebol.info/t/quoting-decisions-in-practice-null-refinements/1166:</a><br>
"Refinement-style-paths are like a GET-WORD! that's null-tolerant...they evaluate."</p>
<p>So wouldn't you be able to use <strong>/all</strong> everywhere you meant to use the refinement-valued <strong>all</strong>?<br>
This would break a <strong>LOT</strong> of code, but, on the other hand, refinements now evaluate ...</p>
          <p><a href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/2</link>
        <pubDate>Thu, 23 May 2019 15:51:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1167-2</guid>
        <source url="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss">Idea for Naming Function Arguments Out of the Way</source>
      </item>
      <item>
        <title>Idea for Naming Function Arguments Out of the Way</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As part of Rebol's contention-for-short-names problem, there are many instances where refinements have names like /ALL where they conflict with common natives or lib functions.</p>
<p>When this happens, I tend to do something to name them out of the way and put the lib function back:</p>
<pre><code>foo: function [
    bar [block!]
    /all "foo all the bars"
][
    all_FOO: all
    all: :lib/all
    ...
]
</code></pre>
<p>Clearly we need a better pattern.  Something that occurred to me today was the idea of being able to name refinements in the spec via a longer path:</p>
<pre><code>foo: function [
    bar [block!]
    /x/all "foo all the bars"
][
    ...
]
</code></pre>
<p>The concept would be that the interface to the user (e.g. HELP) would still just show /ALL.  But you as the function author could clearly see that you were supposed to refer to the refinement as /X/ALL in the body of the function.  And the binding of ALL would be left alone inside the function body to whatever it would typically be.</p>
<p>For performance, the name you pick in the path could be set up as an alias for the frame of the function itself.  So if you probed the <code>x</code> above you would see it is a FRAME! with <code>bar</code> and <code>all</code> inside it.  If you wanted to, you could call <code>x</code> something more meaningful like <code>this</code>, or if you aren't making recursive calls you could even name it <code>foo</code></p>
<p>The same could apply to normal arguments, just with no leading slash:</p>
<pre><code>foo: function [
    x/bar [block!]
    /x/all "foo all the bars"
][
    ...
]
</code></pre>
<p>So that would leave <code>bar</code> bound as-it-was in the body, vs. binding it to the <code>bar</code> argument.</p>
          <p><a href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/1</link>
        <pubDate>Thu, 23 May 2019 14:22:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1167-1</guid>
        <source url="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss">Idea for Naming Function Arguments Out of the Way</source>
      </item>
  </channel>
</rss>
