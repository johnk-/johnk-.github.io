<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Idea for Naming Function Arguments Out of the Way</title>
    <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167</link>
    <description>As part of Rebol&#39;s contention-for-short-names problem, there are many instances where refinements have names like /ALL where they conflict with common natives or lib functions.

When this happens, I tend to do something to name them out of the way and put the lib function back:

    foo: function [
        bar [block!]
        /all &quot;foo all the bars&quot;
    ][
        all_FOO: all
        all: :lib.all
        ...
    ]

Clearly we need a better pattern.

Maybe there could be two features that work together on this.  One would be the ability to ask that the function&#39;s frame be passed in as a variable, and another would be to suppress binding of an argument in the body.

    foo: function [
        bar [block!]
        /.all &quot;foo all the bars&quot;
        &lt;frame&gt; f
    ][
        all [...]  ; would be the ALL from LIB
        if f.all [print &quot;Fooing all the bars&quot;]
    ]

It&#39;s already kind of necessary to be able to get the FRAME! of a function into a variable *(asking for **binding of &#39;return** is clunky, and you have no way of doing it with a lambda that has no parameters or locals)*.  Then the dot could mark arguments as being &quot;member-access-only&quot; via the dot.

I think this is better than trying to name things out of the way.  It could work for normal arguments too:

    foo: function [
        .bar [block!]
        /.all &quot;foo all the bars&quot;
        &lt;frame&gt; f
    ][
        ; use f.bar and f.all, with BAR and ALL left as-is
    ]

It might not be the most beautiful thing in the world, but this is a real problem that is very frustrating when it comes up.  And when you encourage people to play with words, they shouldn&#39;t be afraid to reuse them in refinements if they make sense.

The only qualm I might have would be conflict with other meanings of BLANK!-headed TUPLE!s, but so far it seems like inertness is what we&#39;ve got.

Objections?  Better ideas?  :cricket: :cricket:</description>
    
    <lastBuildDate>Sat, 20 Aug 2022 10:27:35 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Idea for Naming Function Arguments Out of the Way</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>While reading this, I had the thought, that tuples might be useful here, so I think this is in support of your idea.<br>
I'm a bit surprised at how integral tuples seem to become to the features of whatever ren-c morphs into <img src="https://forum.rebol.info/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> as tuples have been one of the lesser useful datatypes of Rebol (at least to me).</p>
          <p><a href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/6</link>
        <pubDate>Sun, 27 Sep 2020 13:21:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1167-6</guid>
        <source url="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss">Idea for Naming Function Arguments Out of the Way</source>
      </item>
      <item>
        <title>Idea for Naming Function Arguments Out of the Way</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As part of Rebol's contention-for-short-names problem, there are many instances where refinements have names like /ALL where they conflict with common natives or lib functions.</p>
<p>When this happens, I tend to do something to name them out of the way and put the lib function back:</p>
<pre><code>foo: function [
    bar [block!]
    /all "foo all the bars"
][
    all_FOO: all
    all: :lib.all
    ...
]
</code></pre>
<p>Clearly we need a better pattern.</p>
<p>Maybe there could be two features that work together on this.  One would be the ability to ask that the function's frame be passed in as a variable, and another would be to suppress binding of an argument in the body.</p>
<pre><code>foo: function [
    bar [block!]
    /.all "foo all the bars"
    &lt;frame&gt; f
][
    all [...]  ; would be the ALL from LIB
    if f.all [print "Fooing all the bars"]
]
</code></pre>
<p>It's already kind of necessary to be able to get the FRAME! of a function into a variable <em>(asking for <strong>binding of 'return</strong> is clunky, and you have no way of doing it with a lambda that has no parameters or locals)</em>.  Then the dot could mark arguments as being "member-access-only" via the dot.</p>
<p>I think this is better than trying to name things out of the way.  It could work for normal arguments too:</p>
<pre><code>foo: function [
    .bar [block!]
    /.all "foo all the bars"
    &lt;frame&gt; f
][
    ; use f.bar and f.all, with BAR and ALL left as-is
]
</code></pre>
<p>It might not be the most beautiful thing in the world, but this is a real problem that is very frustrating when it comes up.  And when you encourage people to play with words, they shouldn't be afraid to reuse them in refinements if they make sense.</p>
<p>The only qualm I might have would be conflict with other meanings of BLANK!-headed TUPLE!s, but so far it seems like inertness is what we've got.</p>
<p>Objections?  Better ideas?  <img src="https://forum.rebol.info/images/emoji/twitter/cricket.png?v=12" title=":cricket:" class="emoji" alt=":cricket:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/cricket.png?v=12" title=":cricket:" class="emoji" alt=":cricket:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167/1</link>
        <pubDate>Thu, 23 May 2019 14:22:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1167-1</guid>
        <source url="https://forum.rebol.info/t/idea-for-naming-function-arguments-out-of-the-way/1167.rss">Idea for Naming Function Arguments Out of the Way</source>
      </item>
  </channel>
</rss>
