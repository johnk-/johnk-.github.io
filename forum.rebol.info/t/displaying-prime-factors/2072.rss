<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Displaying Prime Factors</title>
    <link>https://forum.rebol.info/t/displaying-prime-factors/2072</link>
    <description>Displaying the Prime factors of an integer.
On rebol.org [this oneliner script](http://www.rebol.org/view-script.r?script=oneliner-prime-factors.r) by Sunanda can be found. 
I needs slight **mod** ification to work on REN-C. And with a bit of realigning and getting rid of the abbreviation for &#39;append we arrive at this function.

    prime-factors: function [n [integer!]][
        m: 2 
        s: 1 
        a: copy[]
        until[
            either n mod m = 0 [
                n: n / m 
                append a m
            ][
                m: m + s 
                s: 2
            ]
            if 1. * m * m &gt; n [
                append a n 
                n: 1
            ]
             n = 1
        ]
        a
    ] 

Where it is to be noted that n should be &gt;= 2 and the maximum size will also be limited</description>
    
    <lastBuildDate>Fri, 08 Dec 2023 08:20:42 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/displaying-prime-factors/2072.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Displaying Prime Factors</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Four years later, I've <a href="https://github.com/metaeducation/ren-c/blob/master/tests/examples/prime-factors.test.reb">added this to the tests</a>.</p>
<p>Small changes needed:</p>
<pre><code>if 1. * m * m &gt; n [
    append a n 
    n: 1
]
</code></pre>
<p>A new thing is that <strong><code>1.</code></strong> is a tuple now.  If you want the decimal number, you have to write <strong><code>1.0</code></strong></p>
<pre><code>&gt;&gt; length of 1.
== 2

&gt;&gt; first 1.
== 1

&gt;&gt; second 1.
== _

&gt;&gt; to block! 1.
== [1 _]
</code></pre>
<p>The rationale behind this is that the dialecting part is more useful.  If you want to write something like:</p>
<pre><code> my-dialect: [
     1. {First things first}
     2. {Second things second}
 ]
</code></pre>
<p>Then having them be TUPLE! preserves the notation.  If they were LOAD-ed as decimal numbers then they would be canonized as 1.0 and 2.0 in subsequent molds, and you'd lose the distinction between 1. and 1.0</p>
<p>(By the same token, <strong>.1</strong> and <strong>.2</strong> are also TUPLE!, and if you want the decimals you should write 0.1 and 0.2)</p>
<p>Also the locals-gathering FUNCTION is deprecated.  There are simply too many dialect purposes for SET-WORD! that should not make locals.  So explicit <code>&lt;local&gt;</code> definitions or LETs are needed:</p>
<pre><code>prime-factors: func [n [integer!]][
    let m: 2 
    let s: 1 
    let a: copy[]
    ...
</code></pre>
<p>Eventually, FUNC is scheduled to be a synonym for FUNCTION.</p>
          <p><a href="https://forum.rebol.info/t/displaying-prime-factors/2072/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/displaying-prime-factors/2072/2</link>
        <pubDate>Fri, 08 Dec 2023 08:20:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2072-2</guid>
        <source url="https://forum.rebol.info/t/displaying-prime-factors/2072.rss">Displaying Prime Factors</source>
      </item>
      <item>
        <title>Displaying Prime Factors</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Displaying the Prime factors of an integer.<br>
On <a href="http://rebol.org">rebol.org</a> <a href="http://www.rebol.org/view-script.r?script=oneliner-prime-factors.r">this oneliner script</a> by Sunanda can be found.<br>
I needs slight <strong>mod</strong> ification to work on REN-C. And with a bit of realigning and getting rid of the abbreviation for 'append we arrive at this function.</p>
<pre><code>prime-factors: function [n [integer!]][
    m: 2 
    s: 1 
    a: copy[]
    until[
        either n mod m = 0 [
            n: n / m 
            append a m
        ][
            m: m + s 
            s: 2
        ]
        if 1. * m * m &gt; n [
            append a n 
            n: 1
        ]
         n = 1
    ]
    a
] 
</code></pre>
<p>Where it is to be noted that n should be &gt;= 2 and the maximum size will also be limited</p>
          <p><a href="https://forum.rebol.info/t/displaying-prime-factors/2072/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/displaying-prime-factors/2072/1</link>
        <pubDate>Thu, 30 Jan 2020 14:06:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2072-1</guid>
        <source url="https://forum.rebol.info/t/displaying-prime-factors/2072.rss">Displaying Prime Factors</source>
      </item>
  </channel>
</rss>
