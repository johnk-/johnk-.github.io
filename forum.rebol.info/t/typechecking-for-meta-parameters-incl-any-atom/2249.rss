<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Typechecking For ^META Parameters (incl. ANY-ATOM?)</title>
    <link>https://forum.rebol.info/t/typechecking-for-meta-parameters-incl-any-atom/2249</link>
    <description>I wanted to point out that typechecking a ^META parameter applies to the unescaped form.

So if you have a ^META argument which says it can accept something unstable like a PACK!, that is written as:

    func [^arg [integer! pack?]] [...]

...not...

    func [^arg [quoted-integer? quasi-pack?]] [...]

So although you are receiving the **arg** value in its quoted or quasi form, the type check is in the language of what it was before it was META&#39;d.

This raises a question about the meaning of **func [^arg [any-value?]] [...]**.  Does that encompass unstable antiforms as well as stable ones?

No.  And in fact, if you write that then you&#39;re using a meta parameter for no reason, because you&#39;re just getting the same thing you would have gotten if you had written:

    foo: func [arg [any-value?]] [
         arg: meta arg
         ...
    ]

So the parameter convention isn&#39;t giving you any special powers if you type check it as ANY-VALUE?.  Error antiforms will become abrupt failures if you try to pass them.  Multi-return packs will decay to their first element.  Etc.

To get anything special, your ^META parameter&#39;s type check has to allow some unstable antiforms.  If you want any and all of them, the term I&#39;ve been using is ANY-ATOM?

Alternative names welcome.  But Atom is short, and ties into the whole isotope metaphor.</description>
    
    <lastBuildDate>Wed, 04 Sep 2024 09:17:28 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/typechecking-for-meta-parameters-incl-any-atom/2249.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Typechecking For ^META Parameters (incl. ANY-ATOM?)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I wanted to point out that typechecking a ^META parameter applies to the unescaped form.</p>
<p>So if you have a ^META argument which says it can accept something unstable like a PACK!, that is written as:</p>
<pre><code>func [^arg [integer! pack?]] [...]
</code></pre>
<p>...not...</p>
<pre><code>func [^arg [quoted-integer? quasi-pack?]] [...]
</code></pre>
<p>So although you are receiving the <strong>arg</strong> value in its quoted or quasi form, the type check is in the language of what it was before it was META'd.</p>
<p>This raises a question about the meaning of <strong>func [^arg [any-value?]] [...]</strong>.  Does that encompass unstable antiforms as well as stable ones?</p>
<p>No.  And in fact, if you write that then you're using a meta parameter for no reason, because you're just getting the same thing you would have gotten if you had written:</p>
<pre><code>foo: func [arg [any-value?]] [
     arg: meta arg
     ...
]
</code></pre>
<p>So the parameter convention isn't giving you any special powers if you type check it as ANY-VALUE?.  Error antiforms will become abrupt failures if you try to pass them.  Multi-return packs will decay to their first element.  Etc.</p>
<p>To get anything special, your ^META parameter's type check has to allow some unstable antiforms.  If you want any and all of them, the term I've been using is ANY-ATOM?</p>
<p>Alternative names welcome.  But Atom is short, and ties into the whole isotope metaphor.</p>
          <p><a href="https://forum.rebol.info/t/typechecking-for-meta-parameters-incl-any-atom/2249/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/typechecking-for-meta-parameters-incl-any-atom/2249/1</link>
        <pubDate>Wed, 04 Sep 2024 09:17:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2249-1</guid>
        <source url="https://forum.rebol.info/t/typechecking-for-meta-parameters-incl-any-atom/2249.rss">Typechecking For ^META Parameters (incl. ANY-ATOM?)</source>
      </item>
  </channel>
</rss>
