<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Ideas About a More General Meaning for TRY</title>
    <link>https://forum.rebol.info/t/ideas-about-a-more-general-meaning-for-try/1912</link>
    <description>TRY was changed from a &quot;blank-in, null-out&quot; meaning to use definitional errors.  This allowed NULL to be both the input and the output...without risking inadvertently trapping errors from arbitrary depths.  You&#39;ll really be intercepting the error emitted by the function just called:

    &gt;&gt; first null
    ** Error: FIRST on NULL requires use of TRY

    &gt;&gt; try first null
    ; null

I mentioned something, which was that a &quot;You need a TRY&quot; ERROR! was actually able to carry a payload, saying what the TRY&#39;d outcome value should be.  *(The only rule would be that a function emitting such an error should not have any side effects if it emits one of these errors.)*

If we embrace this, it could really open the doors to what TRY means.  Various constructs could offer meanings for what the TRY actually does:

    &gt;&gt; unquote first [&#39;abc]
    == abc

    &gt;&gt; unquote first [def]
    ** Error: Can&#39;t Unquote Plain WORD!, use TRY if Intentional

    &gt;&gt; try unquote first [def]
    == def

I&#39;m sort of leaning to believing that this more general meaning of TRY may be much more interesting than the &quot;null propagating&quot; sense.  There&#39;s kind of an explosion of potential for the &quot;couldn&#39;t do what you asked me to do, but if that&#39;s what you meant...&quot; outcomes.

At one point I suggested it would be nice to be able to have a COLLECT that didn&#39;t actually KEEP anything return NULL, so it could be ELSE-reactive.  That meant if you really wanted an empty block, you&#39;d have to do something like **`any [collect [...], copy []]`** which was ugly.  But the error could hold a freshly-copied block to be the result of a TRY:

    &gt;&gt; collect [keep if false [&lt;not kept&gt;]]
    ** Error: COLLECT didn&#39;t KEEP anything, use TRY if intended

    &gt;&gt; try collect [keep if false [&lt;not kept&gt;]]
    == []

There are various technical reasons why ELSE can&#39;t be reactive to TRY-style errors.  One fairly important one would be that if you used ELSE with a branching construct, it wouldn&#39;t be able to tell the difference between a branch that had a TRY-error and no branch taken:

    &gt;&gt; case [true [unquote first [def]]] else [print &quot;Took branch, runs due to UNQUOTE&quot;]
    Took branch, runs due to UNQUOTE  ; this would be bad

But... maybe the trick could be that if you pass ELSE a function that takes an argument, it assumes that means you handle TRY-style errors?  (Because otherwise it could only be void/null... why take an arg?)

    &gt;&gt; (unquote first [def]) else arg -&gt; [print [&quot;TRY error&quot; arg]]
    TRY error def

It&#39;s a weird thought.  Anyway, just wanted to write up the TRY concept...</description>
    
    <lastBuildDate>Tue, 09 Aug 2022 13:28:03 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/ideas-about-a-more-general-meaning-for-try/1912.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Ideas About a More General Meaning for TRY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>TRY was changed from a "blank-in, null-out" meaning to use definitional errors.  This allowed NULL to be both the input and the output...without risking inadvertently trapping errors from arbitrary depths.  You'll really be intercepting the error emitted by the function just called:</p>
<pre><code>&gt;&gt; first null
** Error: FIRST on NULL requires use of TRY

&gt;&gt; try first null
; null
</code></pre>
<p>I mentioned something, which was that a "You need a TRY" ERROR! was actually able to carry a payload, saying what the TRY'd outcome value should be.  <em>(The only rule would be that a function emitting such an error should not have any side effects if it emits one of these errors.)</em></p>
<p>If we embrace this, it could really open the doors to what TRY means.  Various constructs could offer meanings for what the TRY actually does:</p>
<pre><code>&gt;&gt; unquote first ['abc]
== abc

&gt;&gt; unquote first [def]
** Error: Can't Unquote Plain WORD!, use TRY if Intentional

&gt;&gt; try unquote first [def]
== def
</code></pre>
<p>I'm sort of leaning to believing that this more general meaning of TRY may be much more interesting than the "null propagating" sense.  There's kind of an explosion of potential for the "couldn't do what you asked me to do, but if that's what you meant..." outcomes.</p>
<p>At one point I suggested it would be nice to be able to have a COLLECT that didn't actually KEEP anything return NULL, so it could be ELSE-reactive.  That meant if you really wanted an empty block, you'd have to do something like <strong><code>any [collect [...], copy []]</code></strong> which was ugly.  But the error could hold a freshly-copied block to be the result of a TRY:</p>
<pre><code>&gt;&gt; collect [keep if false [&lt;not kept&gt;]]
** Error: COLLECT didn't KEEP anything, use TRY if intended

&gt;&gt; try collect [keep if false [&lt;not kept&gt;]]
== []
</code></pre>
<p>There are various technical reasons why ELSE can't be reactive to TRY-style errors.  One fairly important one would be that if you used ELSE with a branching construct, it wouldn't be able to tell the difference between a branch that had a TRY-error and no branch taken:</p>
<pre><code>&gt;&gt; case [true [unquote first [def]]] else [print "Took branch, runs due to UNQUOTE"]
Took branch, runs due to UNQUOTE  ; this would be bad
</code></pre>
<p>But... maybe the trick could be that if you pass ELSE a function that takes an argument, it assumes that means you handle TRY-style errors?  (Because otherwise it could only be void/null... why take an arg?)</p>
<pre><code>&gt;&gt; (unquote first [def]) else arg -&gt; [print ["TRY error" arg]]
TRY error def
</code></pre>
<p>It's a weird thought.  Anyway, just wanted to write up the TRY concept...</p>
          <p><a href="https://forum.rebol.info/t/ideas-about-a-more-general-meaning-for-try/1912/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ideas-about-a-more-general-meaning-for-try/1912/1</link>
        <pubDate>Tue, 09 Aug 2022 13:28:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1912-1</guid>
        <source url="https://forum.rebol.info/t/ideas-about-a-more-general-meaning-for-try/1912.rss">Ideas About a More General Meaning for TRY</source>
      </item>
  </channel>
</rss>
