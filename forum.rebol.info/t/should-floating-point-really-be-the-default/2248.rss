<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should Floating Point Really Be The Default?</title>
    <link>https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248</link>
    <description>[In an issue on Red&#39;s GitHub](https://github.com/red/red/issues/3396#issuecomment-1654470030), Gregg gives this example:

    red&gt;&gt; n: 0  while [n &lt;= 0.3][print mold/all n  n: n + 0.1]
    0
    0.1
    0.2
    ; Huh?

    red&gt;&gt; n: 0  while [n &lt;= 3][print mold/all n  n: n + 1]
    0
    1
    2
    3
    ; OK. I&#39;m not crazy

    red&gt;&gt; n: 0  while [n &lt;= 0.4][print mold/all n  n: n + 0.1]
    0
    0.1
    0.2
    0.30000000000000004
    0.4
    ; What... Oh... How do I work around that?

Sure, you can point everyone to [&quot;What Every Computer Scientist Should Know About Floating Point Arithmetic&quot;](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html) and say it&#39;s not your problem.  I mean geez, it&#39;s only a mere 50 or 60 pages long.

But as Gregg says:

&gt; *&quot;Yes, we can explain it. Yes, not everyone will hit this. But [...] we don&#39;t just look like we&#39;re passing problems on and throwing our hands in the air, saying it&#39;s not our problem; it&#39;s part of our mission, and being empathetic to pain points is something people can hold up as examples of why *to* use Red, rather than why *not* to use Red.&quot;*

This makes me wonder about the choice to use floating point as a default.  Yes, it&#39;s in the hardware.  Yes you should be able to use them somehow.  But it may not be a fit for the language goals when considering examples like the above.  So I thought I&#39;d ask the AIs about it.

---

*Note: The MONEY! datatype in R3-Alpha is not an IEEE floating point.  [It&#39;s something Ladislav wrote](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/core/f-deci.c#L27):*

    Deci significands are 87-bit long, unsigned, unnormalized, stored in
    little endian order. (Maximal deci significand is 1e26 - 1, i.e. 26
    nines)

    Sign is one-bit, 1 means nonpositive, 0 means nonnegative.

    Exponent is 8-bit, unbiased.</description>
    
    <lastBuildDate>Wed, 04 Sep 2024 08:15:01 +0000</lastBuildDate>
    <category>Math</category>
    <atom:link href="https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should Floating Point Really Be The Default?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h1>
<a name="claude-1" class="anchor" href="https://forum.rebol.info#claude-1"></a>Claude</h1>
<hr>
<h2>
<a name="languages-with-alternative-decimal-representations-2" class="anchor" href="https://forum.rebol.info#languages-with-alternative-decimal-representations-2"></a>Languages with Alternative Decimal Representations</h2>
<ol>
<li>
<p><strong>Python</strong></p>
<ul>
<li>
<p>While Python uses floating-point numbers by default, it also provides a <code>Decimal</code> type in its standard library.</p>
</li>
<li>
<p>The <code>Decimal</code> type offers precise decimal representation and arithmetic.</p>
</li>
<li>
<p>Fate: Widely successful language, with the <code>Decimal</code> type being particularly useful in financial applications.</p>
</li>
</ul>
</li>
<li>
<p><strong>Julia</strong></p>
<ul>
<li>
<p>Julia uses floating-point by default but provides arbitrary-precision arithmetic via the <code>BigFloat</code> type.</p>
</li>
<li>
<p>It also offers a <code>Rational</code> type for exact representation of ratios.</p>
</li>
<li>
<p>Fate: Growing popularity in scientific computing and numerical analysis.</p>
</li>
</ul>
</li>
<li>
<p><strong>Scala</strong></p>
<ul>
<li>
<p>Scala, running on the JVM, inherits Java's <code>BigDecimal</code> class for arbitrary-precision decimal arithmetic.</p>
</li>
<li>
<p>Fate: Successful in both industry and academia, particularly for big data processing.</p>
</li>
</ul>
</li>
<li>
<p><strong>Haskell</strong></p>
<ul>
<li>
<p>Haskell provides a <code>Rational</code> type for exact representation of ratios.</p>
</li>
<li>
<p>It also has libraries for arbitrary-precision decimals.</p>
</li>
<li>
<p>Fate: Influential in programming language research and functional programming communities.</p>
</li>
</ul>
</li>
<li>
<p><strong>Erlang</strong></p>
<ul>
<li>
<p>Erlang uses arbitrary-precision integers by default and has a <code>rational</code> module for exact rational<br>
arithmetic.</p>
</li>
<li>
<p>Fate: Successful in telecommunications and distributed systems.</p>
</li>
</ul>
</li>
</ol>
<h2>
<a name="what-went-right-3" class="anchor" href="https://forum.rebol.info#what-went-right-3"></a>What Went Right</h2>
<ol>
<li>
<p><strong>Precision in Financial Applications</strong>: Languages offering exact decimal representations are preferred in financial and accounting applications where precision is crucial.</p>
</li>
<li>
<p><strong>Predictability</strong>: Alternative representations often provide more predictable behavior, avoiding surprises like the one demonstrated in the Rebol example.</p>
</li>
<li>
<p><strong>Ease of Understanding</strong>: For beginners, exact representations can be easier to understand and reason about.</p>
</li>
<li>
<p><strong>Flexibility</strong>: Many languages that offer alternative representations do so alongside floating-point, giving developers the choice based on their specific needs.</p>
</li>
</ol>
<h2>
<a name="what-went-wrong-or-challenges-faced-4" class="anchor" href="https://forum.rebol.info#what-went-wrong-or-challenges-faced-4"></a>What Went Wrong (or Challenges Faced)</h2>
<ol>
<li>
<p><strong>Performance</strong>: Exact representations and arbitrary-precision arithmetic are generally slower than hardware-supported floating-point operations.</p>
</li>
<li>
<p><strong>Memory Usage</strong>: Exact representations often require more memory, which can be a concern for large-scale applications or systems with limited resources.</p>
</li>
<li>
<p><strong>Compatibility</strong>: Deviating from the IEEE 754 standard (used for floating-point) can create interoperability issues with other systems and libraries.</p>
</li>
<li>
<p><strong>Learning Curve</strong>: Developers accustomed to floating-point may need to adjust their thinking and practices when working with alternative representations.</p>
</li>
</ol>
<h2>
<a name="conclusion-5" class="anchor" href="https://forum.rebol.info#conclusion-5"></a>Conclusion</h2>
<p>While floating-point remains the default in many languages due to its performance and hardware support, there's a growing recognition of its limitations. Languages that offer alternative representations, either as the default or as easily accessible options, provide developers with powerful tools to handle decimal arithmetic more precisely when needed. The success of these languages often comes from striking a balance between performance and precision, allowing developers to choose the right tool for their specific use case.</p>
          <p><a href="https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248/3</link>
        <pubDate>Wed, 04 Sep 2024 08:15:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2248-3</guid>
        <source url="https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248.rss">Should Floating Point Really Be The Default?</source>
      </item>
      <item>
        <title>Should Floating Point Really Be The Default?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h1>
<a name="chatgpt-1" class="anchor" href="https://forum.rebol.info#chatgpt-1"></a>ChatGPT</h1>
<hr>
<p>Languages that avoid using floating-point representation for decimal numbers typically do so to provide better precision for certain kinds of calculations, especially in financial and business applications where exact decimal representation is critical.</p>
<h3>
<a name="prominent-examples-of-languages-avoiding-floating-point-as-default-2" class="anchor" href="https://forum.rebol.info#prominent-examples-of-languages-avoiding-floating-point-as-default-2"></a>Prominent Examples of Languages Avoiding Floating-Point as Default:</h3>
<ol>
<li>
<p><strong>COBOL</strong>:</p>
<ul>
<li>
<p><strong>What Went Right</strong>: COBOL uses fixed-point decimal arithmetic by default, which is crucial for financial calculations where exact precision is necessary. This choice made COBOL a staple in business, finance, and government systems, where avoiding floating-point errors is essential.</p>
</li>
<li>
<p><strong>What Went Wrong</strong>: COBOL’s strict adherence to fixed-point arithmetic limited its applicability outside of these specific domains. It also meant that performance in non-financial contexts was slower compared to languages using floating-point arithmetic.</p>
</li>
</ul>
</li>
<li>
<p><strong>Rexx</strong>:</p>
<ul>
<li>
<p><strong>What Went Right</strong>: Rexx, designed for ease of use in scripting and text processing, also opts for fixed-point arithmetic by default. This choice made it easy to write scripts without worrying about floating-point imprecision.</p>
</li>
<li>
<p><strong>What Went Wrong</strong>: Rexx’s simplicity and fixed-point arithmetic made it less suitable for scientific and engineering applications where floating-point is necessary. As a result, its usage was limited to simpler scripting tasks.</p>
</li>
</ul>
</li>
<li>
<p><strong>Ada</strong>:</p>
<ul>
<li>
<p><strong>What Went Right</strong>: Ada offers both fixed-point and floating-point types, giving developers the choice based on the application's needs. For safety-critical and financial applications, fixed-point types are used to ensure precision.</p>
</li>
<li>
<p><strong>What Went Wrong</strong>: The flexibility came at the cost of complexity, as developers had to understand and choose the correct type for each use case. This complexity made Ada less popular than more straightforward languages like C or Python.</p>
</li>
</ul>
</li>
</ol>
<h3>
<a name="consequences-and-lessons-learned-3" class="anchor" href="https://forum.rebol.info#consequences-and-lessons-learned-3"></a>Consequences and Lessons Learned:</h3>
<ul>
<li>
<p><strong>Precision vs. Performance</strong>: Languages that prioritize precision over performance by avoiding floating-point as the default are often limited to domains where that precision is paramount. They may lack the versatility and speed of languages that embrace floating-point arithmetic.</p>
</li>
<li>
<p><strong>Adoption and Popularity</strong>: Fixed-point arithmetic can make a language less appealing for general-purpose programming, particularly in fields like scientific computing, graphics, and games where floating-point performance is critical.</p>
</li>
<li>
<p><strong>Niche Success</strong>: Languages that avoid floating-point arithmetic find success in niche areas where their precision is a strong advantage, but they struggle to gain traction outside those niches.</p>
</li>
</ul>
<h3>
<a name="modern-developments-4" class="anchor" href="https://forum.rebol.info#modern-developments-4"></a>Modern Developments:</h3>
<p>Some modern languages, like Python, attempt to bridge the gap by offering multiple numeric types (e.g., <code>float</code> and <code>decimal</code>) and making it easy to choose the right one for the job. However, this still requires developers to be aware of the underlying issues and make conscious decisions about numeric types.</p>
<p>In summary, while avoiding floating-point arithmetic can prevent certain types of errors, it also limits the language's applicability and performance in domains where floating-point is the appropriate tool. The success or failure of these languages often hinges on how well they serve their intended niche and how easily developers can adapt to or work around their limitations.</p>
          <p><a href="https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248/2</link>
        <pubDate>Wed, 04 Sep 2024 08:11:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2248-2</guid>
        <source url="https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248.rss">Should Floating Point Really Be The Default?</source>
      </item>
      <item>
        <title>Should Floating Point Really Be The Default?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a href="https://github.com/red/red/issues/3396#issuecomment-1654470030">In an issue on Red's GitHub</a>, Gregg gives this example:</p>
<pre><code>red&gt;&gt; n: 0  while [n &lt;= 0.3][print mold/all n  n: n + 0.1]
0
0.1
0.2
; Huh?

red&gt;&gt; n: 0  while [n &lt;= 3][print mold/all n  n: n + 1]
0
1
2
3
; OK. I'm not crazy

red&gt;&gt; n: 0  while [n &lt;= 0.4][print mold/all n  n: n + 0.1]
0
0.1
0.2
0.30000000000000004
0.4
; What... Oh... How do I work around that?
</code></pre>
<p>Sure, you can point everyone to <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">"What Every Computer Scientist Should Know About Floating Point Arithmetic"</a> and say it's not your problem.  I mean geez, it's only a mere 50 or 60 pages long.</p>
<p>But as Gregg says:</p>
<blockquote>
<p><em>"Yes, we can explain it. Yes, not everyone will hit this. But [...] we don't just look like we're passing problems on and throwing our hands in the air, saying it's not our problem; it's part of our mission, and being empathetic to pain points is something people can hold up as examples of why <em>to</em> use Red, rather than why <em>not</em> to use Red."</em></p>
</blockquote>
<p>This makes me wonder about the choice to use floating point as a default.  Yes, it's in the hardware.  Yes you should be able to use them somehow.  But it may not be a fit for the language goals when considering examples like the above.  So I thought I'd ask the AIs about it.</p>
<hr>
<p><em>Note: The MONEY! datatype in R3-Alpha is not an IEEE floating point.  <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/core/f-deci.c#L27">It's something Ladislav wrote</a>:</em></p>
<pre><code>Deci significands are 87-bit long, unsigned, unnormalized, stored in
little endian order. (Maximal deci significand is 1e26 - 1, i.e. 26
nines)

Sign is one-bit, 1 means nonpositive, 0 means nonnegative.

Exponent is 8-bit, unbiased.
</code></pre>
          <p><a href="https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248/1</link>
        <pubDate>Wed, 04 Sep 2024 08:10:49 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2248-1</guid>
        <source url="https://forum.rebol.info/t/should-floating-point-really-be-the-default/2248.rss">Should Floating Point Really Be The Default?</source>
      </item>
  </channel>
</rss>
