<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Joe Marshall on Rebol</title>
    <link>https://forum.rebol.info/t/joe-marshall-on-rebol/2074</link>
    <description>Circa 2008, [this is what Joe Marshall wrote about Rebol Binding](http://arcanesentiment.blogspot.com/2008/08/better-rebol-info.html) in a comment on a blog called *&quot;Arcane Sentiment&quot;*.

&gt; The binding model I used for Rebol 1.0 was basically a standard implementation of lexical binding. A lexical environment was carried around by the interpreter and when values were needed they were looked up. The only twist was that Carl wanted symbol instances to have lexical scope. So suppose you had this rebol function:
&gt;
&gt;     func [a] [ return &#39;a ]
&gt;
&gt; The symbol that is returned can be evaluated in any context and it will return the value that was passed in to func. The trick was to close over the symbol. I had to tweak some of the other symbol routines to deal with this idea of closed over symbols, but it worked. (I don&#39;t think it was a good idea, but it was easy to implement.)
&gt;
&gt; He wanted it to be the case that if you forced the evaluation of a symbol or block that you&#39;d get the lexically scoped value. So you could return a block as a list of tokens and then call `do&#39; on it and run it as if it were a delayed value. That&#39;s an interesting idea, but extending it to symbols themselves is probably going too far.
&gt;
&gt; Carl never seemed to `get&#39; how lexical environments work. The shape of the environment is constant from invocation to invocation, and this is how you get lexical addressing, but the *instance* of the environment changes.
&gt;
&gt; When Carl ditched my code he went back to his original plan of allocating a binding cell for each lexical mention of the symbol in the source text. Imagine your source is like a Christmas calendar with the chocolate goodies behind each date. Behind each binding location is a box where the value is stored. This model has bizarre semantics. The first (and most obvious) problem is that it isn&#39;t re-entrant. If you recursively call a function, you&#39;ll end up smashing the values that are there for the outer invocation. The first release of Rebol 2.0 had this bug.
&gt;
&gt; Carl patched this up with the following hack. If a cell is unbound, then binding it causes it to be assigned a value. If the cell already has a value, that value is saved away on the stack while the function is called, and then restored to the cell when the function returns. That fixes the re-entrancy problem, but you still have other issues.
&gt;
&gt; The mechanism of saving the old binding away on the stack is plain-old bog-simple shallow dynamic scoping. But because Carl has a value cell for each binding site, rather than a single global cell, you only see the dynamic binding effect within a single function at a time. This makes it less likely that you&#39;ll suffer from inadvertant variable capture, but it doesn&#39;t eliminate it completely.
&gt;
&gt; Carl&#39;s hack of leaving the previous binding in place if the cell was unbound before gives you a strange effect that variables can be used for some time after they are bound. Unfortunately, if a call to the routine that bound them occurs, the value gets smashed. This is `indefinite extent&#39; in the truest sense --- you simply can&#39;t tell how long the variable will retain its value.
&gt;
&gt; So Carl&#39;s binding methodology is a weird cross behind static binding, where each formal parameter has its own value cell, and shallow dynamic binding where the value is saved on the stack when a function is re-entered.
&gt;
&gt; Carl&#39;s implementation has one other weird feature. If you copy a block of code, you also end up copying the value cells that are associated with the bindings in the code. Some rather enterprising Rebolers have used this trick to implement a `poor-man&#39;s lexical binding&#39; by unsharing the dynamically bound value cells before leaving a function and thus getting the value to persist.</description>
    
    <lastBuildDate>Mon, 11 Dec 2023 03:29:27 +0000</lastBuildDate>
    <category>Foreign Inspiration</category>
    <atom:link href="https://forum.rebol.info/t/joe-marshall-on-rebol/2074.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Joe Marshall on Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So it seems pretty clear that Joe was not a good fit for looking at the problems posed by Rebol, because <em>he just didn't really like the idea</em>.  For starters, <a href="https://groups.google.com/g/comp.lang.lisp/c/vWfjkdG0lME/m/K48slCehF1AJ">a post on comp.lang.lisp</a> suggests that Joe was opposed on principle to Rebol's parentheses-less-ness:</p>
<blockquote>
<p>[Not using parentheses] turns out to be a bad idea. Not only does it greatly complicate the interpreter and compiler, it turns out to be rather <em>un</em>readable in practice. As an example, here is a line from the REBOL BBS tutorial:</p>
<pre><code>update-topic topic-id length? msgs first last msgs
</code></pre>
<p>Certainly REBOL knows how many arguments each function takes (and which of those identifiers refer to functions), but if <em>you</em> don't know, you can't parse it.</p>
</blockquote>
<p>He drafted an initial implementation of the language, and then walked.  It would seem he lacks interest in studying what came later--e.g. <a href="https://forum.rebol.info/t/introducing-the-hackable-usermode-parse-uparse/1529">to find the potential in something like the PARSE dialect</a>--given he never mentions it or any other dialect.</p>
<p>A <a href="https://github.com/akavel/sherman">note on his Rebol-to-Scheme compiler</a> says:</p>
<blockquote>
<p>Carl abandoned my implementation after I left Rebol Technologies. He completely rewrote the interpreter and, in the process, substantially changed the semantics of the language. Rebol 2.0 is a quirky and bizarre language. I don't see any opportunity in the language so I never tried to write a compiler for Carl's semantics. Rebol seems to still be popular in France, but I think the company has shrunk down to be just Carl and his wife.</p>
</blockquote>
<p>I suppose that in his mind, whatever you implement on top of Rebol 2.0+'s shaky foundations is going to be lousy--and if there are any interesting ideas, they should be done in a better language.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
<p>On his blog, "Abstract Heresies", <a href="https://funcall.blogspot.com/2023/06/tail-recursion-in-rebol.html">Joe has another explanation of the Lisp implementation mechanics</a>.  After describing it, he remarks:</p>
<blockquote>
<p>With it’s Polish notation, tail recursion, and first-class continuations, REBOL was described as an unholy cross between TCL and Scheme. “The result of Outsterhout and Sussman meeting in a dark alley.”</p>
<p>Current versions of REBOL use a simplified interpreter that does not support tail recursion or first-class continuations.</p>
</blockquote>
<h2>
<a name="a-trivial-program-walked-through-in-sherman-1" class="anchor" href="https://forum.rebol.info#a-trivial-program-walked-through-in-sherman-1"></a>A Trivial Program Walked Through in "Sherman"</h2>
<p>Joe published the sources for something called "Sherman".  It isn't Rebol 1.0 but was claimed to clone some amount of it.  Sherman requires a very old version of Scheme to run, and that version only runs on 32-bit machines.  Modernizing it is not a good use of anyone's time, but fortunately Windows still runs old 32-bit EXEs... so <a href="https://github.com/akavel">GitHub user akavel</a> pieced together the steps.</p>
<p>For a start, let's see how Joe conceived of transforming Rebol source code into Scheme for a program called <code>trivial.r</code>:</p>
<pre><code>rebol []

declare [standard-definitions]

foo: func [a] [a + 3]
print "Hello world!"
prin "3 + 3 ="
print foo 3
</code></pre>
<p>In Step One, he uses <a href="https://en.wikipedia.org/wiki/Flex_(lexical_analyser_generator)">a tool called Flex</a>  (Fast Lexical Analyzer) to <em>"translate a language like REBOL into a fully parenthesized notation."</em>  The small specification <a href="https://github.com/hostilefork/sherman/blob/master/R2S.L">R2S.L</a> would turn the above into this:</p>
<pre><code>`(SHERMAN ,(LIST-&gt;BLOCK `(,(LIST-&gt;BLOCK `())
declare ,(LIST-&gt;BLOCK `(standard-definitions ))
foo: func ,(LIST-&gt;BLOCK `(a)) ,(LIST-&gt;BLOCK `(a + 3))
print "Hello world!"
prin "3 + 3 ="
print foo 3
))) ;; END of SHERMAN CODE
</code></pre>
<p>This transformed the code enough so that Scheme could load it for further processing.  Here all it did was get rid of the unloadable square brackets and turn them into parentheses that are tagged as LIST-&gt;BLOCK.  But other transformations would turn literals like <strong>12-Dec-2012</strong> into labeled strings like <strong>,(SHERMAN-DATE "12-Dec-2012")</strong>.  It did some amount of validation in the process...but not exhaustive, so you could still get some invalid representations that would have to be caught by the runtime.</p>
<p>The next step of transformation makes something that Scheme can execute...although it isn't written in a way that any Scheme programmer would write code.  It's just using the language as a runtime/bytecode, and so it looks like what you get from a disassembler:</p>
<pre><code>(#%define-values (foo) (#%values #f))
(#%begin
  (#%list-&gt;block (list))
  (#%set! foo
    (#%lambda (a)
      (#%if (#%procedure? a)
        (#%case (#%arity a)
          ((0) (+ (a) 3))
          (else (#%error "Too few arguments." (#%quote a))))
        (+ a 3))))
  (print "Hello world!")
  (prin "3 + 3 =")
  (#%if (#%procedure? foo)
    (#%case (#%arity foo)
      ((0) (#%begin (print (foo))))
      ((1) (print (foo 3)))
      (else (#%error "Too few arguments." (#%quote foo))))
    (#%begin (print foo))))
</code></pre>
<p>Notice that where a WORD! occurs the compiled form has a fixed number of switches on the arity.  You have <strong>foo: func [a] [a + 3]</strong>, and when it hits the <strong>a</strong> in the body it checks to see if it's a function...and if it is, then it enforces that it takes no arguments since it's on the left of the plus sign and invokes it.  Note that invocation in Lisp means putting a symbol at the head of non-quoted parentheses, so <strong>(a)</strong> is a "function call" in <strong>(+ (a) 3)</strong>.</p>
<p>But what would this do if you said <strong>foo: func [a] [a 10 20 30]</strong>?  Does it handle arity-0 or arity-1 or arity-2 or arity-3 or error?  The answer is...yes:</p>
<pre><code>  (#%if (#%procedure? a)
    (#%case (#%arity a)
      ((0) (#%begin (a) none))
      ((1) (#%begin (a 10) none))
      ((2) (#%begin (a 10 20)))
      ((3) (a 10 20 30))
      (else (#%error "Too few arguments." (#%quote a))))
    (#%begin a none))))
</code></pre>
<p>The approach is completely unfit for the language design.  Let's say you wrote something like:</p>
<pre><code>foo: func [a b] [
   if a = b [alpha a b] else [alpha b a beta a b]
]
</code></pre>
<p>You'd start with a hardcoded switch statement to cover the case where <strong>if</strong> is anywhere from arity-0 to arity-6 to consume everything in the body.  Then for each of those branches, you'd have the combinatorial explosion... the arity-6 case has to consider if <strong>a</strong> is arity-0 to arity-5, but so does the arity-5 case.</p>
<p>The explosion is pathological.  Just to show how nuts it is, let's change it to <strong>foo: func [a] [a a a a]</strong>.  The result is so big I'm just going to paste a picture of it broken into columns:</p>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/05392c4197eb8c18ce5def7c2ad612779019a9f6.png" data-download-href="https://forum.rebol.info/uploads/default/05392c4197eb8c18ce5def7c2ad612779019a9f6" title="image"><img src="https://forum.rebol.info/uploads/default/original/1X/05392c4197eb8c18ce5def7c2ad612779019a9f6.png" alt="image" data-base62-sha1="KcSxsUQKxHzkbuOzuXQRGBRzfw" width="690" height="334" data-dominant-color="EBEBEB"></a></div><p></p>
<h2>
<a name="putting-sherman-in-context-2" class="anchor" href="https://forum.rebol.info#putting-sherman-in-context-2"></a>Putting Sherman In Context</h2>
<p>This isn't something Joe doesn't know about.  On MIT's "Lightweight Languages" mailing list post, <a href="http://ll1.ai.mit.edu/">Joe had this remark</a></p>
<blockquote>
<p>I wrote the Rebol 1.0 interpreter.  (but left the company right afterwards)</p>
<p>Rebol is <em>extremely</em> difficult to compile in any meaningful sense.  Since the parse tree can change dynamically at runtime, there is a combinatoric explosion of code paths.  You can constrain things a bit by allowing the user to declare procedure arity, though.</p>
</blockquote>
<p>So what was the value of releasing a completely non-viable Rebol compiler?</p>
<p>Well first of all, we have to consider the fact that the sources are circa 1999.  Joe writes that he worked for Rebol technologies in the summer of 1998 and then they had a falling out in December...so not much of a long time.  Back then, just having something that lexically analyzed Rebol sources and turned it into Scheme was "<em>like</em> Rebol 1.0", in the sense that the "Ren" notation was just being defined.</p>
<p>He says of Sherman:</p>
<blockquote>
<p><em>"I decided to see if I couldn't write a compiler for the language. The main challenge is that the language is context-sensitive and parsing depends on runtime values. It isn't possible to build a useful abstract syntax tree at compile time because it is impossible to determine the role each identifier plays until it's value is known. Furthermore, an identifier may indicate a variable at some times or a function call at others."</em></p>
<p><em>"The trick of Sherman is to simply generate the control flow for all the parse options and dispatch to the correct one at runtime. This makes a combinatorical explosion, but it is possible to prune the control flow tree if the compiler can make assumptions about certain identifiers."</em></p>
</blockquote>
<p>So it's an experiment... which hinges on knowing in advance the arity of some symbols.  It would generally seem you'd have to hybridize an evaluative approach vs. compiling if you didn't know the arity...as even super short examples like the <strong>[a a a a]</strong> above are prohibitive.  But if you were already putting in some amount of compilation then maybe cases like <strong>[a 1]</strong> are worth compiling.</p>
<p>But by all accounts, the actual Rebol 1.0 was interpreted in a way we would think of today.  However one focus was he thought it was a requirement for Rebol to be stackless.  He didn't think you could solve it by writing a few native functions like IF and WHILE in C to get them to use less stack: some stack is still consumed, and users will still be writing their own loops and control constructs.  Of course I agree (<a href="https://forum.rebol.info/t/stackless-is-here-today-now/1844">and Ren-C is stackless</a>), but I can imagine that Carl's desire for expedience vs. doing continuations would be a point of conflict.</p>
<h2>
<a name="general-agreement-on-binding-3" class="anchor" href="https://forum.rebol.info#general-agreement-on-binding-3"></a>General Agreement On Binding</h2>
<p>I've given my heavy criticism of R3-Alpha's binding model, and it's hard to imagine that it used to be even worse.  But it sounds like it was.</p>
<p>I don't think there's anything particularly new to be covered in Joe's opinions that I haven't already summarized in the Lisp/Scheme point of view...Rebol is sloppy and slow, and tries to let you do more weird eval operations when the whole culture has been trying to minimize the use of arbitrary eval at all:</p>
<p><a href="https://forum.rebol.info/t/lisps-kernel-clojure-limits-of-code-is-data-and-data-is-code/2060" class="inline-onebox">Lisps, Kernel, Clojure: limits of "Code is Data and Data is Code"</a></p>
<p>But I do think there are interesting things to see if you're not going to be entrenched too deeply in your idea of what a homoiconic language needs to be.  Of course I think most of the <em>non-trivially interesting</em> things in the medium are Ren-C-isms... but they owe their existence to having meditated on questions that arose from this weirder/looser direction of working with code.</p>
          <p><a href="https://forum.rebol.info/t/joe-marshall-on-rebol/2074/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/joe-marshall-on-rebol/2074/2</link>
        <pubDate>Mon, 11 Dec 2023 01:52:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2074-2</guid>
        <source url="https://forum.rebol.info/t/joe-marshall-on-rebol/2074.rss">Joe Marshall on Rebol</source>
      </item>
      <item>
        <title>Joe Marshall on Rebol</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Circa 2008, <a href="http://arcanesentiment.blogspot.com/2008/08/better-rebol-info.html">this is what Joe Marshall wrote about Rebol Binding</a> in a comment on a blog called <em>"Arcane Sentiment"</em>.</p>
<blockquote>
<p>The binding model I used for Rebol 1.0 was basically a standard implementation of lexical binding. A lexical environment was carried around by the interpreter and when values were needed they were looked up. The only twist was that Carl wanted symbol instances to have lexical scope. So suppose you had this rebol function:</p>
<pre><code>func [a] [ return 'a ]
</code></pre>
<p>The symbol that is returned can be evaluated in any context and it will return the value that was passed in to func. The trick was to close over the symbol. I had to tweak some of the other symbol routines to deal with this idea of closed over symbols, but it worked. (I don't think it was a good idea, but it was easy to implement.)</p>
<p>He wanted it to be the case that if you forced the evaluation of a symbol or block that you'd get the lexically scoped value. So you could return a block as a list of tokens and then call `do' on it and run it as if it were a delayed value. That's an interesting idea, but extending it to symbols themselves is probably going too far.</p>
<p>Carl never seemed to `get' how lexical environments work. The shape of the environment is constant from invocation to invocation, and this is how you get lexical addressing, but the <em>instance</em> of the environment changes.</p>
<p>When Carl ditched my code he went back to his original plan of allocating a binding cell for each lexical mention of the symbol in the source text. Imagine your source is like a Christmas calendar with the chocolate goodies behind each date. Behind each binding location is a box where the value is stored. This model has bizarre semantics. The first (and most obvious) problem is that it isn't re-entrant. If you recursively call a function, you'll end up smashing the values that are there for the outer invocation. The first release of Rebol 2.0 had this bug.</p>
<p>Carl patched this up with the following hack. If a cell is unbound, then binding it causes it to be assigned a value. If the cell already has a value, that value is saved away on the stack while the function is called, and then restored to the cell when the function returns. That fixes the re-entrancy problem, but you still have other issues.</p>
<p>The mechanism of saving the old binding away on the stack is plain-old bog-simple shallow dynamic scoping. But because Carl has a value cell for each binding site, rather than a single global cell, you only see the dynamic binding effect within a single function at a time. This makes it less likely that you'll suffer from inadvertant variable capture, but it doesn't eliminate it completely.</p>
<p>Carl's hack of leaving the previous binding in place if the cell was unbound before gives you a strange effect that variables can be used for some time after they are bound. Unfortunately, if a call to the routine that bound them occurs, the value gets smashed. This is `indefinite extent' in the truest sense --- you simply can't tell how long the variable will retain its value.</p>
<p>So Carl's binding methodology is a weird cross behind static binding, where each formal parameter has its own value cell, and shallow dynamic binding where the value is saved on the stack when a function is re-entered.</p>
<p>Carl's implementation has one other weird feature. If you copy a block of code, you also end up copying the value cells that are associated with the bindings in the code. Some rather enterprising Rebolers have used this trick to implement a `poor-man's lexical binding' by unsharing the dynamically bound value cells before leaving a function and thus getting the value to persist.</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/joe-marshall-on-rebol/2074/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/joe-marshall-on-rebol/2074/1</link>
        <pubDate>Mon, 18 Aug 2008 04:00:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2074-1</guid>
        <source url="https://forum.rebol.info/t/joe-marshall-on-rebol/2074.rss">Joe Marshall on Rebol</source>
      </item>
  </channel>
</rss>
