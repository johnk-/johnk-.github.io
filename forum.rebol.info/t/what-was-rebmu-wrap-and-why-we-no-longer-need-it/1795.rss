<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What was REBMU-WRAP (and why we no longer need it)</title>
    <link>https://forum.rebol.info/t/what-was-rebmu-wrap-and-why-we-no-longer-need-it/1795</link>
    <description>As I bring the Rebmu dialect up to date I&#39;ll try and talk about any teachable moments that it provides.

Let&#39;s look at one of the earliest weird functions, REBMU-WRAP:

    rebmu-wrap: function [refined [path!] args [block!]] [
        func args compose [
            (refined) (args)
        ]
    ]

It was designed to make it (slightly) easier to define something like `APO` as a synonym for `APPEND/ONLY`.

    APO: rebmu-wrap &#39;append/only [series value]

So that turns into effectively:

    APO: func [series value] [
        append/only series value
    ]

**Basically this was an incredibly weak way to save a few characters while making a partial specialization.**  Some of its weaknesses:

1. You still have to specify the number and names of arguments the specialization takes.

2. If you make a mistake at the time of definition (like mentioning an unavailable refinement) you don&#39;t get the error until the call.

3. The other refinements are missing from the wrapped function, e.g. you can&#39;t invoke `apo/part` or `apo/dup`.

4. You don&#39;t inherit anything about the original function&#39;s parameter conventions; e.g. if an argument were quoted you&#39;d get the parameter name word you passed for it.

5. Performance-wise you generate a whole new function call...path evaluation...argument evaluation...

6. Your new function doesn&#39;t have any HELP... etc. etc.

## How To Make This Better in Classical &quot;Redbol&quot;?

Let&#39;s put yourself in the mind of someone thinking about how I was at that time, *who wanted to use the same strategy but merely address (1) and (2)*.  So to be able to write the slightly shorter hand:

    APO: rebmu-wrap &#39;append/only
    APD: rebmu-wrap &#39;append/dup
    APDP: :rebmu-wrap &#39;append/dup/part
    APPD: :rebmu-wrap &#39;append/part/dup  ; ...etc.

This version of REBMU-WRAP would need to analyze the spec, presumably with WORDS-OF:

    r3-alpha&gt;&gt; words-of :append
    == [series value /part length /only /dup count]

So you might try something like the following nightmare...**which took me at least an hour to write and debug!** (probably more like two, because of the glitch of trying to mutate the spec in place and needing to notice when the insertion position matches the position a refinement argument is being moved from):

    rebmu-wrap: func [refined [path!] /local spec body pos insert-pos item] [
        if not any-function? (action: get first refined) [
            do make error! &quot;first element of path must refer to a function&quot;
        ]
        spec: words-of :action
        body: reduce [refined]
        insert-pos: spec  ; find where refinement args should be inserted
        while [all [not tail? insert-pos not refinement? insert-pos/1]][
            append body insert-pos/1
            insert-pos: next insert-pos
        ]
        foreach refinement-name (next refined) [
            if not pos: find spec to-refinement refinement-name [
                do make error! &quot;missing or duplicate refinement specified&quot;
            ]
            take pos  ; drop refinement from spec
            while [all [not tail? pos not refinement? pos/1 pos != insert-pos]] [
                 insert-pos: insert insert-pos item: take pos
                 append body item
            ]
        ]
        func ?? spec ?? body
    ]

If you try this in R3-Alpha, yes it does indeed work for (1) and (2). I put in the probes so you can see the spec and body of the new function:

    r3-alpha&gt;&gt; apo: rebmu-wrap &#39;append/only
    spec: [series value /part length /dup count]
    body: [append/only series value]

    r3-alpha&gt; apd: rebmu-wrap &#39;append/dup
    spec: [series value count /part length /only]
    body: [append/dup series value count]

    r3-alpha&gt;&gt; apdp: rebmu-wrap &#39;append/dup/part
    spec: [series value count length /only]
    body: [append/dup/part series value count]

    r3-alpha&gt;&gt; appd: rebmu-wrap &#39;append/part/dup
    spec: [series value count length /only]
    body: [append/part/dup series value count]

It gets a head-start on (3) by leaving the refinements that haven&#39;t been partially specialized on the spec, but they&#39;re ignored in the call.

## That&#39;s A Lot Of Work for Something That Still Sucks! :nauseated_face:

When you think of everything it entails to get (3) and (4), you are going to either need to COMPOSE your invocation on each call -or- change methodology to use APPLY.  But even if you are aware of APPLY it doesn&#39;t make this a trivial exercise, and doesn&#39;t help with (5) or (6).

**...and this is why I never even tried to write such things (before)... instead trying to add core interpreter features for partial specialization.**

## The Happy New World of Partial Specialization :sun_with_face:   

In today&#39;s Ren-C, all you have to do is get a function as a path, and you have (1) (2) (3) (4) (5).

    ren-c&gt;&gt; ap: :append
     == #[action! {ap} [series value /part /dup /line /only]]

    ren-c&gt;&gt; ap [a b c] [d e]
    == [a b c d e]

    ren-c&gt;&gt; apo: :append/only
    == #[action! {apo} [series value /part /dup /line]]

    ren-c&gt;&gt; apo [a b c] [d e]
    == [a b c [d e]]

    ren-c&gt;&gt; apo/dup [a b c] [d e] 2  ; e.g. demonstrating (3)
    == [a b c [d e] [d e]]

The new function call is just as efficient as the original (you might think of it moreso since there&#39;s no path processing, e.g. **apo** is faster than invoking **ap/only**!)

You don&#39;t get the HELP inherited automatically (it has an associated cost), but there is a function that will do it if you want to... you say **inherit-meta :apo :append** and then **help apo** will have the help strings copied into its meta information.

So that&#39;s some assistance with (6), but do remember that it&#39;s not a perfect world when talking about how to automatically write meaningful adjusted help.  If any parameter descriptions refer to the argument you specialized out, it&#39;s no longer on the interface, so they may not make sense!

*(Note: Now that refinements are their own arguments, you can&#39;t tell by parameter list alone if a refinement is a 0 or 1 arg case.  It&#39;s determined by the typeset: if the typeset is empty--no types accepted--it is a 0 arg refinement.  Something to ponder if this can be done better, but see all the other nice things...like caching the label of the function name for stack traces, etc.)*

## So long, REBMU-WRAP...

...but I wanted to write this up just to show a good example of how early experiences playing with Rebmu led me to question Rebol, and want to shore up its abilities.

&gt; &quot;Beware of the Turing tar-pit in which **everything is possible but nothing of interest is easy**.&quot;</description>
    
    <lastBuildDate>Mon, 07 Mar 2022 06:06:27 +0000</lastBuildDate>
    <category>Rebmu</category>
    <atom:link href="https://forum.rebol.info/t/what-was-rebmu-wrap-and-why-we-no-longer-need-it/1795.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What was REBMU-WRAP (and why we no longer need it)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As I bring the Rebmu dialect up to date I'll try and talk about any teachable moments that it provides.</p>
<p>Let's look at one of the earliest weird functions, REBMU-WRAP:</p>
<pre><code>rebmu-wrap: function [refined [path!] args [block!]] [
    func args compose [
        (refined) (args)
    ]
]
</code></pre>
<p>It was designed to make it (slightly) easier to define something like <code>APO</code> as a synonym for <code>APPEND/ONLY</code>.</p>
<pre><code>APO: rebmu-wrap 'append/only [series value]
</code></pre>
<p>So that turns into effectively:</p>
<pre><code>APO: func [series value] [
    append/only series value
]
</code></pre>
<p><strong>Basically this was an incredibly weak way to save a few characters while making a partial specialization.</strong>  Some of its weaknesses:</p>
<ol>
<li>
<p>You still have to specify the number and names of arguments the specialization takes.</p>
</li>
<li>
<p>If you make a mistake at the time of definition (like mentioning an unavailable refinement) you don't get the error until the call.</p>
</li>
<li>
<p>The other refinements are missing from the wrapped function, e.g. you can't invoke <code>apo/part</code> or <code>apo/dup</code>.</p>
</li>
<li>
<p>You don't inherit anything about the original function's parameter conventions; e.g. if an argument were quoted you'd get the parameter name word you passed for it.</p>
</li>
<li>
<p>Performance-wise you generate a whole new function call...path evaluation...argument evaluation...</p>
</li>
<li>
<p>Your new function doesn't have any HELP... etc. etc.</p>
</li>
</ol>
<h2>How To Make This Better in Classical "Redbol"?</h2>
<p>Let's put yourself in the mind of someone thinking about how I was at that time, <em>who wanted to use the same strategy but merely address (1) and (2)</em>.  So to be able to write the slightly shorter hand:</p>
<pre><code>APO: rebmu-wrap 'append/only
APD: rebmu-wrap 'append/dup
APDP: :rebmu-wrap 'append/dup/part
APPD: :rebmu-wrap 'append/part/dup  ; ...etc.
</code></pre>
<p>This version of REBMU-WRAP would need to analyze the spec, presumably with WORDS-OF:</p>
<pre><code>r3-alpha&gt;&gt; words-of :append
== [series value /part length /only /dup count]
</code></pre>
<p>So you might try something like the following nightmare...<strong>which took me at least an hour to write and debug!</strong> (probably more like two, because of the glitch of trying to mutate the spec in place and needing to notice when the insertion position matches the position a refinement argument is being moved from):</p>
<pre><code>rebmu-wrap: func [refined [path!] /local spec body pos insert-pos item] [
    if not any-function? (action: get first refined) [
        do make error! "first element of path must refer to a function"
    ]
    spec: words-of :action
    body: reduce [refined]
    insert-pos: spec  ; find where refinement args should be inserted
    while [all [not tail? insert-pos not refinement? insert-pos/1]][
        append body insert-pos/1
        insert-pos: next insert-pos
    ]
    foreach refinement-name (next refined) [
        if not pos: find spec to-refinement refinement-name [
            do make error! "missing or duplicate refinement specified"
        ]
        take pos  ; drop refinement from spec
        while [all [not tail? pos not refinement? pos/1 pos != insert-pos]] [
             insert-pos: insert insert-pos item: take pos
             append body item
        ]
    ]
    func ?? spec ?? body
]
</code></pre>
<p>If you try this in R3-Alpha, yes it does indeed work for (1) and (2). I put in the probes so you can see the spec and body of the new function:</p>
<pre><code>r3-alpha&gt;&gt; apo: rebmu-wrap 'append/only
spec: [series value /part length /dup count]
body: [append/only series value]

r3-alpha&gt; apd: rebmu-wrap 'append/dup
spec: [series value count /part length /only]
body: [append/dup series value count]

r3-alpha&gt;&gt; apdp: rebmu-wrap 'append/dup/part
spec: [series value count length /only]
body: [append/dup/part series value count]

r3-alpha&gt;&gt; appd: rebmu-wrap 'append/part/dup
spec: [series value count length /only]
body: [append/part/dup series value count]
</code></pre>
<p>It gets a head-start on (3) by leaving the refinements that haven't been partially specialized on the spec, but they're ignored in the call.</p>
<h2>That's A Lot Of Work for Something That Still Sucks! <img src="https://forum.rebol.info/images/emoji/twitter/nauseated_face.png?v=9" title=":nauseated_face:" class="emoji" alt=":nauseated_face:">
</h2>
<p>When you think of everything it entails to get (3) and (4), you are going to either need to COMPOSE your invocation on each call -or- change methodology to use APPLY.  But even if you are aware of APPLY it doesn't make this a trivial exercise, and doesn't help with (5) or (6).</p>
<p><strong>...and this is why I never even tried to write such things (before)... instead trying to add core interpreter features for partial specialization.</strong></p>
<h2>The Happy New World of Partial Specialization <img src="https://forum.rebol.info/images/emoji/twitter/sun_with_face.png?v=9" title=":sun_with_face:" class="emoji" alt=":sun_with_face:">
</h2>
<p>In today's Ren-C, all you have to do is get a function as a path, and you have (1) (2) (3) (4) (5).</p>
<pre><code>ren-c&gt;&gt; ap: :append
 == #[action! {ap} [series value /part /dup /line /only]]

ren-c&gt;&gt; ap [a b c] [d e]
== [a b c d e]

ren-c&gt;&gt; apo: :append/only
== #[action! {apo} [series value /part /dup /line]]

ren-c&gt;&gt; apo [a b c] [d e]
== [a b c [d e]]

ren-c&gt;&gt; apo/dup [a b c] [d e] 2  ; e.g. demonstrating (3)
== [a b c [d e] [d e]]
</code></pre>
<p>The new function call is just as efficient as the original (you might think of it moreso since there's no path processing, e.g. <strong>apo</strong> is faster than invoking <strong>ap/only</strong>!)</p>
<p>You don't get the HELP inherited automatically (it has an associated cost), but there is a function that will do it if you want to... you say <strong>inherit-meta :apo :append</strong> and then <strong>help apo</strong> will have the help strings copied into its meta information.</p>
<p>So that's some assistance with (6), but do remember that it's not a perfect world when talking about how to automatically write meaningful adjusted help.  If any parameter descriptions refer to the argument you specialized out, it's no longer on the interface, so they may not make sense!</p>
<p><em>(Note: Now that refinements are their own arguments, you can't tell by parameter list alone if a refinement is a 0 or 1 arg case.  It's determined by the typeset: if the typeset is empty--no types accepted--it is a 0 arg refinement.  Something to ponder if this can be done better, but see all the other nice things...like caching the label of the function name for stack traces, etc.)</em></p>
<h2>So long, REBMU-WRAP...</h2>
<p>...but I wanted to write this up just to show a good example of how early experiences playing with Rebmu led me to question Rebol, and want to shore up its abilities.</p>
<blockquote>
<p>"Beware of the Turing tar-pit in which <strong>everything is possible but nothing of interest is easy</strong>."</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/what-was-rebmu-wrap-and-why-we-no-longer-need-it/1795/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/what-was-rebmu-wrap-and-why-we-no-longer-need-it/1795/1</link>
        <pubDate>Mon, 07 Mar 2022 06:06:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1795-1</guid>
        <source url="https://forum.rebol.info/t/what-was-rebmu-wrap-and-why-we-no-longer-need-it/1795.rss">What was REBMU-WRAP (and why we no longer need it)</source>
      </item>
  </channel>
</rss>
