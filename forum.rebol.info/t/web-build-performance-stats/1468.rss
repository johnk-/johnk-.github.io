<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Web Build Performance Stats</title>
    <link>https://forum.rebol.info/t/web-build-performance-stats/1468</link>
    <description>I resurrected the &quot;stats&quot; function to get some metrics.  It&#39;s actually a good example of how nicely Ren-C can improve things:

* [Here&#39;s the code for stats in R3-Alpha](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/core/n-system.c#L129) (which references an object prototype [defined elsewhere in sysobj.h](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/boot/sysobj.r#L255), and you can also see that all you see in this file of the function spec is REBNATIVE(stats))

* [Here&#39;s that in Ren-C](https://github.com/metaeducation/ren-c/blob/de62515f95ce335c07622ef51218d5da9e938a12/src/core/d-stats.c#L56), and the maintainability advantages should be obvious.  The distinction of counting natives didn&#39;t exist in the same fashion as before, so it was deleted, but we could do that kind of thing another way.

In any case, running the statistics between R3-Alpha and Ren-C are going to show *a lot* more series and memory use in Ren-C.  The main reasons are:

* There&#39;s a Windows encapping issue that it reads the whole executable into memory to probe it for resource sections.  This is especially crazy for debug builds.  I&#39;d raised this as an issue for Shixin to look at but forgot about it.

* **Function frames do not use the data stack, and instead the arguments of functions are stored in individual arrays.**  While there are some optimizations to mean this doesn&#39;t require an allocation on quite every function call, it means a good portion of function calls do allocate series.  This stresses the GC, but, I&#39;ve mentioned how it was important for many reasons (including that the data stack memory isn&#39;t stable, and that meant the previous approach had bugs passing pointers to arguments around.  It&#39;s a given that this is how things are done now--especially with stackless--so it just needs to be designed around and tuned.

* **WORD!s are special cases of string series.**  Things like the word table and binding didn&#39;t count in series memory before, and wasn&#39;t tabulated in R3-Alpha in the series count.  There are some other examples of this.

* **ACTION!s create more series and contexts.**  The HELP information for most actions that have help information has two objects linked to it...one mapping parameter names to datatypes, and one mapping parameter names to descriptions.  I&#39;m hoping that the one mapping parameter names to datatypes can be covered by the parameter information that the interpreter also sees...but for today, there&#39;s a difference because one contains TYPESET!s and the other contains human-readable BLOCK!s.

* **So Much More Is Done In Usermode.**  Ranging from console code to command-line argument processing, there&#39;s more source code (which counts as series itself) and more code running.

I see it as good--not bad--that a ton of things run in the boot process.  Although I think you should be able to build an run a minimal system...even one that doesn&#39;t waste memory on HELP strings (it&#39;s now easier to make such things, since the spec isn&#39;t preserved).

But for today, the closest we have to a &quot;minimal build&quot; is the web build.  It&#39;s a bit more comparable to R3-Alpha in terms of how much startup code it runs.

## The Current State

Starting up R3-Alpha on Linux, I get the following for **stats/profile**:

    r3-alpha&gt;&gt; stats/profile
    == make object! [
        timer: 0:00:02.639939
        evals: 20375
        eval-natives: 3340
        eval-functions: 369
        series-made: 8393
        series-freed: 2597
        series-expanded: 70
        series-bytes: 2211900
        series-recycled: 2526
        made-blocks: 5761
        made-objects: 64
        recycles: 1
    ]

Ren-C on the web is considerably heavier, at least when it comes to evals + series made + GC churn *(a little less overall series bytes...probably mostly owed to optimizations that fit small series into the place where tracking information would be stored if it were a larger one)*:

    ren-c/web&gt;&gt; stats/profile
    == make object! [
        evals: 65422
        series-made: 28569
        series-freed: 11160
        series-expanded: 419
        series-bytes: 1731611
        series-recycled: 8669
        made-blocks: 16447
        made-objects: 109
        recycles: 229  ; !!! see update, this is now 1
    ]

The increased number of evals just goes with the &quot;a lot more is done in usermode&quot; bit.  There&#39;s lots of ways to attack that if it&#39;s bothersome.

The series-made number is much bigger.  8393 v. 28569.  I mentioned how a lot of this is going to come from the fact that many evals need to make series, but we don&#39;t really have a breakdown of that number here to be sure that&#39;s accounting for them.  Anyway, this number isn&#39;t all that bothersome to me given that knowledge...but it should be sanity-checked.

What does bother me is the 229 recycles.  That&#39;s a lot.  Despite making 3-4x as many series, I don&#39;t see how exactly that&#39;s translating into 200x the recycling.

**UPDATE: This was the result of accidentally committed debug code.  It&#39;s back to 1.**

## Writing Down The Current State is Better Than Nothing

Ideally we&#39;d have some kind of performance regression chart that plotted some of these numbers after each build.  Though really it&#39;s not too worth doing that unless the numbers carried more information that was more actionable.

But...lacking an automated method, writing it down now and having a forum thread to keep track of findings and improvements is better than nothing.

There&#39;s likely a lot that could be done to help the desktop build (such as obviously tending to that encap-reading issue).  But I&#39;d like to focus principally on improvements to the internals that offer benefit to the web build, where I think the main relevance is.  And:

* **Having a system built from rigorously understood invariants is the best plan for optimization over the long-term.**  If you don&#39;t have a lot of assertions and confidence about what is and isn&#39;t true around your codebase, you can&#39;t know if a rearrangement will break it or not.  So I spend a lot of time focusing on defining these invariants and making sure they are true.

* **Avoid optimizing things before you&#39;re sure if they&#39;re right.**  I&#39;m guilty as anyone of fiddling with things for optimization reasons just because it&#39;s cool or I get curious of whether something can work or not.  Programmers are tinkerers and that&#39;s just how it is.  But it&#39;s definitely not time to go over things with a fine-toothed comb when so many design issues are not worked out.</description>
    
    <lastBuildDate>Fri, 08 Dec 2023 19:04:25 +0000</lastBuildDate>
    <category>Optimization</category>
    <atom:link href="https://forum.rebol.info/t/web-build-performance-stats/1468.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Web Build Performance Stats</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Circa January 2021, I did a capture of some statistics about the web build.  It looked like this right after booting the console:</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1468">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>ren-c/web&gt;&gt; stats/profile
== make object! [
    evals: 65422
    series-made: 28569
    series-freed: 11160
    series-expanded: 419
    series-bytes: 1731611
    series-recycled: 8669
    made-blocks: 16447
    made-objects: 109
    recycles: 1
]
</code></pre>
</blockquote>
</aside>
<p>I thought I might run it again here 3 years later.  And I was a bit shocked initially, because <em>at first glance it seems like things have gotten completely out of hand</em>:</p>
<pre><code>&gt;&gt; stats/profile
== make object! [
    evals: 3277865
    series-made: 928871
    series-freed: 646233
    series-expanded: 6312
    series-bytes: 6159217
    series-recycled: 196735
    blocks-made: 86893
    objects-made: 220
    recycles: 13
]
</code></pre>
<p>That's a factor of 50 more "evals"... with a factor of 32 more series... just to boot the web console, what the heck happened?</p>
<h2>
<a name="series-count-is-misleading-1" class="anchor" href="https://forum.rebol.info#series-count-is-misleading-1"></a>Series Count Is Misleading</h2>
<p>The first thing to notice is that the console doesn't take 50x as long to load as it used to.  That should be a hint that something about the statistics may have gotten thrown off.</p>
<p>One thing that's grossly overinflating the "series" count is that <a href="https://forum.rebol.info/t/the-sea-of-words/1564">Sea of Words</a> invented a new mechanism for binding in modules.  This method makes tiny series "stubs" that get linked onto canon symbols to hold indices during a binding operation.  They're very cheap to make and to destroy and aren't involved in GC.  They account for at least 1/3 of those "series" being made.</p>
<p>These statistics need to be adjusted somehow to break those out differently.</p>
<h2>
<a name="eval-count-is-misleading-2" class="anchor" href="https://forum.rebol.info#eval-count-is-misleading-2"></a>Eval Count Is Misleading</h2>
<p>Due to stackless processing, what counts as an "eval tick" has multiplied by a lot.  It used to be that something like a REDUCE operation would count as one tick, and then each eval step it did would be a tick.  Now each time the REDUCE yields to the evaluator to ask for another evaluation, that's a tick...then the evaluator ticks.</p>
<p><em>(While these added steps may sound like a burden, it actually accelerates the web build.  Because it means we're building an unwindable stack that can yield to the browser's event loop, without relying on a crutch like binaryen that would bloat up the entire runtime with "stackless emulation"...that would fail anyway on deep stacks.  For a reminder of why this is necessary: <a href="https://forum.rebol.info/t/switching-to-stackless-why-this-why-now/1247">"Switching to Stackless: Why This, Why Now?"</a>)</em></p>
<p>Also, parsing got subsumed into the tick count.  Even PARSE3 breaks its operations down into ticks now.  So if you say <strong>parse3 "aaaabbbb" [some ["a" | b"]]</strong> that's not one tick, it's at least 8 * 3 or 24.</p>
<h2>
<a name="the-real-villain-uparse-3" class="anchor" href="https://forum.rebol.info#the-real-villain-uparse-3"></a>The Real "Villain": UPARSE</h2>
<p>Once you've cut out some basic accounting anomalies, there's still certainly a lot of work to do.  But reading between the lines, there's a clear central source of resource usage going through the roof...which is quite simply, UPARSE.</p>
<p>Not that the web console uses it all that terribly much.  But using it pretty much <em>at all</em> will explode the amount of interpreter code that runs, quickly eclipsing everything else.</p>
<p>I don't think the best way to frame it is negative.  <strong>The way I see this is as a big, real, challenge for the system.</strong>  UPARSE is the most real, most powerful, <a href="https://github.com/metaeducation/ren-c/tree/master/tests/parse">and most tested</a> dialect implementation that the Redbol world has ever seen.</p>
<h2>
<a name="so-what-can-be-done-4" class="anchor" href="https://forum.rebol.info#so-what-can-be-done-4"></a>So... What Can Be Done?</h2>
<p>Counting up all the ways in which UPARSE pays the price for its current all-usermode implementation is to big for this post.  But it's important to realize that the costly mechanisms it uses all have motivations.  Meeting those needs with more efficient tools means other dialects can use those tools too.</p>
<p>To name an example off the top of my head, would be how every combinator function is pre-hooked with code enclosing each call with a test for <em>"are we hooked, if so call the hook with the frame, otherwise just call the frame."</em>  That's screaming for some kind of generalized answer where you don't have to hook in advance, but be able to inject the hooks later on some category of functions.  But using the massively inefficient approach is how we can test the viability of something like the <a href="https://forum.rebol.info/t/replpad-visual-parse-debugger/2063">Stepwise PARSE Debugger</a>.</p>
<p>But at the end of the day, it does come down to the fact that parsing is just too general-purpose and useful to be done with usermode code.  It would be nice if we had a language like Red/System to write the combinators in...which could be compiled to WebAssembly in the browser and x86 or ARM on the desktop.  Yet the option on the table right now is hand-coding C for the combinators and the combinating processes.</p>
<h2>
<a name="prioritization-is-difficult-5" class="anchor" href="https://forum.rebol.info#prioritization-is-difficult-5"></a>Prioritization Is Difficult</h2>
<p>While UPARSE clearly needs to be reviewed and nativized, I'm still not sure if this is the next item of business in the priority queue.  Binding casts a dark shadow over the entire system--and has its own performance quandaries.  Not to mention that it hasn't been figured out how variables can be instantiated in mid-parse with something like a "LET combinator".</p>
<p>Any investments in making UPARSE faster that also make it harder to modify and test under new designs has to be considered carefully.  Also, being written in usermode exposes pitfalls that you wouldn't see otherwise--<a href="https://forum.rebol.info/t/definitional-break-and-continue-the-time-is-now/2066">like the need for definitional CONTINUE</a> that was exposed.</p>
<p>Anyway... data is data, and wanted to look at it.  This is where things are at the moment.</p>
          <p><a href="https://forum.rebol.info/t/web-build-performance-stats/1468/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/web-build-performance-stats/1468/3</link>
        <pubDate>Fri, 08 Dec 2023 19:04:25 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1468-3</guid>
        <source url="https://forum.rebol.info/t/web-build-performance-stats/1468.rss">Web Build Performance Stats</source>
      </item>
      <item>
        <title>Web Build Performance Stats</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1468">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>What does bother me is the 229 recycles. That's a lot. Despite making 3-4x as many series, I don't see how exactly that's translating into 200x the recycling.</p>
</blockquote>
</aside>
<p>Because I thought "oh this might be complex" I didn't immediately look at it.  But I should have just set a breakpoint, because this was the result of some debugging Recycle() calls accidentally getting committed.  It was recycling on every native creation!</p>
<p>Removing it gets us to the expected recycle of 1.</p>
<p>Yay.</p>
          <p><a href="https://forum.rebol.info/t/web-build-performance-stats/1468/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/web-build-performance-stats/1468/2</link>
        <pubDate>Wed, 03 Feb 2021 06:20:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1468-2</guid>
        <source url="https://forum.rebol.info/t/web-build-performance-stats/1468.rss">Web Build Performance Stats</source>
      </item>
      <item>
        <title>Web Build Performance Stats</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I resurrected the "stats" function to get some metrics.  It's actually a good example of how nicely Ren-C can improve things:</p>
<ul>
<li>
<p><a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/core/n-system.c#L129">Here's the code for stats in R3-Alpha</a> (which references an object prototype <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/boot/sysobj.r#L255">defined elsewhere in sysobj.h</a>, and you can also see that all you see in this file of the function spec is REBNATIVE(stats))</p>
</li>
<li>
<p><a href="https://github.com/metaeducation/ren-c/blob/de62515f95ce335c07622ef51218d5da9e938a12/src/core/d-stats.c#L56">Here's that in Ren-C</a>, and the maintainability advantages should be obvious.  The distinction of counting natives didn't exist in the same fashion as before, so it was deleted, but we could do that kind of thing another way.</p>
</li>
</ul>
<p>In any case, running the statistics between R3-Alpha and Ren-C are going to show <em>a lot</em> more series and memory use in Ren-C.  The main reasons are:</p>
<ul>
<li>
<p>There's a Windows encapping issue that it reads the whole executable into memory to probe it for resource sections.  This is especially crazy for debug builds.  I'd raised this as an issue for Shixin to look at but forgot about it.</p>
</li>
<li>
<p><strong>Function frames do not use the data stack, and instead the arguments of functions are stored in individual arrays.</strong>  While there are some optimizations to mean this doesn't require an allocation on quite every function call, it means a good portion of function calls do allocate series.  This stresses the GC, but, I've mentioned how it was important for many reasons (including that the data stack memory isn't stable, and that meant the previous approach had bugs passing pointers to arguments around.  It's a given that this is how things are done now--especially with stackless--so it just needs to be designed around and tuned.</p>
</li>
<li>
<p><strong>WORD!s are special cases of string series.</strong>  Things like the word table and binding didn't count in series memory before, and wasn't tabulated in R3-Alpha in the series count.  There are some other examples of this.</p>
</li>
<li>
<p><strong>ACTION!s create more series and contexts.</strong>  The HELP information for most actions that have help information has two objects linked to it...one mapping parameter names to datatypes, and one mapping parameter names to descriptions.  I'm hoping that the one mapping parameter names to datatypes can be covered by the parameter information that the interpreter also sees...but for today, there's a difference because one contains TYPESET!s and the other contains human-readable BLOCK!s.</p>
</li>
<li>
<p><strong>So Much More Is Done In Usermode.</strong>  Ranging from console code to command-line argument processing, there's more source code (which counts as series itself) and more code running.</p>
</li>
</ul>
<p>I see it as good--not bad--that a ton of things run in the boot process.  Although I think you should be able to build an run a minimal system...even one that doesn't waste memory on HELP strings (it's now easier to make such things, since the spec isn't preserved).</p>
<p>But for today, the closest we have to a "minimal build" is the web build.  It's a bit more comparable to R3-Alpha in terms of how much startup code it runs.</p>
<h2>The Current State</h2>
<p>Starting up R3-Alpha on Linux, I get the following for <strong>stats/profile</strong>:</p>
<pre><code>r3-alpha&gt;&gt; stats/profile
== make object! [
    timer: 0:00:02.639939
    evals: 20375
    eval-natives: 3340
    eval-functions: 369
    series-made: 8393
    series-freed: 2597
    series-expanded: 70
    series-bytes: 2211900
    series-recycled: 2526
    made-blocks: 5761
    made-objects: 64
    recycles: 1
]
</code></pre>
<p>Ren-C on the web is considerably heavier, at least when it comes to evals + series made + GC churn <em>(a little less overall series bytes...probably mostly owed to optimizations that fit small series into the place where tracking information would be stored if it were a larger one)</em>:</p>
<pre><code>ren-c/web&gt;&gt; stats/profile
== make object! [
    evals: 65422
    series-made: 28569
    series-freed: 11160
    series-expanded: 419
    series-bytes: 1731611
    series-recycled: 8669
    made-blocks: 16447
    made-objects: 109
    recycles: 229  ; !!! see update, this is now 1
]
</code></pre>
<p>The increased number of evals just goes with the "a lot more is done in usermode" bit.  There's lots of ways to attack that if it's bothersome.</p>
<p>The series-made number is much bigger.  8393 v. 28569.  I mentioned how a lot of this is going to come from the fact that many evals need to make series, but we don't really have a breakdown of that number here to be sure that's accounting for them.  Anyway, this number isn't all that bothersome to me given that knowledge...but it should be sanity-checked.</p>
<p>What does bother me is the 229 recycles.  That's a lot.  Despite making 3-4x as many series, I don't see how exactly that's translating into 200x the recycling.</p>
<p><strong>UPDATE: This was the result of accidentally committed debug code.  It's back to 1.</strong></p>
<h2>Writing Down The Current State is Better Than Nothing</h2>
<p>Ideally we'd have some kind of performance regression chart that plotted some of these numbers after each build.  Though really it's not too worth doing that unless the numbers carried more information that was more actionable.</p>
<p>But...lacking an automated method, writing it down now and having a forum thread to keep track of findings and improvements is better than nothing.</p>
<p>There's likely a lot that could be done to help the desktop build (such as obviously tending to that encap-reading issue).  But I'd like to focus principally on improvements to the internals that offer benefit to the web build, where I think the main relevance is.  And:</p>
<ul>
<li>
<p><strong>Having a system built from rigorously understood invariants is the best plan for optimization over the long-term.</strong>  If you don't have a lot of assertions and confidence about what is and isn't true around your codebase, you can't know if a rearrangement will break it or not.  So I spend a lot of time focusing on defining these invariants and making sure they are true.</p>
</li>
<li>
<p><strong>Avoid optimizing things before you're sure if they're right.</strong>  I'm guilty as anyone of fiddling with things for optimization reasons just because it's cool or I get curious of whether something can work or not.  Programmers are tinkerers and that's just how it is.  But it's definitely not time to go over things with a fine-toothed comb when so many design issues are not worked out.</p>
</li>
</ul>
          <p><a href="https://forum.rebol.info/t/web-build-performance-stats/1468/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/web-build-performance-stats/1468/1</link>
        <pubDate>Mon, 18 Jan 2021 06:51:16 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1468-1</guid>
        <source url="https://forum.rebol.info/t/web-build-performance-stats/1468.rss">Web Build Performance Stats</source>
      </item>
  </channel>
</rss>
