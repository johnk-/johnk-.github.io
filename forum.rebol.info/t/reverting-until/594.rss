<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reverting UNTIL</title>
    <link>https://forum.rebol.info/t/reverting-until/594</link>
    <description>Long ago, there was a fervent debate about whether UNTIL was a word that was &quot;naturally paired&quot; with WHILE...like IF and UNLESS.  So it was wondered if UNTIL should be an arity-2 function which was effectively WHILE-NOT, instead of its arity-1 form.

The change was introduced in Ren-C to try it.  But as an interim solution before the name was truly reclaimed, `while-not` was added.  The intent was to go in and replace it with UNTIL later, after the change had settled.  LOOP-WHILE and LOOP-UNTIL were the arity-1 natives.

To make a long story short: I guess I don&#39;t think that it wound up making that big a difference in the scheme of things.  The primary impact on me personally, was actually just making code golf programs longer. *(Having `U` be `UNTIL` is an appealing option.)*

When you look at `forever [...]` and `until [...]`, they seem to go together sensibly, and you might ask--as some have--if it&#39;s WHILE that&#39;s weird.  If you think about WHILE and UNTIL as being two words offering entry points into loop space, it&#39;s like it&#39;s giving you two common ones with common words.

I didn&#39;t wind up liking `loop-while` and `loop-until` as much as I thought I would.  And WHILE as arity-1 was also tried to give parity with PARSE&#39;s WHILE, but that was awful...and made it clear that [arity-2 was the right answer for PARSE as well](https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875).

So here in the time of analyzing changes for goodness or badness and trying to pin things down, I think the status quo is the better answer.  Plus, when there are so many other slam-dunk good changes, this one is more a distraction than anything else.

So DocKimbel/Rebolek/Oldes/etc. get to win on this one.</description>
    
    <lastBuildDate>Wed, 05 May 2021 01:25:39 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/reverting-until/594.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reverting UNTIL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Here is the old argument for LOOP-UNTIL and LOOP-WHILE from the Trello, for historical reference.</p>
<p>The points are still pretty reasonable, and I don't think it was any kind of disaster.  It just didn't move the needle very much...some things looked better, some things less good, it was near break-even.  And with WHILE-NOT and UNTIL-NOT I think the mechanical arguments for having all 4 variants were covered.</p>
<p>There are simply bigger fish to fry than this particular change.</p>
<blockquote>
<p>Historically Rebol has had a WHILE construct that takes two arguments...a condition block and body block:</p>
<pre><code>x: 0
while [x &lt; 3] [
    x: x + 1
]
</code></pre>
<p>The condition is evaluated first, before the body is ever run.  Then alternately the body is evaluated and the condition re-evaluated until the condition comes back conditionally false (e.g. BLANK!, FALSE).  At that point, the return result of the WHILE expression is the last evaluation product of the body.  <em>(3 in the case above.)</em></p>
<p>Under the hood it "takes turns" ramping up the evaluator twice each loop cycle on two different blocks.  In a sense this can be seen as making the loop itself somewhat less efficient than if it had been chosen to be single-arity, and merely testing the result of a single block evaluation.  Ren/C adds this more efficient construct as LOOP-WHILE:</p>
<pre><code>x: 0
loop-while [
    x: x + 1
    x &lt; 3
]
</code></pre>
<p>Using the prefix LOOP- is abstractly filling in the directive of "make a loop" or "turn a loop", to help inform what to do in lieu of any supplied body (the usual expectation being for while loops to have one).  Other choices might be <code>noop-while</code>, <code>continue-while</code>, <code>cycle-while</code> etc. But LOOP- seemed the best prefix.</p>
<p><em>(Note: It is unrelated to what the command or dialect LOOP winds up meaning.)</em></p>
<p>The relative efficiency of LOOP-WHILE might lead one to ask if it deserves the WHILE name and should replace it entirely.  There are several arguments for keeping the two separate constructs, plus keeping WHILE as-is:</p>
<ul>
<li>LOOP-WHILE forces the test after the "body code"...so the "body" will run once before the test, which you may or may not want</li>
<li>LOOP-WHILE cannot return the last result of evaluating the "body" (which is usually more interesting than returning the result of evaluating a condition for a while, given the only possibilities for that are FALSE or BLANK!).</li>
<li>WHILE is ubiquitously used in arity-2 form in existing code...by nearly every person to ever use the Rebol language.</li>
<li>WHILE's visual separation of the condition from the body with separate blocks serves a communicative purpose which helps drive its popularity.</li>
</ul>
<p>It's also worth noting that LOOP-WHILE may be more efficient <em>when standing alone</em>.  But it's not more efficient if (for instance) you are dealing with condition and body blocks that aren't already in independent variables.  The following will be measurably slower than just <code>while condition body</code> (and may behave differently, and return a different result!):</p>
<pre><code>x: 0
condition: [x &lt; 3]
body: [x: x + 1]
loop-while [
    do body
    do condition
]
</code></pre>
<p>This understanding of WHILE informs Ren/C's accompanying introduction of an arity-2 UNTIL to match:</p>
<pre><code>x: 0
until [x = 3] [
    x: x + 1
]
</code></pre>
<p>It runs the condition before the first execution of the body, and returns the last evaluative result of the body before the condition became true.</p>
<p>There is also a LOOP-UNTIL:</p>
<pre><code>x: 0
loop-until [
    x: x + 1
    x = 3
]
</code></pre>
<p>This makes LOOP-UNTIL a synonym for what Rebol2 and R3-Alpha just called UNTIL:</p>
<pre><code>x: 0
until [
    x: x + 1
    x = 3
]
</code></pre>
<p>The reasons for retaking the name UNTIL are:</p>
<ul>
<li>every new "non-guru" user (and many of the other "guru" users) found Rebol2's UNTIL to be an inconsistency of the words WHILE and UNTIL.  They suggest a matched pair like IF and UNLESS.</li>
<li>A two-arity UNTIL is genuinely useful in its own right, for the same reasons that WHILE is, including bringing more efficiency to some scenarios than LOOP-UNTIL</li>
<li>A two-arity UNTIL is genuinely a natural fit for readability in many situations by separating the condition and body blocks.</li>
<li>Single-arity UNTIL's popularity "in the wild" is vastly lower than WHILE, making it less disruptive to change.</li>
<li>It is not difficult for codebases which worked with the old definition to work around it with a very simple <code>until: :loop-until</code>, pending a simple search-and-replace to fix the usages.</li>
</ul>
</blockquote>
          <p><a href="https://forum.rebol.info/t/reverting-until/594/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reverting-until/594/2</link>
        <pubDate>Wed, 18 Apr 2018 09:33:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-594-2</guid>
        <source url="https://forum.rebol.info/t/reverting-until/594.rss">Reverting UNTIL</source>
      </item>
      <item>
        <title>Reverting UNTIL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Long ago, there was a fervent debate about whether UNTIL was a word that was "naturally paired" with WHILE...like IF and UNLESS.  So it was wondered if UNTIL should be an arity-2 function which was effectively WHILE-NOT, instead of its arity-1 form.</p>
<p>The change was introduced in Ren-C to try it.  But as an interim solution before the name was truly reclaimed, <code>while-not</code> was added.  The intent was to go in and replace it with UNTIL later, after the change had settled.  LOOP-WHILE and LOOP-UNTIL were the arity-1 natives.</p>
<p>To make a long story short: I guess I don't think that it wound up making that big a difference in the scheme of things.  The primary impact on me personally, was actually just making code golf programs longer. <em>(Having <code>U</code> be <code>UNTIL</code> is an appealing option.)</em></p>
<p>When you look at <code>forever [...]</code> and <code>until [...]</code>, they seem to go together sensibly, and you might ask--as some have--if it's WHILE that's weird.  If you think about WHILE and UNTIL as being two words offering entry points into loop space, it's like it's giving you two common ones with common words.</p>
<p>I didn't wind up liking <code>loop-while</code> and <code>loop-until</code> as much as I thought I would.  And WHILE as arity-1 was also tried to give parity with PARSE's WHILE, but that was awful...and made it clear that <a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875">arity-2 was the right answer for PARSE as well</a>.</p>
<p>So here in the time of analyzing changes for goodness or badness and trying to pin things down, I think the status quo is the better answer.  Plus, when there are so many other slam-dunk good changes, this one is more a distraction than anything else.</p>
<p>So DocKimbel/Rebolek/Oldes/etc. get to win on this one.</p>
          <p><a href="https://forum.rebol.info/t/reverting-until/594/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reverting-until/594/1</link>
        <pubDate>Wed, 18 Apr 2018 09:27:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-594-1</guid>
        <source url="https://forum.rebol.info/t/reverting-until/594.rss">Reverting UNTIL</source>
      </item>
  </channel>
</rss>
