<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</title>
    <link>https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989</link>
    <description>The concept of having isotopic **~true~** and **~false~** as WORD! isotopes instead of having a distinct LOGIC! type is admittedly somewhat weird.  It means they can&#39;t be put in blocks and need some sort of transformation if they&#39;re going to be put into blocks.

* The generic and reversible way to make them real it is to META them and get `~true~` and `~false~` quasiforms, which you can UNMETA back to the isotopes

* The readable way to make them real is to REIFY them and get `true` and `false` as plain WORD!, which only gets turned back into the isotope form if they are bound to variables that hold the isotopes, and you evaluate them.

* Your circumstance may mean that neither of those choices are what you want when in a situation where the isotopes can&#39;t work...maybe it means you have to rethink what you&#39;re doing, or maybe you want some other transformation.  It&#39;s good to be alerted to the fact that it&#39;s dodgy to put what you think of as a &quot;logic&quot; in a reified context.

One should note that Lisp has no false at all, only NIL for false (since everything else is truthy, you could use anything else for true, but they have T predefined).  But their NIL isn&#39;t isotopic--so it can appear in lists literally.

And as I&#39;ve repeatedly pointed out, Redbol&#39;s historical choice to render LOGIC! conflated with the words `true` and `false` (instead of `#[true]` and `#[false]`) shows a desire to avoid the logic literals &quot;escaping&quot; into the reified consciousness of the user.  Making the logic forms actually impossible to put into blocks without a conscious transformation feels like it&#39;s good.

I know it&#39;s a strange choice, but it&#39;s seeming like it fits with the territory.  It&#39;s a sort of tradeoff you need when you choose to be firm that TRUE and FALSE are redefinable words and not lexical forms of logic constants.

## So... Why Shouldn&#39;t NULL Be Done With `~null~` isotope ?

Right now what I call &quot;null&quot; is isotopic BLANK!.  It is not pretty looking:

    &gt;&gt; null
    == ~_~  ; isotope

    &gt;&gt; _
    == ~_~  ; isotope

But what *is* pretty looking is that if you assign a bunch of variables to null, the fact that blanks evaluate to the null isotope gives a great visibility to where the actual values to pay attention to are:

    obj: make object! [
        alpha: _
        beta: _
        delta: true
        epsilon: ~
        gamma: &quot;nutty&quot;
        rho: _
        omega: &#39;now
     ]

If we used a word isotope, then at source level we&#39;re writing:

    obj: make object! [
        alpha: null
        beta: null
        delta: true
        epsilon: ~
        gamma: &quot;nutty&quot;
        rho: null
        omega: &#39;now
     ]

And if we view it after evaluation that fetches (`null` =&gt; `~null~  ; isotope`), it gets uglier:

    make object! [
        alpha: ~null~
        beta: ~null~
        delta: ~true~
        epsilon: ~
        gamma: &quot;nutty&quot;
        rho: ~null~
        omega: &#39;now
     ]

We can&#39;t show it as the WORD! null because there&#39;s no guarantee that word always will evaluate back to the null isotope.  But the concept is that since BLANK! can&#39;t be redefined, we can put it in an evaluative context as a substitute for `~_~` if we want.

If we were &quot;more honest&quot; and just META&#39;d the isotopic blank, we&#39;d get renders like:

    make object! [
        alpha: ~_~
        beta: ~_~
        delta: ~true~
        epsilon: ~
        gamma: &quot;nutty&quot;
        rho: ~_~
        omega: &#39;now
     ]

But I might actually like that less than seeing **`~null~`** there.

## Things To Weigh In This Consideration

I&#39;m really torn.  Certainly having people be able to see ~null~ written out as a word corresponds to what we want to refer to the state as.  We aren&#39;t going to replace people&#39;s vernacular to say &quot;isotopic blank&quot; instead of null.  And trying to teach people &quot;isotopic blank is null&quot; is an uphill battle.

Let&#39;s look back at that seemingly beautiful situation with all the blanks-to-nulls at source level:

    obj: make object! [
        alpha: _
        beta: _
        delta: true
        epsilon: ~
        gamma: &quot;nutty&quot;
        rho: _
        omega: &#39;now
     ]

But, hmmm.  The **`~`** is now an assignable state meaning variable is not set.  How often will you want to set something to NULL...which won&#39;t generate an error on access like being unset would, but is falsey and can&#39;t be passed to many routines without a MAYBE?

**Statistically, we might often have a situation where NULL is the minority initialization, more like this:**

    obj: make object! [
        alpha: ~
        beta: ~
        delta: true
        epsilon: null
        gamma: &quot;nutty&quot;
        rho: ~
        omega: &#39;now
     ]

My point is that intentionally initializing things to null may not be as common as setting to an error-provoking unset state.  And when null happens it may be just as noteworthy to call out as setting something to true or false.

## Are There Technical Barriers To This?

It has some of the same problems as having to deal with the type checking of LOGIC! actually being an isotopic subclass of two words.  It means `&lt;opt&gt;` is an isotopic subclass of one word, so there&#39;s no specific null datatype.  :-/

I was already saying that TYPE OF NULL was probably an error, and TYPE OF MAYBE NULL would be void... anyway, this fits into some of the same type issues that logic has.

Previously NULL cells held nothing, so I&#39;d put a payload of the file and line that were in effect in the evaluator.  This was supposed to give better errors about where a null originated from.  This could still be done if NULL was a special case of WORD! isotope that said it was null via a flag vs. storing the symbol, but could be complicated.  None of the better error mechanics were done yet.

**My general intuition is that from a user&#39;s standpoint, it&#39;s an uphill battle to teach them isotopic blank is something called &quot;null&quot;... and that the majority of technical problems that are involved in making NULL be a word isotope are problems that have to be tackled anyway with true and false as word isotopes.**

Additionally, I&#39;ve written about my desire for BLANK!s to serve in dialects as spaces.  That gets very screwed by the (**`_`** =&gt; **`~_~`  ; isotope**) evaluation.  Recovering blank for space intent would be good.

I&#39;m going to likely give it a shot, when I get some programming time again, hopefully soon.</description>
    
    <lastBuildDate>Fri, 27 Jan 2023 21:03:27 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1989">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>If we were "more honest" and just META'd the isotopic blank, we'd get renders like:</p>
<pre><code>make object! [
    alpha: ~_~
    beta: ~_~
    delta: ~true~
    epsilon: ~
    gamma: "nutty"
    rho: ~_~
    omega: 'now
]
</code></pre>
<p>But I might actually like that less than seeing <strong><code>~null~</code></strong> there.</p>
</blockquote>
</aside>
<p>You don't always know how you're going to feel until you've tried something a while.  But I have to say I'm starting to like <strong><code>~null~</code></strong> a lot more than I expected.</p>
<p>In fact, I was just reading some code:</p>
<pre><code>let meta: meta-of action
let notes: null
let description: null
</code></pre>
<p>And I thought to myself... hey.  That doesn't feel like it's "calling out" the nulls as much as I might like (!)  I almost felt like changing it:</p>
<pre><code>let meta: meta-of action
let notes: ~null~
let description: ~null~
</code></pre>
<p>Add oddly enough, that's faster...because it doesn't need to fetch the definition of the WORD! <strong><code>null</code></strong>.</p>
<p>I'm not <em>actually</em> going to change it.  But the fact that I thought about it makes me comfortable with the decision to go this route.  It feels more natural than I expected.</p>
          <p><a href="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989/4</link>
        <pubDate>Fri, 27 Jan 2023 21:03:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1989-4</guid>
        <source url="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989.rss">~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</source>
      </item>
      <item>
        <title>~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1989">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>My general intuition is that from a user's standpoint, it's an uphill battle to teach them isotopic blank is something called "null"... and that the majority of technical problems that are involved in making NULL be a word isotope are problems that have to be tackled anyway with true and false as word isotopes.</p>
<p>I'm going to likely give it a shot, when I get some programming time again, hopefully soon.</p>
</blockquote>
</aside>
<p>Just got snowed on.  <img src="https://forum.rebol.info/images/emoji/twitter/snowflake.png?v=12" title=":snowflake:" class="emoji" alt=":snowflake:" loading="lazy" width="20" height="20"> So there's an incentive to stay inside and program...</p>
<p>Hence I've gone ahead and done this <strong>~null~</strong> change, and am looking over the implications.</p>
<hr>
<p>My first impressions are that it feels right, though I definitely will admit that there's a lot of <em>subtlety</em> to it.  To try and put the whole thing into perspective.</p>
<ul>
<li>
<p>The first attempt by Ren-C to make a state that could not be put in a block called it "void", and it was the <em>only</em> non-valued state.</p>
<ul>
<li>It was used as the contents of an uninitialized variable</li>
<li>It was the result of a function like HELP that didn't want to show a result</li>
<li>It was the result of a PICK out of a block which was out of range</li>
<li>It was the result of a SELECT out of a map when the key wasn't present</li>
</ul>
<p>This "non-valued" state took on a number of Redbol NONE!'s responsibilities, but was "ornery" in the way Redbol UNSET! was--hence it could not be tested for truth or falsehood.</p>
</li>
<li>
<p>Realizing that the orneryness of not being testable by logic was inconvenient, the concept was changed to be called "null" and be falsey</p>
<ul>
<li>The API exposed NULL results as C/Javascript <code>null</code> pointer
<ul>
<li>this was conveniently also falsey in those languages</li>
</ul>
</li>
<li>The term "void" was reclaimed to describe invisibles, like COMMENT</li>
<li>Unset variables held another ornery state called "none"
<ul>
<li>calling the state "unset" seemed semantically wrong</li>
<li>
<em>variables</em> are unset, not the <em>contents</em> of a variable</li>
</ul>
</li>
</ul>
<p>This was a great development for the API, and working with blocks was still rigorous.  But for some other questions, being able to tell the difference between "no answer" and "there's an answer, but it's null" still presented a puzzle.</p>
</li>
<li>
<p>Isotopes were introduced as a nuance on a value that would only be detectable by those who cared.</p>
<ul>
<li>"heavy null" and "light null" were the first isotopic concept
<ul>
<li>heavy null meant "there <em>is</em> an answer, but it's null"</li>
<li>ELSE would only react to light null (no answer, not even null)</li>
<li>heavy null would decay to light null on variable assignment</li>
</ul>
</li>
</ul>
<p>The isotope mechanic became generalized (as explained here):</p>
<p><a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918" class="inline-onebox">A Justification of Generalized Isotopes</a></p>
</li>
<li>
<p>With notable features pertaining to splicing intent (group isotopes) and errors (error isotopes), a new way of saying "there is no answer" vs. "there is an answer, but it's null" came out of using block isotopes as multi-return signals.</p>
<ul>
<li>null itself no longer needed an isotopic form</li>
<li>a block isotope with a null represented in it could be "heavy null"
<ul>
<li>this required null to have a meta-representation to be in a block</li>
<li>but META of NULL had been defined as NULL</li>
<li>null was thus rethought as being an isotope itself</li>
</ul>
</li>
<li>making NULL an isotope of the WORD! null seemed the cleanest answer</li>
</ul>
</li>
</ul>
<p><strong>An important point to make is that there's now only one form of isotopic decay:</strong> multiple return results, e.g. BLOCK! isotopes, will decay to their first result.  So you'll never find a block isotope in a variable.</p>
<p>It's pretty wild to look at how it all works.</p>
<pre><code>&gt;&gt; first [~null~]
== ~null~

&gt;&gt; ~null~
== ~null~  ; isotope

&gt;&gt; null
== ~null~  ; isotope (null WORD! is defined to be ~null~ isotope)

&gt;&gt; reify null
== null

&gt;&gt; meta null
== ~null~

&gt;&gt; third [a b]
== ~null~  ; isotope

&gt;&gt; third [a b] else ['c]
== c

&gt;&gt; if true [null]
; first in pack of length 1
== ~null~  ; isotope

&gt;&gt; meta if true [null]
== ~[~null~]~

&gt;&gt; if true [null] else [123]
; first in pack of length 1
== ~null~  ; isotope    
</code></pre>
<p>I know it's a lot to take in, but I feel like everything is there for a reason...</p>
          <p><a href="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989/3</link>
        <pubDate>Sat, 12 Nov 2022 22:08:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1989-3</guid>
        <source url="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989.rss">~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</source>
      </item>
      <item>
        <title>~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1989">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So... Why Shouldn't NULL Be Done With <code>~null~</code> isotope ?</p>
</blockquote>
</aside>
<p>I might as well throw in the adjunct question of: <strong>"Why shouldn't VOID be done with ~void~ isotope?"</strong></p>
<p>It's worth noting that regardless of whether NULL is represented as <code>~_~</code> isotopes or <code>~null~</code> isotopes, it used to merely be said as having "no representation".  That's true of isotopes also, but there's been a standard that the interface shows an isotope by printing the quasiform and then commenting it as <em>"oh, it's actually an isotope state"</em></p>
<p>At that time, the console had a special exception for displaying nulls.  And the "quoted" form of null was just a single apostrophe with nothing after it:</p>
<pre><code>&gt;&gt; null
; null

&gt;&gt; quote null
== '

&gt;&gt; '
; null
</code></pre>
<p>This was all conceived before the idea of having a meta state for void, because voids just vanished.  But as things shuffled around, I came to think that this "no representation" made more sense for voids...</p>
<pre><code>&gt;&gt; '
; void

&gt;&gt; quote void
== '

&gt;&gt; meta void
== '

&gt;&gt; 1 + 2 '
== 3
</code></pre>
<p>Having a META state that is quoted vs. quasi puts VOID in a bizarre middle ground of not being isotopic.  Yet void can't be put in a block.  Though I've argued that we might also see it as that you can put infinitely many voids in a block...</p>
<pre><code>&gt;&gt; append [a b c] '
== [a b c]

 &gt;&gt; append [a b c] comment "hi"
 == [a b c]

 &gt;&gt; first []
 == ~null~  ; isotope (new proposal as word isotope vs isotopic blank)

 &gt;&gt; append [a b c] first []
 ** Error: Can't append ~null~ isotope (see MAYBE)

 &gt;&gt; maybe first []
 ; void

 &gt;&gt; append [a b c] maybe first []
 == [a b c]
</code></pre>
<p>Generally speaking I'm pleased with that.  Though it means if you wind up setting a variable to void, it will look kind of slight:</p>
<pre><code> &gt;&gt; make object! [x: comment "hi"]  ; might require a SET/ANY or similar
 == make object! [
     x: '
 ]
</code></pre>
<p>Why not push it the other way, and say that void states are isotopic?</p>
<p><strong>One key value of saying that void states are "ordinary" is that it means they have an isotopic form, and that isotopic form is rendered as just <code>~</code>.</strong></p>
<p>This isotopic void state of <strong><code>~</code></strong> is being used as the "truly unset" state.  An even meaner idea of complete absence of value than void.  I'm of the belief that it's important to have this not be the same thing as void, because the tolerance of void by so many constructs (including things like ANY and ALL to skip them, or opting out of APPENDs, or making SELECTs just return a null).</p>
<p>The design of the system is such that the quote byte of 0 means isotopic status (e.g. "quote level negative 1" is represented by 0), and the void type is a 0 byte.  So you can memset() an area to 0 and get all unset states (typically an optimized operation).  And the operating system clears all memory to 0 before giving it to your application as well.  It's kind of pleasing that such a representation gives you a nice unset state.</p>
<p>It seems to me that the pieces of the puzzle fit together better this way.</p>
          <p><a href="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989/2</link>
        <pubDate>Tue, 25 Oct 2022 13:14:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1989-2</guid>
        <source url="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989.rss">~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</source>
      </item>
      <item>
        <title>~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The concept of having isotopic <strong>~true~</strong> and <strong>~false~</strong> as WORD! isotopes instead of having a distinct LOGIC! type is admittedly somewhat weird.  It means they can't be put in blocks and need some sort of transformation if they're going to be put into blocks.</p>
<ul>
<li>
<p>The generic and reversible way to make them real it is to META them and get <code>~true~</code> and <code>~false~</code> quasiforms, which you can UNMETA back to the isotopes</p>
</li>
<li>
<p>The readable way to make them real is to REIFY them and get <code>true</code> and <code>false</code> as plain WORD!, which only gets turned back into the isotope form if they are bound to variables that hold the isotopes, and you evaluate them.</p>
</li>
<li>
<p>Your circumstance may mean that neither of those choices are what you want when in a situation where the isotopes can't work...maybe it means you have to rethink what you're doing, or maybe you want some other transformation.  It's good to be alerted to the fact that it's dodgy to put what you think of as a "logic" in a reified context.</p>
</li>
</ul>
<p>One should note that Lisp has no false at all, only NIL for false (since everything else is truthy, you could use anything else for true, but they have T predefined).  But their NIL isn't isotopic--so it can appear in lists literally.</p>
<p>And as I've repeatedly pointed out, Redbol's historical choice to render LOGIC! conflated with the words <code>true</code> and <code>false</code> (instead of <code>#[true]</code> and <code>#[false]</code>) shows a desire to avoid the logic literals "escaping" into the reified consciousness of the user.  Making the logic forms actually impossible to put into blocks without a conscious transformation feels like it's good.</p>
<p>I know it's a strange choice, but it's seeming like it fits with the territory.  It's a sort of tradeoff you need when you choose to be firm that TRUE and FALSE are redefinable words and not lexical forms of logic constants.</p>
<h2>So... Why Shouldn't NULL Be Done With <code>~null~</code> isotope ?</h2>
<p>Right now what I call "null" is isotopic BLANK!.  It is not pretty looking:</p>
<pre><code>&gt;&gt; null
== ~_~  ; isotope

&gt;&gt; _
== ~_~  ; isotope
</code></pre>
<p>But what <em>is</em> pretty looking is that if you assign a bunch of variables to null, the fact that blanks evaluate to the null isotope gives a great visibility to where the actual values to pay attention to are:</p>
<pre><code>obj: make object! [
    alpha: _
    beta: _
    delta: true
    epsilon: ~
    gamma: "nutty"
    rho: _
    omega: 'now
 ]
</code></pre>
<p>If we used a word isotope, then at source level we're writing:</p>
<pre><code>obj: make object! [
    alpha: null
    beta: null
    delta: true
    epsilon: ~
    gamma: "nutty"
    rho: null
    omega: 'now
 ]
</code></pre>
<p>And if we view it after evaluation that fetches (<code>null</code> =&gt; <code>~null~  ; isotope</code>), it gets uglier:</p>
<pre><code>make object! [
    alpha: ~null~
    beta: ~null~
    delta: ~true~
    epsilon: ~
    gamma: "nutty"
    rho: ~null~
    omega: 'now
 ]
</code></pre>
<p>We can't show it as the WORD! null because there's no guarantee that word always will evaluate back to the null isotope.  But the concept is that since BLANK! can't be redefined, we can put it in an evaluative context as a substitute for <code>~_~</code> if we want.</p>
<p>If we were "more honest" and just META'd the isotopic blank, we'd get renders like:</p>
<pre><code>make object! [
    alpha: ~_~
    beta: ~_~
    delta: ~true~
    epsilon: ~
    gamma: "nutty"
    rho: ~_~
    omega: 'now
 ]
</code></pre>
<p>But I might actually like that less than seeing <strong><code>~null~</code></strong> there.</p>
<h2>Things To Weigh In This Consideration</h2>
<p>I'm really torn.  Certainly having people be able to see ~null~ written out as a word corresponds to what we want to refer to the state as.  We aren't going to replace people's vernacular to say "isotopic blank" instead of null.  And trying to teach people "isotopic blank is null" is an uphill battle.</p>
<p>Let's look back at that seemingly beautiful situation with all the blanks-to-nulls at source level:</p>
<pre><code>obj: make object! [
    alpha: _
    beta: _
    delta: true
    epsilon: ~
    gamma: "nutty"
    rho: _
    omega: 'now
 ]
</code></pre>
<p>But, hmmm.  The <strong><code>~</code></strong> is now an assignable state meaning variable is not set.  How often will you want to set something to NULL...which won't generate an error on access like being unset would, but is falsey and can't be passed to many routines without a MAYBE?</p>
<p><strong>Statistically, we might often have a situation where NULL is the minority initialization, more like this:</strong></p>
<pre><code>obj: make object! [
    alpha: ~
    beta: ~
    delta: true
    epsilon: null
    gamma: "nutty"
    rho: ~
    omega: 'now
 ]
</code></pre>
<p>My point is that intentionally initializing things to null may not be as common as setting to an error-provoking unset state.  And when null happens it may be just as noteworthy to call out as setting something to true or false.</p>
<h2>Are There Technical Barriers To This?</h2>
<p>It has some of the same problems as having to deal with the type checking of LOGIC! actually being an isotopic subclass of two words.  It means <code>&lt;opt&gt;</code> is an isotopic subclass of one word, so there's no specific null datatype.  :-/</p>
<p>I was already saying that TYPE OF NULL was probably an error, and TYPE OF MAYBE NULL would be void... anyway, this fits into some of the same type issues that logic has.</p>
<p>Previously NULL cells held nothing, so I'd put a payload of the file and line that were in effect in the evaluator.  This was supposed to give better errors about where a null originated from.  This could still be done if NULL was a special case of WORD! isotope that said it was null via a flag vs. storing the symbol, but could be complicated.  None of the better error mechanics were done yet.</p>
<p><strong>My general intuition is that from a user's standpoint, it's an uphill battle to teach them isotopic blank is something called "null"... and that the majority of technical problems that are involved in making NULL be a word isotope are problems that have to be tackled anyway with true and false as word isotopes.</strong></p>
<p>Additionally, I've written about my desire for BLANK!s to serve in dialects as spaces.  That gets very screwed by the (<strong><code>_</code></strong> =&gt; <strong><code>~_~</code>  ; isotope</strong>) evaluation.  Recovering blank for space intent would be good.</p>
<p>I'm going to likely give it a shot, when I get some programming time again, hopefully soon.</p>
          <p><a href="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989/1</link>
        <pubDate>Tue, 25 Oct 2022 04:07:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1989-1</guid>
        <source url="https://forum.rebol.info/t/null-word-isotope-vs-blank-isotope-meaning-null/1989.rss">~null~ WORD! isotope vs. BLANK! isotope ~_~ meaning null</source>
      </item>
  </channel>
</rss>
