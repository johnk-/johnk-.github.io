<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Different Environment Lookup for WORD! vs. SET-WORD!</title>
    <link>https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115</link>
    <description>[quote=&quot;hostilefork, post:1, topic:1751&quot;]
people might say that the Xs and Ys can all resolve to something different.

    &gt;&gt; print [x x x y y y]
    10 20 &quot;foo&quot; 30 40 &quot;bar&quot;

I find it personally frustrating when this is pronounced with glee
(...)
 If you received a BLOCK! and wanted to go through and say that every SET-WORD! that starts with a vowel is going to be bound to some new object, but others will be left as-is, you can do that.
[/quote]

In thinking about whether or not there&#39;s something intrinsically necessary about a per-block (or per-group) differentiation of word-binding, I thought of a case where I&#39;d used this.

In SPECIALIZE, it only binds the SET-WORD!s to the frame you are specializing.  Regular words (and anything else, refinements, etc.) are left bound as they were:

    &gt;&gt; value: [d e]

    &gt;&gt; apde: specialize :append [
           value: value  ; SET-WORD! is bound to specialization&#39;s frame
       ]

    &gt;&gt; apde [a b c]
    == [a b c [d e]]

This saves you from the COMPOSE step you&#39;d need otherwise, which is what you have to do with objects:

    &gt;&gt; value: [d e]

    &gt;&gt; obj: make object! [value: value]
    ** Script Error: value is ~ isotope

    &gt;&gt; obj: make object! compose [value: (value)]
    == make object! [
        value: [d e]
    ]

**I&#39;m not sure it&#39;s a critical feature to preserve.**  If it turned out some alternative conception of binding wouldn&#39;t permit the inconsistency... and that conception offered some great advantage... I&#39;d be willing to lose it.  There are legitimate arguments against doing such trickery behind people&#39;s backs, maybe the COMPOSE helps you keep it straight:

    &gt;&gt; value: [d e]

    &gt;&gt; ap5: specialize :append [
           value: 5
           assert [value = 5]  ; assertion failure, but I just set it!
       ]

But I wanted to catalog it as a case of &quot;arbitrary binding logic&quot; that&#39;s in place at present.</description>
    
    <lastBuildDate>Sat, 13 Jan 2024 02:07:38 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Different Environment Lookup for WORD! vs. SET-WORD!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were merged into an existing topic: <a href="https://forum.rebol.info/t/what-dialects-need-from-binding/2111/9">What Dialects Need From Binding</a></p>
          <p><a href="https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115/4</link>
        <pubDate>Sat, 13 Jan 2024 02:13:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2115-4</guid>
        <source url="https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115.rss">Different Environment Lookup for WORD! vs. SET-WORD!</source>
      </item>
      <item>
        <title>Different Environment Lookup for WORD! vs. SET-WORD!</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>One thing you’ve glossed over… at least in my presentation, individual words can still receive bindings! (Even though they’re unbound by default.) So it’s still possible to traverse over the BLOCK binding all the SET-WORD!s as you go. It <em>would</em> require a traverse, but it’s possible if this is really something worth preserving.</p>
          <p><a href="https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115/3</link>
        <pubDate>Sat, 13 Jan 2024 01:59:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2115-3</guid>
        <source url="https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115.rss">Different Environment Lookup for WORD! vs. SET-WORD!</source>
      </item>
      <item>
        <title>Different Environment Lookup for WORD! vs. SET-WORD!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2115">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>I'm not sure it's a critical feature to preserve.</strong> If it turned out some alternative conception of binding wouldn't permit the inconsistency... and that conception offered some great advantage... I'd be willing to lose it.</p>
</blockquote>
</aside>
<p>The way this feature is accomplished today isn't by deep-walking the block and binding SET-WORD!s and WORD!s differently.  It's with a specifier "instruction" that is put in the chain that says <em>"propagate a binding, but only for SET-WORD!s"</em>.  It propagates down through the evaluator as each block is extracted.</p>
<p>There's no user exposure of that feature... it's something that only SPECIALIZE (and the esoteric APPLIQUE) can do at the moment.</p>
<p><a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a> has stated aspirations to make environments/specifiers "first class values", so instructions like this for hole-punching, or narrowing the categories of words...would make those values weirder.</p>
<p>I've thought to conceptualize "coalesced binding" (now manifest as IN) as basically just a function: I give you something that may or may not be bound already with some shape of that binding, you give me a newly shaped thing.  This newly shaped thing is a "binding machine" that needs to know how to do two things:</p>
<ol>
<li>
<p>coalesce with another environment</p>
</li>
<li>
<p>turn a value into something that can be looked up with GET and assigned with SET, or leave it alone</p>
</li>
</ol>
<p>We'll be discussing this more... but it's within the realm of possibility to say that the ultimate desired implementation will be able to target discerned binding in the vein of this "SET-WORD!-only" rule.</p>
<p>Regardless, the mechanism from today should keep working when I take a second shot at "pure virtual binding" using the new perspectives <a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a> and I have been hammering out.  <em>(The trick will be rewriting all the usermode dialects to use IN everywhere...correctly.)</em></p>
<h2><a name="p-6964-but-just-because-we-can-do-this-should-specialize-do-it-1" class="anchor" href="https://forum.rebol.info#p-6964-but-just-because-we-can-do-this-should-specialize-do-it-1"></a>But Just Because We Can Do This, Should SPECIALIZE Do It?</h2>
<p>I wanted to break this out into a separate topic to specifically discuss the question of if this is a good idea or not.</p>
<p>I've pointed out something that doesn't have such a good look:</p>
<pre><code>&gt;&gt; value: [d e]

&gt;&gt; ap5: specialize :append [
       value: 5
       assert [value = 5]  ; assertion failure, but I just set it!
   ]
</code></pre>
<p>We're embracing the idea that in a pinch, you can go to the level of binding things explicitly wherever you want to, but should basic constructs avoid being this weird?</p>
<p>There are places in other languages where kind of parallel things are seen as advantageous:</p>
<pre><code> struct Foo {
     int x;
     Foo (int x) : x {x} {
         // x {x} initializes member x with constructor's argument
     }
 };
</code></pre>
<p>I'm kind of ambivalent about it in SPECIALIZE.  It's sneaky.  But when I think about striking it, I think about how annoying the need for a COMPOSE is.</p>
          <p><a href="https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115/2</link>
        <pubDate>Sat, 13 Jan 2024 01:37:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2115-2</guid>
        <source url="https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115.rss">Different Environment Lookup for WORD! vs. SET-WORD!</source>
      </item>
      <item>
        <title>Different Environment Lookup for WORD! vs. SET-WORD!</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1751">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/rebol-and-scopes-well-why-not/1751/1">Rebol And Scopes: Well, Why Not?</a></div>
<blockquote>
<p>people might say that the Xs and Ys can all resolve to something different.</p>
<pre><code>&gt;&gt; print [x x x y y y]
10 20 "foo" 30 40 "bar"
</code></pre>
<p>I find it personally frustrating when this is pronounced with glee<br>
(...)<br>
If you received a BLOCK! and wanted to go through and say that every SET-WORD! that starts with a vowel is going to be bound to some new object, but others will be left as-is, you can do that.</p>
</blockquote>
</aside>
<p>In thinking about whether or not there's something intrinsically necessary about a per-block (or per-group) differentiation of word-binding, I thought of a case where I'd used this.</p>
<p>In SPECIALIZE, it only binds the SET-WORD!s to the frame you are specializing.  Regular words (and anything else, refinements, etc.) are left bound as they were:</p>
<pre><code>&gt;&gt; value: [d e]

&gt;&gt; apde: specialize :append [
       value: value  ; SET-WORD! is bound to specialization's frame
   ]

&gt;&gt; apde [a b c]
== [a b c [d e]]
</code></pre>
<p>This saves you from the COMPOSE step you'd need otherwise, which is what you have to do with objects:</p>
<pre><code>&gt;&gt; value: [d e]

&gt;&gt; obj: make object! [value: value]
** Script Error: value is ~ isotope

&gt;&gt; obj: make object! compose [value: (value)]
== make object! [
    value: [d e]
]
</code></pre>
<p><strong>I'm not sure it's a critical feature to preserve.</strong>  If it turned out some alternative conception of binding wouldn't permit the inconsistency... and that conception offered some great advantage... I'd be willing to lose it.  There are legitimate arguments against doing such trickery behind people's backs, maybe the COMPOSE helps you keep it straight:</p>
<pre><code>&gt;&gt; value: [d e]

&gt;&gt; ap5: specialize :append [
       value: 5
       assert [value = 5]  ; assertion failure, but I just set it!
   ]
</code></pre>
<p>But I wanted to catalog it as a case of "arbitrary binding logic" that's in place at present.</p>
          <p><a href="https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115/1</link>
        <pubDate>Sat, 11 Nov 2023 23:02:07 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2115-1</guid>
        <source url="https://forum.rebol.info/t/different-environment-lookup-for-word-vs-set-word/2115.rss">Different Environment Lookup for WORD! vs. SET-WORD!</source>
      </item>
  </channel>
</rss>
