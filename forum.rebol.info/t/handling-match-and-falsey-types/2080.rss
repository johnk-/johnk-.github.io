<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Handling MATCH and &quot;Falsey&quot; Types</title>
    <link>https://forum.rebol.info/t/handling-match-and-falsey-types/2080</link>
    <description>MATCH has a fundamental safety issue:

    &gt;&gt; match [&lt;opt&gt; integer!] 3
    == 3

    &gt;&gt; match [&lt;opt&gt; integer!] &quot;notaninteger&quot;
    ; null

    &gt;&gt; match [&lt;opt&gt; integer!] null
    == ???

This returns &quot;heavy null&quot;.  Once upon a time, heavy null was not auto-decayed when passed to functions like IF:

    &gt;&gt; if (match [&lt;opt&gt; integer!] null) [print &quot;Yes it matched!&quot;]
    ** Error: IF does not accept heavy null without a ^META condition

But it came to be that for general ergonomics, heavy nulls had to decay to plain nulls when passed to normal parameters.  Otherwise, they would be too invasive.

So for now, a &quot;passing null&quot; is conflated with a &quot;didn&#39;t pass&quot; signal.  It will work with THEN, but be incorrect with IF.

# So What To Do About MATCH and its bretheren?

Seems the alternative options are:

1. *Don&#39;t worry about it.*  If you write **match [logic!] 1 = 2** you get back a **~false~** isotope and should you write an expression like **if (match [logic!] 1 = 2) [print &quot;Match!]** you get what you deserve.

2. *Use a different isotope.*  Let&#39;s say that **`match [&lt;opt&gt;] null`** is simply **~matched~ (isotope)**.  It wouldn&#39;t have the decaying property, but would have the invalidness property of not being logic testable

3. *Have a MATCH/FALSEY variant.*  Let plain **match** on a falsey thing trigger an error and if you write **if match/falsey ...** then you clearly do know what you&#39;re doing so it becomes like case (1).

4. *Make all conditional arguments take ^META arguments for their conditions.*  This would put the responsibility for checking for isotopes on them, and they&#39;d uniquely disallow them before UNMETA&#39;ing them and then testing for truth/falsehood.

Option (4) is too taxing...impacting not just the interface to IF but the implementation of CASE and any conditional construct.

(3) punts the ball down the road a bit, but might not suit Chris.

## Option 5. [Adjust `(DID ...)` as isotope-tolerant `(NOT NULL? ...)`](https://forum.rebol.info/t/dropping-find-while-if-unless-select-etc/498/2?u=hostilefork)

Another answer...

If you find yourself in a situation where isotopes are giving you a problem, switch to **did match** (or decay match, if you&#39;re trying to get the value and not test it as a condition)

*I wouldn&#39;t reach for this by default.*  You&#39;re fine most of the time... if your MATCH doesn&#39;t contain `[&lt;opt&gt; logic! blank!]`.  It&#39;s only these quirky edge cases where it&#39;s better to let the isotopes give you a localized and clear error than wind up on a wild goose chase for why the program is acting strangely.

Beginners might be cautious and write things like **did match** or **did parse** all over the place, if they&#39;re scared of missing a case.  But there&#39;s no need to write **if did match integer! value**, because you&#39;re testing for a value that can&#39;t possibly be false...it&#39;s an integer! or null.  Experts would use it sparingly, in cases like **if match typeset value**, in case the typeset gets expanded into things including falsey values, when you&#39;re not fully cognizant of that happening.

This broadens the service of DID across the board, to do what it was originally intended to do: transform functions that return non-LOGIC! values and NULL as soft failure to give logic results.  It can handle historical edge cases with an elegant touch, without burdening code that knows itself well enough to not hit those cases.</description>
    
    <lastBuildDate>Thu, 14 Dec 2023 20:58:25 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/handling-match-and-falsey-types/2080.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Handling MATCH and &quot;Falsey&quot; Types</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="IngoHohmann" data-post="2" data-topic="2080">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/ingohohmann/40/195_2.png" class="avatar"> IngoHohmann:</div>
<blockquote>
<p>one less case to worry about.</p>
</blockquote>
</aside>
<p>I think we can get all the same errors for catching people who don't know what they're doing... but without the isotopic runaround:</p>
<p><em><strong>Just say MATCH doesn't match NULL at all (have it error on null input)...but then make it follow the VOID-in-NULL-outconvention.</strong></em></p>
<p>So if you want a NULL =&gt; NULL conflation, then instead of writing this:</p>
<pre><code>match [&lt;opt&gt; integer! text!] var-might-be-null
</code></pre>
<p>You write this:</p>
<pre><code>match [integer! text!] maybe var-might-be-null
</code></pre>
<p>On the other hand, if you are doing something like an <strong><code>if match</code></strong> where all you want to know is if it was in the set, you can reify it and test on blank:</p>
<pre><code> if match [blank! integer! text!] reify var-might-be-null [...]
</code></pre>
<p><em>With blank being truthy, that gets you the answer you want.</em></p>
          <p><a href="https://forum.rebol.info/t/handling-match-and-falsey-types/2080/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/handling-match-and-falsey-types/2080/4</link>
        <pubDate>Mon, 29 Aug 2022 15:56:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2080-4</guid>
        <source url="https://forum.rebol.info/t/handling-match-and-falsey-types/2080.rss">Handling MATCH and &quot;Falsey&quot; Types</source>
      </item>
      <item>
        <title>Handling MATCH and &quot;Falsey&quot; Types</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Yup, good point.</p>
<p>Changing DEFAULT to not consider BLANK! is an obvious enough improvement to go ahead and do it--the truthy/falsey status notwithstanding.</p>
          <p><a href="https://forum.rebol.info/t/handling-match-and-falsey-types/2080/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/handling-match-and-falsey-types/2080/3</link>
        <pubDate>Thu, 25 Aug 2022 16:08:34 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2080-3</guid>
        <source url="https://forum.rebol.info/t/handling-match-and-falsey-types/2080.rss">Handling MATCH and &quot;Falsey&quot; Types</source>
      </item>
      <item>
        <title>Handling MATCH and &quot;Falsey&quot; Types</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>... and if blank! becomes truthy as per your other post thereâ€™s one less case to worry about.</p>
          <p><a href="https://forum.rebol.info/t/handling-match-and-falsey-types/2080/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/handling-match-and-falsey-types/2080/2</link>
        <pubDate>Thu, 25 Aug 2022 15:53:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2080-2</guid>
        <source url="https://forum.rebol.info/t/handling-match-and-falsey-types/2080.rss">Handling MATCH and &quot;Falsey&quot; Types</source>
      </item>
      <item>
        <title>Handling MATCH and &quot;Falsey&quot; Types</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>MATCH has a fundamental safety issue:</p>
<pre><code>&gt;&gt; match [&lt;opt&gt; integer!] 3
== 3

&gt;&gt; match [&lt;opt&gt; integer!] "notaninteger"
; null

&gt;&gt; match [&lt;opt&gt; integer!] null
== ???
</code></pre>
<p>This returns "heavy null".  Once upon a time, heavy null was not auto-decayed when passed to functions like IF:</p>
<pre><code>&gt;&gt; if (match [&lt;opt&gt; integer!] null) [print "Yes it matched!"]
** Error: IF does not accept heavy null without a ^META condition
</code></pre>
<p>But it came to be that for general ergonomics, heavy nulls had to decay to plain nulls when passed to normal parameters.  Otherwise, they would be too invasive.</p>
<p>So for now, a "passing null" is conflated with a "didn't pass" signal.  It will work with THEN, but be incorrect with IF.</p>
<h1>
<a name="so-what-to-do-about-match-and-its-bretheren-1" class="anchor" href="https://forum.rebol.info#so-what-to-do-about-match-and-its-bretheren-1"></a>So What To Do About MATCH and its bretheren?</h1>
<p>Seems the alternative options are:</p>
<ol>
<li>
<p><em>Don't worry about it.</em>  If you write <strong>match [logic!] 1 = 2</strong> you get back a <strong>~false~</strong> isotope and should you write an expression like <strong>if (match [logic!] 1 = 2) [print "Match!]</strong> you get what you deserve.</p>
</li>
<li>
<p><em>Use a different isotope.</em>  Let's say that <strong><code>match [&lt;opt&gt;] null</code></strong> is simply <strong>~matched~ (isotope)</strong>.  It wouldn't have the decaying property, but would have the invalidness property of not being logic testable</p>
</li>
<li>
<p><em>Have a MATCH/FALSEY variant.</em>  Let plain <strong>match</strong> on a falsey thing trigger an error and if you write <strong>if match/falsey ...</strong> then you clearly do know what you're doing so it becomes like case (1).</p>
</li>
<li>
<p><em>Make all conditional arguments take ^META arguments for their conditions.</em>  This would put the responsibility for checking for isotopes on them, and they'd uniquely disallow them before UNMETA'ing them and then testing for truth/falsehood.</p>
</li>
</ol>
<p>Option (4) is too taxing...impacting not just the interface to IF but the implementation of CASE and any conditional construct.</p>
<p>(3) punts the ball down the road a bit, but might not suit Chris.</p>
<h2>
<a name="option-5-adjust-did-as-isotope-tolerant-not-null-httpsforumrebolinfotdropping-find-while-if-unless-select-etc4982uhostilefork-2" class="anchor" href="https://forum.rebol.info#option-5-adjust-did-as-isotope-tolerant-not-null-httpsforumrebolinfotdropping-find-while-if-unless-select-etc4982uhostilefork-2"></a>Option 5. <a href="https://forum.rebol.info/t/dropping-find-while-if-unless-select-etc/498/2">Adjust <code>(DID ...)</code> as isotope-tolerant <code>(NOT NULL? ...)</code></a>
</h2>
<p>Another answer...</p>
<p>If you find yourself in a situation where isotopes are giving you a problem, switch to <strong>did match</strong> (or decay match, if you're trying to get the value and not test it as a condition)</p>
<p><em>I wouldn't reach for this by default.</em>  You're fine most of the time... if your MATCH doesn't contain <code>[&lt;opt&gt; logic! blank!]</code>.  It's only these quirky edge cases where it's better to let the isotopes give you a localized and clear error than wind up on a wild goose chase for why the program is acting strangely.</p>
<p>Beginners might be cautious and write things like <strong>did match</strong> or <strong>did parse</strong> all over the place, if they're scared of missing a case.  But there's no need to write <strong>if did match integer! value</strong>, because you're testing for a value that can't possibly be false...it's an integer! or null.  Experts would use it sparingly, in cases like <strong>if match typeset value</strong>, in case the typeset gets expanded into things including falsey values, when you're not fully cognizant of that happening.</p>
<p>This broadens the service of DID across the board, to do what it was originally intended to do: transform functions that return non-LOGIC! values and NULL as soft failure to give logic results.  It can handle historical edge cases with an elegant touch, without burdening code that knows itself well enough to not hit those cases.</p>
          <p><a href="https://forum.rebol.info/t/handling-match-and-falsey-types/2080/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/handling-match-and-falsey-types/2080/1</link>
        <pubDate>Sun, 15 May 2022 08:44:26 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2080-1</guid>
        <source url="https://forum.rebol.info/t/handling-match-and-falsey-types/2080.rss">Handling MATCH and &quot;Falsey&quot; Types</source>
      </item>
  </channel>
</rss>
