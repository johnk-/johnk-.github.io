<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Clarity + Brevity vs. NULL, BLANK, NOTHING, VOID...</title>
    <link>https://forum.rebol.info/t/clarity-brevity-vs-null-blank-nothing-void/1884</link>
    <description>@hostilefork says:

&gt; I think any illusions of Ren-C being able to bring evaluator &quot;safety&quot; to a fundamentally unsafe language are being stripped away with time.  Instead, what&#39;s actually happening is that the features are getting laser-calibrated to where an informed programmer can write short, correct, code easily... the right thing is the short thing, not something riddled with edge-case handling.
&gt; 
&gt; Clarity is a *catalyst* for safety in a language.  But beyond that, the bias seems tipping ever toward being clean and powerful enough to [&quot;make your own you-made-a-mistake-catching-safety mechanisms&quot;](https://forum.rebol.info/t/make-your-own-safety/1118)...

Clarity and brevity are two fundamental qualities of good writing. I think that applies to programming as well. Also 4 concepts so close (NULL, BLANK!, NOTHING and VOID), make me look for a fundamental problem in the language, or they do not have adequate names.

I do not quite understand the usefulness of these 4 variants but should not there be one, or several but named to make understand to which functionalities of the language they relate (block, value, refinement ...)? Maybe I get it wrong.</description>
    
    <lastBuildDate>Tue, 17 Sep 2024 12:08:26 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://forum.rebol.info/t/clarity-brevity-vs-null-blank-nothing-void/1884.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Clarity + Brevity vs. NULL, BLANK, NOTHING, VOID...</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="LkpPo" data-post="1" data-topic="1884">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/lkppo/48/213_2.png" class="avatar"> LkpPo:</div>
<blockquote>
<p>Also 4 concepts so close (NULL, BLANK!, NONE! and VOID!), make me look for a fundamental problem in the language, or they do not have adequate names.</p>
</blockquote>
</aside>
<p><em>"I don't understand. There are just as many notes, Majesty, as are required. Neither more nor less."</em>  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p><a href="https://www.youtube.com/watch?v=H6_eqxh-Qok">Too Many Notes</a></p>

<hr>
<p><em>(<strong>2024 UPDATE:</strong> <strong><a href="https://forum.rebol.info/t/*what-are-null-void-nothing-blank-and-nihil/2283">Here's a more modern and coherent layout of the design points.</a></strong>.  Being able to edit the posts means I can make things look like they've always been that coherent--they certainly were not--if you want to see all the dead ends then <a href="https://forum.rebol.info/g/Archivists">join the Archivists group.</a>)</em></p>
<hr>
<p>Rebol2/Red/R3-Alpha all have basically two concepts: NONE! and UNSET!.  NONE! and Ren-C's BLANK! were supposed to be quite similar, just a different name.  But eventually NULL took over many of the duties of NONE! as an indicator of "soft failure" from a routine... like when a FIND can't find anything, or a conditional statement doesn't run any branches.  BLANK! sticks around as the solution to the problem of neutral placeholders in blocks.</p>
<p>What's happened is that these two ideas (NONE!/UNSET!) have become at least five...depending on how you count, maybe more!</p>
<ul>
<li>
<p><strong>NULL</strong> has properties unlike anything in Rebol2.  It cannot be put in a BLOCK!.  It is a transitional state representing nothing, like how a C null pointer doesn't point to any memory.  It is conditionally false if it appears in something like an IF statement, and it is the "soft failure" result indicating something didn't succeed e.g. a FIND that couldn't find what you were looking for, or a loop that BREAKs.</p>
</li>
<li>
<p><strong>BLANK!</strong> is a <a href="https://en.wikipedia.org/wiki/Unit_type">unit type</a>...e.g. a value of type blank holds no further information (than that it is of type blank).  Unlike NULL it's something that can appear in a block, and hence can be used as a placeholder--for instance if a block represents a record structure broken into N-element units, it could represent a missing field.  <em>(Update: Values of this type were once conditionally false, but it was later deemed better if they were not.)</em></p>
</li>
<li>
<p>Today's idea of VOID -- as promoted by <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> -- is as the absence of a value.  If you write <strong>append [a b c] void</strong> you will get <strong><code>[a b c]</code></strong> back (null would have given an error).  Among other things, it is result of an IF that does not run its branch.</p>
</li>
<li>
<p><strong>NOTHING</strong> replaces "unset" as the contents of an unset variable (in Ren-C's parlance, <em>variables</em> are unset, not values.).  Like null and void (<a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918">or any other antiforms</a>), it also cannot be put in blocks.</p>
</li>
<li>
<p><strong>NIHIL</strong> is an unstable antiform that can't be stored in a variable at all, but is a transient evaluative product discarded by the evaluator.  It's tricky to handle, but gives neat properties to be able to erase evaluations from an execution stream, e.g. so <strong><code>1 + 2 comment "hi"</code></strong> can synthesize <strong>3</strong>.</p>
</li>
</ul>
<aside class="quote no-group quote-modified" data-username="LkpPo" data-post="1" data-topic="1884">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/lkppo/48/213_2.png" class="avatar"> LkpPo:</div>
<blockquote>
<p><em>(should these types be...)</em> named to make understand to which functionalities of the language they relate (block, value, refinement...)</p>
</blockquote>
</aside>
<p>I think the names have ultimately settled down to work pretty well.  Particularly pleasing is that NULL is exposed in the API as C and JavaScript's NULL.  That has turned out to be very important.</p>
<p>Rebol2 always had trouble with <code>#[none]</code>-the-unit-value and none-the-word, frequently rendering it as looking like the word:</p>
<pre><code>rebol2&gt;&gt; find [a b c] 'd
== none  ; &lt;-- not a WORD!, but a #[none] literal rendered dishonestly
</code></pre>
<p>As mentioned, Ren-C's find returns the ~null~ antiform now...which is better.</p>
<p>But reserving plain old <strong><code>_</code></strong> so it's the literal form for a placeholder...and having it be named BLANK!...has felt pretty good.  But we're still in that stretch of time for evaluating decisions for their merit...</p>
          <p><a href="https://forum.rebol.info/t/clarity-brevity-vs-null-blank-nothing-void/1884/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/clarity-brevity-vs-null-blank-nothing-void/1884/2</link>
        <pubDate>Sun, 02 Jun 2019 02:42:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1884-2</guid>
        <source url="https://forum.rebol.info/t/clarity-brevity-vs-null-blank-nothing-void/1884.rss">Clarity + Brevity vs. NULL, BLANK, NOTHING, VOID...</source>
      </item>
      <item>
        <title>Clarity + Brevity vs. NULL, BLANK, NOTHING, VOID...</title>
        <dc:creator><![CDATA[LkpPo]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://forum.rebol.info/u/hostilefork">@hostilefork</a> says:</p>
<blockquote>
<p>I think any illusions of Ren-C being able to bring evaluator "safety" to a fundamentally unsafe language are being stripped away with time.  Instead, what's actually happening is that the features are getting laser-calibrated to where an informed programmer can write short, correct, code easily... the right thing is the short thing, not something riddled with edge-case handling.</p>
<p>Clarity is a <em>catalyst</em> for safety in a language.  But beyond that, the bias seems tipping ever toward being clean and powerful enough to <a href="https://forum.rebol.info/t/make-your-own-safety/1118">"make your own you-made-a-mistake-catching-safety mechanisms"</a>...</p>
</blockquote>
<p>Clarity and brevity are two fundamental qualities of good writing. I think that applies to programming as well. Also 4 concepts so close (NULL, BLANK!, NOTHING and VOID), make me look for a fundamental problem in the language, or they do not have adequate names.</p>
<p>I do not quite understand the usefulness of these 4 variants but should not there be one, or several but named to make understand to which functionalities of the language they relate (block, value, refinement ...)? Maybe I get it wrong.</p>
          <p><a href="https://forum.rebol.info/t/clarity-brevity-vs-null-blank-nothing-void/1884/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/clarity-brevity-vs-null-blank-nothing-void/1884/1</link>
        <pubDate>Sun, 02 Jun 2019 00:47:21 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1884-1</guid>
        <source url="https://forum.rebol.info/t/clarity-brevity-vs-null-blank-nothing-void/1884.rss">Clarity + Brevity vs. NULL, BLANK, NOTHING, VOID...</source>
      </item>
  </channel>
</rss>
