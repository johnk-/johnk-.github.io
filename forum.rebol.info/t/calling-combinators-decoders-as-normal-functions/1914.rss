<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Calling Combinators (Decoders?) as Normal Functions</title>
    <link>https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914</link>
    <description>A few times I&#39;ve talked about the potential of making it possible to call a COMBINATOR function from outside of PARSE.

This is to say that if some PARSE-specific parameter was missing (e.g. the &quot;parse state&quot;) there&#39;d be a mode in the guts of the COMBINATOR mechanic which cooked up something like a temporary parse session just for the input you passed in.

## Would It &quot;Combinate&quot; Parsers For You?

The situations I had in mind weren&#39;t really combinators that take parsers as parameters.  And now that I look at it, I think that suggests that... no, you probably shouldn&#39;t call these kinds of combinators outside of parse.

Here&#39;s one imagination of calling a combinator like SOME:

    &gt;&gt; [value rest]: some &quot;aaaabbb&quot; [repeat 2 &quot;a&quot;]
    == &quot;a&quot;

    &gt;&gt; value
    == &quot;a&quot;

    &gt;&gt; rest
    == &quot;bbb&quot;

This exposes how SOME is actually not arity-1.  Though it takes a &quot;combinated parser&quot; as a parameter, it also takes an INPUT...but that&#39;s usually implicit...specialized in by PARSE.  But calling directly from normal code it could offer that parameter being gathered normally.

it doesn&#39;t feel that compelling, since you&#39;re getting a synonym for:

    parse &quot;aaaabbb&quot; [some repeat 2 &quot;a&quot;]

But also, why would it take that interpretation instead of:

    parse &quot;aaaabbb&quot; [some ([repeat 2 &quot;a&quot;])]

One point of view would say it makes more sense to think of the expression as the product of evaluation, because the argument would presumably be otherwise evaluative:

    &gt;&gt; [value rest]: some &quot;aaaabbb&quot; append [repeat 2] &quot;a&quot;
    == ??? ; infinite loop?

But this would make rule-taking combinators nearly useless.

## It Was Suggested For Sharing &quot;Decoding&quot;, not &quot;Combinating&quot;

Seeing how SOME isn&#39;t a good example for this, maybe the right way of saying what I&#39;m trying to say here this is that there&#39;s some category of functions we might call &quot;decoders&quot;...and PARSE would be willing to call these.

They&#39;d fit a standard format regarding things like taking an input series and giving back an amount of progress or an error.  But they would not be passed something like the parser stack or have any automatic composition of parsers as arguments.

Plain decoding operations--like [ENBIN and DEBIN](https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270)--were the motivating cases:

    &gt;&gt; debin #{FEFFFF} [le + 3]
    == 16777214

    &gt;&gt; parse #{FEFFFFFEFFFF} [collect [keep debin [le + 3]]]
    == [16777214 16777214]

The idea here was that you could write one version of DEBIN, and it would be able to implicitly pick up the INPUT when used in PARSE.

But because the input is an implicit parameter that you get automatically for all &quot;decoders&quot;, then without extra information it would have to be at either the beginning or end of the parameter list.  Above it&#39;s at the beginning, which is different from how DEBIN was defined originally:

    &gt;&gt; debin [le + 3] #{FEFFFF}  ; original DEBIN design took dialect block first
    == 16777214

*(Note: I have a post about [parameter ordering](https://forum.rebol.info/t/parameter-order-in-rebol/1238) which questions the series-first model.)*

We could say that &quot;decoders&quot; have to manually mention their input parameter somewhere, and position it in the order that it would be consumed if it&#39;s used outside of PARSE...which would allow customization of this process.  It could default to being the first parameter if not positioned explicitly.  Not an idea-killer, in any case.

## If All The Input Wasn&#39;t Consumed, It Would Error

One idea of calling these decoders on arbitrary input could be that if the end of input was not reached, it would give an error:

    &gt;&gt; debin [le + 3] #{FEFFFF00}  ; asking for 3 bytes of decode, passed 4
    ** Error: DEBIN did not consume all input, request remainder if intentional

Asking for a remainder could prevent the error:

    &gt;&gt; [value rest]: debin [le + 3] #{FEFFFF00}
    == 16777214

    &gt;&gt; rest
    == #{00}

So this is kind of where the motivation is.  Once you&#39;ve written the decoder version of DEBIN, you have everything you need to run a DEBIN operation inside or outside of PARSE.  So why should you need to write a separate combinator and non-combinator form?

## I Was Thinking About This Now Because of TRY

I&#39;m putting together some thoughts where if TRY is the way you say it&#39;s okay if a combinator doesn&#39;t succeed in PARSE, what would the behavior be outside of PARSE?

Up until now we&#39;ve said that NULL is the reserved result for combinator failure.  But I&#39;ve put forth the idea that NULL might be a legitimate combinator result, and so definitional errors could be used to say that an operation did not meet its requirements.

So now...how about these &quot;decoders&quot;?  Should a decoder run in isolation raise an error if it doesn&#39;t work, or should it just return NULL?

**It seems clear that at least *some* operations should raise errors instead of passively returning NULL.**  If you ask to decode an invalid stream, it should be noisy about that failure.

I believe that some of these errors shouldn&#39;t be defused by TRY.  For instance, **debin #{FEFFFF} [banana + 3]**... that&#39;s an inability to understand what you&#39;re even asking.  To me this is on par with typos or passing invalid types; they are a sign of downright incorrect code, not the kind of thing that something like ATTEMPT should be able to ignore...much less should TRY quiet them.

## So...What Should Count As Things TRY Defuses?

At first, the TRY error was specifically tied to the idea of a special error that happened when inputs were NULL.  This required special code in the FUNC typechecking, because by default a typechecking error does not produce a definitional error that can be trapped with something like EXCEPT.

Now I&#39;ve expanded the idea that the word was short and useful enough that it might be used for any case where there were no adverse side effects, and a function wanted to say it simply couldn&#39;t do the thing it was asked to do.

Might we say that *all definitional errors* fit under this category?  That you shouldn&#39;t do **return raise [...]** unless the error can be swept under the rug by a TRY?  Does this suggest a &quot;value surrogate&quot; for TRY is a generic thing that any error can carry (if you TRY me, convert to this value).  Or is that just a characteristic of errors that TRY is willing to defuse?

As usual, more thought needed.  :face_with_head_bandage:</description>
    
    <lastBuildDate>Mon, 22 Aug 2022 13:09:13 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Calling Combinators (Decoders?) as Normal Functions</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A few times I've talked about the potential of making it possible to call a COMBINATOR function from outside of PARSE.</p>
<p>This is to say that if some PARSE-specific parameter was missing (e.g. the "parse state") there'd be a mode in the guts of the COMBINATOR mechanic which cooked up something like a temporary parse session just for the input you passed in.</p>
<h2>Would It "Combinate" Parsers For You?</h2>
<p>The situations I had in mind weren't really combinators that take parsers as parameters.  And now that I look at it, I think that suggests that... no, you probably shouldn't call these kinds of combinators outside of parse.</p>
<p>Here's one imagination of calling a combinator like SOME:</p>
<pre><code>&gt;&gt; [value rest]: some "aaaabbb" [repeat 2 "a"]
== "a"

&gt;&gt; value
== "a"

&gt;&gt; rest
== "bbb"
</code></pre>
<p>This exposes how SOME is actually not arity-1.  Though it takes a "combinated parser" as a parameter, it also takes an INPUT...but that's usually implicit...specialized in by PARSE.  But calling directly from normal code it could offer that parameter being gathered normally.</p>
<p>it doesn't feel that compelling, since you're getting a synonym for:</p>
<pre><code>parse "aaaabbb" [some repeat 2 "a"]
</code></pre>
<p>But also, why would it take that interpretation instead of:</p>
<pre><code>parse "aaaabbb" [some ([repeat 2 "a"])]
</code></pre>
<p>One point of view would say it makes more sense to think of the expression as the product of evaluation, because the argument would presumably be otherwise evaluative:</p>
<pre><code>&gt;&gt; [value rest]: some "aaaabbb" append [repeat 2] "a"
== ??? ; infinite loop?
</code></pre>
<p>But this would make rule-taking combinators nearly useless.</p>
<h2>It Was Suggested For Sharing "Decoding", not "Combinating"</h2>
<p>Seeing how SOME isn't a good example for this, maybe the right way of saying what I'm trying to say here this is that there's some category of functions we might call "decoders"...and PARSE would be willing to call these.</p>
<p>They'd fit a standard format regarding things like taking an input series and giving back an amount of progress or an error.  But they would not be passed something like the parser stack or have any automatic composition of parsers as arguments.</p>
<p>Plain decoding operations--like <a href="https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270">ENBIN and DEBIN</a>--were the motivating cases:</p>
<pre><code>&gt;&gt; debin #{FEFFFF} [le + 3]
== 16777214

&gt;&gt; parse #{FEFFFFFEFFFF} [collect [keep debin [le + 3]]]
== [16777214 16777214]
</code></pre>
<p>The idea here was that you could write one version of DEBIN, and it would be able to implicitly pick up the INPUT when used in PARSE.</p>
<p>But because the input is an implicit parameter that you get automatically for all "decoders", then without extra information it would have to be at either the beginning or end of the parameter list.  Above it's at the beginning, which is different from how DEBIN was defined originally:</p>
<pre><code>&gt;&gt; debin [le + 3] #{FEFFFF}  ; original DEBIN design took dialect block first
== 16777214
</code></pre>
<p><em>(Note: I have a post about <a href="https://forum.rebol.info/t/parameter-order-in-rebol/1238">parameter ordering</a> which questions the series-first model.)</em></p>
<p>We could say that "decoders" have to manually mention their input parameter somewhere, and position it in the order that it would be consumed if it's used outside of PARSE...which would allow customization of this process.  It could default to being the first parameter if not positioned explicitly.  Not an idea-killer, in any case.</p>
<h2>If All The Input Wasn't Consumed, It Would Error</h2>
<p>One idea of calling these decoders on arbitrary input could be that if the end of input was not reached, it would give an error:</p>
<pre><code>&gt;&gt; debin [le + 3] #{FEFFFF00}  ; asking for 3 bytes of decode, passed 4
** Error: DEBIN did not consume all input, request remainder if intentional
</code></pre>
<p>Asking for a remainder could prevent the error:</p>
<pre><code>&gt;&gt; [value rest]: debin [le + 3] #{FEFFFF00}
== 16777214

&gt;&gt; rest
== #{00}
</code></pre>
<p>So this is kind of where the motivation is.  Once you've written the decoder version of DEBIN, you have everything you need to run a DEBIN operation inside or outside of PARSE.  So why should you need to write a separate combinator and non-combinator form?</p>
<h2>I Was Thinking About This Now Because of TRY</h2>
<p>I'm putting together some thoughts where if TRY is the way you say it's okay if a combinator doesn't succeed in PARSE, what would the behavior be outside of PARSE?</p>
<p>Up until now we've said that NULL is the reserved result for combinator failure.  But I've put forth the idea that NULL might be a legitimate combinator result, and so definitional errors could be used to say that an operation did not meet its requirements.</p>
<p>So now...how about these "decoders"?  Should a decoder run in isolation raise an error if it doesn't work, or should it just return NULL?</p>
<p><strong>It seems clear that at least <em>some</em> operations should raise errors instead of passively returning NULL.</strong>  If you ask to decode an invalid stream, it should be noisy about that failure.</p>
<p>I believe that some of these errors shouldn't be defused by TRY.  For instance, <strong>debin #{FEFFFF} [banana + 3]</strong>... that's an inability to understand what you're even asking.  To me this is on par with typos or passing invalid types; they are a sign of downright incorrect code, not the kind of thing that something like ATTEMPT should be able to ignore...much less should TRY quiet them.</p>
<h2>So...What Should Count As Things TRY Defuses?</h2>
<p>At first, the TRY error was specifically tied to the idea of a special error that happened when inputs were NULL.  This required special code in the FUNC typechecking, because by default a typechecking error does not produce a definitional error that can be trapped with something like EXCEPT.</p>
<p>Now I've expanded the idea that the word was short and useful enough that it might be used for any case where there were no adverse side effects, and a function wanted to say it simply couldn't do the thing it was asked to do.</p>
<p>Might we say that <em>all definitional errors</em> fit under this category?  That you shouldn't do <strong>return raise [...]</strong> unless the error can be swept under the rug by a TRY?  Does this suggest a "value surrogate" for TRY is a generic thing that any error can carry (if you TRY me, convert to this value).  Or is that just a characteristic of errors that TRY is willing to defuse?</p>
<p>As usual, more thought needed.  <img src="https://forum.rebol.info/images/emoji/twitter/face_with_head_bandage.png?v=9" title=":face_with_head_bandage:" class="emoji" alt=":face_with_head_bandage:"></p>
          <p><a href="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/1</link>
        <pubDate>Mon, 15 Aug 2022 07:39:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1914-1</guid>
        <source url="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914.rss">Calling Combinators (Decoders?) as Normal Functions</source>
      </item>
  </channel>
</rss>
