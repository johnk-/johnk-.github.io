<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Calling Combinators (Decoders?) as Normal Functions</title>
    <link>https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914</link>
    <description>A few times I&#39;ve talked about the potential of making it possible to call a COMBINATOR function from outside of PARSE.

This is to say that if some PARSE-specific parameter was missing (e.g. the &quot;parse state&quot;) there&#39;d be a mode in the guts of the COMBINATOR mechanic which cooked up something like a temporary parse session just for the input you passed in.

## Would It &quot;Combinate&quot; Parsers For You?

The situations I had in mind weren&#39;t really combinators that take parsers as parameters.  And now that I look at it, I think that suggests that... no, you probably shouldn&#39;t call these kinds of combinators outside of parse.

Here&#39;s one imagination of calling a combinator like SOME:

    &gt;&gt; [value rest]: some &quot;aaaabbb&quot; [repeat 2 &quot;a&quot;]
    == &quot;a&quot;

    &gt;&gt; value
    == &quot;a&quot;

    &gt;&gt; rest
    == &quot;bbb&quot;

This exposes how SOME is actually not arity-1.  Though it takes a &quot;combinated parser&quot; as a parameter, it also takes an INPUT...but that&#39;s usually implicit...specialized in by PARSE.  But calling directly from normal code it could offer that parameter being gathered normally.

it doesn&#39;t feel that compelling, since you&#39;re getting a synonym for:

    parse &quot;aaaabbb&quot; [some repeat 2 &quot;a&quot;]

But also, why would it take that interpretation instead of:

    parse &quot;aaaabbb&quot; [some ([repeat 2 &quot;a&quot;])]

One point of view would say it makes more sense to think of the expression as the product of evaluation, because the argument would presumably be otherwise evaluative:

    &gt;&gt; [value rest]: some &quot;aaaabbb&quot; append [repeat 2] &quot;a&quot;
    == ??? ; infinite loop?

But this would make rule-taking combinators nearly useless.

## It Was Suggested For Sharing &quot;Decoding&quot;, not &quot;Combinating&quot;

Seeing how SOME isn&#39;t a good example for this, maybe the right way of saying what I&#39;m trying to say here this is that there&#39;s some category of functions we might call &quot;decoders&quot;...and PARSE would be willing to call these.

They&#39;d fit a standard format regarding things like taking an input series and giving back an amount of progress or an error.  But they would not be passed something like the parser stack or have any automatic composition of parsers as arguments.

Plain decoding operations--like [ENBIN and DEBIN](https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270)--were the motivating cases:

    &gt;&gt; debin #{FEFFFF} [le + 3]
    == 16777214

    &gt;&gt; parse #{FEFFFFFEFFFF} [collect [keep debin [le + 3]]]
    == [16777214 16777214]

The idea here was that you could write one version of DEBIN, and it would be able to implicitly pick up the INPUT when used in PARSE.

But because the input is an implicit parameter that you get automatically for all &quot;decoders&quot;, then without extra information it would have to be at either the beginning or end of the parameter list.  Above it&#39;s at the beginning, which is different from how DEBIN was defined originally:

    &gt;&gt; debin [le + 3] #{FEFFFF}  ; original DEBIN design took dialect block first
    == 16777214

*(Note: I have a post about [parameter ordering](https://forum.rebol.info/t/parameter-order-in-rebol/1238) which questions the series-first model.)*

We could say that &quot;decoders&quot; have to manually mention their input parameter somewhere, and position it in the order that it would be consumed if it&#39;s used outside of PARSE...which would allow customization of this process.  It could default to being the first parameter if not positioned explicitly.  Not an idea-killer, in any case.

## If All The Input Wasn&#39;t Consumed, It Would Error

One idea of calling these decoders on arbitrary input could be that if the end of input was not reached, it would give an error:

    &gt;&gt; debin [le + 3] #{FEFFFF00}  ; asking for 3 bytes of decode, passed 4
    ** Error: DEBIN did not consume all input, request remainder if intentional

Asking for a remainder could prevent the error:

    &gt;&gt; [value rest]: debin [le + 3] #{FEFFFF00}
    == 16777214

    &gt;&gt; rest
    == #{00}

So this is kind of where the motivation is.  Once you&#39;ve written the decoder version of DEBIN, you have everything you need to run a DEBIN operation inside or outside of PARSE.  So why should you need to write a separate combinator and non-combinator form?

As usual, more thought needed.  :face_with_head_bandage:</description>
    
    <lastBuildDate>Tue, 08 Oct 2024 13:10:51 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Calling Combinators (Decoders?) as Normal Functions</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="3" data-topic="1914">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>I think that, if I could design PARSE any way I wanted, I would do the following:</p>
<ul>
<li>Define a set of underlying parser combinators as ordinary functions with a standardised interface</li>
<li>Define the dialect as being ‘syntax sugar’ on top of those functions to make them easier to use</li>
</ul>
</blockquote>
</aside>
<p>I will point out that UPARSE builds on basics in ways that e.g. Red PARSE does not.  Consider:</p>
<pre><code>red&gt;&gt; find "abcd" ""
== none

red&gt;&gt; parse "abcd" ["" "abcd"]
== true
</code></pre>
<p>Is there a <strong><code>""</code></strong> at the beginning of <strong><code>"abcd"</code></strong> or is there not?  They have different answers because they don't run through a common code path.</p>
<p>UPARSE actually builds on FIND, and for this reason has a consistent answer:</p>
<pre><code>&gt;&gt; find "abcd" ""
; first in pack of length 2
== "abcd"

&gt;&gt; parse "abcd" ["" "abcd"]
== "abcd"
</code></pre>
<p>Note also that Ren-C FIND tells you the tail position of finds if you want it (that's why it's a pack).</p>
<pre><code>&gt;&gt; [pos tail]: find "abcd" "bc"
== "bcd"

&gt;&gt; tail
== d
</code></pre>
<p>So things are a step forward in that respect.</p>
<p>But I'm certainly willing to hear about ways to improve UPARSE's design.  Though the biggest question I've had since the beginning is whether there's any way to do streaming parse...and if we should be operating on a model where the parsers "put back" input they look at but don't consume:</p>
<p><a href="https://forum.rebol.info/t/parsing-giant-streams-without-consuming-tons-of-memory-how/1698" class="inline-onebox">Parsing Giant Streams Without Consuming Tons of Memory: How?</a></p>
          <p><a href="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/4</link>
        <pubDate>Tue, 08 Oct 2024 13:05:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1914-4</guid>
        <source url="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914.rss">Calling Combinators (Decoders?) as Normal Functions</source>
      </item>
      <item>
        <title>Calling Combinators (Decoders?) as Normal Functions</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="1914">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1914">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Seeing how SOME isn't a good example for this, maybe the right way of saying what I'm trying to say here this is that there's some category of functions we might call "decoders"...and PARSE would be willing to call these.</p>
<p>They'd fit a standard format regarding things like taking an input series and giving back an amount of progress or an error.</p>
</blockquote>
</aside>
<p>This idea has merit.</p>
</blockquote>
</aside>
<p>Note that this is precisely <a href="https://forum.rebol.info/t/haskell-parser-combinators/2173">how parser combinators work in Haskell</a>.</p>
<p>I think that, if I could design PARSE any way I wanted, I would do the following:</p>
<ul>
<li>Define a set of underlying parser combinators as ordinary functions with a standardised interface</li>
<li>Define the dialect as being ‘syntax sugar’ on top of those functions to make them easier to use</li>
</ul>
<p>This is basically the same principle Red uses for their GUI dialect, and I think it’s a good idea. The dialect makes ordinary usecases ergonomic, while the availability of the underlying functions means that you can integrate them into other parts of the language as needed.</p>
          <p><a href="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/3</link>
        <pubDate>Tue, 08 Oct 2024 04:20:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1914-3</guid>
        <source url="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914.rss">Calling Combinators (Decoders?) as Normal Functions</source>
      </item>
      <item>
        <title>Calling Combinators (Decoders?) as Normal Functions</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1914">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>A few times I've talked about the potential of making it possible to call a COMBINATOR function from outside of PARSE.</p>
<p>This is to say that if some PARSE-specific parameter was missing (e.g. the "parse state") there'd be a mode in the guts of the COMBINATOR mechanic which cooked up something like a temporary parse session just for the input you passed in.</p>
</blockquote>
</aside>
<p>So I think I've ruled out the concept of trying to do this with anything that "combinates".  It's too fuzzy what it would mean in terms of the arity of invocation.  Just call PARSE.</p>
<p>However...</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1914">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Seeing how SOME isn't a good example for this, maybe the right way of saying what I'm trying to say here this is that there's some category of functions we might call "decoders"...and PARSE would be willing to call these.</p>
<p>They'd fit a standard format regarding things like taking an input series and giving back an amount of progress or an error.</p>
</blockquote>
</aside>
<p>This idea has merit.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1914">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; debin [le + 3] #{FEFFFF00}  ; asking for 3 bytes of decode, passed 4
** Error: DEBIN did not consume all input, request remainder if intentional
</code></pre>
<p>Asking for a remainder could prevent the error:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; [value rest]: debin [le + 3] #{FEFFFF00}
== 16777214

&gt;&gt; rest
== #{00}
</code></pre>
</blockquote>
</aside>
<p>For reasons of composability, multi-return no longer lets the right hand side "see" what the left hand side requested.  <em>(You can read the <a href="https://forum.rebol.info/t/the-history-of-multi-return-in-ren-c/1134">long winding history</a> to understand why.)</em></p>
<p>So it's kind of like all of these would need to offer something like TRANSCODE's <strong><code>:next</code></strong> refinement.  And I think the convention for those functions returning the series as the primary result is sound.</p>
<pre><code>&gt;&gt; [rest value]: debin:next [le + 3] #{FEFFFF00}
== #{00}

&gt;&gt; value
== 16777214
</code></pre>
<p>PARSE would have to ask for the :NEXT to do its job.</p>
<h2><a name="p-7830-debin-seems-like-a-good-first-target-but-enbin-1" class="anchor" href="https://forum.rebol.info#p-7830-debin-seems-like-a-good-first-target-but-enbin-1"></a>DEBIN Seems Like A Good First Target.  But ENBIN?</h2>
<p>An encoder could be used in UPARSE as well, though its only real meaning would be to splice in data at the current position and then move the tail to after the splice.</p>
<p>You could do that with <strong><code>[insert (/your-encoding call-here)]</code></strong> as a parse rule, so it's not necessary to have access to the parsed series...unless you thought it would be more optimal to have <a href="https://forum.rebol.info/t/stopping-the-into-virus/705">the evil <strong>:INTO</strong></a> to say where to put the data...</p>
<p>Maybe encoders have an :INTO and that's what distinguishes them from ordinary run-of-the-mill functions, I don't know.</p>
<p>Anyway, just throwing a couple more thoughts in here...</p>
          <p><a href="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/2</link>
        <pubDate>Mon, 07 Oct 2024 18:15:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1914-2</guid>
        <source url="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914.rss">Calling Combinators (Decoders?) as Normal Functions</source>
      </item>
      <item>
        <title>Calling Combinators (Decoders?) as Normal Functions</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A few times I've talked about the potential of making it possible to call a COMBINATOR function from outside of PARSE.</p>
<p>This is to say that if some PARSE-specific parameter was missing (e.g. the "parse state") there'd be a mode in the guts of the COMBINATOR mechanic which cooked up something like a temporary parse session just for the input you passed in.</p>
<h2><a name="p-6238-would-it-combinate-parsers-for-you-1" class="anchor" href="https://forum.rebol.info#p-6238-would-it-combinate-parsers-for-you-1"></a>Would It "Combinate" Parsers For You?</h2>
<p>The situations I had in mind weren't really combinators that take parsers as parameters.  And now that I look at it, I think that suggests that... no, you probably shouldn't call these kinds of combinators outside of parse.</p>
<p>Here's one imagination of calling a combinator like SOME:</p>
<pre><code>&gt;&gt; [value rest]: some "aaaabbb" [repeat 2 "a"]
== "a"

&gt;&gt; value
== "a"

&gt;&gt; rest
== "bbb"
</code></pre>
<p>This exposes how SOME is actually not arity-1.  Though it takes a "combinated parser" as a parameter, it also takes an INPUT...but that's usually implicit...specialized in by PARSE.  But calling directly from normal code it could offer that parameter being gathered normally.</p>
<p>it doesn't feel that compelling, since you're getting a synonym for:</p>
<pre><code>parse "aaaabbb" [some repeat 2 "a"]
</code></pre>
<p>But also, why would it take that interpretation instead of:</p>
<pre><code>parse "aaaabbb" [some ([repeat 2 "a"])]
</code></pre>
<p>One point of view would say it makes more sense to think of the expression as the product of evaluation, because the argument would presumably be otherwise evaluative:</p>
<pre><code>&gt;&gt; [value rest]: some "aaaabbb" append [repeat 2] "a"
== ??? ; infinite loop?
</code></pre>
<p>But this would make rule-taking combinators nearly useless.</p>
<h2><a name="p-6238-it-was-suggested-for-sharing-decoding-not-combinating-2" class="anchor" href="https://forum.rebol.info#p-6238-it-was-suggested-for-sharing-decoding-not-combinating-2"></a>It Was Suggested For Sharing "Decoding", not "Combinating"</h2>
<p>Seeing how SOME isn't a good example for this, maybe the right way of saying what I'm trying to say here this is that there's some category of functions we might call "decoders"...and PARSE would be willing to call these.</p>
<p>They'd fit a standard format regarding things like taking an input series and giving back an amount of progress or an error.  But they would not be passed something like the parser stack or have any automatic composition of parsers as arguments.</p>
<p>Plain decoding operations--like <a href="https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270">ENBIN and DEBIN</a>--were the motivating cases:</p>
<pre><code>&gt;&gt; debin #{FEFFFF} [le + 3]
== 16777214

&gt;&gt; parse #{FEFFFFFEFFFF} [collect [keep debin [le + 3]]]
== [16777214 16777214]
</code></pre>
<p>The idea here was that you could write one version of DEBIN, and it would be able to implicitly pick up the INPUT when used in PARSE.</p>
<p>But because the input is an implicit parameter that you get automatically for all "decoders", then without extra information it would have to be at either the beginning or end of the parameter list.  Above it's at the beginning, which is different from how DEBIN was defined originally:</p>
<pre><code>&gt;&gt; debin [le + 3] #{FEFFFF}  ; original DEBIN design took dialect block first
== 16777214
</code></pre>
<p><em>(Note: I have a post about <a href="https://forum.rebol.info/t/parameter-order-in-rebol/1238">parameter ordering</a> which questions the series-first model.)</em></p>
<p>We could say that "decoders" have to manually mention their input parameter somewhere, and position it in the order that it would be consumed if it's used outside of PARSE...which would allow customization of this process.  It could default to being the first parameter if not positioned explicitly.  Not an idea-killer, in any case.</p>
<h2><a name="p-6238-if-all-the-input-wasnt-consumed-it-would-error-3" class="anchor" href="https://forum.rebol.info#p-6238-if-all-the-input-wasnt-consumed-it-would-error-3"></a>If All The Input Wasn't Consumed, It Would Error</h2>
<p>One idea of calling these decoders on arbitrary input could be that if the end of input was not reached, it would give an error:</p>
<pre><code>&gt;&gt; debin [le + 3] #{FEFFFF00}  ; asking for 3 bytes of decode, passed 4
** Error: DEBIN did not consume all input, request remainder if intentional
</code></pre>
<p>Asking for a remainder could prevent the error:</p>
<pre><code>&gt;&gt; [value rest]: debin [le + 3] #{FEFFFF00}
== 16777214

&gt;&gt; rest
== #{00}
</code></pre>
<p>So this is kind of where the motivation is.  Once you've written the decoder version of DEBIN, you have everything you need to run a DEBIN operation inside or outside of PARSE.  So why should you need to write a separate combinator and non-combinator form?</p>
<p>As usual, more thought needed.  <img src="https://forum.rebol.info/images/emoji/twitter/face_with_head_bandage.png?v=12" title=":face_with_head_bandage:" class="emoji" alt=":face_with_head_bandage:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914/1</link>
        <pubDate>Mon, 15 Aug 2022 07:39:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1914-1</guid>
        <source url="https://forum.rebol.info/t/calling-combinators-decoders-as-normal-functions/1914.rss">Calling Combinators (Decoders?) as Normal Functions</source>
      </item>
  </channel>
</rss>
