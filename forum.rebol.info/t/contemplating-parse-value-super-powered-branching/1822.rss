<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Contemplating PARSE-VALUE: Super-Powered Branching</title>
    <link>https://forum.rebol.info/t/contemplating-parse-value-super-powered-branching/1822</link>
    <description>Since PARSE is at heart a matching task, it seems there might be more accommodation when the input value is not a block... and you want to do some top level pattern matching.  Consider something like this:

    case [
         integer? item [
             print &quot;Not a series, so, have to write handling code here&quot;
         ]
         text? item [
             print &quot;A series, but maybe we want to do something else&quot;
         ]
         block? item [
             print &quot;Okay finally we can use the parse we mean...&quot;
             uparse item [...rules...]
         ]
    ] else [
       fail &quot;Whatever&quot;
    ]

When I see this I start thinking along these lines:

    parse reduce [item] [
         integer! (print &quot;More convenient, perhaps...&quot;)
             |
         text! (print &quot;Depends on the use case...&quot;)
             |
         subparse block! [
            (print &quot;Your rules here I guess...&quot;)
         ]
    ]  ; raises definitional error on no match, handle w/EXCEPT etc. if needed

Now imagine that being something like **PARSE-VALUE** instead of **PARSE REDUCE [ITEM]**...but with additional cleverness.

One aspect of being better would be that if your input was calculated, you could still call it up with `&lt;input&gt;` ... although that wouldn&#39;t be available to the code in groups automatically:

    &gt;&gt; parse-value 1 + 2 [integer! (print &quot;int&quot;) | text! (print &quot;text&quot;) || &lt;input&gt;]
    int
    == 3

    &gt;&gt; parse-value &quot;foo&quot; [integer! (print &quot;int&quot;) | text! (print &quot;text&quot;) || &lt;input&gt;]
    text
    == &quot;foo&quot;

But you&#39;re no worse off than in a switch statement that doesn&#39;t have calculated input captured under a name.  (Slightly better, in fact, since you have a means of calling up the calculated input.)

It&#39;s just a thought, because I&#39;ve seen this pattern several times: &quot;I have a decision tree but I can&#39;t start doing parsing until I have a series&quot;.  This is just an idea about stretching all the matching and extraction logic that is going to be needed in PARSE anyway to apply to single values.

## PARSE-VALUE or PARSE/VALUE

This strongly parallels the LOAD-VALUE vs. LOAD issue.  It seemed to make more sense in that case to separate it out so LOAD was fully generic and unconcerned with the /VALUE aspect.  This might or might not have the same rationale as to why PARSE shouldn&#39;t internally be concerned with the behavior.</description>
    
    <lastBuildDate>Fri, 13 Sep 2024 06:52:58 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/contemplating-parse-value-super-powered-branching/1822.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Contemplating PARSE-VALUE: Super-Powered Branching</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Since PARSE is at heart a matching task, it seems there might be more accommodation when the input value is not a block... and you want to do some top level pattern matching.  Consider something like this:</p>
<pre><code>case [
     integer? item [
         print "Not a series, so, have to write handling code here"
     ]
     text? item [
         print "A series, but maybe we want to do something else"
     ]
     block? item [
         print "Okay finally we can use the parse we mean..."
         uparse item [...rules...]
     ]
] else [
   fail "Whatever"
]
</code></pre>
<p>When I see this I start thinking along these lines:</p>
<pre><code>parse reduce [item] [
     integer! (print "More convenient, perhaps...")
         |
     text! (print "Depends on the use case...")
         |
     subparse block! [
        (print "Your rules here I guess...")
     ]
]  ; raises definitional error on no match, handle w/EXCEPT etc. if needed
</code></pre>
<p>Now imagine that being something like <strong>PARSE-VALUE</strong> instead of <strong>PARSE REDUCE [ITEM]</strong>...but with additional cleverness.</p>
<p>One aspect of being better would be that if your input was calculated, you could still call it up with <code>&lt;input&gt;</code> ... although that wouldn't be available to the code in groups automatically:</p>
<pre><code>&gt;&gt; parse-value 1 + 2 [integer! (print "int") | text! (print "text") || &lt;input&gt;]
int
== 3

&gt;&gt; parse-value "foo" [integer! (print "int") | text! (print "text") || &lt;input&gt;]
text
== "foo"
</code></pre>
<p>But you're no worse off than in a switch statement that doesn't have calculated input captured under a name.  (Slightly better, in fact, since you have a means of calling up the calculated input.)</p>
<p>It's just a thought, because I've seen this pattern several times: "I have a decision tree but I can't start doing parsing until I have a series".  This is just an idea about stretching all the matching and extraction logic that is going to be needed in PARSE anyway to apply to single values.</p>
<h2>
<a name="parse-value-or-parsevalue-1" class="anchor" href="https://forum.rebol.info#parse-value-or-parsevalue-1"></a>PARSE-VALUE or PARSE/VALUE</h2>
<p>This strongly parallels the LOAD-VALUE vs. LOAD issue.  It seemed to make more sense in that case to separate it out so LOAD was fully generic and unconcerned with the /VALUE aspect.  This might or might not have the same rationale as to why PARSE shouldn't internally be concerned with the behavior.</p>
          <p><a href="https://forum.rebol.info/t/contemplating-parse-value-super-powered-branching/1822/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/contemplating-parse-value-super-powered-branching/1822/1</link>
        <pubDate>Tue, 17 May 2022 08:43:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1822-1</guid>
        <source url="https://forum.rebol.info/t/contemplating-parse-value-super-powered-branching/1822.rss">Contemplating PARSE-VALUE: Super-Powered Branching</source>
      </item>
  </channel>
</rss>
