<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Evaluating the worthiness of CELL_FLAG_UNEVALUATED</title>
    <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912</link>
    <description>One question that comes up fairly often with new users is why **if [var = value] [...]** doesn&#39;t do what they expect.

We know that blocks are truthy, and passing a literal block to an IF will not run the code in the block.  They should have written **if (var = value) [...]** or just plain **if var = value [...]**.  But this isn&#39;t obvious to a newbie.

When I&#39;ve encountered this situation myself, it&#39;s usually because of changing a WHILE into an IF, or something of that sort.  Of course, **I** know why a WHILE puts a block around its condition and an IF does not...but for a new user that&#39;s certainly non-obvious.

## Hence, CELL_FLAG_UNEVALUATED was born

I had the idea that values would have a bit on them that would say whether they were the product of an evaluation, or just literal.  Hence when IF ran, it could tell the difference between:

    block: [a b c]
    if block [...]

and

    if [a b c] [...]

The former it would allow, the latter it would prohibit with an error.  This *seemed* like a good thing.

## Does it do more harm than good?

You probably shouldn&#39;t write **if [literal block]** in your code (unless you were writing a test, or plan on transforming it before execution).  Yet you might well want to do this in a composition.

     compose/only [... if (conditional-expression) [...] ...]

If that conditional expression is a literal block, then do you want to get an error on it?

And really, what if someone *does* write:

     condition: [var = value]
     ...
     if condition body

If they intended that condition to execute, that&#39;s a mistake that wouldn&#39;t be caught.  So here we have the check impeding experts...and not protecting new users as thoroughly as one would hope.

## Nearly every safety feature has shown to be not worth it

Because Rebol is subtle and can be difficult to debug, it has been tempting to throw in various safety mechanisms.  But nearly all that have been tried have been thrown out, instead addressing the relevant concern through a different angle.

There&#39;s no question that the existence of CELL_FLAG_UNEVALUATED and maintaining its state makes the evaluator code more complicated.  Yet I&#39;ve found being able to read it as being helpful in some cases when debugging or deprecating APIs.  It&#39;s likely good to keep the feature and let functions know this property of their callsites if they find it necessary.

But should things like the protection of IF and other conditional clauses be in the box, or should it be part of an adapted definition in a &quot;training wheels&quot; module...not enshrined in the mainline code?  (For that matter, should the website demo use training wheels mode by default, if it existed?)

I think I&#39;m leaning toward making this a training-wheels-only feature, and having the stock IF (CASE/etc.) not error on literal blocks.  Of course, the training wheels would have its work cut out for it to emulate every conditional test in a CASE statement, *it would basically have to reimplement CASE*.  So this is a fairly heavy change.</description>
    
    <lastBuildDate>Sun, 28 Jan 2024 12:13:33 +0000</lastBuildDate>
    <category>Internals</category>
    <atom:link href="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Evaluating the worthiness of CELL_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="912">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>One question that comes up fairly often with new users is why <strong>if [var = value] [...]</strong> doesn't do what they expect.</p>
<p>We know that blocks are truthy, and passing a literal block to an IF will not run the code in the block. They should have written <strong>if (var = value) [...]</strong> or just plain <strong>if var = value [...]</strong>. But this isn't obvious to a newbie.</p>
<p><strong>Hence, CELL_FLAG_UNEVALUATED was born</strong></p>
<p>I had the idea that values would have a bit on them that would say whether they were the product of an evaluation, or just literal. Hence when IF ran, it could tell the difference between:</p>
<pre><code class="lang-plaintext">block: [a b c]
if block [...]
</code></pre>
<p>and</p>
<pre><code class="lang-plaintext">if [a b c] [...]
</code></pre>
</blockquote>
</aside>
<p>Beyond the sheer nuance and complexity of implementing CELL_FLAG_UNEVALUATED--there's a new twist: <strong><a href="https://forum.rebol.info/t/block-creation-vs-evaluation/2098">Plain blocks now have evaluator behavior.</a></strong> (of adding binding)</p>
<p>This makes the flag useless for its original purpose.  So combined with the other reservations, it's getting the axe.  We get a fairly negligible performance boost...but it frees up the cell flag for another purpose, which could have high leverage in implementing optimizations.</p>
<p>I think there will be other opportunities to accomplish interesting ways to filter calls.  For instance, debuggers need to have access to a copy of the expression as it was written in source.  If there's a mode in which these instructions are built as blocks, then you could have extra diagnostics which say whether there's something problematic about that pattern.  It wouldn't be fast... but if you're having problems and want to pay for the diagnostic mode, it could be worth it to get any insights it might have.</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/7</link>
        <pubDate>Sun, 28 Jan 2024 12:13:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-7</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912.rss">Evaluating the worthiness of CELL_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of CELL_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="https://forum.rebol.info/t/construct-for-updating-variable-with-value-if-its-not-void/2037/2">Construct For Updating Variable With Value (If It's Not Void)</a></p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/5</link>
        <pubDate>Mon, 26 Jun 2023 00:33:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-5</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912.rss">Evaluating the worthiness of CELL_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of CELL_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>My feeling is that it can be difficult to predict what newbies will struggle with. As long as the built-in help is available and clearly written, ideally with some kind of feedback mechanism available, I think that would provide a quicker way forward than building stuff for an (as yet) imaginary audience of users. <img src="//forum.rebol.info/images/emoji/twitter/slight_smile.png?v=7" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Of course, if your gut tells you that some guardrails are necessary from the outset, then I trust your judgment. If the protection is easy to implement, I don't think I'd prioritize its inclusion very highly until it becomes a quantifiable compaint.</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/6</link>
        <pubDate>Tue, 20 Nov 2018 14:36:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-6</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912.rss">Evaluating the worthiness of CELL_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of CELL_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="2" data-topic="912">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>it doesn’t seem like a feature that should be changed because a newbie hasn’t yet grasped something as fundamental as literal values</p>
</blockquote>
</aside>
<p>Another area this has caused problems is in tests.  You want to write <strong><code>(&lt;foo&gt; = if [1] [&lt;foo&gt;])</code></strong> but can't because you're being "protected".</p>
<p>There are definitely some real, useful, power-user applications of the unevaluated flag.  This leads me to not want to rip it out entirely.  Some functions get real benefit from being able to tell if the callsite was <strong>10</strong> or <strong>5 + 5</strong> and it makes a difference they can action on...helpful in dealing with interface changes, for instance.</p>
<p>But building it into conditional tests in the system itself is probably a mistake.  What it's already done is introduce two tests: IS_TRUTHY() and IS_CONDITIONALLY_TRUE() <em>(and by extension, IS_FALSEY() and IS_CONDITIONALLY_FALSE())</em>.  Then you have to have explanations that say "well, it disallows literal blocks, which you don't want to do in some places for sure but it's thought to be helpful in some interfaces".</p>
<p>This flag was tried for a while as a solution to mitigate non-block branches, and scrapped there as well.  Because non-block branches were figured as a bad tradeoff all told. So I think IS_CONDITIONALLY_TRUE()<br>
and IS_CONDITIONALLY_FALSE() in the core needs to go.</p>
<p>I still want to be thinking about how one might build the training wheels layer and use the bit, so we'll put a pin in that.</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/3</link>
        <pubDate>Mon, 19 Nov 2018 16:45:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-3</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912.rss">Evaluating the worthiness of CELL_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of CELL_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Hm. I think newbies might get tripped up on this temporarily or accidentally, but it doesn't seem like a feature that should be changed because a newbie hasn't yet grasped something as fundamental as literal values.</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/2</link>
        <pubDate>Mon, 19 Nov 2018 16:36:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-2</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912.rss">Evaluating the worthiness of CELL_FLAG_UNEVALUATED</source>
      </item>
      <item>
        <title>Evaluating the worthiness of CELL_FLAG_UNEVALUATED</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>One question that comes up fairly often with new users is why <strong>if [var = value] [...]</strong> doesn't do what they expect.</p>
<p>We know that blocks are truthy, and passing a literal block to an IF will not run the code in the block.  They should have written <strong>if (var = value) [...]</strong> or just plain <strong>if var = value [...]</strong>.  But this isn't obvious to a newbie.</p>
<p>When I've encountered this situation myself, it's usually because of changing a WHILE into an IF, or something of that sort.  Of course, <strong>I</strong> know why a WHILE puts a block around its condition and an IF does not...but for a new user that's certainly non-obvious.</p>
<h2>
<a name="hence-cell_flag_unevaluated-was-born-1" class="anchor" href="https://forum.rebol.info#hence-cell_flag_unevaluated-was-born-1"></a>Hence, CELL_FLAG_UNEVALUATED was born</h2>
<p>I had the idea that values would have a bit on them that would say whether they were the product of an evaluation, or just literal.  Hence when IF ran, it could tell the difference between:</p>
<pre><code>block: [a b c]
if block [...]
</code></pre>
<p>and</p>
<pre><code>if [a b c] [...]
</code></pre>
<p>The former it would allow, the latter it would prohibit with an error.  This <em>seemed</em> like a good thing.</p>
<h2>
<a name="does-it-do-more-harm-than-good-2" class="anchor" href="https://forum.rebol.info#does-it-do-more-harm-than-good-2"></a>Does it do more harm than good?</h2>
<p>You probably shouldn't write <strong>if [literal block]</strong> in your code (unless you were writing a test, or plan on transforming it before execution).  Yet you might well want to do this in a composition.</p>
<pre><code> compose/only [... if (conditional-expression) [...] ...]
</code></pre>
<p>If that conditional expression is a literal block, then do you want to get an error on it?</p>
<p>And really, what if someone <em>does</em> write:</p>
<pre><code> condition: [var = value]
 ...
 if condition body
</code></pre>
<p>If they intended that condition to execute, that's a mistake that wouldn't be caught.  So here we have the check impeding experts...and not protecting new users as thoroughly as one would hope.</p>
<h2>
<a name="nearly-every-safety-feature-has-shown-to-be-not-worth-it-3" class="anchor" href="https://forum.rebol.info#nearly-every-safety-feature-has-shown-to-be-not-worth-it-3"></a>Nearly every safety feature has shown to be not worth it</h2>
<p>Because Rebol is subtle and can be difficult to debug, it has been tempting to throw in various safety mechanisms.  But nearly all that have been tried have been thrown out, instead addressing the relevant concern through a different angle.</p>
<p>There's no question that the existence of CELL_FLAG_UNEVALUATED and maintaining its state makes the evaluator code more complicated.  Yet I've found being able to read it as being helpful in some cases when debugging or deprecating APIs.  It's likely good to keep the feature and let functions know this property of their callsites if they find it necessary.</p>
<p>But should things like the protection of IF and other conditional clauses be in the box, or should it be part of an adapted definition in a "training wheels" module...not enshrined in the mainline code?  (For that matter, should the website demo use training wheels mode by default, if it existed?)</p>
<p>I think I'm leaning toward making this a training-wheels-only feature, and having the stock IF (CASE/etc.) not error on literal blocks.  Of course, the training wheels would have its work cut out for it to emulate every conditional test in a CASE statement, <em>it would basically have to reimplement CASE</em>.  So this is a fairly heavy change.</p>
          <p><a href="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912/1</link>
        <pubDate>Mon, 19 Nov 2018 02:44:59 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-912-1</guid>
        <source url="https://forum.rebol.info/t/evaluating-the-worthiness-of-cell-flag-unevaluated/912.rss">Evaluating the worthiness of CELL_FLAG_UNEVALUATED</source>
      </item>
  </channel>
</rss>
