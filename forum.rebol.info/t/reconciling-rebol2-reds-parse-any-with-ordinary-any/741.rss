<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</title>
    <link>https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741</link>
    <description>Historical Rebol PARSE&#39;s ANY means &quot;match this rule any number of times, including 0 times&quot;.  So it&#39;s effectively an iterative construct.

In the past I&#39;ve griped about the use of the word.  If PARSE were a fruit stand the conversation might go like:

&gt; **me:** &quot;Do you have any apples?&quot;
&gt; **parse:** &quot;Yes.&quot;
&gt; **me:** &quot;Can I buy an apple?&quot;
&gt; **parse:** &quot;No.&quot;
&gt; **me:** &quot;I&#39;m [not @gchiu](https://www.youtube.com/watch?v=i3HokGUffcU)...so why not?&quot;
&gt; **parse:** &quot;Because I have zero apples.&quot;
&gt; **me:** &quot;Why didn&#39;t you didn&#39;t tell me you didn&#39;t have any?&quot;
&gt; **parse:** &quot;Because I do.  I just don&#39;t have *some*.&quot;

What bothered me was how much in direct contradiction with ANY&#39;s use in the regular language this was:

    if any [
        1 &gt; 2
        3 &gt; 4
    ][
        print &quot;if 0 matching conditions was &#39;any&#39;, this would run&quot;
    ]

Add to that the fact that ANY isn&#39;t iterative, it just means &quot;pick the first thing that matches from this set&quot;, and the semantics feel quite inconsistent.

## Freeing Up ANY Would Allow A More Fitting Use

The true parallel application of ANY in UPARSE would be to pick the first matching parse rule out of a list.  e.g. these would be equivalent:

     parse &quot;abcbca&quot; [some [any [&quot;a&quot; &quot;bc&quot;]]]

     parse &quot;abcbca&quot; [some [&quot;a&quot; | &quot;bc&quot;]]

@BlackATTR points out that this might make it easier when generating alternate rules, since you wouldn&#39;t have to worry about sticking in the `|` during generation.  It&#39;s a pain to worry about putting (N - 1) vertical bars between (N) items to match from a set... but this way lists of items to match from could just be used as-is.

**(UPDATE: [This has been implemented, and is very slick!](https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875))**

## Are There Better Words?

Looking to other languages for inspiration...in at least one Haskell text combinator set, it also uses [**some**](https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:some) to mean one or more match, but picks [**many**](https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:many) for zero or more matches.

Doesn&#39;t make a whole lot of sense.  But because we&#39;re sort of dealing in a gray area of learned behavior here, I wonder if the benefit of going with MANY to avoid the inconsistency with ANY in regular code is enough to prefer it?

Or we could switch around and keep ANY for PARSE, but change the language so that ANY is prefix **OR** with ALL as prefix **AND**.

    and [thing1, thing2] then [...]

    or [thing1, thing2] then [...]

But I&#39;m not a fan of that. I like the direction of AND and OR as weird infix operations right now...so I think we should stick with that. I&#39;ve even been considering that **x and y** should be allowed so long as Y is not a function with arguments; it can short circuit across the word if it quotes it.

## So, Thoughts?</description>
    
    <lastBuildDate>Thu, 12 Sep 2024 23:07:43 +0000</lastBuildDate>
    <category>Parsing</category>
    <atom:link href="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was merged into an existing topic: <a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875/2">The Cool New Repurposing of WHILE in PARSE</a></p>
          <p><a href="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/12</link>
        <pubDate>Wed, 26 Jul 2023 15:40:30 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-12</guid>
        <source url="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741.rss">Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</source>
      </item>
      <item>
        <title>Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2><a name="p-5689-the-change-has-been-a-winner-1" class="anchor" href="https://forum.rebol.info#p-5689-the-change-has-been-a-winner-1"></a>The change has been a winner!</h2>
<aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="741">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Plus you can now see the result of NULL more obviously in the case when no newlines are removed, and leverage that.</p>
</blockquote>
</aside>
<p>Here's a great example from a little section of code in HELP (that needs revisiting, just in general), where it's breaking down parameters and refinements of a function:</p>
<pre><code>parse3 parameters of :value [
    copy args any [word! | meta-word! | get-word! | quoted-word!]
    copy refinements any path!
] else [
    fail [...]
]
</code></pre>
<p>When we rewrite the ANY as OPT SOME it shows us something interesting:</p>
<pre><code>parse parameters of :value [
    args: across opt some [word! | meta-word! | get-word! | quoted-word!]
    refinements: across try some path!
] else [
    fail [...]
]
</code></pre>
<p>Since our ACROSS goes over something effectively OPT, we could wind up with an empty block.  But an empty block isn't as cleanly differentiated as a null.  What if we move the OPT outside the across (and leverage our new ANY, for good measure)?</p>
<pre><code>parse parameters of :value [
    args: opt across some any [word! meta-word! get-word! quoted-word!]
    refinements: opt across some path!
] else [
    fail [...]
]
</code></pre>
<p>Now we know that <strong>args</strong> and <strong>refinements</strong> are either null, or non-empty.  So testing "are there args" becomes just <strong>if args</strong> and not the more laborious <strong>if not empty? args</strong>.</p>
<p>I think it's interesting to see how these transformations jump off the page when you use OPT SOME instead of an atomic zero-or-more construct!</p>
          <p><a href="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/15</link>
        <pubDate>Sun, 12 Dec 2021 23:14:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-15</guid>
        <source url="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741.rss">Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</source>
      </item>
      <item>
        <title>Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>
<a name="but-is-a-single-keyword-necessary-or-even-good-1" class="anchor" href="https://forum.rebol.info#but-is-a-single-keyword-necessary-or-even-good-1"></a>But Is A Single Keyword Necessary (or Even Good)?</h2>
<p>I've gotten to wondering if there is a reason we don't have a separate word for "zero or more" in English.  You actually have to write out "zero or more" to convey that intent... <em>maybe because the intent is too weird for a single word</em>?</p>
<p>It has in the past occurred to me that PARSE's ANY was equivalent to OPT SOME:</p>
<pre><code>; any number of "a"s (including zero), followed by some "b"s
parse "bbb" [any "a" some "b"]

; optionally some "a"s, followed by some "b"s
parse "bbb" [opt some "a" some "b"]
</code></pre>
<p>Notice how while the code is a few characters "longer", the comment you need to explain what's going on tightens up.  It's like a more "proportional" capture of your intent.</p>
<p>Also, in the UPARSE model of synthesized values it's kind of less confusing, because it's clearer what it returns in the case of nothing: the same thing OPT always returns when a rule doesn't match: NULL.</p>
<h2>
<a name="trying-out-the-change-i-quickly-saw-benefits-2" class="anchor" href="https://forum.rebol.info#trying-out-the-change-i-quickly-saw-benefits-2"></a>Trying Out The Change, I Quickly Saw Benefits...</h2>
<p>When you just write ANY it may be that you have a case that's actually supposed to be a SOME but it hasn't really bit you yet.  If you're willing to tolerate between 1 and a million of something, the case of no things being there is distinguished...and calling attention to the fact that the rule you have may not match at all can be an asset.</p>
<p>So OPT SOME offers an advantage, because it encourages you to look at it and decide if the OPT belongs there or not.  It may feel kind of like a wart, but maybe it's a helpful wart.</p>
<p>I actually did find a difference how I read the code.  "This entire next section may not be relevant... <em>none</em> of it could match and it would go on."  That weight of the OPT is felt more heavily when the word is there than the ANY...which if you <em>frequently</em> expect the thing to be there, you may assume it will <em>always</em> be there for at least one instance.</p>
<p>You also can spot redundancy in OPT more clearly.  Things like:</p>
<pre><code>opt [
    any [...]
]
</code></pre>
<p>Stand out more if they look like:</p>
<pre><code>opt [
   opt some [...]
]
</code></pre>
<p>Many cases I looked at tidied up.  I found this code removing 0 or more newlines at the head of a series via  ANY:</p>
<pre><code>parse series [
    remove [any newline]
    ...
]
</code></pre>
<p>But when you rephrase this with OPT SOME it suggests a better factoring:</p>
<pre><code>parse series [
    remove [opt some newline]
    ...
]
</code></pre>
<p>It reads clearest when you bring the OPT outside, to say you're <em>optionally removing some newlines</em>:</p>
<pre><code>parse series [
    opt remove [some newline]
    ...
]
</code></pre>
<p>Plus you can now see the result of NULL more obviously in the case when no newlines are removed, and leverage that.</p>
<h2>
<a name="a-motivated-individual-can-overrule-it-3" class="anchor" href="https://forum.rebol.info#a-motivated-individual-can-overrule-it-3"></a>A Motivated Individual Can Overrule It</h2>
<p>Remember, UPARSE is going to let you be the judge.  If you want your own keywords, you can have them.  Maybe you like MANY (some parser combinators seem to think that 0...N is "many" and 1...N is "some").  Maybe you don't want to use the ANY parse abstraction that I think is more interesting.  It's your call!</p>
<h2>
<a name="so-im-going-ahead-with-this-4" class="anchor" href="https://forum.rebol.info#so-im-going-ahead-with-this-4"></a>So, I'm Going Ahead With This</h2>
<p>One can argue there's a bit of a 1984-newspeak to it ("you don't need words like better or worse, use plus-good and un-good and double-plus-ungood").  But we're sort of asking a programming language to be more "nuanced" in its wording than English, which has evolved to be pretty much where the brain is at.  I've shown some concrete benefits here to breaking out the OPT so you can see its relationship to the other OPTs you have and move it around.</p>
          <p><a href="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/9</link>
        <pubDate>Fri, 05 Mar 2021 06:41:45 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-9</guid>
        <source url="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741.rss">Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</source>
      </item>
      <item>
        <title>Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I'm not suggesting I necessarily agree with the need to change, but if I were, I'd maybe go for ANY-OF and ALL-OF.</p>
          <p><a href="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/8</link>
        <pubDate>Fri, 05 Mar 2021 04:38:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-8</guid>
        <source url="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741.rss">Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</source>
      </item>
      <item>
        <title>Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <blockquote>
<p>ANY isn't iterative, it just means "pick the first thing that matches from this set", and the semantics feel quite inconsistent.</p>
</blockquote>
<p>It occurs to me that there is an arity-1 looping construct... CYCLE.  It was chosen to replace FOREVER, since FOREVER loops usually broke (it was a misnomer).</p>
<p>But CYCLE could be used here:</p>
<pre><code>&gt;&gt; parse "aaaccc" [some "a" opt some "b" opt some "c"]
== "c"

&gt;&gt; parse "aaaccc" [some "a" cycle "b" cycle "c"]
== "c"
</code></pre>
<p>It's a bit different semantically because CYCLE in the main language doesn't end until you STOP or BREAK.  It's not like an UNTIL where the body result itself can make it stop.</p>
<p>Although PARSE is a bit different in semantics anyway.  So stopping the cycle on a failed rule might not be that inconsistent under its rules.</p>
<p>Though...CYCLE could be, the anti-UNTIL</p>
<pre><code>&gt;&gt; n: 1, cycle [print [n], n: n + 1, n &lt; 4]
1
2
3
</code></pre>
<p>Anyway...I don't know that CYCLE implies "do this as long as it is true", however...more like "do it until I say to stop".  It's interesting to remember that we do have another arity-1 looping construct in the mix though.</p>
          <p><a href="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/7</link>
        <pubDate>Thu, 04 Mar 2021 22:08:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-7</guid>
        <source url="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741.rss">Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</source>
      </item>
      <item>
        <title>Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>While it's good to have literate keywords for pattern matching, I think most devs (including newbies) coming to Ren-C will be minimally familiar with the symbols which have been around forever: * (match 0 or more), ? (match 1 item), # (match one digit), and ! (not).</p>
<p>The standard <em>symbol</em> in pattern matching is <strong><code>*</code></strong>.</p>
          <p><a href="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/6</link>
        <pubDate>Thu, 04 Mar 2021 13:29:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-6</guid>
        <source url="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741.rss">Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</source>
      </item>
      <item>
        <title>Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="741">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>in at least one Haskell text combinator set, it also uses <a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:some"><strong>some</strong></a> to mean one or more match, but picks <a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:many"><strong>many</strong></a> for zero or more matches.</p>
</blockquote>
</aside>
<p>For me MANY says more than one. Even more than two if you are strict.  (As the saying goes, counting: one, two, many.)</p>
<p>SOME says yes there should be one or more of these present. ANY is just fine for me expressing any positive number and zero within PARSE. But indeed with ANY [condition1 condition2] there is at least one of the conditions true.</p>
<p>Well a small difference indeed, but vs. using something like OPTIONAL within PARSE to overcome this, I say I can live with the difference in meaning.</p>
          <p><a href="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/5</link>
        <pubDate>Thu, 04 Mar 2021 07:36:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-5</guid>
        <source url="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741.rss">Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</source>
      </item>
      <item>
        <title>Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historical Rebol PARSE's ANY means "match this rule any number of times, including 0 times".  So it's effectively an iterative construct.</p>
<p>In the past I've griped about the use of the word.  If PARSE were a fruit stand the conversation might go like:</p>
<blockquote>
<p><strong>me:</strong> "Do you have any apples?"<br>
<strong>parse:</strong> "Yes."<br>
<strong>me:</strong> "Can I buy an apple?"<br>
<strong>parse:</strong> "No."<br>
<strong>me:</strong> "I'm <a href="https://www.youtube.com/watch?v=i3HokGUffcU">not @gchiu</a>...so why not?"<br>
<strong>parse:</strong> "Because I have zero apples."<br>
<strong>me:</strong> "Why didn't you didn't tell me you didn't have any?"<br>
<strong>parse:</strong> "Because I do.  I just don't have <em>some</em>."</p>
</blockquote>
<p>What bothered me was how much in direct contradiction with ANY's use in the regular language this was:</p>
<pre><code>if any [
    1 &gt; 2
    3 &gt; 4
][
    print "if 0 matching conditions was 'any', this would run"
]
</code></pre>
<p>Add to that the fact that ANY isn't iterative, it just means "pick the first thing that matches from this set", and the semantics feel quite inconsistent.</p>
<h2><a name="p-2444-freeing-up-any-would-allow-a-more-fitting-use-1" class="anchor" href="https://forum.rebol.info#p-2444-freeing-up-any-would-allow-a-more-fitting-use-1"></a>Freeing Up ANY Would Allow A More Fitting Use</h2>
<p>The true parallel application of ANY in UPARSE would be to pick the first matching parse rule out of a list.  e.g. these would be equivalent:</p>
<pre><code> parse "abcbca" [some [any ["a" "bc"]]]

 parse "abcbca" [some ["a" | "bc"]]
</code></pre>
<p><a class="mention" href="https://forum.rebol.info/u/blackattr">@BlackATTR</a> points out that this might make it easier when generating alternate rules, since you wouldn't have to worry about sticking in the <code>|</code> during generation.  It's a pain to worry about putting (N - 1) vertical bars between (N) items to match from a set... but this way lists of items to match from could just be used as-is.</p>
<p><strong>(UPDATE: <a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875">This has been implemented, and is very slick!</a>)</strong></p>
<h2><a name="p-2444-are-there-better-words-2" class="anchor" href="https://forum.rebol.info#p-2444-are-there-better-words-2"></a>Are There Better Words?</h2>
<p>Looking to other languages for inspiration...in at least one Haskell text combinator set, it also uses <a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:some"><strong>some</strong></a> to mean one or more match, but picks <a href="https://hackage.haskell.org/package/parsers-0.12.10/docs/Text-Parser-Combinators.html#v:many"><strong>many</strong></a> for zero or more matches.</p>
<p>Doesn't make a whole lot of sense.  But because we're sort of dealing in a gray area of learned behavior here, I wonder if the benefit of going with MANY to avoid the inconsistency with ANY in regular code is enough to prefer it?</p>
<p>Or we could switch around and keep ANY for PARSE, but change the language so that ANY is prefix <strong>OR</strong> with ALL as prefix <strong>AND</strong>.</p>
<pre><code>and [thing1, thing2] then [...]

or [thing1, thing2] then [...]
</code></pre>
<p>But I'm not a fan of that. I like the direction of AND and OR as weird infix operations right now...so I think we should stick with that. I've even been considering that <strong>x and y</strong> should be allowed so long as Y is not a function with arguments; it can short circuit across the word if it quotes it.</p>
<h2><a name="p-2444-so-thoughts-3" class="anchor" href="https://forum.rebol.info#p-2444-so-thoughts-3"></a>So, Thoughts?</h2>
          <p><a href="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741/1</link>
        <pubDate>Sun, 15 Jul 2018 18:35:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-741-1</guid>
        <source url="https://forum.rebol.info/t/reconciling-rebol2-reds-parse-any-with-ordinary-any/741.rss">Reconciling Rebol2/Red&#39;s Parse ANY with Ordinary ANY</source>
      </item>
  </channel>
</rss>
