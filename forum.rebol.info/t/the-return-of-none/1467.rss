<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The RETURN of NONE</title>
    <link>https://forum.rebol.info/t/the-return-of-none/1467</link>
    <description>@rgchris has convinced me, and I am now committed to the idea that &quot;VOID&quot; is not a datatype, but the characterization of what were previously called &quot;invisible&quot; functions.

There is a nice sense in which this lines up with traditional &quot;void&quot; functions in C (and related languages).  Because *absolutely no value*--not even some dummy or placeholder--is returned.  It means the libRebol C API function signature **`void rebElide(...)`** is consistent with the ELIDE construct signature...they both specify their voidness in their return spec.

But I&#39;ve written up in a separate post why I don&#39;t believe things should too casually be void functions: 

[**The go-to for creating a function without a meaningful return result should be a reified meaningless result...because full-on vaporization is a contract which is difficult to turn back, and is not easy to sense from a callsite (e.g. inside an ALL [])**](https://forum.rebol.info/t/why-isnt-print-invisible-void/1466)

Relying on a generic tool like ELIDE gives you clarity at callsites of what you&#39;re doing, and means you don&#39;t have to work &quot;I elide my result&quot; into the name of your function somehow.  Returning a meaningless value also permits interop with ELSE and THEN if you decide you want NULL-reactivity.

Maybe PRINT is one of those things that should be an exception (along with **assert** and **--** and **breakpoint**)...but it would be a rare case.

## What Should We Call The Meaningless Result?

**2022 UPDATE:** I believe we now know that the best thing to use for this is &quot;isotopic blank&quot;, e.g. the isotopic form of **~**.

I&#39;ve settled on calling this &quot;NONE&quot;.... though behavior-wise it has more in common with what Rebol2 called &quot;unset&quot;.

What it has in common with historical Rebol&#39;s NONE is that it is a reified concept of nothing.  What it does not have in common is that it is neither true nor false, and errors in conditional logic...like all the other isotopes.

## Retraining Usage Of Arity-0 RETURN

Though it made me nervous at first, I&#39;ve become very comfortable with **`func [] [return]`** being invisible.  It makes complete sense with being a &quot;void function&quot;.

If you provide a return specification, e.g. **`func [return: [integer!]] [...]`** you will be protected from accidentally returning a void with a naked **`return`**, just as you would with any other return type.

I&#39;m also happy with the way piping works:

  * **`lambda [x] [comment x]`** will act just like COMMENT

    *   If we said that **lambda [x] []** returned NULL that wouldn&#39;t work, because we&#39;d be pre-seeding with a NULL that the comment would have to leave behind.

  * **`func [x] [return comment x]`** will act just like COMMENT

## So For Non-Invisibility, Always Pass An Argument

**`[return ~]`** is little bit ugly, but not unbearably so.  That will evaluate the QUASI!-BLANK! to produce an isotopic blank, e.g. a none.

I&#39;d been wanting to avoid functions that returned isotopes to avoid the sorta confusion situation of **action! = type of :none** ... but if making it an action is what we have to do in order to get the syntax of **return none** then that is what it is.

## Sidenote: Inheriting Return Types

I&#39;m talking about finessing the question of how to do a chained RETURN on a function that you don&#39;t know if it&#39;s going to vaporize completely or return a value.  That&#39;s something that bothers me about C, because it doesn&#39;t let you write chaining void returns:

    void my_function() {
        return some_void_function(...);  /* this is not legal! */
    }

That annoys me, because it makes it hard to write generic code that doesn&#39;t want the bad properties of a macro (repeating evaluation of arguments if used multiple times, etc.)...but throws a wrench in being able to abstract across return values.

Yet then there&#39;s that other question of how to label your return type.  In Ren-C we have the option of just not putting a type signature on it, but what you often want is the signature of what you&#39;re wrapping.  I guess we could do this via COMPOSE on the spec:

    my-function: func compose [
        return: (return-of :some-other-function)
        ...
    ][
        ...
        return some-other-function ...
    ]

Anyway, I just wanted to mention that we&#39;re not yet at utopia in this medium, even if we&#39;re pretty much nailing the chaining part itself!</description>
    
    <lastBuildDate>Sun, 20 Jun 2021 02:56:43 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/the-return-of-none/1467.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The RETURN of NONE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="3" data-topic="1467">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>VOID is the realm of emptiness—a place with no beginning or end, or indeed no definition (<em>void</em> as in <em>voided checks</em> is not the first meaning that comes to mind)</p>
</blockquote>
</aside>
<p>Like I said...I'm convinced!</p>
          <p><a href="https://forum.rebol.info/t/the-return-of-none/1467/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-return-of-none/1467/5</link>
        <pubDate>Sun, 24 Jan 2021 17:42:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1467-5</guid>
        <source url="https://forum.rebol.info/t/the-return-of-none/1467.rss">The RETURN of NONE</source>
      </item>
      <item>
        <title>The RETURN of NONE</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="3" data-topic="1467">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>VOID is the realm of emptiness</p>
</blockquote>
</aside>
<p>I think this is why the idea of VOID as replacing UNSET was key—there's an infinite array of words out there and until they are defined, they are just points in an endless vacuous universe. Language can be fluid and  subjective, this is where my mind went.</p>
          <p><a href="https://forum.rebol.info/t/the-return-of-none/1467/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-return-of-none/1467/4</link>
        <pubDate>Sun, 24 Jan 2021 17:34:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1467-4</guid>
        <source url="https://forum.rebol.info/t/the-return-of-none/1467.rss">The RETURN of NONE</source>
      </item>
      <item>
        <title>The RETURN of NONE</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I'd still lean toward my own sense of what I'd consider (or feel) my primary definitions of NULL and VOID—where NULL is the product of nothing and VOID is the realm of emptiness—a place with no beginning or end, or indeed no definition (<em>void</em> as in <em>voided checks</em> is not the first meaning that comes to mind).</p>
<p>If I were to expand on that, I'd say that NULL is negative nothingness and BLANK is positive nothingness where we must affirm across the wire that nothingness is the intent.</p>
<p>If I were to indulge a little further and incorporate bad words, then VOID becomes more like outer space and the various defined bad words are stars within distant constellations.</p>
          <p><a href="https://forum.rebol.info/t/the-return-of-none/1467/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-return-of-none/1467/3</link>
        <pubDate>Sun, 24 Jan 2021 17:19:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1467-3</guid>
        <source url="https://forum.rebol.info/t/the-return-of-none/1467.rss">The RETURN of NONE</source>
      </item>
      <item>
        <title>The RETURN of NONE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> has convinced me, and I am now committed to the idea that "VOID" is not a datatype, but the characterization of what were previously called "invisible" functions.</p>
<p>There is a nice sense in which this lines up with traditional "void" functions in C (and related languages).  Because <em>absolutely no value</em>--not even some dummy or placeholder--is returned.  It means the libRebol C API function signature <strong><code>void rebElide(...)</code></strong> is consistent with the ELIDE construct signature...they both specify their voidness in their return spec.</p>
<p>But I've written up in a separate post why I don't believe things should too casually be void functions:</p>
<p><a href="https://forum.rebol.info/t/why-isnt-print-invisible-void/1466"><strong>The go-to for creating a function without a meaningful return result should be a reified meaningless result...because full-on vaporization is a contract which is difficult to turn back, and is not easy to sense from a callsite (e.g. inside an ALL [])</strong></a></p>
<p>Relying on a generic tool like ELIDE gives you clarity at callsites of what you're doing, and means you don't have to work "I elide my result" into the name of your function somehow.  Returning a meaningless value also permits interop with ELSE and THEN if you decide you want NULL-reactivity.</p>
<p>Maybe PRINT is one of those things that should be an exception (along with <strong>assert</strong> and <strong>--</strong> and <strong>breakpoint</strong>)...but it would be a rare case.</p>
<h2>What Should We Call The Meaningless Result?</h2>
<p><strong>2022 UPDATE:</strong> I believe we now know that the best thing to use for this is "isotopic blank", e.g. the isotopic form of <strong>~</strong>.</p>
<p>I've settled on calling this "NONE".... though behavior-wise it has more in common with what Rebol2 called "unset".</p>
<p>What it has in common with historical Rebol's NONE is that it is a reified concept of nothing.  What it does not have in common is that it is neither true nor false, and errors in conditional logic...like all the other isotopes.</p>
<h2>Retraining Usage Of Arity-0 RETURN</h2>
<p>Though it made me nervous at first, I've become very comfortable with <strong><code>func [] [return]</code></strong> being invisible.  It makes complete sense with being a "void function".</p>
<p>If you provide a return specification, e.g. <strong><code>func [return: [integer!]] [...]</code></strong> you will be protected from accidentally returning a void with a naked <strong><code>return</code></strong>, just as you would with any other return type.</p>
<p>I'm also happy with the way piping works:</p>
<ul>
<li>
<p><strong><code>lambda [x] [comment x]</code></strong> will act just like COMMENT</p>
<ul>
<li>If we said that <strong>lambda [x] []</strong> returned NULL that wouldn't work, because we'd be pre-seeding with a NULL that the comment would have to leave behind.</li>
</ul>
</li>
<li>
<p><strong><code>func [x] [return comment x]</code></strong> will act just like COMMENT</p>
</li>
</ul>
<h2>So For Non-Invisibility, Always Pass An Argument</h2>
<p><strong><code>[return ~]</code></strong> is little bit ugly, but not unbearably so.  That will evaluate the QUASI!-BLANK! to produce an isotopic blank, e.g. a none.</p>
<p>I'd been wanting to avoid functions that returned isotopes to avoid the sorta confusion situation of <strong>action! = type of :none</strong> ... but if making it an action is what we have to do in order to get the syntax of <strong>return none</strong> then that is what it is.</p>
<h2>Sidenote: Inheriting Return Types</h2>
<p>I'm talking about finessing the question of how to do a chained RETURN on a function that you don't know if it's going to vaporize completely or return a value.  That's something that bothers me about C, because it doesn't let you write chaining void returns:</p>
<pre><code>void my_function() {
    return some_void_function(...);  /* this is not legal! */
}
</code></pre>
<p>That annoys me, because it makes it hard to write generic code that doesn't want the bad properties of a macro (repeating evaluation of arguments if used multiple times, etc.)...but throws a wrench in being able to abstract across return values.</p>
<p>Yet then there's that other question of how to label your return type.  In Ren-C we have the option of just not putting a type signature on it, but what you often want is the signature of what you're wrapping.  I guess we could do this via COMPOSE on the spec:</p>
<pre><code>my-function: func compose [
    return: (return-of :some-other-function)
    ...
][
    ...
    return some-other-function ...
]
</code></pre>
<p>Anyway, I just wanted to mention that we're not yet at utopia in this medium, even if we're pretty much nailing the chaining part itself!</p>
          <p><a href="https://forum.rebol.info/t/the-return-of-none/1467/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-return-of-none/1467/1</link>
        <pubDate>Mon, 18 Jan 2021 02:04:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1467-1</guid>
        <source url="https://forum.rebol.info/t/the-return-of-none/1467.rss">The RETURN of NONE</source>
      </item>
  </channel>
</rss>
