<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Checksums and Secure Hashes in Ren-C</title>
    <link>https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808</link>
    <description>I thought I&#39;d write up a quick post about algorithms that take in a bunch of bytes--like a BINARY!--and produce a (usually) shorter &quot;fingerprint&quot; of that data.

* It&#39;s not hard to make an *insecure* hash...like taking the first couple of letters of a string: `&quot;DICKENS&quot; =&gt; DI`.  That might be useful if you&#39;re trying to divide book authors into drawers of an old-fashioned library card catalog.

* But it&#39;s easy to find another string that would make the same &quot;DI&quot; fingerprint, like &quot;DIABOLICAL&quot; or &quot;DIR^/FORMAT C:&quot;

* If you were using a fingerprint to trust something was what it was supposed to be, the easiness of generating these &quot;collisions&quot; is a liability!! :skull_and_crossbones: 

* Secure hashes do complicated &quot;one-way functions&quot; in math to make it *really hard* on today&#39;s computers to fabricate any binary sequence--even garbage--that will give you the same fingerprint as any other input.

You&#39;ve certainly seen web pages that redirect you off to download a file, but beforehand give you some bytes of what the file should securely hash to.  &lt;sub&gt;(And you&#39;ve probably never checked to make sure they match.)&lt;/sub&gt;

## If the Fingerprint is Shorter than the data, [COLLISIONS EXIST!](https://en.wikipedia.org/wiki/Pigeonhole_principle)

You obviously can&#39;t give every 500mb file in the universe a unique fingerprint that&#39;s 32-bits, 128-bits, 512-bits, 2048-bits etc.

So the concept behind a secure hash is just supposed to be you can&#39;t find a collision until we&#39;re all dead and no one cares.  Less grimly: we might pair a hash with an expiration date to say not to trust a hash after a very conservative guess at how long it would take for computers to advance enough to break it.

When this hope falls apart (e.g. if any researcher can show two inputs that generate the same fingerprint) it&#39;s generally considered that the &quot;secure&quot; part of that hash is broken...for the purposes of whatever time-bubble you&#39;re living in.

## We Have Four Secure Hashes in the Box Right Now...

It shouldn&#39;t be surprising that longer fingerprints correlate with being harder to find collisions:

    &gt;&gt; checksum/method {DICKENS} &#39;md5
    == #{3717A787E2F16310EA51DC0308E88803}  ; considered vulnerable

    &gt;&gt; checksum/method {DICKENS} &#39;sha1
    == #{DFE5DD61B2B19C319DBC4F44328CDF8D24366F88}  ; considered vulnerable

    &gt;&gt; checksum/method {DICKENS} &#39;sha256
    == #{52A095CF1F0319EF44FF9134AAD2EF5E2BFE1A48307DCB0AD0408F1CE393C950}

    &gt;&gt; checksum/method {DICKENS} &#39;sha512
    == #{
    E8DBC26DE28FAA1BC2A6A3E1BC6DD22C1ECB3FD0D5FCBBFB69BC63C6AAC6A9CE
    FB76294EFFB0522D4C90A5E5829233FC5BC5B811AE6684A6EA632ECB3FF88DA1
    }

    &gt;&gt; checksum/method {DICKENS} &#39;ripemd160         ; bitcoin uses this one
    == #{ADC86945BE4CEF31F0CFCAF66775E1DA5160F877}  ; ...no one knows why

But longer isn&#39;t *intrinsically* better...there might be a weakness to exploit in the method used by a longer hash which isn&#39;t present in shorter ones.  However, a bunch of mathematicians look at this stuff and we would generally hope that we&#39;d be getting what we pay for--more bytes meaning more security (unless they&#39;re from the NSA and trying to punk us).

## We Also Have Three *Insecure* Hashes...

These are fine when you&#39;re doing something that is not supposed to be protecting against adversarial attacks.  They&#39;re smaller to store and much cheaper to calculate...but it&#39;s trivial to find other input data that would produces the same 32-bit result:

    &gt;&gt; checksum/method {DICKENS} &#39;crc32
    == #{FB05F0BC}  ; used to verify gzip files (among other places)

    &gt;&gt; checksum/method {DICKENS} &#39;adler32
    == #{0202D207}  ; used by zlib deflate and inflate

If you want a *really* cheapskate insecure checksum, we include the one that is in TCP packets on the internet:

    &gt;&gt; checksum/method {DICKENS} &#39;tcp
    == #{CA32}

---

&gt; **Fun Corner**: Let&#39;s find a collision!
&gt;
&gt;     &gt;&gt; until [
&gt;         string: copy {}
&gt;         repeat (random 10) [append string make char! 64 + random 26]
&gt;         #{CA32} = checksum/method string &#39;tcp
&gt;     ]
&gt;     == #[true]
&gt;
&gt;     &gt;&gt; print string
&gt;     AOGTDDN
&gt;
&gt;     &gt;&gt; checksum/method {AOGTDDN} &#39;tcp
&gt;     == #{CA32}
&gt;
&gt; That wasn&#39;t so hard, but... if you can find collisions for any of the *secure* hashes above (even the relatively-weak MD5 or SHA1) *you will be famous!*

## We&#39;re Primed To Make **STREAMING** Secure (or Insecure) Hashes !

R3-Alpha did not have fancy modern hashes like SHA256 or SHA512.  But also the code it used was copy-pasted out of a library that required you to have all the data at once.

Hence if you have a multi-gigabyte DVD .iso file that you want to checksum, you have to read that into a multi-gigabyte BINARY! to process it.

But since Ren-C is leveraging the cryptography of the [pure C library known as mbedTLS](https://github.com/Mbed-TLS/mbedtls), the foundations are there to stream in little blobs at a time...and it is generalized so we can just flip on or off any hashes we care about.  [If we only knew how to express streaming with PORT!s (or whatever)](https://forum.rebol.info/t/what-is-a-port/617/5?u=hostilefork).

And also, the CRC32 and ADLER32 algorithms we have &quot;for free&quot; by including Zlib are now set up in a way that the insecure hashes can be streamed too.

## :globe_with_meridians: *&quot;How Does This Tie Into The Web Repl Story&quot;?* :globe_with_meridians: 

I really want to have a laser focus on whether investing effort into something is going to be something that pays off or not, and to me a part of that payoff question is &quot;will people using the web build care&quot;.

**Right now the web build does not include the CHECKSUM function at all.**  :-(

That is too bad, because I do believe that putting secure hashes into the hands of users at the Web Repl prompt (as well as other basic crypto parts) would be a great playground.

But it would be rather heavyweight to push secure hashing into the default .wasm being pulled down on every site if it didn&#39;t use it.  This is why I really want to get &quot;Wasm extensions&quot; working, that can be dynamically loaded.  There&#39;s something called &quot;side modules&quot; that I have meant to explore but haven&#39;t.

Anyway, I hope this summary gives a little insight into where this is at, and perhaps educational for those who don&#39;t have experience with the difference between secure/insecure hashing.</description>
    
    <lastBuildDate>Thu, 09 Jun 2022 06:04:36 +0000</lastBuildDate>
    <category>Cryptography</category>
    <atom:link href="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Checksums and Secure Hashes in Ren-C</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="iArnold" data-post="2" data-topic="1808">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/iarnold/40/226_2.png" class="avatar"> iArnold:</div>
<blockquote>
<p>it the must be adapted to result in the same hash value while keeping the filesize the same as the original.</p>
</blockquote>
</aside>
<p>Requiring the length to be the same does add another layer of security.  But it also requires communicating the length along with the hash as part of what you check.</p>
<p>You could give the first 10 bytes of the file and the last 10 bytes of the file, too.  And that would be another layer of security to the check.</p>
<p>But if you take this to extremes, the site publishing the thing you should check about the file is publishing something as long (or longer) than the file itself.</p>
<p>So at least for the moment...I think the only thing that tools check for is the hash...just because it reduces the number of things to communicate that you have to check.</p>
          <p><a href="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/3</link>
        <pubDate>Thu, 09 Jun 2022 06:04:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1808-3</guid>
        <source url="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808.rss">Checksums and Secure Hashes in Ren-C</source>
      </item>
      <item>
        <title>Checksums and Secure Hashes in Ren-C</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>And also if the contents of the file were corrupted to serve a malicious purpose, it the must be adapted to result in the same hash value while keeping the filesize the same as the original.</p>
          <p><a href="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/2</link>
        <pubDate>Thu, 09 Jun 2022 05:57:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1808-2</guid>
        <source url="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808.rss">Checksums and Secure Hashes in Ren-C</source>
      </item>
      <item>
        <title>Checksums and Secure Hashes in Ren-C</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I thought I'd write up a quick post about algorithms that take in a bunch of bytes--like a BINARY!--and produce a (usually) shorter "fingerprint" of that data.</p>
<ul>
<li>
<p>It's not hard to make an <em>insecure</em> hash...like taking the first couple of letters of a string: <code>"DICKENS" =&gt; DI</code>.  That might be useful if you're trying to divide book authors into drawers of an old-fashioned library card catalog.</p>
</li>
<li>
<p>But it's easy to find another string that would make the same "DI" fingerprint, like "DIABOLICAL" or "DIR^/FORMAT C:"</p>
</li>
<li>
<p>If you were using a fingerprint to trust something was what it was supposed to be, the easiness of generating these "collisions" is a liability!! <img src="https://forum.rebol.info/images/emoji/twitter/skull_and_crossbones.png?v=9" title=":skull_and_crossbones:" class="emoji" alt=":skull_and_crossbones:"></p>
</li>
<li>
<p>Secure hashes do complicated "one-way functions" in math to make it <em>really hard</em> on today's computers to fabricate any binary sequence--even garbage--that will give you the same fingerprint as any other input.</p>
</li>
</ul>
<p>You've certainly seen web pages that redirect you off to download a file, but beforehand give you some bytes of what the file should securely hash to.  <sub>(And you've probably never checked to make sure they match.)</sub></p>
<h2>If the Fingerprint is Shorter than the data, <a href="https://en.wikipedia.org/wiki/Pigeonhole_principle">COLLISIONS EXIST!</a>
</h2>
<p>You obviously can't give every 500mb file in the universe a unique fingerprint that's 32-bits, 128-bits, 512-bits, 2048-bits etc.</p>
<p>So the concept behind a secure hash is just supposed to be you can't find a collision until we're all dead and no one cares.  Less grimly: we might pair a hash with an expiration date to say not to trust a hash after a very conservative guess at how long it would take for computers to advance enough to break it.</p>
<p>When this hope falls apart (e.g. if any researcher can show two inputs that generate the same fingerprint) it's generally considered that the "secure" part of that hash is broken...for the purposes of whatever time-bubble you're living in.</p>
<h2>We Have Four Secure Hashes in the Box Right Now...</h2>
<p>It shouldn't be surprising that longer fingerprints correlate with being harder to find collisions:</p>
<pre><code>&gt;&gt; checksum/method {DICKENS} 'md5
== #{3717A787E2F16310EA51DC0308E88803}  ; considered vulnerable

&gt;&gt; checksum/method {DICKENS} 'sha1
== #{DFE5DD61B2B19C319DBC4F44328CDF8D24366F88}  ; considered vulnerable

&gt;&gt; checksum/method {DICKENS} 'sha256
== #{52A095CF1F0319EF44FF9134AAD2EF5E2BFE1A48307DCB0AD0408F1CE393C950}

&gt;&gt; checksum/method {DICKENS} 'sha512
== #{
E8DBC26DE28FAA1BC2A6A3E1BC6DD22C1ECB3FD0D5FCBBFB69BC63C6AAC6A9CE
FB76294EFFB0522D4C90A5E5829233FC5BC5B811AE6684A6EA632ECB3FF88DA1
}

&gt;&gt; checksum/method {DICKENS} 'ripemd160         ; bitcoin uses this one
== #{ADC86945BE4CEF31F0CFCAF66775E1DA5160F877}  ; ...no one knows why
</code></pre>
<p>But longer isn't <em>intrinsically</em> better...there might be a weakness to exploit in the method used by a longer hash which isn't present in shorter ones.  However, a bunch of mathematicians look at this stuff and we would generally hope that we'd be getting what we pay for--more bytes meaning more security (unless they're from the NSA and trying to punk us).</p>
<h2>We Also Have Three <em>Insecure</em> Hashes...</h2>
<p>These are fine when you're doing something that is not supposed to be protecting against adversarial attacks.  They're smaller to store and much cheaper to calculate...but it's trivial to find other input data that would produces the same 32-bit result:</p>
<pre><code>&gt;&gt; checksum/method {DICKENS} 'crc32
== #{FB05F0BC}  ; used to verify gzip files (among other places)

&gt;&gt; checksum/method {DICKENS} 'adler32
== #{0202D207}  ; used by zlib deflate and inflate
</code></pre>
<p>If you want a <em>really</em> cheapskate insecure checksum, we include the one that is in TCP packets on the internet:</p>
<pre><code>&gt;&gt; checksum/method {DICKENS} 'tcp
== #{CA32}
</code></pre>
<hr>
<blockquote>
<p><strong>Fun Corner</strong>: Let's find a collision!</p>
<pre><code>&gt;&gt; until [
    string: copy {}
    repeat (random 10) [append string make char! 64 + random 26]
    #{CA32} = checksum/method string 'tcp
]
== #[true]

&gt;&gt; print string
AOGTDDN

&gt;&gt; checksum/method {AOGTDDN} 'tcp
== #{CA32}
</code></pre>
<p>That wasn't so hard, but... if you can find collisions for any of the <em>secure</em> hashes above (even the relatively-weak MD5 or SHA1) <em>you will be famous!</em></p>
</blockquote>
<h2>We're Primed To Make <strong>STREAMING</strong> Secure (or Insecure) Hashes !</h2>
<p>R3-Alpha did not have fancy modern hashes like SHA256 or SHA512.  But also the code it used was copy-pasted out of a library that required you to have all the data at once.</p>
<p>Hence if you have a multi-gigabyte DVD .iso file that you want to checksum, you have to read that into a multi-gigabyte BINARY! to process it.</p>
<p>But since Ren-C is leveraging the cryptography of the <a href="https://github.com/Mbed-TLS/mbedtls">pure C library known as mbedTLS</a>, the foundations are there to stream in little blobs at a time...and it is generalized so we can just flip on or off any hashes we care about.  <a href="https://forum.rebol.info/t/what-is-a-port/617/5">If we only knew how to express streaming with PORT!s (or whatever)</a>.</p>
<p>And also, the CRC32 and ADLER32 algorithms we have "for free" by including Zlib are now set up in a way that the insecure hashes can be streamed too.</p>
<h2>
<img src="https://forum.rebol.info/images/emoji/twitter/globe_with_meridians.png?v=9" title=":globe_with_meridians:" class="emoji" alt=":globe_with_meridians:"> <em>"How Does This Tie Into The Web Repl Story"?</em> <img src="https://forum.rebol.info/images/emoji/twitter/globe_with_meridians.png?v=9" title=":globe_with_meridians:" class="emoji" alt=":globe_with_meridians:">
</h2>
<p>I really want to have a laser focus on whether investing effort into something is going to be something that pays off or not, and to me a part of that payoff question is "will people using the web build care".</p>
<p><strong>Right now the web build does not include the CHECKSUM function at all.</strong>  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>That is too bad, because I do believe that putting secure hashes into the hands of users at the Web Repl prompt (as well as other basic crypto parts) would be a great playground.</p>
<p>But it would be rather heavyweight to push secure hashing into the default .wasm being pulled down on every site if it didn't use it.  This is why I really want to get "Wasm extensions" working, that can be dynamically loaded.  There's something called "side modules" that I have meant to explore but haven't.</p>
<p>Anyway, I hope this summary gives a little insight into where this is at, and perhaps educational for those who don't have experience with the difference between secure/insecure hashing.</p>
          <p><a href="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808/1</link>
        <pubDate>Mon, 09 May 2022 04:04:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1808-1</guid>
        <source url="https://forum.rebol.info/t/checksums-and-secure-hashes-in-ren-c/1808.rss">Checksums and Secure Hashes in Ren-C</source>
      </item>
  </channel>
</rss>
