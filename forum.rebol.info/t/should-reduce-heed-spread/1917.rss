<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should REDUCE Heed SPREAD?</title>
    <link>https://forum.rebol.info/t/should-reduce-heed-spread/1917</link>
    <description>When [suggesting the term SPREAD](https://forum.rebol.info/t/putting-splicing-intent-on-appended-value/1873/9?u=hostilefork), @rgchris gave this example for REDUCE behavior, which hadn&#39;t occurred to me previously:

    &gt;&gt; reduce [spread [a b c] [a b c]]
    == [a b c [a b c]]

Nothing about the design makes this happen automatically.  REDUCE has historically errored on isotopes.  So code has to be added to override that.

I&#39;m guessing most people would be in favor of having the splicing behavior.  Arguments that say that there should be a 1:1 correspondence between expressions and values in a REDUCE are already pretty much out the window, since VOID elements vanish (including conditionals that don&#39;t take any branch).
      
## DELIMIT Would Presumably Want It Too

I&#39;ve complained in the past that the often random-seeming treatments of blocks in Rebol2 functions like REJOIN lead to problems--and that it would be better if people had to be explicit about their intent.  This offers the ability to &quot;inherit&quot; whatever the enclosing delimiting strategy is, and fold into the existing operation (technically more efficient):

    &gt;&gt; block: [&quot;c&quot; &quot;d&quot;]

    &gt;&gt; spaced [&quot;a&quot; &quot;b&quot; block]
    ** Error: BLOCK! not handled by DELIMIT, use SPREAD or desired string conversion

    &gt;&gt; spaced [&quot;a&quot; &quot;b&quot; spread block]
    == &quot;a b c d&quot;

    &gt;&gt; spaced [&quot;a&quot; &quot;b&quot; unspaced block]  ; if you wanted another interpretation
    == &quot;a b cd&quot;

I believe I prefer this over having some default way that blocks behave inside string conversions.  The odds of guessing right are low enough that it&#39;s better to have people be explicit.

So...presuming there&#39;s no objections....there&#39;s an agenda item to fuse together the stackless logic that performs a REDUCE so that it&#39;s the same code running in DELIMIT, so I&#39;d probably go ahead and do that and make these things work.

**UPDATE circa Oct 2022: This has been done, so you can now use this feature.**</description>
    
    <lastBuildDate>Sat, 18 Mar 2023 00:15:58 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/should-reduce-heed-spread/1917.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should REDUCE Heed SPREAD?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1917">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>When <a href="https://forum.rebol.info/t/putting-splicing-intent-on-appended-value/1873/9">suggesting the term SPREAD </a>, <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> gave this example for REDUCE behavior, which hadn't occurred to me previously:</p>
<pre><code>&gt;&gt; reduce [spread [a b c] [a b c]]
== [a b c [a b c]]
</code></pre>
</blockquote>
</aside>
<p>I think I've mentioned before that this raises some questions about how casual we should be about variables holding isotopes.</p>
<p>We already know that true and false isotopes, as well as null isotopes, have to be able to be accessed casually.  How about splices?</p>
<p>For instance, should you be able to write this:</p>
<pre><code>&gt;&gt; x: spread [a b c]

&gt;&gt; reduce [x x]
== [a b c a b c]
</code></pre>
<p>Should the assignment itself create an error without a SET/ANY?</p>
<pre><code>&gt;&gt; x: spread [a b c]
** Error: Can't assign isotopes without SET/ANY

&gt;&gt; set/any 'x spread [a b c]
== ~(a b c)~
</code></pre>
<p>Or should you need to use a special form of access, like GET-WORD!?</p>
<pre><code>&gt;&gt; reduce [x x]
** Error: X contains a splice isotope, access with GET-WORD!

&gt;&gt; reduce [:x :x]
== [a b c a b c]
</code></pre>
<p><strong>At this point I think I'm leaning to saying the plain access works.</strong>  Remember this old behavor:</p>
<pre><code>rebol2&gt;&gt; x: [a b c]

rebol2&gt;&gt; append [a b c] x
== [a b c a b c]
</code></pre>
<p>Looked at that way, it's kind of like you were "appending a splicing isotope through a plain reference".</p>
          <p><a href="https://forum.rebol.info/t/should-reduce-heed-spread/1917/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-reduce-heed-spread/1917/4</link>
        <pubDate>Fri, 17 Mar 2023 16:07:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1917-4</guid>
        <source url="https://forum.rebol.info/t/should-reduce-heed-spread/1917.rss">Should REDUCE Heed SPREAD?</source>
      </item>
      <item>
        <title>Should REDUCE Heed SPREAD?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1917">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Does SPREAD here apply the isotope to that value in place or does it create something new?</p>
</blockquote>
</aside>
<p>It creates something new.</p>
<aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1917">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>is it reasonable to expect the above behaviour?</p>
</blockquote>
</aside>
<p>It's reasonable to ask if it works that way.  But it does not.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<p>The quoting level of a BLOCK! (or any other value) lives in its cell, not in the series pointed to that contains the contents.  It's a property like whether a slot in a block has the NEW-LINE flag.</p>
<p>Remember that the same underlying array storage can be imaged multiple times:</p>
<pre><code>&gt;&gt; block: [a b]

&gt;&gt; four: reduce [block, quote block, quote quote block, quasi block]
== [[a b] '[a b] ''[a b] ~[a b]~]

&gt;&gt; append block 'c

&gt;&gt; four
== [[a b c] '[a b c] ''[a b c] ~[a b c]~]
</code></pre>
<p>The quoting (and/or quasi) level lives resident in the bits of FOUR's array holding the cells.  The cells point at the array storage for BLOCK.</p>
<p>The only way to change the quoting levels is to manipulate the actual contents of FOUR.  You can't do it by modifying the BLOCK variable to change its quote level--that's only relevant to the cell stored in the context where block's value is looked up:</p>
<pre><code>&gt;&gt; block: spread block
== ~(a b c)~  ; isotope

&gt;&gt; four
== [[a b c] '[a b c] ''[a b c] ~[a b c]~]  ; unchanged
</code></pre>
<p>Hence there's no means to subversively create the situation of an isotope inside a block remotely.  You have to go through a function like CHANGE.  They can spread the values, or error, or have some other reaction--but they'll never be allowed to put the isotope in the block.</p>
          <p><a href="https://forum.rebol.info/t/should-reduce-heed-spread/1917/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-reduce-heed-spread/1917/3</link>
        <pubDate>Tue, 16 Aug 2022 13:18:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1917-3</guid>
        <source url="https://forum.rebol.info/t/should-reduce-heed-spread/1917.rss">Should REDUCE Heed SPREAD?</source>
      </item>
      <item>
        <title>Should REDUCE Heed SPREAD?</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>A small thought for now:</p>
<pre><code>a: 'a b: 'b c: 'c
; for infinite reduction of 'a 'b and 'c

block: [a b c [a b c]]

reduce block
=&gt; [a b c [a b c]]
; ok

find block spread pick block 4
=&gt; [a b c [a b c]]
; ok

spread pick block 4
=&gt; isotope value
; ok, or 'isotoped value' or 'isotopic value' or just 'isotope'?

reduce block
=&gt; [a b c a b c]
; ??
</code></pre>
<p>Does SPREAD here apply the isotope to that value in place or does it create something new? I kind of suspect the latter, but is it reasonable to expect the above behaviour?</p>
          <p><a href="https://forum.rebol.info/t/should-reduce-heed-spread/1917/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-reduce-heed-spread/1917/2</link>
        <pubDate>Tue, 16 Aug 2022 12:57:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1917-2</guid>
        <source url="https://forum.rebol.info/t/should-reduce-heed-spread/1917.rss">Should REDUCE Heed SPREAD?</source>
      </item>
      <item>
        <title>Should REDUCE Heed SPREAD?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>When <a href="https://forum.rebol.info/t/putting-splicing-intent-on-appended-value/1873/9">suggesting the term SPREAD</a>, <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> gave this example for REDUCE behavior, which hadn't occurred to me previously:</p>
<pre><code>&gt;&gt; reduce [spread [a b c] [a b c]]
== [a b c [a b c]]
</code></pre>
<p>Nothing about the design makes this happen automatically.  REDUCE has historically errored on isotopes.  So code has to be added to override that.</p>
<p>I'm guessing most people would be in favor of having the splicing behavior.  Arguments that say that there should be a 1:1 correspondence between expressions and values in a REDUCE are already pretty much out the window, since VOID elements vanish (including conditionals that don't take any branch).</p>
<h2>
<a name="delimit-would-presumably-want-it-too-1" class="anchor" href="https://forum.rebol.info#delimit-would-presumably-want-it-too-1"></a>DELIMIT Would Presumably Want It Too</h2>
<p>I've complained in the past that the often random-seeming treatments of blocks in Rebol2 functions like REJOIN lead to problems--and that it would be better if people had to be explicit about their intent.  This offers the ability to "inherit" whatever the enclosing delimiting strategy is, and fold into the existing operation (technically more efficient):</p>
<pre><code>&gt;&gt; block: ["c" "d"]

&gt;&gt; spaced ["a" "b" block]
** Error: BLOCK! not handled by DELIMIT, use SPREAD or desired string conversion

&gt;&gt; spaced ["a" "b" spread block]
== "a b c d"

&gt;&gt; spaced ["a" "b" unspaced block]  ; if you wanted another interpretation
== "a b cd"
</code></pre>
<p>I believe I prefer this over having some default way that blocks behave inside string conversions.  The odds of guessing right are low enough that it's better to have people be explicit.</p>
<p>So...presuming there's no objections....there's an agenda item to fuse together the stackless logic that performs a REDUCE so that it's the same code running in DELIMIT, so I'd probably go ahead and do that and make these things work.</p>
<p><strong>UPDATE circa Oct 2022: This has been done, so you can now use this feature.</strong></p>
          <p><a href="https://forum.rebol.info/t/should-reduce-heed-spread/1917/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-reduce-heed-spread/1917/1</link>
        <pubDate>Tue, 16 Aug 2022 04:10:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1917-1</guid>
        <source url="https://forum.rebol.info/t/should-reduce-heed-spread/1917.rss">Should REDUCE Heed SPREAD?</source>
      </item>
  </channel>
</rss>
