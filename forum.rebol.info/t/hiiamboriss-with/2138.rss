<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>hiiamboris&#39;s WITH</title>
    <link>https://forum.rebol.info/t/hiiamboriss-with/2138</link>
    <description>I&#39;ve mentioned that binding might be helped by a dialect, and it turns out there is some precedent in **[hiiamboris&#39;s WITH](https://codeberg.org/hiiamboris/red-common/src/branch/master/with.red)**:

&gt; ### USAGE SUMMARY
&gt; 
&gt;     with x  [..]          == bind [..] x
&gt;     with &#39;x [..]          == bind [..] &#39;x
&gt;     with :fun [..]        == bind [..] :fun
&gt;     with [:fun] [..]      == bind [..] :fun
&gt;     with [x y &#39;z] [..]    == bind bind bind [..] &#39;z y x
&gt;     with [x: 1 y: 2] [..] == bind [..] context [x: 1 y: 2]
&gt; 
&gt; ### EXAMPLES
&gt; 
&gt; #### omit the path to an object, but work inside it&#39;s context:
&gt; 
&gt;     do with face/parent/pane/1 [
&gt;         color: red
&gt;         text: mold color
&gt;         visible?: yes
&gt;     ]
&gt;     
&gt;     if true with system/view/fonts [print [serif size]]
&gt; 
&gt;     f: func [/- /+ /*] [        ;-- redefines important globals locally
&gt;         (do something with local flags)
&gt;         foreach x [set..] with system/words [
&gt;             (do something with global * + -)
&gt;         ]
&gt;     ]
&gt; 
&gt; #### create static storage for functions where existing literal forms don&#39;t allow you to:
&gt; 
&gt;     factorial: func [x] with [cache: make hash! [0 1]] [
&gt;         any [
&gt;             select/skip cache x 2
&gt;             put cache x x * factorial x - 1
&gt;         ]
&gt;     ]
&gt; 
&gt; #### anonymize words used during initialization of the program:
&gt; 
&gt;     first item in the block should be of set-word! type
&gt; 
&gt;     do with [x: 1 y: 2] [
&gt;         z: x * y
&gt;         ... other code that uses x or y ...
&gt;     ]
&gt; 
&gt; #### bind a block to multiple contexts at once (in the list order):
&gt; 
&gt; First item in the block should be of word!/get-word!, path!/get-path! or lit-word! type
&gt;
&gt; 1. words and paths values are fetched, while lit-words are converted into words
&gt;     get-words and get-paths should be used for function context, otherwise they get evaluated
&gt;
&gt; 2. if resulting value is a context, block is bound to it
&gt;         if resulting value is a word, block is bound to the context of this word
&gt; 
&gt;     the following example illustrates usage of words and lit-words:
&gt; 
&gt;        a: b: x: y: none
&gt;        c: context [
&gt;            a: 1
&gt;            b: 2
&gt;            f: func [x y] [
&gt;               ; calls `with` internally
&gt;               print composite [self &#39;x] &quot;a=(a) b=(b) x*y=(x * y)&quot;
&gt;               ; equivalent
&gt;               print composite [self :f] &quot;a=(a) b=(b) x*y=(x * y)&quot;
&gt;            ]
&gt;        ]
&gt;     
&gt;   Thus, `with [c]` is equivalent to `with c`, while `with [&#39;c]` - to `with &#39;c`.
&gt; 
&gt; ### WHY IS IT DESIGNED LIKE THIS?
&gt; 
&gt; 1. It does not evaluate
&gt; 
&gt;    `with` does not evaluate the block, so:
&gt;     - it can be used after `context`s, `if`s, `loop`s, `func`s, etc.
&gt;     - it can be chained `with x with y ...`
&gt; 
&gt;     I&#39;ve found that this makes code much more readable than it would be with `bind`.
&gt;     Prefix it with `do` if you want immediate evaluation.
&gt; 
&gt; 2. It accepts blocks
&gt; 
&gt;    Design question here was - if we allow block! for `ctx`, how should we treat it?
&gt;     - convert it to a context? `ctx: context ctx`
&gt;     
&gt;        that shortens the `with context [locals...] [code]` idiom
&gt; 
&gt;     - list multiple contexts in a block as a sequence and bind to each one?
&gt; 
&gt;        that shortens `with this with that [code]` idiom
&gt;  
&gt;     Personally, I&#39;ve used the 1st at least a few times, but 2nd - never, though I admit there are use cases.
&gt;     This can be solved by checking type of the 1st item in the block is a set-word or not ;)
&gt;     But still ambiguous! When `with` gets a `word!` argument it can:
&gt;      - get the value of this word, which should be an `object!`, and bind to this object
&gt;     - get the context of this word, and bind to this context
&gt; 
&gt;     When inside a context, 2nd option is nice:
&gt; 
&gt;        context [
&gt;            a: 1
&gt;            f: func [x y] [
&gt;                with [self x] [x * y * a]
&gt;            ]
&gt;         ]
&gt; 
&gt;     ..where the alternative would be:
&gt; 
&gt;        context [
&gt;            a: 1
&gt;            f: func [x y] [
&gt;                with context? &#39;x with self [x * y * a]
&gt;            ]
&gt;        ]
&gt; 
&gt;     When outside of it, 1st option is better:
&gt; 
&gt;        x: context [x: 10]
&gt;        y: context [y: 20]
&gt;        do with [x y] [x * y]
&gt; 
&gt;     ..where the alternative would be:
&gt; 
&gt;        x: context [x: 10]
&gt;        y: context [y: 20]
&gt;        do with in x &#39;x with in y &#39;y [x * y]
&gt; 
&gt;     But this still can be solved: let `word!`s evaluate to contexts and `lit-word!`s, same as we have `bind code ctx` vs `bind code &#39;ctx`:
&gt; 
&gt;        context [
&gt;            a: 1
&gt;            f: func [x y] [
&gt;                with [self &#39;x] [x * y * a]
&gt;            ]
&gt;        ]
&gt; 
&gt;        x: context [x: 10]
&gt;        y: context [y: 20]
&gt;        do with [x y] [x * y]</description>
    
    <lastBuildDate>Tue, 30 Jan 2024 21:14:23 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/hiiamboriss-with/2138.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>hiiamboris&#39;s WITH</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've mentioned that binding might be helped by a dialect, and it turns out there is some precedent in <strong><a href="https://codeberg.org/hiiamboris/red-common/src/branch/master/with.red">hiiamboris's WITH</a></strong>:</p>
<blockquote>
<h3>USAGE SUMMARY</h3>
<pre><code>with x  [..]          == bind [..] x
with 'x [..]          == bind [..] 'x
with :fun [..]        == bind [..] :fun
with [:fun] [..]      == bind [..] :fun
with [x y 'z] [..]    == bind bind bind [..] 'z y x
with [x: 1 y: 2] [..] == bind [..] context [x: 1 y: 2]
</code></pre>
<h3>EXAMPLES</h3>
<h4>omit the path to an object, but work inside it's context:</h4>
<pre><code>do with face/parent/pane/1 [
    color: red
    text: mold color
    visible?: yes
]

if true with system/view/fonts [print [serif size]]

f: func [/- /+ /*] [        ;-- redefines important globals locally
    (do something with local flags)
    foreach x [set..] with system/words [
        (do something with global * + -)
    ]
]
</code></pre>
<h4>create static storage for functions where existing literal forms don't allow you to:</h4>
<pre><code>factorial: func [x] with [cache: make hash! [0 1]] [
    any [
        select/skip cache x 2
        put cache x x * factorial x - 1
    ]
]
</code></pre>
<h4>anonymize words used during initialization of the program:</h4>
<pre><code>first item in the block should be of set-word! type

do with [x: 1 y: 2] [
    z: x * y
    ... other code that uses x or y ...
]
</code></pre>
<h4>bind a block to multiple contexts at once (in the list order):</h4>
<p>First item in the block should be of word!/get-word!, path!/get-path! or lit-word! type</p>
<ol>
<li>
<p>words and paths values are fetched, while lit-words are converted into words<br>
get-words and get-paths should be used for function context, otherwise they get evaluated</p>
</li>
<li>
<p>if resulting value is a context, block is bound to it<br>
if resulting value is a word, block is bound to the context of this word</p>
<p>the following example illustrates usage of words and lit-words:</p>
<pre><code>a: b: x: y: none
c: context [
    a: 1
    b: 2
    f: func [x y] [
       ; calls `with` internally
       print composite [self 'x] "a=(a) b=(b) x*y=(x * y)"
       ; equivalent
       print composite [self :f] "a=(a) b=(b) x*y=(x * y)"
    ]
]
</code></pre>
</li>
</ol>
<p>Thus, <code>with [c]</code> is equivalent to <code>with c</code>, while <code>with ['c]</code> - to <code>with 'c</code>.</p>
<h3>WHY IS IT DESIGNED LIKE THIS?</h3>
<ol>
<li>
<p>It does not evaluate</p>
<p><code>with</code> does not evaluate the block, so:</p>
<ul>
<li>it can be used after <code>context</code>s, <code>if</code>s, <code>loop</code>s, <code>func</code>s, etc.</li>
<li>it can be chained <code>with x with y ...</code>
</li>
</ul>
<p>I've found that this makes code much more readable than it would be with <code>bind</code>.<br>
Prefix it with <code>do</code> if you want immediate evaluation.</p>
</li>
<li>
<p>It accepts blocks</p>
<p>Design question here was - if we allow block! for <code>ctx</code>, how should we treat it?</p>
<ul>
<li>
<p>convert it to a context? <code>ctx: context ctx</code></p>
<p>that shortens the <code>with context [locals...] [code]</code> idiom</p>
</li>
<li>
<p>list multiple contexts in a block as a sequence and bind to each one?</p>
<p>that shortens <code>with this with that [code]</code> idiom</p>
</li>
</ul>
<p>Personally, I've used the 1st at least a few times, but 2nd - never, though I admit there are use cases.<br>
This can be solved by checking type of the 1st item in the block is a set-word or not <img src="https://forum.rebol.info/images/emoji/twitter/wink.png?v=12" title=":wink:" class="emoji" alt=":wink:" loading="lazy" width="20" height="20"><br>
But still ambiguous! When <code>with</code> gets a <code>word!</code> argument it can:</p>
<ul>
<li>get the value of this word, which should be an <code>object!</code>, and bind to this object</li>
<li>get the context of this word, and bind to this context</li>
</ul>
<p>When inside a context, 2nd option is nice:</p>
<pre><code>context [
    a: 1
    f: func [x y] [
        with [self x] [x * y * a]
    ]
 ]
</code></pre>
<p>..where the alternative would be:</p>
<pre><code>context [
    a: 1
    f: func [x y] [
        with context? 'x with self [x * y * a]
    ]
]
</code></pre>
<p>When outside of it, 1st option is better:</p>
<pre><code>x: context [x: 10]
y: context [y: 20]
do with [x y] [x * y]
</code></pre>
<p>..where the alternative would be:</p>
<pre><code>x: context [x: 10]
y: context [y: 20]
do with in x 'x with in y 'y [x * y]
</code></pre>
<p>But this still can be solved: let <code>word!</code>s evaluate to contexts and <code>lit-word!</code>s, same as we have <code>bind code ctx</code> vs <code>bind code 'ctx</code>:</p>
<pre><code>context [
    a: 1
    f: func [x y] [
        with [self 'x] [x * y * a]
    ]
]

x: context [x: 10]
y: context [y: 20]
do with [x y] [x * y]
</code></pre>
</li>
</ol>
</blockquote>
          <p><a href="https://forum.rebol.info/t/hiiamboriss-with/2138/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/hiiamboriss-with/2138/1</link>
        <pubDate>Tue, 30 Jan 2024 21:14:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2138-1</guid>
        <source url="https://forum.rebol.info/t/hiiamboriss-with/2138.rss">hiiamboris&#39;s WITH</source>
      </item>
  </channel>
</rss>
