<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>hiiamboris&#39;s WITH</title>
    <link>https://forum.rebol.info/t/hiiamboriss-with/2138</link>
    <description>I&#39;ve mentioned that binding might be helped by a dialect, and it turns out there is some precedent in **[hiiamboris&#39;s WITH](https://codeberg.org/hiiamboris/red-common/src/branch/master/with.red)**:

&gt; ### USAGE SUMMARY
&gt; 
&gt;     with x  [..]          == bind [..] x
&gt;     with &#39;x [..]          == bind [..] &#39;x
&gt;     with :fun [..]        == bind [..] :fun
&gt;     with [:fun] [..]      == bind [..] :fun
&gt;     with [x y &#39;z] [..]    == bind bind bind [..] &#39;z y x
&gt;     with [x: 1 y: 2] [..] == bind [..] context [x: 1 y: 2]
&gt; 
&gt; ### EXAMPLES
&gt; 
&gt; #### omit the path to an object, but work inside it&#39;s context:
&gt; 
&gt;     do with face/parent/pane/1 [
&gt;         color: red
&gt;         text: mold color
&gt;         visible?: yes
&gt;     ]
&gt;     
&gt;     if true with system/view/fonts [print [serif size]]
&gt; 
&gt;     f: func [/- /+ /*] [        ;-- redefines important globals locally
&gt;         (do something with local flags)
&gt;         foreach x [set..] with system/words [
&gt;             (do something with global * + -)
&gt;         ]
&gt;     ]
&gt; 
&gt; #### create static storage for functions where existing literal forms don&#39;t allow you to:
&gt; 
&gt;     factorial: func [x] with [cache: make hash! [0 1]] [
&gt;         any [
&gt;             select/skip cache x 2
&gt;             put cache x x * factorial x - 1
&gt;         ]
&gt;     ]
&gt; 
&gt; #### anonymize words used during initialization of the program:
&gt; 
&gt;     first item in the block should be of set-word! type
&gt; 
&gt;     do with [x: 1 y: 2] [
&gt;         z: x * y
&gt;         ... other code that uses x or y ...
&gt;     ]
&gt; 
&gt; #### bind a block to multiple contexts at once (in the list order):
&gt; 
&gt; First item in the block should be of word!/get-word!, path!/get-path! or lit-word! type
&gt;
&gt; 1. words and paths values are fetched, while lit-words are converted into words
&gt;     get-words and get-paths should be used for function context, otherwise they get evaluated
&gt;
&gt; 2. if resulting value is a context, block is bound to it
&gt;         if resulting value is a word, block is bound to the context of this word
&gt; 
&gt;     the following example illustrates usage of words and lit-words:
&gt; 
&gt;        a: b: x: y: none
&gt;        c: context [
&gt;            a: 1
&gt;            b: 2
&gt;            f: func [x y] [
&gt;               ; calls `with` internally
&gt;               print composite [self &#39;x] &quot;a=(a) b=(b) x*y=(x * y)&quot;
&gt;               ; equivalent
&gt;               print composite [self :f] &quot;a=(a) b=(b) x*y=(x * y)&quot;
&gt;            ]
&gt;        ]
&gt;     
&gt;   Thus, `with [c]` is equivalent to `with c`, while `with [&#39;c]` - to `with &#39;c`.
&gt; 
&gt; ### WHY IS IT DESIGNED LIKE THIS?
&gt; 
&gt; 1. It does not evaluate
&gt; 
&gt;    `with` does not evaluate the block, so:
&gt;     - it can be used after `context`s, `if`s, `loop`s, `func`s, etc.
&gt;     - it can be chained `with x with y ...`
&gt; 
&gt;     I&#39;ve found that this makes code much more readable than it would be with `bind`.
&gt;     Prefix it with `do` if you want immediate evaluation.
&gt; 
&gt; 2. It accepts blocks
&gt; 
&gt;    Design question here was - if we allow block! for `ctx`, how should we treat it?
&gt;     - convert it to a context? `ctx: context ctx`
&gt;     
&gt;        that shortens the `with context [locals...] [code]` idiom
&gt; 
&gt;     - list multiple contexts in a block as a sequence and bind to each one?
&gt; 
&gt;        that shortens `with this with that [code]` idiom
&gt;  
&gt;     Personally, I&#39;ve used the 1st at least a few times, but 2nd - never, though I admit there are use cases.
&gt;     This can be solved by checking type of the 1st item in the block is a set-word or not ;)
&gt;     But still ambiguous! When `with` gets a `word!` argument it can:
&gt;      - get the value of this word, which should be an `object!`, and bind to this object
&gt;     - get the context of this word, and bind to this context
&gt; 
&gt;     When inside a context, 2nd option is nice:
&gt; 
&gt;        context [
&gt;            a: 1
&gt;            f: func [x y] [
&gt;                with [self x] [x * y * a]
&gt;            ]
&gt;         ]
&gt; 
&gt;     ..where the alternative would be:
&gt; 
&gt;        context [
&gt;            a: 1
&gt;            f: func [x y] [
&gt;                with context? &#39;x with self [x * y * a]
&gt;            ]
&gt;        ]
&gt; 
&gt;     When outside of it, 1st option is better:
&gt; 
&gt;        x: context [x: 10]
&gt;        y: context [y: 20]
&gt;        do with [x y] [x * y]
&gt; 
&gt;     ..where the alternative would be:
&gt; 
&gt;        x: context [x: 10]
&gt;        y: context [y: 20]
&gt;        do with in x &#39;x with in y &#39;y [x * y]
&gt; 
&gt;     But this still can be solved: let `word!`s evaluate to contexts and `lit-word!`s, same as we have `bind code ctx` vs `bind code &#39;ctx`:
&gt; 
&gt;        context [
&gt;            a: 1
&gt;            f: func [x y] [
&gt;                with [self &#39;x] [x * y * a]
&gt;            ]
&gt;        ]
&gt; 
&gt;        x: context [x: 10]
&gt;        y: context [y: 20]
&gt;        do with [x y] [x * y]</description>
    
    <lastBuildDate>Mon, 18 Nov 2024 21:49:47 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/hiiamboriss-with/2138.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>hiiamboris&#39;s WITH</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2138">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">with x  [..]          == bind [..] x
with 'x [..]          == bind [..] 'x
with :fun [..]        == bind [..] :fun
with [:fun] [..]      == bind [..] :fun
with [x y 'z] [..]    == bind bind bind [..] 'z y x
with [x: 1 y: 2] [..] == bind [..] context [x: 1 y: 2]
</code></pre>
</blockquote>
</aside>
<p>So I was wondering in the design of the WITH-like BIND what plain words should do, as opposed to <code>@word</code>.</p>
<p>One concept I had was that with plain words, BIND could serve the role of "old USE" and create new bindings.  Then, an <code>@word</code> would mean that you wanted to bind to that particular word.</p>
<pre><code>x: 10
y: 20
eval bind [@x y] [
   x: 100  ; overwrites X
   y: 200  ; would not overwrite as plain Y word made new variable
]
</code></pre>
<p>That would be making a distinction between words and <code>@word</code> that lines up with how FOR-EACH and others treat variables.  It was chosen over <code>$word</code> due to the ability to pass the variable reference without a block:</p>
<pre><code>iterate @var [...]   ; the @ sticks, but $var makes a plain bound word
</code></pre>
<p>But BIND has a competing intent, which is when you want to bind to the thing the word points to.</p>
<pre><code>foo: make object! [x: 10 y: 20]
bar: make object! [z: 30]

eval bind [@foo @bar] [  ; alternative intent of @
   assert [all [x = 10, y = 20]]
   assert [z = 30]
]
</code></pre>
<p>This is more like the PARSE meaning of @ which means "dereference this word".</p>
<p>Another way of doing that could be GROUP! evaluations:</p>
<pre><code>eval bind [(foo) (bar)] [
   assert [all [x = 10, y = 20]]
   assert [z = 30]
]
</code></pre>
<p>It's worth pointing out that making new variables with BIND can be done easily another way, with FENCE!, so we could say:</p>
<pre><code>x: 10
y: 20
eval bind [x {y: ~}] [  ; instead of [@x y]
   x: 100  ; overwrites X
   y: 200  ; would not overwrite as {Y: ~} made new variable
]
</code></pre>
<p>And I think giving a value to a new variable is probably more common than not wanting to, anyway.</p>
<p>That frees up the <code>@foo</code> to mean "what I intend to bind to is what you get by dereferencing this" intent.</p>
<p>So binding a single word means bind using the binding of that word.</p>
<pre><code>block: [print ["The value of x is:" x]]

foo: func [x] [
    eval bind $x block
    eval bind [x] block
]

foo 10  ; would print the message with x as 10
</code></pre>
<p><strong>I can't necessarily prove it offhand, but I feel like having <code>bind [@x y]</code> mean something parallel to <code>for-each [@x y]</code> would be beneficial.</strong></p>
<p>That would indicate producing a new variable for Y, and reusing a binding for X.</p>
<p>This makes BIND able to function easily as a "LET that takes a block"</p>
<pre><code>let x
x: 10

bind 'x [x: 10]
</code></pre>
<p>Something about pushing on these symmetries seems more important than giving you a way to dereference variables to implicate the objects they point to, that's briefer than a GROUP!.</p>
<p>(Honestly, multiple binds are probably not that common, and in fact you wouldn't get a lot of benefit out of it by saying <strong><code>bind [(obj1) (obj2)] ...</code></strong> as opposed to <strong><code>bind obj1 bind obj2 ...</code></strong>)</p>
<h2><a name="p-7914-the-binding-dialect-likely-needs-more-features-1" class="anchor" href="https://forum.rebol.info#p-7914-the-binding-dialect-likely-needs-more-features-1"></a>The Binding Dialect Likely Needs More Features</h2>
<p>This is sort of the tip of the iceberg in "meanings you might have for binding requests".  So <strong></strong> could be another way of saying you should dereference, as part of a broader idea of TAG!-instructions:</p>
<pre><code>foo: make object! [x: 10 y: 20]
bar: make object! [z: 30]

eval bind [&lt;in&gt; foo &lt;in&gt; bar] [
   assert [all [x = 10, y = 20]]
   assert [z = 30]
]
</code></pre>
<p>So really we're talking about the needs of the most common form.</p>
<h2><a name="p-7914-althoughignoring-the-binding-is-annoying-2" class="anchor" href="https://forum.rebol.info#p-7914-althoughignoring-the-binding-is-annoying-2"></a>Although...Ignoring The Binding Is Annoying</h2>
<p>This has some consequence, for instance this would have the binding ignored and make a new variable:</p>
<pre><code> eval bind (bind obj 'x) code
</code></pre>
<p>While this would use the binding:</p>
<pre><code> eval bind (bind obj '@x) code
</code></pre>
<p>That would be true of FOR-EACH as well.</p>
<p>It does point out that if you want to bind to a single object's field and not all of it, then it would be helpful to have a notation for that.</p>
<pre><code>eval bind [@obj.x] code
</code></pre>
<p>This could suggest that maybe undecorated means "evaluate this", such that these would be equivalent:</p>
<pre><code> bind foo [...]
 bind [foo] [...]
</code></pre>
<p>As opposed to the FOR-EACH equivalency, which would be:</p>
<pre><code> bind 'foo [...]
 bind [foo] [...]
</code></pre>
<p>I don't know.  <img src="https://forum.rebol.info/images/emoji/twitter/pouting_cat.png?v=12" title=":pouting_cat:" class="emoji" alt=":pouting_cat:" loading="lazy" width="20" height="20">  I guess I'll just have to try things and see what's most useful.</p>
          <p><a href="https://forum.rebol.info/t/hiiamboriss-with/2138/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/hiiamboriss-with/2138/3</link>
        <pubDate>Mon, 18 Nov 2024 21:29:06 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2138-3</guid>
        <source url="https://forum.rebol.info/t/hiiamboriss-with/2138.rss">hiiamboris&#39;s WITH</source>
      </item>
      <item>
        <title>hiiamboris&#39;s WITH</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I think it's best to kill off the <strong><code>&lt;static&gt;</code></strong> annotation in function specs, replacing it with something like WITH.</p>
<pre><code>accumulate: function [
    return: [integer!]
    num [integer!]
    &lt;static&gt; state (0)
][
    return state: state + num
]
</code></pre>
<p>transitioning to...</p>
<pre><code>accumulate: function [
    return: [integer!]
    num [integer!]
] with {state: 0} [
    return state: state + num
]
</code></pre>
<p>It looks a little more awkward (maybe?).</p>
<p>But statics are a fairly rarely-used ability, and leveraging a generic part like WITH is just a better bet.</p>
<hr>
<aside class="quote no-group">
<blockquote>
<p>WHY IS IT DESIGNED LIKE THIS?</p>
<p><code>with</code> does not evaluate the block, so:</p>
<ul>
<li>
<p>it can be used after <code>context</code>s, <code>if</code>s, <code>loop</code>s, <code>func</code>s, etc.</p>
</li>
<li>
<p>it can be chained <code>with x with y ...</code>I've found that this makes code much more readable than it would be with <code>bind</code>.</p>
</li>
</ul>
<p>Prefix it with <code>do</code> if you want immediate evaluation.</p>
</blockquote>
</aside>
<p>So Ren-C DO is for running whole scripts or code from any language (e.g. JavaScript and CSS instead of Rebol), requires a header on Rebol scripts, etc.  It's not for evaluating blocks.  You have to use EVAL (or unabbreviated EVALUATE).</p>
<p>So instead of <strong>do with</strong> you'd say <strong>eval with</strong>.</p>
<p>EVAL WITH would thus be similar to (but more powerful than) what has historically been known as USE.</p>
<pre><code>x: 10 y: 20
use [x y] [  ; Redbol USE
    x: 100 y: 200
    print ["Inside the USE X and Y are" x y]  ; 100 200
]
print ["Outside the USE X and Y are" x y]  ; 10 20
</code></pre>
<p>There's not a lot of that in Ren-C.  Instead it uses LET, which is generally preferable since it doesn't make you indent your code.</p>
<p>In the narrow cases where I would want to do this, I don't feel it would be that terrible to say:</p>
<pre><code>x: 10 y: 20
eval with [x y] [  ; could be (with {x: y: ~})
    x: 100 y: 200
    print ["Inside the EVAL WITH X and Y are" x y]  ; 100 200
]
print ["Outside the EVAL WITH X and Y are" x y]  ; 10 20
</code></pre>
<p>Especially because you often could do the assignments right in place, as you can here:</p>
<pre><code>x: 10 y: 20
eval with {x: 100, y: 200} [
    print ["Inside the EVAL WITH X and Y are" x y]  ; 100 200
]
print ["Outside the EVAL WITH X and Y are" x y]  ; 10 20
</code></pre>
<p>My concept for retaking the word USE is to import things into the current scope.  So like WITH, but not requiring a level of indentation.</p>
<pre><code>obj: {foo: 1000 bar: 2000}

use obj
print ["FOO is" foo "and BAR is" bar]  ; 1000 2000
</code></pre>
<p>Among the many uses for such a thing would be bringing GATHER'd declarations inside a PARSE into scope:</p>
<pre><code>if 1 &lt; 2 [
    let filename: "demo.txt"
    use parse filename [gather [
        emit base: between &lt;here&gt; "."
        emit extension: thru &lt;end&gt;
    ]] else [
        fail "Not a file with an extension"
    ]
    print ["The base was" base]  ; demo
    print ["The extension was" extension]  ; txt
]
; base and extension would not be defined here!
</code></pre>
<h2><a name="p-7892-is-with-the-right-word-for-with-1" class="anchor" href="https://forum.rebol.info#p-7892-is-with-the-right-word-for-with-1"></a>Is WITH the Right Word for WITH?</h2>
<p>The thing that bothers me is that WITH is a very generic term, that seems to me to be a good refinement.</p>
<pre><code>&gt;&gt; join:with "," tag! ["abc" "def" "ghi"]
== &lt;abc,def,ghi&gt;
</code></pre>
<p>This is really a bind-specific operation.  And I wonder if perhaps, since it is going in the direction of dialecting, if it should be the BIND dialect itself?</p>
<pre><code>accumulate: function [
    return: [integer!]
    num [integer!]
] bind {state: 0} [
    return state: state + num
]
</code></pre>
<p>In this model, BIND's first argument is the binding instructions, and the second argument is the block (or whatever) to bind.</p>
<p>This would kill the idea I had of the "arity-0 BIND", but that would just be a synonym for the <strong><code>$</code></strong> operator, and since there's a short operator for it the name of it doesn't have to be quite that short or critical.</p>
<p><strong>I think that it's probably best to say that this is what BIND is.</strong>  People can just learn that the second argument is the thing that gets bound.</p>
          <p><a href="https://forum.rebol.info/t/hiiamboriss-with/2138/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/hiiamboriss-with/2138/2</link>
        <pubDate>Thu, 14 Nov 2024 04:28:43 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2138-2</guid>
        <source url="https://forum.rebol.info/t/hiiamboriss-with/2138.rss">hiiamboris&#39;s WITH</source>
      </item>
      <item>
        <title>hiiamboris&#39;s WITH</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've mentioned that binding might be helped by a dialect, and it turns out there is some precedent in <strong><a href="https://codeberg.org/hiiamboris/red-common/src/branch/master/with.red">hiiamboris's WITH</a></strong>:</p>
<blockquote>
<h3>USAGE SUMMARY</h3>
<pre><code>with x  [..]          == bind [..] x
with 'x [..]          == bind [..] 'x
with :fun [..]        == bind [..] :fun
with [:fun] [..]      == bind [..] :fun
with [x y 'z] [..]    == bind bind bind [..] 'z y x
with [x: 1 y: 2] [..] == bind [..] context [x: 1 y: 2]
</code></pre>
<h3>EXAMPLES</h3>
<h4>omit the path to an object, but work inside it's context:</h4>
<pre><code>do with face/parent/pane/1 [
    color: red
    text: mold color
    visible?: yes
]

if true with system/view/fonts [print [serif size]]

f: func [/- /+ /*] [        ;-- redefines important globals locally
    (do something with local flags)
    foreach x [set..] with system/words [
        (do something with global * + -)
    ]
]
</code></pre>
<h4>create static storage for functions where existing literal forms don't allow you to:</h4>
<pre><code>factorial: func [x] with [cache: make hash! [0 1]] [
    any [
        select/skip cache x 2
        put cache x x * factorial x - 1
    ]
]
</code></pre>
<h4>anonymize words used during initialization of the program:</h4>
<pre><code>first item in the block should be of set-word! type

do with [x: 1 y: 2] [
    z: x * y
    ... other code that uses x or y ...
]
</code></pre>
<h4>bind a block to multiple contexts at once (in the list order):</h4>
<p>First item in the block should be of word!/get-word!, path!/get-path! or lit-word! type</p>
<ol>
<li>
<p>words and paths values are fetched, while lit-words are converted into words<br>
get-words and get-paths should be used for function context, otherwise they get evaluated</p>
</li>
<li>
<p>if resulting value is a context, block is bound to it<br>
if resulting value is a word, block is bound to the context of this word</p>
<p>the following example illustrates usage of words and lit-words:</p>
<pre><code>a: b: x: y: none
c: context [
    a: 1
    b: 2
    f: func [x y] [
       ; calls `with` internally
       print composite [self 'x] "a=(a) b=(b) x*y=(x * y)"
       ; equivalent
       print composite [self :f] "a=(a) b=(b) x*y=(x * y)"
    ]
]
</code></pre>
</li>
</ol>
<p>Thus, <code>with [c]</code> is equivalent to <code>with c</code>, while <code>with ['c]</code> - to <code>with 'c</code>.</p>
<h3>WHY IS IT DESIGNED LIKE THIS?</h3>
<ol>
<li>
<p>It does not evaluate</p>
<p><code>with</code> does not evaluate the block, so:</p>
<ul>
<li>it can be used after <code>context</code>s, <code>if</code>s, <code>loop</code>s, <code>func</code>s, etc.</li>
<li>it can be chained <code>with x with y ...</code></li>
</ul>
<p>I've found that this makes code much more readable than it would be with <code>bind</code>.<br>
Prefix it with <code>do</code> if you want immediate evaluation.</p>
</li>
<li>
<p>It accepts blocks</p>
<p>Design question here was - if we allow block! for <code>ctx</code>, how should we treat it?</p>
<ul>
<li>
<p>convert it to a context? <code>ctx: context ctx</code></p>
<p>that shortens the <code>with context [locals...] [code]</code> idiom</p>
</li>
<li>
<p>list multiple contexts in a block as a sequence and bind to each one?</p>
<p>that shortens <code>with this with that [code]</code> idiom</p>
</li>
</ul>
<p>Personally, I've used the 1st at least a few times, but 2nd - never, though I admit there are use cases.<br>
This can be solved by checking type of the 1st item in the block is a set-word or not <img src="https://forum.rebol.info/images/emoji/twitter/wink.png?v=12" title=":wink:" class="emoji" alt=":wink:" loading="lazy" width="20" height="20"><br>
But still ambiguous! When <code>with</code> gets a <code>word!</code> argument it can:</p>
<ul>
<li>get the value of this word, which should be an <code>object!</code>, and bind to this object</li>
<li>get the context of this word, and bind to this context</li>
</ul>
<p>When inside a context, 2nd option is nice:</p>
<pre><code>context [
    a: 1
    f: func [x y] [
        with [self x] [x * y * a]
    ]
 ]
</code></pre>
<p>..where the alternative would be:</p>
<pre><code>context [
    a: 1
    f: func [x y] [
        with context? 'x with self [x * y * a]
    ]
]
</code></pre>
<p>When outside of it, 1st option is better:</p>
<pre><code>x: context [x: 10]
y: context [y: 20]
do with [x y] [x * y]
</code></pre>
<p>..where the alternative would be:</p>
<pre><code>x: context [x: 10]
y: context [y: 20]
do with in x 'x with in y 'y [x * y]
</code></pre>
<p>But this still can be solved: let <code>word!</code>s evaluate to contexts and <code>lit-word!</code>s, same as we have <code>bind code ctx</code> vs <code>bind code 'ctx</code>:</p>
<pre><code>context [
    a: 1
    f: func [x y] [
        with [self 'x] [x * y * a]
    ]
]

x: context [x: 10]
y: context [y: 20]
do with [x y] [x * y]
</code></pre>
</li>
</ol>
</blockquote>
          <p><a href="https://forum.rebol.info/t/hiiamboriss-with/2138/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/hiiamboriss-with/2138/1</link>
        <pubDate>Tue, 30 Jan 2024 21:14:23 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2138-1</guid>
        <source url="https://forum.rebol.info/t/hiiamboriss-with/2138.rss">hiiamboris&#39;s WITH</source>
      </item>
  </channel>
</rss>
