<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why do ANY and ALL ignore VOID, when IF errors on it?</title>
    <link>https://forum.rebol.info/t/why-do-any-and-all-ignore-void-when-if-errors-on-it/2040</link>
    <description>The evolution of &quot;invisibility&quot; in Ren-C gave rise to two &quot;vaporizing intents&quot; [the VOID and NIHIL antiforms](https://forum.rebol.info/t/invisibility-reviewed-through-modern-eyes/2034).

The default evaluator (and UPARSE) accept that void is an &quot;opt-out state&quot; that can&#39;t be put in blocks.  But they don&#39;t vaporize VOID on a whim: it will still be the result of expressions whose last result is a void.

    &gt;&gt; 1 + 2 if false [&lt;a&gt;]
    == ~void~  ; anti

On the other hand, the empty parameter pack of NIHIL truly vaporizes unless you pipe it around with ^META:

    &gt;&gt; 1 + 2 nihil
    == 3

This means it&#39;s up to constructs to decide if they want to erase voids or not.  DELIMIT does, so you will see that reflected in things like UNSPACED:

    &gt;&gt; unspaced [&quot;A&quot; if false [&quot;B&quot;] &quot;C&quot;]
    == &quot;AC&quot;

COMPOSE vaporizes void slots (and errors on null ones).  [REDUCE is currently vaporizing VOID](https://forum.rebol.info/t/vaporizing-failed-conditionals-in-reduce/1665) because it seems like the default people want.

## But What Should ANY and ALL Do?

We can consider that VOID is neither truthy nor falsey, and IF will reject it:

    &gt;&gt; if (if false [true]) [&lt;unreachable&gt;]
    ** Error: IF doesn&#39;t accept VOID as its condition argument

When there was no VOID/NIHIL distinction, then ANY and ALL were backed into a corner.  If they decided to error on void, you couldn&#39;t use an ELIDE or ASSERT in the middle of them.  If they didn&#39;t error on VOID then the risk was that you could write something like **`all [1 = 1, 2 = 2, value]`** and if VALUE was just incidentally void you&#39;d get the 2 = 2 result, which may not have been your intent.

Today, things like ELIDE and ASSERT return NIHIL and can be safely vaporized by ANY and ALL.  This would seem to open up the choice to be consistent with IF, in erroring on voids as being neither true nor false.

One might suggest that if you really want to erase voids...you&#39;d have something that converted voids to nihil called ELIDE-IF-VOID

    &gt;&gt; value: void
    == ~void~  ; anti

    &gt;&gt; all [1 = 1, 2 = 2, value]
    ** Error: VALUE is VOID which is neither truthy nor falsey

    &gt;&gt; all [1 = 1, 2 = 2, elide-if-void value]
    == ~true~  ; isotope

## Things Like [FOR-BOTH](https://forum.rebol.info/t/demonstrating-for-both-loop-composability-for-the-win/1833) Would Get More Awkward...

I was fairly proud of this formulation:

    for-both: func [&#39;var blk1 blk2 body] [
        return unmeta* all [
            meta* for-each (var) blk1 body
            meta* for-each (var) blk2 body
        ]
    ]

(I wound up deciding that META would meta-raise everything--including pure null and void--so the asterisks were probably best included there for the alternative formulation.)

But if ALL and ANY errored on void, and you had to erase it, this would become:

    for-both: func [&#39;var blk1 blk2 body] [
        return unmeta* all [
            elide-if-void meta* for-each (var) blk1 body
            elide-if-void meta* for-each (var) blk2 body
        ]
    ]

If I put on my formalism hat, I can see how this is *safer*.  But I&#39;ve made similar arguments about why I don&#39;t want this:

    &gt;&gt; compose [a (if false [&#39;b]) c]
    ** Error: COMPOSE cannot erase VOID (use ELIDE-IF-VOID if intentional)

    &gt;&gt; compose [a (elide-if-void if false [&#39;b]) c]
    == [a c]

It is admittedly a bit different in ANY and ALL&#39;s case, because they&#39;re mixing in a test for truthiness.  But erasing voids by default has other advantages in writing wild control constructs.

## Erroring When You Don&#39;t Have To Inhibits Creativity

**When all things are mostly equal, safety isn&#39;t as compelling as enabling creativity in my current view of the language.**

I haven&#39;t seen any bad consequences of vaporizing the voids.  Yet the conveniences have been proven.

So that&#39;s the decision that has been made.  If you want to make a version of ANY and ALL that error on voids, you can do so with a /PREDICATE.</description>
    
    <lastBuildDate>Thu, 12 Sep 2024 14:01:13 +0000</lastBuildDate>
    <category>Questions</category>
    <atom:link href="https://forum.rebol.info/t/why-do-any-and-all-ignore-void-when-if-errors-on-it/2040.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why do ANY and ALL ignore VOID, when IF errors on it?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The evolution of "invisibility" in Ren-C gave rise to two "vaporizing intents" <a href="https://forum.rebol.info/t/invisibility-reviewed-through-modern-eyes/2034">the VOID and NIHIL antiforms</a>.</p>
<p>The default evaluator (and UPARSE) accept that void is an "opt-out state" that can't be put in blocks.  But they don't vaporize VOID on a whim: it will still be the result of expressions whose last result is a void.</p>
<pre><code>&gt;&gt; 1 + 2 if false [&lt;a&gt;]
== ~void~  ; anti
</code></pre>
<p>On the other hand, the empty parameter pack of NIHIL truly vaporizes unless you pipe it around with ^META:</p>
<pre><code>&gt;&gt; 1 + 2 nihil
== 3
</code></pre>
<p>This means it's up to constructs to decide if they want to erase voids or not.  DELIMIT does, so you will see that reflected in things like UNSPACED:</p>
<pre><code>&gt;&gt; unspaced ["A" if false ["B"] "C"]
== "AC"
</code></pre>
<p>COMPOSE vaporizes void slots (and errors on null ones).  <a href="https://forum.rebol.info/t/vaporizing-failed-conditionals-in-reduce/1665">REDUCE is currently vaporizing VOID</a> because it seems like the default people want.</p>
<h2>
<a name="but-what-should-any-and-all-do-1" class="anchor" href="https://forum.rebol.info#but-what-should-any-and-all-do-1"></a>But What Should ANY and ALL Do?</h2>
<p>We can consider that VOID is neither truthy nor falsey, and IF will reject it:</p>
<pre><code>&gt;&gt; if (if false [true]) [&lt;unreachable&gt;]
** Error: IF doesn't accept VOID as its condition argument
</code></pre>
<p>When there was no VOID/NIHIL distinction, then ANY and ALL were backed into a corner.  If they decided to error on void, you couldn't use an ELIDE or ASSERT in the middle of them.  If they didn't error on VOID then the risk was that you could write something like <strong><code>all [1 = 1, 2 = 2, value]</code></strong> and if VALUE was just incidentally void you'd get the 2 = 2 result, which may not have been your intent.</p>
<p>Today, things like ELIDE and ASSERT return NIHIL and can be safely vaporized by ANY and ALL.  This would seem to open up the choice to be consistent with IF, in erroring on voids as being neither true nor false.</p>
<p>One might suggest that if you really want to erase voids...you'd have something that converted voids to nihil called ELIDE-IF-VOID</p>
<pre><code>&gt;&gt; value: void
== ~void~  ; anti

&gt;&gt; all [1 = 1, 2 = 2, value]
** Error: VALUE is VOID which is neither truthy nor falsey

&gt;&gt; all [1 = 1, 2 = 2, elide-if-void value]
== ~true~  ; isotope
</code></pre>
<h2>
<a name="things-like-for-bothhttpsforumrebolinfotdemonstrating-for-both-loop-composability-for-the-win1833-would-get-more-awkward-2" class="anchor" href="https://forum.rebol.info#things-like-for-bothhttpsforumrebolinfotdemonstrating-for-both-loop-composability-for-the-win1833-would-get-more-awkward-2"></a>Things Like <a href="https://forum.rebol.info/t/demonstrating-for-both-loop-composability-for-the-win/1833">FOR-BOTH</a> Would Get More Awkward...</h2>
<p>I was fairly proud of this formulation:</p>
<pre><code>for-both: func ['var blk1 blk2 body] [
    return unmeta* all [
        meta* for-each (var) blk1 body
        meta* for-each (var) blk2 body
    ]
]
</code></pre>
<p>(I wound up deciding that META would meta-raise everything--including pure null and void--so the asterisks were probably best included there for the alternative formulation.)</p>
<p>But if ALL and ANY errored on void, and you had to erase it, this would become:</p>
<pre><code>for-both: func ['var blk1 blk2 body] [
    return unmeta* all [
        elide-if-void meta* for-each (var) blk1 body
        elide-if-void meta* for-each (var) blk2 body
    ]
]
</code></pre>
<p>If I put on my formalism hat, I can see how this is <em>safer</em>.  But I've made similar arguments about why I don't want this:</p>
<pre><code>&gt;&gt; compose [a (if false ['b]) c]
** Error: COMPOSE cannot erase VOID (use ELIDE-IF-VOID if intentional)

&gt;&gt; compose [a (elide-if-void if false ['b]) c]
== [a c]
</code></pre>
<p>It is admittedly a bit different in ANY and ALL's case, because they're mixing in a test for truthiness.  But erasing voids by default has other advantages in writing wild control constructs.</p>
<h2>
<a name="erroring-when-you-dont-have-to-inhibits-creativity-3" class="anchor" href="https://forum.rebol.info#erroring-when-you-dont-have-to-inhibits-creativity-3"></a>Erroring When You Don't Have To Inhibits Creativity</h2>
<p><strong>When all things are mostly equal, safety isn't as compelling as enabling creativity in my current view of the language.</strong></p>
<p>I haven't seen any bad consequences of vaporizing the voids.  Yet the conveniences have been proven.</p>
<p>So that's the decision that has been made.  If you want to make a version of ANY and ALL that error on voids, you can do so with a /PREDICATE.</p>
          <p><a href="https://forum.rebol.info/t/why-do-any-and-all-ignore-void-when-if-errors-on-it/2040/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-do-any-and-all-ignore-void-when-if-errors-on-it/2040/1</link>
        <pubDate>Thu, 29 Jun 2023 02:09:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2040-1</guid>
        <source url="https://forum.rebol.info/t/why-do-any-and-all-ignore-void-when-if-errors-on-it/2040.rss">Why do ANY and ALL ignore VOID, when IF errors on it?</source>
      </item>
  </channel>
</rss>
