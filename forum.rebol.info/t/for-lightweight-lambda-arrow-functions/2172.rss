<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>-&gt; for Lightweight Lambda (&quot;Arrow Functions&quot;)</title>
    <link>https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172</link>
    <description>So I&#39;m still shoring up a new bootstrap executable, patching around in a 6-years-out-of-date codebase.   It&#39;s in some ways a cruel and unusual punishment... but in other ways a good trip down memory lane to revisit decisions that were made, and ask &quot;was that the right decision?&quot;

The 6-year-old EXE defined an enfix form of lambda as **`=&gt;`**.  I shifted it to the lighter form as **`-&gt;`**.  Contrast:

    y: case [
        1 &gt; 2 [&lt;no&gt;]
        1 &lt; 2 [&lt;yes&gt;]
    ] then (lambda [x] [
        assert [x = &lt;yes&gt;]
        1000 + 20
    ])
    assert [y = 1020]

    y: case [
        1 &gt; 2 [&lt;no&gt;]
        1 &lt; 2 [&lt;yes&gt;]
    ] then x =&gt; [
        assert [x = &lt;yes&gt;]
        1000 + 20
    ]
    assert [y = 1020]

    y: case [
        1 &gt; 2 [&lt;no&gt;]
        1 &lt; 2 [&lt;yes&gt;]
    ] then x -&gt; [
        assert [x = &lt;yes&gt;]
        1000 + 20
    ]
    assert [y = 1020]

*(Supplemental: Reddit post on [&quot;What&#39;s the syntax of lambda expressions in your language&quot;](https://www.reddit.com/r/ProgrammingLanguages/comments/shllr3/whats_the_syntax_of_lambda_expressions_in_your/))*

**I like the `-&gt;` and don&#39;t think there&#39;s a greater purpose for it in the box.**  As with everything else, overriding it is a personal choice.

## A [Speaking-With-Tics](https://forum.rebol.info/t/speaking-with-tics-should-quoted-arguments-always-be-apostrophed/1359) Note

Mechanically getting this to work is non-trivial:

  https://forum.rebol.info/t/the-most-vexing-evaluation-lambda-meets-then-else/1361

Part of what makes it non-trivial is the &quot;literal lookback&quot; by which **`-&gt;`** infixedly snatches the X without letting it evaluate.

@bradrn might argue such mechanics shouldn&#39;t be necessary, because source-level non-evaluation should be explicit, e.g. **`&#39;x -&gt; [...]`**

    y: case [
        1 &gt; 2 [&lt;no&gt;]
        1 &lt; 2 [&lt;yes&gt;]
    ] then &#39;x -&gt; [
        assert [x = &lt;yes&gt;]
        1000 + 20
    ]
    assert [y = 1020]

But that&#39;s one more stroke of key than I want, and one more piece of dirt than I want to see.  *I know from context that slot is a variable name, in the most common case.*  I&#39;m not upset by intricate work to faciliate it, if it actually works (and empowers other creative things).  So I need to see hard disproofs before sacrificing what I consider to be &quot;the point&quot; of the design.

I&#39;m always ready to look at it from a further perspective to see a &quot;greater point&quot;.  But still--from where I stand--that apostrophe sucks relative to not having it.  (And if you read the details of the implementation post, the only reason it&#39;s allowed to work in a quoted slot is because of left literalism, so...)

## What About Multiple Arguments?

Notationally there are questions about this form of lambda.  Does it use a block for multiple arguments?

    &gt;&gt; foo: [a b] -&gt; [a + b + 20]

    &gt;&gt; foo 400 600
    == 1020

It could, but you could be weirder:

    foo: a.b -&gt; [a + b + 20]

    foo: a/b -&gt; [a + b + 20]

This would look a little tighter with branching, I think, since it wouldn&#39;t compete with the branches:

    case [
        ...
    ] then [a b] -&gt; [
        ...
    ]

    case [
        ...
    ] then a.b -&gt; [
        ...
    ]

*But wait, you&#39;d never use it with a branch... because a branch only produces one value.*

UNLESS... what if what this form of lambda did was unpack packs?

    case [
        true [pack [10 + 20, 3 + 4]]  ; makes antiform ~[&#39;30 &#39;7]~
        ...
    ] then [a b] -&gt; [
        assert [a = 30, b = 7]
    ]

    case [
        true [pack [10 + 20, 3 + 4]]
        ...
    ] then a -&gt; [
        assert [a = 30]
    ]

So I&#39;ve been thinking this is what it should actually do.  It means -&gt; won&#39;t be a good way to define functions or lambdas generally, but you have FUNC(TION) and LAMBDA for that.

I don&#39;t know that enabling a lighter notation like **`a.b`** or **`a/b`** is worth it.

    case [
        true [pack [10 + 20, 3 + 4]]
        ...
    ] then a.b -&gt; [
        assert [a = 30, b = 7]
    ]

    case [
        true [pack [10 + 20, 3 + 4]]
        ...
    ] then a/b -&gt; [
        assert [a = 30, b = 7]
    ]

Maybe just confusing, and limits what you can put in the spec.  Easier to add later if it seems useful than put it in now and take out later.

## Is There A Good Name For &quot;Lambda Lite&quot;?

We could call it an &quot;unpacking lambda&quot;.  Maybe it&#39;s controlled with a refinement:

     &gt;&gt; foo: lambda/unpack [a b] [a + b + 20]

     &gt;&gt; foo pack [400 600]
     == 1020

Then **`-&gt;: :lambda/unpack`**

We could just call it *&quot;an unpacker&quot;*.

     &gt;&gt; foo: unpacker [a b] [a + b + 20]

     &gt;&gt; foo pack [400 600]
     == 1020

Then **`-&gt;: :unpacker`**

The problem with calling it an &quot;unpacker&quot; is that 9 (or more) times out of 10 it will only take a single argument and not unpack anything.  So it seems better to classify it as a shade of distinction on lambda, but still when you point to an `-&gt;` on the screen say *&quot;then it passes the argument to the lambda...&quot;*</description>
    
    <lastBuildDate>Sun, 22 Dec 2024 17:49:54 +0000</lastBuildDate>
    <category>Functions</category>
    <atom:link href="https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>-&gt; for Lightweight Lambda (&quot;Arrow Functions&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2172">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><em>But wait, you'd never use it with a branch... because a branch only produces one value.</em></p>
<p>UNLESS... what if what this form of lambda did was unpack packs?</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">case [
    true [pack [10 + 20, 3 + 4]]  ; makes antiform ~['30 '7]~
    ...
] then [a b] -&gt; [
    assert [a = 30, b = 7]
]

case [
    true [pack [10 + 20, 3 + 4]]
    ...
] then a -&gt; [
    assert [a = 30]
]
</code></pre>
<p>So I've been thinking this is what it should actually do.</p>
</blockquote>
</aside>
<p>It occurs to me that both can be possible, using a notation that suggests the semantics... quasiform block!</p>
<pre><code>case [
    true [pack [10 + 20, 3 + 4]]  ; makes antiform ~['30 '7]~
    ...
] then ~[a b]~ -&gt; [
    assert [a = 30, b = 7]
]
</code></pre>
<p>Maybe it looks a little bit weird, but is coherent considering that this is how antiform packs are proxied in places like multi-return values:</p>
<pre><code>foo: func [
    return: [~[integer! integer!]~ text!]
    x [integer!]
][
    if even? x [
        return pack [x + 1, x + 2]
    ]
    return "It wasn't even..."
]
</code></pre>
<p>Anyway, this means that plain block can suggest multiple arguments, quasi-block can suggest unpacking, and you have both forms.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2172">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><strong>Is There A Good Name For "Lambda Lite"?</strong></p>
<p>We could call it an "unpacking lambda". Maybe it's controlled with a refinement:</p>
<p><code> &gt;&gt; foo: lambda/unpack [a b] [a + b + 20]</code></p>
</blockquote>
</aside>
<p>I think we can probably get away with calling this ARROW.</p>
<p><a href="https://www.digitalocean.com/community/tutorials/understanding-arrow-functions-in-javascript">"Arrow functions"</a> is an established terminology.  If people want to make a variable called ARROW they probably wouldn't notice they were overriding it, because all uses will be through <strong><code>-&gt;</code></strong>... and it'd be available as LIB.ARROW.</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="2172">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<ol>
<li>does <strong><code>-&gt;</code></strong> make a deep copy of the block?</li>
<li>or does it just make a small structure that pairs the name of the parameter(s) with the body of code?</li>
</ol>
<p>Today's it's [2]... <strong><code>-&gt;</code></strong> just makes that small structure (while LAMBDA makes the full copy). But this means you get the semantics of a non-copying construct:</p>
</blockquote>
</aside>
<p>Branches definitely shouldn't be deep copied.  Whether they run or not.  Especially not if they don't.  But if they do it would make a deep copy each time...pretty useless.</p>
<p>It's a bit unsettling to say that <strong><code>x -&gt; [...]</code></strong> and <strong><code>lambda [x] [...]</code></strong> have distinct semantics, but I think having it run a different function generator called ARROW may help make it seem less insane.</p>
          <p><a href="https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172/4</link>
        <pubDate>Sun, 22 Dec 2024 17:49:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2172-4</guid>
        <source url="https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172.rss">-&gt; for Lightweight Lambda (&quot;Arrow Functions&quot;)</source>
      </item>
      <item>
        <title>-&gt; for Lightweight Lambda (&quot;Arrow Functions&quot;)</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2172">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p><a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a> might argue such mechanics shouldn't be necessary, because source-level non-evaluation should be explicit, e.g. <strong><code>'x -&gt; [...]</code></strong></p>
</blockquote>
</aside>
<p>I’ve come to accept that this idea has valid usecases. It’s still not my favourite design choice, but I’m OK with it.</p>
          <p><a href="https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172/3</link>
        <pubDate>Mon, 11 Mar 2024 00:37:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2172-3</guid>
        <source url="https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172.rss">-&gt; for Lightweight Lambda (&quot;Arrow Functions&quot;)</source>
      </item>
      <item>
        <title>-&gt; for Lightweight Lambda (&quot;Arrow Functions&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2172">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">y: case [
    1 &gt; 2 [&lt;no&gt;]
    1 &lt; 2 [&lt;yes&gt;]
] then (lambda [x] [
    assert [x = &lt;yes&gt;]
    1000 + 20
])
assert [y = 1020]
</code></pre>
</blockquote>
</aside>
<p>I remembered while writing this that you have to put branches in GROUP!s, because branches are "soft-quoted" slots (or, more accurately "soft literal") slots.</p>
<p>The reason you don't have to put the <strong><code>-&gt;</code></strong> form in groups when you use them as branches is because there's deference to a leftward-literal operation in a soft-literal slot.  The left literal beats the right literal.</p>
<p>But this has a cost: <em>you're paying to generate the function whether it gets called or not</em>.</p>
<p>Historical Rebol has this problem anywhere functions are passed as handlers.  Consider TRY/EXCEPT in R3-Alpha:</p>
<pre><code>r3-alpha&gt;&gt; try/except [1 / 0] func [e] [print ["Error Handler:" form e/id]]  
Error Handler: zero-divide
</code></pre>
<p>Putting it in a GROUP! won't help there, because /EXCEPT doesn't suppress any evaluation from that GROUP!.  But in Ren-C, branches are literal, so the groups can be used to suppress the evaluation unless the branch runs.</p>
<h2><a name="p-7247-is-making-uncalled-unpacking-lambdas-a-problem-1" class="anchor" href="https://forum.rebol.info#p-7247-is-making-uncalled-unpacking-lambdas-a-problem-1"></a>Is Making Uncalled (Unpacking-) Lambdas A Problem?</h2>
<p>That depends...</p>
<ol>
<li>
<p>does an unpacking lambda make a deep copy of the block?</p>
</li>
<li>
<p>or does it just make a small structure that pairs the name of the parameter(s) with the body of code?</p>
</li>
</ol>
<p>Today's it's [2]... <strong><code>-&gt;</code></strong> just makes that small structure (while LAMBDA makes the full copy).  But this means you get the semantics of a non-copying construct:</p>
<pre><code>&gt;&gt; block: [print ["Hello" x]]

&gt;&gt; one: x -&gt; block

&gt;&gt; append block spread [print ["Goodbye" x]]

&gt;&gt; two: x -&gt; block

&gt;&gt; one 1020
Hello 1020
Goodbye 1020

&gt;&gt; two 1020
Hello 1020
Goodbye 1020
</code></pre>
<p>So you would have to say <strong><code>x -&gt; copy/deep block</code></strong> to get a unique copy of the body.</p>
<p>Beyond the semantic implications of not copying, there's a performance implication if you call it more than once... because the <a href="https://forum.rebol.info/t/semantics-and-optimization-of-copying-function-bodies/2119">preparations that make the body a little faster to call</a> that happen during the copy are not done.</p>
<p>There are some other options like going in some strange "branch dialected" direction, and say that BLOCK!s with a certain format were "parameterized", moving the parameter name into the block somehow, not necessarily this but like this:</p>
<pre><code>y: case [
    1 &gt; 2 [&lt;no&gt;]
    1 &lt; 2 [&lt;yes&gt;]
] then [x -&gt;
    assert [x = &lt;yes&gt;]
    1000 + 20
]
</code></pre>
<p>I'd rather put every parameterized branch in a group than do that.</p>
<pre><code>y: case [
    1 &gt; 2 [&lt;no&gt;]
    1 &lt; 2 [&lt;yes&gt;]
] then (x -&gt; [
    assert [x = &lt;yes&gt;]
    1000 + 20
])
</code></pre>
<p>But still, no.  It's much better to push on optimizations of the stylized function generation so that it's cheap as can be to make regardless of the branch being taken, <em>it's the source we want to write</em>:</p>
<pre><code>y: case [
    1 &gt; 2 [&lt;no&gt;]
    1 &lt; 2 [&lt;yes&gt;]
] then x -&gt; [
    assert [x = &lt;yes&gt;]
    1000 + 20
]
</code></pre>
<p>Just another devil in the details to worry over.  But wanted to write up a reminder of why plain LAMBDA has to be in a GROUP! if you're going to use it in a branch, because I'd forgotten you had to do that.</p>
          <p><a href="https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172/2</link>
        <pubDate>Sun, 10 Mar 2024 19:02:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2172-2</guid>
        <source url="https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172.rss">-&gt; for Lightweight Lambda (&quot;Arrow Functions&quot;)</source>
      </item>
      <item>
        <title>-&gt; for Lightweight Lambda (&quot;Arrow Functions&quot;)</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So I'm still shoring up a new bootstrap executable, patching around in a 6-years-out-of-date codebase.   It's in some ways a cruel and unusual punishment... but in other ways a good trip down memory lane to revisit decisions that were made, and ask "was that the right decision?"</p>
<p>The 6-year-old EXE defined an enfix form of lambda as <strong><code>=&gt;</code></strong>.  I shifted it to the lighter form as <strong><code>-&gt;</code></strong>.  Contrast:</p>
<pre><code>y: case [
    1 &gt; 2 [&lt;no&gt;]
    1 &lt; 2 [&lt;yes&gt;]
] then (lambda [x] [
    assert [x = &lt;yes&gt;]
    1000 + 20
])
assert [y = 1020]

y: case [
    1 &gt; 2 [&lt;no&gt;]
    1 &lt; 2 [&lt;yes&gt;]
] then x =&gt; [
    assert [x = &lt;yes&gt;]
    1000 + 20
]
assert [y = 1020]

y: case [
    1 &gt; 2 [&lt;no&gt;]
    1 &lt; 2 [&lt;yes&gt;]
] then x -&gt; [
    assert [x = &lt;yes&gt;]
    1000 + 20
]
assert [y = 1020]
</code></pre>
<p><em>(Supplemental: Reddit post on <a href="https://www.reddit.com/r/ProgrammingLanguages/comments/shllr3/whats_the_syntax_of_lambda_expressions_in_your/">"What's the syntax of lambda expressions in your language"</a>)</em></p>
<p><strong>I like the <code>-&gt;</code> and don't think there's a greater purpose for it in the box.</strong>  As with everything else, overriding it is a personal choice.</p>
<h2><a name="p-7246-a-speaking-with-ticshttpsforumrebolinfotspeaking-with-tics-should-quoted-arguments-always-be-apostrophed1359-note-1" class="anchor" href="https://forum.rebol.info#p-7246-a-speaking-with-ticshttpsforumrebolinfotspeaking-with-tics-should-quoted-arguments-always-be-apostrophed1359-note-1"></a>A <a href="https://forum.rebol.info/t/speaking-with-tics-should-quoted-arguments-always-be-apostrophed/1359">Speaking-With-Tics</a> Note</h2>
<p>Mechanically getting this to work is non-trivial:</p>
<p><a href="https://forum.rebol.info/t/the-most-vexing-evaluation-lambda-meets-then-else/1361" class="inline-onebox">The Most Vexing Evaluation: -&gt; meets THEN/ELSE</a></p>
<p>Part of what makes it non-trivial is the "literal lookback" by which <strong><code>-&gt;</code></strong> infixedly snatches the X without letting it evaluate.</p>
<p><a class="mention" href="https://forum.rebol.info/u/bradrn">@bradrn</a> might argue such mechanics shouldn't be necessary, because source-level non-evaluation should be explicit, e.g. <strong><code>'x -&gt; [...]</code></strong></p>
<pre><code>y: case [
    1 &gt; 2 [&lt;no&gt;]
    1 &lt; 2 [&lt;yes&gt;]
] then 'x -&gt; [
    assert [x = &lt;yes&gt;]
    1000 + 20
]
assert [y = 1020]
</code></pre>
<p>But that's one more stroke of key than I want, and one more piece of dirt than I want to see.  <em>I know from context that slot is a variable name, in the most common case.</em>  I'm not upset by intricate work to faciliate it, if it actually works (and empowers other creative things).  So I need to see hard disproofs before sacrificing what I consider to be "the point" of the design.</p>
<p>I'm always ready to look at it from a further perspective to see a "greater point".  But still--from where I stand--that apostrophe sucks relative to not having it.  (And if you read the details of the implementation post, the only reason it's allowed to work in a quoted slot is because of left literalism, so...)</p>
<h2><a name="p-7246-what-about-multiple-arguments-2" class="anchor" href="https://forum.rebol.info#p-7246-what-about-multiple-arguments-2"></a>What About Multiple Arguments?</h2>
<p>Notationally there are questions about this form of lambda.  Does it use a block for multiple arguments?</p>
<pre><code>&gt;&gt; foo: [a b] -&gt; [a + b + 20]

&gt;&gt; foo 400 600
== 1020
</code></pre>
<p>It could, but you could be weirder:</p>
<pre><code>foo: a.b -&gt; [a + b + 20]

foo: a/b -&gt; [a + b + 20]
</code></pre>
<p>This would look a little tighter with branching, I think, since it wouldn't compete with the branches:</p>
<pre><code>case [
    ...
] then [a b] -&gt; [
    ...
]

case [
    ...
] then a.b -&gt; [
    ...
]
</code></pre>
<p><em>But wait, you'd never use it with a branch... because a branch only produces one value.</em></p>
<p>UNLESS... what if what this form of lambda did was unpack packs?</p>
<pre><code>case [
    true [pack [10 + 20, 3 + 4]]  ; makes antiform ~['30 '7]~
    ...
] then [a b] -&gt; [
    assert [a = 30, b = 7]
]

case [
    true [pack [10 + 20, 3 + 4]]
    ...
] then a -&gt; [
    assert [a = 30]
]
</code></pre>
<p>So I've been thinking this is what it should actually do.  It means -&gt; won't be a good way to define functions or lambdas generally, but you have FUNC(TION) and LAMBDA for that.</p>
<p>I don't know that enabling a lighter notation like <strong><code>a.b</code></strong> or <strong><code>a/b</code></strong> is worth it.</p>
<pre><code>case [
    true [pack [10 + 20, 3 + 4]]
    ...
] then a.b -&gt; [
    assert [a = 30, b = 7]
]

case [
    true [pack [10 + 20, 3 + 4]]
    ...
] then a/b -&gt; [
    assert [a = 30, b = 7]
]
</code></pre>
<p>Maybe just confusing, and limits what you can put in the spec.  Easier to add later if it seems useful than put it in now and take out later.</p>
<h2><a name="p-7246-is-there-a-good-name-for-lambda-lite-3" class="anchor" href="https://forum.rebol.info#p-7246-is-there-a-good-name-for-lambda-lite-3"></a>Is There A Good Name For "Lambda Lite"?</h2>
<p>We could call it an "unpacking lambda".  Maybe it's controlled with a refinement:</p>
<pre><code> &gt;&gt; foo: lambda/unpack [a b] [a + b + 20]

 &gt;&gt; foo pack [400 600]
 == 1020
</code></pre>
<p>Then <strong><code>-&gt;: :lambda/unpack</code></strong></p>
<p>We could just call it <em>"an unpacker"</em>.</p>
<pre><code> &gt;&gt; foo: unpacker [a b] [a + b + 20]

 &gt;&gt; foo pack [400 600]
 == 1020
</code></pre>
<p>Then <strong><code>-&gt;: :unpacker</code></strong></p>
<p>The problem with calling it an "unpacker" is that 9 (or more) times out of 10 it will only take a single argument and not unpack anything.  So it seems better to classify it as a shade of distinction on lambda, but still when you point to an <code>-&gt;</code> on the screen say <em>"then it passes the argument to the lambda..."</em></p>
          <p><a href="https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172/1</link>
        <pubDate>Sun, 10 Mar 2024 15:21:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2172-1</guid>
        <source url="https://forum.rebol.info/t/for-lightweight-lambda-arrow-functions/2172.rss">-&gt; for Lightweight Lambda (&quot;Arrow Functions&quot;)</source>
      </item>
  </channel>
</rss>
