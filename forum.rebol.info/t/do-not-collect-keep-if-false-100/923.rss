<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Do not COLLECT [keep if false [$100]]</title>
    <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923</link>
    <description>As I showed in the [solution to FizzBuzz](https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904), being able to take advantage of the evaluator&#39;s unique chaining abilities and &quot;opting out&quot; generally means making clever uses of null.

I&#39;m experimenting with COLLECT to returning NULL if there are no non-void KEEPs.

    &gt;&gt; collect []
    == ~null~  ; isotope

    &gt;&gt; collect [keep case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;also nope&gt;]]
    == ~null~  ; isotope

When I look at that, it seems pretty natural.  In contrast, giving back a block when there&#39;s been no KEEPs seems like you&#39;re fabricating something from nothing.  I&#39;ll also mention that it helps some with performance/overhead, because you&#39;re not making empty blocks you don&#39;t need if you don&#39;t actually wind up needing one.  *(The implementation of collect in historical Rebol and Red does `make block! 16`, so you&#39;re taking a 16 cell block even if you don&#39;t use it, while this creates the block on demand.)*

However, if this seems inconvenient, you can easily chain it to make an &quot;always-returns-a-block&quot; version, and maybe we should put that in the box vs. making people use that idiom:

     collect-block: chain [
         :collect
            |
         func [x] [
             :x else [copy []]
         ]
     ]

## The semi-noisy nature of null has advantages

If you think casual uses of COLLECT are sure they mean they want an empty block on no KEEPs, I don&#39;t know if that seems to be the case.

Consider something like &quot;print collect [...]&quot;, with that collection coming up empty.  What&#39;s PRINT supposed to be doing?  Is it a request to print a blank line--just a line feed?  Or is it a request to opt-out of printing altogether, so no newline at all?

I don&#39;t think there&#39;s a generic answer to that question.  So it&#39;s handy to draw attention to the ambiguity, since PRINT doesn&#39;t take NULL... only VOID to opt out, TEXT!, or BLOCK! to be SPACED.   So it will error and force you to make an explicit choice:

     print maybe collect [...]  ; no output if there are no non-null KEEPs 
     print collect-block [...]  ; blank newline if no KEEPs, if we put it in the box

So this keeps you paying attention.</description>
    
    <lastBuildDate>Sun, 25 Nov 2018 06:10:10 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="923">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; collect []
== ~null~  ; isotope

&gt;&gt; collect [keep case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;also nope&gt;]]
== ~null~  ; isotope
</code></pre>
<p>When I look at that, it seems pretty natural. In contrast, giving back a block when there's been no KEEPs seems like you're fabricating something from nothing.</p>
</blockquote>
</aside>
<p>I think of COLLECT as somewhat related to REDUCE and COMPOSE which always return blocks unless there's an error.</p>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/5</link>
        <pubDate>Sat, 24 Nov 2018 17:16:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-5</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The libRebol API benefits in particular from NULL being in more places as a way of gleaning information without additional calls.  It's even more of an advantage than in the interpreter where everything is handled automatically--because there's no handle to release, which is a separate API you have to worry about.  And null pointers are conditionally falsey in C:</p>
<pre><code>REBVAL *block = rebRun("collect [...]");
if (!block) {
    // stuff to handle case of nothing collected
    return;
}
// other stuff
</code></pre>
<p>Without using null, and having to test for empty, it's longer and easier to get wrong:</p>
<pre><code>REBVAL *block = rebRun("collect [...]");
if (rebDid("empty? block")) {
    rebRelease(block);
    // stuff to handle case of nothing collected
    return;
 }
 // other stuff
</code></pre>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/4</link>
        <pubDate>Fri, 23 Nov 2018 20:28:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-4</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>I like how this feature and similar ones maximize robustness of the code (through handling null, blank, etc) while keeping everything extremely tight. Thereâ€™s a nice balance of robustness paired with a code-golf mentality.</p>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/3</link>
        <pubDate>Fri, 23 Nov 2018 18:25:14 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-3</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
      <item>
        <title>Do not COLLECT [keep if false [$100]]</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As I showed in the <a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904">solution to FizzBuzz</a>, being able to take advantage of the evaluator's unique chaining abilities and "opting out" generally means making clever uses of null.</p>
<p>I'm experimenting with COLLECT to returning NULL if there are no non-void KEEPs.</p>
<pre><code>&gt;&gt; collect []
== ~null~  ; isotope

&gt;&gt; collect [keep case [1 &gt; 2 [&lt;nope&gt;] 3 &gt; 4 [&lt;also nope&gt;]]
== ~null~  ; isotope
</code></pre>
<p>When I look at that, it seems pretty natural.  In contrast, giving back a block when there's been no KEEPs seems like you're fabricating something from nothing.  I'll also mention that it helps some with performance/overhead, because you're not making empty blocks you don't need if you don't actually wind up needing one.  <em>(The implementation of collect in historical Rebol and Red does <code>make block! 16</code>, so you're taking a 16 cell block even if you don't use it, while this creates the block on demand.)</em></p>
<p>However, if this seems inconvenient, you can easily chain it to make an "always-returns-a-block" version, and maybe we should put that in the box vs. making people use that idiom:</p>
<pre><code> collect-block: chain [
     :collect
        |
     func [x] [
         :x else [copy []]
     ]
 ]
</code></pre>
<h2>
<a name="the-semi-noisy-nature-of-null-has-advantages-1" class="anchor" href="https://forum.rebol.info#the-semi-noisy-nature-of-null-has-advantages-1"></a>The semi-noisy nature of null has advantages</h2>
<p>If you think casual uses of COLLECT are sure they mean they want an empty block on no KEEPs, I don't know if that seems to be the case.</p>
<p>Consider something like "print collect [...]", with that collection coming up empty.  What's PRINT supposed to be doing?  Is it a request to print a blank line--just a line feed?  Or is it a request to opt-out of printing altogether, so no newline at all?</p>
<p>I don't think there's a generic answer to that question.  So it's handy to draw attention to the ambiguity, since PRINT doesn't take NULL... only VOID to opt out, TEXT!, or BLOCK! to be SPACED.   So it will error and force you to make an explicit choice:</p>
<pre><code> print maybe collect [...]  ; no output if there are no non-null KEEPs 
 print collect-block [...]  ; blank newline if no KEEPs, if we put it in the box
</code></pre>
<p>So this keeps you paying attention.</p>
          <p><a href="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923/1</link>
        <pubDate>Fri, 23 Nov 2018 13:55:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-923-1</guid>
        <source url="https://forum.rebol.info/t/do-not-collect-keep-if-false-100/923.rss">Do not COLLECT [keep if false [$100]]</source>
      </item>
  </channel>
</rss>
