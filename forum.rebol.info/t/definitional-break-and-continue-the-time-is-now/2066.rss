<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Definitional Break and Continue... the Time is Now</title>
    <link>https://forum.rebol.info/t/definitional-break-and-continue-the-time-is-now/2066</link>
    <description>I was writing what I thought to be a clever bit of code, [discussed here](https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065)

    for-each file ... [
        parse file [thru any [&quot;.reb&quot; &quot;.r&quot;] &lt;end&gt; | (continue)]
        ...
    ]

I thought it was pleasing to have the CONTINUE in the rules themselves.

Pleasing, except... a bit displeasing considering **it didn&#39;t work.**

BREAK and CONTINUE would break or continue the first loop they found above them in the stack.  Since PARSE is currently written in usermode code, it uses loops in its implementation (to loop over the rules).  *so you wind up continuing some arbitrary loop inside the combinators, having random effects*!

Happily Ren-C has pioneered answers to this kind of problem with definitional returns.  But loops just have to get with the program and make CONTINUE and BREAK definitional in their bodies.

So I did it!  And most things appeared to work (like the motivating example).

## Still Complexity For Loops Implemented Without &quot;Loops&quot;

In bootstrap, there was some code implementing FOR-EACH-PLATFORM.  Hand-waving a bit, it initially looked like this:

     for-each-platform: func [&#39;var [word! tuple!] body [block!]] [
         parse platforms-table [
             while [not &lt;end&gt;] [
                  ...  ; rules that build up an OBJECT! 
                  (set var obj, do body)
             ]
         ]
     ]

But that didn&#39;t make CONTINUE work:

     for-each-platform p [
         if p.name = &#39;HaikuOS [continue]
         ...
     ]

So I&#39;d hacked up something at one point in history which looked like this monstrosity:

        completed*: false
        running*: false
        while [true] [  ; must be in loop for BREAK or CONTINUE
            if running* [  ; must have had a CONTINUE
                completed*: true
                break
            ]
            running*: true
            do body
            completed*: true
            break
        ]
        if not completed* [return null] 

That depended on non-definitional CONTINUE happening inside BODY finding the enclosing WHILE.

But now, that CONTINUE isn&#39;t definitionally bound anywhere.  So that CONTINUE is just a reference to a default CONTINUE function in LIB, which will error telling you there are no loops providing continue available.

For the modern world, this *works*:

     repeat 1 body else [return null]

Reserving the pure NULL return value for BREAK means you can get that communication of when BREAK was encountered out of the return result.  And in this case, CONTINUE is just supposed to bypass the remainder of code in BODY and go on parsing.  So it works.

But it&#39;s suboptimal as the binding of the body to BREAK and CONTINUE happens on each run instead of once.  Doing that more efficiently would need some new techniques and case studies.

Overall though, it&#39;s progress...in the sense that there&#39;s an answer that works slowly, vs. not working at all!</description>
    
    <lastBuildDate>Tue, 01 Oct 2024 14:45:51 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/definitional-break-and-continue-the-time-is-now/2066.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Definitional Break and Continue... the Time is Now</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2066">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>For the modern world, this <em>works</em>:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext"> repeat 1 body else [return null]
</code></pre>
<p>Reserving the pure NULL return value for BREAK means you can get that communication of when BREAK was encountered out of the return result. And in this case, CONTINUE is just supposed to bypass the remainder of code in BODY and go on parsing. So it works.</p>
<p>But it's suboptimal as the binding of the body to BREAK and CONTINUE happens on each run instead of once. Doing that more efficiently would need some new techniques and case studies.</p>
</blockquote>
</aside>
<p>I'd like to be able to apply the "wrapping" of the body just once.</p>
<p>So I thought of this:</p>
<pre><code>body: wrap:loop body
</code></pre>
<p>Maybe WRAP is getting overloaded at that point...where it's creating BREAK and CONTINUE functions.  Probably too invasive for a fundamental operation, and this should be <strong><code>body: loopable body</code></strong>.  But, either way, seems cool.</p>
<p>The only issue is that we want this to work:</p>
<pre><code>eval body else [return null]
</code></pre>
<p>So the result of LOOPABLE has to promise it won't return pure null except on break.</p>
<p>I guess that means if you gave it <strong><code>[blah blah]</code></strong> the product of LOOPABLE has to become <strong><code>[heavy (blah blah)]</code></strong> (bound to break and continue, as well).</p>
<p>(HEAVY is a function that converts <code>~null~</code> and <code>~void~</code> antiforms to <code>~[~null~]~</code> and <code>~[~void~]~</code> antiforms.)</p>
          <p><a href="https://forum.rebol.info/t/definitional-break-and-continue-the-time-is-now/2066/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/definitional-break-and-continue-the-time-is-now/2066/2</link>
        <pubDate>Tue, 01 Oct 2024 14:45:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2066-2</guid>
        <source url="https://forum.rebol.info/t/definitional-break-and-continue-the-time-is-now/2066.rss">Definitional Break and Continue... the Time is Now</source>
      </item>
      <item>
        <title>Definitional Break and Continue... the Time is Now</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I was writing what I thought to be a clever bit of code, <a href="https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065">discussed here</a></p>
<pre><code>for-each file ... [
    parse file [thru any [".reb" ".r"] &lt;end&gt; | (continue)]
    ...
]
</code></pre>
<p>I thought it was pleasing to have the CONTINUE in the rules themselves.</p>
<p>Pleasing, except... a bit displeasing considering <strong>it didn't work.</strong></p>
<p>BREAK and CONTINUE would break or continue the first loop they found above them in the stack.  Since PARSE is currently written in usermode code, it uses loops in its implementation (to loop over the rules).  <em>so you wind up continuing some arbitrary loop inside the combinators, having random effects</em>!</p>
<p>Happily Ren-C has pioneered answers to this kind of problem with definitional returns.  But loops just have to get with the program and make CONTINUE and BREAK definitional in their bodies.</p>
<p>So I did it!  And most things appeared to work (like the motivating example).</p>
<h2>
<a name="still-complexity-for-loops-implemented-without-loops-1" class="anchor" href="https://forum.rebol.info#still-complexity-for-loops-implemented-without-loops-1"></a>Still Complexity For Loops Implemented Without "Loops"</h2>
<p>In bootstrap, there was some code implementing FOR-EACH-PLATFORM.  Hand-waving a bit, it initially looked like this:</p>
<pre><code> for-each-platform: func ['var [word! tuple!] body [block!]] [
     parse platforms-table [
         while [not &lt;end&gt;] [
              ...  ; rules that build up an OBJECT! 
              (set var obj, do body)
         ]
     ]
 ]
</code></pre>
<p>But that didn't make CONTINUE work:</p>
<pre><code> for-each-platform p [
     if p.name = 'HaikuOS [continue]
     ...
 ]
</code></pre>
<p>So I'd hacked up something at one point in history which looked like this monstrosity:</p>
<pre><code>    completed*: false
    running*: false
    while [true] [  ; must be in loop for BREAK or CONTINUE
        if running* [  ; must have had a CONTINUE
            completed*: true
            break
        ]
        running*: true
        do body
        completed*: true
        break
    ]
    if not completed* [return null] 
</code></pre>
<p>That depended on non-definitional CONTINUE happening inside BODY finding the enclosing WHILE.</p>
<p>But now, that CONTINUE isn't definitionally bound anywhere.  So that CONTINUE is just a reference to a default CONTINUE function in LIB, which will error telling you there are no loops providing continue available.</p>
<p>For the modern world, this <em>works</em>:</p>
<pre><code> repeat 1 body else [return null]
</code></pre>
<p>Reserving the pure NULL return value for BREAK means you can get that communication of when BREAK was encountered out of the return result.  And in this case, CONTINUE is just supposed to bypass the remainder of code in BODY and go on parsing.  So it works.</p>
<p>But it's suboptimal as the binding of the body to BREAK and CONTINUE happens on each run instead of once.  Doing that more efficiently would need some new techniques and case studies.</p>
<p>Overall though, it's progress...in the sense that there's an answer that works slowly, vs. not working at all!</p>
          <p><a href="https://forum.rebol.info/t/definitional-break-and-continue-the-time-is-now/2066/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/definitional-break-and-continue-the-time-is-now/2066/1</link>
        <pubDate>Thu, 07 Dec 2023 16:29:36 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2066-1</guid>
        <source url="https://forum.rebol.info/t/definitional-break-and-continue-the-time-is-now/2066.rss">Definitional Break and Continue... the Time is Now</source>
      </item>
  </channel>
</rss>
