<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Better Answers than TRY and OPT For BLANK! &lt;=&gt; NULL</title>
    <link>https://forum.rebol.info/t/better-answers-than-try-and-opt-for-blank-null/1946</link>
    <description>Ever since the creation of null and blank, it&#39;s been desirable to go between them.

The word I first chose for NULL =&gt; BLANK! was TRY.  It would pass through anything else:

    &gt;&gt; try null
    == _

    &gt;&gt; try _
    == _

    &gt;&gt; try 1020
    == 1020

The reverse operation of converting BLANK! =&gt; NULL was called OPT; again passing through everything else:

    &gt;&gt; opt _
    ; null

    &gt;&gt; opt null
    ; null

    &gt;&gt; opt 1020
    == 1020

It may seem mysterious to ascribe such a trivial operation to a high-value word like TRY.  But it made sense at the time, because nulls were rather unfriendly:

    &gt;&gt; if not x: find &quot;abc&quot; &quot;d&quot; [print &quot;Assignment goes okay...&quot;]
    Assignment goes okay...
    ; null

    &gt;&gt; if not x [print &quot;But word fetching has problems&quot;]
    ** Error: X is NULL    

TRY provided a way to disarm the result:

    &gt;&gt; x: try find &quot;abc&quot; &quot;d&quot;
    == _

    &gt;&gt; if not x [print &quot;Didn&#39;t find it&quot;]
    Didn&#39;t find it

But as it turned out: NULL was trying to do too many things, being fused with the notion of &quot;unset variables&quot;.  It was a good start on having non-valued states... we just needed more!

Once VOID arrived it was no longer necessary to error on null variable accesses, and this particular usage of TRY was not necessary.

## But...It Was Actually On The Right Track...

FIND is a bad demonstration.  But TAKE on empty block is actually a good one from that erroring-on-nulls era:

    &gt;&gt; x: take []
    ; null
    
    &gt;&gt; if x [print &quot;-some- error around here seems right...&quot;]
    ** Error: X is NULL

    &gt;&gt; x: try take []
    == _

    &gt;&gt; if x [print &quot;-some- signal for saying it&#39;s okay seems right...&quot;]
    -some- signal for saying it&#39;s okay seems right...

But we see it&#39;s suboptimal, as now X is valued... and conflates with if we had written **`take [_]`**.  It also seems the need for the TRY in this case should have been independent of whether you stored the result in a variable or not.

Definitional errors come in and clean this mess up... so that TRY can defuse the take and give you the NULL state you want:

    &gt;&gt; x: take []
    ** Error: TAKE of EMPTY block, use TRY if you meant to do that

    &gt;&gt; x: try take []
    ; null

## But Now How Do We Interconvert BLANK! and NULL?

You&#39;re still going to come across situations where you pick a blank out of a block, where it&#39;s representing a null intent.  And it&#39;s illegal to compose or append nulls to blocks / etc, so how do you convert them?

Meet REIFY and DECAY.

    &gt;&gt; reify null
    == _

    &gt;&gt; decay _
    ; null

We actually have new members of this family: the conversion of isotopes to quasiforms.

    &gt;&gt; true
    == ~true~  ;  isotope

    &gt;&gt; append [a b c] true
    ** Error: Cannot append ~true~ isotope to block, use REIFY for quasiform

    &gt;&gt; append [a b c] reify true
    == [a b c ~true~]

    &gt;&gt; append [a b c] as word! true
    == [a b c true]

I think the words are a nice coupling...and even the same number of letters!

## What Will OPT Do Now?

I&#39;m not sure.  I&#39;m actually pulling back a bit on the idea of saying that what happens in PARSE is a TRY... because in essence there&#39;s always a built-in &quot;TRY&quot; during parse.  Rules are raising definitional errors, but that&#39;s just swept under the rug by the parse process itself.  So OPT kind is kind of a different shade of meaning there.</description>
    
    <lastBuildDate>Sun, 28 Aug 2022 16:50:43 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/better-answers-than-try-and-opt-for-blank-null/1946.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Better Answers than TRY and OPT For BLANK! &lt;=&gt; NULL</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Ever since the creation of null and blank, it's been desirable to go between them.</p>
<p>The word I first chose for NULL =&gt; BLANK! was TRY.  It would pass through anything else:</p>
<pre><code>&gt;&gt; try null
== _

&gt;&gt; try _
== _

&gt;&gt; try 1020
== 1020
</code></pre>
<p>The reverse operation of converting BLANK! =&gt; NULL was called OPT; again passing through everything else:</p>
<pre><code>&gt;&gt; opt _
; null

&gt;&gt; opt null
; null

&gt;&gt; opt 1020
== 1020
</code></pre>
<p>It may seem mysterious to ascribe such a trivial operation to a high-value word like TRY.  But it made sense at the time, because nulls were rather unfriendly:</p>
<pre><code>&gt;&gt; if not x: find "abc" "d" [print "Assignment goes okay..."]
Assignment goes okay...
; null

&gt;&gt; if not x [print "But word fetching has problems"]
** Error: X is NULL    
</code></pre>
<p>TRY provided a way to disarm the result:</p>
<pre><code>&gt;&gt; x: try find "abc" "d"
== _

&gt;&gt; if not x [print "Didn't find it"]
Didn't find it
</code></pre>
<p>But as it turned out: NULL was trying to do too many things, being fused with the notion of "unset variables".  It was a good start on having non-valued states... we just needed more!</p>
<p>Once VOID arrived it was no longer necessary to error on null variable accesses, and this particular usage of TRY was not necessary.</p>
<h2>But...It Was Actually On The Right Track...</h2>
<p>FIND is a bad demonstration.  But TAKE on empty block is actually a good one from that erroring-on-nulls era:</p>
<pre><code>&gt;&gt; x: take []
; null

&gt;&gt; if x [print "-some- error around here seems right..."]
** Error: X is NULL

&gt;&gt; x: try take []
== _

&gt;&gt; if x [print "-some- signal for saying it's okay seems right..."]
-some- signal for saying it's okay seems right...
</code></pre>
<p>But we see it's suboptimal, as now X is valued... and conflates with if we had written <strong><code>take [_]</code></strong>.  It also seems the need for the TRY in this case should have been independent of whether you stored the result in a variable or not.</p>
<p>Definitional errors come in and clean this mess up... so that TRY can defuse the take and give you the NULL state you want:</p>
<pre><code>&gt;&gt; x: take []
** Error: TAKE of EMPTY block, use TRY if you meant to do that

&gt;&gt; x: try take []
; null
</code></pre>
<h2>But Now How Do We Interconvert BLANK! and NULL?</h2>
<p>You're still going to come across situations where you pick a blank out of a block, where it's representing a null intent.  And it's illegal to compose or append nulls to blocks / etc, so how do you convert them?</p>
<p>Meet REIFY and DECAY.</p>
<pre><code>&gt;&gt; reify null
== _

&gt;&gt; decay _
; null
</code></pre>
<p>We actually have new members of this family: the conversion of isotopes to quasiforms.</p>
<pre><code>&gt;&gt; true
== ~true~  ;  isotope

&gt;&gt; append [a b c] true
** Error: Cannot append ~true~ isotope to block, use REIFY for quasiform

&gt;&gt; append [a b c] reify true
== [a b c ~true~]

&gt;&gt; append [a b c] as word! true
== [a b c true]
</code></pre>
<p>I think the words are a nice coupling...and even the same number of letters!</p>
<h2>What Will OPT Do Now?</h2>
<p>I'm not sure.  I'm actually pulling back a bit on the idea of saying that what happens in PARSE is a TRY... because in essence there's always a built-in "TRY" during parse.  Rules are raising definitional errors, but that's just swept under the rug by the parse process itself.  So OPT kind is kind of a different shade of meaning there.</p>
          <p><a href="https://forum.rebol.info/t/better-answers-than-try-and-opt-for-blank-null/1946/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/better-answers-than-try-and-opt-for-blank-null/1946/1</link>
        <pubDate>Sun, 28 Aug 2022 16:39:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1946-1</guid>
        <source url="https://forum.rebol.info/t/better-answers-than-try-and-opt-for-blank-null/1946.rss">Better Answers than TRY and OPT For BLANK! &lt;=&gt; NULL</source>
      </item>
  </channel>
</rss>
