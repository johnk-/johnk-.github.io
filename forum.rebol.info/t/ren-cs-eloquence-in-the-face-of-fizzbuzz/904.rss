<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
    <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904</link>
    <description>![fizzbuzz-snap|670x499](upload://rmMvvVBnn2g0ybqB0jwY0Xy24lM.jpeg) 

So there&#39;s a silly problem called &quot;FizzBuzz&quot; which is stated very simply:

    Write a program that prints the numbers from 1 to 100.
    But for multiples of three print &quot;Fizz&quot; instead of the number
    ....and for the multiples of five print &quot;Buzz&quot;.
    For numbers which are multiples of both three and five print &quot;FizzBuzz&quot;.

The claim is that as easy as this problem sounds, many programmers who walk into interviews have trouble with it.  On the [c2 programming wiki](http://wiki.c2.com/?FizzBuzzTest), someone argues for why this might be the case:

&gt; *&quot;I think Fizz-Buzz is &quot;hard&quot; for some programmers because (#1) it doesn&#39;t fit into any of the patterns that were given to them in school assignments, and (#2) **it isn&#39;t possible to directly and simply represent the necessary tests, without duplication, in just about any commonly-used modern programming language.**&quot;*

But the design of Ren-C has more than enough chops for this problem!  It&#39;s particularly elegant using a [recent change to DELIMIT](https://github.com/metaeducation/ren-c/commit/26f94f6803df8d8e4895706a83658ddbf27bde28), including its specializations like SPACED and UNSPACED.

So how about that FizzBuzz?

    count-up n 100 [
        print [
             unspaced [
                  if n mod 3 = 0 [&quot;Fizz&quot;]
                  if n mod 5 = 0 [&quot;Buzz&quot;]
             ] else [n]
        ]
    ]

Presto...that&#39;s all it takes!!!  UNSPACED will return null if everything in its body opts out, which is the cue for the generic ELSE to run.  This brings the magic of being able to avoid duplication in the tests.  It&#39;s like every piece of problem specification corresponds to just one word in the program!

    1
    2
    Fizz
    4
    Buzz
    Fizz
    7
    8
    Fizz
    Buzz
    11
    Fizz
    13
    14
    FizzBuzz
    16
    17
    Fizz
    19
    Buzz
    Fizz
    22
    23
    Fizz
    Buzz
    26
    Fizz
    28
    29
    FizzBuzz
    31
    32
    Fizz
    34
    Buzz
    Fizz
    37
    38
    Fizz
    Buzz
    41
    Fizz
    43
    44
    FizzBuzz
    46
    47
    Fizz
    49
    Buzz
    Fizz
    52
    53
    Fizz
    Buzz
    56
    Fizz
    58
    59
    FizzBuzz
    61
    62
    Fizz
    64
    Buzz
    Fizz
    67
    68
    Fizz
    Buzz
    71
    Fizz
    73
    74
    FizzBuzz
    76
    77
    Fizz
    79
    Buzz
    Fizz
    82
    83
    Fizz
    Buzz
    86
    Fizz
    88
    89
    FizzBuzz
    91
    92
    Fizz
    94
    Buzz
    Fizz
    97
    98
    Fizz
    Buzz</description>
    
    <lastBuildDate>Wed, 12 May 2021 08:19:41 +0000</lastBuildDate>
    <category>Show &amp; Tell</category>
    <atom:link href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="https://forum.rebol.info/t/how-is-count-up-implemented/1827">How Is COUNT-UP Implemented?</a></p>
          <p><a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/13</link>
        <pubDate>Wed, 18 May 2022 20:21:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-904-13</guid>
        <source url="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss">Ren-C&#39;s eloquence in the face of FizzBuzz</source>
      </item>
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>Nice.</p>
<p>But to be frank, I do like the 'count-up version better. It makes the language stand out a little more from all the other languages providing their 'for loop constructions.</p>
<p>But the 'for function has the better options.</p>
          <p><a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/11</link>
        <pubDate>Tue, 11 May 2021 20:59:53 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-904-11</guid>
        <source url="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss">Ren-C&#39;s eloquence in the face of FizzBuzz</source>
      </item>
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="904">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Just because we can, I'll point out soft-quoted branching making this lighter (at the expense of comprehensibility, but improving space/speed by removing two series allocations/nested-evaluations)</p>
<pre><code>count-up n 100 [
    print [
        if n mod 3 = 0 '#Fizz
        if n mod 5 = 0 '#Buzz
    ] else [
       print [n]
    ]
]
</code></pre>
</blockquote>
</aside>
<p>As we further chase down essentialism, I think the definition of FOR is going to be arity-3, and INTEGER! semantics would be COUNT-UP.  Plus @ lets us print any value, so you could write:</p>
<pre><code>for n 100 [
    print [
        if n mod 3 = 0 '#Fizz
        if n mod 5 = 0 '#Buzz
    ] else [
       print @n
    ]
]
</code></pre>
<p>But if I were making the poster today, it would probably say:</p>
<pre><code>for n 100 [
    print [
        if n mod 3 = 0 [#Fizz]
        if n mod 5 = 0 [#Buzz]
    ] else [
        print [n]
    ]
]
</code></pre>
<p>Or even clearer:</p>
<pre><code>for n [1 thru 100] [
    print [
        if n mod 3 = 0 [#Fizz]
        if n mod 5 = 0 [#Buzz]
    ] else [
        print [n]
    ]
]
</code></pre>
<p>This helps you know precisely whether it goes up-to-and-including a hundred (1 thru 100) or up-to-but-not-including a hundred (1 to 100), and that it starts at 1 and not 0.</p>
          <p><a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/10</link>
        <pubDate>Tue, 11 May 2021 10:41:20 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-904-10</guid>
        <source url="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss">Ren-C&#39;s eloquence in the face of FizzBuzz</source>
      </item>
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There's a new tool in the arsenal: the TOKEN! (a.k.a. "issuechar!") which does not participate in delimiting in DELIMIT-based primitives.</p>
<p>Can it help with FizzBuzz?</p>
<aside class="quote no-group" data-post="1" data-topic="904">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>count-up n 100 [
    print [
        unspaced [
            if n mod 3 = 0 ["Fizz"]
            if n mod 5 = 0 ["Buzz"]
        ] else [n]
    ]
]
</code></pre>
</blockquote>
</aside>
<p>The UNSPACED is used as an aggregator for the ELSE to trigger on.  We can reshape it to trigger off the PRINT's output...but then we'd need another PRINT:</p>
<pre><code>count-up n 100 [
    print [
        if n mod 3 = 0 [#Fizz]
        if n mod 5 = 0 [#Buzz]
    ] else [
        print [n]
    ]
]
</code></pre>
<p>Well...it's <em>different</em>.  It trades the potential confusion of what "unspaced" means for the semantics of unspaced TOKEN! in PRINT, and repeating PRINT twice.  You lose a level of indentation--that's nice.</p>
<p>But I definitely like how PRINT can be opted out of completely...including the newline...and can telegraph its opt-out-edness to another construct.  The fact that you <em>can</em> do this with two PRINTs is interesting in its own right.</p>
<p>Just because we can, I'll point out soft-quoted branching making this lighter (at the expense of comprehensibility, but improving space/speed by removing two series allocations/nested-evaluations)</p>
<pre><code>count-up n 100 [
    print [
        if n mod 3 = 0 '#Fizz
        if n mod 5 = 0 '#Buzz
    ] else [
        print [n]
    ]
]</code></pre>
          <p><a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/9</link>
        <pubDate>Thu, 08 Oct 2020 16:26:02 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-904-9</guid>
        <source url="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss">Ren-C&#39;s eloquence in the face of FizzBuzz</source>
      </item>
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[iArnold]]></dc:creator>
        <description><![CDATA[
            <p>I knew about spaced/unspaced, had not seen it in action yet. I think unspaced here was very intuitive, like it very much, it is a true Rebol way solution. (And totally unmatched anywhere else afaik).</p>
          <p><a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/8</link>
        <pubDate>Thu, 15 Nov 2018 20:39:44 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-904-8</guid>
        <source url="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss">Ren-C&#39;s eloquence in the face of FizzBuzz</source>
      </item>
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Yes, I must relearn some of my old ways... I still think in terms of the JOIN/REJOIN vernacular. JOIN is a nice verb which intuitively suggests its purpose. UNSPACED on the other hand, seems defined in contrast to its opposite, which is also less obvious. To a dim bulb like me, anyway. Still not a complaint; I think with more use of REN-C I won't blink at some of the nuanced changes.</p>
<p>This seems like a good example to put on whatever homepage is eventually made for the project.</p>
          <p><a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/5</link>
        <pubDate>Wed, 14 Nov 2018 19:48:37 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-904-5</guid>
        <source url="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss">Ren-C&#39;s eloquence in the face of FizzBuzz</source>
      </item>
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-post="3" data-topic="904">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forum.rebol.info/user_avatar/forum.rebol.info/blackattr/40/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>“Cool-- Wait, what the heck is unspaced?”.</p>
</blockquote>
</aside>
<p>I guess it seems fairly sensible to to me...especially when people get introduced to it as <strong>print unspaced [...]</strong>.  If that's how you learn it, you then think of being able to lift out the unspacing behavior you used when you needed it into a function.  And you can say <strong>print spaced [...]</strong> too, though that's <em>usually</em> redundant.</p>
<p>Though if it were just JOIN it might <em>appear</em> clearer in this particular case, I think reserving JOIN for something else makes sense.  Trying to use a generic series-joining operator for string production is problematic, as <a href="https://forum.rebol.info/t/rejoin-ugliness-and-the-usefulness-of-tests/248">@Brett explains in detail</a>.</p>
<p>But it's a good point that presenting FizzBuzz probably needs a little lead-in to explain UNSPACED to the uninitiated, to make absorption smoother.</p>
          <p><a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/4</link>
        <pubDate>Wed, 14 Nov 2018 19:30:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-904-4</guid>
        <source url="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss">Ren-C&#39;s eloquence in the face of FizzBuzz</source>
      </item>
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Love it. FizzBuzz is indeed a neat example of a language challenge.<br>
I'm still inexperienced with unspaced, so its use here seems like a fancy trick but not an intuitive function name.<br>
This is in no way a complaint <img src="//forum.rebol.info/images/emoji/twitter/wink.png?v=7" title=":wink:" class="emoji" alt=":wink:"> , I'm just thinking that someone coming from another language might see this short eloquent example but wonder "Cool-- Wait, what the heck is unspaced?".</p>
          <p><a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/3</link>
        <pubDate>Wed, 14 Nov 2018 18:22:00 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-904-3</guid>
        <source url="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss">Ren-C&#39;s eloquence in the face of FizzBuzz</source>
      </item>
      <item>
        <title>Ren-C&#39;s eloquence in the face of FizzBuzz</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/bfcdfb0a237ed678b4c9e3d0f043e92a076e8206.jpeg" data-download-href="https://forum.rebol.info/uploads/default/bfcdfb0a237ed678b4c9e3d0f043e92a076e8206" title="fizzbuzz-snap"><img src="https://forum.rebol.info/uploads/default/optimized/1X/bfcdfb0a237ed678b4c9e3d0f043e92a076e8206_2_670x499.jpeg" alt="fizzbuzz-snap" data-base62-sha1="rmMvvVBnn2g0ybqB0jwY0Xy24lM" width="670" height="499" srcset="https://forum.rebol.info/uploads/default/optimized/1X/bfcdfb0a237ed678b4c9e3d0f043e92a076e8206_2_670x499.jpeg, https://forum.rebol.info/uploads/default/optimized/1X/bfcdfb0a237ed678b4c9e3d0f043e92a076e8206_2_1005x748.jpeg 1.5x, https://forum.rebol.info/uploads/default/optimized/1X/bfcdfb0a237ed678b4c9e3d0f043e92a076e8206_2_1340x998.jpeg 2x" data-small-upload="https://forum.rebol.info/uploads/default/optimized/1X/bfcdfb0a237ed678b4c9e3d0f043e92a076e8206_2_10x10.png"></a></div><p></p>
<p>So there's a silly problem called "FizzBuzz" which is stated very simply:</p>
<pre><code>Write a program that prints the numbers from 1 to 100.
But for multiples of three print "Fizz" instead of the number
....and for the multiples of five print "Buzz".
For numbers which are multiples of both three and five print "FizzBuzz".
</code></pre>
<p>The claim is that as easy as this problem sounds, many programmers who walk into interviews have trouble with it.  On the <a href="http://wiki.c2.com/?FizzBuzzTest">c2 programming wiki</a>, someone argues for why this might be the case:</p>
<blockquote>
<p><em>"I think Fizz-Buzz is "hard" for some programmers because (<span class="hashtag">#1</span>) it doesn't fit into any of the patterns that were given to them in school assignments, and (<span class="hashtag">#2</span>) <strong>it isn't possible to directly and simply represent the necessary tests, without duplication, in just about any commonly-used modern programming language.</strong>"</em></p>
</blockquote>
<p>But the design of Ren-C has more than enough chops for this problem!  It's particularly elegant using a <a href="https://github.com/metaeducation/ren-c/commit/26f94f6803df8d8e4895706a83658ddbf27bde28">recent change to DELIMIT</a>, including its specializations like SPACED and UNSPACED.</p>
<p>So how about that FizzBuzz?</p>
<pre><code>count-up n 100 [
    print [
         unspaced [
              if n mod 3 = 0 ["Fizz"]
              if n mod 5 = 0 ["Buzz"]
         ] else [n]
    ]
]
</code></pre>
<p>Presto...that's all it takes!!!  UNSPACED will return null if everything in its body opts out, which is the cue for the generic ELSE to run.  This brings the magic of being able to avoid duplication in the tests.  It's like every piece of problem specification corresponds to just one word in the program!</p>
<pre><code>1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
Fizz
22
23
Fizz
Buzz
26
Fizz
28
29
FizzBuzz
31
32
Fizz
34
Buzz
Fizz
37
38
Fizz
Buzz
41
Fizz
43
44
FizzBuzz
46
47
Fizz
49
Buzz
Fizz
52
53
Fizz
Buzz
56
Fizz
58
59
FizzBuzz
61
62
Fizz
64
Buzz
Fizz
67
68
Fizz
Buzz
71
Fizz
73
74
FizzBuzz
76
77
Fizz
79
Buzz
Fizz
82
83
Fizz
Buzz
86
Fizz
88
89
FizzBuzz
91
92
Fizz
94
Buzz
Fizz
97
98
Fizz
Buzz</code></pre>
          <p><a href="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904/1</link>
        <pubDate>Wed, 14 Nov 2018 06:19:01 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-904-1</guid>
        <source url="https://forum.rebol.info/t/ren-cs-eloquence-in-the-face-of-fizzbuzz/904.rss">Ren-C&#39;s eloquence in the face of FizzBuzz</source>
      </item>
  </channel>
</rss>
