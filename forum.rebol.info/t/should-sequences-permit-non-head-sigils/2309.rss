<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should sequences permit non-head SIGILs?</title>
    <link>https://forum.rebol.info/t/should-sequences-permit-non-head-sigils/2309</link>
    <description>Historically I was very much opposed to SET-WORD! and GET-WORD! being in paths, because the ergonomics were bad:

    red&gt;&gt; p: to path! reduce [first [:a] first [b:]]
    == :a/b:

    &gt;&gt; type? p
    == path!

You have something that&#39;s neither a SET-PATH! nor a GET-PATH! but it has colons at the beginning and the end.  It&#39;s all kinds of confusing.

Ren-C has addressed that particular can of worms with a [full design for the CHAIN! sequence type](https://forum.rebol.info/t/introducingnew-chain-datatype/2226), and rules for its nesting in PATH! (and how TUPLE! nests in it).  So you can get these weird looking structures, but they destructure unambiguously.

## As For Sigils... At The Head They Must Be Illegal

You can&#39;t put a sigil in a sequence head position, because that would be ambiguous with wanting to apply the sigil to the path as a whole.

    &gt;&gt; to path! [$foo bar]
    ** Error: This needs to be an error

The only way to allow it would be if we invented [some kind of lexical escaping](https://forum.rebol.info/t/what-is-a-path-or-a-quasi-word/2292/2?u=hostilefork) so we could tell the difference between $|foo/bar| and $|foo|/bar ... ***and I do not want lexical escaping of this kind***.

## But Sigils At Non-Head Positions... Maybe?  :roll_eyes: 

There&#39;s no fundamental reason why sigils couldn&#39;t be on non-head positions in sequences.  It works.

    &gt;&gt; $a:$b
    == a:$b  ; bound

Part of me says *&quot;ugh, no, it makes everything uglier, don&#39;t let people make these ugly things!&quot;*

But one very compelling reason just for the above syntax is what I&#39;ve called &quot;dialecting function calls&quot;, such as for pointing the blame to a callsite with a FAIL.

So instead of:

    my-api: func [x y z] [
        if true [
            if y &lt; 100 [
                fail:blame [&quot;Value must be &gt;= 100, not&quot; y] $y
            ]
         ]
     ]

You could write:

    my-api: func [x y z] [
        if true [
            if y &lt; 100 [
                fail:$y [&quot;Value must be &gt;= 100, not&quot; y]
            ]
         ]
     ]

When you look at it like that, it&#39;s hardly a monstrosity.  It&#39;s letting you push the variable to blame into the chain for invoking the function, in a way that&#39;s out-of-band with other refinements.

It could offer a cheaper way of asking to fetch variables, using @ to take the place of the old &quot;get word&quot; concept:

    &gt;&gt; block: [index offset pointer]
    &gt;&gt; index: 3

    &gt;&gt; block.index
    == offset

    &gt;&gt; block.(index)
    == pointer

    &gt;&gt; block.@index
    == pointer

It&#39;s measurably less expensive (no array allocation, cheaper to naviate to on fetch).  It doesn&#39;t use a GROUP! so it doesn&#39;t get in the way of COMPOSE-ing.

## Think I Have To Allow It...

I&#39;d originally thought that it would be cleaner to disallow it.  But seems to me there are too many interesting uses.

As a medium, Rebol is very free, and you have a lot of power to make hideous things.  So it&#39;s about using your judgment, and I think people should know when it&#39;s getting too crazy.

---

## I Almost Hate To Point It Out, But...

This is true of quotes as well.

    &gt;&gt; &#39;a:&#39;&#39;b:&#39;&#39;&#39;c
    == a:&#39;&#39;b:&#39;&#39;&#39;c

There&#39;s an unambiguous way of interpreting that.

    &gt;&gt; quote to chain! [a &#39;&#39;b &#39;&#39;&#39;c]
    == &#39;a:&#39;&#39;b:&#39;&#39;&#39;c

I don&#39;t love it, but, maybe there&#39;s cases where **`foo:&#39;bar`** would be useful in a dialect, and if it&#39;s mechanically consistent I shouldn&#39;t prohibit it.  :man_shrugging:  I don&#39;t know.</description>
    
    <lastBuildDate>Tue, 08 Oct 2024 02:33:18 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/should-sequences-permit-non-head-sigils/2309.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should sequences permit non-head SIGILs?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Historically I was very much opposed to SET-WORD! and GET-WORD! being in paths, because the ergonomics were bad:</p>
<pre><code>red&gt;&gt; p: to path! reduce [first [:a] first [b:]]
== :a/b:

&gt;&gt; type? p
== path!
</code></pre>
<p>You have something that's neither a SET-PATH! nor a GET-PATH! but it has colons at the beginning and the end.  It's all kinds of confusing.</p>
<p>Ren-C has addressed that particular can of worms with a <a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226">full design for the CHAIN! sequence type</a>, and rules for its nesting in PATH! (and how TUPLE! nests in it).  So you can get these weird looking structures, but they destructure unambiguously.</p>
<h2><a name="p-7831-as-for-sigils-at-the-head-they-must-be-illegal-1" class="anchor" href="https://forum.rebol.info#p-7831-as-for-sigils-at-the-head-they-must-be-illegal-1"></a>As For Sigils... At The Head They Must Be Illegal</h2>
<p>You can't put a sigil in a sequence head position, because that would be ambiguous with wanting to apply the sigil to the path as a whole.</p>
<pre><code>&gt;&gt; to path! [$foo bar]
** Error: This needs to be an error
</code></pre>
<p>The only way to allow it would be if we invented <a href="https://forum.rebol.info/t/what-is-a-path-or-a-quasi-word/2292/2">some kind of lexical escaping</a> so we could tell the difference between $|foo/bar| and $|foo|/bar ... <em><strong>and I do not want lexical escaping of this kind</strong></em>.</p>
<h2><a name="p-7831-but-sigils-at-non-head-positions-maybe-roll_eyes-2" class="anchor" href="https://forum.rebol.info#p-7831-but-sigils-at-non-head-positions-maybe-roll_eyes-2"></a>But Sigils At Non-Head Positions... Maybe?  <img src="https://forum.rebol.info/images/emoji/twitter/roll_eyes.png?v=12" title=":roll_eyes:" class="emoji" alt=":roll_eyes:" loading="lazy" width="20" height="20"></h2>
<p>There's no fundamental reason why sigils couldn't be on non-head positions in sequences.  It works.</p>
<pre><code>&gt;&gt; $a:$b
== a:$b  ; bound
</code></pre>
<p>Part of me says <em>"ugh, no, it makes everything uglier, don't let people make these ugly things!"</em></p>
<p>But one very compelling reason just for the above syntax is what I've called "dialecting function calls", such as for pointing the blame to a callsite with a FAIL.</p>
<p>So instead of:</p>
<pre><code>my-api: func [x y z] [
    if true [
        if y &lt; 100 [
            fail:blame ["Value must be &gt;= 100, not" y] $y
        ]
     ]
 ]
</code></pre>
<p>You could write:</p>
<pre><code>my-api: func [x y z] [
    if true [
        if y &lt; 100 [
            fail:$y ["Value must be &gt;= 100, not" y]
        ]
     ]
 ]
</code></pre>
<p>When you look at it like that, it's hardly a monstrosity.  It's letting you push the variable to blame into the chain for invoking the function, in a way that's out-of-band with other refinements.</p>
<p>It could offer a cheaper way of asking to fetch variables, using @ to take the place of the old "get word" concept:</p>
<pre><code>&gt;&gt; block: [index offset pointer]
&gt;&gt; index: 3

&gt;&gt; block.index
== offset

&gt;&gt; block.(index)
== pointer

&gt;&gt; block.@index
== pointer
</code></pre>
<p>It's measurably less expensive (no array allocation, cheaper to naviate to on fetch).  It doesn't use a GROUP! so it doesn't get in the way of COMPOSE-ing.</p>
<h2><a name="p-7831-think-i-have-to-allow-it-3" class="anchor" href="https://forum.rebol.info#p-7831-think-i-have-to-allow-it-3"></a>Think I Have To Allow It...</h2>
<p>I'd originally thought that it would be cleaner to disallow it.  But seems to me there are too many interesting uses.</p>
<p>As a medium, Rebol is very free, and you have a lot of power to make hideous things.  So it's about using your judgment, and I think people should know when it's getting too crazy.</p>
<hr>
<h2><a name="p-7831-i-almost-hate-to-point-it-out-but-4" class="anchor" href="https://forum.rebol.info#p-7831-i-almost-hate-to-point-it-out-but-4"></a>I Almost Hate To Point It Out, But...</h2>
<p>This is true of quotes as well.</p>
<pre><code>&gt;&gt; 'a:''b:'''c
== a:''b:'''c
</code></pre>
<p>There's an unambiguous way of interpreting that.</p>
<pre><code>&gt;&gt; quote to chain! [a ''b '''c]
== 'a:''b:'''c
</code></pre>
<p>I don't love it, but, maybe there's cases where <strong><code>foo:'bar</code></strong> would be useful in a dialect, and if it's mechanically consistent I shouldn't prohibit it.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20">  I don't know.</p>
          <p><a href="https://forum.rebol.info/t/should-sequences-permit-non-head-sigils/2309/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-sequences-permit-non-head-sigils/2309/1</link>
        <pubDate>Mon, 07 Oct 2024 19:06:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2309-1</guid>
        <source url="https://forum.rebol.info/t/should-sequences-permit-non-head-sigils/2309.rss">Should sequences permit non-head SIGILs?</source>
      </item>
  </channel>
</rss>
