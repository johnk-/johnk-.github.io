<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Binding Issues Raised by Chris&#39;s PARSE-MACHINE</title>
    <link>https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937</link>
    <description>*(These posts were from a [discussion of PARSE-MACHINE](https://forum.rebol.info/t/updated-parse-machine/1475) which became more about binding than what it was about or for.  I&#39;ve tried to cull some tangents and pick out what remains potentially relevant.)*

---

It looks like a very good non-trivial use of binding to study and try to make better.

For instance, looking at:

    set in system/codecs grammar make object! compose/only [  ; why I like ((splice))
        name: quote (grammar)  ; today, this could be done as name: &#39;(grammar)
        suffixes: (suffixes)
        identify?: _
        rules: (bind rules parser)  ; v-- see remarks below
        options: (options)
        decode: _
        encode: _
    ]

Here&#39;s one of those situations where **(bind rules parser)** not only mutably binds, but it yields something that gets further bound into the `make object!`.  So if the **rules** use the word &quot;name&quot; it would be redirected into this object.  Which is presumably not what you wanted.  It&#39;s an example of the need for the ideas in [&quot;Breaking MAKE OBJECT! into Multiple Operations&quot;](https://forum.rebol.info/t/breaking-make-object-into-component-operations/1442).

There&#39;s also an aspect here of [&quot;Separating Parse Rules Across Contexts&quot;](https://forum.rebol.info/t/separating-parse-rules-across-contexts/313).  Because if someone uses a component **subrule** that isn&#39;t a direct descendant of the **rules**, they presumably want access to the elements of **parser** as well.

The idea of having bindings that only apply to the GROUP! portions of code in a PARSE is a likely desired feature as well.

Retaking the term USE in DO-oriented code is one of those uncomfortable-yet-heretically-foundational ideas...and it makes you wonder exactly what the prescribed way of subverting that is.  (Do you always go through LIB/XXX?  How do people know what&#39;s bound out from under them and what isn&#39;t? 
 I&#39;ve wondered about this with things like adding keywords to PARSE...each new keyword you add runs the risk of breaking a use for another purpose...)</description>
    
    <lastBuildDate>Sun, 21 Aug 2022 11:55:17 +0000</lastBuildDate>
    <category>Binding</category>
    <atom:link href="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Binding Issues Raised by Chris&#39;s PARSE-MACHINE</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>If there's one advantage to using a MAP!*, it's that if you do use overlapping grammars**, you don't have to preset the object to use all the variables used by each grammar.</p>
<p>*<em>but I suppose can use a map within an object</em></p>
<p>**<em>latest monstrosity encountered today comes from Google: a semantic information schema encoded as JSON contained within the HTML content of a MIME-based email all designed to make your email look better in the Promotions tab in Gmail—data format mad-libs!</em></p>
          <p><a href="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/5</link>
        <pubDate>Fri, 29 Jan 2021 22:47:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1937-5</guid>
        <source url="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937.rss">Binding Issues Raised by Chris&#39;s PARSE-MACHINE</source>
      </item>
      <item>
        <title>Binding Issues Raised by Chris&#39;s PARSE-MACHINE</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1937">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>In any case...my point stands, that you likely only intended here to <strong>bind rules parser</strong>. Yet with the historic workings of MAKE OBJECT!, when you do this with a COMPOSE and the block becomes a child of the object body, you will get the additional bindings of <code>name</code>, <code>suffixes</code>, <code>identify?</code>, <code>rules</code>, <code>options</code>, <code>decode</code>, <code>encode</code>... etc.</p>
</blockquote>
</aside>
<p>Ah, I get what you mean. Yep, that did catch me out. My inclination though is to reach for <strong>map!</strong> instead as it has no context and potentially doesn't require a preset list of fields, or another way of designating the rule (e.g. <strong>[rule: bind 'rule 'some-other-word-in-the-parent-context-that-isnt-in-the-object]</strong>—not ideal and a more nuanced constructor would be better in this instance). This goes back once again to thinking about what objects are for—1) single use, code-grouping objects such as this vs. 2) prototypes representing things in the classical object-oriented sense—which I'd still prefer to see prioritized. Again, I'm sympathetic to the need for different constructors, but still have reservations about the implications of <strong>my/method</strong> as a solution to binding when cloning. Anyways, this is more a response to <a href="https://forum.rebol.info/t/breaking-make-object-into-component-operations/1442">that topic</a> than this one.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="3" data-topic="1937">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Imagine adding <code>mark</code> to this list in your example...the user code bound to it could wind up corrupting state it wasn't supposed to see.</p>
</blockquote>
</aside>
<p>Specific usage of <strong>mark</strong> here is a behavioural legacy and a mistake, the convention I'm looking to use here would be <strong>state/mark</strong>. I'm not sure I see the <strong>state</strong> basket as being heavy handed, I think it's a reasonable response to the complexity of what I'm trying to achieve. Could well also be my familiarity bias too, but for now it's workable as a means to explore the Parse Machine concept to a conclusion.</p>
          <p><a href="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/4</link>
        <pubDate>Fri, 29 Jan 2021 17:08:58 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1937-4</guid>
        <source url="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937.rss">Binding Issues Raised by Chris&#39;s PARSE-MACHINE</source>
      </item>
      <item>
        <title>Binding Issues Raised by Chris&#39;s PARSE-MACHINE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="rgchris" data-post="2" data-topic="1937">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="2" data-topic="1475">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/updated-parse-machine/1475/2">Updated Parse Machine</a>
</div>
<blockquote>
<p>So if the <strong>rules</strong> use the word "name" it would be redirected into this object</p>
</blockquote>
</aside>
<p>The convention I'm shooting for here is that you use the <strong>state</strong> map to track any variables.</p>
</blockquote>
</aside>
<p>That avoids naming conflicts, though it's a bit heavy-handed.  And even in this case it's not true of all variables you're using, e.g. <strong>mark</strong> has potential to collide.  <em>(BTW: At one time, Ren-C took MARK as a keyword, previous to the new design for <strong><code>pos: &lt;here&gt;</code></strong> as how to mark series positions.)</em></p>
<p>In any case...my point stands, that you likely only intended here to <strong>bind rules parser</strong>.  Yet with the historic workings of MAKE OBJECT!, when you do this with a COMPOSE and the block becomes a child of the object body, you will get the additional bindings of <code>name</code>, <code>suffixes</code>, <code>identify?</code>, <code>rules</code>, <code>options</code>, <code>decode</code>, <code>encode</code>... etc.  Imagine adding <code>mark</code> to this list in your example...the user code bound to it could wind up corrupting state it wasn't supposed to see.</p>
<aside class="quote no-group" data-username="rgchris" data-post="2" data-topic="1937">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/40/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>Yes, though as <strong>parser</strong> only has one state value at a time, any rule 'outside' the binding just needs access to <strong>parser/state</strong> to access parsing details.</p>
</blockquote>
</aside>
<p>When people make these little "parse machine" snippets, I'd imagine they'd like to be able to take for granted that the parse machine engine could interpret those snippets without having to be given all of them up front in a block.  Especially if the snippet might be generated dynamically.  It would be nice if you could be on more of an even turf with the keywords of PARSE in this respect.</p>
          <p><a href="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/3</link>
        <pubDate>Fri, 29 Jan 2021 08:09:38 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1937-3</guid>
        <source url="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937.rss">Binding Issues Raised by Chris&#39;s PARSE-MACHINE</source>
      </item>
      <item>
        <title>Binding Issues Raised by Chris&#39;s PARSE-MACHINE</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1937">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>So if the <strong>rules</strong> use the word "name" it would be redirected into this object</p>
</blockquote>
</aside>
<p>The convention I'm shooting for here is that you use the <strong>state</strong> map to track any variables. As <strong>state</strong> is a consistent value through all grammars, every grammar shares the same view on, well, state. There's a few aspects where adhering to conventions such as this offer some insight in to what the system might be capable of.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1937">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Because if someone uses a component <strong>subrule</strong> that isn't a direct descendant of the <strong>rules</strong>, they presumably want access to the elements of <strong>parser</strong> as well.</p>
</blockquote>
</aside>
<p>Yes, though as <strong>parser</strong> only has one state value at a time, any rule 'outside' the binding just needs access to <strong>parser/state</strong> to access parsing details.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1937">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Retaking the term USE in DO-oriented code is one of those uncomfortable-yet-heretically-foundational ideas...</p>
</blockquote>
</aside>
<p>It's certainly something I've considered. Red doesn't have <strong>use</strong> and a common pattern is to create namespaces which are kind of what <strong>module!</strong> is for. Another unstated goal here is to make the code surrounding these grammars as basic as possible, to make them maintainable and optimize-able.</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1937">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>jump this particular codebase to mainline Ren-C</p>
</blockquote>
</aside>
<p>I'm a little less familiar with latest Ren-C than I was, especially the Parse changes. It's not a complex module, but it may take a bit of effort demonstrating something useful.</p>
<aside class="quote no-group quote-modified" data-username="hostilefork" data-post="1" data-topic="1937">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>had been removed from R3C</p>
</blockquote>
</aside>
<p>There's a few such things that I've come across. Working to get them into tests.</p>
          <p><a href="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/2</link>
        <pubDate>Tue, 26 Jan 2021 13:42:57 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1937-2</guid>
        <source url="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937.rss">Binding Issues Raised by Chris&#39;s PARSE-MACHINE</source>
      </item>
      <item>
        <title>Binding Issues Raised by Chris&#39;s PARSE-MACHINE</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><em>(These posts were from a <a href="https://forum.rebol.info/t/updated-parse-machine/1475">discussion of PARSE-MACHINE</a> which became more about binding than what it was about or for.  I've tried to cull some tangents and pick out what remains potentially relevant.)</em></p>
<hr>
<p>It looks like a very good non-trivial use of binding to study and try to make better.</p>
<p>For instance, looking at:</p>
<pre><code>set in system/codecs grammar make object! compose/only [  ; why I like ((splice))
    name: quote (grammar)  ; today, this could be done as name: '(grammar)
    suffixes: (suffixes)
    identify?: _
    rules: (bind rules parser)  ; v-- see remarks below
    options: (options)
    decode: _
    encode: _
]
</code></pre>
<p>Here's one of those situations where <strong>(bind rules parser)</strong> not only mutably binds, but it yields something that gets further bound into the <code>make object!</code>.  So if the <strong>rules</strong> use the word "name" it would be redirected into this object.  Which is presumably not what you wanted.  It's an example of the need for the ideas in <a href="https://forum.rebol.info/t/breaking-make-object-into-component-operations/1442">"Breaking MAKE OBJECT! into Multiple Operations"</a>.</p>
<p>There's also an aspect here of <a href="https://forum.rebol.info/t/separating-parse-rules-across-contexts/313">"Separating Parse Rules Across Contexts"</a>.  Because if someone uses a component <strong>subrule</strong> that isn't a direct descendant of the <strong>rules</strong>, they presumably want access to the elements of <strong>parser</strong> as well.</p>
<p>The idea of having bindings that only apply to the GROUP! portions of code in a PARSE is a likely desired feature as well.</p>
<p>Retaking the term USE in DO-oriented code is one of those uncomfortable-yet-heretically-foundational ideas...and it makes you wonder exactly what the prescribed way of subverting that is.  (Do you always go through LIB/XXX?  How do people know what's bound out from under them and what isn't?<br>
I've wondered about this with things like adding keywords to PARSE...each new keyword you add runs the risk of breaking a use for another purpose...)</p>
          <p><a href="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937/1</link>
        <pubDate>Tue, 26 Jan 2021 03:45:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1937-1</guid>
        <source url="https://forum.rebol.info/t/binding-issues-raised-by-chriss-parse-machine/1937.rss">Binding Issues Raised by Chris&#39;s PARSE-MACHINE</source>
      </item>
  </channel>
</rss>
