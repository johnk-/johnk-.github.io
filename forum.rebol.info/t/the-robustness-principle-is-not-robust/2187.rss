<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Robustness Principle Is Not Robust</title>
    <link>https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187</link>
    <description>Something floating around that I&#39;ve pretty much always hated--but experience has made me hate more--is the &quot;Robustness Principle&quot;:

https://en.wikipedia.org/wiki/Robustness_principle

I understand the motivation.  If you have something that imports to a vector graphics program and not all the Bezier curves have endpoints... then, sure.  Someone is going to appreciate that you were forgiving and they got some kind of maybe-a-bit-broken picture instead of an &quot;Invalid File&quot; error.

Pushing this further to those of us who remember the DOS days: we had those experiences where we accidentally deleted files, but the filesystem didn&#39;t delete everything--it just wrote a zero byte on the filename (or somesuch).  Norton Utilities let us catch our mistake and get our file back.  In some ways, a lax and forgiving attitude is a beautiful thing...

This so-called &quot;robustness&quot; cannot (and should not) be subconscious.  It needs to be mitigated with an in-your-face consciousness shift!  *(And I think Norton Utilities is an apt example, because if you were firing up that program [you knew you were in the Danger Zone](https://www.youtube.com/watch?v=RRU3I_o1vLc))*.

There must be a really jarring speedbump.  When a data file is not fitting the standards, you have to go through a procedure that transforms the broken file to the standard.  You have to be aware that you are dealing with a dirty file.  And the experience of that transformation informs you that the person who gave you the dirty file isn&#39;t playing with all their marbles, and you correct them for the next transmission.

Authentic programs should demand a standard form.  And when they aren&#39;t getting the standard form they should speak up, march you out the door, and force you to fix your input. &quot;Real programs&quot; should never pretend the byte sequence of bad input is okay--there should only be &quot;Cleanup/Recovery programs&quot; that fix the sequence to write a correct one.  And that recovery program should be terminated before the &quot;Real program&quot; runs.

---

I don&#39;t need to rewrite the critiques of the &quot;robustness principle&quot; cited in Wikipedia.  But it is nonsense, and the opposite of robust.  It&#39;s a garbage idea, that anyone with a whit of sense regarding security can see right through immediately.

There is a better way: the better way is *consciousness* about what you are working with, and rejection of any sort of malignant &quot;middleman&quot; acting on your data without you knowing.

* &quot;Normalization&quot; you did not ask for is an attack on your information.

* &quot;Glossing over or fixing invalid sequences&quot; you did not ask for is an attack on your information

* Anything which makes a simple load of a file and save back of the same file not idempotent is an attack on your information

Perhaps I&#39;ve become even more religious than Carl in some of these ways.  But I certainly see things won&#39;t get better without pushing back.</description>
    
    <lastBuildDate>Thu, 13 Jun 2024 22:04:55 +0000</lastBuildDate>
    <category>Philosophy</category>
    <atom:link href="https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Robustness Principle Is Not Robust</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="2" data-topic="2187">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"> bradrn:</div>
<blockquote>
<p>I think you’d very much enjoy this article, if you haven’t seen it already: <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/">Parse, don’t validate </a>.</p>
</blockquote>
</aside>
<p>Hadn't seen this...</p>
<p>It starts from the premise of <em>"you can't write <strong><code>[a] -&gt; a</code></strong>"</em>, which is where I had wanted to start my own Intro-to-Haskell essay.  Grasping how nothing is taken for granted (no default constructor, etc) and how the type signature practically tells you what the function does.</p>
<p>Now I don't have to write my own less-informed version of that.   <img src="https://forum.rebol.info/images/emoji/twitter/relieved.png?v=12" title=":relieved:" class="emoji" alt=":relieved:" loading="lazy" width="20" height="20"></p>
<p><em>(Although it does expect you to know what <strong><code>head :: [a] -&gt; a</code></strong> means, and I'd thought of really starting from no knowledge besides familiarity with some imperative language for contrast.)</em></p>
<hr>
<p>I don't see anything to disagree with:</p>
<ul>
<li>
<p><strong>"Use a data structure that makes illegal states unrepresentable."</strong></p>
</li>
<li>
<p><strong>"Get your data into the most precise representation you need as quickly as you can. Ideally, this should happen at the boundary of your system, before <em>any</em> of the data is acted upon."</strong></p>
</li>
<li>
<p><strong>"Avoid denormalized representations of data, <em>especially</em> if it’s mutable."</strong></p>
</li>
<li>
<p><strong>"Keep denormalized representations of data behind abstraction boundaries."</strong></p>
</li>
</ul>
<p>This kind of thinking is what made me want TEXT! to work how it does enforcing UTF-8, and is guiding thinking on <a href="https://forum.rebol.info/t/o-noes-unicode-normalization/1322/11">pushing that further to NFC</a>.</p>
          <p><a href="https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187/3</link>
        <pubDate>Thu, 13 Jun 2024 22:04:55 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2187-3</guid>
        <source url="https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187.rss">The Robustness Principle Is Not Robust</source>
      </item>
      <item>
        <title>The Robustness Principle Is Not Robust</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2187">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Authentic programs should demand a standard form. And when they aren't getting the standard form they should speak up, march you out the door, and force you to fix your input.</p>
</blockquote>
</aside>
<p>I think you’d very much enjoy this article, if you haven’t seen it already: <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/" class="inline-onebox">Parse, don’t validate</a>.</p>
<p>(That being said, I think there’s still a place for a weak version of the Robustness Principle. ‘Be conservative in what you send’ is always a good guideline, of course. And it seems reasonable to accept some amount of small variation in input, when it’s unambiguous.)</p>
          <p><a href="https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187/2</link>
        <pubDate>Thu, 13 Jun 2024 10:16:03 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2187-2</guid>
        <source url="https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187.rss">The Robustness Principle Is Not Robust</source>
      </item>
      <item>
        <title>The Robustness Principle Is Not Robust</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Something floating around that I've pretty much always hated--but experience has made me hate more--is the "Robustness Principle":</p>
<aside class="onebox wikipedia" data-onebox-src="https://en.wikipedia.org/wiki/Robustness_principle">
  <header class="source">

      <a href="https://en.wikipedia.org/wiki/Robustness_principle" target="_blank" rel="noopener">en.wikipedia.org</a>
  </header>

  <article class="onebox-body">
    

<h3><a href="https://en.wikipedia.org/wiki/Robustness_principle" target="_blank" rel="noopener">Robustness principle</a></h3>

<p>In computing, the robustness principle is a design guideline for software that states: "be conservative in what you do, be liberal in what you accept from others". It is often reworded as: "be conservative in what you send, be liberal in what you accept". The principle is also known as Postel's law, after Jon Postel, who used the wording in an early specification of TCP.
 In other words, programs that send messages to other machines (or to other programs on the same machine) should conform comple...</p>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>I understand the motivation.  If you have something that imports to a vector graphics program and not all the Bezier curves have endpoints... then, sure.  Someone is going to appreciate that you were forgiving and they got some kind of maybe-a-bit-broken picture instead of an "Invalid File" error.</p>
<p>Pushing this further to those of us who remember the DOS days: we had those experiences where we accidentally deleted files, but the filesystem didn't delete everything--it just wrote a zero byte on the filename (or somesuch).  Norton Utilities let us catch our mistake and get our file back.  In some ways, a lax and forgiving attitude is a beautiful thing...</p>
<p>This so-called "robustness" cannot (and should not) be subconscious.  It needs to be mitigated with an in-your-face consciousness shift!  <em>(And I think Norton Utilities is an apt example, because if you were firing up that program <a href="https://www.youtube.com/watch?v=RRU3I_o1vLc">you knew you were in the Danger Zone</a>)</em>.</p>
<p>There must be a really jarring speedbump.  When a data file is not fitting the standards, you have to go through a procedure that transforms the broken file to the standard.  You have to be aware that you are dealing with a dirty file.  And the experience of that transformation informs you that the person who gave you the dirty file isn't playing with all their marbles, and you correct them for the next transmission.</p>
<p>Authentic programs should demand a standard form.  And when they aren't getting the standard form they should speak up, march you out the door, and force you to fix your input. "Real programs" should never pretend the byte sequence of bad input is okay--there should only be "Cleanup/Recovery programs" that fix the sequence to write a correct one.  And that recovery program should be terminated before the "Real program" runs.</p>
<hr>
<p>I don't need to rewrite the critiques of the "robustness principle" cited in Wikipedia.  But it is nonsense, and the opposite of robust.  It's a garbage idea, that anyone with a whit of sense regarding security can see right through immediately.</p>
<p>There is a better way: the better way is <em>consciousness</em> about what you are working with, and rejection of any sort of malignant "middleman" acting on your data without you knowing.</p>
<ul>
<li>
<p>"Normalization" you did not ask for is an attack on your information.</p>
</li>
<li>
<p>"Glossing over or fixing invalid sequences" you did not ask for is an attack on your information</p>
</li>
<li>
<p>Anything which makes a simple load of a file and save back of the same file not idempotent is an attack on your information</p>
</li>
</ul>
<p>Perhaps I've become even more religious than Carl in some of these ways.  But I certainly see things won't get better without pushing back.</p>
          <p><a href="https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187/1</link>
        <pubDate>Thu, 13 Jun 2024 05:45:28 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2187-1</guid>
        <source url="https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187.rss">The Robustness Principle Is Not Robust</source>
      </item>
  </channel>
</rss>
