<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Line Continuation and Arity Bugs: Thoughts?</title>
    <link>https://forum.rebol.info/t/line-continuation-and-arity-bugs-thoughts/1965</link>
    <description>At one point in time, there was no way to pass something to RETURN that represented a VOID.  Because voids completely vanished.  If you had a function that took an argument--and a void thing came after it--the evaluator would just keep retriggering until it found a value or hit the end.

This led to the only way of being able to return a void to be to have truly nothing after it.  So RETURN became effectively arity-0 or arity-1.  If you passed it no argument, it would consider itself VOID.  It even had the nice property of being able to chain functions that themselves might be void.

Given that RETURN was doing this, some other functions followed suit.  QUIT could take an argument or not.  CONTINUE could as well.

## But I Just Got Bit By a Variadic QUIT Bug

Without thinking about it, I tried to end some code prematurely by injecting a quit:

     some stuff I wanted to run

     quit  ; added this

     some stuff I wanted to avoid running

And that QUIT ran the stuff I didn&#39;t want to run anyway, because it was variadic.

## My Kneejerk Reaction Was To Kill The Variadicness

The original case of RETURN has changed, because so-called &quot;non-interstitial invisibility&quot; is dead.  You can only make expressions void in their totality--not when used as arguments.  Doing otherwise caused more harm than good.

Hence **`return void`** is a perfectly fine thing to write *(or **`return ~`** if you prefer the quasiform of void, which you probably don&#39;t, but it might come in handy somewhere if you&#39;ve defined VOID to mean something else)*

I&#39;d been thinking that argument-less RETURN would thus go back to returning the default unfriendly value (currently called NONE, a **`~[]~`** isotope, e.g. a parameter pack with absolutely no values in it).  But maybe we shouldn&#39;t support argument-less RETURN at all.

## But Variadics Can Be Neat

I guess RETURN could always take an argument, and we go back to CONTINUE/WITH and QUIT/WITH.

But those are uglier.  

We might question the behavior of the system just randomly slurping up arguments from enusing lines?  Especially when APPLY has such a convenient notation now, of **some-func/ [...]**

From a usability perspective, there&#39;s certainly a lot of potential for error in getting the arity wrong.  Having it be more strict could catch bugs, and make it more likely that variadic arity is being used correctly.</description>
    
    <lastBuildDate>Wed, 14 Sep 2022 20:29:55 +0000</lastBuildDate>
    <category>Semantics</category>
    <atom:link href="https://forum.rebol.info/t/line-continuation-and-arity-bugs-thoughts/1965.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Line Continuation and Arity Bugs: Thoughts?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>At one point in time, there was no way to pass something to RETURN that represented a VOID.  Because voids completely vanished.  If you had a function that took an argument--and a void thing came after it--the evaluator would just keep retriggering until it found a value or hit the end.</p>
<p>This led to the only way of being able to return a void to be to have truly nothing after it.  So RETURN became effectively arity-0 or arity-1.  If you passed it no argument, it would consider itself VOID.  It even had the nice property of being able to chain functions that themselves might be void.</p>
<p>Given that RETURN was doing this, some other functions followed suit.  QUIT could take an argument or not.  CONTINUE could as well.</p>
<h2>But I Just Got Bit By a Variadic QUIT Bug</h2>
<p>Without thinking about it, I tried to end some code prematurely by injecting a quit:</p>
<pre><code> some stuff I wanted to run

 quit  ; added this

 some stuff I wanted to avoid running
</code></pre>
<p>And that QUIT ran the stuff I didn't want to run anyway, because it was variadic.</p>
<h2>My Kneejerk Reaction Was To Kill The Variadicness</h2>
<p>The original case of RETURN has changed, because so-called "non-interstitial invisibility" is dead.  You can only make expressions void in their totality--not when used as arguments.  Doing otherwise caused more harm than good.</p>
<p>Hence <strong><code>return void</code></strong> is a perfectly fine thing to write <em>(or <strong><code>return ~</code></strong> if you prefer the quasiform of void, which you probably don't, but it might come in handy somewhere if you've defined VOID to mean something else)</em></p>
<p>I'd been thinking that argument-less RETURN would thus go back to returning the default unfriendly value (currently called NONE, a <strong><code>~[]~</code></strong> isotope, e.g. a parameter pack with absolutely no values in it).  But maybe we shouldn't support argument-less RETURN at all.</p>
<h2>But Variadics Can Be Neat</h2>
<p>I guess RETURN could always take an argument, and we go back to CONTINUE/WITH and QUIT/WITH.</p>
<p>But those are uglier.</p>
<p>We might question the behavior of the system just randomly slurping up arguments from enusing lines?  Especially when APPLY has such a convenient notation now, of <strong>some-func/ [...]</strong></p>
<p>From a usability perspective, there's certainly a lot of potential for error in getting the arity wrong.  Having it be more strict could catch bugs, and make it more likely that variadic arity is being used correctly.</p>
          <p><a href="https://forum.rebol.info/t/line-continuation-and-arity-bugs-thoughts/1965/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/line-continuation-and-arity-bugs-thoughts/1965/1</link>
        <pubDate>Wed, 14 Sep 2022 17:08:13 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1965-1</guid>
        <source url="https://forum.rebol.info/t/line-continuation-and-arity-bugs-thoughts/1965.rss">Line Continuation and Arity Bugs: Thoughts?</source>
      </item>
  </channel>
</rss>
