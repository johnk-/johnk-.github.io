<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Semantics of PORT!s vs. Streams vs. Iterators</title>
    <link>https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689</link>
    <description>I&#39;ve complained often about PORT! seeming to try and serve two masters... it tries to act as something of an OBJECT!, but also a stream.

Here is the definition of system.standard.port...the template object from which PORT!s are created:

    system.standard.port: make object! [
        spec: &#39;
        scheme: &#39;
        actor: &#39;
        awake: ~unset~
        state: &#39;
        data: &#39;
        locals: &#39;

        connections: &#39;  ; currently used only by TCP ports
    ]

That&#39;s an OBJECT!, but the underlying datatype is switched to PORT! when the port is created.

## How Do You Interact With This Object as an Object?

The [&quot;What is a Port&quot;](https://forum.rebol.info/t/what-is-a-port/617) document says this:

&gt; Specific *action functions* can be applied to a port. Some common actions are:
&gt; 
&gt; * **make** - create a new port
&gt; * **open** - initialize the port
&gt; * **close** - finalize the port
&gt; * **read** - read data from port
&gt; * **write** - write data to port
&gt; * **query** - get other information from port
&gt; * **update** - detect external changes to the port
&gt; 
&gt; But, there are many other actions as well, as generally defined by Rebol datatypes.

What else qualifies as these &quot;many other actions?&quot;  

* [Rebol2&#39;s ODBC](http://www.rebol.com/docs/database.html) suggests **PICK (FIRST)**, **INSERT**, and **COPY** as choices.

* Source code for [File Port in R3-Alpha](https://github.com/rebol/rebol/blob/master/src/core/p-file.c) shows **APPEND**, **DELETE**, **RENAME**, **MODIFY**, **OPEN?**, **LENGTH?**, **HEAD**, **TAIL**, **NEXT**, **BACK**, **SKIP**, **HEAD?**, **TAIL?**, **PAST?**, **CLEAR**.

*This is awfully saturated, and it seems nothing is off the table for what this abstract idea of a PORT! might want to react to.*

So how do you get at these object fields safely?  How do you PICK the SPEC field?  How do you POKE the AWAKE function?  

## More Problems: PORT and 1:1 with STREAM Correspondence

When you&#39;re working with a TCP connection, you supposedly think of that as a bidirectional PORT!.  You don&#39;t open a connection for your input, and one for your output--you read and write to the same port.

If so, why is there **system.ports.input** and **system.ports.output** instead of **system.ports.stdio**?

One technical good reason there is that there are actually two stdio output streams: the stdout and the stderr for error messages.  Often these are directed to the same place, but not always.

So here you see that maybe something like stdio would like to be an object aggregating three data streams: 1 for input and two for output.

## Difference Between Ports and User Defined Datatypes?

It doesn&#39;t really seem like anything is off the table for what you can override on a PORT!.

Can you define what it means to ADD to a PORT!?  If not, why not?

What about path selection on a PORT! (or today&#39;s field access via TUPLE!, another option).

Once you get into this &quot;anything goes&quot; attitude you are essentially talking about an implementation for user-defined datatypes.

This points out an important aspect of the articulation of any design: **You need to be able to say what it isn&#39;t, or there&#39;s no meaningful definition of what it is.**

## Streaming/Iterating Is Narrower And Needs a Protocol

While PORT! is slippery, I&#39;m going to be attacking just the more basic questions of streaming and iteration.

We want to be able to say `parse some-100-mb-file [&quot;FOO&quot; &lt;stop&gt;]` and not have to read 100 megabytes just to know if it started with &quot;FOO&quot;

And we want to be able to do that with something like FOR-EACH as well...

     for-each [x y z] some-100-mb-file [
         all [x = #f, y = #o, z = #o] then [break]
     ]

That shouldn&#39;t need to have all 100 megabytes in memory.  And a generic solution to this which puts iteration in the mix should allow for streams to be piped and connected to each other to do filtering, encryption/decryption, compression, etc...

So I&#39;m going to focus on the narrower question of how to do that, vs. the muddle of &quot;What is a PORT!&quot;, at this time.  Wishful thinking isn&#39;t going to solve that problem, but rational adaptation of the methods used by other languages that do this might.</description>
    
    <lastBuildDate>Mon, 08 Aug 2022 20:54:33 +0000</lastBuildDate>
    <category>Ports</category>
    <atom:link href="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Semantics of PORT!s vs. Streams vs. Iterators</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="rgchris" data-post="4" data-topic="1689">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I'm not exactly certain how one would go about making these iterators in an efficient fashion. Pulling byte by byte from a Deflate iterator might be a slow way of doing that.</p>
</blockquote>
</aside>
<p>As a practical matter, streaming interfaces tend to have to pick arbitrary block sizes of some maximum of how much they read at a time.</p>
<p>My concept for READ was that if you did not qualify it, then it would mean "read everything":</p>
<p><a href="https://forum.rebol.info/t/semantics-of-read-and-tcp-streams-past-and-future/1733" class="inline-onebox">Semantics of READ and TCP Streams: Past And Future</a></p>
<p>But then you have the question of reading a maximum of a certain number of bytes, vs. reading exactly a certain number of bytes.</p>
<p>A one-byte-at-a-time interface is a good place to start, but all practical streaming code has to enable bigger chunks.</p>
<aside class="quote no-group" data-username="rgchris" data-post="4" data-topic="1689">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/rgchris/48/14_2.png" class="avatar"> rgchris:</div>
<blockquote>
<p>I have a little test case for where a piece of data is stored in a few layers of formats:</p>
</blockquote>
</aside>
<p>I definitely think that non-trivial layered examples are important to consider.</p>
<p>I also think the design would be very influenced by generator and yielder:</p>
<p><a href="https://forum.rebol.info/t/yielder-and-generator-and-thinking-about-coroutines/1311" class="inline-onebox">YIELDER and GENERATOR (and thinking about Coroutines)</a></p>
<p>But I'm trying not to rush those, because the system really needs to stabilize and have things hammered down.  There is a lot of "technical debt" that needs to be paid off...</p>
          <p><a href="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/5</link>
        <pubDate>Mon, 08 Aug 2022 20:54:33 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1689-5</guid>
        <source url="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689.rss">Semantics of PORT!s vs. Streams vs. Iterators</source>
      </item>
      <item>
        <title>Semantics of PORT!s vs. Streams vs. Iterators</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <h1><a name="p-6227-inputoutput-ports-1" class="anchor" href="https://forum.rebol.info#p-6227-inputoutput-ports-1"></a>Input/Output Ports</h1>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1689">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>When you're working with a TCP connection, you supposedly think of that as a bidirectional PORT!. You don't open a connection for your input, and one for your output--you read and write to the same port.</p>
<p>If so, why is there <strong>system.ports.input</strong> and <strong>system.ports.output</strong> instead of <strong>system.ports.stdio</strong>?</p>
</blockquote>
</aside>
<p>I'd add here that input/output may not be the same end point. In Rebol 2, as I understand it, in a console session both (SYSTEM/PORTS/) INPUT and OUTPUT were set to the same CONSOLE scheme, though when called from the shell, it uses a FILE scheme. Somewhere lost in the translation to Rebol 3 is in part why Rebol 3 was incomplete (and where Rebol 2 still has flaws):</p>
<p>My primary usage of Rebol is running scripts from the shell and such usage is constantly polluted with artifacts from implied terminal usage (the dreaded <code>&gt;&gt; </code> or the <code>5... 4... 3... 2... 1...</code> bomb of R3C-era Ren-C.</p>
<p>Anyways, while it's somewhat intuitive that INPUT/OUTPUT are set to the same scheme, it doesn't necessarily have to be. You could set output to another open FILE port and all output is redirected there. I'm not entirely certain what the merits of any effective exploitation of this would be, but <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20">IDK.</p>
<h1><a name="p-6227-what-is-a-port-2" class="anchor" href="https://forum.rebol.info#p-6227-what-is-a-port-2"></a>What is a Port?</h1>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1689">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Once you get into this "anything goes" attitude you are essentially talking about an implementation for user-defined datatypes.</p>
</blockquote>
</aside>
<p>I don't know that this necessarily follows. I've argued that ports are as close as you get to user-defined datatypes, but I'd also suggest that this is a misapplication. I think that PORT exists (as the name implies) as an interface to an external system or construct. When viewed this way, you might also consider SERIES or MAP to be internal ports with a fixed and native implementation of the, let's call them, say, 'manipulation verbs' and while it can be desirable to have those verbs be consistent with custom ports, it doesn't necessarily have to be so. It depends on context.</p>
<p>I think this definition tracks with the use of URLs/FILEs as the initiator as well.</p>
<h1><a name="p-6227-iterators-3" class="anchor" href="https://forum.rebol.info#p-6227-iterators-3"></a>Iterators</h1>
<p>Javascript handles iterators in much the same way Rebol handles ports: objects that conform to a set of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol">conventions</a> that integrate them with fixed language constructs (e.g. <code>for...of</code>). The result of this is that you can layer things in customisable ways. Rather than explain this in Javascript, I'll offer a prospective way for how this might look as Rebol.</p>
<h2><a name="p-6227-test-case-4" class="anchor" href="https://forum.rebol.info#p-6227-test-case-4"></a>Test Case</h2>
<p>I have a little test case for where a piece of data is stored in a few layers of formats:</p>
<pre><code class="lang-plaintext">encoded: "start F3Dl7!! end"
</code></pre>
<p>This snippet contains the string 'Foo' where it is Deflated and then encoded as Ascii85. It might be possible just to copy text between 'start' and 'end' and apply the decoders sequentially, however <code>"end"</code> is valid Ascii85 and spaces are permitted, so the following may stymie this strategy:</p>
<pre><code class="lang-plaintext">encoded: "start F3DI7!! end end"
</code></pre>
<p>Ascii85 is not self-terminating, Deflate is. Thus a way to approach this might be to use an iterator for each level. Prospective solution:</p>
<pre><code class="lang-plaintext">encoded: make string/iterator [
    source: "start F3DI7!! end"
]

encoded/consume "start"

encoded-ascii85: make ascii85/iterator [
    source: encoded
]

encoded-deflate: make deflate/iterator [
    source: encoded-ascii85
]

result: make binary! collect [
    while [
        byte: encoded-deflate/next
    ][
        keep byte
    ]
]

encoded/consume " end"
=&gt; true
</code></pre>
<p>Could just as easily begin:</p>
<pre><code class="lang-plaintext">encoded: make big-file/iterator [
    source: %file-containing-data
]
</code></pre>
<p>Like ports, this still doesn't give you consistency between formats—what does it mean for a JSON iterator when you say:</p>
<pre><code class="lang-plaintext">json-iterator: make json/iterator [
    source: "[1, 2, 3, 4]"
]

probe json-iterator/next

=&gt; one of:
== [1 2 3 4]
== [open-array]  ; to be followed by [number 1]
</code></pre>
<p>I'm not exactly certain how one would go about making these iterators in an efficient fashion. Pulling byte by byte from a Deflate iterator might be a slow way of doing that.</p>
          <p><a href="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/4</link>
        <pubDate>Mon, 08 Aug 2022 17:15:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1689-4</guid>
        <source url="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689.rss">Semantics of PORT!s vs. Streams vs. Iterators</source>
      </item>
      <item>
        <title>Semantics of PORT!s vs. Streams vs. Iterators</title>
        <dc:creator><![CDATA[Brett]]></dc:creator>
        <description><![CDATA[
            <p>I'll add one extra perspective around the semantics of ports from a user pov, at least for Rebol 2.</p>
<p>Way back when, I got interested in ports because I thought Rebol interpreters were going to talk dialects to each other via ports. I was eventually disappointed.  In my only documented port scheme <a href="http://www.rebol.org/documentation.r?script=do-pop-scheme.r">do-pop</a>, I thought a port was a better option than an object because it could cleanup after itself. Nevertheless, I side-stepped the clunky port interface and the cognitive burden of trying to translate the semantic action I wanted into port actions - they don't fit well anyway.  Instead I used the port as an bind and evaluator of simple function calls, where the "evaluation" happened remotely.  I don't know that it was a great idea, but it was interesting to me because it was like a "relative expression" was being evaluated over the wire transparently.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1689">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>I'm going to be attacking just the more basic questions of streaming and iteration.</p>
</blockquote>
</aside>
<p>Wise.</p>
          <p><a href="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/3</link>
        <pubDate>Fri, 27 Aug 2021 13:03:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1689-3</guid>
        <source url="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689.rss">Semantics of PORT!s vs. Streams vs. Iterators</source>
      </item>
      <item>
        <title>Semantics of PORT!s vs. Streams vs. Iterators</title>
        <dc:creator><![CDATA[IngoHohmann]]></dc:creator>
        <description><![CDATA[
            <p>I never really liked ports to begin with. I'd more likely create my own object to encapsulate the port and use my own functions to interact with it.</p>
          <p><a href="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/2</link>
        <pubDate>Fri, 27 Aug 2021 09:16:52 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1689-2</guid>
        <source url="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689.rss">Semantics of PORT!s vs. Streams vs. Iterators</source>
      </item>
      <item>
        <title>Semantics of PORT!s vs. Streams vs. Iterators</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I've complained often about PORT! seeming to try and serve two masters... it tries to act as something of an OBJECT!, but also a stream.</p>
<p>Here is the definition of system.standard.port...the template object from which PORT!s are created:</p>
<pre><code>system.standard.port: make object! [
    spec: '
    scheme: '
    actor: '
    awake: ~unset~
    state: '
    data: '
    locals: '

    connections: '  ; currently used only by TCP ports
]
</code></pre>
<p>That's an OBJECT!, but the underlying datatype is switched to PORT! when the port is created.</p>
<h2><a name="p-5432-how-do-you-interact-with-this-object-as-an-object-1" class="anchor" href="https://forum.rebol.info#p-5432-how-do-you-interact-with-this-object-as-an-object-1"></a>How Do You Interact With This Object as an Object?</h2>
<p>The <a href="https://forum.rebol.info/t/what-is-a-port/617">"What is a Port"</a> document says this:</p>
<blockquote>
<p>Specific <em>action functions</em> can be applied to a port. Some common actions are:</p>
<ul>
<li><strong>make</strong> - create a new port</li>
<li><strong>open</strong> - initialize the port</li>
<li><strong>close</strong> - finalize the port</li>
<li><strong>read</strong> - read data from port</li>
<li><strong>write</strong> - write data to port</li>
<li><strong>query</strong> - get other information from port</li>
<li><strong>update</strong> - detect external changes to the port</li>
</ul>
<p>But, there are many other actions as well, as generally defined by Rebol datatypes.</p>
</blockquote>
<p>What else qualifies as these "many other actions?"</p>
<ul>
<li>
<p><a href="http://www.rebol.com/docs/database.html">Rebol2's ODBC</a> suggests <strong>PICK (FIRST)</strong>, <strong>INSERT</strong>, and <strong>COPY</strong> as choices.</p>
</li>
<li>
<p>Source code for <a href="https://github.com/rebol/rebol/blob/master/src/core/p-file.c">File Port in R3-Alpha</a> shows <strong>APPEND</strong>, <strong>DELETE</strong>, <strong>RENAME</strong>, <strong>MODIFY</strong>, <strong>OPEN?</strong>, <strong>LENGTH?</strong>, <strong>HEAD</strong>, <strong>TAIL</strong>, <strong>NEXT</strong>, <strong>BACK</strong>, <strong>SKIP</strong>, <strong>HEAD?</strong>, <strong>TAIL?</strong>, <strong>PAST?</strong>, <strong>CLEAR</strong>.</p>
</li>
</ul>
<p><em>This is awfully saturated, and it seems nothing is off the table for what this abstract idea of a PORT! might want to react to.</em></p>
<p>So how do you get at these object fields safely?  How do you PICK the SPEC field?  How do you POKE the AWAKE function?</p>
<h2><a name="p-5432-more-problems-port-and-11-with-stream-correspondence-2" class="anchor" href="https://forum.rebol.info#p-5432-more-problems-port-and-11-with-stream-correspondence-2"></a>More Problems: PORT and 1:1 with STREAM Correspondence</h2>
<p>When you're working with a TCP connection, you supposedly think of that as a bidirectional PORT!.  You don't open a connection for your input, and one for your output--you read and write to the same port.</p>
<p>If so, why is there <strong>system.ports.input</strong> and <strong>system.ports.output</strong> instead of <strong>system.ports.stdio</strong>?</p>
<p>One technical good reason there is that there are actually two stdio output streams: the stdout and the stderr for error messages.  Often these are directed to the same place, but not always.</p>
<p>So here you see that maybe something like stdio would like to be an object aggregating three data streams: 1 for input and two for output.</p>
<h2><a name="p-5432-difference-between-ports-and-user-defined-datatypes-3" class="anchor" href="https://forum.rebol.info#p-5432-difference-between-ports-and-user-defined-datatypes-3"></a>Difference Between Ports and User Defined Datatypes?</h2>
<p>It doesn't really seem like anything is off the table for what you can override on a PORT!.</p>
<p>Can you define what it means to ADD to a PORT!?  If not, why not?</p>
<p>What about path selection on a PORT! (or today's field access via TUPLE!, another option).</p>
<p>Once you get into this "anything goes" attitude you are essentially talking about an implementation for user-defined datatypes.</p>
<p>This points out an important aspect of the articulation of any design: <strong>You need to be able to say what it isn't, or there's no meaningful definition of what it is.</strong></p>
<h2><a name="p-5432-streamingiterating-is-narrower-and-needs-a-protocol-4" class="anchor" href="https://forum.rebol.info#p-5432-streamingiterating-is-narrower-and-needs-a-protocol-4"></a>Streaming/Iterating Is Narrower And Needs a Protocol</h2>
<p>While PORT! is slippery, I'm going to be attacking just the more basic questions of streaming and iteration.</p>
<p>We want to be able to say <code>parse some-100-mb-file ["FOO" &lt;stop&gt;]</code> and not have to read 100 megabytes just to know if it started with "FOO"</p>
<p>And we want to be able to do that with something like FOR-EACH as well...</p>
<pre><code> for-each [x y z] some-100-mb-file [
     all [x = #f, y = #o, z = #o] then [break]
 ]
</code></pre>
<p>That shouldn't need to have all 100 megabytes in memory.  And a generic solution to this which puts iteration in the mix should allow for streams to be piped and connected to each other to do filtering, encryption/decryption, compression, etc...</p>
<p>So I'm going to focus on the narrower question of how to do that, vs. the muddle of "What is a PORT!", at this time.  Wishful thinking isn't going to solve that problem, but rational adaptation of the methods used by other languages that do this might.</p>
          <p><a href="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689/1</link>
        <pubDate>Fri, 27 Aug 2021 07:50:35 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1689-1</guid>
        <source url="https://forum.rebol.info/t/semantics-of-port-s-vs-streams-vs-iterators/1689.rss">Semantics of PORT!s vs. Streams vs. Iterators</source>
      </item>
  </channel>
</rss>
