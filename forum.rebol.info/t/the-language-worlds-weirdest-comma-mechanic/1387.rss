<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
    <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387</link>
    <description>All right, I went and wrote it:

&gt; **Though sounding a bit like a broken record at this point, please add tests as you can think of them.**
&gt;
&gt; [%comma.test.reb](https://github.com/metaeducation/ren-c/blob/master/tests/datatypes/comma.test.reb)
&gt;
&gt; Due to having to juggle about a million design decisions at once that have actual deep difficult ramifications, I kind of have to draw the line after I feel I&#39;ve gotten past any obvious disproofs of an idea...so the tests only go so far in the initial commit.  Unfortunately that&#39;s about as far as they tend to stay until bugs are found.

    &gt;&gt; all [1 + 2, 3 + 4]
    == 7

    &gt;&gt; all [1 +, 2 3 + 4]
    ** Script Error: + is missing its value2 argument

    &gt;&gt; all [(1 +) 2 3 + 4]  ; error parity
    ** Script Error: + is missing its value2 argument

I also added the feature to UPARSE and made a patch of the feature into PARSE3 (it is difficult with how parse3 is written to do a &quot;good&quot; job of this):

    &gt;&gt; parse &quot;aaabbb&quot; [some &quot;a&quot; some &quot;b&quot;]  ; you can still do this
    == &quot;aaabbb&quot;

    &gt;&gt; parse &quot;aaabbb&quot; [[some &quot;a&quot;] [some &quot;b&quot;]]  ; could have always done this
    == &quot;aaabbb&quot;

    &gt;&gt; parse &quot;aaabbb&quot; [some &quot;a&quot;, some &quot;b&quot;]  ; this is new!
    == &quot;aaabbb&quot;

    &gt;&gt; parse &quot;aaabbb&quot; [some, &quot;a&quot; some &quot;b&quot;]  ; catching misunderstandings!
    ** Script Error: expression barrier hit while fulfilling argument

Beyond the expression barrier feature--which I have always believed to be important--having comma available in dialects is powerful.

Note that I left in support for 1,1 being a synonym for 1.0 based on the idea of space significance.  This means you&#39;ll have less ability to copy/paste data from other contexts directly, like (1,2,3) ... but it&#39;s not clear how much gain there is from allowing that when so many other things won&#39;t work (especially in plan -4, where `foo(a, b c)` isn&#39;t loadable either).

At least for the moment, this breaks the idea of supporting commas in URL!s directly.  While it might be possible to say that **`http://a,b`** is legal but `http://a,` is not, how such things are scanned needs to be redesigned so there&#39;s not so much sporadic code all over the place.  I&#39;m open to the idea...just not assuming it as a foregone conclusion.

## I Actually Like It

Many years ago when expression barriers were first being cooked up, I had been mostly swayed by the &quot;commas and periods are too hard to tell apart&quot; idea...to say that the only purpose they should have in the language would be as synonyms.

If this idea is taken to extremes, we would also say that the number **1** and lowercase **L** and the uppercase **i** and the vertical bar all have to be the same, due to **I1l|**. being too hard to differentiate.  *(Though fonts and syntax highlighting choices can go a long way in that.)*

Today my thinking is that you don&#39;t necessarily control this kind of thing from the language level.  You give people choices, and they write their code as it feels good to them.  If they&#39;ve got a certain mix of data and don&#39;t like comma with it, they should use another arrangement.  Put things in groups, or on newlines, or whatever.

I&#39;ll point out you have the option to put an entire expression in a group, or just the last thing and keep the comma.  It&#39;s up to you.  So taking the maybe-ugly combo of blank-tailed TUPLE! and comma, you could go with your taste:

    1 + a., 2 + 3
    1 + (a.), 2 + 3
    (1 + a.) 2 + 3
    (1 + a.) (2 + 3)
    [
        1 + a.
        2 + 3
    ]

It&#39;s something people can ignore entirely if they want.  Don&#39;t use it if you don&#39;t like it!</description>
    
    <lastBuildDate>Sat, 24 Aug 2024 04:26:15 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>2 posts were split to a new topic: <a href="https://forum.rebol.info/t/what-does-comma-evaluate-to-if-it-evaluates/2212">What Does COMMA! Evaluate To (If It Evaluates?)</a></p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/6</link>
        <pubDate>Sat, 24 Aug 2024 04:43:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-6</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>So it was interesting (though not entirely surprising) to find that Carl had proposed COMMA! as an evaluation terminator in 2007:</p>
<p><strong><a href="http://www.rebol.net/r3blogs/0086.html">http://www.rebol.net/r3blogs/0086.html - Explicit EvaluationTerminator</a></strong></p>
<p>He said <em>"I've been thinking about this for more than 8 years, and I've never reached a positive conclusion. (Lol)"</em></p>
<p>It's the same syntax concept.  But there's a lot of issues to sort out besides the syntax once you get into it, that he would have found if he tried it.</p>
<p>He might have said a COMMA! just evaluates to UNSET!.  Well that's not great if you're trying to use it in something like an ANY or ALL, because either they error on the unset (which makes it clearly bad) or unsets are truthy and that could be disruptive (think NONE-OF [a, b, c]).</p>
<p>So COMMA! cannot evaluate to a "normal" product.  He'd have to invent VOID, and trying to do that without antiforms is going to have all kinds of issues.</p>
<p>I imagine he'd have probably tried to implement transparency by having the evaluator skip them like they're not there.  That raises it's own question.  For instance: where should your step be after a DO/NEXT of <strong><code>[x: 1 + 2, y: 3 + 4]</code></strong>?</p>
<ul>
<li>
<p>If the evaluator consumes the comma, then you would be at <strong><code>[y: 3 + 4]</code></strong> and never know it was there.  Should the user of the DO/NEXT not be able to react to commas due to them being explicitly ignored and consumed at the end of expressions?</p>
</li>
<li>
<p>Or should a step leave you at <strong><code>[, y: 3 + 4]</code></strong>?  If it does that, then what if you're looking for SET-WORD!s and miss it, because the next evaluator step takes you to the end at <strong><code>[]</code></strong>?</p>
</li>
</ul>
<p>It's my belief that COMMA! needs to have its own evaluator step, and its own evaluation product.  And I believe that product must not be storable in SET-WORD!, e.g. <strong><code>x:,</code></strong> must error.  Also I think commas are useful for an expression out of parts, like <strong><code>append code [a + b,]</code></strong>.  You might have a lot of expressions like that you're appending together but then the terminal comma needs to vanish (like a NIHIL) so you still get the overall product.  But it can't be NIHIL, because... okay, going too deep here.</p>
<p>Anyway my point is just: Having the syntax would have only been the beginning...and there would have been no isotopic theory to help.</p>
<h2><a name="p-7370-but-interesting-comments-on-the-bloghttpwwwrebolnetcgi-binr3blogrview0086comments-1" class="anchor" href="https://forum.rebol.info#p-7370-but-interesting-comments-on-the-bloghttpwwwrebolnetcgi-binr3blogrview0086comments-1"></a>But Interesting <a href="http://www.rebol.net/cgi-bin/r3blog.r?view=0086#comments">Comments On The Blog</a>!</h2>
<blockquote>
<p><strong>Edoc</strong><br>
15-Apr-2007 8:38:53<br>
It doesn't seem like a big benefit, unless it opens up possibilities to some breakthrough feature (e.g., rebol-dialect --&gt; rebcode --&gt; scheme --&gt; compiled C).</p>
</blockquote>
<p>13 years later... <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
<aside class="quote no-group" data-username="BlackATTR" data-post="2" data-topic="1387">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/blackattr/48/204_2.png" class="avatar"> BlackATTR:</div>
<blockquote>
<p>I'm in love with COMMA! in parse expressions. <img src="https://forum.rebol.info/images/emoji/twitter/heartpulse.png?v=12" title=":heartpulse:" class="emoji" alt=":heartpulse:" loading="lazy" width="20" height="20"></p>
</blockquote>
</aside>
<p>Oldes speaks up in support of the commas, while most people don't want them, making another rare case of us agreeing on something.</p>
<p>Gregg is against the idea.</p>
<p>pekr Suggests colon...</p>
<pre><code>   new-face: make any [
       all [parent : object? new : new] 
       all [parent :  word? new  : get-style new] 
       vid-face
   ] any [all [parent : block? new : new] [parent: 'panel]] 
</code></pre>
<p>It doesn't look that bad there, but he's cherry-picked an example where the stuff he's separating has no SET-WORD!s or GET-WORD!s.</p>
<p>More interestingly though, he says:</p>
<blockquote>
<p>Looks quite elegant, similar to | (which would be imo best, if it would not implicate parser's OR).</p>
</blockquote>
<p>I remember when I tried to use | and I would swear he was one of the people who was against it.  I don't think | had anyone who even said the idea had any merit.  Maybe I'm misremembering.</p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/8</link>
        <pubDate>Sat, 24 Aug 2024 04:26:15 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-8</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1387">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<pre><code>&gt;&gt; all [1 +, 2 3 + 4]
** Script Error: + is missing its value2 argument
</code></pre>
</blockquote>
</aside>
<p>One thought I had was that the COMMA! might represent a <em>pause</em> instead of a <em>barrier</em> when it came to enfix.  This could make it a precedence manipulator:</p>
<pre><code>&gt;&gt; add 1 2 * 3
== 7

&gt;&gt; add 1 2, * 3
== 9  ; as if you'd written `(add 1 2) * 3`
</code></pre>
<p>The current thought is it acts more like you've written <code>(add 1 2) (* 3)</code>.</p>
<p>We probably want such an operator, but I don't think comma is it.  The barrier behavior seems more reasonable and uniform, and lets you throw commas into lists of generated expressions and know that you're keeping them separate.  (well, modulo hard quoting)</p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/5</link>
        <pubDate>Sat, 28 Nov 2020 16:30:22 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-5</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1387">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>At least for the moment, this breaks the idea of supporting commas in URL!s directly. While it might be possible to say that <strong><code>http://a,b</code></strong> is legal but <code>http://a</code></p>
</blockquote>
</aside>
<p>This may be a stretch, but I wonder if there's an argument here for copying a MarkDown convention for an alternative way to express URLs: allowing <code>&lt;&gt;</code> as delimiters. It would only apply to URLs that contain <code>://</code> so as to distinguish from tags with namespaces.</p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/4</link>
        <pubDate>Tue, 24 Nov 2020 16:32:56 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-4</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I had a <a href="https://web.archive.org/web/20210418140414/https://rg.on-arran.com/wiki/show/Commas">similar thoughts</a> way back:</p>
<blockquote>
<p>In most areas, the comma has been a reserved character in REBOL - set aside for some mysterious potential future use. My suggestion for how to utilise the comma is based on usage in other languages - some similar in appearance to REBOL (like CSS), some not (Ruby, JavaScript): Introduce a comma! datatype. It'd be an any-word! value and could be most useful in dialect creation:</p>
<pre><code>1, word, here =&gt; [integer! comma! word! comma! word!]
</code></pre>
<p>In Ruby, commas are used to separate values in Arrays and pairs in Hashes, but are also used to bind both types where the bounding braces are omitted enabling Ruby 'dialects'</p>
<pre><code>read :url =&gt; 'some url', :method =&gt; 'get'
</code></pre>
<p>In REBOL dialects, the implied block could be a similarly employed technique to aid readability.</p>
<pre><code>pattern red, 0.0.255, green 1x2, 5, spaced
</code></pre>
<p>In CSS, commas are used to bind and separate:</p>
<pre><code>font: bold italic 1.2em/1.4 'Georgia','Times New Roman',serif;
background: rgba(255,0,0,0.4) url('top image') repeat-x center top, url('bottom image') repeat-x center bottom;
</code></pre>
<p>Such freewheeling, inconsistent use of commas can still be intuitive, but not with any hard rules about what their syntactic role is, rather as a value in their own right with their own semantic presence.</p>
<pre><code>pair 1.5 3, 7 pi, 1.7 infinity
</code></pre>
</blockquote>
<p>I had originally wanted to copy the 'implied block' model of CSS and Ruby, but am now more or less on the same page as your proposal here.</p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/3</link>
        <pubDate>Tue, 24 Nov 2020 16:27:17 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-3</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[BlackATTR]]></dc:creator>
        <description><![CDATA[
            <p>Wow, I'm in love with COMMA! in parse expressions. <img src="https://forum.rebol.info/images/emoji/twitter/heartpulse.png?v=9" title=":heartpulse:" class="emoji" alt=":heartpulse:"></p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/2</link>
        <pubDate>Fri, 06 Nov 2020 19:10:09 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-2</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
      <item>
        <title>The Language World&#39;s Weirdest COMMA! Mechanic</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>All right, I went and wrote it:</p>
<blockquote>
<p><strong>Though sounding a bit like a broken record at this point, please add tests as you can think of them.</strong></p>
<p><a href="https://github.com/metaeducation/ren-c/blob/master/tests/datatypes/comma.test.reb">%comma.test.reb</a></p>
<p>Due to having to juggle about a million design decisions at once that have actual deep difficult ramifications, I kind of have to draw the line after I feel I've gotten past any obvious disproofs of an idea...so the tests only go so far in the initial commit.  Unfortunately that's about as far as they tend to stay until bugs are found.</p>
</blockquote>
<pre><code>&gt;&gt; all [1 + 2, 3 + 4]
== 7

&gt;&gt; all [1 +, 2 3 + 4]
** Script Error: + is missing its value2 argument

&gt;&gt; all [(1 +) 2 3 + 4]  ; error parity
** Script Error: + is missing its value2 argument
</code></pre>
<p>I also added the feature to UPARSE and made a patch of the feature into PARSE3 (it is difficult with how parse3 is written to do a "good" job of this):</p>
<pre><code>&gt;&gt; parse "aaabbb" [some "a" some "b"]  ; you can still do this
== "aaabbb"

&gt;&gt; parse "aaabbb" [[some "a"] [some "b"]]  ; could have always done this
== "aaabbb"

&gt;&gt; parse "aaabbb" [some "a", some "b"]  ; this is new!
== "aaabbb"

&gt;&gt; parse "aaabbb" [some, "a" some "b"]  ; catching misunderstandings!
** Script Error: expression barrier hit while fulfilling argument
</code></pre>
<p>Beyond the expression barrier feature--which I have always believed to be important--having comma available in dialects is powerful.</p>
<p>Note that I left in support for 1,1 being a synonym for 1.0 based on the idea of space significance.  This means you'll have less ability to copy/paste data from other contexts directly, like (1,2,3) ... but it's not clear how much gain there is from allowing that when so many other things won't work (especially in plan -4, where <code>foo(a, b c)</code> isn't loadable either).</p>
<p>At least for the moment, this breaks the idea of supporting commas in URL!s directly.  While it might be possible to say that <strong><code>http://a,b</code></strong> is legal but <code>http://a,</code> is not, how such things are scanned needs to be redesigned so there's not so much sporadic code all over the place.  I'm open to the idea...just not assuming it as a foregone conclusion.</p>
<h2><a name="p-4251-i-actually-like-it-1" class="anchor" href="https://forum.rebol.info#p-4251-i-actually-like-it-1"></a>I Actually Like It</h2>
<p>Many years ago when expression barriers were first being cooked up, I had been mostly swayed by the "commas and periods are too hard to tell apart" idea...to say that the only purpose they should have in the language would be as synonyms.</p>
<p>If this idea is taken to extremes, we would also say that the number <strong>1</strong> and lowercase <strong>L</strong> and the uppercase <strong>i</strong> and the vertical bar all have to be the same, due to <strong>I1l|</strong>. being too hard to differentiate.  <em>(Though fonts and syntax highlighting choices can go a long way in that.)</em></p>
<p>Today my thinking is that you don't necessarily control this kind of thing from the language level.  You give people choices, and they write their code as it feels good to them.  If they've got a certain mix of data and don't like comma with it, they should use another arrangement.  Put things in groups, or on newlines, or whatever.</p>
<p>I'll point out you have the option to put an entire expression in a group, or just the last thing and keep the comma.  It's up to you.  So taking the maybe-ugly combo of blank-tailed TUPLE! and comma, you could go with your taste:</p>
<pre><code>1 + a., 2 + 3
1 + (a.), 2 + 3
(1 + a.) 2 + 3
(1 + a.) (2 + 3)
[
    1 + a.
    2 + 3
]
</code></pre>
<p>It's something people can ignore entirely if they want.  Don't use it if you don't like it!</p>
          <p><a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387/1</link>
        <pubDate>Fri, 06 Nov 2020 16:11:27 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1387-1</guid>
        <source url="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387.rss">The Language World&#39;s Weirdest COMMA! Mechanic</source>
      </item>
  </channel>
</rss>
