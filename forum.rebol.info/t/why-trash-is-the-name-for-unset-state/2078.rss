<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why &quot;TRASH&quot; Is The Name For &quot;Unset State&quot;</title>
    <link>https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078</link>
    <description>As isotope design became refined, I became very pleased with the choice for what unset variables hold being the *antiform blank*.

    &gt;&gt; x: ~
    == ~  ; anti

    &gt;&gt; unset? &#39;x
    == ~true~  ; anti

The alternative of using the antiform word! **`~unset~`** was available.  But antiform blanks are a particularly pleasing choice, due to their succinct representation...which helps assigned variables stand out better in lists of mostly-unset variables.  And it&#39;s hard to think of what antiform blanks would mean if they were *not* the unset state!

Also, if ~unset~ were used then people would probably expect **unset? ~unset~** to be true.  But I&#39;ve held pretty strongly to my general terminology:

&gt; &quot;There is no such thing as an &#39;unset value&#39;.  But *variables* can be considered unset...when they hold a value that is an antiform blank.&quot;

I&#39;m pleased with this and have *almost* no complaints.

The problem is that ANTIFORM-BLANK is a mouthful.  It needed a short name. 

## JavaScript Don&#39;t Care

JavaScript went with the idea that unset variables hold &quot;undefined&quot;, and you can test for it using the typeof operator to subvert the error that is raised on access for variables that are never declared (what we might think of as unbound):

    &gt;&gt; typeof asdf == &#39;undefined&#39;
    &lt;- true

But if you define a variable, then it will retrieve the undefined state without error:

    &gt;&gt; let jkl
    &lt;- undefined

    &gt;&gt; jkl
    &lt;- undefined

Whatever.  Point is, they don&#39;t have any crisis of conscience on whether &quot;variables are undefined, not values&quot;.  They just go with it, as historical Redbol did with UNSET!.

But I don&#39;t like it.

## TRASH Came To Seem The Best Option

&quot;trash&quot; isn&#39;t a new idea--[I suggested it way back when the unset state was being changed away from being called VOID](https://forum.rebol.info/t/the-naming-of-null-vs-the-meaningless-value/1427/2).

Inside the codebase I&#39;d been using the term &quot;trash&quot; to mean corrupting memory, e.g. setting pointers to 0xDECAFBAD so they&#39;ll generate errors if accessed in the debug build.

The concept of putting &quot;trash&quot; in a variable to disrupt accesses to it is kind of similar.

    &gt;&gt; var: ~
    == ~  ; anti

    &gt;&gt; var
    ** Error: var is ~ antiform

*&quot;Unset variables hold trash&quot;* comes across cohesively.

The more I thought about it, the more I liked it... because it kind of takes things a &quot;notch up&quot; from null.  What&#39;s more ornery than a null?  Something that&#39;s actually &quot;garbage&quot;.  In this way the pejorative sound of trash is actually kind of consistent with &quot;hey, you can&#39;t reference that variable from a word because it&#39;s trash&quot;.

The initial roadblock I had was how jarring it might seem to people reading source for something that returns trash...which is the default prescribed return value when you don&#39;t have any specific idea:

    foo: func [
        return: [trash?]  ; weird!
        bar [block!]
    ][
        append bar [a b c]
        return trash  ; also... weird!
    ]

But there&#39;s a reasonable answer in the modern type checking world for these cases which is semiotically consistent... use a tilde.  The type spec accepts it (and assumes you mean an isotope), and RETURN will accept it (where the evaluator will turn the quasiform into an antiform):

    foo: func [
        return: [~]
        bar [block!]
    ][
        append bar [a b c]
        return ~
    ]

As it happens, the default return result from functions is trash.  I&#39;ve also proposed it might be good to make the assumption that a function without a RETURN: spec is a procedure with no return result (as opposed to an unconstrained result).

    foo: func [
        bar [block!]
    ][
        append bar [a b c]
    ]

You can still say **`return ~`** or **`return trash`** if you want in such functions if you want to return early.

## In Short: It&#39;s A Weird Name, But We Don&#39;t Have To Use It Often</description>
    
    <lastBuildDate>Tue, 12 Dec 2023 23:34:03 +0000</lastBuildDate>
    <category>Naming</category>
    <atom:link href="https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why &quot;TRASH&quot; Is The Name For &quot;Unset State&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h2>
<a name="bards-follow-up-opinion-on-trash-1" class="anchor" href="https://forum.rebol.info#bards-follow-up-opinion-on-trash-1"></a>Bard's Follow-Up Opinion On "Trash"</h2>
<blockquote>
<p>If you hadn't ruled out "trash" as a name for the unset state, I likely wouldn't have suggested it in my initial response. While it's a technically accurate term in the context of programming, it does have negative connotations that might not be desirable for everyday use in your language.</p>
<p>Here are some reasons why I wouldn't have recommended "trash" initially:</p>
<ul>
<li>
<strong>Negative connotation:</strong> The word "trash" implies something unwanted, useless, or even harmful. This might not be the best way to describe a state in your language that is perfectly valid and intentional.</li>
<li>
<strong>Inconsistent with other terms:</strong> The term "trash" doesn't seem to align with the other descriptive, concise, or metaphorical options presented. It might create a confusing inconsistency in the naming scheme of your language.</li>
<li>
<strong>Potential confusion with runtime errors:</strong> Since you mentioned using "trashing" for memory corruption in your implementation, there could be confusion between the two terms for users unfamiliar with the internal workings of the interpreter.</li>
</ul>
<p>However, after understanding your explanation for preferring "trash," I do see its potential appeal. It accurately represents the behavior of the unset state in throwing an error when referenced. Additionally, its connection to your implementation details adds a layer of technical elegance.</p>
<p>Ultimately, the decision of naming the unset state is yours. Both "trash" and the other suggestions have their pros and cons. Weighing the different factors, such as clarity, uniqueness, and aesthetics, will help you choose the name that best fits your language and its users.</p>
</blockquote>
<p>When I told it about the fact that tildes could appear in more contexts (like <strong>return ~</strong> vs. <strong>return trash</strong>) so the potential jarringness of the name need not affect new users:</p>
<blockquote>
<p>Interesting approach to handling the naming of the "trash" state in your language. Making it implicit through the tilde symbol <code>~</code> and testing for its presence through terms like "Unset" or "Undefined" simplifies the interface for new users. This allows them to utilize the concept without getting bogged down by the specific terminology behind it.</p>
<p>However, having a verbal name like "trash" still serves a purpose for advanced users and for discussions about the language itself. It provides a concise and clear way to refer to the concept, especially when contrasting it with other states like "null" or "void."</p>
<p>Overall, your approach seems to strike a good balance between simplicity and clarity. By using the tilde symbol for everyday usage and reserving the "trash" name for more specific contexts, you cater to both novice and experienced users of your language.</p>
</blockquote>
<h2>
<a name="chatgpts-follow-up-opinion-on-trash-2" class="anchor" href="https://forum.rebol.info#chatgpts-follow-up-opinion-on-trash-2"></a>ChatGPT's Follow-Up Opinion On "Trash"</h2>
<blockquote>
<p>I understand the reasoning behind considering "trash," especially given its contextual link to the way your interpreter handles memory corruption. Without the context you provided earlier, "trash" could indeed be a viable option among other suggestions. It succinctly communicates an unset state without explicitly implying corruption, especially if it aligns well with the technical aspects of your language implementation.</p>
<p>If you were to ask without ruling out "trash," I might have suggested it as a possibility considering its relevance to memory management and technical contexts, but I would have also offered other options to ensure a range of choices to fit your specific needs.</p>
<p>Names for concepts in programming languages often carry different connotations and interpretations, and it's crucial to find a term that best fits both the technical aspect and the conceptual clarity within the context of your language. If "trash" aligns well with your language's technical mechanisms and communicates the intended meaning clearly, it might indeed be a fitting choice.</p>
</blockquote>
<p>When I told it about the fact that tildes could appear in more contexts (like <strong>return ~</strong> vs. <strong>return trash</strong>) so the potential jarringness of the name need not affect new users:</p>
<blockquote>
<p>That's a clever approach! Using a symbol like "~" to represent the concept of trash and allowing it to be used without explicitly mentioning its name streamlines its usage. It allows newcomers to interact with the language without needing to worry excessively about the specific term for that state. Then, when verbalization or explicit identification becomes necessary, having a name like "trash" readily available provides a clear way to discuss and refer to that state.</p>
<p>This strategy offers a balance between simplicity in usage and clarity in communication. It ensures that users can work with the language comfortably while also having a recognizable term available for discussions or specific contexts where naming becomes essential. It's a smart way to handle such nuances within the language's design.</p>
</blockquote>
<p>I thought to ask ChatGPT about NIHIL also, and I liked how it seemed to "get" me <img src="https://forum.rebol.info/images/emoji/twitter/astonished.png?v=12" title=":astonished:" class="emoji" alt=":astonished:" loading="lazy" width="20" height="20"></p>
<blockquote>
<p>The distinction you're making between various degrees of absence or nothingness within your language is intriguing. Naming concepts that are distinct yet related can indeed be quite challenging. "Nihil" is an interesting term, but as you mentioned, it might not immediately convey the precise nature of this extreme absence of value.</p>
<p>Given your language's nuanced hierarchy of null, void, trash, and now this even-more-extreme absence, perhaps a term that denotes an absolute lack of existence or vanishing might work...</p>
</blockquote>
          <p><a href="https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078/2</link>
        <pubDate>Tue, 12 Dec 2023 15:48:24 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2078-2</guid>
        <source url="https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078.rss">Why &quot;TRASH&quot; Is The Name For &quot;Unset State&quot;</source>
      </item>
      <item>
        <title>Why &quot;TRASH&quot; Is The Name For &quot;Unset State&quot;</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>As isotope design became refined, I became very pleased with the choice for what unset variables hold being the <em>antiform blank</em>.</p>
<pre><code>&gt;&gt; x: ~
== ~  ; anti

&gt;&gt; unset? 'x
== ~true~  ; anti
</code></pre>
<p>The alternative of using the antiform word! <strong><code>~unset~</code></strong> was available.  But antiform blanks are a particularly pleasing choice, due to their succinct representation...which helps assigned variables stand out better in lists of mostly-unset variables.  And it's hard to think of what antiform blanks would mean if they were <em>not</em> the unset state!</p>
<p>Also, if ~unset~ were used then people would probably expect <strong>unset? ~unset~</strong> to be true.  But I've held pretty strongly to my general terminology:</p>
<blockquote>
<p>"There is no such thing as an 'unset value'.  But <em>variables</em> can be considered unset...when they hold a value that is an antiform blank."</p>
</blockquote>
<p>I'm pleased with this and have <em>almost</em> no complaints.</p>
<p>The problem is that ANTIFORM-BLANK is a mouthful.  It needed a short name.</p>
<h2>
<a name="javascript-dont-care-1" class="anchor" href="https://forum.rebol.info#javascript-dont-care-1"></a>JavaScript Don't Care</h2>
<p>JavaScript went with the idea that unset variables hold "undefined", and you can test for it using the typeof operator to subvert the error that is raised on access for variables that are never declared (what we might think of as unbound):</p>
<pre><code>&gt;&gt; typeof asdf == 'undefined'
&lt;- true
</code></pre>
<p>But if you define a variable, then it will retrieve the undefined state without error:</p>
<pre><code>&gt;&gt; let jkl
&lt;- undefined

&gt;&gt; jkl
&lt;- undefined
</code></pre>
<p>Whatever.  Point is, they don't have any crisis of conscience on whether "variables are undefined, not values".  They just go with it, as historical Redbol did with UNSET!.</p>
<p>But I don't like it.</p>
<h2>
<a name="trash-came-to-seem-the-best-option-2" class="anchor" href="https://forum.rebol.info#trash-came-to-seem-the-best-option-2"></a>TRASH Came To Seem The Best Option</h2>
<p>"trash" isn't a new idea--<a href="https://forum.rebol.info/t/the-naming-of-null-vs-the-meaningless-value/1427/2">I suggested it way back when the unset state was being changed away from being called VOID</a>.</p>
<p>Inside the codebase I'd been using the term "trash" to mean corrupting memory, e.g. setting pointers to 0xDECAFBAD so they'll generate errors if accessed in the debug build.</p>
<p>The concept of putting "trash" in a variable to disrupt accesses to it is kind of similar.</p>
<pre><code>&gt;&gt; var: ~
== ~  ; anti

&gt;&gt; var
** Error: var is ~ antiform
</code></pre>
<p><em>"Unset variables hold trash"</em> comes across cohesively.</p>
<p>The more I thought about it, the more I liked it... because it kind of takes things a "notch up" from null.  What's more ornery than a null?  Something that's actually "garbage".  In this way the pejorative sound of trash is actually kind of consistent with "hey, you can't reference that variable from a word because it's trash".</p>
<p>The initial roadblock I had was how jarring it might seem to people reading source for something that returns trash...which is the default prescribed return value when you don't have any specific idea:</p>
<pre><code>foo: func [
    return: [trash?]  ; weird!
    bar [block!]
][
    append bar [a b c]
    return trash  ; also... weird!
]
</code></pre>
<p>But there's a reasonable answer in the modern type checking world for these cases which is semiotically consistent... use a tilde.  The type spec accepts it (and assumes you mean an isotope), and RETURN will accept it (where the evaluator will turn the quasiform into an antiform):</p>
<pre><code>foo: func [
    return: [~]
    bar [block!]
][
    append bar [a b c]
    return ~
]
</code></pre>
<p>As it happens, the default return result from functions is trash.  I've also proposed it might be good to make the assumption that a function without a RETURN: spec is a procedure with no return result (as opposed to an unconstrained result).</p>
<pre><code>foo: func [
    bar [block!]
][
    append bar [a b c]
]
</code></pre>
<p>You can still say <strong><code>return ~</code></strong> or <strong><code>return trash</code></strong> if you want in such functions if you want to return early.</p>
<h2>
<a name="in-short-its-a-weird-name-but-we-dont-have-to-use-it-often-3" class="anchor" href="https://forum.rebol.info#in-short-its-a-weird-name-but-we-dont-have-to-use-it-often-3"></a>In Short: It's A Weird Name, But We Don't Have To Use It Often</h2>
          <p><a href="https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078/1</link>
        <pubDate>Tue, 12 Dec 2023 15:38:50 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2078-1</guid>
        <source url="https://forum.rebol.info/t/why-trash-is-the-name-for-unset-state/2078.rss">Why &quot;TRASH&quot; Is The Name For &quot;Unset State&quot;</source>
      </item>
  </channel>
</rss>
