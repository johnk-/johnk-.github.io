<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A lingering feeling: Rebol may not want a LOGIC! type at all</title>
    <link>https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303</link>
    <description>There has been a [&quot;no keywords&quot; mantra](https://forum.rebol.info/t/what-does-rebol-has-no-keywords-really-mean/2039) to the Rebol language, which has driven the decision that **true** and **false** should not be anything other than WORD!. 

Instead, literals expressed historically as `#[true]` and `#[false]` were defined, and then these definitions provided:

    true: on: yes: #[true]
    false: off: no: #[false]

The unpalatability of the literal forms is means Rebol2/R3-Alpha/Red choose to render the literals as if they were the words.  Hence:

    rebol2&gt;&gt; type? first [true]
    == word!

    rebol2&gt;&gt; type? true
    == logic!

    rebol2&gt;&gt; true
    == true  ; !!! very deceptive...

    rebol2&gt;&gt; on
    == true  ; !!! also very deceptive, and lossy to boot!

    rebol2&gt;&gt; form true
    == &quot;true&quot;  ; well, whatever FORM is, it&#39;s lossy for strings, so...

    rebol2&gt;&gt; mold yes
    == &quot;true&quot;  ; !!! this strikes me as bad.

    r3-alpha&gt;&gt; mold/all yes
    == &quot;#[true]&quot;  ; in R3-Alpha, not Red which is &quot;true&quot;

Without delving into the &quot;what is MOLD vs MOLD/ALL&quot; or &quot;what is FORMing, anyway&quot; discussion, I&#39;ll just say this feels like another one of those design errors that needs a better solution.

In trying to square this circle, I&#39;ve had a nagging feeling in my mind that LOGIC! as a primitive type in Rebol may be just a bad idea in general.  Rebol is a messaging language, so what if in my message for calendar appointments I have a ternary set of words like &quot;yes / no / maybe&quot;...if I want to capture that then why is my problem so different if it&#39;s just &quot;yes / no&quot; or &quot;true / false&quot;?

Don&#39;t confuse me saying I have this lingering feeling with saying I have a solution.  But I thought maybe a thread to brainstorm about it--observations about it made over time, might be useful.</description>
    
    <lastBuildDate>Wed, 04 Sep 2024 20:46:03 +0000</lastBuildDate>
    <category>Datatypes</category>
    <atom:link href="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A lingering feeling: Rebol may not want a LOGIC! type at all</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>A post was split to a new topic: <a href="https://forum.rebol.info/t/what-does-rebol-has-no-keywords-really-mean/2039">What Does "Rebol Has No Keywords" Really Mean?</a></p>
          <p><a href="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/3</link>
        <pubDate>Wed, 28 Jun 2023 22:15:08 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-303-3</guid>
        <source url="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303.rss">A lingering feeling: Rebol may not want a LOGIC! type at all</source>
      </item>
      <item>
        <title>A lingering feeling: Rebol may not want a LOGIC! type at all</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>Have mentioned before that using <code>0</code> and <code>1</code> in some literal form of <strong>true/false</strong> might sidestep the keyword issue and at least transcends English:</p>
<pre><code class="lang-auto">#(0)
#(1)
</code></pre>
          <p><a href="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/6</link>
        <pubDate>Tue, 19 Sep 2017 23:17:31 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-303-6</guid>
        <source url="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303.rss">A lingering feeling: Rebol may not want a LOGIC! type at all</source>
      </item>
      <item>
        <title>A lingering feeling: Rebol may not want a LOGIC! type at all</title>
        <dc:creator><![CDATA[rgchris]]></dc:creator>
        <description><![CDATA[
            <p>I'd say the main argument for retaining <strong>logic!</strong> is that it is a way of describing something that isn't really covered in any other way. Yes—the language may flow without them, but as with a few types in Rebol, they're not always there for language flow, rather there for semantic correctness.</p>
<p>Unfortunately a literal type will never be as concise as the words <strong>true</strong> and <strong>false</strong>—it would though be desirable to have some way to distinguish words from values (see also datatypes) that isn't as ugly as <strong>#[true]</strong> and <strong>#[false]</strong>.</p>
          <p><a href="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/5</link>
        <pubDate>Tue, 19 Sep 2017 16:13:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-303-5</guid>
        <source url="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303.rss">A lingering feeling: Rebol may not want a LOGIC! type at all</source>
      </item>
      <item>
        <title>A lingering feeling: Rebol may not want a LOGIC! type at all</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>To sum up a few points:</p>
<ul>
<li>
<p>Just reminding people of this development: <code>true? foo</code> and <code>false? bar</code> in their historical definitions were bad mojo as they didn't mean the same things as <code>foo = #[true]</code> or <code>bar = #[false]</code>.  Wanting to avoid bad didactic ideas, this gave rise to <code>truthy?</code> and <code>falsey?</code> as a compromise.</p>
</li>
<li>
<p>I've talked about how I think <strong>if 0 [print "this is truthy and prints even though it's zero"]</strong> vs. <strong>if null [print "this is falsey and won't print"]</strong> seems a <em>good</em> thing, not bad.  It makes it easier to pick "something" from "nothingness", which is what things like ALL and ANY seem most useful for.</p>
</li>
<li>
<p>People are presumably quite happy with <code>if 'true [print "the WORD! true is truthy and this prints"]</code> along with <code>if 'false [print "the WORD! false is truthy and this prints"]</code>.</p>
</li>
</ul>
<p><strong>Radical Thought Experiment</strong></p>
<p>I keep having an eerie idea to get rid of #[true] and #[false] but bring back <strong>true?</strong> and <strong>false?</strong>.  They could be coded as native and be fast, but look something like this:</p>
<pre><code>true?: func [x] [
   either find [true on yes] x [
       0  ; or some other truthy thing
    ][
       if not find [false off no] x [
           fail "TRUE? and FALSE? only work on true|false|on|off|yes|no"
       ]
       null  ; the now only falsey thing.
    ]
]

false?: func [x] [
    not true? x
]
</code></pre>
<p>Then, don't define any of these words to mean anything.  If you write <strong>foo: true</strong> or <strong>bar: no</strong> you get an error.  <strong>print yes</strong> is an error, none are bound nor defined.  Instead, <strong>foo: 'true</strong> and <strong>bar: 'no</strong>.</p>
<p>Not defining them is safer than the alternative, namely <strong>true: 'true</strong> and <strong>false: 'false</strong>, which seems all fine and good until you say <strong>if false [print "it's annoying if this prints, isn't it?"]</strong></p>
<p>The idea is that you would write <strong>foo: 'false,  if false? foo [print "now you're treating it like an enumerated type of sorts"]</strong> if you really wanted.</p>
<blockquote>
<p>A lingering feeling: Rebol may not want a LOGIC! type at all</p>
</blockquote>
<p>I said this isn't a solution, but a "feeling":</p>
<ul>
<li>
<p>If C can get by with 0 being falsey and other integers being truthy, might Rebol get more mileage out of embracing null as the one falsey state?</p>
</li>
<li>
<p>Is the generality and accessibility of null such that it effectively adds something like C++'s <a href="http://en.cppreference.com/w/cpp/utility/optional">std::optional</a> to the language, to where very few real cases of boolean is needed?  Do booleans in reality often come paired with another value, like <code>has-label: yes, label: "foo"</code> and can you cut them out with just <code>label: null</code> vs. <code>label: "foo"</code>?</p>
</li>
<li>
<p>Should LOGIC! really be a steep slope away from an enumerated types with 3 values?  Wouldn't having an approach that thinks otherwise make everyone consider how to deal with evaluative contexts vs. non, preserving the "on" vs. "yes" vs. "true" distinction instead of discarding it to produce a literal no one likes?</p>
</li>
<li>
<p>Should math that demands 1 and 0 be offloaded into a dialect somewhere?  Is boolean logic too much the low level domain when the goal is to match intent?</p>
</li>
</ul>
<p>Sloppily phrased as it is, this is all tied into my "lingering feeling".  I'm curious to see if anyone has observations to bring more clarity to the question.</p>
<p><em>(One very broad critique is that this idea of cutting-the-evaluator out of the equation has no clear limit.  When do we go from <strong>red: 255.0.0</strong> to having the WORD! red be undefined, and need to use <strong>color-of 'red</strong> just to prevent the evaluator from "forgetting what the user originally wrote"?  It starts getting similar to what other languages feel like when they are doing string processing.)</em></p>
          <p><a href="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/4</link>
        <pubDate>Tue, 19 Sep 2017 07:22:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-303-4</guid>
        <source url="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303.rss">A lingering feeling: Rebol may not want a LOGIC! type at all</source>
      </item>
      <item>
        <title>A lingering feeling: Rebol may not want a LOGIC! type at all</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p><strong>Case Study: What did C do, when it went from not having a boolean type (C89) to having one (C99)?</strong></p>
<p>One famous language that did not define <code>true</code> or <code>false</code> is C.  0 was falsey, all other integers were truthy regardless of how big an integer type they were stored in (8-bit char, platform-size int, bit fields, etc.).</p>
<p>Semantically, though, interfaces frequently wanted to define parameters or variables that could only hold true or false.  This led to a diverse set of ways in which people defined TRUE, FALSE, true, or false.</p>
<p>Yet regardless of what syntactic sugar you put on it, they couldn't take anything "smaller" than integers.  You had no guarantee that value would be only 1 or only 0, because any integer was truthy.  So you could write <code>one_or_zero = some_boolean ? 1 : 0</code> to be assured of turning a "boolean" (actually integer) argument into 1 or 0.  This was "cleverly" condensed via "not not", e.g. <code>one_or_zero = !!some_boolean;</code>.  That gave you something you could meaningfully use to flip a bit in a mask or somesuch, whereas unpredictable integer values were messy if used anywhere outside of the condition of an <code>if</code> or <code>while</code>.</p>
<p>But it was hard to remember to do, and ugly.  C++ went ahead and added a boolean type to the language.  Assign any non-zero integer to a value of boolean type, it becomes true.  Assign zero it's false.  If this is ever used in a context where an integer conversion is applied, you get out 0 for false and 1 regardless of what true value went in.  <code>true</code>, <code>false</code>, and <code>bool</code> were C++ keywords, not overridable by the user.</p>
<p>C99 wanted to add it and get the C++ feature, but they didn't want to break backwards compatibility.  Here's what they did as a workaround:</p>
<ul>
<li>
<p>Continue the history of 1989 (and before), and don't reserve the words "true" or "false" or "bool", keep them open to user definition.</p>
</li>
<li>
<p>...but build on the fact that the 1989 spec told users they should not be defining any identifiers that begin with an underscore followed by a capital letter.  So <code>_myVariable</code> is okay, but <code>_MyVariable</code> is not.  Using the latter may mean the compiler implementation or C standard itself will someday define <code>_MyVariable</code> and your previous working program will get a new version of the compiler and fail.</p>
</li>
<li>
<p>Introduce a new <strong>_Bool</strong> datatype (screwing anyone over who didn't read the C standard and had defined that themselves to mean something, but that was their fault).</p>
</li>
<li>
<p>Make it so assigning <code>1020</code> to a <code>_Bool</code> makes it "truthy" but then trying to later use that value in an integer context gets it as <code>1</code>.</p>
</li>
<li>
<p>Give people a header they can include (or not) called <code>&lt;stdbool.h&gt;</code>, in which you get <code>true</code> defined as 1, <code>false</code> defined as 0, and <code>bool</code> defined as <code>_Bool</code>.</p>
</li>
<li>
<p>In C <a href="https://stackoverflow.com/questions/17307275/what-is-the-printf-format-specifier-for-bool">there is no printf format specifier for bool</a>.  C++ iostreams can be put in a mode where they are rendered as the words true and false instead of 1 and 0, but you <a href="https://stackoverflow.com/questions/15960015/c-printing-boolean-what-is-displayed">have to ask for that</a></p>
</li>
</ul>
<p><strong>Some Observations</strong></p>
<ul>
<li>
<p>C went with the notion of having a <em>logic datatype</em>, but no <em>logic literal</em>.  Rebol struggles with this due to the idea that you're <em>supposed</em> to be able to round-trip data and get back structures that are <strong>equal?</strong> without writing some kind of serialization or de-serialization.  But my examples above show this isn't working...it's just frequently being lossy from LOGIC! to a WORD! instead of lossy from LOGIC! to an INTEGER!.</p>
</li>
<li>
<p>Though if one is going to go with this mindset, I think in Ren-C that NULL serves as a better "universal falsey thing" than 0 does.  And it's interesting that in Rebol, absolutely everything else can be truthy.  Making it even harder to pick what the universal truthy canon value would be (maybe 0, just to be contrarian?)</p>
</li>
<li>
<p>Underscore followed by a capital letter in C reserves lexical space somewhat in the way that construction syntaxes does.  <code>_True</code> offers some of the same "language designer's space, not user's space" situation that <code>#[true]</code> does.</p>
</li>
<li>
<p>C did not go with this approach due to a fear of being a language with keywords.  This is a workaround for a "mistake".  If they had a time machine, they would probably go back and make <code>true</code>, <code>false</code>, and <code>bool</code> keywords in 1989, as opposed to saying <strong>_If</strong> was the real "if", <strong>_While</strong> was the real "while"...and having people <code>#include &lt;c-language.h&gt;</code> to get <code>#define if _If</code> and <code>#define while _While</code>?</p>
</li>
</ul>
          <p><a href="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/2</link>
        <pubDate>Tue, 19 Sep 2017 01:05:42 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-303-2</guid>
        <source url="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303.rss">A lingering feeling: Rebol may not want a LOGIC! type at all</source>
      </item>
      <item>
        <title>A lingering feeling: Rebol may not want a LOGIC! type at all</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>There has been a <a href="https://forum.rebol.info/t/what-does-rebol-has-no-keywords-really-mean/2039">"no keywords" mantra</a> to the Rebol language, which has driven the decision that <strong>true</strong> and <strong>false</strong> should not be anything other than WORD!.</p>
<p>Instead, literals expressed historically as <code>#[true]</code> and <code>#[false]</code> were defined, and then these definitions provided:</p>
<pre><code>true: on: yes: #[true]
false: off: no: #[false]
</code></pre>
<p>The unpalatability of the literal forms is means Rebol2/R3-Alpha/Red choose to render the literals as if they were the words.  Hence:</p>
<pre><code>rebol2&gt;&gt; type? first [true]
== word!

rebol2&gt;&gt; type? true
== logic!

rebol2&gt;&gt; true
== true  ; !!! very deceptive...

rebol2&gt;&gt; on
== true  ; !!! also very deceptive, and lossy to boot!

rebol2&gt;&gt; form true
== "true"  ; well, whatever FORM is, it's lossy for strings, so...

rebol2&gt;&gt; mold yes
== "true"  ; !!! this strikes me as bad.

r3-alpha&gt;&gt; mold/all yes
== "#[true]"  ; in R3-Alpha, not Red which is "true"
</code></pre>
<p>Without delving into the "what is MOLD vs MOLD/ALL" or "what is FORMing, anyway" discussion, I'll just say this feels like another one of those design errors that needs a better solution.</p>
<p>In trying to square this circle, I've had a nagging feeling in my mind that LOGIC! as a primitive type in Rebol may be just a bad idea in general.  Rebol is a messaging language, so what if in my message for calendar appointments I have a ternary set of words like "yes / no / maybe"...if I want to capture that then why is my problem so different if it's just "yes / no" or "true / false"?</p>
<p>Don't confuse me saying I have this lingering feeling with saying I have a solution.  But I thought maybe a thread to brainstorm about it--observations about it made over time, might be useful.</p>
          <p><a href="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303/1</link>
        <pubDate>Tue, 19 Sep 2017 00:13:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-303-1</guid>
        <source url="https://forum.rebol.info/t/a-lingering-feeling-rebol-may-not-want-a-logic-type-at-all/303.rss">A lingering feeling: Rebol may not want a LOGIC! type at all</source>
      </item>
  </channel>
</rss>
