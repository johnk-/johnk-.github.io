<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>(No) Alternative Local Notation in the Func Spec Dialect</title>
    <link>https://forum.rebol.info/t/no-alternative-local-notation-in-the-func-spec-dialect/1793</link>
    <description># TL;DR:

When using a spec in FUNCTION (remember [FUNC is a synonym now](https://forum.rebol.info/t/abbreviations-as-synonyms/1211)):

* **if you want to specify locals you say `[... &lt;local&gt; x y z ...]`** (/LOCAL is a normal refinement like any other in Ren-C.

* **there is no longer a datatype-based shortcut for locals as a way to save the trouble of finding `&lt;local&gt;` in specs and inserting at the right point**.

    * Once you could toss random SET-WORD!s anywhere in a spec, like **`[a b c: d]`** and it would act like **`[a b d &lt;local&gt; c]`**.  This feature was to make higher-level function generators easier to write, to save them from having to find `&lt;local&gt;` in the spec...add it if not there...and do everything at the right point.

    * When multi-returns began using SET-WORD! this was changed to be **`[a b .c d]`** just to move it out of the way.

    * What this was trying to achieve has been obsoleted by newer and better methods, which actually entwine with the idea that *you should never know what local variables a function you are composing on top of has*.

# More Explanation

Long ago, when I was looking at some of the higher-level function generators (like FUNCT on top of FUNCTION) I was struck by how tricky it was to get the adaptations written correctly.  

We can look at [FUNCT from R3-Alpha](https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-funcs.r#L28) and see some of that complexity, even just to try and add some local variables.

It had to check to see if there was already a /LOCAL, and add it if not:

	; Copy the spec and add /local to the end if not found
	unless find spec: copy/deep spec /local [append spec [
		/local ; In a block so the generated source gets the newlines
	]]

*Bear in mind that specifying /LOCAL twice would be a duplicate refinement error, and /LOCAL did not have to be at the end of a spec.*  Things were tricky, because there were &quot;private refinements&quot;.  These refinements were an artifact of how help worked--they were not shown--but weren&#39;t actually private.

So you had to be careful, to insert things after local but not after the private refinements, or they&#39;d be arguments to those refinements:

    ; Collect all set-words in the body as words to be used as locals, and add
    ; them to the spec. Don&#39;t include the words already in the spec or object.
    insert find/tail spec /local collect-words/deep/set/ignore body either with [
       ...
    ]

**I wanted to take better advantage of datatypes, so I adopted the TAG! `&lt;local&gt;` in the spec so that /LOCAL could be used like any other refinement... e.g. GET-TIME/LOCAL or GET-LANGUAGE/LOCAL.**  This is an idea preserved to this day, and I think it&#39;s a better move (though LET has been developing as the more viable general option for making locals).

But another concept I had was to make SET-WORD! in the dialect be another way to put a local anywhere in the spec.  So if you were writing code munging function specs you could just throw local variables on:

    foo: func [a b c: d] [...]

    &lt;= equivalent to =&gt;

    foo: func [a b d &lt;local&gt; c] [...]

But the idea was that `&lt;local&gt;` itself was transformed into the SET-WORD!, so the only language you needed to understand was that of the SET-WORD!s:

    &gt;&gt; foo: func [a b d &lt;local&gt; c] [...]

    &gt;&gt; spec-of :foo
    == [a b d c:]

When multi-returns came about and took SET-WORD!s, this idea was bumped around to be done with TUPLE!s with leading blanks like **.c**

# [... but Everything Changed :robot: ...](https://www.youtube.com/watch?v=2q9MaEKHakY)

I&#39;ve been marching toward something more like [&quot;Seeing all ACTION!s as Variadic Frame Makers?&quot;](https://forum.rebol.info/t/seeing-all-action-s-as-variadic-frame-makers/1002)

Function composition tools operate on FRAME!s using tools like ADAPT, SPECIALIZE, AUGMENT, ENCLOSE, etc.  There is no API for getting at the locals *because when you build on top of a function you can&#39;t see them, they&#39;re not part of the interface...they are sealed inside.*   This is good because you can build on top of a function without worrying about the details of the parts from which it was composed.

The migration to where [refinements are their own arguments](https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120) has been key in making function calls easier to model as an object.

**In this world we do not need a representation for locals in the spec to add them...because the entire concept of how FUNCT was written is gone.**  If you want to add locals you use tools like AUGMENT and don&#39;t worry about it.

# There Are Still (many) Problems To Solve

Consider that you can do something like ask for a FRAME! of something like APPEND, then enumerate the keys:

    &gt;&gt; f: make frame! :append

    &gt;&gt; for-each key f [print mold key]
    return
    series
    value
    part
    dup
    line
    only

There are a lot of questions to answer about the unique nature of the main function&#39;s RETURN.  Although other multi-returns have to be on the interface, should you be able to put a variable in that return?  Consider that you could use multi-return with append today:

    &gt;&gt; [var]: append &quot;abc&quot; &quot;d&quot;
    == &quot;abcd&quot;

    &gt;&gt; var
    == &quot;abcd&quot;

So should you be able to preload the frame with **f.return: &#39;var** and get the same effect?  This is competitive with the notion that RETURN is a concept of a local variable to the action, that holds an action that returns specifically from that action... so the responsibilities are somewhat murky for this distinguished result.

But we can also see that if we only look at object keys, we don&#39;t know which things are refinements or which are not...if they are refinements we don&#39;t know if they are 0-arg or 1-arg form, we don&#39;t know what types they take... or are they `&lt;end&gt;`-able.  **I believe getting at this information should be done by means other than analysis of some spec block you filter out for description strings/etc. so that is on the right track.**  But it&#39;s still a long road.</description>
    
    <lastBuildDate>Sat, 05 Mar 2022 21:25:55 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/no-alternative-local-notation-in-the-func-spec-dialect/1793.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>(No) Alternative Local Notation in the Func Spec Dialect</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <h1>TL;DR:</h1>
<p>When using a spec in FUNCTION (remember <a href="https://forum.rebol.info/t/abbreviations-as-synonyms/1211">FUNC is a synonym now</a>):</p>
<ul>
<li>
<p><strong>if you want to specify locals you say <code>[... &lt;local&gt; x y z ...]</code></strong> (/LOCAL is a normal refinement like any other in Ren-C.</p>
</li>
<li>
<p><strong>there is no longer a datatype-based shortcut for locals as a way to save the trouble of finding <code>&lt;local&gt;</code> in specs and inserting at the right point</strong>.</p>
<ul>
<li>
<p>Once you could toss random SET-WORD!s anywhere in a spec, like <strong><code>[a b c: d]</code></strong> and it would act like <strong><code>[a b d &lt;local&gt; c]</code></strong>.  This feature was to make higher-level function generators easier to write, to save them from having to find <code>&lt;local&gt;</code> in the spec...add it if not there...and do everything at the right point.</p>
</li>
<li>
<p>When multi-returns began using SET-WORD! this was changed to be <strong><code>[a b .c d]</code></strong> just to move it out of the way.</p>
</li>
<li>
<p>What this was trying to achieve has been obsoleted by newer and better methods, which actually entwine with the idea that <em>you should never know what local variables a function you are composing on top of has</em>.</p>
</li>
</ul>
</li>
</ul>
<h1>More Explanation</h1>
<p>Long ago, when I was looking at some of the higher-level function generators (like FUNCT on top of FUNCTION) I was struck by how tricky it was to get the adaptations written correctly.</p>
<p>We can look at <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/mezz/base-funcs.r#L28">FUNCT from R3-Alpha</a> and see some of that complexity, even just to try and add some local variables.</p>
<p>It had to check to see if there was already a /LOCAL, and add it if not:</p>
<pre><code>; Copy the spec and add /local to the end if not found
unless find spec: copy/deep spec /local [append spec [
	/local ; In a block so the generated source gets the newlines
]]
</code></pre>
<p><em>Bear in mind that specifying /LOCAL twice would be a duplicate refinement error, and /LOCAL did not have to be at the end of a spec.</em>  Things were tricky, because there were "private refinements".  These refinements were an artifact of how help worked--they were not shown--but weren't actually private.</p>
<p>So you had to be careful, to insert things after local but not after the private refinements, or they'd be arguments to those refinements:</p>
<pre><code>; Collect all set-words in the body as words to be used as locals, and add
; them to the spec. Don't include the words already in the spec or object.
insert find/tail spec /local collect-words/deep/set/ignore body either with [
   ...
]
</code></pre>
<p><strong>I wanted to take better advantage of datatypes, so I adopted the TAG! <code>&lt;local&gt;</code> in the spec so that /LOCAL could be used like any other refinement... e.g. GET-TIME/LOCAL or GET-LANGUAGE/LOCAL.</strong>  This is an idea preserved to this day, and I think it's a better move (though LET has been developing as the more viable general option for making locals).</p>
<p>But another concept I had was to make SET-WORD! in the dialect be another way to put a local anywhere in the spec.  So if you were writing code munging function specs you could just throw local variables on:</p>
<pre><code>foo: func [a b c: d] [...]

&lt;= equivalent to =&gt;

foo: func [a b d &lt;local&gt; c] [...]
</code></pre>
<p>But the idea was that <code>&lt;local&gt;</code> itself was transformed into the SET-WORD!, so the only language you needed to understand was that of the SET-WORD!s:</p>
<pre><code>&gt;&gt; foo: func [a b d &lt;local&gt; c] [...]

&gt;&gt; spec-of :foo
== [a b d c:]
</code></pre>
<p>When multi-returns came about and took SET-WORD!s, this idea was bumped around to be done with TUPLE!s with leading blanks like <strong>.c</strong></p>
<h1><a href="https://www.youtube.com/watch?v=2q9MaEKHakY">... but Everything Changed <img src="https://forum.rebol.info/images/emoji/twitter/robot.png?v=9" title=":robot:" class="emoji" alt=":robot:"> ...</a></h1>
<p>I've been marching toward something more like <a href="https://forum.rebol.info/t/seeing-all-action-s-as-variadic-frame-makers/1002">"Seeing all ACTION!s as Variadic Frame Makers?"</a></p>
<p>Function composition tools operate on FRAME!s using tools like ADAPT, SPECIALIZE, AUGMENT, ENCLOSE, etc.  There is no API for getting at the locals <em>because when you build on top of a function you can't see them, they're not part of the interface...they are sealed inside.</em>   This is good because you can build on top of a function without worrying about the details of the parts from which it was composed.</p>
<p>The migration to where <a href="https://forum.rebol.info/t/pure-and-refined-simplifying-refinements-to-one-or-zero-args/1120">refinements are their own arguments</a> has been key in making function calls easier to model as an object.</p>
<p><strong>In this world we do not need a representation for locals in the spec to add them...because the entire concept of how FUNCT was written is gone.</strong>  If you want to add locals you use tools like AUGMENT and don't worry about it.</p>
<h1>There Are Still (many) Problems To Solve</h1>
<p>Consider that you can do something like ask for a FRAME! of something like APPEND, then enumerate the keys:</p>
<pre><code>&gt;&gt; f: make frame! :append

&gt;&gt; for-each key f [print mold key]
return
series
value
part
dup
line
only
</code></pre>
<p>There are a lot of questions to answer about the unique nature of the main function's RETURN.  Although other multi-returns have to be on the interface, should you be able to put a variable in that return?  Consider that you could use multi-return with append today:</p>
<pre><code>&gt;&gt; [var]: append "abc" "d"
== "abcd"

&gt;&gt; var
== "abcd"
</code></pre>
<p>So should you be able to preload the frame with <strong>f.return: 'var</strong> and get the same effect?  This is competitive with the notion that RETURN is a concept of a local variable to the action, that holds an action that returns specifically from that action... so the responsibilities are somewhat murky for this distinguished result.</p>
<p>But we can also see that if we only look at object keys, we don't know which things are refinements or which are not...if they are refinements we don't know if they are 0-arg or 1-arg form, we don't know what types they take... or are they <code>&lt;end&gt;</code>-able.  <strong>I believe getting at this information should be done by means other than analysis of some spec block you filter out for description strings/etc. so that is on the right track.</strong>  But it's still a long road.</p>
          <p><a href="https://forum.rebol.info/t/no-alternative-local-notation-in-the-func-spec-dialect/1793/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/no-alternative-local-notation-in-the-func-spec-dialect/1793/1</link>
        <pubDate>Sat, 05 Mar 2022 20:33:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1793-1</guid>
        <source url="https://forum.rebol.info/t/no-alternative-local-notation-in-the-func-spec-dialect/1793.rss">(No) Alternative Local Notation in the Func Spec Dialect</source>
      </item>
  </channel>
</rss>
