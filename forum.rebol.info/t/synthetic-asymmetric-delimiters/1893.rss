<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>(| Synthetic |) [[Asymmetric]] {&gt; Delimiters &lt;}</title>
    <link>https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893</link>
    <description>In trying to get COMPOSE to lose /ONLY, there was a time when it looked for doubled groups.

    &gt;&gt; block: [a b c]

    &gt;&gt; compose [(block) ((block))]
    == [a b c [a b c]]

I liked it, and I said:

[quote=&quot;hostilefork, post:10, topic:979&quot;]
As a higher-level tool, it should cater to the higher-level needs...and that&#39;s not splicing unless you ask. I really believe this is the better behavior for people who are writing and reading the code.
[/quote]

But I found concerns:

[quote=&quot;hostilefork, post:10, topic:979&quot;]
One qualm I have about this is the visual difficulty of telling if something is a double-group if you are composing more than one item.

    &gt;&gt; compose [a b ((some code
             that goes on and on and) oh it ended there (maybe you start
             another group and
         eventually end)) d e]

That&#39;s *not* a splicing case because it&#39;s not a double group, but it kind of looks like one.
[/quote]

To be fair: it&#39;s hardly the only case where if you jump to conclusions on reading a few characters that you&#39;ll have problems because the code keeps going and may invalidate the assumptions you made by looking at those few characters.  But it still wasn&#39;t perfect.

...and as it turned out, it was another one of those &quot;close but no cigar&quot; cases of wanting to mark the intent of splice specially, but using a mechanism **[that&#39;s not as good as splice isotopes](https://forum.rebol.info/t/putting-splicing-intent-on-appended-value/1873)!**.

**I think that doubled-up-groups are a neat example of a dialecting concept, where you might want to give that significance.  It would certainly belong in the dialecting handbook (if we had one).**

But in the COMPOSE case, we have a better option... **compose [... (spread block) ...]** (or another operator of your choice that produces block isotopes).  And it&#39;s more fitting for the core, because it doesn&#39;t have the weakness mentioned above.

---

Not that it would be hard to write again, but here&#39;s the C code for detecting doubled groups!

    INLINE bool Is_Any_Doubled_Group(const Element* group) {
        assert(Any_Group_Heart(Cell_Heart(group)));
        const Cell* tail;
        const Cell* inner = Cell_Array_At(&amp;tail, group);
        if (inner + 1 != tail)  // should be exactly one item
            return false;
        return Is_Group(inner);  // if true, it&#39;s a ((...)) GROUP!
    }</description>
    
    <lastBuildDate>Thu, 12 Sep 2024 10:14:45 +0000</lastBuildDate>
    <category>Dialects/DSLs</category>
    <atom:link href="https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>(| Synthetic |) [[Asymmetric]] {&gt; Delimiters &lt;}</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>I realized that this speaks to a whole category of possibilites we have in dialecting, which is to "make up" asymmetric delimiter pairs by coupling things with List delimiters:</p>
<pre><code>(* You've got starred GROUP!s *)

(| Banana clips are famousish |)

(&gt; Perhaps some pointy groups &lt;)

(&lt; Then reverse pointy groups &gt;)

[: Colon shall be a WORD! now :]

[/ Slash blocks...very slashy /]
</code></pre>
<p>You'll have to throw in the space between the delimiting unless you're specifically doubling up a List delimiter, e.g. a <code>{{Double-fence}}</code>.</p>
<p>But there's some pretty interesting potential here.  I feel like having a tool in the box for it would be neat:</p>
<pre><code>&gt;&gt; [start /end]: find-synthdelimit [*] second [a [* b c *] d e]
== [b c *]

&gt;&gt; end
== [*]

&gt;&gt; [start /end]: find-synthdelimit '(&gt; &lt;) second [a (&gt; b c &lt;) d e]
== (b c &lt;)

&gt;&gt; end
== (&lt;)

&gt;&gt; [start /end]: find-synthdelimit '{|} second [a {b c} d e]
== ~null~  ; anti
</code></pre>
<p>It would be nice if there were some way to do array slices and be able to do evaluation on those slices, so that the delimiters wouldn't be visible to that evaluation.  Usual gripe about Rebol's informality making that mostly impractical.  <img src="https://forum.rebol.info/images/emoji/twitter/pouting_cat.png?v=12" title=":pouting_cat:" class="emoji" alt=":pouting_cat:" loading="lazy" width="20" height="20"></p>
          <p><a href="https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893/3</link>
        <pubDate>Thu, 12 Sep 2024 10:08:54 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1893-3</guid>
        <source url="https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893.rss">(| Synthetic |) [[Asymmetric]] {&gt; Delimiters &lt;}</source>
      </item>
      <item>
        <title>(| Synthetic |) [[Asymmetric]] {&gt; Delimiters &lt;}</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>In trying to get COMPOSE to lose /ONLY, there was a time when it looked for doubled groups.</p>
<pre><code>&gt;&gt; block: [a b c]

&gt;&gt; compose [(block) ((block))]
== [a b c [a b c]]
</code></pre>
<p>I liked it, and I said:</p>
<aside class="quote no-group quote-post-not-found" data-username="hostilefork" data-post="10" data-topic="979">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/the-superpowers-of-ren-cs-revamped-compose/979/10">The Superpowers of Ren-C's Revamped COMPOSE</a></div>
<blockquote>
<p>As a higher-level tool, it should cater to the higher-level needs...and that's not splicing unless you ask. I really believe this is the better behavior for people who are writing and reading the code.</p>
</blockquote>
</aside>
<p>But I found concerns:</p>
<aside class="quote no-group quote-post-not-found" data-username="hostilefork" data-post="10" data-topic="979">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/the-superpowers-of-ren-cs-revamped-compose/979/10">The Superpowers of Ren-C's Revamped COMPOSE</a></div>
<blockquote>
<p>One qualm I have about this is the visual difficulty of telling if something is a double-group if you are composing more than one item.</p>
<pre><code>&gt;&gt; compose [a b ((some code
         that goes on and on and) oh it ended there (maybe you start
         another group and
     eventually end)) d e]
</code></pre>
<p>That's <em>not</em> a splicing case because it's not a double group, but it kind of looks like one.</p>
</blockquote>
</aside>
<p>To be fair: it's hardly the only case where if you jump to conclusions on reading a few characters that you'll have problems because the code keeps going and may invalidate the assumptions you made by looking at those few characters.  But it still wasn't perfect.</p>
<p>...and as it turned out, it was another one of those "close but no cigar" cases of wanting to mark the intent of splice specially, but using a mechanism <strong><a href="https://forum.rebol.info/t/putting-splicing-intent-on-appended-value/1873">that's not as good as splice isotopes</a>!</strong>.</p>
<p><strong>I think that doubled-up-groups are a neat example of a dialecting concept, where you might want to give that significance.  It would certainly belong in the dialecting handbook (if we had one).</strong></p>
<p>But in the COMPOSE case, we have a better option... <strong>compose [... (spread block) ...]</strong> (or another operator of your choice that produces block isotopes).  And it's more fitting for the core, because it doesn't have the weakness mentioned above.</p>
<hr>
<p>Not that it would be hard to write again, but here's the C code for detecting doubled groups!</p>
<pre><code>INLINE bool Is_Any_Doubled_Group(const Element* group) {
    assert(Any_Group_Heart(Cell_Heart(group)));
    const Cell* tail;
    const Cell* inner = Cell_Array_At(&amp;tail, group);
    if (inner + 1 != tail)  // should be exactly one item
        return false;
    return Is_Group(inner);  // if true, it's a ((...)) GROUP!
}
</code></pre>
          <p><a href="https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893/1</link>
        <pubDate>Sun, 06 Jun 2021 02:54:04 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-1893-1</guid>
        <source url="https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893.rss">(| Synthetic |) [[Asymmetric]] {&gt; Delimiters &lt;}</source>
      </item>
  </channel>
</rss>
