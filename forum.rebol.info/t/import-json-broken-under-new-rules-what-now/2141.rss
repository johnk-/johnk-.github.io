<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>`import @json` broken under new @ rules, what now?</title>
    <link>https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141</link>
    <description>The IMPORT statement was using `@NAME` to mean &quot;look up the module in the registry&quot;.  So you could just write something like:

    import @json

This was a replacement for the original syntax, of using TAG!.

    import &lt;json&gt;

The reason tag was replaced is because as a string type, it came to be in demand for relative-to-script paths, as opposed to relative-to-current-directory paths.

So if your file is in `C:\MyProject\something.reb` and you do:

    D:\Documents&gt; r3 ..\MyProject\something.reb

The system doesn&#39;t change the working directory to `C:\MyProject` any longer (it was decided that&#39;s an undesirable behavior).  So you&#39;ll still be in `D:\Documents\` and so `%libs/whatever.reb` would be relative to that.  But using TAG! lets you get the desired effect:

    Rebol [File: %something.reb]
    import &lt;libs/whatever.reb&gt;  ; relative to C:\MyProject where %something.reb lives

Strings are still used for literal source if you want to put that right inline:

    import &quot;Rebol [Title: &lt;{my module}&gt;] export foo: lambda [] [print &lt;{Foo}&gt;]&quot;

(trying new string notation.. not that terrible...)

## [But Now `@json` Is An (Attempted-Bound) Word](https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135)

We can change it so that the handling is for word, so it works... and **`import &#39;json`** would also work.

But then the binding is superfluous, and we should change the callsites to just use a plain tick mark.

There&#39;s nothing particularly *wrong* with just using a word here, but it kind of makes the import statement lose some of its... heft.  It doesn&#39;t stand out as much.

We could use an issue/token:

    import #json

But then we can&#39;t do tuple or path tricks and have them be actual tuples and paths.

    import &#39;json/1.2.20  ; path with two items, second is a 3-elemnent tuple
    import #json/1.2.20  ; just a utf8 string

Anyway, I guess we should just have import take WORD!, and it&#39;s not a big deal.  In fact it will keep working, because since the argument to import isn&#39;t quoted we can&#39;t tell it had the @ on it.  But future IMPORTs should omit the @, because it&#39;s now superfluous.

(Though actually, should `@word` fail if it can&#39;t bind a word?  That&#39;s a question for the other thread, though...)</description>
    
    <lastBuildDate>Wed, 31 Jan 2024 05:59:12 +0000</lastBuildDate>
    <category>Modules</category>
    <atom:link href="https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>`import @json` broken under new @ rules, what now?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Because:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2141">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>Strings are still used for literal source if you want to put that right inline:</p>
<pre><code class="lang-plaintext">import "Rebol [Title: &lt;{my module}&gt;] export foo: lambda [] [print &lt;{Foo}&gt;]"
</code></pre>
</blockquote>
</aside>
<p>(or if you have it in a variable, and fetched it off the network or got it from somewhere)</p>
<hr>
<p>I also just noticed something else, which is that DO is using the same logic.  (This goes back to what I was saying about <a href="https://forum.rebol.info/t/do-of-text-as-synonym-of-do-of-file-containing-string/2125">DO needing to be separated from EVAL</a>)</p>
<p>So if there's a script you want to run, you used to be able to say <strong><code>do @script</code></strong> but now if you say <strong><code>do 'script</code></strong> then it works... but... I don't like it.</p>
<p>Maybe it really is best to go for <strong><code>import [@json]</code></strong>  ... something just seems off to me about <strong><code>import 'json</code></strong></p>
          <p><a href="https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141/4</link>
        <pubDate>Wed, 31 Jan 2024 05:59:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2141-4</guid>
        <source url="https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141.rss">`import @json` broken under new @ rules, what now?</source>
      </item>
      <item>
        <title>`import @json` broken under new @ rules, what now?</title>
        <dc:creator><![CDATA[bradrn]]></dc:creator>
        <description><![CDATA[
            <p>Why not plain <code>import "json"</code>?</p>
          <p><a href="https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141/3</link>
        <pubDate>Wed, 31 Jan 2024 05:48:12 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2141-3</guid>
        <source url="https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141.rss">`import @json` broken under new @ rules, what now?</source>
      </item>
      <item>
        <title>`import @json` broken under new @ rules, what now?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2141">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"> hostilefork:</div>
<blockquote>
<p>We can change it so that the handling is for word, so it works... and <strong><code>import 'json</code></strong> would also work.</p>
<p>But then the binding is superfluous, and we should change the callsites to just use a plain tick mark.</p>
</blockquote>
</aside>
<p>Actually, it turns out that <strong>import 'json</strong> had a meaning... it was to look for modules in a local registry vs. a remote one.  <a class="mention" href="https://forum.rebol.info/u/giuliolunati">@giuliolunati</a> added this, as well as a check that during a remote import the thing you were importing remotely couldn't turn around and do a request for a local import.</p>
<p>Import needs either another argument or to take a block, because we can't pack all the possible desires for importation into one non-block argument.  <a href="https://forum.rebol.info/t/design-for-import/1570">I've mentioned I don't like the idea of this being done with refinements</a>, so either import should be arity-2 or take a block if you want to give it more arguments.</p>
<pre><code>import 'json []
import 'xml [#local]

import 'json
import [xml #local]

import 'json
import ['xml #local]
</code></pre>
<p>I don't know, but I'm just going to make words work for now.</p>
          <p><a href="https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141/2</link>
        <pubDate>Wed, 31 Jan 2024 05:33:41 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2141-2</guid>
        <source url="https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141.rss">`import @json` broken under new @ rules, what now?</source>
      </item>
      <item>
        <title>`import @json` broken under new @ rules, what now?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>The IMPORT statement was using <code>@NAME</code> to mean "look up the module in the registry".  So you could just write something like:</p>
<pre><code>import @json
</code></pre>
<p>This was a replacement for the original syntax, of using TAG!.</p>
<pre><code>import &lt;json&gt;
</code></pre>
<p>The reason tag was replaced is because as a string type, it came to be in demand for relative-to-script paths, as opposed to relative-to-current-directory paths.</p>
<p>So if your file is in <code>C:\MyProject\something.reb</code> and you do:</p>
<pre><code>D:\Documents&gt; r3 ..\MyProject\something.reb
</code></pre>
<p>The system doesn't change the working directory to <code>C:\MyProject</code> any longer (it was decided that's an undesirable behavior).  So you'll still be in <code>D:\Documents\</code> and so <code>%libs/whatever.reb</code> would be relative to that.  But using TAG! lets you get the desired effect:</p>
<pre><code>Rebol [File: %something.reb]
import &lt;libs/whatever.reb&gt;  ; relative to C:\MyProject where %something.reb lives
</code></pre>
<p>Strings are still used for literal source if you want to put that right inline:</p>
<pre><code>import "Rebol [Title: &lt;{my module}&gt;] export foo: lambda [] [print &lt;{Foo}&gt;]"
</code></pre>
<p>(trying new string notation.. not that terrible...)</p>
<h2>
<a name="but-now-json-is-an-attempted-bound-wordhttpsforumrebolinfotrepurposing-the-xxx-xxx-for-undecorated-values2135-1" class="anchor" href="https://forum.rebol.info#but-now-json-is-an-attempted-bound-wordhttpsforumrebolinfotrepurposing-the-xxx-xxx-for-undecorated-values2135-1"></a><a href="https://forum.rebol.info/t/repurposing-the-xxx-xxx-for-undecorated-values/2135">But Now <code>@json</code> Is An (Attempted-Bound) Word</a>
</h2>
<p>We can change it so that the handling is for word, so it works... and <strong><code>import 'json</code></strong> would also work.</p>
<p>But then the binding is superfluous, and we should change the callsites to just use a plain tick mark.</p>
<p>There's nothing particularly <em>wrong</em> with just using a word here, but it kind of makes the import statement lose some of its... heft.  It doesn't stand out as much.</p>
<p>We could use an issue/token:</p>
<pre><code>import #json
</code></pre>
<p>But then we can't do tuple or path tricks and have them be actual tuples and paths.</p>
<pre><code>import 'json/1.2.20  ; path with two items, second is a 3-elemnent tuple
import #json/1.2.20  ; just a utf8 string
</code></pre>
<p>Anyway, I guess we should just have import take WORD!, and it's not a big deal.  In fact it will keep working, because since the argument to import isn't quoted we can't tell it had the @ on it.  But future IMPORTs should omit the @, because it's now superfluous.</p>
<p>(Though actually, should <code>@word</code> fail if it can't bind a word?  That's a question for the other thread, though...)</p>
          <p><a href="https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141/1</link>
        <pubDate>Wed, 31 Jan 2024 05:15:47 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2141-1</guid>
        <source url="https://forum.rebol.info/t/import-json-broken-under-new-rules-what-now/2141.rss">`import @json` broken under new @ rules, what now?</source>
      </item>
  </channel>
</rss>
