<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Should SET-WORD!s Have &quot;Raised Error Interception&quot;?</title>
    <link>https://forum.rebol.info/t/should-set-word-s-have-raised-error-interception/2015</link>
    <description>Division by zero is a simple example of something that produces a &quot;definitional error&quot;.  *It&#39;s considered to be &quot;emitted&quot; by the division*, and if you try to &quot;move on&quot; without handling it, the raised error becomes a failure that [you can only catch at some top level by SYS.UTIL.RESCUE](https://forum.rebol.info/t/discouraging-use-of-trap/1871).

For instance:

    &gt;&gt; 1 / 0, 2 + 0
    ** Math Error: attempt to divide by zero
    ** Where: / console
    ** Near: [1 / 0 **, 2 + ***]

What happened was that **1 / 0** evaluated, but rather than forcing a &quot;hard failure&quot; (e.g. running FAIL) it instead *returned a raised error*.  There&#39;s an opportunity if that raised error were to be intercepted, but in this case it just moseyed along to the next expression... so the raised error was promoted to a failure.

However a ^META oriented function can trap that, and react to it, allowing you to continue.  EXCEPT is such a function:

    &gt;&gt; 1 / 0 except e -&gt; [print [&quot;The error was&quot; e.id]], 2 + 0
    The error was zero-divide
    == 2

One thing that pretty obviously shouldn&#39;t count as &quot;moving on&quot; would be parentheses.  Adding parentheses shouldn&#39;t change the situation, they just pass any raised errors through:

    &gt;&gt; (1 / 0) except e -&gt; [print [&quot;The error was&quot; e.id]], 2 + 0
    The error was zero-divide
    == 2

    &gt;&gt; ((((1 / 0)))) except e -&gt; [print [&quot;The error was&quot; e.id]], 2 + 0
    The error was zero-divide
    == 2

**But what about things like SET-WORD!s?**  Right now, it does not raise an error and just skips the assignment, and lets the code continue:

    &gt;&gt; num: &lt;before&gt;

    &gt;&gt; (num: 1 / 0) except e -&gt; [print [&quot;The error was&quot; e.id]], 2 + 0
    The error was zero-divide
    == 2

    &gt;&gt; num
    == &lt;before&gt;

**This is a useful pattern, but if we do it for SET-WORD!s then we have to ask whether it should be done for SET the function as well...**

    &gt;&gt; (set &#39;num 1 / 0) except e -&gt; [print [&quot;The error was&quot; e.id]], 2 + 0
    The error was zero-divide
    == 2

If we do this then the SET function has to take its argument of the value to assign as a ^META argument.  Because raised errors can&#39;t be stored in variables, and function parameters are communicated via variables.

This does make SET a more complicated function, and any functions like it might also become complicated.  It&#39;s a hard decision to condemn all SET-like functions to take their arguments as ^META so they can proxy any errors and not perform the assignment.

I&#39;ll probably have more to say about this, but for the moment both SET and SET-WORD! react to definitional failures by *not performing the assignment* and *propagating the raised error*.</description>
    
    <lastBuildDate>Tue, 07 Feb 2023 02:52:51 +0000</lastBuildDate>
    <category>Errors</category>
    <atom:link href="https://forum.rebol.info/t/should-set-word-s-have-raised-error-interception/2015.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Should SET-WORD!s Have &quot;Raised Error Interception&quot;?</title>
        <dc:creator><![CDATA[hostilefork]]></dc:creator>
        <description><![CDATA[
            <p>Division by zero is a simple example of something that produces a "definitional error".  <em>It's considered to be "emitted" by the division</em>, and if you try to "move on" without handling it, the raised error becomes a failure that <a href="https://forum.rebol.info/t/discouraging-use-of-trap/1871">you can only catch at some top level by SYS.UTIL.RESCUE</a>.</p>
<p>For instance:</p>
<pre><code>&gt;&gt; 1 / 0, 2 + 0
** Math Error: attempt to divide by zero
** Where: / console
** Near: [1 / 0 **, 2 + ***]
</code></pre>
<p>What happened was that <strong>1 / 0</strong> evaluated, but rather than forcing a "hard failure" (e.g. running FAIL) it instead <em>returned a raised error</em>.  There's an opportunity if that raised error were to be intercepted, but in this case it just moseyed along to the next expression... so the raised error was promoted to a failure.</p>
<p>However a ^META oriented function can trap that, and react to it, allowing you to continue.  EXCEPT is such a function:</p>
<pre><code>&gt;&gt; 1 / 0 except e -&gt; [print ["The error was" e.id]], 2 + 0
The error was zero-divide
== 2
</code></pre>
<p>One thing that pretty obviously shouldn't count as "moving on" would be parentheses.  Adding parentheses shouldn't change the situation, they just pass any raised errors through:</p>
<pre><code>&gt;&gt; (1 / 0) except e -&gt; [print ["The error was" e.id]], 2 + 0
The error was zero-divide
== 2

&gt;&gt; ((((1 / 0)))) except e -&gt; [print ["The error was" e.id]], 2 + 0
The error was zero-divide
== 2
</code></pre>
<p><strong>But what about things like SET-WORD!s?</strong>  Right now, it does not raise an error and just skips the assignment, and lets the code continue:</p>
<pre><code>&gt;&gt; num: &lt;before&gt;

&gt;&gt; (num: 1 / 0) except e -&gt; [print ["The error was" e.id]], 2 + 0
The error was zero-divide
== 2

&gt;&gt; num
== &lt;before&gt;
</code></pre>
<p><strong>This is a useful pattern, but if we do it for SET-WORD!s then we have to ask whether it should be done for SET the function as well...</strong></p>
<pre><code>&gt;&gt; (set 'num 1 / 0) except e -&gt; [print ["The error was" e.id]], 2 + 0
The error was zero-divide
== 2
</code></pre>
<p>If we do this then the SET function has to take its argument of the value to assign as a ^META argument.  Because raised errors can't be stored in variables, and function parameters are communicated via variables.</p>
<p>This does make SET a more complicated function, and any functions like it might also become complicated.  It's a hard decision to condemn all SET-like functions to take their arguments as ^META so they can proxy any errors and not perform the assignment.</p>
<p>I'll probably have more to say about this, but for the moment both SET and SET-WORD! react to definitional failures by <em>not performing the assignment</em> and <em>propagating the raised error</em>.</p>
          <p><a href="https://forum.rebol.info/t/should-set-word-s-have-raised-error-interception/2015/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.rebol.info/t/should-set-word-s-have-raised-error-interception/2015/1</link>
        <pubDate>Tue, 07 Feb 2023 02:52:51 +0000</pubDate>
        <guid isPermaLink="false">forum.rebol.info-post-2015-1</guid>
        <source url="https://forum.rebol.info/t/should-set-word-s-have-raised-error-interception/2015.rss">Should SET-WORD!s Have &quot;Raised Error Interception&quot;?</source>
      </item>
  </channel>
</rss>
