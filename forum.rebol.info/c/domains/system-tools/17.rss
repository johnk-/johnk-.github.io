<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>System Tools - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/system-tools/17</link>
    <description>Topics in the &#39;System Tools&#39; category Discussion focusing on creating useful system utilities (e.g. replacement for grep, sed, awk, etc.)</description>
    
      <lastBuildDate>Sat, 16 Jul 2022 04:16:07 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/system-tools/17.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>`tac` : Implementation of UNIX&#39;s line reverser</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>System Tools</category>
          <description><![CDATA[
            <p>I mentioned I wanted to study some basic utilities...even more basic than <a href="https://forum.rebol.info/t/greb-grep-using-parse/1818">greb</a>.  Small codebases can put a focus on big design points.</p>
<p>Here was my off-the-cuff line-reverser (TAC ... reverse CAT, where CAT is like Windows Command Shell's TYPE).  I wrote it a year ago, while I was solely focused on getting READ-LINE to work from piped input cross platform at the time...so almost no thought went into it:</p>
<pre><code>; %tac.r, version 0.0.1
;
; * COLLECT the lines
; * REVERSE the collection
; * output the result DELIMIT-ed with newline
;
write-stdout try delimit/tail newline reverse collect [
    until [not keep line: try read-line]
]
</code></pre>
<p><em>Right off the bat, you can see it's using twice the memory it needs to.</em>   It's collecting a block of strings, and then while that whole block is in memory it merges it into one giant string before output.  At minimum, this should loop and write the strings out of the block out one at a time.  (Though doing it this way does draw attention to an interesting point about DELIMIT, which I'll get to later.)</p>
<blockquote>
<p>Note: This line-reversing task is one of those pathological cases that can't be done in a "streaming" way.  You can't start writing anything to the output until you've read the input to the end.  (Doing better needs a random-access I/O PORT! that can SEEK the end of the file and go backwards...but the standard input device can't do this.)</p>
</blockquote>
<h2>But First Things First: The Impact of <a href="https://forum.rebol.info/t/definitional-errors-as-blank-in-null-out-alternative/1880">the New TRY Rules</a>
</h2>
<p>Recall that the old behavior was that TRY would turn NULL into BLANK! in order to stop functions from raising an error on those NULLs.  So here:</p>
<ul>
<li>
<p>we'd stop KEEP from failing when there are no more lines to READ-LINE from, so it acts as a no-op instead</p>
</li>
<li>
<p>we'd stop WRITE-STDOUT from failing when an empty block is collected and DELIMIT returns NULL:</p>
<pre><code>write-stdout try delimit/tail newline reverse collect [  ; TRY DELIMIT =&gt; BLANK!
  until [not keep line: try read-line]  ; TRY READ-LINE =&gt; BLANK!
]
</code></pre>
</li>
</ul>
<p>The new way <img src="https://forum.rebol.info/images/emoji/twitter/sparkles.png?v=9" title=":sparkles:" class="emoji" alt=":sparkles:"> is you go ahead and pass the NULL, and the function raises a very narrow error.  This error is caught by a TRY on the function call itself.</p>
<p>So applying that transformation:</p>
<pre><code>try write-stdout delimit/tail newline reverse collect [  ; TRY WRITE-STDOUT =&gt; NULL
    until [not try keep line: read-line]  ; TRY KEEP =&gt; NULL
]
</code></pre>
<h2>Why Does DELIMIT Ever Return NULL ?</h2>
<p>One might ask if it should never be able to return NULL when you use /TAIL.  At the moment, it does:</p>
<pre><code>&gt;&gt; delimit/tail "," ["a" "b"]
== "a,b,"

&gt;&gt; delimit []
; null

&gt;&gt; delimit/tail "," []
; null
</code></pre>
<p>Maybe that last one should be "," ?  Perhaps when you have /HEAD or /TAIL, you never get null back.</p>
<p>But... let's stick to looking at the use cases.</p>
<h2>What Does %tac.r Want From DELIMIT/TAIL Here?</h2>
<p>If we look at the edge case here, there is a difference between these two situations:</p>
<ul>
<li>
<p>The first call to READ-LINE returns an empty string, and the second call returns NULL</p>
<ul>
<li>
<p>This happens when you pipe in a 1-byte file containing a single line feed, e.g. a file containing one line that's empty.</p>
</li>
<li>
<p>With the code above, COLLECT produces the block <strong><code>[""]</code></strong> for this case</p>
</li>
</ul>
</li>
<li>
<p>The first call to READ-LINE returns NULL</p>
<ul>
<li>
<p>This happens when you pipe in a 0-byte file, e.g. a file containing no lines at all</p>
</li>
<li>
<p>With the code above, COLLECT produces the block <strong><code>[]</code></strong> for this case.</p>
</li>
</ul>
</li>
</ul>
<p><strong>So perhaps you see why DELIMIT chooses to react with some kind of signal when the block contents vaporize.</strong>  It's precisely because cases like this tend to need some kind of special handling, and it's not good to gloss over that.</p>
<p>In this case, the empty block (which corresponds to the 0-byte file input, e.g. 0 lines) should result in there being no write to the output.  So the default behavior of TRY WRITE-STDOUT NULL is the right answer.</p>
<h2>More to Study, I Just Thought That Bit Was Interesting...</h2>
<hr>
<blockquote>
<p><em>"There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult."</em></p>
</blockquote>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/tac-implementation-of-unixs-line-reverser/1883">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/tac-implementation-of-unixs-line-reverser/1883</link>
          <pubDate>Sat, 16 Jul 2022 04:16:07 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1883</guid>
          <source url="https://forum.rebol.info/t/tac-implementation-of-unixs-line-reverser/1883.rss">`tac` : Implementation of UNIX&#39;s line reverser</source>
        </item>
        <item>
          <title>`greb` : Grep Using PARSE?</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>System Tools</category>
          <description><![CDATA[
            <p>There was a Trello card with a remark from <a class="mention" href="https://forum.rebol.info/u/johnk">@johnk</a> about an idea from Pekr:</p>
<blockquote>
<p>Not sure how this would work, but it is an interesting excercise to think about.  Something that bridges between unix and rebol syntax like:</p>
<pre><code>ls | greb 'some alpha ".reb"'
</code></pre>
<p>(assuming a few more built in rules/charsets)</p>
<p>May need a collect/keep kind of wrapper to retrieve data cleanly.</p>
</blockquote>
<p>This would be a very small subset of what <a class="mention" href="https://forum.rebol.info/u/blackattr">@BlackATTR</a>'s QUERY could do...but it seems like it wouldn't hurt if we went ahead and made this program as a test and put it in the <a href="https://github.com/metaeducation/ren-c-stdio">ren-c-stdio</a> repository.</p>
<p>I've already made things like TAC (backwards unix CAT), where the goal is to see how essential and correct we can make things:</p>
<aside class="onebox githubblob">
  <header class="source">
      <a href="https://github.com/metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://github.com/metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21" target="_blank" rel="noopener">metaeducation/ren-c-stdio/blob/7fc17e5bb36ceeb7f688516ba57db5ad84a923c9/tests/tac.r#L19-L21</a></h4>
<pre class="onebox"><code class="lang-r"><ol class="start lines" start="19" style="counter-reset: li-counter 18 ;">
<li>write-stdout try delimit/tail newline reverse collect [</li>
<li>    until [not keep line: try read-line]</li>
<li>]</li>
</ol></code></pre>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p><strong>I like the idea of making GREB similarly essential, and part of the samples.</strong>  Worth doing.</p>
<p>(Note that <code>grep</code> was itself originally framed as a one-line <code>awk</code> program.)</p>
<p>I'll also throw in a little ping that it would be nice to have a simple web app that exposed PARSE functionality with some highlighting, like <a href="http://regexpal.com/">http://regexpal.com/</a>.  Seems sometimes we get such big ideas in our head we forget to do the small ones (!)</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/greb-grep-using-parse/1818">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/greb-grep-using-parse/1818</link>
          <pubDate>Sat, 14 May 2022 05:09:22 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1818</guid>
          <source url="https://forum.rebol.info/t/greb-grep-using-parse/1818.rss">`greb` : Grep Using PARSE?</source>
        </item>
        <item>
          <title>Creating a terminal helper</title>
          <dc:creator><![CDATA[iArnold]]></dc:creator>
          <category>System Tools</category>
          <description><![CDATA[
            <p>Another idea I came up with that can become very useful for system administrators.<br>
To use some applications sometimes you need to establish some connections or a certain setup before they can be started or used.</p>
<p>So for instance to connect to a database a ssh tunnel must be initiated and the program perhaps must be started from a shell script.</p>
<p>Another program will work inside a virtual environment that must be 'activated' first and then a <code>cd</code> to the correct directory.</p>
<p>There could be several other tasks that require one or more terminal windows to be used that could be centralised and managed within Ren-C.</p>
<p>One (other) tool could monitor the status of the different facilities that were managed before.</p>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/creating-a-terminal-helper/1438">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/creating-a-terminal-helper/1438</link>
          <pubDate>Sat, 19 Dec 2020 10:48:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1438</guid>
          <source url="https://forum.rebol.info/t/creating-a-terminal-helper/1438.rss">Creating a terminal helper</source>
        </item>
        <item>
          <title>Creating a Backup program</title>
          <dc:creator><![CDATA[iArnold]]></dc:creator>
          <category>System Tools</category>
          <description><![CDATA[
            <p>This should be an 'easy' project.<br>
Creating a little piece of backup software using Ren-C.</p>
<p>What should it be able to do?</p>
<ul>
<li>
<p>Connect to a remote backup location</p>
</li>
<li>
<p>Use a password that will be stored encrypted after it is provided (or not stored and required for every use)</p>
</li>
<li>
<p>Know which folders to backup</p>
</li>
<li>
<p>Only backup the files that were changes since last backup on the chosen backup volume</p>
</li>
<li>
<p>Preferably have an incremental backup</p>
</li>
</ul>
<p>This is not primarily meant for backing up sourcecode, because git and other svn systems are taking that role already. It is for other documentation and stuff that hangs around on your computer and would be nice to recover after machine loss or transfer to a new one.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/creating-a-backup-program/1391">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/creating-a-backup-program/1391</link>
          <pubDate>Sat, 07 Nov 2020 10:16:08 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1391</guid>
          <source url="https://forum.rebol.info/t/creating-a-backup-program/1391.rss">Creating a Backup program</source>
        </item>
        <item>
          <title>GitHub to Discourse commit tool</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>System Tools</category>
          <description><![CDATA[
            <p>This was used to post the github commits to the change log here.</p>
<p><a href="https://github.com/r3n/renclib/blob/master/scripts/change-log.reb" class="onebox" target="_blank" rel="nofollow noopener">https://github.com/r3n/renclib/blob/master/scripts/change-log.reb</a></p>
<p>Needs touching up and will do that once I get some spare time.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/github-to-discourse-commit-tool/53">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/github-to-discourse-commit-tool/53</link>
          <pubDate>Sat, 20 May 2017 02:47:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-53</guid>
          <source url="https://forum.rebol.info/t/github-to-discourse-commit-tool/53.rss">GitHub to Discourse commit tool</source>
        </item>
        <item>
          <title>About the System Tools category</title>
          <dc:creator><![CDATA[asampal]]></dc:creator>
          <category>System Tools</category>
          <description><![CDATA[
            <p>Discussion focusing on creating useful system utilities (e.g. replacement for grep, sed, awk, etc.)</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-system-tools-category/30">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-system-tools-category/30</link>
          <pubDate>Thu, 18 May 2017 05:16:31 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-30</guid>
          <source url="https://forum.rebol.info/t/about-the-system-tools-category/30.rss">About the System Tools category</source>
        </item>
  </channel>
</rss>
