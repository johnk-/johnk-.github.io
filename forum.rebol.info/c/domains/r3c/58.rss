<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>R3C - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/r3c/58</link>
    <description>Topics in the &#39;R3C&#39; category Users of Ren-C are allowed--in fact very much &lt;em&gt;encouraged&lt;/em&gt;--to create &quot;skins&quot; of the language that reshape it to their tastes.</description>
    
      <lastBuildDate>Wed, 06 Jul 2022 01:00:54 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/r3c/58.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>&quot;Bincode&quot;</title>
          <dc:creator><![CDATA[rgchris]]></dc:creator>
          <category>R3C</category>
          <description><![CDATA[
            <p><a href="https://github.com/rgchris/Scripts/blob/master/rebol-2/bincode.r">'Bincode'</a> is the working name I've given to a pair (well, trio) of functions designed to work with binary formats. I know my general approach here isn't altogether unique, but I think in implementation it has some qualities of its own that I at least have found to be endearing.</p>
<h1>Consume (+ Advance)</h1>
<p>CONSUME takes a reference to a BINARY! and a named binary datatype (such as 'SIGNED-32, 'FLOAT-64, etc) or an INTEGER!, returns that value (or errors out if there's not enough input) and updates the reference to the point after said value.</p>
<pre><code class="lang-nohighlight">source: #{010003}
consume source 'signed-16
; returns 64, source =&gt; #{03}
</code></pre>
<p>Additionally CONSUME can take a BLOCK! in which shorthand functions for the various datatypes are available:</p>
<pre><code class="lang-nohighlight">source: #{03010203}
values: collect [
    consume source [
        loop unsigned-8 [
            keep unsigned-8
        ]
    ]
]
; values =&gt; [1 2 3], source =&gt; #{}
</code></pre>
<p>ADVANCE simply skips a given INTEGER! amount.</p>
<h1>Accumulate</h1>
<p>ACCUMULATE goes in the reverse direction using the same shorthand functions:</p>
<pre><code class="lang-nohighlight">accumulate #{} [
    utf-8 65
    utf-8 8212
    float-64 pi
    repeat x 3 [
        unsigned-8 x
    ]
]
; =&gt; #{41E28094400921FB54442D18010203}
</code></pre>
<p>This snippet is another pass at creating a single-pixel PNG image (with an assist from a R2 DEFLATE wrapper):</p>
<pre><code class="lang-nohighlight">chunkify: func [
    target [binary!]
    header [word!]
    data [binary!]
    /compress
][
    header: as-binary form header

    if compress [
        data: deflate/envelope data 'zlib
    ]

    accumulate target [
        unsigned-32 length? data
        accumulate header
        accumulate data
        accumulate crc32-checksum-of join header data
    ]
]

probe accumulate png: #{} [
    accumulate #{
        89504E47
        0D0A1A0A
    }

    chunkify png 'IHDR #{
        00000001
        00000001
        08 02 00 00 00
    }

    chunkify/compress png 'IDAT #{
        00 CC0000
    }
    
    chunkify png 'tEXt join #{} [
        "Title" null "Single Pixel!"
    ]

    chunkify png 'IEND #{}
]
</code></pre>
<h1>Notes</h1>
<p>Fairly sure this is bait for a lot of where Ren-C has gone with uparse/streaming/ports etc. That's fine, what I'm looking for is the vocabulary that stretches over a handful of common file formats (including <a href="https://forum.rebol.info/t/backtrack-zip/1860">Zip</a>). I don't necessarily think that this is a silver bullet, though it has worked well enough to be used in that domain with enough clarity to make adjustments and retain readability. Doesn't seem too much of a stretch to consider this sitting over a stream or even compressed stream too.</p>
            <p><small>7 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/bincode/1863">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/bincode/1863</link>
          <pubDate>Wed, 06 Jul 2022 01:00:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1863</guid>
          <source url="https://forum.rebol.info/t/bincode/1863.rss">&quot;Bincode&quot;</source>
        </item>
        <item>
          <title>Agree-To-Disagree Points: Places I See Both Sides</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>R3C</category>
          <description><![CDATA[
            <p>I thought I would make a thread for deviations from Rebol2 that I consider to be matters-of-taste, as opposed to where I think there's a hard "right vs. wrong", and provide the code to reverse the decision.</p>
<p><em>(Please discuss the issues on the linked posts--not here.)</em></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862</link>
          <pubDate>Tue, 05 Jul 2022 00:53:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1862</guid>
          <source url="https://forum.rebol.info/t/agree-to-disagree-points-places-i-see-both-sides/1862.rss">Agree-To-Disagree Points: Places I See Both Sides</source>
        </item>
        <item>
          <title>Backtrack: PDF</title>
          <dc:creator><![CDATA[rgchris]]></dc:creator>
          <category>R3C</category>
          <description><![CDATA[
            <p>This backtrack is semi-related to the <a href="https://forum.rebol.info/t/backtrack-zip/1860">Zip Backtrack</a> and expands on the dialect principle used for the Zip/Build function.</p>
<p>It's a departure from the Parse-approach to dialecting and one that I took to try to sail a little closer to the way PDFs are structured.</p>
<p><a href="https://gist.github.com/rgchris/884be89a396a7e4259d1197ad172fcf6">PDF Experiment</a></p>
<h1>Create</h1>
<p>The <code>pdf/create</code> function takes a <code>block!</code> and evaluates its contents in a context containing helper functions. The result should be a completely modeled PDF document ready for serialization:</p>
<pre><code class="lang-auto">doc: pdf/create [
    info [
        title "A Document"
        author "@rgchris"
    ]

    add-page 640x480 [
        ; supported colors:
        ; RGB 0.0.0 - 255.255.255
        ; Gray 0 - 100
        ; CMYK 0.0.0.0 - 100.100.100.100
        ;
        set-fill 0.100.100.0
        set-pen 0.0.0.0

        ; several helper functions are available in page context for
        ; altering the graphics state
        ;
        set-line-width 2

        ; other helper functions apply graphics to the page
        ;
        draw none non-zero [
            rectangle 20x20 600x440
        ]

        draw line none [
            rectangle 530x370 50x50
        ]

        set-dash-array [4 5] 2
        set-line-cap 'round

        draw line none [
            move-to 0x0
            curve-to
                as-pair 0 page/height
                as-pair page/width 0
                as-pair page/width page/height
        ]
    ]

    add-page 200x200 [
        set-pen 204.0.0
        set-fill 10
        set-line-width 2

        ; PUSH creates an isolated graphics state in which changes
        ; do not affect subsequent graphics operations
        ;
        push [
            set-pen 80

            draw line none [
                repeat offset 21 [
                    move-to as-pair 0 offset - 1 * 10 0
                    line-to as-pair 200 offset - 1 * -10 + page/height
                ]
            ]
        ]

        ; this retains the red pen from before the PUSH
        ;
        draw line even-odd [
            rectangle 20x85 30x30
        ]
    ]

    ; fonts/text not yet implemented, this is a no-op
    ;
    add-font /Helvetica [
        spec
    ]
]
</code></pre>
<p>Some functions can be used outside the <code>pdf/create</code> context:</p>
<pre><code class="lang-auto">pdf/add-page doc 400x200 [
    set-pen 10

    draw line non-zero [
        move-to reduce [
            50 page/height - 50
        ]

        line-to 50x100
        line-to 100x100
        line-to 100x50
        close-path
    ]
]
</code></pre>
<p>The model can be serialized using the <code>pdf/render</code> function:</p>
<pre><code class="lang-auto">probe pdf/render doc
</code></pre>
<h1>Relevance</h1>
<p>The context-sensitive functions give both an appearance of dialecting and the transparency and rigor of being regular functions. I think the function specialization in Ren-C would really make this an efficient and scalable approach.</p>
            <p><small>6 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/backtrack-pdf/1861">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/backtrack-pdf/1861</link>
          <pubDate>Mon, 04 Jul 2022 20:51:32 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1861</guid>
          <source url="https://forum.rebol.info/t/backtrack-pdf/1861.rss">Backtrack: PDF</source>
        </item>
        <item>
          <title>Backtrack: Zip</title>
          <dc:creator><![CDATA[rgchris]]></dc:creator>
          <category>R3C</category>
          <description><![CDATA[
            <p>In contemplating what I'm looking to achieve with R3C, I've been backtracking on ways in which I've/we've approached working with common formats.</p>
<p>I've <a href="https://forum.rebol.info/t/anatomy-of-a-zip-scheme/160">mused over Zip</a> before and given thought I'd revisit this first. <a href="https://github.com/rgchris/Scripts/blob/master/rebol-2/zip.r">This time in Rebol 2</a> (along with a <a href="https://github.com/rgchris/Scripts/blob/master/rebol-2/deflate.r">core-friendly Deflate</a> implementation).</p>
<h1>Unpacking</h1>
<p>First goal here is versatility: no <em>unzip and be done</em>—rather try to isolate the atomic steps of retrieval so as to offer more control over the process. Thus:</p>
<pre><code class="lang-auto">archive: zip/load %archive.zip
</code></pre>
<p>Returns an object representing the archive and</p>
<pre><code class="lang-auto">entry: zip/step archive
</code></pre>
<p>Will return the next entry (or none if at the end). So far nothing has been decompressed thus is a relatively cheap operation. Metadata for that entry such as filename/date is readily available.</p>
<pre><code class="lang-auto">entry/filename
entry/date
</code></pre>
<p>As is the compressed content itself:</p>
<pre><code class="lang-auto">content: zip/unpack entry
</code></pre>
<p>With these building blocks, it's easy enough to extract a whole archive or target specific files:</p>
<pre><code class="lang-auto">doc: zip/load %document.odt

while [
    file: zip/step doc
][
    if file/filename == %mimetype [
        probe zip/unpack file
        ; =&gt; "application/vnd.oasis.opendocument.text"
    ]
]
</code></pre>
<h1>Packing</h1>
<p>This presented a few conceptional challenges as to how one represents archives/entries in construction. Essentially an archive is a block of entry objects sharing the same structure as above (conceptually you could just throw those extracted entry objects into a block and pack them, but in writing this I don't recall if I implemented that—need to go back and look, would be cool if so).</p>
<pre><code class="lang-auto">new-archive: reduce [
    zip/prepare %thing #{01234567}
]

write %thing.zip zip/pack new-archive
</code></pre>
<p>Again, a key here is to keep the steps atomized so they can be handled in different ways. One such way is a wrapper that provides shorthand contextual functions (in one sense a 'dialect' but is just regular code).</p>
<pre><code class="lang-auto">write %thing.zip zip/build [
    add-file %mimetype "application/x-rebol+zip"

    repeat count 3 [
        add-file join %thing- count #{01234567}
    ]

    add-comment "A possibly useful note"
]
</code></pre>
<h1>Relevance</h1>
<p>I don't think anything here resembles anything particularly revolutionary, only that it's a departure from the typical Rebol way of doing things that I think opens up some possibilities. This isn't an end point, there's a bit more digging to do</p>
            <p><small>9 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/backtrack-zip/1860">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/backtrack-zip/1860</link>
          <pubDate>Mon, 04 Jul 2022 20:23:47 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1860</guid>
          <source url="https://forum.rebol.info/t/backtrack-zip/1860.rss">Backtrack: Zip</source>
        </item>
        <item>
          <title>The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>R3C</category>
          <description><![CDATA[
            <p>Users of Ren-C are allowed--in fact very much <em>encouraged</em>--to create "skins" of the language that reshape it to their tastes.</p>
<p>The goal of the Ren-C core is merely to offer the most flexibility to those wishing to do this bending.</p>
<p>Christopher Ross-Gill is about as long-time a Rebol user as they come, with many opinions on the topic of Rebol semantics:</p>
<aside class="onebox">
  <article class="onebox-body user-onebox">
    <img alt="" width="60" height="60" src="/user_avatar/forum.rebol.info/rgchris/120/14_2.png" class="avatar onebox-full-image">
    <h3><a href="https://forum.rebol.info/u/rgchris/summary">rgchris</a></h3>
    <div>
        <span class="full-name">Chris</span>
    </div>
      <p><a href="https://reb4.me/r/" class="onebox" target="_blank" rel="noopener">https://reb4.me/r/</a> 
<a href="https://www.youtube.com/watch?v=nJDJVTyp7jo" class="onebox" target="_blank" rel="noopener">https://www.youtube.com/watch?v=nJDJVTyp7jo</a> 
<a href="https://www.youtube.com/watch?v=sM7uGKCZMl0" class="onebox" target="_blank" rel="noopener">https://www.youtube.com/watch?v=sM7uGKCZMl0</a></p>
    <span>Joined May 17, 2017</span>
  </article>
  <div class="clearfix"></div>
</aside>

<p>So he is particularly passionate about the semantics of his "skin", which he calls <strong>R3C</strong>.</p>
<p>This category is for him to document and discuss his work and findings, and to point out where Ren-C has or hasn't allowed him to achieve his goals.</p>
            <p><small>8 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1858">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1858</link>
          <pubDate>Mon, 04 Jul 2022 18:27:45 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1858</guid>
          <source url="https://forum.rebol.info/t/the-r3c-branch-chriss-rebol-or-rebol-3-conservative/1858.rss">The R3C Branch (&quot;Chris&#39;s Rebol&quot; or &quot;Rebol 3 Conservative&quot;)</source>
        </item>
        <item>
          <title>Grafting the Bootstrap Executable to act as Interim R3C</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>R3C</category>
          <description><![CDATA[
            <p><a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> has been between a rock and a hard place... being a Rebol-style code believer with a large corpus, who hasn't been particularly served by either Red or Ren-C.  Unwilling to jump ship for Python or other non-Rebol languages, this has kept him rather stuck in a Rebol2 world.</p>
<p>To make the best of a bad situation, he has put forth the idea of branching Ren-C circa two years ago.  The intent is not to stay there long term, but to believe that the dynamism of Ren-C is such that future versions will be able to emulate this point if desired (considering I've stated that emulation of Rebol2 is a goal, this would be even easier).</p>
<p>I have mixed feelings about this plan, but his participation is valuable enough to be worth compromising to try it out.  So I've <a href="https://github.com/metaeducation/ren-c/commit/aa15391754346c4d318262c4f326f33024917e21">patched R3C to be buildable with more up-to-date compilers</a> in "rigorous" mode (I don't like building without all warnings on, and don't feel like having to install old GCC or MSVC to build an older branch).</p>
<p>I've also done a few patches to try and make R3C closer to mainline.  So far:</p>
<ul>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/c2e0405513322cc6d8006e34d8ea95072d007639">COLLECT and KEEP in PARSE</a></strong> - This was a strongly-requested feature by <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a>, and as such it doesn't make sense to have implemented it and leave it out of R3C.  The syntax is different than Red's version, per his request, and it does rollback...which Red also does not.</p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/99378cda9c2c317568ac46dfeedbdebcecf13e1f">Permissive Group Invisibility</a></strong> - At first I thought this idea wouldn't be useful.  But the more I used "invisibles", the more I wanted to be able to group them like any other value.  <a href="https://forum.rebol.info/t/permissive-group-invisibility/1153">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/a690320b4072e691d379b5f0d790dcf8ed6c2bc4">ENBIN and DEBIN</a></strong> - There are many ways to encode integers as binary or decode them.  Rebol's attempt to have a "standard" TO BINARY! for integers and TO INTEGER! of a binary wound up being a major pain point in the 32-bit to 64-bit conversion for integers.  This would only get worse with arbitrary precision numbers...the next frontier.  These dialects may not be the perfect design, but their weird names make them easy to find...and they're pretty good power tools for the purpose.  <a href="https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270">forum post</a></p>
</li>
<li>
<p><strong><a href="https://github.com/metaeducation/ren-c/commit/2054d94f6f414b57a52c8760562bc741d359e4e1">PRINT NEWLINE is allowed</a></strong> - PRINT's attempt to avoid people getting blindsided by <strong>print value</strong> where value turns out to be something like <strong>[format hard drive]</strong> led it to be more prickly, so you know it's not the kind of thing to be used with ANY-VALUE!.  The compromise of only taking BLOCK! and TEXT! helped keep it from being a generic debug utility...making it a known quantity.  Regardless of this, being able to say PRINT NEWLINE looks nice...and have that mean printing one (and only one) newline.  <a href="https://forum.rebol.info/t/limiting-print-to-block-text-perhaps-blank-to-opt-out/855/2">forum post</a></p>
</li>
</ul>
<p>Really here, the idea is to get engagement on the design...and find out what answers would be satisfying to all involved for the main branch.  So the measure of that engagement will drive how much I can afford to work on accommodating bugfixes and feature patches onto the branch.  But it seems that this is more useful than Redbol--at least to him--at this point in time.</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/grafting-the-bootstrap-executable-to-act-as-interim-r3c/1284">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/grafting-the-bootstrap-executable-to-act-as-interim-r3c/1284</link>
          <pubDate>Wed, 01 Jul 2020 19:47:14 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1284</guid>
          <source url="https://forum.rebol.info/t/grafting-the-bootstrap-executable-to-act-as-interim-r3c/1284.rss">Grafting the Bootstrap Executable to act as Interim R3C</source>
        </item>
  </channel>
</rss>
