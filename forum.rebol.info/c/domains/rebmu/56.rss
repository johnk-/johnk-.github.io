<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rebmu - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/rebmu/56</link>
    <description>Topics in the &#39;Rebmu&#39; category Rebmu is a dialect for solving &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_golf&quot;&gt;Code Golf challenges&lt;/a&gt;, where the goal is to express the source code for solving a puzzle in the fewest characters of source code possible.  See the README here:</description>
    
      <lastBuildDate>Mon, 07 Mar 2022 08:22:26 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/rebmu/56.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Rebmu History Removed from File (is History: a good idea?)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Rebmu</category>
          <description><![CDATA[
            <p>When I started Rebmu I followed along the pattern of having seen people put <strong><code>History:</code></strong> in the headers of files.  And as it got longer, I kind of questioned the value of it.</p>
<p>I'm not sure what the "best practices" for history is, but it's a lot of stuff to skip over when you're trying to get to the meat of a file.  It warrants its own discussion topic (which I guess can be discussed here, with the extracted history).</p>
<pre><code>History: [
    0.1.0 [10-Jan-2010 {Sketchy prototype written to cover only the
    Roman Numeral example I worked through when coming up with the
    idea.  So very incomplete, more a proof of concept.}]

    0.2.0 [22-Jun-2010 {Language more complete, includes examples.
    Ditched concept of mushing symbols like + and - into single
    character operators is removed due to realization that A+
    B+ C+ etc. are more valuable in the symbol space than one
    character for AD.}]

    0.3.0 [24-Jun-2010 {Made backwards compatible with Rebol 2.
    Note that things like CN for continue or PERCENTAGE! datatype
    were added in Rebol 3.  You can use these in your Rebmu programs
    but they will only work if using Rebmu with an r3 interpreter.
    Also did several name tweaks like instead of AA for AND~ it's
    now A~ along with other consistencies.}]

    0.5.0 [16-Feb-2014 {Version bump to indicate growing maturity
    of the language.  Abandon Rebol 2 support.  Rebmu files now
    have proper Rebol ecology headers.}]

    0.6.0 [6-Apr-2014 {Large cleanup creating incompatibility with
    most all previous Rebmu code solutions.  Examples have been updated
    in GitHub.  Major theme was removing the custom IF/UNLESS/EITHER
    implementation and some clearer names.}]

    0.7.0 [15-Sep-2015 {Project revisited to incorporate new ideas and
    decisions from the Ren/C effort.  Incorporates the rebol-proposals
    module to work with experimental language features instead of
    having its own "incubator" project.  "Mu library" features removed
    in favor of embracing the language default more closely.}]
]</code></pre>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/rebmu-history-removed-from-file-is-history-a-good-idea/1798">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/rebmu-history-removed-from-file-is-history-a-good-idea/1798</link>
          <pubDate>Mon, 07 Mar 2022 08:22:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1798</guid>
          <source url="https://forum.rebol.info/t/rebmu-history-removed-from-file-is-history-a-good-idea/1798.rss">Rebmu History Removed from File (is History: a good idea?)</source>
        </item>
        <item>
          <title>Symbols and Mushing in Rebmu</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Rebmu</category>
          <description><![CDATA[
            <p>There are symbols like &amp; and | which were applied somewhat haphazardly in the original Rebmu, as experiments.</p>
<p>For instance, <strong>&amp;</strong> was a shortcut for DOES.</p>
<pre><code>phi: does [print "hi"]
=&gt;
PHI &amp;[print "hi"]
</code></pre>
<p>(There've been murmurs of other uses for &amp;, but no hard decisions on it yet...and even if it were used for HTML characters like <strong>&amp;nbsp</strong>, it might remain free standalone as a symbol.)</p>
<p>For a time, <strong>|</strong> in Ren-C was not something you could redefine as a WORD!, it was its own datatype "BAR!".  But that has been replaced by the successful COMMA!, retaking it as a word.  It was used in function definition, and some of the contractions I've suggested as things like <strong><code>fqC[...]</code></strong> =&gt; <strong>function [a b c] [...]</strong> were contracted as simply <strong><code>c|[...]</code></strong></p>
<p>There was a handling of dots which allowed a quick way of doing redefinitions:</p>
<pre><code>     .[aBCdEF] =&gt; .[a bc d ef] =&gt; a: :bc d: :ef
</code></pre>
<p>There's still some back-and-forth on the handling of lone dot.  I like it being a reduced case of a TUPLE! in some sense...because it makes it easier to write generic fusing code for things like JOIN.  But putting into the new SYMBOL! class (which cannot appear in TUPLE! or PATH!) might have advantages, and helpers to count the dots might serve just as well.</p>
<p>I'm not sure what the in-language default function for plain dot will be, but it's likely that it will not be more powerful than either <strong>.a</strong> or <strong>a.</strong> enough to justify that <strong>a.a</strong> should be interpreted as <strong>a . a</strong>.</p>
<p>It's important to look at the specifics of mushing with symbols as they have no case, so the breakapart rules are different.  I've diagrammed some of these before.</p>
<pre><code>a+b =&gt; a+b  ; compatibility with all lowercase code
a+B =&gt; a+ b  ; favors breaking to the left, vs. a +b
</code></pre>
<p>I'll delve into these justifications, but since I'm deleting the old definitions of things like <strong>a&amp;</strong> and <strong>a|</strong> I wanted to put a placeholder topic for discussing it.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/symbols-and-mushing-in-rebmu/1797">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/symbols-and-mushing-in-rebmu/1797</link>
          <pubDate>Mon, 07 Mar 2022 08:08:03 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1797</guid>
          <source url="https://forum.rebol.info/t/symbols-and-mushing-in-rebmu/1797.rss">Symbols and Mushing in Rebmu</source>
        </item>
        <item>
          <title>Rebmu&#39;s FUNQTION (FQ): Dialecting Function Definition Itself</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Rebmu</category>
          <description><![CDATA[
            <blockquote>
<p>After writing this I realized I had <a href="https://forum.rebol.info/t/function-mu-rebmus-function-generator-dialect/1379">already written a post about this in 2020</a>, but... here it is again, I guess!  Maybe I said it better or worse this time?</p>
</blockquote>
<p><em>(Note: FQ is pronounced EFF-QUEUE, say it carefully. <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">)</em></p>
<p>So in Rebmu, <strong>FN</strong> is a superset of <strong>FUNC</strong> (itself a synonym for <strong>FUNCTION</strong>).</p>
<p>It doesn't do anything <em>terribly</em> tricky because its arguments are both evaluative.  So you can pass it specs and bodies that are variables.  Here's a useless example of taking advantage of that with a spec in a variable:</p>
<pre><code>; define a spec which takes two arguments
S[xY]   ; =&gt; s: [x y]

; define function A that adds X and Y.
AfnS[adXy]  ; =&gt; a: fn s [ad x y]
            ; =&gt; a: function s [add x y]

; define function M that multiplies X and Y
MfnS[mpXy]  ; =&gt; m: fn s [mp x y]
            ; =&gt; m: function s [multiply x y]
</code></pre>
<p><em>...but what might a Code-Golf-Dialected FUNQTION (FQ) Do, unbound by rote evaluation of its parameters?</em>  Let's use our imagination...</p>
<h2>A Quoted Spec could permit Spec Compression</h2>
<p>How about if you gave a WORD! that was a letter and a number, you'd get 3 args starting with that letter?</p>
<pre><code>fqR3[adMPrSt]
; =&gt; fq r3 [ad mp r s t]
; =&gt; fn [r s t] [ad mp r s t]
; =&gt; function [r s t] [add multiply r s t]
; =&gt; function [r s t] [add (multiply r s) t]
</code></pre>
<p>That's a three character savings vs. having to express the block for <strong>[r s t]</strong> explicitly with a plain function:</p>
<pre><code>fn[rSt][adMPrSt]
</code></pre>
<p>If you didn't include a number that might be a different memoization of what the arguments were, such as:</p>
<pre><code>fqA[...] =&gt; fn [a] [...]
fqB[...] =&gt; fn [a b] [...]
fqC[...] =&gt; fn [a b c] [...]

fqX[...] =&gt; fn [z y x] [...]
fqY[...] =&gt; fn [z y] [...]
fqZ[...] =&gt; fn [z] [...]
</code></pre>
<p>The idea being that you need to sort of spread out your variable names in code golf, for instance when working with nested functions.  From a tactical standpoint one might be served to throw in curveballs:</p>
<pre><code>fqM[...] =&gt; fn [m j z] [...]
</code></pre>
<p>Though that lessens the readability/learnability.  Anyway, what else...?</p>
<h2>Variadically Quoted Bodies Could Circumvent Brackets</h2>
<p>Let's say if it found a word in the slot where the body block would ordinarily be, it would treat that as a function that should be called.</p>
<p>To make it easier, let's just think about this un-Rebmu'd:</p>
<pre><code>foo: func [x y z] [any [x y z]]

bar: funq [x y z] any [x y z]
</code></pre>
<p>If FUNQ is variadic and quoting its body slot, it could notice the body does not contain a block but a WORD!.  Seeing that function is ANY, it could count the number of parameters ANY needs and pick them up from the callsite.</p>
<p><em>Such mechanics are within reach using today's FRAME!s</em>, in fact <a href="https://forum.rebol.info/t/looking-into-a-usermode-pointfree/1236">they are used by things like POINTFREE</a>...itself clearly useful in Rebmu.</p>
<h2>What Else Might FQ do?</h2>
<p>There's also things like GROUP!s, and <strong>fq(x)...</strong> could imply a completely different thing from <strong>fq[x]...</strong>, suggesting a mode switch in how the ensuing information is interpreted.</p>
<p>Or <strong>fqX(...)</strong> and <strong>fqX[...]</strong> could be completely different.  What about strings?  How might string interpolation fit into all of this?</p>
<pre><code>ZfqC{Implicit printing of $a and $b and $c?}
; =&gt; z: fn [a b c] [print interpolate {Implicit print of $a and $b and $c}]
</code></pre>
<p>Maybe the implicit printing is different, like FP, and FQ with a string simply interpolates it.</p>
<p><strong>Hopefully you get the drift.</strong>  I'm talking about making Rebmu a powerhouse showcase of what Ren-C is driving at.</p>
<p>How can quoting, variadics, frames, interpolation, and all of that be applied to dialecting the act of function definition itself?</p>
<h1><code>[insert your ideas here]</code></h1>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796</link>
          <pubDate>Mon, 07 Mar 2022 07:07:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1796</guid>
          <source url="https://forum.rebol.info/t/rebmus-funqtion-fq-dialecting-function-definition-itself/1796.rss">Rebmu&#39;s FUNQTION (FQ): Dialecting Function Definition Itself</source>
        </item>
        <item>
          <title>What was REBMU-WRAP (and why we no longer need it)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Rebmu</category>
          <description><![CDATA[
            <p>As I bring the Rebmu dialect up to date I'll try and talk about any teachable moments that it provides.</p>
<p>Let's look at one of the earliest weird functions, REBMU-WRAP:</p>
<pre><code>rebmu-wrap: function [refined [path!] args [block!]] [
    func args compose [
        (refined) (args)
    ]
]
</code></pre>
<p>It was designed to make it (slightly) easier to define something like <code>APO</code> as a synonym for <code>APPEND/ONLY</code>.</p>
<pre><code>APO: rebmu-wrap 'append/only [series value]
</code></pre>
<p>So that turns into effectively:</p>
<pre><code>APO: func [series value] [
    append/only series value
]
</code></pre>
<p><strong>Basically this was an incredibly weak way to save a few characters while making a partial specialization.</strong>  Some of its weaknesses:</p>
<ol>
<li>
<p>You still have to specify the number and names of arguments the specialization takes.</p>
</li>
<li>
<p>If you make a mistake at the time of definition (like mentioning an unavailable refinement) you don't get the error until the call.</p>
</li>
<li>
<p>The other refinements are missing from the wrapped function, e.g. you can't invoke <code>apo/part</code> or <code>apo/dup</code>.</p>
</li>
<li>
<p>You don't inherit anything about the original function's parameter conventions; e.g. if an argument were quoted you'd get the parameter name word you passed for it.</p>
</li>
<li>
<p>Performance-wise you generate a whole new function call...path evaluation...argument evaluation...</p>
</li>
<li>
<p>Your new function doesn't have any HELP... etc. etc.</p>
</li>
</ol>
<h2>How To Make This Better in Classical "Redbol"?</h2>
<p>Let's put yourself in the mind of someone thinking about how I was at that time, <em>who wanted to use the same strategy but merely address (1) and (2)</em>.  So to be able to write the slightly shorter hand:</p>
<pre><code>APO: rebmu-wrap 'append/only
APD: rebmu-wrap 'append/dup
APDP: :rebmu-wrap 'append/dup/part
APPD: :rebmu-wrap 'append/part/dup  ; ...etc.
</code></pre>
<p>This version of REBMU-WRAP would need to analyze the spec, presumably with WORDS-OF:</p>
<pre><code>r3-alpha&gt;&gt; words-of :append
== [series value /part length /only /dup count]
</code></pre>
<p>So you might try something like the following nightmare...<strong>which took me at least an hour to write and debug!</strong> (probably more like two, because of the glitch of trying to mutate the spec in place and needing to notice when the insertion position matches the position a refinement argument is being moved from):</p>
<pre><code>rebmu-wrap: func [refined [path!] /local spec body pos insert-pos item] [
    if not any-function? (action: get first refined) [
        do make error! "first element of path must refer to a function"
    ]
    spec: words-of :action
    body: reduce [refined]
    insert-pos: spec  ; find where refinement args should be inserted
    while [all [not tail? insert-pos not refinement? insert-pos/1]][
        append body insert-pos/1
        insert-pos: next insert-pos
    ]
    foreach refinement-name (next refined) [
        if not pos: find spec to-refinement refinement-name [
            do make error! "missing or duplicate refinement specified"
        ]
        take pos  ; drop refinement from spec
        while [all [not tail? pos not refinement? pos/1 pos != insert-pos]] [
             insert-pos: insert insert-pos item: take pos
             append body item
        ]
    ]
    func ?? spec ?? body
]
</code></pre>
<p>If you try this in R3-Alpha, yes it does indeed work for (1) and (2). I put in the probes so you can see the spec and body of the new function:</p>
<pre><code>r3-alpha&gt;&gt; apo: rebmu-wrap 'append/only
spec: [series value /part length /dup count]
body: [append/only series value]

r3-alpha&gt; apd: rebmu-wrap 'append/dup
spec: [series value count /part length /only]
body: [append/dup series value count]

r3-alpha&gt;&gt; apdp: rebmu-wrap 'append/dup/part
spec: [series value count length /only]
body: [append/dup/part series value count]

r3-alpha&gt;&gt; appd: rebmu-wrap 'append/part/dup
spec: [series value count length /only]
body: [append/part/dup series value count]
</code></pre>
<p>It gets a head-start on (3) by leaving the refinements that haven't been partially specialized on the spec, but they're ignored in the call.</p>
<h2>That's A Lot Of Work for Something That Still Sucks! <img src="https://forum.rebol.info/images/emoji/twitter/nauseated_face.png?v=9" title=":nauseated_face:" class="emoji" alt=":nauseated_face:">
</h2>
<p>When you think of everything it entails to get (3) and (4), you are going to either need to COMPOSE your invocation on each call -or- change methodology to use APPLY.  But even if you are aware of APPLY it doesn't make this a trivial exercise, and doesn't help with (5) or (6).</p>
<p><strong>...and this is why I never even tried to write such things (before)... instead trying to add core interpreter features for partial specialization.</strong></p>
<h2>The Happy New World of Partial Specialization <img src="https://forum.rebol.info/images/emoji/twitter/sun_with_face.png?v=9" title=":sun_with_face:" class="emoji" alt=":sun_with_face:">
</h2>
<p>In today's Ren-C, all you have to do is get a function as a path, and you have (1) (2) (3) (4) (5).</p>
<pre><code>ren-c&gt;&gt; ap: :append
 == #[action! {ap} [series value /part /dup /line /only]]

ren-c&gt;&gt; ap [a b c] [d e]
== [a b c d e]

ren-c&gt;&gt; apo: :append/only
== #[action! {apo} [series value /part /dup /line]]

ren-c&gt;&gt; apo [a b c] [d e]
== [a b c [d e]]

ren-c&gt;&gt; apo/dup [a b c] [d e] 2  ; e.g. demonstrating (3)
== [a b c [d e] [d e]]
</code></pre>
<p>The new function call is just as efficient as the original (you might think of it moreso since there's no path processing, e.g. <strong>apo</strong> is faster than invoking <strong>ap/only</strong>!)</p>
<p>You don't get the HELP inherited automatically (it has an associated cost), but there is a function that will do it if you want to... you say <strong>inherit-meta :apo :append</strong> and then <strong>help apo</strong> will have the help strings copied into its meta information.</p>
<p>So that's some assistance with (6), but do remember that it's not a perfect world when talking about how to automatically write meaningful adjusted help.  If any parameter descriptions refer to the argument you specialized out, it's no longer on the interface, so they may not make sense!</p>
<p><em>(Note: Now that refinements are their own arguments, you can't tell by parameter list alone if a refinement is a 0 or 1 arg case.  It's determined by the typeset: if the typeset is empty--no types accepted--it is a 0 arg refinement.  Something to ponder if this can be done better, but see all the other nice things...like caching the label of the function name for stack traces, etc.)</em></p>
<h2>So long, REBMU-WRAP...</h2>
<p>...but I wanted to write this up just to show a good example of how early experiences playing with Rebmu led me to question Rebol, and want to shore up its abilities.</p>
<blockquote>
<p>"Beware of the Turing tar-pit in which <strong>everything is possible but nothing of interest is easy</strong>."</p>
</blockquote>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/what-was-rebmu-wrap-and-why-we-no-longer-need-it/1795">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/what-was-rebmu-wrap-and-why-we-no-longer-need-it/1795</link>
          <pubDate>Mon, 07 Mar 2022 06:06:27 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1795</guid>
          <source url="https://forum.rebol.info/t/what-was-rebmu-wrap-and-why-we-no-longer-need-it/1795.rss">What was REBMU-WRAP (and why we no longer need it)</source>
        </item>
        <item>
          <title>About the Rebmu category</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Rebmu</category>
          <description><![CDATA[
            <p>Rebmu is a dialect for solving <a href="https://en.wikipedia.org/wiki/Code_golf">Code Golf challenges</a>, where the goal is to express the source code for solving a puzzle in the fewest characters of source code possible.  See the README here:</p>
<aside class="onebox githubfolder">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/hostilefork/rebmu" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://opengraph.githubassets.com/1d67e812b647b23547cabb9d53af90f2917089ce3978ae8f525e7b31a26b475d/hostilefork/rebmu" class="thumbnail" width="690" height="345"></div>

<h3><a href="https://github.com/hostilefork/rebmu" target="_blank" rel="noopener">GitHub - hostilefork/rebmu: Microscopic Rebol Dialect ("mooshed") for Code Golf</a></h3>


  <p><span class="label1">Microscopic Rebol Dialect ("mooshed") for Code Golf</span></p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Significant design points in Ren-C were inspired by wanting to make the implementation and bending of Rebmu more effective.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-rebmu-category/1794">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-rebmu-category/1794</link>
          <pubDate>Mon, 07 Mar 2022 04:15:56 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1794</guid>
          <source url="https://forum.rebol.info/t/about-the-rebmu-category/1794.rss">About the Rebmu category</source>
        </item>
        <item>
          <title>FUNCTION-MU: Rebmu&#39;s Function Generator Dialect</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Rebmu</category>
          <description><![CDATA[
            <p>Rebmu is a laboratory for cool dialecting tricks... <em>one of those tricks I imagined was to see just how much mileage we could get for defining functions with a single character primitive that has no holds barred...</em></p>
<h2>F</h2>
<p>The idea is to make F use tricks with quoting and variadics in order to eliminate the need for certain boilerplates.  For example, it can quote its first argument, allowing a WORD! without a block around it to use as a spec for an arity-1 function:</p>
<pre><code>f x [...]  ;  Would act the same as f [x] [...]
</code></pre>
<blockquote>
<p>Bear in mind that in when "mushed" in Rebmu, that would be <strong><code>fX[...]</code></strong> acting as <strong>f x [...]</strong> because the case transition signals when a new token begins.</p>
<p>And a quick reminder of the game for anyone who has forgotten: if a run of transitions starts with a capital letter instead of a lowercase one, the first acts as a SET-WORD!.   So <strong><code>Fx[...]</code></strong> would act as <strong>f: x [...]</strong></p>
</blockquote>
<p>Being able to avoid the brackets of a spec block and quoting a WORD! is trick number one.  But that's old hat, and even lambda uses that.  <strong><code>x -&gt; [...]</code></strong></p>
<p>So let's get crazier.  <img src="https://forum.rebol.info/images/emoji/twitter/crazy_face.png?v=9" title=":crazy_face:" class="emoji" alt=":crazy_face:"></p>
<h2>Automatic Naming Of Multiple Arguments</h2>
<p>The first generation of Rebmu introduced things like B-FUNCTIONS or C-FUNCTIONS.  The concept was that if you asked for such a function, you'd actually get arguments for a series of letters.</p>
<pre><code> fc [...]  ; acts like `f [a b c] [...]`
 fd [...]  ; acts like `f [a b c d] [...]
</code></pre>
<p>This idea for taking letters at the start of the alphabet was complemented by functions that counted letters <em>backwards</em>.  This way when you were declaring functions inside functions, the names would be less likely to collide:</p>
<pre><code> fx [...]  ; acts like `f [z y x] [...]`
 fw [...]  ; acts like `f [z y x w] [...]`
</code></pre>
<p>Sacrificing two letter names starting with F for this is probably too much, so you might imagine this coming from ISSUE! usage:</p>
<pre><code> f #c [...]  ; giving `f [a b c] [...]`
</code></pre>
<p>But at best that would mush as <strong><code>f#c[...]</code></strong>, at which point you're using up two characters.  So if the word-named feature were variadic you'd break even on two characters:</p>
<pre><code> f a b [...]  ; if this meant `f [a b] [...]` you could write as `fAb[...]`
 f m x [...]  ; and you could pick any characters you wanted, `fMx[...]`
</code></pre>
<p>So the idea would only make sense if there was another meaning for things like <code>fMx</code>, which leads us to...</p>
<h2>Removing The Need For Blocks In The Body</h2>
<p>If we look aside from the spec for a moment, we can ask how quoting might be used in the body.  For instance, what if instead of writing:</p>
<pre><code> f [args] [case [...]]
</code></pre>
<p>You could just write:</p>
<pre><code> f [args] case [...]
</code></pre>
<p>That points to an alternate potential meaning for something like <strong>fMx[...]</strong> as <strong>f [m] [x [...]]</strong> instead of <strong>f [m x] [...]</strong>, and is probably a more potent idea.</p>
<p>This behavior when the body isn't a block would essentially flip F into a mode of being a spin on <a href="https://forum.rebol.info/t/looking-into-a-usermode-pointfree/1236">POINTFREE</a>...which would try to consume "one whole expression's worth" of body code based on what it could figure out from the material it variadically quoted.</p>
<p><em>Such a feature assumes that generated bodies are the unusual case you would use GROUP!s to escape.</em>  So while in plain Ren-C it would run the reverse once on function creation and make a function that prints:</p>
<pre><code> func [] reverse ["Hello" print]  ; e.g. `func [] [print "Hello"]`
</code></pre>
<p>We'd see a different effect, making a function that returned a BLOCK!, calling reverse each time:</p>
<pre><code> f [] reverse ["Hello" print]  ; e.g. `func [] [reverse ["Hello" print]]`
</code></pre>
<p>You'd thus need some kind of escaping mechanism like a GROUP! to get the "use code to generate a body" behavior:</p>
<pre><code> f [] (reverse ["Hello" print])
</code></pre>
<p><strong>I think it probably makes sense to have the generator that gets the single letter <em>NOT</em> be tailored to generating body blocks from code.</strong>  The F would not be an alias for FUNCTION (obviously) but for FUNCTION-MU.  So FN would be just one letter away for anyone who wanted the more conventional version.</p>
<h2>The LET and Auto-Gathering Distinction for Locals</h2>
<p>When you make an assignment to a SET-WORD! inside the body of a function to something that isn't a parameter, how is this interpreted?  How do you designate a local variable vs. reaching outside into the enclosing binding environment?</p>
<p><a href="https://forum.rebol.info/t/in-the-interest-of-shipping-something-rebol2-style-local-s-only/1309">We still don't have answers to this in the language proper.</a>  Which is frustrating.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>But if there's anywhere that auto-gathering of SET-WORD!s as locals is useful as a feature, it's in Rebmu.  So:</p>
<ul>
<li>Is it the default behavior for <strong>F</strong>?</li>
<li>How do you turn it on or off?</li>
</ul>
<blockquote>
<p>I'll point out here that how characters are counted in code golf varies...but if all of unicode is allowed where unicode characters "cost" the same as ASCII, there are choices like dotted-F (<strong>ḟ</strong>) on the table.  Some golfing languages go crazy with this.  But as a general baseline, I think ASCII should be used and then have Unicode definitions as an extension.)</p>
</blockquote>
<p>For now, I think the default should be to assume arguments are not local.  It may be that defining locals is done with a separator like BAR!:</p>
<pre><code> f[aB|cDe][...]  ; acts as `f [a b &lt;local&gt; c d e] [...]`
</code></pre>
<h2>[Your Brainstorm Here]</h2>
<p>Feel free to throw out ideas for any combination.</p>
<p>For instance, what if the body of a function is a text:</p>
<pre><code> foo: f [] "Some String"
</code></pre>
<p>It doesn't make a lot of sense for that to mean "evaluate to the string", because you could have just assigned the string to the variable directly:</p>
<pre><code> foo: "Some String"  ; shorter for same effect
</code></pre>
<p>This would suggest that maybe the body being a string means it should print that string.  But if that's all it does, then why would it need a spec?  So if F gets a string in the spec position it could consider that the end of the variadic definition, and make a function that prints that string.</p>
<pre><code> &gt;&gt; h: f "Hello World"

 &gt;&gt; h
 Hello World
</code></pre>
<p>ISSUE! can print strings without spaces with one less delimiter, so there's that.  But I kind of liked my idea above about auto-generating multiple parameter names.  Then again, there's FILE! for an alternative: <strong>f %c [...]</strong></p>
<p>So what if the spec is a TUPLE!, or a PATH!, or if the body is a SET-GROUP!??  What kinds of practical shortcuts can these take to get the maximum leverage out of <strong>F</strong>?  Maybe if an INTEGER! is in the body position it assumes that means to loop that many times.</p>
<pre><code> &gt;&gt; x: f y 3 [p y]   ; let's say P is PRINT
 &gt;&gt; x "test"
 test
 test
 test
</code></pre>
<p>The concept of "pulling out the block" mentioned above could even cascade there, letting you write <strong>x: f y 3 p y</strong> which can mush as <strong>XfY 3 pY</strong></p>
<p>There's a lot to explore here, and <a class="mention" href="/u/razetime">@razetime</a> please let me know if this is making any sense or not....I've started on bringing Rebmu back to life and hopefully will have it in usable shape this week.</p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/function-mu-rebmus-function-generator-dialect/1379">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/function-mu-rebmus-function-generator-dialect/1379</link>
          <pubDate>Sun, 01 Nov 2020 13:56:24 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1379</guid>
          <source url="https://forum.rebol.info/t/function-mu-rebmus-function-generator-dialect/1379.rss">FUNCTION-MU: Rebmu&#39;s Function Generator Dialect</source>
        </item>
        <item>
          <title>Reviving the Rebmu Dialect</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Rebmu</category>
          <description><![CDATA[
            <p>Rebmu was conceived as something of a puzzle, but not entirely a joke.  My futurist mindset is that code golf will be a growing recreational domain with time...played by humans and AI alike.  And <strong>I've identified code golf as one of the key target domains for the Ren-C project, in its <a href="https://forum.rebol.info/t/mission-statement/667/22">"Minecraft of Programming"</a> objectives.</strong></p>
<p>My intuition is that a truly <em>good</em> code golf language would wind up being useful in other ways; as some sort of compressed bytecode platform.</p>
<p>But I wouldn't be all that bothered if it didn't have great utility...and it was just truly <em>fun</em>, generating a corpus of work comparable to the circuitry that people have been putting together on the <a href="https://www.conwaylife.com/wiki/Main_Page">Game of Life Wiki</a>.</p>
<div class="onebox lazyYT lazyYT-container" data-youtube-id="iDKaz1iB9wQ" data-youtube-title="Rebmu Language Overview (@ Recode 2013)" data-parameters="feature=oembed&amp;wmode=opaque">
  <a href="https://www.youtube.com/watch?v=iDKaz1iB9wQ" target="_blank" rel="noopener">
    <img class="ytp-thumbnail-image" src="https://i.ytimg.com/vi/iDKaz1iB9wQ/maxresdefault.jpg" title="Rebmu Language Overview (@ Recode 2013)" width="690" height="388">
  </a>
</div>

<h2>Rebmu Needs To Be Brought Up To Date</h2>
<p>I haven't run any of the samples in quite a long time.  So they're in a broken state.  I've said that if Rebmu and its puzzles were added as Travis CI tests, they would probably provide particularly good checks of pathological codebases.  (As much of a headache as it is to debug such things, it's worth it in the end.)</p>
<ul>
<li>
<p>I'm looking forward to taking better advantage of the <a href="https://github.com/metaeducation/ren-c/tree/master/src/core/functionals">function deriving mechanisms</a> to make the definition of Rebmu itself easier.  <strong>apd: :append/dup</strong> to specialize append is a lot easier than what had to happen before.</p>
</li>
<li>
<p>Need to take advantage of <a href="https://forum.rebol.info/t/issuechar-token-is-hitting-it-out-of-the-park/1364"><strong>ISSUE! replacing CHAR!</strong></a>...not only do character literals shorten from <strong>#"a"</strong> to <strong><span class="hashtag">#a</span></strong> for those not needing delimiters, but the non-spacing character of <strong><span class="hashtag">#abc</span></strong> in print gives a way to tighten up formatted output.</p>
</li>
<li>
<p>The landscape of names needs a rethink, as things like E could mean ELSE now, which is generic and powerful.</p>
</li>
<li>
<p>Mushing has to be rethought for new constructs like predicates, as things like <strong>until .not [...]</strong> will be very useful.</p>
</li>
<li>
<p>IO always presented a problem, simply because we didn't know how functions like PRINT should <em>actually</em> work.  (I've lamented that we're still trying to figure out how to write "Hello World").  These things are better understood now, and we're a tiny bit farther on things like the <a href="https://forum.rebol.info/t/improving-the-ask-dialect-and-replacing-input/1124">ASK dialect</a></p>
</li>
</ul>
<p>What has historically happened when I've gone and tried to poke at Rebmu is that it just draws my attention to some issue or feature in the interpreter, so I wander off and lose momentum.  But it's probably time to bite the bullet and get it knocked into enough shape...and then add puzzles to it on Travis gradually.</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/reviving-the-rebmu-dialect/1377">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/reviving-the-rebmu-dialect/1377</link>
          <pubDate>Sat, 31 Oct 2020 06:06:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1377</guid>
          <source url="https://forum.rebol.info/t/reviving-the-rebmu-dialect/1377.rss">Reviving the Rebmu Dialect</source>
        </item>
  </channel>
</rss>
