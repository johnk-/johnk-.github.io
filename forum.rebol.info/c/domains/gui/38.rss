<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>GUI - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/gui/38</link>
    <description>Topics in the &#39;GUI&#39; category Developing GUI based applications in Rebol</description>
    
      <lastBuildDate>Fri, 23 Aug 2024 23:08:25 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/gui/38.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Cave-In: GUI Game In Red</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>Because I've idly started to think about what a Ren-C GUI dialect would look like (leveraging the web browser layout engine, of course), I've decided to reluctantly learn about Rebol's historical GUIs.  VID code has traditionally been an eyesore for me, but in the coming months I'll try to dedicate a little time to look at examples--both old and new--from all the various incarnations of the VID dialect <em>(<a href="https://www.rebol.com/docs/view-guide.html">VID</a>, <a href="https://github.com/red/docs/blob/master/en/vid.adoc">Red VID</a>, <a href="https://codeberg.org/hiiamboris/red-spaces/src/branch/master/vids.md">VID/S (Spaces)</a>, <a href="http://www.dobeash.com/rebgui.html">RebGUI</a>, <a href="http://www.rebol.org/view-script.r?script=glayout.r">GLASS</a>, and I've just found out that <a href="https://github.com/red/docs/blob/master/en/draw.adoc">DRAW is a different dialect from VID</a> so there's probably at least 12 more variants of all this stuff)</em></p>
<p>To try and have a little fun with my first one, I'll look at the game <strong>"Cave-In"</strong> by <span class="mention">@PlanetSizeCPU</span> from Red Gitter:</p>
<p><img src="https://gitter.ems.host/_matrix/media/v3/download/gitter.im/e0c12d3abca5509745b25a32a6866b3a502273791811281938799919104?allow_redirect=true" alt="Level.gif" width="637" height="500"></p>
<h2>
<a name="the-code-1" class="anchor" href="https://forum.rebol.info#the-code-1"></a>The Code</h2>
<p>The code is <a href="https://github.com/planetsizecpu/Cave-In">available on GitHub</a>, and it has been committed to as recently as July.</p>
<p>Curiously, the level definitions themselves <a href="https://github.com/planetsizecpu/Cave-In/blob/master/zLevelsDesign.txt">are not in Red syntax</a>.  They're like CSV files, except they use vertical bar as a separator instead of comma, and <strong>#</strong> for to-end-of-line comments</p>
<pre><code># ItemType|ObjectName|FaceName|FaceSize|FaceOffset|Rate|...
...
CAVERN|cavern1|cave|1599x600|0x0|0:0|0x0|0:0|0|0|cavern.png
GOLDBG|gold1|gld1|8x12|340x564|0:0|0x0|0:0|0|1|gold1.png
GOLDBG|gold2|gld2|8x12|310x461|0:0|0x0|0:0|0|1|gold1.png
GOLDBG|gold3|gld3|8x12|650x51|0:0|0x0|0:0|0|1|gold1.png
GOLDBG|gold4|gld4|8x12|200x185|0:0|0x0|0:0|0|1|gold1.png
...
</code></pre>
<p>The implementation is just <a href="https://github.com/planetsizecpu/Cave-In/tree/master/src">four<code> .red</code> source files</a>, three of which are small and the main implementation lives in something called <strong><code>makegame.red</code></strong></p>
<p><a href="https://github.com/planetsizecpu/Cave-In/blob/master/src/makegame.red">https://github.com/planetsizecpu/Cave-In/blob/master/src/makegame.red</a></p>
<h2>
<a name="theres-an-observable-lack-of-rebolism-2" class="anchor" href="https://forum.rebol.info#theres-an-observable-lack-of-rebolism-2"></a>There's an Observable Lack Of... <em>"Rebolism"</em>
</h2>
<p>I don't want to be too critical of someone's early efforts in programming.  This actually reminds me a lot of when I was a kid and got Turbo Pascal for a 286 PC, and tried to write a variation of <a href="http://blog.hostilefork.com/media/machine-language-commodore-64-128/react-compute-gazette.png">a Commodore 64 game called "React"</a>.  The example snippets I learned from were very simple and none even showed you how to break your code into different files, so I just had one long .PAS file... that grew and grew.  Instead of seeing the growing code with tons of conditionals as a problem, I was kind of excited about how big it was getting!</p>
<p>But that aside, there clearly are a lot of repetitive patterns and lack of abstraction.  To pick on <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/makegame.red#L462C1-L474C4">one short example at random</a>:</p>
<pre><code>if (first f/extra/name) = #"a" [
    foreach img GameData/AgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
if (first f/extra/name) = #"f" [
    foreach img GameData/FAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
if (first f/extra/name) = #"p" [
   foreach img GameData/PAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
if (first f/extra/name) = #"y" [
    foreach img GameData/YAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
</code></pre>
<p>But you can see that large-scale repetition of this kind is pervasive.</p>
<p>What I find perplexing is that if people aren't using Rebol's mechanisms, what do they actually <em>like</em> about the language enough that keeps them going with it?</p>
<p>Ren-C takes the refactoring and streamlining potential to new heights.  It makes it easier to put expressions all on one line with good error locality with <a href="https://forum.rebol.info/t/the-void-in-null-out-protocol/1880">VOID-in-NULL-out</a>.  It gives you foolproof <a href="https://forum.rebol.info/t/blank-2022-revisiting-the-datatype/1942/9">truthiness of any item you can put in a block</a> (only antiforms can be are falsey).  NIHIL lets you use <a href="https://forum.rebol.info/t/how-to-choose-between-returning-void-and-nihil/2171/2">put code midstream in any evaluative context without disturbing it</a>, for things like ASSERT and ELIDE to be anywhere you please.  <a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609">The loop result protocol is super neat</a>, and I could go on and on...</p>
<p>...but the basic idea of enabling smooth composition has been there since Rebol2, e.g. you could rewrite the above as:</p>
<pre><code>if (dead: select [
    #"a" AgentDead
    #"f" FAgentDead
    #"p" PAgentDead
    #"y" YAgentDead
] first f/extra/name) [
    foreach img GameData/(dead) [
       f/image: get img wait GameData/AgentDeadDelay
    ]
]
</code></pre>
<p>As Carl said in <a href="https://forum.rebol.info/t/rebols-target-market-newbies-experts-or-other/581"><strong>Rebol: Not for everyone?</strong></a>:</p>
<blockquote>
<p><em>"I've glanced over a lot of REBOL code written by a wide variety of programmers, and quite often I'm floored. Many programmers use REBOL like they're writing in C or BASIC. I can spot it in an instant; they did not bother to learn the fundamental concepts of the REBOL language. When I see that kind of code, I wonder why they bothered to use REBOL at all. C is better written in C. You will never hear me contest that fact."</em></p>
</blockquote>
<p>...but the appeal may be "I <strong>can</strong> Use It Like BASIC!"  I dunno.</p>
<h2>
<a name="timers-and-frame-rates-3" class="anchor" href="https://forum.rebol.info#timers-and-frame-rates-3"></a>Timers And Frame Rates</h2>
<p>The <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L113">definition of the main "layout" GameScr(een)</a> includes a size and position, and uses what appears to be a RATE dialect keyword:</p>
<pre><code>GameScr: layout [
    title "Cave-In"
    size 800x600
    origin 0x0
    space 0x0

    ; Info field is also used for event management!
    at 10x610 info: base 780x30 orange blue font [
        name: "Arial" size: 14 style: 'bold
    ] focus 
    rate GameData/GameRate on-time [
        info/rate: none 
        if CheckStatus [alert "END OF GAME" quit] 
        info/rate: GameData/GameRate
    ]
]
</code></pre>
<p>RATE is defined <a href="https://www.rebol.com/docs/view-guide.html">in the VID dialect</a> as:</p>
<blockquote>
<p><strong>rate</strong> - An INTEGER or TIME that specifies the rate of time events for a face. This is used for animation or repetitive events (such as holding the mouse down on certain types of user interface styles). An INTEGER indicates the number of events per second. A TIME provides the period between events.</p>
</blockquote>
<p>Cave-In apparently uses the time-based parameter, <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L29C2-L34C3">which it initializes and then overwites</a>.</p>
<pre><code>GameRate: 0:00:00.003
either system/platform = 'Windows [
    ; Win cant handle 3ms rate so it goes as fast as possible
    GameRate: 0:00:00.006
][
    ; For other OSs as GTK we must test this value as they handle right
    GameRate: 0:00:00.065
]
</code></pre>
<p>So I take it that <strong><code>rate &lt;time or integer&gt; on-time [...]</code></strong> means that you want callbacks to run the code in the block at the given rate.  I'm not clear on why you would say ON-TIME there vs. just put the block there.</p>
<p>Searching <a href="http://rebol.org">rebol.org</a> for other VID examples using rate, I found <a href="http://www.rebol.org/view-script.r?script=tweener.r"><code>tweener.r</code></a> that does:</p>
<pre><code> rate 1 feel [
     engage: func [face action event] [...]
 ]
</code></pre>
<p>I don't know if ON-TIME is Red-specific or what, or what other things you can put there, or what this means.</p>
<p>There is actually code here for <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L174">adjusting the timings for different CPUs</a>.  That seems to undercut Red's value proposition if that's necessary...isn't this supposed to be speaking about a concrete amount of time that works on all platforms?</p>
<h2>
<a name="main-game-4" class="anchor" href="https://forum.rebol.info#main-game-4"></a>Main Game</h2>
<p>Anyway, the spawning of a modal graphic window instance is done with VIEW.  There's a splashscreen instantiation via VIEW, then a settings instantiation via VIEW, then an instance of GameScr with:</p>
<pre><code>view/options GameScr [
    actors: context [on-key: func [face event][CheckKeyboard face event/key]]
]
</code></pre>
<p>So I'm not clear on what the /OPTIONS is for, that can't be specified in the layout itself.  The <a href="https://www.rebol.com/docs/words/wview.html">Rebol2 documentation for VIEW says</a>:</p>
<blockquote>
<p>Additionally, calls to view can specify options, such as whether the window has borders and is resizable. Single options are provided as a word and multiple options are specified in a block.</p>
<pre><code>out: layout [vh1 "This is a window."]
view/options out [resize no-title]
</code></pre>
</blockquote>
<p>As per usual, I'm baffled...what goes in the layout and what doesn't?  Why isn't Cave-In able to just <strong><code>view GameScr</code></strong> with the keyboard handler mentioned alongside the rate timer in the definitoin of GameScr?</p>
<p>In any case, the code that runs at the RATE calls <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/makegame.red#L15">a function <code>CheckStatus</code></a> that does some work, and returns a truthy value if the game is over or a falsey value to keep on going.</p>
<p>CheckStatus adds the effect of gravity to objects, but that particular global timed function doesn't do things like make the bad guys move around.  It seems individual objects have timers associated with them, e.g. when an "Agent" is being instantiated from a Level <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/loadlevel.red#L139">it makes a FACE! which has its own RATE set</a>, leading to callbacks of its own ON-TIME function:</p>
<pre><code>"A" [  ; "(A)gent"
    set (w) make face! [
        type: 'base
        size: ItemObj/size
        offset: ItemObj/offset
        image: copy ItemObj/image
        extra: ItemObj
        rate: ItemObj/rate
        actors: context [
            on-time: func [f e][AgentMotion f]
        ]
        ItemObj/lives: 64
    ]
    append cave/pane (get w)
]
</code></pre>
<p>So then <code>AgentMotion</code> does the updating.</p>
<h2>
<a name="okay-i-understand-this-one-5" class="anchor" href="https://forum.rebol.info#okay-i-understand-this-one-5"></a>Okay, I Understand This One</h2>
<p>I can see a little bit of the appeal for why someone would have fun hacking on it this way.  Red is giving you some game-engine type autonomy to all the objects, with each face its own timer.  You get some very simple things like an <a href="https://github.com/red/red/blob/dbc93da47047667023a66c5edf1aa1d63ff6f0d0/modules/view/utils.red#L44"><strong><code>overlap?</code></strong> utility function</a> to see if two faces overlap (though it just checks bounding boxes, not collision detection on non-transparent portions).</p>
<p>Now that I'm learning a bit of the terminology, this isn't really using "VID" the dialect hardly at all.  The only VID code is in <a href="https://github.com/planetsizecpu/Cave-In/blob/master/src/cave.red">%cave.red</a> and it does nearly nothing.</p>
<p>But it's using "View", which is kind of like a browser layout engine.  VID is a shorthand for building View code--it's maybe a little like HTML for declaratively specifying the starting point of the DOM...that then gets dynamically juggled all around as objects after that.</p>
<p>Cave-In basically is like one of those pages where if you "View Source" the .HTML is nearly empty, and everything is created dynamically with code.  But that code does not leverage small VID fragments, the way some dynamic JavaScript might use HTML snippets to build DOM code.  (Could it?)</p>
<p>I'll add that I notice nowhere in the source for Cave-In is the <strong><code>on-change*</code></strong> method used, so this isn't using the <a href="https://www.red-lang.org/2016/06/061-reactive-programming.html">"reactive programming" features added by Red</a>, FWIW.</p>
<p>Tune in next week (month?) when I set aside some time to look at another Rebol GUI thing.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/cave-in-gui-game-in-red/2209">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/cave-in-gui-game-in-red/2209</link>
          <pubDate>Fri, 23 Aug 2024 23:08:25 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2209</guid>
          <source url="https://forum.rebol.info/t/cave-in-gui-game-in-red/2209.rss">Cave-In: GUI Game In Red</source>
        </item>
        <item>
          <title>VID Expression Optimization</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <blockquote>
<p>I've really dodged looking at any of the GUI dialects and discussions, and the debates on <em>"what's a face, what's a pane, what's a panel"</em>...glancing at it I don't see any there, there.  My experience with the implementation of the GOB! left me thoroughly unimpressed and reinforced how likely non-interesting it is.  When it comes to UI, need I point out that <a href="https://www.youtube.com/watch?v=M-8k8GEGZPM">things like SeaDragon</a> were being demonstrated 17 years ago.</p>
<p>But given that I was <a href="https://forum.rebol.info/t/more-history-mining-rebol-3-0-front-line-blog/2199">going through all the Rebol 3.0 Front Line blog entries</a>, I did stop to look when a post ventured into some philosophy.</p>
<p>The post I stopped to read was <strong><a href="http://www.rebol.net/r3blogs/0135.html">VID Expression Optimization</a></strong>.  For commentary, I'll reproduce it below, all copyright to Carl.</p>
</blockquote>
<hr>
<p>When VID was created for R2, it was a revolutionary new approach to GUI construction, and we did not yet know what was common and what was not. Now, for R3, I think we know more, and we should use that knowledge.</p>
<p>In R2, VID faces were described mainly with a style name, followed by a sequence of datatypes. For example, you could write:</p>
<pre><code>button "Here" "There" red green 100x32 [browse home]
</code></pre>
<p>So, we placed a high value on expressing modifications in a minimal way. This made VID powerful for expression a great number of variations of styles easily, but we should ask, is that the most common usage?</p>
<p>Well, it's great for demos, but beyond that, most applications do not use that many variations of style, and when they do, they normally define them in a style-sheet for easier management, not within the description of a panel.</p>
<p>This is the CSS concept, where variations are provided via property names. I like this approach because it makes the GUI more readable to those who are not experts. You can see more than the value, you get to know what the value relates to.</p>
<p>For example it is clear to write variations of properties in this way:</p>
<pre><code>width: 20%
area-color: blue
text-color: white
edge-color: silver
</code></pre>
<p>So, indeed, that looks a lot like CSS (or should I say that CSS looks a lot like REBOL, interestingly enough), although not totally identical, it is close enough that HTML-aware users will not fear it.</p>
<p>In other words, we do not need to allow ten or more variations of face (style) properties via direct, unnamed datatypes. Instead, let's allow just a few of the main ones, and put the test into a property sheet format with named fields.</p>
<p>I mention this because as we move to the finalization of VID for the standard built-in GUI method, we want to evaluate the usage patterns and apply RISC concepts to make them optimal for users.</p>
<p>We can now re-examine and optimize the top level grammar of VID. I think we can say that, in order of importance, we have:</p>
<ol>
<li>
<p>style (the name, e.g. BUTTON, PANEL)</p>
</li>
<li>
<p>contents (e.g. button text, panel block)</p>
</li>
<li>
<p>name (the set-word label for it)</p>
</li>
<li>
<p>action (what to do on events)</p>
</li>
<li>
<p>variations (of the style)</p>
</li>
</ol>
<p>Let's take an example:</p>
<pre><code>user-name: field "default name"
</code></pre>
<p>Now, if for some reason you need that field to look different, such as use white text on black box area, you would first want to ask yourself if that should be defined as a new style in the style sheet. But, if not, you could write:</p>
<pre><code>user-name: field "default name" with [
    area-color: black
    text-color: white
]
</code></pre>
<p>This specification is simple and clear. Yes, it is a bit more wordy than VID in R2, but I think it is a better approach.</p>
<p>Some of you may be asking, is the word WITH really necessary? To that I would reply in RISCish way: "what is more common?" Is style variation the most common... probably not.</p>
<p>Something like this is will be much more common:</p>
<pre><code>panel [
    button "Yes"
    button "No"
]
</code></pre>
<p>It's quite common, so it seems to me it makes a better choice for the use of a block.</p>
<p>Finally, I want to mention that this subject can go on and on, and everyone will have their opinions. But, let's set opinions aside, because we must think in terms of usage, not in terms of REBOL dialecting capability, which we know is quite unbounded.</p>
<hr>
<p>Copyright © Carl Sassenrath 2008</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/vid-expression-optimization/2202">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/vid-expression-optimization/2202</link>
          <pubDate>Wed, 21 Aug 2024 00:30:35 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2202</guid>
          <source url="https://forum.rebol.info/t/vid-expression-optimization/2202.rss">VID Expression Optimization</source>
        </item>
        <item>
          <title>VID/S or Spaces, from Red&#39;s hiiamboris</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>I haven't looked at it closely, but what I find interesting is that the demos are trying to show some non-trivial looking things:</p>
<p><a href="https://codeberg.org/hiiamboris/red-spaces" class="inline-onebox">hiiamboris/red-spaces: Draw based widgets for Red - red-spaces - Codeberg.org</a></p>
<p>Here's the code for editing text on a spiral:</p>
<p><a href="https://codeberg.org/hiiamboris/red-spaces/src/branch/master/tests/spiral-test.red" class="inline-onebox">red-spaces/spiral-test.red at master - red-spaces - Codeberg.org</a></p>
<p>I guess there's nothing particularly remarkable about it, in the sense that it's just a clickable canvas...drawing the whole thing every time.  Modern computers just happen to be pretty fast, so duplicating a couple of lorem ipsum texts 10 times isn't going to create all that much of a barrier to doing such a thing...even if Red is nothing special.</p>
<p>What I'd consider "remarkable" would be if there was some design whereby you were inheriting selection behavior...so it was doing some kind of behavior-preserving coordinate transformation on a fully functional text editor widget.  It's not.</p>
<p>So that sort of dampens my interest in looking too much deeper.</p>
<p>The "rotate a form" demo is a more behavior-preserving example, but not a particularly profound one.  I'm not completely sure what the pitch is.  CSS can do transforms, too.  3-D even.</p>
<p><a href="https://impress.js.org/#/bored" class="inline-onebox">impress.js | presentation tool based on the power of CSS3 transforms and transitions in modern browsers | by Bartek Szopka @bartaz</a></p>
            <p><small>6 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/vid-s-or-spaces-from-reds-hiiamboris/1886">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/vid-s-or-spaces-from-reds-hiiamboris/1886</link>
          <pubDate>Sat, 16 Jul 2022 13:21:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1886</guid>
          <source url="https://forum.rebol.info/t/vid-s-or-spaces-from-reds-hiiamboris/1886.rss">VID/S or Spaces, from Red&#39;s hiiamboris</source>
        </item>
        <item>
          <title>Just moving ahead now with GTK3</title>
          <dc:creator><![CDATA[iArnold]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>Decided to just make a start at a GTK(3) extension.</p>
<p>Made a start and just add many GTK3 functions for all kind of GTKWidgets.</p>
<p>(Just have to figure out how to rebUnbox a single character and how to return one. Its type is now issue!)</p>
<p>You can find changes in the gtk3and4 branch</p><aside class="onebox githubfolder">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/r3n/ren-c/tree/gtk3and4" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://opengraph.githubassets.com/c4c153f24fdc05e5e67b7c7a2d93ee3dcefd5085b2213c032a47ddf65f5ac62e/r3n/ren-c" class="thumbnail" width="690" height="345"></div>

<h3><a href="https://github.com/r3n/ren-c/tree/gtk3and4" target="_blank" rel="noopener">r3n/ren-c</a></h3>

<p><a href="https://github.com/r3n/ren-c/tree/gtk3and4" target="_blank" rel="noopener">gtk3and4</a></p>

  <p><span class="label1">Library for embedding a Rebol interpreter into C codebases</span></p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>(Oh I did not test any, and not even compiled, I said I made a start <img src="https://forum.rebol.info/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"> )</p>
            <p><small>22 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/just-moving-ahead-now-with-gtk3/1603">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/just-moving-ahead-now-with-gtk3/1603</link>
          <pubDate>Thu, 13 May 2021 18:28:16 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1603</guid>
          <source url="https://forum.rebol.info/t/just-moving-ahead-now-with-gtk3/1603.rss">Just moving ahead now with GTK3</source>
        </item>
        <item>
          <title>IMAGE! being moved to an extension, backed with BINARY!</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>IMAGE! is not a Beta/One feature.  More interesting would be a dialect for interacting with the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations" rel="nofollow noopener">HTML5 Canvas</a>.</p>
<p>The WebAssembly Story hinges on a small download...to let JS programmers escape out into Rebol to run PARSE or whatever logic they want.  More generally, Rebol itself hinges on being able to be small.  <strong>We need to be able to build a core binary without the IMAGE! support code</strong> <em>(or GOB! code, or VECTOR! code...)</em>.  The important functions (e.g. PARSE) must be lightly embeddable on web pages and elsewhere.</p>
<p>The image code was pretty sloppy.  But as tempting as it is to just delete IMAGE!, it has been kept around and working.  Being able to read/write PNGs or JPGs or GIFs or BMPs is useful.  And the PNG functionality has been updated and integrated/compacted in a fairly interesting way, which has exercised some advanced usages of the libRebol API.  Complex examples like this and the FFI challenge the system's ability to extend for practical needs.</p>
<p><strong>So I've moved IMAGE! to an extension.</strong>  It's still built by default, so we can keep testing the encoders/decoders.  But the JavaScript build does not include it.</p>
<p>One part of being in an extension means that the protocol for dealing with it needs to go through userspace.  The LodePNG extension doesn't get to fiddle the bits of an opaque image structure using system APIs, because IMAGE! has no system API.  It's a "user-defined-type" now...and has to be able to do what it needs by exchanging the currency of common Rebol values.</p>
<p>Being a user-defined type means IMAGE! becomes a victim of the weaknesses other user defined types have (e.g. no ability to define a meaning of FOR-EACH on them, because such an extension mechanism is not yet defined.)  So IMAGE! will get such abilities if-and-when other user defined types do.</p>
<p><strong>But you can still enumerate pixels in images, and what you can do for now is likely even better for most purposes, if anyone were using IMAGE! for anything real.</strong>  The reason is that IMAGE! is now essentially an OBJECT! that aggregates a plain backing store BINARY! with size information.</p>
<h2>MAKE IMAGE! [...x... #{...}] now takes ownership of the BINARY!</h2>
<p>This is to allow things like the PNG decoder to make a BINARY! and then not need to have that copied to MAKE IMAGE!.</p>
<p>The implication is that <em>you now have to give it a binary of the exact number of bytes the RGBA data it wants is</em>.   So if your image is 10x10, the BINARY! you give it in MAKE IMAGE! must be 4 * 10 * 10 bytes long.</p>
<p>This isn't actually taking away any intrinsic functionality.  While it may have <em>seemed</em> you could make images without alpha channels before, they were always 4 RGBA bytes per pixel.  It just gave the UI impression that it had only RGB bytes if all the alpha pixels were zero.  (It should have been 255, because that's opaque, but whatever.)</p>
<p>So if you create a helper like MAKE-RGB-IMAGE which produces a binary that adds the alpha channel, or fills in any missing data because your binary is too short...that helper won't really be substantially less efficient than what the core could have done.</p>
<h2>In return, you get a cool new feature: BYTES OF image</h2>
<pre><code>&gt;&gt; img: make image! 2x2

&gt;&gt; for-each [r g b a] bytes of img [print [r g b a]]
0 0 0 255
0 0 0 255
0 0 0 255
0 0 0 255

&gt;&gt; img/(2x1): 1.2.3.4
&gt;&gt; img/(2x2): 128.128.128

&gt;&gt; img
== make image! [2x2 #{
000000FF01020304000000FF808080FF
}]

&gt;&gt; for-each [r g b a] bytes of img [print [r g b a]]
0 0 0 255
1 2 3 4
0 0 0 255
128 128 128 255
</code></pre>
<h2>For now, NEXT/SKIP/FOR-EACH won't work on IMAGE! itself</h2>
<p>Moving IMAGE! out of the core takes away its participation in the ANY-SERIES! category, and puts it on its own.  And while extension types can add support for anything declared as a GENERIC (e.g. APPEND or COPY) as well as TO or MAKE, they can't (easily) inject themselves as having behaviors for native functions <em>(technically they could HIJACK and now RESKIN parameters if you were desperate, but we really need a better answer than that.)</em></p>
<p>Anyway, the priority was not to add features to images, but rather to make them optional in the build.  But as it's hard to know if things work or not unless you run tests, that means things are getting better in the process, <a href="https://github.com/rebol/rebol-issues/issues/2361" rel="nofollow noopener">even fixing bugs</a>.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/image-being-moved-to-an-extension-backed-with-binary/1056">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/image-being-moved-to-an-extension-backed-with-binary/1056</link>
          <pubDate>Tue, 05 Feb 2019 22:49:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1056</guid>
          <source url="https://forum.rebol.info/t/image-being-moved-to-an-extension-backed-with-binary/1056.rss">IMAGE! being moved to an extension, backed with BINARY!</source>
        </item>
        <item>
          <title>How to cope without a GUI in Ren-c</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>As we all frustratingly know there's no GUI being developed for Ren-c, which is the only actively developed branch of Rebol3.  Atronix do have a GUI build on their website, but it's an old build which lacks many of the changes that exist in the <a href="http://metaeducation.s3.amazonaws.com/index.html" rel="nofollow noopener">current builds</a>.  We did discuss this <a href="https://forum.rebol.info/t/running-r3-gui-with-ren-c/181/43">before</a> but that ended with the view that r3/view was imminent.  Unfortunately it seems Atronix don't have the time to prioritize the move to Ren-c.</p>
<p>So, I was thinking how one could usefully build something with what we have, and I thought back to my <a href="https://github.com/gchiu/Rebol3/blob/master/scripts/gui-server.reb" rel="nofollow noopener">GUI demo</a>.  So, I am thinking that there's a common set of functions which each client knows about.  It could be a script present on the local file, or it could be embedded in the server.  Each client then polls the server for a task. The server marks off each task as it is collected by a client so that another client can't take that task.  A callback to update the GUI is attached to that task.  The client then posts the results back to the server which marks the task as completed, executes the callback with the resulting data, and then removes the task.  So, this would be totally asynchronous as the hard lifting is done by the clients of the GUI based server.</p>
<p>This means that the GUI could be Rebol2, R3/View or even Red when it gets TCP working.  But how much more work would this create? Is it a feasible way of creating an application?</p>
            <p><small>16 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/how-to-cope-without-a-gui-in-ren-c/628">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/how-to-cope-without-a-gui-in-ren-c/628</link>
          <pubDate>Wed, 16 May 2018 08:12:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-628</guid>
          <source url="https://forum.rebol.info/t/how-to-cope-without-a-gui-in-ren-c/628.rss">How to cope without a GUI in Ren-c</source>
        </item>
        <item>
          <title>About the GUI category</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>Developing GUI based applications in Rebol</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-gui-category/627">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-gui-category/627</link>
          <pubDate>Wed, 16 May 2018 07:56:53 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-627</guid>
          <source url="https://forum.rebol.info/t/about-the-gui-category/627.rss">About the GUI category</source>
        </item>
        <item>
          <title>Ren Garden / Status / Future</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>Ren Garden is a project which was originally written in about a month, when I was trying to feel out what a client of the C++ API might look like.  It has been periodically brought up to date so that it runs.  Recently I brought it up to date so it would build, and made a debug drop for Windows:</p>
<p><a href="http://hostilefork.com/media/shared/garden/garden-6-Jan-2018.zip" class="onebox" target="_blank" rel="noopener">http://hostilefork.com/media/shared/garden/garden-6-Jan-2018.zip</a></p>
<p>We pretty much have Ren Garden to thank for the existence of Ren-C at all.  If I hadn't tried to wire up a Rebol evaluator to Qt and a C++ API, I'd not have learned enough about how Rebol was written to start fixing it up.</p>
<p>I think it is a neat demo, and I like to use it when giving presentations (as opposed to just typing in an ordinary console).  But while it is a promising application, it has no shortage of flaws and difficulties in its design.</p>
<p>One smart thing Ren Garden does is build on Qt.  Qt is a nice, fluid, well-documented layer of abstraction across operating systems.  It is true that the DLLs for Qt are somewhat large (the debug ones in particular, and I'd rather people be running debug builds for now).  When the pieces Ren Garden wants are put together (Core, GUI, Network) the release build size w/DLLs is going to be in the ~10mb range.  Doing a static build which only takes the parts of Qt that you use and puts them into the executable is a labor-intensive process--and not one that sufficient incentive has been around to do.  But even then you're not going to see less than ~5mb for that exe.</p>
<p>I'm not too concerned about that.  And if you're using KDE on Linux, you already have Qt--so long as you build for the same version as the shell is using, you shouldn't need any separate libraries.  <em>(Linux distributions try to build all the KDE apps to use the same library versions as the shell is using, and a packaged Ren Garden would do the same.)</em></p>
<p>Yet what it does is apply a <a href="http://doc.qt.io/qt-5/qtextedit.html">QTextEdit widget</a> in a somewhat creative way.  I was trying not to pull in a full WebKit browser, being a bit size-conscious...and not wanting to make something like an Electron app.  This was probably short-sighted, as with the emscripten build we would probably want to make an in-browser experience like Ren Garden, and it would be more able to share code.  In either case, since it's a text editor, there has to be some amount of logic to prune off the old history if you have a long-running/long-printing process, because it just gets slower and slower as you add more lines.  That's one of the many things that haven't been attended to yet.</p>
<p>The INPUT command doesn't currently work, and it goes through some rather experimental I/O code that works with C++ classes.  Writing a C++ "iostream" turned out to be kind of more of a hassle than I realized, and I'm not sure if it's the right direction to be going.  PORT!s in general need a major design review, and then thinking about how such ports will interact with C (or if it will have a special C++ interface) is something that needs to be thought about.</p>
<p>Having Ren Garden around helps stress the API a bit.  It shows weak points, one weak point of which is still threading... it has a separate GUI thread from the evaluator thread, but even that treads on some dodgy territory.</p>
<p>Because it is basically the largest (only?) app that uses Rebol in an embedded way, it is a good test of new ideas and catching design problems...and so I'm glad it's there.  But how to prioritize bug fixes?  What features or experiments should be done with it?  What is the likelihood that having honed drops of it would expand usage?  Who would help, and how?</p>
<p>These are questions people have to answer.  <a class="mention" href="https://forum.rebol.info/u/szeng">@szeng</a> has brought up an interest in whether or not Rebol a Rebol/Qt linkup could supplant the AGG-based /View code... and <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a> keeps bringing that up too.  I've been hesitant to invest more in this because I don't want to be the only one doing it.</p>
<p>Where do other people see this standing, and is anyone willing to commit anything to it?  Or is it just another "if I develop it you <em>might</em> use it" situation?</p>
            <p><small>6 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/ren-garden-status-future/455">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/ren-garden-status-future/455</link>
          <pubDate>Mon, 08 Jan 2018 22:31:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-455</guid>
          <source url="https://forum.rebol.info/t/ren-garden-status-future/455.rss">Ren Garden / Status / Future</source>
        </item>
        <item>
          <title>Running r3-gui with Ren-C?</title>
          <dc:creator><![CDATA[darrencruse]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>I tried to run r3-gui with Ren-C but got a syntax error as follows:</p>
<blockquote>
<p>do <br>
== _</p>
</blockquote>
<blockquote>
<p>do %r3-gui.r3<br>
** Syntax Error: invalid "time" -- ""<br>
** Where: transcode case load --anonymous-- --anonymous-- apply either do<br>
** Near: (line 299) circle 5.5x5.5 7.8<br>
** File: ../src/core/l-scan.c<br>
** Line: 1908</p>
</blockquote>
<p>The same error occurs whether I do the  line or not.</p>
<p>Though I just remembered - I built Ren-C on my macbook - maybe that's my problem?<br>
(r3-gui isn't technically supported on Macs right?)</p>
<p>Prior to this thought I was going to ask for clarification about a <a href="https://github.com/metaeducation/ren-c/wiki/FAQ#is-ren-c-compatible-with-r3-alpha" rel="nofollow noopener">line here</a> which says:</p>
<blockquote>
<p>and (for instance) an experimental R3-GUI is already running under Ren-C in the compatibility mode.</p>
</blockquote>
<p>Is the "experimental R3-GUI" referred diffierent than the atronix or saphirion r3-gui.r3 files?</p>
<p>Is it available somewhere?</p>
            <p><small>45 posts - 6 participants</small></p>
            <p><a href="https://forum.rebol.info/t/running-r3-gui-with-ren-c/181">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/running-r3-gui-with-ren-c/181</link>
          <pubDate>Sun, 02 Jul 2017 18:57:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-181</guid>
          <source url="https://forum.rebol.info/t/running-r3-gui-with-ren-c/181.rss">Running r3-gui with Ren-C?</source>
        </item>
  </channel>
</rss>
