<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Math - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/math/60</link>
    <description>Topics in the &#39;Math&#39; category Rebol languages aren&#39;t a particularly great choice for math.</description>
    
      <lastBuildDate>Tue, 20 Feb 2024 23:27:47 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/math/60.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>About the Math category</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Math</category>
          <description><![CDATA[
            <p>Rebol languages aren't a particularly great choice for math.</p>
<ul>
<li>
<p>Operator precedence follows the left-to-right nature of the evaluator, not the precedence many would expect:</p>
<pre><code>&gt;&gt; 1 + 2 * 3
== 9
</code></pre>
</li>
<li>
<p>Its syntax focus on words-separated-by-spaces, so this expands out expressions:</p>
<pre><code>&gt;&gt; length of [x+y*z]
== 1

&gt;&gt; type of first [x+y*z]
== &amp;[word]
</code></pre>
</li>
<li>
<p>The language is interpreted, meaning that even the simplest operation like <strong>add 1 2</strong> will run thousands of times slower than a compiled instruction.</p>
</li>
</ul>
<hr>
<p>But all programming involves math every now and again.  So this category is for discussing any math issues people want to talk about.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-math-category/2155">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-math-category/2155</link>
          <pubDate>Tue, 20 Feb 2024 23:27:47 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2155</guid>
          <source url="https://forum.rebol.info/t/about-the-math-category/2155.rss">About the Math category</source>
        </item>
        <item>
          <title>Future of the MATH Dialect</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Math</category>
          <description><![CDATA[
            <p>It is basically inevitable that people coming to Rebol will ask about its mathematical evaluation being left-to-right, instead of obeying the precedence order that they are used to.  Red just had a new user try to file it as a bug... 3 days ago:</p>
<p><a href="https://github.com/red/red/issues/5276" class="inline-onebox">Incorrect Order of Arithmetic Operations · Issue #5276 · red/red · GitHub</a></p>
<p><strong>What seemed to make sense to people like me and BrianH was that the core ship with a dialect called MATH.</strong>  The concept was that <strong>math [1 + 2 * 3]</strong> would give <strong>7</strong> and not <strong>9</strong>.  Having something in the box seemed better than having the first line of argument being <em>"you don't want the precedence you think you do"</em>.</p>
<p>But it turned out to be kind of hard to make pleasing.  One key difficulty which <a class="mention" href="https://forum.rebol.info/u/brett">@Brett</a> and I fretted over at some point was that since Rebol isn't "psychic" regarding arity, does not know a-priori how much code an expression will consume:</p>
<pre><code>math [1 + 2 * foo baz bar + 3]

; should it be...
[1 + (2 * (foo baz bar)) + 3]

; or perhaps...
[(1 + (2 * foo)) ((baz bar) + 3)]

; maybe...
[(1 + (2 * foo)) baz (bar + 3)]
</code></pre>
<p><strong>It started to appear that the user would have to put anything that wasn't a number or a math operator in groups.</strong>  There may be some heuristics which tolerate words that look up to numbers vs. functions, but it feels very slippery.</p>
<p>As I've said I hate to be dropping things, but MATH is something that Rebol programmers don't really want in the first place--and I don't think non-Rebol programmers would be satisfied by it.  If it's included in the core that suggests support for it, and there are just too many things in play.</p>
<p>Here is an implementation that was previously included, by Gabriele:</p>
<pre><code>; This MATH implementation is from Gabrielle Santilli circa 2001, found
; via http://www.rebol.org/ml-display-thread.r?m=rmlXJHS. It implements the
; much-requested (by new users) idea of * and / running before + and - in
; math expressions. Expanded to include functions.
;
math: func [
    {Process expression taking "usual" operator precedence into account.}

    expr [block!]
        {Block to evaluate}
    /only
        {Translate operators to their prefix calls, but don't execute}

    ; !!! This creation of static rules helps avoid creating those rules
    ; every time, but has the problem that the references to what should
    ; be locals are bound to statics as well (e.g. everything below which
    ; is assigned with BLANK! really should be relatively bound to the
    ; function, so that it will refer to the specific call.)  It's not
    ; technically obvious how to do that, not the least of the problem is
    ; that statics are currently a usermode feature...and injecting relative
    ; binding information into something that's not the function body itself
    ; isn't implemented.

    &lt;static&gt;

    slash (the /)

    expr-val (_)

    expr-op (_)

    expression  ([
        term (expr-val: term-val)
        opt some [
            ['+ (expr-op: 'add) | '- (expr-op: 'subtract)]
            term (expr-val: compose [(expr-op) (expr-val) (term-val)])
        ]
        &lt;end&gt;
    ])

    term-val (_)

    term-op (_)

    term ([
        pow (term-val: power-val)
        opt some [
            ['* (term-op: 'multiply) | slash (term-op: 'divide)]
            pow (term-val: compose [(term-op) (term-val) (power-val)])
        ]
    ])

    power-val (_)

    pow ([
        unary (power-val: unary-val)
        opt ['** unary (power-val: compose [power (power-val) (unary-val)])]
    ])

    unary-val (_)

    pre-uop (_)

    post-uop (_)

    unary ([
        (post-uop: pre-uop: [])
        opt ['- (pre-uop: 'negate)]
        primary
        opt ['! (post-uop: 'factorial)]
        (unary-val: compose [(post-uop) (pre-uop) (prim-val)])
    ])

    prim-val (_)

    primary ([
        set prim-val any-number!
        | set prim-val [word! | path!] (prim-val: reduce [prim-val])
            ; might be a funtion call, looking for arguments
            opt some [
                nested-expression (append prim-val take nested-expr-val)
            ]
        | ahead group! into nested-expression (prim-val: take nested-expr-val)
    ])

    p-recursion (_)

    nested-expr-val ([])

    save-vars (func [][
            p-recursion: reduce [
                :p-recursion :expr-val :expr-op :term-val :term-op :power-val :unary-val
                :pre-uop :post-uop :prim-val
            ]
        ])

    restore-vars (func [][
            set [
                p-recursion expr-val expr-op term-val term-op power-val unary-val
                pre-uop post-uop prim-val
            ] p-recursion
        ])

    nested-expression ([
            ;all of the static variables have to be saved
            (save-vars)
            expression
            (
                ; This rule can be recursively called as well,
                ; so result has to be passed via a stack
                insert nested-expr-val expr-val
                restore-vars
            )
            ; vars could be changed even it failed, so restore them and fail
            | (restore-vars) fail

    ])
][
    clear nested-expr-val
    let res: either parse3 expr expression [expr-val] [blank]

    either only [
        return res
    ][
        ret: reduce res
        all [
            1 = length of ret
            any-number? ret.1
        ] else [
            fail [
                unspaced ["Cannot be REDUCED to a number (" mold ret ")"]
                ":" mold res
            ]
        ]
        return ret.1
    ]
]
</code></pre>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/future-of-the-math-dialect/2013">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/future-of-the-math-dialect/2013</link>
          <pubDate>Tue, 31 Jan 2023 19:08:42 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2013</guid>
          <source url="https://forum.rebol.info/t/future-of-the-math-dialect/2013.rss">Future of the MATH Dialect</source>
        </item>
        <item>
          <title>Using Shift on BINARY!</title>
          <dc:creator><![CDATA[rgchris]]></dc:creator>
          <category>Math</category>
          <description><![CDATA[
            <p>In wrestling with an older file format, it's notable how entrenched 32-bit numbers are (for bit fiddling purposes) within big specifications. JavaScript itself (I believe) converts its numbers to 32-bit for the purposes of its <strong>&lt;&lt;</strong>, <strong>&gt;&gt;</strong> and <strong>&gt;&gt;&gt;</strong> operators.</p>
<p>As R3 Alpha and Ren-C shifts on 64-bit signed integers, it is not then compatible with some of those older specification. Thus I was trying to twist my brain into figuring out how bridge the gap. In short, I gave up and went with this approach which, while appalling, works as intended:</p>
<pre><code class="lang-plaintext">bits-zero: enbase/base #{0000000000000000} 2
bits-one: enbase/base #{FFFFFFFFFFFFFFFF} 2

brute-force-shift: func [
    value [binary!]
    bits [integer!]
    /logical
    &lt;local&gt; length is-negative
][
    length: 8 * length-of value
    not-negative: zero? 128 and+ value/1
    value: enbase/base value 2

    case [
        not negative? bits [
            insert reverse value skip bits-zero 64 - bits
            reverse head clear skip value length
        ]

        any [
            logical
            not-negative
        ][
            insert value skip tail bits-zero bits
            head clear skip value length
        ]

        &lt;else&gt; [
            insert value skip tail bits-one bits
            head clear skip value length
        ]
    ]

    debase/base value 2
]
</code></pre>
<p>It works on <strong>binary!</strong> values up to 8 bytes and operates based on whatever the width of the input binary is, thus can be used along with <strong>enbin/debin</strong> to operate on <strong>integer!</strong> values at any desired width.</p>
<p>While it'd be useful to have a native version that operated on <strong>integer!</strong> with <strong>enbin/debin</strong>-like paramaters, my case use only needed the op on a <strong>binary!</strong> value without the round trip.</p>
            <p><small>7 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/using-shift-on-binary/1476">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/using-shift-on-binary/1476</link>
          <pubDate>Tue, 26 Jan 2021 14:34:44 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1476</guid>
          <source url="https://forum.rebol.info/t/using-shift-on-binary/1476.rss">Using Shift on BINARY!</source>
        </item>
        <item>
          <title>Soliciting Ideas for a BITWISE Dialect</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Math</category>
          <description><![CDATA[
            <p>With the <a href="https://forum.rebol.info/t/binary-dialected-encoding-decoding-instead-of-to-conversions/1270">creation of ENBIN and DEBIN</a>, I think I showed off how a Rebol approach of dialecting could truly make something easy that's painful in other languages (and a historical pain point in Rebol too, with how people had to wrestle with TO INTEGER! and TO BINARY! conversions).</p>
<p>Under the buzzword <strong>BITWISE</strong> I've had the notion that a little dialect specifically tailored to bit shifting and masking could be created.  While I don't have a clue what it would look like, one thought I had was that instead of trying to come up with a name for AND and OR that's bitwise like AND+ or OR+ (or BITAND and BITOR), instead you'd be able to say something like <strong>bitwise [x and y]</strong>.</p>
<p>But the idea is that <strong>bitwise</strong> would be so capable, that instead of grumbling about how it sucked that you had to type it in, that you would fall into a universe of fast binary functionality that would more likely than not be where you wanted to be if you were in the mode of writing bitwise math.</p>
<p>I know more about what I'd want this dialect to do (and do efficiently) than I know about what it would look like.  Here's a list of <a href="http://aggregate.org/MAGIC/">"Magic" C snippets</a> for doing binary operations.  What bag of tricks might bitwise bring?</p>
<p>Should be able to do:</p>
<ul>
<li>Shifting and Rotation (shift with carry of high bits around to low or vice-versa)</li>
<li>AND/OR/XOR/NAND/NOR/XNOR</li>
<li>Clipping (constrain to 31 bits came up today)</li>
<li>Most/least significant 1 bit or 0 bit (Nth most/least?)</li>
</ul>
<p>I don't know that I'd rule out being able to do PARSE-like things at a bit level, maybe being able to scan bits from low to high and flip or operate on them as you went...injecting plain code to run as you go (also as PARSE allows?)</p>
<p>But it needs to be easy to escape out of.  I don't know if that means that BLOCK! is used for grouping and then parentheses become plain code, or what.</p>
<p>I personally think <strong>bitwise [x and y]</strong> looks favorable compared with <strong>x and+ y</strong>, so I'll just start the conversation there.  Anyone want to offer up some scenarios of how it might throw in power tools for the bit fiddler?</p>
<p>Might it always evaluate to a result which you can say how many bits you want, e.g.</p>
<pre><code>bitwise/bits [x and y] 31
</code></pre>
<p>Make it a skippable parameter as well, to give you the alternative:</p>
<pre><code>bitwise 31 [x and y]
</code></pre>
<p>Stuff like that.  It likely would need to incorporate some of ENBIN and DEBIN's smarts to be useful.</p>
<p>What kind of controls might it have for overflow?  Could it be done in a way that lets you do custom overflow handling if it returns NULL, but then has another value it sets which is the overflow out of the range you specified?</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/soliciting-ideas-for-a-bitwise-dialect/1302">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/soliciting-ideas-for-a-bitwise-dialect/1302</link>
          <pubDate>Wed, 15 Jul 2020 22:59:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1302</guid>
          <source url="https://forum.rebol.info/t/soliciting-ideas-for-a-bitwise-dialect/1302.rss">Soliciting Ideas for a BITWISE Dialect</source>
        </item>
        <item>
          <title>Unifying bitwise AND/OR with short circuit AND/OR</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Math</category>
          <description><![CDATA[
            <p>With conditional short circuit operations for AND, OR, and XOR...we've struggled to find a good name for the bitwise operations.  Previous thread on the topic: <a href="https://forum.rebol.info/t/naming-of-bitwise-or-and-xor/472">"Naming of bitwise OR, AND, XOR"</a></p>
<p>On the end of that thread I made a suggestion I want to bring up again, especially because we have a new option to make even the left hand side parameter convention change.</p>
<h2>
<a name="what-if-group-on-the-right-meant-bitwise-andorxor-1" class="anchor" href="https://forum.rebol.info#what-if-group-on-the-right-meant-bitwise-andorxor-1"></a>What if GROUP! on the right meant bitwise AND/OR/XOR?</h2>
<pre><code>&gt;&gt; #{FF00} and (#{FFFF})
== #{FF00} ;-- e.g. intersect #{FF00} #{FFFF}

&gt;&gt; #{FF00} and [#{FFFF}]
== #{FFFF} ;-- e.g. all [#{FF00} #{FFFF}]
</code></pre>
<p>There are competing needs in parameter convention on the left.  Using the block form has come to need to let the left hand side complete, for instance to enable:</p>
<pre><code>parse data rules or [...]
</code></pre>
<p>But the bitwise operators have historically acted like math ops.</p>
<pre><code>add 1 2 or 3 =&gt; add 1 (2 or 3)
</code></pre>
<p>Doing both is now possible in the same function, due to <em>"variadic left enfix"</em>.  This is what facilitates <a href="https://forum.rebol.info/t/letting-go-of-enfix-path-dreams-but-fixing-it-with-magic/794/2">the SHOVE operator</a></p>
<p>The operator can start running, inspect its quoted right hand side for blockness or groupness, and <em>then</em> decide what convention to use when requesting the left argument.  This request can then run an arbitrary amount of evaluation, before returning to let the right hand side run (or not run, if not necessary, in the BLOCK! right hand side case).  Since the right side was quoted, this won't run anything out of expected order.</p>
<p>Having the parameter convention vary is kind of a separate issue from whether the GROUP! form is bitwise.  But it's worth pointing out that it can be done now.</p>
<h2>
<a name="it-would-make-the-group-semantics-seem-more-consistent-2" class="anchor" href="https://forum.rebol.info#it-would-make-the-group-semantics-seem-more-consistent-2"></a>It would make the GROUP! semantics seem more consistent</h2>
<p>Right now the GROUP! on the right merely forces the result to a LOGIC!.  It's still conditional and not bitwise.<br>
And it's still a short-circuit operation...that means the right hand clause might not run, based on the left hand side.</p>
<p>Yet in general, when you see a GROUP! as an argument to a function (that isn't QUOTE) you expect it to execute.  One thing about the bitwise operators is that they are <em>not</em> short-circuit, they always need to execute both sides to get a result.</p>
<p>Might this make it somewhat easy to explain?  If you see a BLOCK! on the right hand side, it's the short-circuit form and might not run that clause...if you see the GROUP! it will run for sure, it's bitwise?</p>
<h2>
<a name="we-can-duck-coming-up-with-other-names-3" class="anchor" href="https://forum.rebol.info#we-can-duck-coming-up-with-other-names-3"></a>We can duck coming up with other names</h2>
<p>I'm not 100% satisfied with <code>and+</code> or <code>or+</code>.  They aren't terrible.  But they aren't stellar.</p>
<p>While it's a new idea to be facing, I think <strong>and (...)</strong> vs. <strong>and [...]</strong> are pretty easy to see the difference between.  People will make mistakes, I'm sure.  But of all the things in the language you might have to learn, the subtlety of "use a group if you mean bitwise" isn't the biggest hurdle.</p>
<p>It's weird, but what I kind of like about this "right hand side polymorphism" is that it's a new and uniquely Rebol-enabled idea.</p>
<p>Thoughts?</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/unifying-bitwise-and-or-with-short-circuit-and-or/837">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/unifying-bitwise-and-or-with-short-circuit-and-or/837</link>
          <pubDate>Tue, 02 Oct 2018 02:14:36 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-837</guid>
          <source url="https://forum.rebol.info/t/unifying-bitwise-and-or-with-short-circuit-and-or/837.rss">Unifying bitwise AND/OR with short circuit AND/OR</source>
        </item>
        <item>
          <title>Planning Ahead for BigNum INTEGER!</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Math</category>
          <description><![CDATA[
            <p>I've long been an advocate for the idea that INTEGER! should be an <a href="https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">arbitrary precision implementation</a>.  It doesn't make sense to me why a high-level language which is targeting future applications would constrain itself to 32-bit, or (in R3-Alpha's case) 64-bit INTEGER! values.  I've been trying--for instance--to <a href="https://trello.com/c/I6Y3NWlR">"futureproof" conversions of INTEGER! to BINARY!</a>, in anticipation of the change.</p>
<p>Now, due to Red's desire to be involved in cryptocurrency, they are adding BIGNUM! as a distinct datatype from INTEGER!.  Which is not the way I would do it.  INTEGER! already has to detect math overflows in order to give an error when your math is out of range.  <strong>I would prefer INTEGER! to start out using CPU register-size integers, and instead of erroring on overflows, promote the representation into a bignum...on demand.</strong></p>
<h3>
<a name="the-identity-problem-1" class="anchor" href="https://forum.rebol.info#the-identity-problem-1"></a>The Identity Problem</h3>
<p>I suggested that INTEGER! could not hurt for performance for most applications, if it was merely promoted to bignum internal representations on overflow.  But there's an issue of identity in bignum operations.</p>
<p>Today this is the behavior for integers:</p>
<pre><code> foo: func [x [integer!]] [add x 1]
 smallnum: 0
 foo smallnum
 print smallnum  ; prints 0, unaffected
</code></pre>
<p>So each integer cell has its own identity (as an ANY-IMMEDIATE!, <a href="https://en.wikipedia.org/wiki/Value_(computer_science)#R-values_and_addresses">"immediate value"</a>).</p>
<p><strong>ADD</strong> or <strong>+</strong> do not go in and fiddle the bits in a way that is seen by "other instances of that integer", the way that <strong>APPEND</strong> reaches into the "data node" behind a series and affects all instances.</p>
<p>But with BigNums, making a new identity on each addition can be costly:</p>
<pre><code>bignum: 123456789012345678901234567890
loop 1000000 [
    bignum: bignum + 1
]
</code></pre>
<p>How many bignum structures should that be "malloc()" ing?  Naively done, that would be a million or more allocations, because each addition in Rebol is expected to produce a new-and-disconnected integer.</p>
<p>Getting around this by making ADD mutate BigNum--when it doesn't mutate other things--seems inconsistent.  It's not  a new problem, there were some issues with ADD of VECTOR!.  In Red too, see <a href="https://github.com/red/red/issues/2216">"Adding a number to a vector changes the vector itself"</a></p>
<h3>
<a name="proposal-mutating-add-non-mutating-2" class="anchor" href="https://forum.rebol.info#proposal-mutating-add-non-mutating-2"></a>Proposal: Mutating ADD, non-mutating +</h3>
<p>The thought I had would be that INTEGER!s would not be immediate by their nature, but that literals would be LOCK'd by default.</p>
<pre><code> &gt;&gt; x: 10
 &gt;&gt; add x 20
 ** Error, locked integer

 &gt;&gt; x: make integer! 10
 &gt;&gt; add x 20
 &gt;&gt; print x
 30
</code></pre>
<p>Then, + would basically be using ADD with a COPY, and locking the result:</p>
<pre><code> +: enfix func [a b] [
     lock add copy a b
 ]
</code></pre>
<p>For non-bignums, this could be optimized internally so that if the input was a register-size integer...and the output was a register-size integer...no identity node ever need be created.</p>
<p>So someone can still do an inefficient bignum loop with +, if they really wanted to.  But a savvy crypto-person would use ADD so they are modifying the existing bignum in place.</p>
<p>What this does is bolster Rebol's "mutability by default" story about operations like APPEND, bringing it further to ADD.  It addresses the issue with VECTOR!, by saying that <strong>+</strong> will create a new vector while <strong>add</strong> would mutate the existing one.  And it avoids introducing a new BIGNUM! datatype.</p>
<p>Like other changes, this can be skinned with Rebol2/R3-Alpha compatibility to make <strong>add 1 2</strong> work in old code that needs it to.</p>
<p><em>(Note: as a side-benefit, this could remove the need for 64-bit math emulation code on 32-bit platforms.  Currently, in an I-believe-to-be-misguided-standardization-effort, Rebol has tried to give those using the interpreter a baseline confidence that INTEGER! has 64-bit representation...even if that's not the native integer type.  All that code could go, replaced by bignum code that's needed anyway, if you have any cryptography.)</em></p>
            <p><small>22 posts - 4 participants</small></p>
            <p><a href="https://forum.rebol.info/t/planning-ahead-for-bignum-integer/623">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/planning-ahead-for-bignum-integer/623</link>
          <pubDate>Tue, 15 May 2018 16:01:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-623</guid>
          <source url="https://forum.rebol.info/t/planning-ahead-for-bignum-integer/623.rss">Planning Ahead for BigNum INTEGER!</source>
        </item>
  </channel>
</rss>
