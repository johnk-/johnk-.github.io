<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Domains - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/15</link>
    <description>Topics in the &#39;Domains&#39; category Applications of Rebol in various specialized subject domains.</description>
    
      <lastBuildDate>Fri, 23 Aug 2024 23:08:25 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/15.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Cave-In: GUI Game In Red</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <p>Because I've idly started to think about what a Ren-C GUI dialect would look like (leveraging the web browser layout engine, of course), I've decided to reluctantly learn about Rebol's historical GUIs.  VID code has traditionally been an eyesore for me, but in the coming months I'll try to dedicate a little time to look at examples--both old and new--from all the various incarnations of the VID dialect <em>(<a href="https://www.rebol.com/docs/view-guide.html">VID</a>, <a href="https://github.com/red/docs/blob/master/en/vid.adoc">Red VID</a>, <a href="https://codeberg.org/hiiamboris/red-spaces/src/branch/master/vids.md">VID/S (Spaces)</a>, <a href="http://www.dobeash.com/rebgui.html">RebGUI</a>, <a href="http://www.rebol.org/view-script.r?script=glayout.r">GLASS</a>, and I've just found out that <a href="https://github.com/red/docs/blob/master/en/draw.adoc">DRAW is a different dialect from VID</a> so there's probably at least 12 more variants of all this stuff)</em></p>
<p>To try and have a little fun with my first one, I'll look at the game <strong>"Cave-In"</strong> by <span class="mention">@PlanetSizeCPU</span> from Red Gitter:</p>
<p><img src="https://gitter.ems.host/_matrix/media/v3/download/gitter.im/e0c12d3abca5509745b25a32a6866b3a502273791811281938799919104?allow_redirect=true" alt="Level.gif" width="637" height="500"></p>
<h2>
<a name="the-code-1" class="anchor" href="https://forum.rebol.info#the-code-1"></a>The Code</h2>
<p>The code is <a href="https://github.com/planetsizecpu/Cave-In">available on GitHub</a>, and it has been committed to as recently as July.</p>
<p>Curiously, the level definitions themselves <a href="https://github.com/planetsizecpu/Cave-In/blob/master/zLevelsDesign.txt">are not in Red syntax</a>.  They're like CSV files, except they use vertical bar as a separator instead of comma, and <strong>#</strong> for to-end-of-line comments</p>
<pre><code># ItemType|ObjectName|FaceName|FaceSize|FaceOffset|Rate|...
...
CAVERN|cavern1|cave|1599x600|0x0|0:0|0x0|0:0|0|0|cavern.png
GOLDBG|gold1|gld1|8x12|340x564|0:0|0x0|0:0|0|1|gold1.png
GOLDBG|gold2|gld2|8x12|310x461|0:0|0x0|0:0|0|1|gold1.png
GOLDBG|gold3|gld3|8x12|650x51|0:0|0x0|0:0|0|1|gold1.png
GOLDBG|gold4|gld4|8x12|200x185|0:0|0x0|0:0|0|1|gold1.png
...
</code></pre>
<p>The implementation is just <a href="https://github.com/planetsizecpu/Cave-In/tree/master/src">four<code> .red</code> source files</a>, three of which are small and the main implementation lives in something called <strong><code>makegame.red</code></strong></p>
<p><a href="https://github.com/planetsizecpu/Cave-In/blob/master/src/makegame.red">https://github.com/planetsizecpu/Cave-In/blob/master/src/makegame.red</a></p>
<h2>
<a name="theres-an-observable-lack-of-rebolism-2" class="anchor" href="https://forum.rebol.info#theres-an-observable-lack-of-rebolism-2"></a>There's an Observable Lack Of... <em>"Rebolism"</em>
</h2>
<p>I don't want to be too critical of someone's early efforts in programming.  This actually reminds me a lot of when I was a kid and got Turbo Pascal for a 286 PC, and tried to write a variation of <a href="http://blog.hostilefork.com/media/machine-language-commodore-64-128/react-compute-gazette.png">a Commodore 64 game called "React"</a>.  The example snippets I learned from were very simple and none even showed you how to break your code into different files, so I just had one long .PAS file... that grew and grew.  Instead of seeing the growing code with tons of conditionals as a problem, I was kind of excited about how big it was getting!</p>
<p>But that aside, there clearly are a lot of repetitive patterns and lack of abstraction.  To pick on <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/makegame.red#L462C1-L474C4">one short example at random</a>:</p>
<pre><code>if (first f/extra/name) = #"a" [
    foreach img GameData/AgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
if (first f/extra/name) = #"f" [
    foreach img GameData/FAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
if (first f/extra/name) = #"p" [
   foreach img GameData/PAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
if (first f/extra/name) = #"y" [
    foreach img GameData/YAgentDead [f/image: get img wait GameData/AgentDeadDelay]		
]
</code></pre>
<p>But you can see that large-scale repetition of this kind is pervasive.</p>
<p>What I find perplexing is that if people aren't using Rebol's mechanisms, what do they actually <em>like</em> about the language enough that keeps them going with it?</p>
<p>Ren-C takes the refactoring and streamlining potential to new heights.  It makes it easier to put expressions all on one line with good error locality with <a href="https://forum.rebol.info/t/the-void-in-null-out-protocol/1880">VOID-in-NULL-out</a>.  It gives you foolproof <a href="https://forum.rebol.info/t/blank-2022-revisiting-the-datatype/1942/9">truthiness of any item you can put in a block</a> (only antiforms can be are falsey).  NIHIL lets you use <a href="https://forum.rebol.info/t/how-to-choose-between-returning-void-and-nihil/2171/2">put code midstream in any evaluative context without disturbing it</a>, for things like ASSERT and ELIDE to be anywhere you please.  <a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609">The loop result protocol is super neat</a>, and I could go on and on...</p>
<p>...but the basic idea of enabling smooth composition has been there since Rebol2, e.g. you could rewrite the above as:</p>
<pre><code>if (dead: select [
    #"a" AgentDead
    #"f" FAgentDead
    #"p" PAgentDead
    #"y" YAgentDead
] first f/extra/name) [
    foreach img GameData/(dead) [
       f/image: get img wait GameData/AgentDeadDelay
    ]
]
</code></pre>
<p>As Carl said in <a href="https://forum.rebol.info/t/rebols-target-market-newbies-experts-or-other/581"><strong>Rebol: Not for everyone?</strong></a>:</p>
<blockquote>
<p><em>"I've glanced over a lot of REBOL code written by a wide variety of programmers, and quite often I'm floored. Many programmers use REBOL like they're writing in C or BASIC. I can spot it in an instant; they did not bother to learn the fundamental concepts of the REBOL language. When I see that kind of code, I wonder why they bothered to use REBOL at all. C is better written in C. You will never hear me contest that fact."</em></p>
</blockquote>
<p>...but the appeal may be "I <strong>can</strong> Use It Like BASIC!"  I dunno.</p>
<h2>
<a name="timers-and-frame-rates-3" class="anchor" href="https://forum.rebol.info#timers-and-frame-rates-3"></a>Timers And Frame Rates</h2>
<p>The <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L113">definition of the main "layout" GameScr(een)</a> includes a size and position, and uses what appears to be a RATE dialect keyword:</p>
<pre><code>GameScr: layout [
    title "Cave-In"
    size 800x600
    origin 0x0
    space 0x0

    ; Info field is also used for event management!
    at 10x610 info: base 780x30 orange blue font [
        name: "Arial" size: 14 style: 'bold
    ] focus 
    rate GameData/GameRate on-time [
        info/rate: none 
        if CheckStatus [alert "END OF GAME" quit] 
        info/rate: GameData/GameRate
    ]
]
</code></pre>
<p>RATE is defined <a href="https://www.rebol.com/docs/view-guide.html">in the VID dialect</a> as:</p>
<blockquote>
<p><strong>rate</strong> - An INTEGER or TIME that specifies the rate of time events for a face. This is used for animation or repetitive events (such as holding the mouse down on certain types of user interface styles). An INTEGER indicates the number of events per second. A TIME provides the period between events.</p>
</blockquote>
<p>Cave-In apparently uses the time-based parameter, <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L29C2-L34C3">which it initializes and then overwites</a>.</p>
<pre><code>GameRate: 0:00:00.003
either system/platform = 'Windows [
    ; Win cant handle 3ms rate so it goes as fast as possible
    GameRate: 0:00:00.006
][
    ; For other OSs as GTK we must test this value as they handle right
    GameRate: 0:00:00.065
]
</code></pre>
<p>So I take it that <strong><code>rate &lt;time or integer&gt; on-time [...]</code></strong> means that you want callbacks to run the code in the block at the given rate.  I'm not clear on why you would say ON-TIME there vs. just put the block there.</p>
<p>Searching <a href="http://rebol.org">rebol.org</a> for other VID examples using rate, I found <a href="http://www.rebol.org/view-script.r?script=tweener.r"><code>tweener.r</code></a> that does:</p>
<pre><code> rate 1 feel [
     engage: func [face action event] [...]
 ]
</code></pre>
<p>I don't know if ON-TIME is Red-specific or what, or what other things you can put there, or what this means.</p>
<p>There is actually code here for <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/cave.red#L174">adjusting the timings for different CPUs</a>.  That seems to undercut Red's value proposition if that's necessary...isn't this supposed to be speaking about a concrete amount of time that works on all platforms?</p>
<h2>
<a name="main-game-4" class="anchor" href="https://forum.rebol.info#main-game-4"></a>Main Game</h2>
<p>Anyway, the spawning of a modal graphic window instance is done with VIEW.  There's a splashscreen instantiation via VIEW, then a settings instantiation via VIEW, then an instance of GameScr with:</p>
<pre><code>view/options GameScr [
    actors: context [on-key: func [face event][CheckKeyboard face event/key]]
]
</code></pre>
<p>So I'm not clear on what the /OPTIONS is for, that can't be specified in the layout itself.  The <a href="https://www.rebol.com/docs/words/wview.html">Rebol2 documentation for VIEW says</a>:</p>
<blockquote>
<p>Additionally, calls to view can specify options, such as whether the window has borders and is resizable. Single options are provided as a word and multiple options are specified in a block.</p>
<pre><code>out: layout [vh1 "This is a window."]
view/options out [resize no-title]
</code></pre>
</blockquote>
<p>As per usual, I'm baffled...what goes in the layout and what doesn't?  Why isn't Cave-In able to just <strong><code>view GameScr</code></strong> with the keyboard handler mentioned alongside the rate timer in the definitoin of GameScr?</p>
<p>In any case, the code that runs at the RATE calls <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/makegame.red#L15">a function <code>CheckStatus</code></a> that does some work, and returns a truthy value if the game is over or a falsey value to keep on going.</p>
<p>CheckStatus adds the effect of gravity to objects, but that particular global timed function doesn't do things like make the bad guys move around.  It seems individual objects have timers associated with them, e.g. when an "Agent" is being instantiated from a Level <a href="https://github.com/planetsizecpu/Cave-In/blob/2ae789594f9bc38ff1fd310fbc184c9bc4452cd9/src/loadlevel.red#L139">it makes a FACE! which has its own RATE set</a>, leading to callbacks of its own ON-TIME function:</p>
<pre><code>"A" [  ; "(A)gent"
    set (w) make face! [
        type: 'base
        size: ItemObj/size
        offset: ItemObj/offset
        image: copy ItemObj/image
        extra: ItemObj
        rate: ItemObj/rate
        actors: context [
            on-time: func [f e][AgentMotion f]
        ]
        ItemObj/lives: 64
    ]
    append cave/pane (get w)
]
</code></pre>
<p>So then <code>AgentMotion</code> does the updating.</p>
<h2>
<a name="okay-i-understand-this-one-5" class="anchor" href="https://forum.rebol.info#okay-i-understand-this-one-5"></a>Okay, I Understand This One</h2>
<p>I can see a little bit of the appeal for why someone would have fun hacking on it this way.  Red is giving you some game-engine type autonomy to all the objects, with each face its own timer.  You get some very simple things like an <a href="https://github.com/red/red/blob/dbc93da47047667023a66c5edf1aa1d63ff6f0d0/modules/view/utils.red#L44"><strong><code>overlap?</code></strong> utility function</a> to see if two faces overlap (though it just checks bounding boxes, not collision detection on non-transparent portions).</p>
<p>Now that I'm learning a bit of the terminology, this isn't really using "VID" the dialect hardly at all.  The only VID code is in <a href="https://github.com/planetsizecpu/Cave-In/blob/master/src/cave.red">%cave.red</a> and it does nearly nothing.</p>
<p>But it's using "View", which is kind of like a browser layout engine.  VID is a shorthand for building View code--it's maybe a little like HTML for declaratively specifying the starting point of the DOM...that then gets dynamically juggled all around as objects after that.</p>
<p>Cave-In basically is like one of those pages where if you "View Source" the .HTML is nearly empty, and everything is created dynamically with code.  But that code does not leverage small VID fragments, the way some dynamic JavaScript might use HTML snippets to build DOM code.  (Could it?)</p>
<p>I'll add that I notice nowhere in the source for Cave-In is the <strong><code>on-change*</code></strong> method used, so this isn't using the <a href="https://www.red-lang.org/2016/06/061-reactive-programming.html">"reactive programming" features added by Red</a>, FWIW.</p>
<p>Tune in next week (month?) when I set aside some time to look at another Rebol GUI thing.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/cave-in-gui-game-in-red/2209">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/cave-in-gui-game-in-red/2209</link>
          <pubDate>Fri, 23 Aug 2024 23:08:25 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2209</guid>
          <source url="https://forum.rebol.info/t/cave-in-gui-game-in-red/2209.rss">Cave-In: GUI Game In Red</source>
        </item>
        <item>
          <title>VID Expression Optimization</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>GUI</category>
          <description><![CDATA[
            <blockquote>
<p>I've really dodged looking at any of the GUI dialects and discussions, and the debates on <em>"what's a face, what's a pane, what's a panel"</em>...glancing at it I don't see any there, there.  My experience with the implementation of the GOB! left me thoroughly unimpressed and reinforced how likely non-interesting it is.  When it comes to UI, need I point out that <a href="https://www.youtube.com/watch?v=M-8k8GEGZPM">things like SeaDragon</a> were being demonstrated 17 years ago.</p>
<p>But given that I was <a href="https://forum.rebol.info/t/more-history-mining-rebol-3-0-front-line-blog/2199">going through all the Rebol 3.0 Front Line blog entries</a>, I did stop to look when a post ventured into some philosophy.</p>
<p>The post I stopped to read was <strong><a href="http://www.rebol.net/r3blogs/0135.html">VID Expression Optimization</a></strong>.  For commentary, I'll reproduce it below, all copyright to Carl.</p>
</blockquote>
<hr>
<p>When VID was created for R2, it was a revolutionary new approach to GUI construction, and we did not yet know what was common and what was not. Now, for R3, I think we know more, and we should use that knowledge.</p>
<p>In R2, VID faces were described mainly with a style name, followed by a sequence of datatypes. For example, you could write:</p>
<pre><code>button "Here" "There" red green 100x32 [browse home]
</code></pre>
<p>So, we placed a high value on expressing modifications in a minimal way. This made VID powerful for expression a great number of variations of styles easily, but we should ask, is that the most common usage?</p>
<p>Well, it's great for demos, but beyond that, most applications do not use that many variations of style, and when they do, they normally define them in a style-sheet for easier management, not within the description of a panel.</p>
<p>This is the CSS concept, where variations are provided via property names. I like this approach because it makes the GUI more readable to those who are not experts. You can see more than the value, you get to know what the value relates to.</p>
<p>For example it is clear to write variations of properties in this way:</p>
<pre><code>width: 20%
area-color: blue
text-color: white
edge-color: silver
</code></pre>
<p>So, indeed, that looks a lot like CSS (or should I say that CSS looks a lot like REBOL, interestingly enough), although not totally identical, it is close enough that HTML-aware users will not fear it.</p>
<p>In other words, we do not need to allow ten or more variations of face (style) properties via direct, unnamed datatypes. Instead, let's allow just a few of the main ones, and put the test into a property sheet format with named fields.</p>
<p>I mention this because as we move to the finalization of VID for the standard built-in GUI method, we want to evaluate the usage patterns and apply RISC concepts to make them optimal for users.</p>
<p>We can now re-examine and optimize the top level grammar of VID. I think we can say that, in order of importance, we have:</p>
<ol>
<li>
<p>style (the name, e.g. BUTTON, PANEL)</p>
</li>
<li>
<p>contents (e.g. button text, panel block)</p>
</li>
<li>
<p>name (the set-word label for it)</p>
</li>
<li>
<p>action (what to do on events)</p>
</li>
<li>
<p>variations (of the style)</p>
</li>
</ol>
<p>Let's take an example:</p>
<pre><code>user-name: field "default name"
</code></pre>
<p>Now, if for some reason you need that field to look different, such as use white text on black box area, you would first want to ask yourself if that should be defined as a new style in the style sheet. But, if not, you could write:</p>
<pre><code>user-name: field "default name" with [
    area-color: black
    text-color: white
]
</code></pre>
<p>This specification is simple and clear. Yes, it is a bit more wordy than VID in R2, but I think it is a better approach.</p>
<p>Some of you may be asking, is the word WITH really necessary? To that I would reply in RISCish way: "what is more common?" Is style variation the most common... probably not.</p>
<p>Something like this is will be much more common:</p>
<pre><code>panel [
    button "Yes"
    button "No"
]
</code></pre>
<p>It's quite common, so it seems to me it makes a better choice for the use of a block.</p>
<p>Finally, I want to mention that this subject can go on and on, and everyone will have their opinions. But, let's set opinions aside, because we must think in terms of usage, not in terms of REBOL dialecting capability, which we know is quite unbounded.</p>
<hr>
<p>Copyright © Carl Sassenrath 2008</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/vid-expression-optimization/2202">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/vid-expression-optimization/2202</link>
          <pubDate>Wed, 21 Aug 2024 00:30:35 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2202</guid>
          <source url="https://forum.rebol.info/t/vid-expression-optimization/2202.rss">VID Expression Optimization</source>
        </item>
        <item>
          <title>More History Mining: Rebol 3.0 Front Line Blog</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Redbol</category>
          <description><![CDATA[
            <p>I did a <a href="https://forum.rebol.info/t/mining-history-for-anything-relevant-carls-rebol-blog/2197">quick full skim-through of Carl's Rebol Blog</a>, which split off into a second blog to discuss technical issues in R3-Alpha.</p>
<p>The second blog kicked off on April 6, 2006:</p>
<p><a href="http://www.rebol.net/r3blogs/0001.html">http://www.rebol.net/r3blogs/0001.html - <strong>"Welcome to the REBOL 3.0 Front Line..."</strong></a></p>
<p>It got up to 352 entries, tapping out on February 20, 2011 (which was prior to the open-sourcing):</p>
<p><a href="http://www.rebol.net/r3blogs/0352.html">http://www.rebol.net/r3blogs/0352.html - <strong>"Relative speeds from compiler optimizations"</strong></a></p>
<h2>
<a name="again-im-skimming-it-for-anything-useful-1" class="anchor" href="https://forum.rebol.info#again-im-skimming-it-for-anything-useful-1"></a>Again, I'm Skimming It For Anything Useful</h2>
<p>However <strong>there is a lot more here to react to</strong>.  This could take days!</p>
<p>But I do think it's worth it, in part just to kind of help put together a big picture of where this project was and where it is now.</p>
<ul>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0002.html">Introduction of TYPESET!</a></strong> - Oh... Rebol2 didn't have them?  <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20"> Well, neither does Ren-C... <a href="https://forum.rebol.info/t/the-typeset-representation-problem/1300/12">typesets are replaced by type constraints</a>.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0003.html">MAKE Function Used To Be Variadic</a></strong> - I don't think I'm a fan of MAKE being variadic, but I have questioned the idea that <a href="https://forum.rebol.info/t/debunking-the-arity-1-make/1591">there even need to <em>be</em> a MAKE FUNCTION!</a>, vs just having FUNC be an arity-2 native to start with.  This actually may be more prescient than I imagined, as there is no function datatype any longer... <a href="https://forum.rebol.info/t/taking-action-on-function-vs-action/596/6">functions are just antiform FRAME!s</a>.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0006.html">To COPY or not COPY</a></strong> - I've sometimes critiqued Carl for seeming to have not confronted Rebol's actual core flaws head on.  But here he does...mentioning new users getting bitten by mutability -and- also the problems from mutable binding on a block being passed in to two different MAKE OBJECT! calls.  I've been satisfied with Ren-C's answer to the first issue by the <a href="https://forum.rebol.info/t/value-vs-series-modification-bit-const-and-mutable/976">CONST implementation</a>--which has held up super well for years now.  And <a href="https://forum.rebol.info/t/member-functions-in-the-era-of-pure-virtual-binding/2190">how object creation works</a> is undergoing a renaissance as I type this...no mutable binding (or even virtual blanket binding) required.</p>
<ul>
<li>It turns out there was a period in R3-Alpha where it was deep copying object specs <a href="http://www.rebol.net/r3blogs/0212.html">and people eventually complained</a>.  He says he was waiting to see if anyone noticed.  I do think it goes to show how little truly sophisticated Rebol code there was in practice, for people to not be able to tell sooner.</li>
</ul>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0007.html">Hot Errors Removed</a></strong> - He says <em>"These hot errors turned out to be overkill, and the benefit of error locality was offset by the difficulty of handling error values in general."</em>  But in effect this is another decision where Ren-C went more in a Rebol2 direction, <a href="https://forum.rebol.info/t/fail-vs-return-raise-the-new-age-of-definitional-errors/1852">introducing a whole new antiform error design</a>.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0008.html">No Out Of Range Errors With FIRST, SECOND, etc.</a></strong> - Because an early development of Ren-C was to make FIRST, SECOND, etc. specializations of PICK... I'd always thought of them as being related.  Apparently at one time they were not.  In any case, the issue of range errors has been something that's crossed my mind... and I think I'd rather you have to say <strong><code>try fourth</code></strong> in order to tolerate out of range errors.  <a href="https://forum.rebol.info/t/why-doesnt-third-1-2-trigger-a-range-check-error/1825/4">But the unification of PICK mechanics and TUPLE! selection, e.g. <strong><code>block.3</code></strong> is the same as <strong><code>pick block 3</code></strong> throws a wrench in it.</a>  This is still an open question.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0009.html">The 64-bit question</a></strong> - Wow, this is still not decided.  Ren-C still uses 32-bit indices (but stores them as <code>int_fast32_t</code> etc. so they'll use 64 bits of space if the registers make it faster).  It hasn't been an issue at the forefront.  I'm more interested in distinguishing in the code distinct datatypes for 1-based "Index" vs. 0-based "Offset" and making sure those are distinct types that are harder to mix up.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0010.html">JIT Binding</a></strong> - I've never heard of this and don't believe I saw any code for it.  On the surface it sounds like a relative of virtual binding, but it mutates the bindings in the block permanently and just sounds like something strange that never saw the light of day.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0011.html">Debug Hook</a></strong> - Here he talks about being able to essentially break into the console at the moment of a FAIL and inspect the stack.  One thing about historical Rebol is that because error trapping was frequent (e.g. ATTEMPT etc.) and being used as a programming style, you'd be getting a lot of false hits.  Ren-C's error handling model is such that if you handle an error that is generally done by reacting to a RAISE before it's actually promoted to a FAIL, so you would not be getting broken into the debugger constantly in the casual operation of your code.  We do need this.  I believe in my heart that I am being attentive to the needs of a debugger, but there some more giant issues to knock down first.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0012.html">CLOSURE functions</a></strong> - nope, <a href="https://forum.rebol.info/t/relative-binding-and-frame-internals/1344">all functions are closure-semantics now</a>...without the crazy overhead of deep copying and binding the body of a function on every call!</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0013.html">ALIAS</a></strong> - Old ALIAS was removed long ago, because it was crazy.  I've written about <a href="https://forum.rebol.info/t/the-return-of-alias/2129">reviving this idea more reasonably for modern times</a>.</p>
<ul>
<li>When <a href="http://www.rebol.net/r3blogs/0242.html">Carl wrote about his feelings about removing ALIAS</a>, he said <em>"Perhaps you've seen a change in my attitude... considering how long it's taking to get R3 out the door!"</em>
</li>
</ul>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0014.html">HASH!</a></strong> - I covered this in the other blog response, but the comments here might be useful.  <a href="http://www.rebol.net/r3blogs/0052.html">He talks about it in a later post as well.</a>  And then again, <a href="http://www.rebol.net/r3blogs/0054.html">offers some conclusions</a></p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0015.html">Getting More Information From FOR-EACH</a></strong> - Asking for not just the item but the series position is one idea.  But coming up with ways to ask for more information in enumerations has been explored a number of places.  I've wanted to be able to enumerate and know things like "is this the last element" or "is this the first element" and be able to check that easily.  <span class="mention">@hiiamboris</span> has a fancy FOR-EACH that <a href="https://codeberg.org/hiiamboris/red-common/src/branch/master/new-each.red#L613">if you use a refinement in the spec it assumes you want the index at that position</a>, etc.  These are interesting ideas, so definitely want to look into them.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0016.html">OBJECT! Field Type Constraints</a></strong> - I've wondered about this.  It's definitely the case that languages which don't support type information wind up having another language layered on top of it that does (e.g. TypeScript).  But this was never in R3-Alpha, and hasn't been a priority.  I note <a href="http://www.rebol.net/r3blogs/0042.html">he also mentions this kind of type constraint in module specs.</a></p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0017.html">! and !=</a></strong> - I was never a fan of adding <strong><code>!</code></strong> but we do support <strong><code>!=</code></strong> My biggest problem is that != and == are a pair in C, but not a pair in Rebol: != is paired with = for lax equality, and !== is paired with == for strict equality.  That makes it more confusing than anything, and I've meant to resolve this but it's another thing that's slipped.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0019.html">Considering Setters</a></strong> - I've mentioned in the past that Ren-C might have an answer to this, where you could use something like <strong><code>obj.member.</code></strong> to get at the "real" value bypassing the functions that assign them.  There's a big bag of tricks in Ren-C to implement these kinds of features, but seems there's always something more foundational to attack. R3-Alpha had no code for it, though <a href="https://www.red-lang.org/2014/12/050-objects-support.html">Red has ON-CHANGE* to react to assignments</a>.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0020.html">Bye Bye System Object?</a></strong> - The idea of making changes to Rebol to support multitasking the way it was being done was fundamentally flawed.  Needless to say the system object is still there (though <a href="https://forum.rebol.info/t/system-object-vs-sys-context/1687">the "system context" is now SYSTEM.UTILITIES, or SYS.UTIL for short</a>.)</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0024.html">Should All Functions Return Values</a></strong> - Returning an UNSET! was a "value", just an ornery one historically, e.g. <strong><code>x: print "hello"</code></strong> was an error in Rebol2 and it remained one in R3-Alpha.  Though it has been debated, in Ren-C <a href="https://forum.rebol.info/t/why-doesnt-print-return-void-or-vaporize-via-nihil/1466">PRINT returns NOTHING</a> <em>(the moral equivalent of UNSET!)</em> and is legal to assign to a variable...it just unsets it.  The only thing that you can't assign is an empty block antiform (a multi-return parameter pack), because when empty it is considered to be holding no values.  This is called NIHIL and it is rarely returned.</p>
<ul>
<li>So... the answer here is "kind of" and the only remaining question is <a href="https://forum.rebol.info/t/the-truthiness-of-nothing/2180">should NOTHING be considered meaningfully truthy or falsey</a>  On a later blog <a href="http://www.rebol.net/r3blogs/0207.html">there was a vote taken</a> about how functions treat UNSET!</li>
</ul>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0025.html">Leaky Functions</a></strong> - Not knowing this discussion was taking place in May 2006, <a href="https://forum.rebol.info/t/how-attached-are-we-to-functions-return-last-result/1219">I made a similar argument here in September 2019</a>.  But there's <a href="https://forum.rebol.info/t/implicit-execution-of-return-in-functions-bad/1656">an additional wrinkle that Ren-C has unique customizable per-function RETURN definitions</a>.  So it's pretty much a slam dunk to make the change, and introduce LAMBDA as both returning its body result and not having a RETURN.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0026.html">BIND Expands Contexts</a></strong> - Carl says <em>"A few of you will ask: why does this matter? The main reason is memory (something we are optimizing on R3.0). Why force allocation for "free" variables (module variables) that are never used?"</em>  Everything is different in Ren-C, though it does deal with <a href="https://forum.rebol.info/t/caching-binding-lookup-and-attachment-binding/2128">something called "Attachment Binding"</a> where module variables actually are not allocated until they are used.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0029.html">Current Module</a></strong> - I actually thought he was speaking about there being something available in a module similar to a SELF or THIS, which seemed like a pretty good idea. But instead he's talking about running DO on something and it expanding the module you called it from.  Ren-C doesn't do this, DO runs its code isolated and can only give you back its final result.  You have to use IMPORT if you want to bring in new definitions to the module.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0032.html">UNICODE Support</a></strong> - It is interesting to see the considerations here, where it seems being able to load old LATIN-1 scripts was a concern.  No consideration of UTF-8 Everywhere is given for storage, <a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374">but that's what Ren-C does</a>.  He's wary of allowing UTF-8 in scripts themselves: <em>"Another possibility would be to allow UTF-8 encoding within strings in the source code. The advantage is that you will be able to view the strings in the appropriate editor. The disadvantage is that the script would contain a range of odd looking characters."</em>  I have thought that being able to limit what Unicode is permitted as a kind of security measure might be important, but there are higher priority issues.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0034.html">"Scant" Evaluation</a></strong> - FWIW, I do not really believe in the premise of scant evaluation.  I think if you do something like <strong><code>construct/only [foo: true bar: 'f]</code></strong> then you get FOO as the WORD! true and not the logic, and you deal with it with tests like <strong><code>== 'true</code></strong>.  I guess I have to see more examples, but I've only seen this in module headers and I prefer the you-get-what-you-see version.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0035.html">At a Class Crossroads</a></strong> - <a href="https://forum.rebol.info/t/member-functions-in-the-era-of-pure-virtual-binding/2190">I just brought this post up recently.</a></p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0045.html">Overwriting System Functions</a></strong> - He mentions the general problem that since modules import their own copy of system functions under a word in their own variable space, they won't see changes made to the variable in the system.  He talks about making some kind of "search and replace re-set" that would find all those imported stubs and fix them up.  I've been thinking in pursuing this through <a href="https://forum.rebol.info/t/the-return-of-alias/2129">allowing variables to alias other variables</a>, so what you import starts out by default as an indirection and sees changes in the original.  But sSo far, if you want to hook a system function, in Ren-C, <a href="https://forum.rebol.info/t/monitoring-a-single-function-with-enclose-and-hijack/425">you have the option of HIJACK-ing the identity of the function value itself</a></p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0048.html">Free Variables in Modules</a></strong> - I dislike these but the codebase has not been retrofit to not use them.  Only LIB and SYS.UTIL are currently enforced to not be able to create them.  But I think you shouldn't be able to by default anywhere (e.g. "strict mode" in JavaScript).</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0049.html">Source Reflection Returning Unbound Copies</a></strong> - Again speaking somewhat from a security standpoint, Carl points out that if a module gives you a function you can get at its source code, and if you can get at its source code you can get at its bindings, and if you can get the bindings then you can reach the data.  I think being able to get the source code itself would be problematic in this adversarial situation--with or without the bindings.  It would be nice if some day people go over the language and make it secure, but I think we're well into the phase where making it good and interesting is far more important.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0050.html">Should a Module Be Loadable More Than Once</a></strong> - e.g. if you are using different versions as dependencies of other different modules.  Hmmm.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0057.html">Do We Dare Add ++ and --</a></strong> - Ren-C addresses this with ME and MY.  e.g. <strong><code>counter: me + 1</code></strong>, <strong><code>counter: me * 10</code></strong>.  It fetches the value of the SET-WORD! on the left and substitutes that for ME.  It's a lot nicer, and saves ++ and -- for weird symbolic purposes.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0059.html">Deprecating CONTEXT</a></strong> - He's opposed to it because CONTEXT creates an OBJECT!, but there's no such thing as a CONTEXT! datatype.  I'm opposed to it based on it being a noun.  I'm thinking WRAP might be best applied to what this does.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0063.html">How Best to Blockify?</a></strong> - He proposes BLOCKIZE for what I call ENBLOCK (e.g. envelope/enclose in a block).  BLOCKIFY is something where if what you have in your hand isn't already a block, it will wrap it it one. <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0064.html">DIR?</a></strong> - I came to be of the belief that all directories must end in a slash, and we enforce this systemically.  Hence DIR? is just a question of whether a FILE! ends in a slash or not.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0069.html">PORT! Redesign Objectives</a></strong> - This probably belongs in the <a href="https://forum.rebol.info/t/what-is-a-port/617">What is a PORT! discussion</a>.  More to add there:</p>
<ul>
<li><a href="http://www.rebol.net/r3blogs/0070.html">problem with DELETE</a></li>
<li><a href="http://www.rebol.net/r3blogs/0071.html">problem with RENAME</a></li>
<li><a href="http://www.rebol.net/r3blogs/0128.html">SKIP and SEEK</a></li>
<li><a href="http://www.rebol.net/r3blogs/0130.html">OSI Model and PORT!</a></li>
</ul>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0078.html">Lexical Exceptions in LOAD</a></strong> - I'm against finding a way to load e.g. <strong><code>1st</code></strong>.  Ren-C gives you <strong><code>1.st</code></strong> if you want it.  This isn't a good investment of energy.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0084.html">IO Devices in R3</a></strong> - And all of <a href="http://www.rebol.net/r3blogs/0087.html">the Device Model</a> is happily gone. <a href="https://forum.rebol.info/t/libuv-integration-has-started-an-i-o-renaissance/1694">We use libUV now</a>, and it's a lot better while still being standard C, cross-platform with many more features, and maintained by other people.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0085.html">None Propagation</a></strong> - <a href="https://forum.rebol.info/t/the-void-in-null-out-protocol/1880">Ren-C has VOID-in-NULL-out</a> and it's working splendidly.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0086.html">Explicit Evaluation Terminator</a></strong> - After a failed attempt to convince people that vertical bar <strong><code>|</code></strong> would be BAR! and serve this purpose, <a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387">we have COMMA!</a>, and it has turned out to be a lot better.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0091.html">R3-Alpha Released to Select Developers</a></strong> - This was June 2007.  <a href="http://www.rebol.net/r3blogs/0094.html">The Beta was expected on July 15, 2007, then delayed (?!)</a>  Well there never was a Beta.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0093.html">Changes in MAKE FUNCTION!</a></strong> - Related to this, I just wrote a sort of new <a href="https://forum.rebol.info/t/make-should-be-using-dialected-constructors/2196">Dialected MAKE Manifesto</a></p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0097.html">WITH and IN</a></strong> - I do admit to liking the <strong><code>do in context [...]</code></strong> construct.  The IN construct is completely virtual binding now.  BIND is still around but uses have been dropping as more and more of the codebase is able to work with virtual binds on top of largely unbound blocks of code, "viewed" several different ways without touching the binding bits.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0100.html">UNSET! As An Argument</a></strong> - R3-Alpha got fairly permissive, e.g. allowing comparisons of UNSET! to other values.  I've brought up that I think it <a href="https://forum.rebol.info/t/the-truthiness-of-nothing/2180">may be a mistake to allow things like comparisons to take NOTHING</a>, and offered justifications for that.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0104.html">Modules Ripping Carl Apart</a></strong> - <em>"I have to admit that so far modules have been, well, too much like taming a tiger. And, so far, the tiger has been winning... often, ripping me to pieces. The tiger is the main reason R3 is running late. Yes, blame the tiger. I've got many scars."</em></p>
<ul>
<li>In 2010 <a href="http://www.rebol.net/r3blogs/0339.html">he blamed them again for another release delay</a>: <em>"Battling the Module Monster, Again"</em>
</li>
</ul>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0106.html">Admission that Unicode Was Harder Than Thought</a></strong> - <em>" So, Unicode is the focus of our current development, and it must be clearly stated, <em>this is a non-trivial project</em>. Our goal is to have it ready for initial testing by the end of the month. I'll admit that we under-estimated the magnitude of the Unicode project..."</em></p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0107.html">R3 Alpha Public Release</a></strong> - This was in January 2008.  My first encounter with the Rebol language was <a href="http://blog.hostilefork.com/computer-languages-as-artistic-medium/">approximately April 2008</a>, and so I didn't use Rebol2 at all... believing from the community that Rebol3 was the hot new thing.  I didn't realize it had only become public that recently, because everyone else who was involved and talking about it was on the inside track I guess.  I don't know if this timing makes me fortunate or unfortunate, but it certainly explains why I never got attached to a Rebol GUI.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0108.html">ISSUE! as a WORD! datatype</a></strong> - I disagree with this decision (as many did), and in Ren-C it is an immutable textual type..used as the implementation for characters as well (characters are just single-character ISSUE!s).  I've proposed renaming these to TOKEN!.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0111.html">BITSET!s</a></strong> - BITSET! is terribly inefficient and buggy, if you try to do things like XOR a negated bitset with another <a href="http://www.rebol.net/r3blogs/0114.html">none of it works right</a>.  If your bitset is sparse (e.g. representing a Unicode character set, as one might do) then it will quickly consume megabytes.  I did some work with <a href="https://roaringbitmap.org/about/">Roaring Bitsets</a> and linked them up as the implementation for bitsets, which worked well but I didn't feel like maintaining the dependency given higher priorities.  But that branch is still around.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0112.html">The ZERO? Question</a></strong> - I hadn't thought of this.  POSITIVE? rejects non-numbers, NEGATIVE? as well, but ZERO? lets you test series as a simple synonym for <code>= 0</code> but then also considers 0:00 to be ZERO?  Ugh.  I like TRASH? (~) as a placeholder better than zero for many reasons, so the single-character-zero-filler argument doesn't apply.  I think ZERO? should apply to numbers only and error on other types.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0113.html">STRING! is not BINARY!</a></strong> - Because R3-Alpha used variable sized encoding for strings inside the system, it couldn't offer you a usefully invariant binary view of strings.  Ren-C can do it <a href="https://forum.rebol.info/t/realistically-migrating-rebol-to-utf8-everywhere/374">because it uses UTF-8 Everywhere</a>, and if you're looking at a BINARY! alias of a TEXT! you can make modifications only if that atomic modification leaves the result as valid UTF-8.  You can also alias WORD!s as TEXT! or as BINARY!, but it will be an immutable view.  The benefits inside the system of sticking to one string encoding are innumerable and well worth all the work.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0115.html">Script Error</a></strong> - Hadn't really thought about it but he has a point here.  Something to consider in an ERROR! redesign, if such a design ever happens.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0127.html">Pruning Down READ and WRITE</a></strong> - Despite <a href="http://www.rebol.net/r3blogs/0109.html">earlier assurances that READ and WRITE give BINARY! and it's LOAD that does the fancy work</a>, this shows some of the confusion slipping in about what READ is...and that's what provoked my own confusion at things like READ/STRING and READ/LINES and READ/AS.  Red has these refinements too.  It's all quite confusing, but Ren-C has the advantage of letting you do <strong><code>as text! read %some-file.txt</code></strong> which gives you a mutable alias over the UTF-8 data with no loss of efficiency.  I haven't killed off READ/STRING or READ/LINES but now I feel I really should... that's LOAD's business to have some convenient syntax for.  (Dialected? <strong><code>load %file.r</code></strong> or <strong><code>load [&lt;text-lines&gt; %file.txt]</code></strong>)</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0135.html">VID Expression Optimization</a></strong> - So this is the first time I've felt there was something to comment on in a GUI post, since it's dialect philosophy.  <a href="https://forum.rebol.info/t/vid-expression-optimization/2202">I started a thread on it</a></p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0137.html">MAP! Indexing</a></strong> - Again, this is <a href="https://forum.rebol.info/t/how-much-determinism-should-be-pursued/2057/3">relevant to the determinism I've been discussing</a>, and it's interesting to see there was questioning about it.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0138.html">Multicontext Variable Lookup</a></strong> - Like it or not, this is what we have with Virtual Binding.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0139.html">Find on OBJECT!</a></strong> - He mentions using IN.  But with the binding logic of virtual binding, IN has to return the original item unbound if it wasn't found in the context... so it doesn't give a good answer.  Ren-C uses HAS for this (null if a word not present, vs. the unbound word) and disallows FIND on objects.  Use HAS.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0141.html">RFC: func-local, funclo, funco, funo, funx</a></strong> - Wow, I didn't know the name considerations were so bad...before FUNCTION was chosen.  Ren-C has virtually-bound LET and has dismissed with the bad idea of locals-gathering functions that gather all SET-WORD! as variables.  <a href="https://forum.rebol.info/t/rethinking-auto-gathered-set-word-locals/1150">That is not coherent...</a> SET-WORD!s are used in places where they should not create variables (object keys, other dialects).  So this idea is dead and will only be resurrected as a toy for code golf competitions or similar.  And <a href="https://forum.rebol.info/t/abbreviations-as-synonyms/1211">FUNC and FUNCTION are slated to be synonyms</a>, as all abbreviations are intended to be.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0142.html">Data Conversions that MAKE Sense</a></strong> - This definitely needs to be thought about, but also to eliminate needless duplication between TO and MAKE.  <a href="https://forum.rebol.info/t/hacking-away-on-the-to-and-make-matrix/649">I've written about the differences and the possible rules.</a></p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0155.html">PARSE Project</a></strong> - While a lot of this has gone offline, I did <a href="https://trello.com/b/zt7KvVSl/rebol-parse-project-the-trello">preserve the remarks from the wiki on a Trello board</a> (that seriously needs updating, now!).  Sigh.  Hurry up AI, I need you to edit all this for me.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/cgi-bin/r3blog.r?view=0165#comments">Angry Comments About A30 Not-Quite-Public Release</a></strong> - Here it's January 2009.  Rebol 3.0 was certainly positioned in a promise-making and not-delivering way, and Red followed that pattern.  Part of what keeps Ren-C from being completely exhausting is not doing that.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0169.html">Inklings of REWORD</a></strong> - It seems the REWORD we have today started with this discussion, right on the heels of the previous feedback also in January 2009.  The design, authorship, and testing of these things simply add up to so much time... it should have been obvious to anyone reading this at the time this would never be finished.  (I wasn't reading it, I didn't get involved until Rebol became open source in 2012...)</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0173.html">PICKing Negatives and Zero</a></strong> - Have to admit I haven't thought about this at all in years.  Ren-C reverted to the Rebol2 behavior.  In practice, I don't think it comes up enough for people to care.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0178.html">Weird ASSERT/TYPE Refinement</a></strong> - I didn't like it and didn't see the point, so I killed /TYPE.  Ren-C lets you do <strong>ensure object! spec</strong> and <strong>ensure [~null~ tuple!] spec.version</strong> ... you can do your own FOR-EACH enumeration over a block of type/value pairs if you have enough of them to matter.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0179.html">Isolated Namespaces In Modules</a></strong> - <a href="https://forum.rebol.info/t/the-real-story-about-user-and-lib-contexts/764">Turning on isolation was horribly bloated</a>, but Ren-C has <a href="https://forum.rebol.info/t/a-quantum-leap-in-testing-isolating-into-contexts/1680">solved it efficiently</a> and makes it the default for all modules.</p>
<ul>
<li>
<p>May I just say that the code for all of the module stuff--especially isolation--<a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/core/c-frame.c#L679">is convoluted and buggy</a> with equally buggy usermode portions, and it literally made me give up trying to use my 2018 bootstrap executable for the FENCE! conversion.  I had to go gut the module system to make enough simplifications that it would work at all, and am still dealing with the issues of deploying new cross platform binaries that will serve for at least another year or two.</p>
</li>
<li>
<p>If you're wondering "why not just use a modern Ren-C for bootstrap" the answer is that in most areas unrelated to modules--e.g. places where I worked on hardening it--I can rely on it more than the dark corners of modern executables.  Bootstrap is rather demanding.  Also right now has various in flux instabilities and bad performance.</p>
</li>
</ul>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0184.html">DECODE and ENCODE</a></strong> - I never really got the split in responsibilities between ports and codecs.  We're told that if you want to do streaming hash calculations in chunks on large files to use a PORT! to do it.  But then DECODE and ENCODE aren't light wrappers over a chunking port but rather some very naive functions.  Trivial design that was used as an excuse to make some more weird monolithic C code... there's no architecture, it's just a function table.</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0186.html">Read Only Strings, Blocks, and Objects</a></strong> - So apparently PROTECT came along in 2019.  The interesting thing about Rebol being a C codebase with limited type checking is that it was scout's honor for all the code in the system to remember to check the protection bits before making a modification.  Ren-C can build as C++, and <a href="https://forum.rebol.info/t/value-vs-series-modification-bit-const-and-mutable/976/5">enforces the checking of mutability bits before changes with the type system</a>...so if anyone doesn't use a check routine to transition from const to mutable in the C, then when building with C++ that will be caught.  I'm quite proud of that...and it has been working without bugs enforcing CONST as well as PROTECT (and evaluator holds, etc.)</p>
</li>
<li>
<p><strong><a href="http://www.rebol.net/r3blogs/0189.html">PROTECT/HIDE</a></strong> - While I thought this was kind of cool when I first saw an example, it turns out that this is another features that was added on a whim without a systemic review of the implications.  But for this case I haven't come up with a way to really make it much other than the scout's honor I describe from R3-Alpha's basic protection bit.  I've not killed the feature because hidden bits are used to various effects in things like specializing fields out of frames, but I'm really not sure if it makes sense in other cases.</p>
</li>
</ul>
            <p><small>3 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/more-history-mining-rebol-3-0-front-line-blog/2199">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/more-history-mining-rebol-3-0-front-line-blog/2199</link>
          <pubDate>Tue, 20 Aug 2024 19:49:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2199</guid>
          <source url="https://forum.rebol.info/t/more-history-mining-rebol-3-0-front-line-blog/2199.rss">More History Mining: Rebol 3.0 Front Line Blog</source>
        </item>
        <item>
          <title>DEFAULT as Dialect?</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Dialects/DSLs</category>
          <description><![CDATA[
            <p>Flipping through the entirety of Carl's old Rebol blog, I came across a surprising post in which he considers <a href="https://www.rebol.com/article/0388.html">a trick for implementing DEFAULT using left-quoting in Rebol2</a>.</p>
<p>While it's very odd that there were ways to hack that in, I found myself more curious about the alternative proposal... to have DEFAULT work as a dialect.</p>
<pre><code> x: y: default [10 + 20]  ; can't set X
 default [x: y: 10 + 20]  ; dialect can offer handling of leading SET-WORD!s
</code></pre>
<p>This isn't a situation like comparing <strong>let x: 10</strong> and <strong>let [x: 10]</strong>.  LET doesn't need the block, so you get something inherently messier.  But because the nature of DEFAULT requires the block to suppress evaluation in the case that it doesn't need to do the defaulting, you have it either way. <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<pre><code>  &gt;&gt; x: null
  &gt;&gt; y: &lt;something&gt;

  &gt;&gt; default [x: y: 10 + 20]
  == ???  ; by convention, what's the answer?

  &gt;&gt; x
  == 30

  &gt;&gt; y
  == &lt;something&gt;
</code></pre>
<p>It's a bit of a problem on what the return result would be, and it's a bit misleading because you see on the screen [x: y: 10 + 20] but you get back something where after that <code>x &lt;&gt; y</code>.</p>
<p>I think I'm going to have to go with thinking that the current way is better.  But again, I was a bit surprised to see the Rebol2 backwards-quoting-hack.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/default-as-dialect/2198">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/default-as-dialect/2198</link>
          <pubDate>Tue, 20 Aug 2024 12:47:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2198</guid>
          <source url="https://forum.rebol.info/t/default-as-dialect/2198.rss">DEFAULT as Dialect?</source>
        </item>
        <item>
          <title>Mining History For Anything Relevant: Carl&#39;s Rebol Blog</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Redbol</category>
          <description><![CDATA[
            <p>Carl maintained two Rebol blogs.  One was specifically for <a href="https://forum.rebol.info/t/more-history-mining-rebol-3-0-front-line-blog/2199">Rebol 3.0 development issues</a>.  But the other was for more general topics, essays, thoughts.</p>
<p>Here is the first post from February 5, 2008:</p>
<p><a href="https://www.rebol.com/article/0001.html">https://www.rebol.com/article/0001.html : <strong>"Ok, Let's Try It"</strong></a></p>
<p>That blog apparently made it up to 554 posts, stalling out on February 25, 2018:</p>
<p><a href="https://www.rebol.com/article/0554.html">https://www.rebol.com/article/0554.html : <strong>Website Update, New Projects, Fresh Thoughts"</strong></a></p>
<p>But it had been stalling out long before that (post <span class="hashtag">#553</span> was in January of 2016 as part of a little spurt of notes.)</p>
<h2>
<a name="i-decided-to-skim-through-it-for-anything-useful-1" class="anchor" href="https://forum.rebol.info#i-decided-to-skim-through-it-for-anything-useful-1"></a>I Decided To Skim Through It For Anything Useful</h2>
<p>It's a lot of material, but many of them are short (or obviously not relevant to Ren-C's interests).  I'm in a mode of feeling like I'm seeing answers to old questions through the lens of what Ren-C can do today, so I thought I'd flip through them to see if anything caught my attention.</p>
<p>Here are some notes on any thoughts triggered...</p>
<ul>
<li>
<p><strong><a href="https://www.rebol.com/article/0004.html">IO Redirection</a></strong> - Rebol2 and R3-Alpha had many quirks and broken aspects in IO redirection.  Ren-C actually does a pretty good job and <a href="https://github.com/metaeducation/ren-c-stdio/blob/main/.github/workflows/test-stdio.yml">has tests of it</a> in various shells.  At least a bit in part due to my hassling them, PowerShell actually changed the way they did IO to accommodate making binary redirection accommodate us (<a href="https://github.com/PowerShell/PowerShell/issues/1908">many other people wanted it too</a>).</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0015.html">MakeDoc</a></strong> - I have never touched Rebol's MakeDoc, and pretty much only use MarkDown.  Maybe someone who uses MakeDoc needs to write a post about it and if it matters at all in the modern ecology of such standards.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0020.html">HASH!</a></strong> - The predecessor to Rebol's MAP! was a sort of optimization layer on top of blocks, where you still could enumerate them and experience them as blocks.  But people insisted that a conventional key/value store which was dissociated from any order or enumeration structure was better.  But in light of some recent findings about <a href="https://forum.rebol.info/t/how-much-determinism-should-be-pursued/2057/3">Python's Dict becoming order-preserving and deterministic</a>, I wonder if MAP! was a wrong turn after all.  Hmm.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0050.html">Async Ports</a></strong> - Oh my, the <a href="https://forum.rebol.info/t/semantics-of-read-and-tcp-streams-past-and-future/1733/2">beginnings of the nightmare</a>.  Thankfully that's over.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0059.html">NEW-LINE</a></strong> - Naming a function NEW-LINE when NEWLINE is a character constant is pretty confusing.  Ren-C has made a lot of progress here (including controlling terminal newlines in blocks) but never really came up with a good answer for how to better define functions to tweak the meta-formatting information.  There's also a lot to be said about <a href="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353">newline marker significance in dialects</a>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0059.html">Mixed Dialects and REDUCE/ONLY</a></strong> - The idea of providing constructs that are more careful about executing code is something I've gone after, but more in terms of primitives like GET and SET not running code in GROUP!s in paths or tuples unless you say so.  It's good to see Carl was thinking about "security" (or clarity).  Ren-C sort of <a href="https://forum.rebol.info/t/make-your-own-safety/1118">drifted away from thinking there's much hope in guessing what people will care about</a>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0102.html">No Style Guide</a></strong> and <strong><a href="https://www.rebol.com/article/0103.html">Deep Lake</a></strong> - The idea that you use the style that fits you is very critical I think.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0104.html">Context-Dependent Language</a></strong> - Hadn't seen this particular post before.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0108.html">Was XML Flawed From The Start</a></strong> - Yes.  I didn't know it but there is apparently a <a href="https://www.rebol.com/article/0110.html">follow-up post</a>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0126.html">Building in a DIFF Function</a></strong> - Hmmm.  Not necessarily the worst idea to have one... dialected diff sounds interesting.  But should probably be a module or extension.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0130.html">Rebol Internationalization</a></strong> - In the past I've said it might be interesting to "skin" Rebol in usermode to be in other languages.  Spanish or Chinese PARSE dialect, etc.  UPARSE would let you map the combinators to different words.  It's still interesting, but I think when it comes to stuff like internationalizing messages and error strings... it's probably time to just assume AI will be good enough for that.  I don't think this project is going to do any localization in my lifetime.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0144.html">Modules</a></strong> - <em>"I should mention that modules are the main point of the REBOL 3.0 version."</em> ... so unfortunate they <a href="https://forum.rebol.info/t/the-real-story-about-user-and-lib-contexts/764">more or less did not work at all</a>.  Ren-C has made great progress and things are much more promising, but there sure is a long way to go on the vision of a completely usermode module system that people can customize or override at will.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0153.html">SET and GET on Objects</a></strong> - I dropped this feature, but it does raise another question of determinism in field ordering, as to whether you should even be able to do such a thing.  It seems to me someone needs to lay down the fundamental philosophy about basic issues that persist in Redbols today, like:</p>
<pre><code>red&gt;&gt; obj1: make object! [a: 10 b: 20]
== make object! [
    a: 10
    b: 20
]

red&gt;&gt; obj2: make object! [b: 20 a: 10]
== make object! [
    b: 20
    a: 10
]

red&gt;&gt; obj1 = obj2
== false
</code></pre>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0177.html">Consistency in POKE</a></strong> - Aaah, this reminds me of all the <a href="https://forum.rebol.info/t/get-set-vs-pick-poke-whats-the-difference/1719">"what is picking and poking and setting and getting"</a> semantics issues.  The code is going to need to be revisited for the plan of <strong>obj.method</strong> passing the OBJ to the method as a "coupling".  It was a nightmare to work on, but maybe enough time has passed to where going in and cleaning it up will be "fun".</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0188.html">PARSE words are "commands"?</a></strong> - Hm.  Well, I like "combinators".  In any case, I don't know that I've used the word "command" much if ever.  Should I?</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0206.html">Is Rebol a Pure Functional Language?</a></strong> - No, but it does remind me that I was thinking of making a PURE designator where any function marked pure could only call other pure functions.  Could be a fun experiment.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0214.html">Rebcode</a></strong> - I don't think I ever heard of this (or if I did, confused it with the binary storage REBBIN format or something).  If I had infinite time I'd tinker with something like putting Red/System in the WebAssembly build and generating Wasm, but I don't.  It seems clear in retrospect that this tendency to drift off from language design issues really burned up RebolTech's time.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0229.html">BIND?</a></strong> - While Ren-C's Pure Virtual Binding is humming along running most code, being able to inquire and reflect the compounding environments is going to need a lot of deeper answers than this.  And I still don't know exactly what to do about <a href="https://forum.rebol.info/t/caching-binding-lookup-and-attachment-binding/2128">attached words</a>...they're just there to keep the ship afloat for the moment.  But worth pointing out that Rebol was pretty far along before it had the ability to query binding (AFAIK Red still doesn't have it, there's no BIND?)</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0233.html">Extending Objects</a></strong> - Thought is needed on this.  It should definitely be a different operation than APPEND.  My feeling is that APPEND on an OBJECT! should be reserved for interacting with that object's concept of what APPEND means (but does that mean it can't have its own idea of what EXTEND means?)</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0278.html">Checksum Ports</a></strong> - We have all the encryption code to do this but understanding what PORT!s are supposed to be keeps this on a very far back burner.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0284.html">RebolTech Priorities</a></strong> - Interesting in light of <a href="https://forum.rebol.info/t/re-the-ordering-and-priorities-of-the-ren-c-project/2179">my own writing on the topic</a>.  It's a different era, where people have so many free tools to choose from... where the <em>only</em> relevance I see is whether the language design offers something truly unique and notable.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0288.html">Source For Carl's Blog</a></strong> - I didn't know he'd published it.  The link is dead, but the Internet Archive has it: <strong><a href="https://web.archive.org/web/20061218060625/http://www.rebol.net/cgi-bin/blog.r?get-source=1"><code>blog.r</code></a></strong>.  I never used the CGI facilities but it's interesting to see that it is indeed just one long single file.  (I'm idly curious about how this would compare to someone trying to do the same thing in PHP.)</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0294.html">Anthropomorphizing Errors</a></strong> - Interesting topic.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0316.html">Two Year Rebol Blog Anniversary</a></strong> - In two years from 2008-2010 the Rebol blog got to 316 out of its 554 total posts.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0338.html">FOLLOW was the original name of ALSO</a></strong> - Who knew.  <a href="https://forum.rebol.info/t/enfixing-also-stylizing-it-after-then-and-else/402">Either way, I don't like it.</a></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0367.html">PICK with LOGIC!</a></strong> - I never really cared for this.  It's not obvious to me if true is the first item or the second one.  Ren-C has <a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020">soft-quoted branching</a>, so you can do <strong><code>either (cond) 'this 'that</code></strong> and I find it a lot clearer.  Now that logic is an antiform, it means the whole picking system gets messed up by needing to support antiforms.  Not sure why I didn't kill this off yet...</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0372.html">Reacting to Complaints About Not Communicating</a></strong> - Seems the natives are getting restless around August 2008.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0374.html">Rebol: Not For Everyone</a></strong> - <a href="https://forum.rebol.info/t/rebols-target-market-newbies-experts-or-other/581">I wrote a bit here about this post in 2018</a>.  Should probably see if I have any updated thoughts now that I know more.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0377.html">The GUI: Harder Than It Seems</a></strong> - I've often been puzzled by the obsession the Rebol community has on the cross-platform GUI.  Here we see an admission from Carl that it's harder than it seemed and eating up time.  A prelude to today, where Red seems to drag along indefinitely with it.  I'm pretty well-versed in Rebol design points, yet I find what they're making to largely be gibberish.  HTML and CSS are pervasive, have been modernized with time, and I don't really think the GUI work has shown to be markedly ahead for any non-trivial task.  <img src="https://forum.rebol.info/images/emoji/twitter/man_shrugging.png?v=12" title=":man_shrugging:" class="emoji" alt=":man_shrugging:" loading="lazy" width="20" height="20"></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0382.html">The suffix of Rebol Files</a></strong> - After having campaigned a bit on the side of saying Rebol should accept it doesn't own the "R" language term and use <strong><code>.reb</code></strong> <a href="https://forum.rebol.info/t/revisiting-the-riddle-of-the-r/1664">I changed my mind.</a>  I think it should be <strong><code>.r</code></strong>.  The reason I haven't gone around renaming things is because the disruption it would create doesn't make much sense to do until there's a good reason to go around and muck with all the file organization.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0388.html">Enfix DEFAULT Before Enfix existed</a></strong> - I didn't know this had been considered, much less that you do it in Rebol2.  That's surprising.  The idea of making DEFAULT a dialect taking a BLOCK! is actually not something I had considered, and I'm not completely sure I hate.  You get advantages in the sense that you could potentially default more than one thing...<a href="https://forum.rebol.info/t/default-as-dialect/2198">I'm going to have to think about it.</a></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0459.html">Announcement of PowerMezz</a></strong> - <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> had at one time undertaken a porting of this to Rebol3, and don't really remember what was in it.  I didn't look too closely.  But it could be a very good place to look for challenging problems in binding and parsing to ask <em>"has Ren-C raised the bar so people trying to do these things can do them more clearly"</em>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0467.html">CALL/SHOW</a></strong> - Never saw this.  I do think that for a GUI program, /SHOW should be the default.  Worth looking at.  I notice that <a href="https://github.com/microsoft/WSL/issues/6565"><code>call "explorer"</code> returns an exit code of 1</a>, which is now <a href="https://forum.rebol.info/t/making-call-raise-a-definitional-error-for-bad-exit-codes/2068">reported by CALL unless you do CALL/RELAX</a> (or intercept it with EXCEPT).</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0489.html">LIB and SYS</a></strong> - Since I started using Rebol only after R3-Alpha, I'm often surprised to find things that you can't do in Rebol2... such as get the original version of a function if you overwrite it.  I gather that to this day, in Red, if you say <code>append: func [] [print "Hi"]</code> without saving the old-append there's no way to get it back!</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0497.html">Fight Software Complexity Pollution</a></strong> - I cite this one a lot, I should cache it here on the forum and add some comments.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0508.html">Common PARSE Patterns</a></strong> - Link is broken, and internet archive is down, look these up when it comes back.  (Ok it's back and... <a href="https://web.archive.org/web/20110228053052/http://www.rebol.net/wiki/Common_Parse_Patterns">well, not much there</a>).</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0509.html">Simplicity Defined</a></strong> - While I respect that Carl certainly has thrown some unique vision into the mix of computing, no one knows the R3-Alpha code better than I do, and so sometimes these posts ring a bit hollow.  It may have been easier to ramble from on high before the code was open sourced, but really R3-Alpha is every bit the ball of mud he is critiquing!  But it is certainly the case that in its ideal form, Rebol is a rich-enough substrate for expressing one's domain knowledge simply... whereas other mediums (like say, bash) just are unsuitable...but people use them out of expedience or pragmatism.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0510.html">Carl Announces Giving Up</a></strong> - August 2012 solicits opinions on the future, stating: <em>"I also need to tell you that I don't have much time to help out with whatever the REBOL future may be."</em></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0511.html">Open-Sourcing Announcement</a></strong> - There was a bunch of debate over licensing, I said use the LGPL, it was made Apache to "appeal to more contributors".  Yeah, right.  <a href="https://forum.rebol.info/t/ren-c-license-changed-to-lgpl-3-0/1342">Ren-C has been LGPL since September 2020</a></p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0515.html">Rebol C Documentation Style</a></strong> - Comments in R3-Alpha weren't particularly copious.  Ren-C has tons of them.  I'm pretty pleased with how they're done, and have been adopting a kind of "headnote" style where I don't mix too much commenting directly into the code, but just tack on the end of the line <strong><code>// don't accept groups [3]</code></strong> and then have a section above somewhere that says <code>// 3. The reason that we don't accept groups here is...</code>  Of course, Ren-C has much improved embedding of native function specs directly in the comments above natives as well.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0518.html">"We Need a New Rebol Forum"</a></strong> - I have to wonder how things would have gone if we'd used Discourse earlier.  This question was asked in November of 2012, and Discourse was released in August 2014.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0522.html">Comparing Rebol and JSON</a></strong> - This is interesting because he is using BLOCK! for both arrays and key/value stores.  He glosses over what that winds up meaning for systems interpreting the data.  I'm suspicious that it is insignificant, <a href="https://forum.rebol.info/t/json-envy-serialization-dialect-in-rebol/2140">I wrote a bit about this</a>.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0525.html">Calling REBOL, Rebol</a></strong> - Yes.</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0537.html">Rebol Conference, Montreal, 2013</a></strong> - If not for me recording and editing the videos, there wouldn't be much left of it!</p>
</li>
<li>
<p><strong><a href="https://www.rebol.com/article/0543.html">FUNCTION and CLOSURE</a></strong> - There's no more CLOSURE in Ren-C <a href="https://forum.rebol.info/t/relative-binding-and-frame-internals/1344">because all the good parts of it are subsumed into every function</a> <em>(at reasonable cost)</em>.  Now I worry over LETs.  Kind of funny to think how much I take for granted these days...</p>
</li>
</ul>
<hr>
<h2>
<a name="and-thats-about-it-2" class="anchor" href="https://forum.rebol.info#and-thats-about-it-2"></a>And That's About It...</h2>
<p>So that took me a few hours, and feels worth it to have done so.  He started a separate Rebol 3.0 tech blog, and after that it was mostly philosophy and administrivia posts.  I'll do a similar survey of the tech blog.</p>
<p>While it seems to me the GUI is the killer of Redbols, it probably is what allowed Rebol2 to get the popularity that it did.  Probably they shouldn't have made any changes to VID or the graphics.  I think there's this tendency to want to go deep and burn time on grid controls or whatever the "one missing thing" is, when if an application is truly of any sophistication then it's always going to run up against the limit of what Rebol can offer.</p>
<hr>
<p>I'll do some posts on the follow-up items here at some point.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/mining-history-for-anything-relevant-carls-rebol-blog/2197">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/mining-history-for-anything-relevant-carls-rebol-blog/2197</link>
          <pubDate>Tue, 20 Aug 2024 11:01:54 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2197</guid>
          <source url="https://forum.rebol.info/t/mining-history-for-anything-relevant-carls-rebol-blog/2197.rss">Mining History For Anything Relevant: Carl&#39;s Rebol Blog</source>
        </item>
        <item>
          <title>Rendering Difference For Bound/Unbound Code</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>With the new binding model tending to have things sparsely bound, it helps to know what is and isn't bound.</p>
<p>It seems to me it would be very useful (and educational) in rich consoles to make the rendering of code reflect the binding status.</p>
<p><img src="https://forum.rebol.info/uploads/default/original/1X/c7cac409fc3ebb1db0467fb9c8c94b531ff1ec11.png" alt="image" data-base62-sha1="svrriultuZqA01aLNlih32dDyRr" width="258" height="201"></p>
<p>So there you can see that a plain block will evaluate so the block itself is bound, while the contents are left unbound.  A quoted block will be all unbound.</p>
<p>Even better would be if you could hover over the bound bits and see what they were bound to.  It may be best if the coloring was very subtle by default (e.g. just bold black vs a dark gray) and then if you hovered, maybe it would colorize it... perhaps even making things bound the same match colors.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/rendering-difference-for-bound-unbound-code/2142">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/rendering-difference-for-bound-unbound-code/2142</link>
          <pubDate>Thu, 01 Feb 2024 00:13:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2142</guid>
          <source url="https://forum.rebol.info/t/rendering-difference-for-bound-unbound-code/2142.rss">Rendering Difference For Bound/Unbound Code</source>
        </item>
        <item>
          <title>hiiamboris&#39;s WITH</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Dialects/DSLs</category>
          <description><![CDATA[
            <p>I've mentioned that binding might be helped by a dialect, and it turns out there is some precedent in <strong><a href="https://codeberg.org/hiiamboris/red-common/src/branch/master/with.red">hiiamboris's WITH</a></strong>:</p>
<blockquote>
<h3>USAGE SUMMARY</h3>
<pre><code>with x  [..]          == bind [..] x
with 'x [..]          == bind [..] 'x
with :fun [..]        == bind [..] :fun
with [:fun] [..]      == bind [..] :fun
with [x y 'z] [..]    == bind bind bind [..] 'z y x
with [x: 1 y: 2] [..] == bind [..] context [x: 1 y: 2]
</code></pre>
<h3>EXAMPLES</h3>
<h4>omit the path to an object, but work inside it's context:</h4>
<pre><code>do with face/parent/pane/1 [
    color: red
    text: mold color
    visible?: yes
]

if true with system/view/fonts [print [serif size]]

f: func [/- /+ /*] [        ;-- redefines important globals locally
    (do something with local flags)
    foreach x [set..] with system/words [
        (do something with global * + -)
    ]
]
</code></pre>
<h4>create static storage for functions where existing literal forms don't allow you to:</h4>
<pre><code>factorial: func [x] with [cache: make hash! [0 1]] [
    any [
        select/skip cache x 2
        put cache x x * factorial x - 1
    ]
]
</code></pre>
<h4>anonymize words used during initialization of the program:</h4>
<pre><code>first item in the block should be of set-word! type

do with [x: 1 y: 2] [
    z: x * y
    ... other code that uses x or y ...
]
</code></pre>
<h4>bind a block to multiple contexts at once (in the list order):</h4>
<p>First item in the block should be of word!/get-word!, path!/get-path! or lit-word! type</p>
<ol>
<li>
<p>words and paths values are fetched, while lit-words are converted into words<br>
get-words and get-paths should be used for function context, otherwise they get evaluated</p>
</li>
<li>
<p>if resulting value is a context, block is bound to it<br>
if resulting value is a word, block is bound to the context of this word</p>
<p>the following example illustrates usage of words and lit-words:</p>
<pre><code>a: b: x: y: none
c: context [
    a: 1
    b: 2
    f: func [x y] [
       ; calls `with` internally
       print composite [self 'x] "a=(a) b=(b) x*y=(x * y)"
       ; equivalent
       print composite [self :f] "a=(a) b=(b) x*y=(x * y)"
    ]
]
</code></pre>
</li>
</ol>
<p>Thus, <code>with [c]</code> is equivalent to <code>with c</code>, while <code>with ['c]</code> - to <code>with 'c</code>.</p>
<h3>WHY IS IT DESIGNED LIKE THIS?</h3>
<ol>
<li>
<p>It does not evaluate</p>
<p><code>with</code> does not evaluate the block, so:</p>
<ul>
<li>it can be used after <code>context</code>s, <code>if</code>s, <code>loop</code>s, <code>func</code>s, etc.</li>
<li>it can be chained <code>with x with y ...</code>
</li>
</ul>
<p>I've found that this makes code much more readable than it would be with <code>bind</code>.<br>
Prefix it with <code>do</code> if you want immediate evaluation.</p>
</li>
<li>
<p>It accepts blocks</p>
<p>Design question here was - if we allow block! for <code>ctx</code>, how should we treat it?</p>
<ul>
<li>
<p>convert it to a context? <code>ctx: context ctx</code></p>
<p>that shortens the <code>with context [locals...] [code]</code> idiom</p>
</li>
<li>
<p>list multiple contexts in a block as a sequence and bind to each one?</p>
<p>that shortens <code>with this with that [code]</code> idiom</p>
</li>
</ul>
<p>Personally, I've used the 1st at least a few times, but 2nd - never, though I admit there are use cases.<br>
This can be solved by checking type of the 1st item in the block is a set-word or not <img src="https://forum.rebol.info/images/emoji/twitter/wink.png?v=12" title=":wink:" class="emoji" alt=":wink:" loading="lazy" width="20" height="20"><br>
But still ambiguous! When <code>with</code> gets a <code>word!</code> argument it can:</p>
<ul>
<li>get the value of this word, which should be an <code>object!</code>, and bind to this object</li>
<li>get the context of this word, and bind to this context</li>
</ul>
<p>When inside a context, 2nd option is nice:</p>
<pre><code>context [
    a: 1
    f: func [x y] [
        with [self x] [x * y * a]
    ]
 ]
</code></pre>
<p>..where the alternative would be:</p>
<pre><code>context [
    a: 1
    f: func [x y] [
        with context? 'x with self [x * y * a]
    ]
]
</code></pre>
<p>When outside of it, 1st option is better:</p>
<pre><code>x: context [x: 10]
y: context [y: 20]
do with [x y] [x * y]
</code></pre>
<p>..where the alternative would be:</p>
<pre><code>x: context [x: 10]
y: context [y: 20]
do with in x 'x with in y 'y [x * y]
</code></pre>
<p>But this still can be solved: let <code>word!</code>s evaluate to contexts and <code>lit-word!</code>s, same as we have <code>bind code ctx</code> vs <code>bind code 'ctx</code>:</p>
<pre><code>context [
    a: 1
    f: func [x y] [
        with [self 'x] [x * y * a]
    ]
]

x: context [x: 10]
y: context [y: 20]
do with [x y] [x * y]
</code></pre>
</li>
</ol>
</blockquote>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/hiiamboriss-with/2138">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/hiiamboriss-with/2138</link>
          <pubDate>Tue, 30 Jan 2024 21:14:23 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2138</guid>
          <source url="https://forum.rebol.info/t/hiiamboriss-with/2138.rss">hiiamboris&#39;s WITH</source>
        </item>
        <item>
          <title>The Fate of Redbol Emulation In A Mostly Unbound World</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Redbol</category>
          <description><![CDATA[
            <p>100% Emulation of historical Rebol was always going to be impossible.  But if we go forward with the model that most code is unbound, that's going to break even code that didn't do anything sophisticated with binding.  Not only will any values you PICK out of a block or iterate over be unbound, but even basic quoting won't be bound:</p>
<p>e.g. this won't work:</p>
<pre><code>rebol2&gt;&gt; thing: 10

rebol2&gt;&gt; foo: func [w [word!]] [return get w]

rebol2&gt;&gt; foo 'thing
== 10
</code></pre>
<p>I had a problem with this in emulating my very, very old whitespace interpreter.  It <a href="https://github.com/hostilefork/rebol-whitespacers/blob/1d69ea0e79e60ba79fe680d3af657d0823dcbe9e/historical/whitespace-old.reb#L595">quoted ADD</a> and then <a href="https://github.com/hostilefork/rebol-whitespacers/blob/1d69ea0e79e60ba79fe680d3af657d0823dcbe9e/historical/whitespace-old.reb#L424">put it in a block</a>, expecting a DO of that block to run the ADD it meant.</p>
<h2>
<a name="simulating-waves-of-binding-probably-impractical-1" class="anchor" href="https://forum.rebol.info#simulating-waves-of-binding-probably-impractical-1"></a>Simulating Waves of Binding (Probably?) Impractical</h2>
<p>You might think that so long as every word can still hold a binding, then historical behavior could be simulated by manually binding everything.</p>
<p>When a module loads, you could walk through it binding every word.  Then when a function runs, you could copy its body and walk through it...overwriting those module bindings for functions and arguments.</p>
<p>But it would really mean rewriting everything.  You'd have to redo MAKE OBJECT!, otherwise the <a href="https://forum.rebol.info/t/sticky-set-word-binding-problem-in-make-object/2127">indiscriminate binding would break its expectations</a>--as it doesn't override explicit binding anymore.</p>
<h2>
<a name="hooked-evaluator-may-fix-some-cases-2" class="anchor" href="https://forum.rebol.info#hooked-evaluator-may-fix-some-cases-2"></a>Hooked Evaluator May Fix (Some) Cases</h2>
<p>We already are going to need a hooked evaluator to handle things like PATH! looking up in objects (done presently with a hack to the main evaluator).</p>
<p>Another hook could just say that quoted things wound up bound under the same rules that non-quoted things use.</p>
<p>That would make this one whitespace example work, and maybe it would be able to run some more simple historical example scripts.  But anything that mixes COMPOSE and DO is likely doomed.</p>
<p>This may just be the price of progress.  Rebol2 emulation remains a good experiment of changing your baseline library, and it still would be a good example of that... for all the changes to primitives like FUNC and APPEND etc.  It just may not be able to accommodate the different expectations of binding.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131</link>
          <pubDate>Tue, 23 Jan 2024 15:11:47 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2131</guid>
          <source url="https://forum.rebol.info/t/the-fate-of-redbol-emulation-in-a-mostly-unbound-world/2131.rss">The Fate of Redbol Emulation In A Mostly Unbound World</source>
        </item>
        <item>
          <title>Case-Insensitivity And Dialecting</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Dialects/DSLs</category>
          <description><![CDATA[
            <p>Today's Ren-C uses case-sensitive binding.  The topic has been discussed a lot:</p>
<p><a href="https://forum.rebol.info/t/case-insensitivity-vs-case-preservation-cant-have-both/1439" class="inline-onebox">Case Insensitivity vs. Case-Preservation (can't have both?)</a></p>
<p>As a discipline, we still are trying to keep the language lowercase, in the standard library at least.</p>
<p>But one thing that hasn't been discussed much is how case could be used creatively in dialects, when you know the case doesn't matter.  I think that in certain domains, use of case in dialects could be an interesting tool.</p>
<h2>
<a name="using-casing-to-imply-uppercase-lowercase-as-is-case-1" class="anchor" href="https://forum.rebol.info#using-casing-to-imply-uppercase-lowercase-as-is-case-1"></a>Using Casing To Imply Uppercase, Lowercase, As-Is Case</h2>
<p>I've written a little about how the <a href="https://forum.rebol.info/t/usefulness-of-string-interpolation/2114">CScape interpolation tool</a> does casing.  That's strings and not ordinary code.</p>
<p>The case logic would work in ordinary code something like this:</p>
<pre><code>&gt;&gt; strings: ["aBc" "dEf" "gHi]

&gt;&gt; cased-print ["For instance:" STRINGS.1 strings.2 Strings.3]
For instance: ABC def gHi
</code></pre>
<p>It might seem silly, but in CScape it turns out to be pretty useful to do that.</p>
<h2>
<a name="non-case-related-example-hardening-bindings-2" class="anchor" href="https://forum.rebol.info#non-case-related-example-hardening-bindings-2"></a>Non-Case-Related Example: "Hardening" Bindings</h2>
<p>We have an issue now that sometimes when you are composing material you want bindings to "stick".  Here we want LET and PASSTHRU to be bound to the same environment as the block given to the COMPOSE (which propagates to the GROUP!s, and then to the blocks evaluated in the groups).  But we want RETURN to be unbound, and pick up its binding from the site where it is composed:</p>
<pre><code> compose [
     (in [] 'let) (name): (in [] 'passthru) :return
 ]
</code></pre>
<p>There could be some dialect options for this... a special signal, maybe something you pass:</p>
<pre><code>compose/harden [
    &lt;hard&gt; let (name): &lt;hard&gt; passthru :return
] &lt;hard&gt;

compose/harden [
    %h let (name): %h passthru :return
] %h

compose/harden [
    $ let (name): $ passthru :return
] $
</code></pre>
<p>Since you have groups available, you could get the literal of the thing you're hardening with, e.g. with <code>(&lt;hard&gt;)</code> or <code>(%h)</code> or <code>($)</code></p>
<p>And of course, you could have an operation that reverses this...so that things were hardened by default but you escaped to leave them unbound.</p>
<p>But... a weirder idea... what if you used something like the case?</p>
<pre><code> weird-compose [
     LET (unbind name): PASSTHRU :return
 ]
</code></pre>
<p>Important to remember is that symbols don't have case.  So you can't use the trick for everything.</p>
<p>But I present this in juxtaposition to using even the most minimal signal (like $) just to show how much the comprehensibility can benefit.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/case-insensitivity-and-dialecting/2123">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/case-insensitivity-and-dialecting/2123</link>
          <pubDate>Wed, 17 Jan 2024 22:33:15 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2123</guid>
          <source url="https://forum.rebol.info/t/case-insensitivity-and-dialecting/2123.rss">Case-Insensitivity And Dialecting</source>
        </item>
        <item>
          <title>A (Lame) Hole-Punch Motivating Dialect</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Dialects/DSLs</category>
          <description><![CDATA[
            <blockquote>
<p><em>Referenced in the explanation of <a href="https://forum.rebol.info/t/what-dialects-need-from-binding/2111/11">"What Dialects Need From Binding"</a></em></p>
<p><em><strong>This code uses hypothetical mechanisms for a new approach to pure virtual binding that are not yet implemented at time of writing.</strong></em></p>
</blockquote>
<hr>
<p>Let's imagine you have the idea of a dialect which validates the number of some characters in a string.  You give it a list of strings and you match using "keywords" ONE or TWO for the character at hand.  You can also run code in groups if you want:</p>
<pre><code>&gt;&gt; dialect ["aaaa" "bbbb"] [
       [#a [one two one (print "rule one match")]]
       [#b [two one one (print "passed 2 1 1") one (print "rule two match")]]
   ]
  rule one match
  passed 2 1 1
</code></pre>
<p>Now imagine a callsite that wants to use this dialect.  Let's say it has its own definition for what TWO means just incidentally defined.  But it knows the dialect's meaning should override that.  However let's say it also has some MESSAGE, that it doesn't want the dialect to override.</p>
<p>Let's also throw in COLLECT for good measure:</p>
<pre><code> let two: lambda [body] [repeat 2 body]  ; some incidental definition

 let message: "passed 2 1 1"  ; intended to be seen by the dialect

 let results: collect [
      dialect ["aaaa" "bbbb"] [
           [#a [one two one (keep &lt;finished a&gt;)]]
           [#b [two one one (print message) one (keep &lt;finished b&gt;)]]
       ]
 ]
</code></pre>
<p>The caller and DIALECT have a common understanding: that ONE and TWO are things that the dialect provides.  But it's the dialect's responsibility to sort that out.  Even though the tip of the block it receives has a definition for TWO, it shouldn't be influenced by that...because all the ONE and TWO are unbound inside that block.</p>
<p>Now say the plan of attack that the author has is to build upon the PARSE dialect to implement what they're doing.  It seems plausible they should be able to do the following:</p>
<pre><code> dialect: func [strings [block!] lines [block!]] [
     for-each line lines [
        line: in lines line
        let char: line.1
        let rule: in line line.2
        let string: strings.1
        do compose/deep [
            let one: (char)
            let two: [repeat 2 (char)]
            parse (string) [comment "your code here" (unuse [one two] rule)]
        ]
        strings: next strings
     ]
 ]
</code></pre>
<p>In more detail:</p>
<ul>
<li>
<p>Propagating with IN LINES and IN LINE means that RULE gets the binding of the original LINES block, which is the aggregated chain of bindings (from LIB for things like PRINT, for the LETs, for KEEP).  But it also has that definition of TWO.</p>
</li>
<li>
<p>We want RULE to come out of this as a BLOCK!, not boxed into a function, as PARSE intends to enumerate it.. as well as to be able to DO GROUP!s inside it.</p>
</li>
<li>
<p>We don't want to have to make a copy of that aggregated binding (e.g. an entire copy of LIB to remove any ONE and TWO, and a copy of all the other contexts to remove ONE and TWO).  Beyond inefficiency, we don't want to explode the number of binding environment identities.  Instead, we need an additive means to say <em>"I want everything <em>but</em> ONE and TWO from this binding environment"</em>.  Sort of a <a href="https://hypirion.com/musings/understanding-persistent-vector-pt-1">"persistent-vector"</a> approach.</p>
</li>
<li>
<p>This is what I call a hole-punching instruction... that becomes the new specifier for the embedded rule, pointing at the specifier of rule as a parent.  Later on during the DO of the composed code... when PARSE descends into the block and uses IN, that's where the hole-punched binding is "coalesced" with available definitions of ONE and TWO from PARSE's "current environment" (which it propagated off second parameter it received).</p>
</li>
</ul>
<p>There are many other ways to accomplish this intent--and this particular example does suck (it inadvertently exposes all the features of PARSE even if it didn't want to...among other criticisms).  But I maintain this implementation strategy is analogous to real situations that come up, vs. some imagined thing.</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/a-lame-hole-punch-motivating-dialect/2116">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/a-lame-hole-punch-motivating-dialect/2116</link>
          <pubDate>Sat, 13 Jan 2024 07:39:58 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2116</guid>
          <source url="https://forum.rebol.info/t/a-lame-hole-punch-motivating-dialect/2116.rss">A (Lame) Hole-Punch Motivating Dialect</source>
        </item>
        <item>
          <title>Replaying Console Commands (Red&#39;s &quot;Spaces Console&quot;)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Red's hiiamboris has made an alternative console (built on his <a href="https://forum.rebol.info/t/vid-s-or-spaces-from-reds-hiiamboris/1886">"Spaces" VID alternative</a>).  It appears you can go back to an earlier expression and edit it, and if you do, it will ripple the changes through running all your future expressions again.</p>
<p><img src="https://link.storjshare.io/raw/jwtiabvp6myahg3zzf3q5zoii7la/gif/spaces/demo-spaces-console.gif" alt="spaces console" width="409" height="500"></p>
<p>It's called <strong><a href="https://codeberg.org/hiiamboris/red-spaces/src/branch/master/programs/console">"Spaces Console"</a></strong>, and it's an interesting idea.  Sort of fuses together a watchlist with a console.</p>
<p>Note that Ren-C's Web Console can keep Ctrl-Z'ing to undo console output and go back to edit previous expressions... but you lose the subsequent commands.  Though the web console also has a <a href="https://youtu.be/0exDvv5WEv4?t=326">watchlist like the one in the Qt Ren Garden</a>.</p>
<p>Anyway, something to think about.</p>
<p>Note that the current implementation appears to be slow (<a href="https://matrix.to/#/!EorVRCzrVpjojJtctJ:gitter.im/$nf_3fEnM_24P0qAMnxdnwdcOKF3NVsAtzR6YnZq0PKM?via=gitter.im&amp;via=matrix.org&amp;via=chat.weho.st">Gitter link</a>):</p>
<blockquote>
<p><strong>Gregg:</strong> <em>"I thought it didn't like <code>repeat i 100 [print i]</code>, but just took a long time to process it. ~10s."</em></p>
<p><strong>Boris:</strong> <em>"printing is O(n^2) atm, need to overcome laziness and make it lower level :D"</em></p>
</blockquote>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/replaying-console-commands-reds-spaces-console/2107">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/replaying-console-commands-reds-spaces-console/2107</link>
          <pubDate>Thu, 11 Jan 2024 10:00:27 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2107</guid>
          <source url="https://forum.rebol.info/t/replaying-console-commands-reds-spaces-console/2107.rss">Replaying Console Commands (Red&#39;s &quot;Spaces Console&quot;)</source>
        </item>
        <item>
          <title>How Console Displays Things With No Literal Representation</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>It's tricky to think of what to do to print out things that don't have representation.</p>
<p>For example, isotopes ("antiforms") don't have representations and cannot be molded. (For a proposal of the exception of MOLD of splices, see <strong><a href="https://forum.rebol.info/t/mold-only-vs-mold-spread/2059">MOLD/ONLY vs spread</a></strong>)</p>
<p>So what's traditionally been done is just render it as a quasiform (so the tilde at the beginning hints something its up), and then add a comment at the end of the rendering.</p>
<p>If the <a href="https://forum.rebol.info/t/quasiforms-stable-unstable-isotopes-simpler-terminology/2005/7">renaming of "isotope" to "anti" were taken</a>, this would look like:</p>
<pre><code>&gt;&gt; anti 'null
== ~null~  ; anti
</code></pre>
<p>The representational issue is a bit of a thorn in the console, but you have to print something. (Well, unless it's a void, where printing nothing is the design.)</p>
            <p><small>5 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096</link>
          <pubDate>Mon, 08 Jan 2024 23:58:13 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2096</guid>
          <source url="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096.rss">How Console Displays Things With No Literal Representation</source>
        </item>
        <item>
          <title>Deceptive Incomplete Parsing: A Common Problem</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Parsing</category>
          <description><![CDATA[
            <p>Some code I'd written checked for file extensions, wanting only %.r and %.reb files to be processed.  It looked like this:</p>
<pre><code> for-each file ... [
     parse file [thru ".reb" | thru ".r"] else [continue]
     ...
 ]
</code></pre>
<p>That doesn't work anymore, because PARSE raises an error instead of returning null.  The ELSE needs to be an EXCEPT, or you have to use IF NOT OK?, or some other solution.</p>
<p>My first thought on fixing it was why not just put the CONTINUE inside the parse...</p>
<pre><code> for-each file ... [
     parse file [thru ".reb" | thru ".r" | (continue)]
     ...
 ]
</code></pre>
<p>That's a neat Rebolism that shows the kind of malleability other languages just don't have.</p>
<p>But it has a problem.  Can you spot it?</p>
<h2>
<a name="old-redbol-conventions-wouldnt-catch-the-mistake-1" class="anchor" href="https://forum.rebol.info#old-redbol-conventions-wouldnt-catch-the-mistake-1"></a>Old Redbol Conventions Wouldn't Catch The Mistake</h2>
<p>Imagine if the file is named <strong>%foo.reb.zip</strong> or <strong>%foo.rar</strong>.  One of the THRUs succeeds, so it won't run the continue alternate.  But it won't reach the end of the filename.</p>
<p>Historical Redbol would have had the PARSE return false, but would have just blindly continued running, passing those unintended filenames!!!</p>
<p>Now we're a step ahead, because PARSE will error if it doesn't reach the end!  <img src="https://forum.rebol.info/images/emoji/twitter/clap.png?v=12" title=":clap:" class="emoji" alt=":clap:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="but-how-to-stop-the-error-2" class="anchor" href="https://forum.rebol.info#but-how-to-stop-the-error-2"></a>But How To Stop the Error?</h2>
<p>We don't want an error if it doesn't terminate in %.r or %.reb, we want to continue the loop.</p>
<p>This will work:</p>
<pre><code> parse file [thru ".reb" &lt;end&gt; | thru ".r" &lt;end&gt; | (continue)]
</code></pre>
<p>And it's not catastrophically bad.  But it feels weird.</p>
<p>You can remove the <code>&lt;end&gt;</code> duplication:</p>
<pre><code> parse file [thru [".reb" | ".r"] &lt;end&gt; | (continue)]
</code></pre>
<p>You can also do that with ANY:</p>
<pre><code> parse file [thru any [".reb" ".r"] &lt;end&gt; | (continue)]
</code></pre>
<p>You can of course go for the conventional forms:</p>
<pre><code>parse file [thru ".reb" | thru ".r"] except [continue]

if not ok? parse file [thru ".reb" | thru ".r"] [continue]
</code></pre>
<p>But I feel like there's something missing when you write something like this without making the <code>&lt;end&gt;</code> explicit...because it leads to someone getting the bright idea (as I did) to reformulate it without taking the <code>&lt;end&gt;</code> into account.</p>
<h2>
<a name="in-any-case-this-being-overlooked-is-now-caught-3" class="anchor" href="https://forum.rebol.info#in-any-case-this-being-overlooked-is-now-caught-3"></a>In Any Case, This Being Overlooked Is Now Caught!</h2>
<p>It's food for thought on what style you want. But no matter what style you like, I think it shows a clear win for raising the error when the parse doesn't reach the end.</p>
<p>That %foo.rar or %foo.reb.zip -- when they occur -- will not be accepted quietly in the reformulation!</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065</link>
          <pubDate>Tue, 28 Nov 2023 03:33:35 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2065</guid>
          <source url="https://forum.rebol.info/t/deceptive-incomplete-parsing-a-common-problem/2065.rss">Deceptive Incomplete Parsing: A Common Problem</source>
        </item>
        <item>
          <title>Console Treatment of VOID vs. NOTHING</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Rebol2 and Red both have a console property that when the console sees an UNSET!, it prints nothing:</p>
<pre><code>&gt;&gt; block: reduce [&lt;a&gt; #[unset!] &lt;b&gt;]
== [&lt;a&gt; unset &lt;b&gt;]  ; bad rendering, conflates #[unset!] with the word `unset`

&gt;&gt; first block
== &lt;a&gt;

&gt;&gt; second block

&gt;&gt; third block
== &lt;b&gt;
</code></pre>
<p>This doesn't provide the best grounding in the console, especially considering that in their world an UNSET! is a reified value that can be found in a block.</p>
<p>However, returning an UNSET! is how functions like PRINT avoid outputting anything with <strong><code>==</code></strong> in the console:</p>
<pre><code>rebol2&gt;&gt; print "Notice no == result"
Notice no == result

rebol2&gt;&gt; type? print "Test"
Test
== unset!
</code></pre>
<h2>
<a name="but-what-result-should-ren-c-suppress-1" class="anchor" href="https://forum.rebol.info#but-what-result-should-ren-c-suppress-1"></a>But What Result Should Ren-C Suppress?</h2>
<p>Ren-C has two antiforms which might be considered candidates for not displaying... VOID and NOTHING.</p>
<p>Because voids vanish, it might seem to make the most sense to have voids not print anything, and trashes print out the standard isotopic form:</p>
<pre><code>&gt;&gt; void

&gt;&gt; quote void
== ~void~

&gt;&gt; ~
== ~  ; anti
</code></pre>
<p>Looking at this, it might seem to make a lot of sense to have functions like PRINT and HELP return VOID.</p>
<p><strong>BUT</strong> as I explain in <a href="https://forum.rebol.info/t/why-doesnt-print-return-void-or-vaporize-via-nihil/1466">"Why doesn't PRINT return VOID or NIHIL"</a>, there is a bit of a pitfall.  Voids are friendly in terms of opting out of things:</p>
<pre><code>&gt;&gt; append [a b c] print "If PRINT returned void..."
If PRINT returned void...
== [a b c]
</code></pre>
<p><em>This seems too friendly to me.</em>  There's another possibility of returning NIHIL, which would prohibit use as an argument.  It would wind up making an evaluation appear to be void <em>if no other expressions were in play</em>...but if other expressions were involved it would let them fall out</p>
<pre><code>&gt;&gt; print "If PRINT returned nihil"
If PRINT returned nihil

&gt;&gt; append [a b c] "If PRINT returned nihil"
If PRINT returned nihil
** Error: APPEND is missing its VALUE argument

&gt;&gt; 1 + 2 print "If PRINT returned nihil"
If PRINT returned nihil
== 3
</code></pre>
<p>So returning NOTHING feels like it makes the most <em>mechanical</em> sense...it has the right amount of ornery-ness:</p>
<pre><code>&gt;&gt; print "Mechanically this works best"
Mechanically this works best
== ~  ; anti
</code></pre>
<p>But it's ugly to have that <strong>== ~  ; anti</strong> after every HELP or PRINT or other function.</p>
<p>Historically I've gone with NOTHING being invisible, and VOID printing a result.</p>
<pre><code>&gt;&gt; ~

&gt;&gt; void
== ~void~  ; anti
</code></pre>
<p>But I've given a try at printing the results always to see what my feelings are.</p>
            <p><small>3 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045</link>
          <pubDate>Thu, 03 Aug 2023 22:48:43 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2045</guid>
          <source url="https://forum.rebol.info/t/console-treatment-of-void-vs-nothing/2045.rss">Console Treatment of VOID vs. NOTHING</source>
        </item>
        <item>
          <title>Discouraging Semantics for COMMA! in Dialects</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Dialects/DSLs</category>
          <description><![CDATA[
            <p>Today I consider <a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387">COMMA! to be an indispensible addition to the language</a>.</p>
<p>But something that feels like a Rebol philosophy point is that we should strongly discourage the idea of commas having semantic meaning in dialects.  The status quo should be that they just provide visual separation.</p>
<p>In this mindset, the only impact adding a comma should have on code would be an error if they're not put in an "interstitial" position.  If you want a grouping to have semantic meaning, then a BLOCK! or GROUP! should be used... or perhaps a vertical bar |.</p>
<p>I think giving this guidance helps preserve Rebol's natural language stream aesthetic, where the kinds of problems mandatory commas introduce can be avoided.  Whether you are doing things at source level or in code generation, having N entries needing (N - 1) commas can be an annoyance.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/discouraging-semantics-for-comma-in-dialects/2042">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/discouraging-semantics-for-comma-in-dialects/2042</link>
          <pubDate>Wed, 26 Jul 2023 16:30:50 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2042</guid>
          <source url="https://forum.rebol.info/t/discouraging-semantics-for-comma-in-dialects/2042.rss">Discouraging Semantics for COMMA! in Dialects</source>
        </item>
        <item>
          <title>Critiquing Red&#39;s Updated APPLY Implementation</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Redbol</category>
          <description><![CDATA[
            <p>Ren-C added a super-duper APPLY in August 2021:</p>
<aside class="quote quote-modified" data-post="1" data-topic="1834">
  <div class="title">
    <div class="quote-controls"></div>
    <img loading="lazy" alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar">
    <a href="https://forum.rebol.info/t/apply-ii-the-revenge/1834">APPLY II: The Revenge!</a> <a class="badge-wrapper  bullet" href="https://forum.rebol.info/c/usage/feature-discover/24"><span class="badge-category-parent-bg" style="background-color: #3AB54A;"></span><span class="badge-category-bg" style="background-color: #3AB54A;"></span><span style="" data-drop-close="true" class="badge-category clear-badge" title="Rebol and Red have quite a few cool features - this is PR for them.">Feature Discover</span></a>
  </div>
  <blockquote>
    ...and by "it's time" I apparently meant "within the next year, maybe"... 
But better late than never, right?  It's in! 

<a name="refinements-can-be-provided-in-any-order-1" class="anchor" href="https://forum.rebol.info#refinements-can-be-provided-in-any-order-1"></a>Refinements Can be Provided In Any Order
[a b c d e d e] = apply :append [[a b c] [d e] /dup 2]
[a b c d e d e] = apply :append [/dup 2 [a b c] [d e]]
[a b c d e d e] = apply :append [[a b c] /dup 2 [d e]]

[a b c d d] = apply :append [/dup 2 [a b c] [d e] /part 1]
[a b c d d] = apply :append [[a b c] [d e] /part 1 /dup 2]


<a name="any-parameter-not-just-refinements-can-be-used-by-name-2" class="anchor" href="https://forum.rebol.info#any-parameter-not-just-refinements-can-be-used-by-name-2"></a>Any Parameter (Not Just Refinements) Can Be Used B…
  </blockquote>
</aside>

<p>About two years later, I observe Red has published their own implementation of APPLY...with some seeming similarities:</p>
<p><a href="https://www.red-lang.org/2023/06/dynamic-refinements-and-function.html" class="inline-onebox">Red Programming Language: Dynamic Refinements and Function Application</a></p>
<p>But there are significant mechanical and usability differences.</p>
<p>Red inherits complexity from the fact that they didn't merge refinements and their arguments together.  This keeps them tied to problems that arise from ordering, and keeping the enablement of a refinement in sync with its value(s).  <em>It's clear to me that "multi-arg-refinements" has proven to be not worth it in the design vs. having a single unified nullable value for each named argument</em>...and this is only one of the many places that bear that out.</p>
<p>They do offer an idea how to create something like a FRAME!... but it's a higher-level usermode concept instead of the lower-level basis for APPLY-like abstractions.  The post gives an implementation called <strong><code>make-apply-obj-proto</code></strong>:</p>
<pre><code>red&gt;&gt; o-fctm: make-apply-obj-proto/with 'find/case/tail/match [series: [a b c] value: 'a]
== make object! [
    series: [a b c]
    value: 'a
    part: false
    length: none
    only: false
    case: true
    same: fal...

red&gt;&gt; apply-object :find o-fctm
== [b c]
</code></pre>
<p>Ren-C bakes this idea in as the core of function application.  You can build a FRAME! for the function (note the tail of the match is a multi-return...you can get both the begin and end in a single call...so there's no /TAIL here):</p>
<pre><code>&gt;&gt; f: make frame! :find/case/match
== make frame! [
    series: ~
    pattern: ~
    part: ~
    skip: ~
    reverse: ~
    last: ~
]
</code></pre>
<p>Notice /CASE and /MATCH didn't take arguments, so they have been specialized out of the frame as they were already mentioned as being in use.</p>
<p>Then you can fill in the frame with required (and optional) values:</p>
<pre><code>&gt;&gt; f.series: [a b c]
== [a b c]

&gt;&gt; f.pattern: 'a
== a
</code></pre>
<p>And it remembers what function it is for, so you can DO it without getting it mixed up.  As a nice bonus, the multi-return gives you the head and the tail if you want it:</p>
<pre><code>&gt;&gt; [begin end]: do f
== [a b c]

&gt;&gt; begin
== [a b c]

&gt;&gt; end
== [b c]
</code></pre>
<p>They say of <strong><code>make-apply-obj-proto</code></strong>: <em>"But you may see that this is verbose and inefficient, making a whole object just for a call like this. And you'd be right. It's just an example.  You don't want to recreate objects like this, especially in a loop. But you don't have to. You can reuse the object and just change the important values in it."</em></p>
<p>This is the opposite philosophy to Ren-C.  These frames are the foundation of function invocation...and so they are always built.  The keylist of the object lives with the function definition and is pointed to by the frame, and so each instance only takes up the cells of the arguments.</p>
<p><em>(Note: If you wanted something directly comparable to <strong><code>make-apply-obj-proto</code></strong> it really could just be an option passed to APPLY which gave back the frame it builds without calling it.)</em></p>
<p>Anyhow... I'm glad they've undertaken this... because it brings us closer to assembling comparable examples.  It lays bare the fact that when I undertake "complexity" it is because failure to design the system to handle relevant cases pushes that complexity onto the user...</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/critiquing-reds-updated-apply-implementation/2194">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/critiquing-reds-updated-apply-implementation/2194</link>
          <pubDate>Thu, 22 Jun 2023 00:10:25 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2194</guid>
          <source url="https://forum.rebol.info/t/critiquing-reds-updated-apply-implementation/2194.rss">Critiquing Red&#39;s Updated APPLY Implementation</source>
        </item>
        <item>
          <title>The Handling of NULL and VOID in UPARSE</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Parsing</category>
          <description><![CDATA[
            <p>By design, nulls are handled noisily--right at the moment of fetching the word!--in UPARSE (and PARSE3):</p>
<pre><code>&gt;&gt; prefix: null, suffix: ")"

&gt;&gt; parse "aaa)" [prefix, some "a", suffix]
** Error: (prefix is null, and we raise errors for that in parse)
</code></pre>
<p>If we didn't raise an error it seems there are only two other options:</p>
<ol>
<li>
<p>Make <strong><code>null</code></strong> always succeed, keeping the parse position where it is (synonym for <strong><code>[]</code></strong>)</p>
</li>
<li>
<p>Make <strong><code>null</code></strong> always be an unsuccessful combinator match, but not cause a failure (synonym for <strong><code>false</code></strong>)</p>
</li>
</ol>
<p>I think (1) feels like a pretty obvious bad idea, because null is supposed to represent a soft failure.  I've suggested that this is a better behavior for void, e.g. <strong><code>parse "ab" ["a" void "b"]</code></strong> would work.</p>
<p>I'm not too pleased with the idea of (2), and prefer the error as the default.</p>
<p><em>...that said...</em> it seems there should be some operators or combinators that let you get the other behaviors.</p>
<h2>
<a name="what-about-a-maybe-combinator-to-use-with-null-1" class="anchor" href="https://forum.rebol.info#what-about-a-maybe-combinator-to-use-with-null-1"></a>What About a "MAYBE" Combinator To Use With Null?</h2>
<p>In standard code, the policy of "void-in-null-out" has worked well, with MAYBE transforming soft-failure nulls to voids:</p>
<pre><code> ; non-PARSE handling of NULL via MAYBE

 &gt;&gt; append [a b c] null
 ** Error: cannot append ~null~ isotope to a block

 &gt;&gt; append [a b c] maybe null
 == [a b c]

 &gt;&gt; block: null

 &gt;&gt; append maybe block [d e]
 == ~null~  ; isotope
</code></pre>
<p>So if we imagine applying this to the parse example, it would presumably do this:</p>
<pre><code>&gt;&gt; prefix: null, suffix: ")"

&gt;&gt; parse "aaa)" [maybe prefix, some "a", maybe suffix]
== ")"
</code></pre>
<p>For the above parse to succeed, the combinator made by <strong>maybe prefix</strong> would have to succeed and not advance the input.</p>
<h2>
<a name="but-it-doesnt-combine-well-in-larger-rules-2" class="anchor" href="https://forum.rebol.info#but-it-doesnt-combine-well-in-larger-rules-2"></a>But It Doesn't Combine Well In Larger Rules</h2>
<p>What if what you intended was <em>"if there's a prefix, match some non-zero number of instances, but if prefix is null then don't worry about matching"</em>:</p>
<p>You might try doing that by COMPOSE'ing your rules.  But UPARSE actually lets us write that out literally using GET-GROUP! rule synthesis:</p>
<pre><code>&gt;&gt; parse "aaa)))" [:(if prefix '[some prefix]), some "a", :(if suffix '[some suffix])]
== ")"
</code></pre>
<p>But what if we tried to do that with MAYBE...could it work?</p>
<pre><code>&gt;&gt; parse "aaa)))" [some maybe prefix, some "a", some maybe suffix]
; infinite loop!
</code></pre>
<p>No dice.  We've said <strong>maybe prefix</strong> just succeeds and doesn't advance the input when prefix was null.  But if you combine that with <code>some</code> the null case will just match nothing in perpetuity, causing an infinite loop.</p>
<p>This may look familiar, because if you write <strong>some opt [...anything...]</strong> you'll always get an infinite loop.  But in that case it's just wrong thinking: you know that the repetitive nature of <code>some</code> looking for an eventual non-match meant you must have intended <strong>some [...anything...]</strong> (at least one) or <strong>opt some [...anything...]</strong> (zero or more).</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji only-emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
<blockquote>
<h3>NOTE THAT HISTORICAL PARSE HAS NO GOOD ANSWER FOR THIS</h3>
<p>Rebol2 treats NONE! as a no-op which just succeeds but doesn't advance the input.  So the following gives you an infinite loop:</p>
<pre><code>rebol2&gt;&gt; prefix: none suffix: ")"

rebol2&gt;&gt; parse "aaa)))" [some prefix some "a" some suffix]   
; infinite loop
</code></pre>
<p>The hackish "must make progress" rules in R3-Alpha actually make the above "work as intended", because the SOME will bail out after one non-advancing match.  I don't consider that a "good" answer--more a random effect.</p>
</blockquote>
<h2>
<a name="another-problem-maybe-is-a-very-similar-word-to-opt-3" class="anchor" href="https://forum.rebol.info#another-problem-maybe-is-a-very-similar-word-to-opt-3"></a>Another Problem: MAYBE is a very similar word to OPT</h2>
<p>Imagine looking at this code:</p>
<pre><code>&gt;&gt; prefix: "(", suffix: ")"

&gt;&gt; parse "aaa)" [maybe prefix, some "a", maybe suffix]
== ~null~  ; isotope
</code></pre>
<p><em>"But wait"</em>... I can imagine someone saying... <em>"doesn't that mean that if it's not there, you skip the rule"</em>?</p>
<blockquote>
<p>I've had some mental back-and-forth about the words <strong><code>try</code></strong>, <strong><code>opt</code></strong>, and <strong><code>maybe</code></strong>...with a general dislike of the word OPT.  The current idea is that TRY was intended to defuse harder definitional errors:</p>
<pre><code>&gt;&gt; take []
** Error: you can't take from an empty block (stopping further code)

&gt;&gt; try take []
== ~null~  ; isotope
</code></pre>
</blockquote>
<h2>
<a name="an-extra-barrier-to-creating-maybe-is-mechanical-4" class="anchor" href="https://forum.rebol.info#an-extra-barrier-to-creating-maybe-is-mechanical-4"></a>An extra barrier to creating MAYBE is mechanical</h2>
<p>... <em>because the error that NULL generates is the "null combinator" itself</em>.  It is <em>not</em> a definitional error, because those just represent things like "type didn't match".</p>
<p>The only way I can see a null-disabling MAYBE parse combinator working would be by quoting its argument, doing the rule fetch itself, and turning into a failing combinator if it fetched null.  This breaks the model somewhat.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=12" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
<h2>
<a name="maybe-prefix-could-mean-optionally-null-variable-5" class="anchor" href="https://forum.rebol.info#maybe-prefix-could-mean-optionally-null-variable-5"></a>Maybe <strong>/prefix</strong> could Mean Optionally-Null variable?</h2>
<pre><code>&gt;&gt; prefix: null, suffix: ")"

&gt;&gt; parse "aaa)" [/prefix, some "a", /suffix]
== ")"
</code></pre>
<p>It's already the case that paths have to be quoted to match in blocks, but a leading slash could be used to deal with the rules.</p>
<p>It's a lot to think about on my first day of thinking about Rebol stuff for a while!  But there you go.</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/the-handling-of-null-and-void-in-uparse/2023">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/the-handling-of-null-and-void-in-uparse/2023</link>
          <pubDate>Fri, 07 Apr 2023 00:14:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2023</guid>
          <source url="https://forum.rebol.info/t/the-handling-of-null-and-void-in-uparse/2023.rss">The Handling of NULL and VOID in UPARSE</source>
        </item>
        <item>
          <title>Future of the MATH Dialect</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Math</category>
          <description><![CDATA[
            <p>It is basically inevitable that people coming to Rebol will ask about its mathematical evaluation being left-to-right, instead of obeying the precedence order that they are used to.  Red just had a new user try to file it as a bug... 3 days ago:</p>
<p><a href="https://github.com/red/red/issues/5276" class="inline-onebox">Incorrect Order of Arithmetic Operations · Issue #5276 · red/red · GitHub</a></p>
<p><strong>What seemed to make sense to people like me and BrianH was that the core ship with a dialect called MATH.</strong>  The concept was that <strong>math [1 + 2 * 3]</strong> would give <strong>7</strong> and not <strong>9</strong>.  Having something in the box seemed better than having the first line of argument being <em>"you don't want the precedence you think you do"</em>.</p>
<p>But it turned out to be kind of hard to make pleasing.  One key difficulty which <a class="mention" href="https://forum.rebol.info/u/brett">@Brett</a> and I fretted over at some point was that since Rebol isn't "psychic" regarding arity, does not know a-priori how much code an expression will consume:</p>
<pre><code>math [1 + 2 * foo baz bar + 3]

; should it be...
[1 + (2 * (foo baz bar)) + 3]

; or perhaps...
[(1 + (2 * foo)) ((baz bar) + 3)]

; maybe...
[(1 + (2 * foo)) baz (bar + 3)]
</code></pre>
<p><strong>It started to appear that the user would have to put anything that wasn't a number or a math operator in groups.</strong>  There may be some heuristics which tolerate words that look up to numbers vs. functions, but it feels very slippery.</p>
<p>As I've said I hate to be dropping things, but MATH is something that Rebol programmers don't really want in the first place--and I don't think non-Rebol programmers would be satisfied by it.  If it's included in the core that suggests support for it, and there are just too many things in play.</p>
<p>Here is an implementation that was previously included, by Gabriele:</p>
<pre><code>; This MATH implementation is from Gabrielle Santilli circa 2001, found
; via http://www.rebol.org/ml-display-thread.r?m=rmlXJHS. It implements the
; much-requested (by new users) idea of * and / running before + and - in
; math expressions. Expanded to include functions.
;
math: func [
    {Process expression taking "usual" operator precedence into account.}

    expr [block!]
        {Block to evaluate}
    /only
        {Translate operators to their prefix calls, but don't execute}

    ; !!! This creation of static rules helps avoid creating those rules
    ; every time, but has the problem that the references to what should
    ; be locals are bound to statics as well (e.g. everything below which
    ; is assigned with BLANK! really should be relatively bound to the
    ; function, so that it will refer to the specific call.)  It's not
    ; technically obvious how to do that, not the least of the problem is
    ; that statics are currently a usermode feature...and injecting relative
    ; binding information into something that's not the function body itself
    ; isn't implemented.

    &lt;static&gt;

    slash (the /)

    expr-val (_)

    expr-op (_)

    expression  ([
        term (expr-val: term-val)
        opt some [
            ['+ (expr-op: 'add) | '- (expr-op: 'subtract)]
            term (expr-val: compose [(expr-op) (expr-val) (term-val)])
        ]
        &lt;end&gt;
    ])

    term-val (_)

    term-op (_)

    term ([
        pow (term-val: power-val)
        opt some [
            ['* (term-op: 'multiply) | slash (term-op: 'divide)]
            pow (term-val: compose [(term-op) (term-val) (power-val)])
        ]
    ])

    power-val (_)

    pow ([
        unary (power-val: unary-val)
        opt ['** unary (power-val: compose [power (power-val) (unary-val)])]
    ])

    unary-val (_)

    pre-uop (_)

    post-uop (_)

    unary ([
        (post-uop: pre-uop: [])
        opt ['- (pre-uop: 'negate)]
        primary
        opt ['! (post-uop: 'factorial)]
        (unary-val: compose [(post-uop) (pre-uop) (prim-val)])
    ])

    prim-val (_)

    primary ([
        set prim-val any-number!
        | set prim-val [word! | path!] (prim-val: reduce [prim-val])
            ; might be a funtion call, looking for arguments
            opt some [
                nested-expression (append prim-val take nested-expr-val)
            ]
        | ahead group! into nested-expression (prim-val: take nested-expr-val)
    ])

    p-recursion (_)

    nested-expr-val ([])

    save-vars (func [][
            p-recursion: reduce [
                :p-recursion :expr-val :expr-op :term-val :term-op :power-val :unary-val
                :pre-uop :post-uop :prim-val
            ]
        ])

    restore-vars (func [][
            set [
                p-recursion expr-val expr-op term-val term-op power-val unary-val
                pre-uop post-uop prim-val
            ] p-recursion
        ])

    nested-expression ([
            ;all of the static variables have to be saved
            (save-vars)
            expression
            (
                ; This rule can be recursively called as well,
                ; so result has to be passed via a stack
                insert nested-expr-val expr-val
                restore-vars
            )
            ; vars could be changed even it failed, so restore them and fail
            | (restore-vars) fail

    ])
][
    clear nested-expr-val
    let res: either parse3 expr expression [expr-val] [blank]

    either only [
        return res
    ][
        ret: reduce res
        all [
            1 = length of ret
            any-number? ret.1
        ] else [
            fail [
                unspaced ["Cannot be REDUCED to a number (" mold ret ")"]
                ":" mold res
            ]
        ]
        return ret.1
    ]
]
</code></pre>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/future-of-the-math-dialect/2013">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/future-of-the-math-dialect/2013</link>
          <pubDate>Tue, 31 Jan 2023 19:08:42 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2013</guid>
          <source url="https://forum.rebol.info/t/future-of-the-math-dialect/2013.rss">Future of the MATH Dialect</source>
        </item>
        <item>
          <title>Websocket Support in Oldes Rebol3</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Redbol</category>
          <description><![CDATA[
            <p>Looking to see what Oldes has been up to, he added some kind of minimal websocket support to the HTTP scheme:</p>
<p><a href="https://github.com/Oldes/Rebol3/commit/bae6cffe97e662ec9a727a01cdcc1fdd61455ea6#diff-490ba807ac4a5ee57e7a587ca0936d36e4c0ff2798b0652fdf791e758ce079c2R718" class="inline-onebox">FEAT: Minimalistic WebSocket support in the `httpd` scheme · Oldes/Rebol3@bae6cff · GitHub</a></p>
<p>Websockets isn't something I'm looking into at this time, but I wanted to bookmark it here in case it comes up later.</p>
<p>He also updated zlib to a new version released in 2022... and <a href="https://github.com/Oldes/Rebol3/commit/15fcc00b84f6d0e386f2ba2f4fc7bdc32ebff75d">used Ren-C's %make-zlib.r to do it!</a>.  But he edited it so he'd be able to run it under his Rebol3.  It's not a huge priority to do that update, but seems like since his ported script still worked, it might not be too hard.  (And a good reminder that script exists, and should be part of a CI test...)</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/websocket-support-in-oldes-rebol3/2003">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/websocket-support-in-oldes-rebol3/2003</link>
          <pubDate>Fri, 06 Jan 2023 03:56:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2003</guid>
          <source url="https://forum.rebol.info/t/websocket-support-in-oldes-rebol3/2003.rss">Websocket Support in Oldes Rebol3</source>
        </item>
        <item>
          <title>Head-to-Head Battle of the Coding Fonts</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>So I don't think this did the best job of representing Inconsolata (the choice for the ReplPad), but it lets you pit monospace fonts against each other to find the one you like:</p>
<p><a href="https://www.codingfont.com/">https://www.codingfont.com/</a></p>
<p>I still think if the right weight of Inconsolata is chosen it's the best.</p>
<p><a href="https://fonts.google.com/specimen/Inconsolata?preview.text=0O1Iil&amp;preview.text_type=custom#styles" class="inline-onebox">Google Fonts: Inconsolata</a></p>
<p>For me, the competition would be Source Code Pro or Fira Code.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/head-to-head-battle-of-the-coding-fonts/1994">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/head-to-head-battle-of-the-coding-fonts/1994</link>
          <pubDate>Thu, 01 Dec 2022 14:43:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1994</guid>
          <source url="https://forum.rebol.info/t/head-to-head-battle-of-the-coding-fonts/1994.rss">Head-to-Head Battle of the Coding Fonts</source>
        </item>
        <item>
          <title>R3-Alpha&#39;s DATATYPE! Definition</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Redbol</category>
          <description><![CDATA[
            <p>You likely know that DATATYPE! in R3-Alpha (Rebol 2, Red...) has a distinct "type byte" in the cell.  So the implementation can tell it's a different thing, even if not all representations show that:</p>
<pre><code>r3-alpha&gt;&gt; block: reduce ['integer! integer!]
== [integer! integer!]

r3-alpha&gt;&gt; type? first block
== word!

r3-alpha&gt;&gt; type? second block
== datatype!
</code></pre>
<p>One way R3-Alpha has to see the difference is with MOLD/ALL</p>
<pre><code>r3-alpha&gt;&gt; mold/all block
== "[integer! #[datatype! integer!]]"
</code></pre>
<h2>
<a name="but-whats-actually-in-a-datatype-cell-1" class="anchor" href="https://forum.rebol.info#but-whats-actually-in-a-datatype-cell-1"></a>But What's Actually <em>in</em> a DATATYPE! Cell?</h2>
<p>This was <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/include/sys-value.h#L106">the definition struct from R3-Alpha</a>:</p>
<pre><code>typedef struct Reb_Type {
    REBINT type;  // base type
    REBSER *spec;
    // REBINT min_type;
    // REBINT max_type;
} REBTYP;
</code></pre>
<p>So an integer to say what <strong><code>type</code></strong> it is (e.g. REB_INTEGER = 1, REB_LOGIC = 2, REB_BLOCK = 3 or whatever).  Note that this in the <em>payload</em> of the cell, not the header...because the type in the header is REB_DATATYPE to say it carries a "datatype payload".</p>
<p>Who knows what the commented-out <strong><code>min_type</code></strong> and <strong><code>max_type</code></strong> were.  But a remark says this payload is for a "Datatype or pseudo-datatype".  We can guess these were for pseudo-datatypes as a way of specifying a range of REB_XXX numbers to implement categories like ANY-SERIES!, as an alternative to typesets (?)</p>
<p>The <strong><code>spec</code></strong> is actually an object, that comes back as the answer to SPEC-OF:</p>
<pre><code>r3-alpha&gt;&gt; spec-of integer!
== make object! [
    title: "64 bit integer"
    type: 'scalar
]
</code></pre>
<p>This limited amount of information was built into the executable from the <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/boot/typespec.r#L24">Rebol-format table table in %typespec.r</a>.</p>
<p>You needed to use SPEC-OF to access these properties, but it could have been accessible with paths, e.g. <strong>integer!/title</strong>.  And it might have had more interesting properties:</p>
<pre><code>&gt;&gt; integer!/max-value
== 9223372036854775807
</code></pre>
<h2>
<a name="all-redbols-conflated-the-looks-of-datatype-and-word-2" class="anchor" href="https://forum.rebol.info#all-redbols-conflated-the-looks-of-datatype-and-word-2"></a>All Redbols Conflated The Looks of DATATYPE! and WORD!</h2>
<p>In lockstep, they all did it:</p>
<pre><code>rebol2&gt;&gt; integer!
== integer!

r3-alpha&gt;&gt; integer!
== integer!

red&gt;&gt; integer!
== integer!
</code></pre>
<p>Since I have <a href="https://forum.rebol.info/t/boron-language/1976">Boron</a> built, I find it renames integer! to int!, but otherwise the same:</p>
<pre><code>)&gt; int!
== int!

)&gt; type? int!
== datatype!

)&gt; type? first [int!]
== word!
</code></pre>
<p><strong>It seemed to me that this conflation couldn't possibly be the best answer.</strong>  So I made Ren-C buck this trend to use the R3-Alpha construction syntax, because it was something that could LOAD back:</p>
<pre><code>&gt;&gt; integer!
== #[datatype! integer!]

&gt;&gt; load "#[datatype! integer!]"
== [#[datatype! integer!]]
</code></pre>
<p><strong>Rendering differently was good, but the specific different rendering wasn't all that palatable.</strong>  And it wasn't showing it as any complex object.</p>
<h2>
<a name="where-to-go-from-there-3" class="anchor" href="https://forum.rebol.info#where-to-go-from-there-3"></a>Where To Go From There?</h2>
<p>There seemed to be two directions to go with this:</p>
<ul>
<li>
<p>Accept DATATYPE! as some kind of alien complex type which has ugly rendering</p>
</li>
<li>
<p>Fit it into the lexical space somewhere.</p>
</li>
</ul>
<p>Ren-C has moved toward the idea of making datatypes a BLOCK! variant, decorated with &amp;:</p>
<pre><code>&gt;&gt; type of integer!
== &amp;[integer]
</code></pre>
<p>The details of what structure is used on these type blocks is still under consideration at time of writing.  See the threads in the forum's <a href="https://forum.rebol.info/c/development/datatypes/45">Datatypes Category</a></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/r3-alphas-datatype-definition/1978">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/r3-alphas-datatype-definition/1978</link>
          <pubDate>Sat, 24 Sep 2022 08:02:56 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1978</guid>
          <source url="https://forum.rebol.info/t/r3-alphas-datatype-definition/1978.rss">R3-Alpha&#39;s DATATYPE! Definition</source>
        </item>
        <item>
          <title>Series Switching in PARSE</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Parsing</category>
          <description><![CDATA[
            <p><strong>Rebol2 Prohibited Series Switching During a PARSE</strong></p>
<pre><code>&gt;&gt; series1: [a a a]
== [a a a]

&gt;&gt; series2: [b b b]
== [b b b]

&gt;&gt; parse series1 ['a :series2 some 'b]
** Script Error: Invalid argument: b b b
</code></pre>
<p>The error wasn't particularly informative.  But it was trying to tell you that you couldn't do that.</p>
<p><strong>Red Chose to Follow Suit, and Prohibits Series Switching During a PARSE</strong></p>
<p>red&gt;&gt; series1: [a a a]<br>
== [a a a]</p>
<p>red&gt;&gt; series2: [b b b]<br>
== [b b b]</p>
<p>red&gt;&gt; parse series1 ['a :series2 some 'b]<br>
*** Script Error: PARSE - get-word refers to a different series! :series2</p>
<p><strong>R3-Alpha Decided To Make It Legal</strong></p>
<pre><code>r3-alpha&gt;&gt; series1: [a a a]
== [a a a]

r3-alpha&gt;&gt; series2: [b b b]
== [b b b]

r3-alpha&gt;&gt; parse series1 ['a :series2 some 'b]
== true
</code></pre>
<p>I wasn't aware the feature was used, but <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> used it in the Rebol3 version of altjson:</p>
<p><a href="https://github.com/rgchris/Scripts/blob/6fa69eabe11fe78b9fd0a7bd6bb17a923cee0b2b/r3-alpha/altjson.r3#L48">https://github.com/rgchris/Scripts/blob/6fa69eabe11fe78b9fd0a7bd6bb17a923cee0b2b/r3-alpha/altjson.r3#L48</a></p>
<h2>The Feature Was Added to R3-Alpha Circa 2009</h2>
<p>Carl's blog entry:</p>
<p><a href="http://www.rebol.net/r3blogs/0265.html">http://www.rebol.net/r3blogs/0265.html</a></p>
<p>He points out one fairly clear reason why this is sketchy:</p>
<blockquote>
<p>The problem is this: if you change the series but the rule fails, forcing a recovery to a prior index, <em>it's still the new series</em>. That is, we do not recover to the old series.</p>
<p>If advanced users are willing to live with that restriction, then this change can be made.</p>
</blockquote>
<p>Another comment says the opposite of what I would think:</p>
<blockquote>
<p>Input switching would make parsing of big (or streaming) files more easy, as we wouldn't have to keep the whole data in memory, and could read it as needed, without losing the current parse state.</p>
</blockquote>
<p>Doing streaming parsing <em>correctly</em> requires <em>tighter</em> control over the process... not less.</p>
<h2>Can The Desire Be Met Other Ways?</h2>
<p>Since you're basically destroying the ability to meaningfully backtrack, I don't know how this is that different from starting a new parse.</p>
<p>I'd like it to be easy to return results out of a parse (see the <a href="https://forum.rebol.info/t/uparses-spin-on-return/1589">RETURN/ACCEPT post</a>)</p>
<p>So why wouldn't you have some kind of driving loop on the outside of your parse that looks for a continuation signal, and then starts a new parse with what it's given?</p>
<p>I want to take a look at the cases and see if they could be done some other way.  So maybe <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> can explain the rational behind the choice in altjson, and if there's some feature that would be a better fit.</p>
            <p><small>7 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/series-switching-in-parse/1974">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/series-switching-in-parse/1974</link>
          <pubDate>Tue, 20 Sep 2022 02:03:00 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1974</guid>
          <source url="https://forum.rebol.info/t/series-switching-in-parse/1974.rss">Series Switching in PARSE</source>
        </item>
        <item>
          <title>Boron Language</title>
          <dc:creator><![CDATA[WickedSmoke]]></dc:creator>
          <category>Redbol</category>
          <description><![CDATA[
            <p>Hello, Boron author here.  I look in on the Ren-C project once a year or so to see what's going on.  A few times I have considered joining this forum but for various reasons have not done so.  Since you have made space for similar projects, now seems like a good time to touch base.</p>
<p>Boron is my daily driver for scripting and has been in a stable period for years.  Bugfix releases occur roughly once per year.  I should have been making release announcements on the mailing list, but as there is no community of active users I didn't bother.  To exercise the language I have used it in the <a href="http://xu4.sourceforge.net/" rel="noopener nofollow ugc">xu4 project</a> to replace the XML configuration and scripting.</p>
<p>The next period of change may include support for static strings (ala AltScript), optimized path! storage, and reworking the evaluator to support yielding.</p>
<p>Games and graphics are an interest of mine so the Boron-GL project is where I experiment with GUIs, shaders, and such.  Some of the work on xu4 such as font rendering and the <a href="https://wickedsmoke.github.io/faun/" rel="noopener nofollow ugc">Faun</a> library will make it's way into Boron-GL.  The GL code was part of the main Boron repository until the end of 2019.</p>
            <p><small>12 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/boron-language/1976">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/boron-language/1976</link>
          <pubDate>Sat, 17 Sep 2022 14:39:08 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1976</guid>
          <source url="https://forum.rebol.info/t/boron-language/1976.rss">Boron Language</source>
        </item>
        <item>
          <title>Dialecting With Quasiforms</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Dialects/DSLs</category>
          <description><![CDATA[
            <p>In the list of potential ideas of the long forgotten past, there was a thought that strings would come in two forms... one that was compared case-sensitively, and another that was not.</p>
<p>The visual look of the case-insensitive form was suggested as having a leading tilde, as one representation.</p>
<pre><code>&gt;&gt; "a" = ~"A"
== #[true]
</code></pre>
<p>No one really went to bat for the idea or thought through its ramifications.  It wasn't particularly easy to test what that would be like.</p>
<h2>Quasiforms Make The Proposal Easier To Test</h2>
<p>We now basically have the implementation guts needed to where we could consider the bits passed on the value.  It even has a decent name:</p>
<pre><code>&gt;&gt; quasi "A"
== ~"A"~

 &gt;&gt; "a" = "A"
 == #[false]

 &gt;&gt; "a" = quasi "A"
 == #[true]
</code></pre>
<p>The principle meaning of a quasiform is as the ^META of an isotope form.  And what this would mean is, there's no such thing as a differentiation between an isotopic case-sensitive word/string and an isotopic case-insensitive word/string.</p>
<h2>I Don't Think I Like It, BUT...</h2>
<p>Regardless of me not liking it, it's a possibility for dialects.  If you wanted to mark some strings for case-insensitivity you have another option in the box.</p>
<p>The reason I don't like it is because the isotope and quasi forms are supposed to stand out and draw attention to weirdness.  This is too common an application.  And it would mean your case-insensitive forms would be evaluating to isotopes everywhere, unless the quasiform evaluation changed in some way to make quasi-strings inert.  This isn't in line with what I want to do.</p>
<p>But...your dialect can do it.</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/dialecting-with-quasiforms/1960">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/dialecting-with-quasiforms/1960</link>
          <pubDate>Mon, 05 Sep 2022 08:16:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1960</guid>
          <source url="https://forum.rebol.info/t/dialecting-with-quasiforms/1960.rss">Dialecting With Quasiforms</source>
        </item>
        <item>
          <title>Scheduler Dialect</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Dialects/DSLs</category>
          <description><![CDATA[
            <p>I thought of the scheduler dialect today that DocKimbel had made, and went and looked it up.</p>
<p>This is something that should be able to run as-is in Ren-C under Redbol emulation--so I'll see what I can do about that.  But it would also be interesting to see what kinds of improvements could be made to it with a Ren-C specific version.</p>
<aside class="onebox githubgist">
  <header class="source">
      <a href="https://gist.github.com/greggirwin/63471784ace61153763f465c3ea37c98" target="_blank" rel="noopener">gist.github.com</a>
  </header>
  <article class="onebox-body">
    <h4><a href="https://gist.github.com/greggirwin/63471784ace61153763f465c3ea37c98" target="_blank" rel="noopener">https://gist.github.com/greggirwin/63471784ace61153763f465c3ea37c98</a></h4>
<h5>scheduler.r</h5>
<pre><code class="Rebol">REBOL [
	Title: "Scheduler"
	File: %scheduler.r
	Purpose: "Dialected task scheduling library"
	Author: ["SOFTINNOV / Nenad Rakocevic" "Pointillistic / Gregg Irwin"]
	Copyright: ["2009 SOFTINNOV" "2013 SOFTINNOV/POINTILLISTIC"]
	Email: [nr@softinnov.com gregg@pointillistic.com]
	Date: 28-Oct-2013
	Version: 0.9.5
	License: "BSD - see %LICENCE.txt file"</code></pre>
This file has been truncated. <a href="https://gist.github.com/greggirwin/63471784ace61153763f465c3ea37c98" target="_blank" rel="noopener">show original</a>

<p>
</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/scheduler-dialect/1957">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/scheduler-dialect/1957</link>
          <pubDate>Sat, 03 Sep 2022 07:40:27 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1957</guid>
          <source url="https://forum.rebol.info/t/scheduler-dialect/1957.rss">Scheduler Dialect</source>
        </item>
  </channel>
</rss>
