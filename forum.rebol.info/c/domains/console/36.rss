<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Console - AltRebol</title>
    <link>https://forum.rebol.info/c/domains/console/36</link>
    <description>Topics in the &#39;Console&#39; category Specific development relating to the console, and driving the same.</description>
    
      <lastBuildDate>Thu, 01 Feb 2024 00:13:45 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/domains/console/36.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Rendering Difference For Bound/Unbound Code</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>With the new binding model tending to have things sparsely bound, it helps to know what is and isn't bound.</p>
<p>It seems to me it would be very useful (and educational) in rich consoles to make the rendering of code reflect the binding status.</p>
<p><img src="https://forum.rebol.info/uploads/default/original/1X/c7cac409fc3ebb1db0467fb9c8c94b531ff1ec11.png" alt="image" data-base62-sha1="svrriultuZqA01aLNlih32dDyRr" width="258" height="201"></p>
<p>So there you can see that a plain block will evaluate so the block itself is bound, while the contents are left unbound.  A quoted block will be all unbound.</p>
<p>Even better would be if you could hover over the bound bits and see what they were bound to.  It may be best if the coloring was very subtle by default (e.g. just bold black vs a dark gray) and then if you hovered, maybe it would colorize it... perhaps even making things bound the same match colors.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/rendering-difference-for-bound-unbound-code/2142">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/rendering-difference-for-bound-unbound-code/2142</link>
          <pubDate>Thu, 01 Feb 2024 00:13:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2142</guid>
          <source url="https://forum.rebol.info/t/rendering-difference-for-bound-unbound-code/2142.rss">Rendering Difference For Bound/Unbound Code</source>
        </item>
        <item>
          <title>Replaying Console Commands (Red&#39;s &quot;Spaces Console&quot;)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Red's hiiamboris has made an alternative console (built on his <a href="https://forum.rebol.info/t/vid-s-or-spaces-from-reds-hiiamboris/1886">"Spaces" VID alternative</a>).  It appears you can go back to an earlier expression and edit it, and if you do, it will ripple the changes through running all your future expressions again.</p>
<p><img src="https://link.storjshare.io/raw/jwtiabvp6myahg3zzf3q5zoii7la/gif/spaces/demo-spaces-console.gif" alt="spaces console" width="409" height="500"></p>
<p>It's called <strong><a href="https://codeberg.org/hiiamboris/red-spaces/src/branch/master/programs/console">"Spaces Console"</a></strong>, and it's an interesting idea.  Sort of fuses together a watchlist with a console.</p>
<p>Note that Ren-C's Web Console can keep Ctrl-Z'ing to undo console output and go back to edit previous expressions... but you lose the subsequent commands.  Though the web console also has a <a href="https://youtu.be/0exDvv5WEv4?t=326">watchlist like the one in the Qt Ren Garden</a>.</p>
<p>Anyway, something to think about.</p>
<p>Note that the current implementation appears to be slow (<a href="https://matrix.to/#/!EorVRCzrVpjojJtctJ:gitter.im/$nf_3fEnM_24P0qAMnxdnwdcOKF3NVsAtzR6YnZq0PKM?via=gitter.im&amp;via=matrix.org&amp;via=chat.weho.st">Gitter link</a>):</p>
<blockquote>
<p><strong>Gregg:</strong> <em>"I thought it didn't like <code>repeat i 100 [print i]</code>, but just took a long time to process it. ~10s."</em></p>
<p><strong>Boris:</strong> <em>"printing is O(n^2) atm, need to overcome laziness and make it lower level :D"</em></p>
</blockquote>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/replaying-console-commands-reds-spaces-console/2107">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/replaying-console-commands-reds-spaces-console/2107</link>
          <pubDate>Thu, 11 Jan 2024 10:00:27 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2107</guid>
          <source url="https://forum.rebol.info/t/replaying-console-commands-reds-spaces-console/2107.rss">Replaying Console Commands (Red&#39;s &quot;Spaces Console&quot;)</source>
        </item>
        <item>
          <title>How Console Displays Things With No Literal Representation</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>It's tricky to think of what to do to print out things that don't have representation.</p>
<p>For example, isotopes ("antiforms") don't have representations and cannot be molded. (For a proposal of the exception of MOLD of splices, see <strong><a href="https://forum.rebol.info/t/mold-only-vs-mold-spread/2059">MOLD/ONLY vs spread</a></strong>)</p>
<p>So what's traditionally been done is just render it as a quasiform (so the tilde at the beginning hints something its up), and then add a comment at the end of the rendering.</p>
<p>If the <a href="https://forum.rebol.info/t/quasiforms-stable-unstable-isotopes-simpler-terminology/2005/7">renaming of "isotope" to "anti" were taken</a>, this would look like:</p>
<pre><code>&gt;&gt; anti 'null
== ~null~  ; anti
</code></pre>
<p>The representational issue is a bit of a thorn in the console, but you have to print something. (Well, unless it's a void, where printing nothing is the design.)</p>
            <p><small>5 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096</link>
          <pubDate>Mon, 08 Jan 2024 23:58:13 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2096</guid>
          <source url="https://forum.rebol.info/t/how-console-displays-things-with-no-literal-representation/2096.rss">How Console Displays Things With No Literal Representation</source>
        </item>
        <item>
          <title>Console Treatment of VOID vs. TRASH (isotopic void)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Rebol2 and Red both have a console property that when the console sees an UNSET!, it prints nothing:</p>
<pre><code>&gt;&gt; block: reduce [&lt;a&gt; #[unset!] &lt;b&gt;]
== [&lt;a&gt; unset &lt;b&gt;]  ; bad rendering, conflates #[unset!] with the word `unset`

&gt;&gt; first block
== &lt;a&gt;

&gt;&gt; second block

&gt;&gt; third block
== &lt;b&gt;
</code></pre>
<p>This doesn't provide the best grounding in the console, especially considering that in their world an UNSET! is a reified value that can be found in a block.</p>
<p>However, returning an UNSET! is how functions like PRINT avoid outputting anything with <strong><code>==</code></strong> in the console:</p>
<pre><code>rebol2&gt;&gt; print "Notice no == result"
Notice no == result

rebol2&gt;&gt; type? print "Test"
Test
== unset!
</code></pre>
<h2>
<a name="but-what-result-should-ren-c-suppress-1" class="anchor" href="https://forum.rebol.info#but-what-result-should-ren-c-suppress-1"></a>But What Result Should Ren-C Suppress?</h2>
<p>Ren-C has the concept of VOID which has an isotopic form known as "TRASH", that is used as the unfriendly contents of an unset variable.</p>
<p>For educational purposes, I feel it makes the most sense to have voids not print anything, and trashes print out the standard isotopic form:</p>
<pre><code>&gt;&gt; void

&gt;&gt; quote void
== '

&gt;&gt; quasi void
== ~

&gt;&gt; ~
== ~  ; isotope
</code></pre>
<p>Looking at this, it might seem to make a lot of sense to have functions like PRINT and HELP return VOID.</p>
<p>But as I explain in <a href="https://forum.rebol.info/t/why-doesnt-print-return-void-or-vaporize-via-nihil/1466">"Why doesn't PRINT return VOID or NIHIL"</a>, there is a bit of a pitfall.  Voids are friendly in terms of opting out of things:</p>
<pre><code>&gt;&gt; append [a b c] print "If PRINT returned void..."
If PRINT returned void...
== [a b c]
</code></pre>
<p><em>This seems too friendly to me.</em>  There's another possibility of returning NIHIL, which would prohibit use as an argument  It would wind up making an evaluation appear to be void <em>if no other expressions were in play</em>...but if other expressions were involved it would let them fall out</p>
<pre><code>&gt;&gt; print "If PRINT returned nihil"
If PRINT returned nihil

&gt;&gt; append [a b c] "If PRINT returned nihil"
If PRINT returned nihil
** Error: APPEND is missing its VALUE argument

&gt;&gt; 1 + 2 print "If PRINT returned nihil"
If PRINT returned nihil
== 3
</code></pre>
<p>So returning TRASH feels like it makes the most <em>mechanical</em> sense...it has the right amount of ornery-ness:</p>
<pre><code>&gt;&gt; print "Mechanically this works best"
Mechanically this works best
== ~  ; isotope
</code></pre>
<p>But it's ugly to have that <strong>== ~  ; isotope</strong> after every HELP or PRINT or other function.</p>
<p>Previously I had it so that trash printed nothing, and void printed out a comment:</p>
<pre><code>&gt;&gt; ~

&gt;&gt; void
; void
</code></pre>
<p>But this is making the console pretty at the cost of obfuscation.  I'll point out that the web console can make the <strong>== ~  ; isotope</strong> some kind of light gray so it's less noticeable.</p>
<h2>
<a name="people-always-bend-to-get-what-they-want-2" class="anchor" href="https://forum.rebol.info#people-always-bend-to-get-what-they-want-2"></a>People Always Bend To Get What They Want...</h2>
<p>I might not like the idea of returning a "friendly" void to get invisibility, and try forcing everyone to use TRASH for console commands.  But if they see VOID/NIHIL as the better way to get what they want, they'll choose that in their own commands to cut down on the clutter.</p>
<p>Perhaps there's a rationale here for why isotopic void would output nothing, while void would give a comment?  If you consider the fact that isotopic void is "less than" a void, then giving it the special nothing-printed status makes <em>some</em> amount of sense, maybe.  <img src="https://forum.rebol.info/images/emoji/twitter/thinking.png?v=12" title=":thinking:" class="emoji" alt=":thinking:" loading="lazy" width="20" height="20"></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/console-treatment-of-void-vs-trash-isotopic-void/2045">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/console-treatment-of-void-vs-trash-isotopic-void/2045</link>
          <pubDate>Thu, 03 Aug 2023 22:48:43 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2045</guid>
          <source url="https://forum.rebol.info/t/console-treatment-of-void-vs-trash-isotopic-void/2045.rss">Console Treatment of VOID vs. TRASH (isotopic void)</source>
        </item>
        <item>
          <title>Head-to-Head Battle of the Coding Fonts</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>So I don't think this did the best job of representing Inconsolata (the choice for the ReplPad), but it lets you pit monospace fonts against each other to find the one you like:</p>
<p><a href="https://www.codingfont.com/">https://www.codingfont.com/</a></p>
<p>I still think if the right weight of Inconsolata is chosen it's the best.</p>
<p><a href="https://fonts.google.com/specimen/Inconsolata?preview.text=0O1Iil&amp;preview.text_type=custom#styles" class="inline-onebox">Google Fonts: Inconsolata</a></p>
<p>For me, the competition would be Source Code Pro or Fira Code.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/head-to-head-battle-of-the-coding-fonts/1994">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/head-to-head-battle-of-the-coding-fonts/1994</link>
          <pubDate>Thu, 01 Dec 2022 14:43:59 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1994</guid>
          <source url="https://forum.rebol.info/t/head-to-head-battle-of-the-coding-fonts/1994.rss">Head-to-Head Battle of the Coding Fonts</source>
        </item>
        <item>
          <title>Merge Equal Fields when Molding/Printing Objects</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>One of the justifications for why <a href="https://forum.rebol.info/t/bad-word-choices-the-role-of-english-in-the-evaluator/1413/9">~unset~ was changed to ~</a> was to reduce the amount of "noise" when printing things like FRAME!s, and so the specialized fields could be seen easier.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="9" data-topic="1413">
<div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/40/26_2.png" class="avatar"><a href="https://forum.rebol.info/t/bad-word-choices-the-role-of-english-in-the-evaluator/1413/9">BAD-WORD! Choices: The Role of English in the Evaluator</a>
</div>
<blockquote>
<pre><code>&gt;&gt; make frame! :append
== make frame! [
    series: ~
    value: ~
    part: ~
    only: ~
    dup: ~
    line: ~
]
</code></pre>
</blockquote>
</aside>
<p>...but why not:</p>
<pre><code>&gt;&gt; make frame! :append
== make frame! [
    series: 
    value:
    part:
    only:
    dup:
    line: ~
]</code></pre>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/merge-equal-fields-when-molding-printing-objects/1829">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/merge-equal-fields-when-molding-printing-objects/1829</link>
          <pubDate>Mon, 23 May 2022 22:11:43 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1829</guid>
          <source url="https://forum.rebol.info/t/merge-equal-fields-when-molding-printing-objects/1829.rss">Merge Equal Fields when Molding/Printing Objects</source>
        </item>
        <item>
          <title>REPL Querying</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>It might be worthwhile to take some inspiration from this:</p>
<aside class="onebox githubfolder">
  <header class="source">
      <img src="https://github.githubassets.com/favicons/favicon.svg" class="site-icon" width="32" height="32">
      <a href="https://github.com/ellie/atuin" target="_blank" rel="noopener">github.com</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/345;"><img src="https://opengraph.githubassets.com/dca1958aebeb424b5526f3fa3c903c51716ab4f22eb7cd64a50259c3d4288398/ellie/atuin" class="thumbnail" width="690" height="345"></div>

<h3><a href="https://github.com/ellie/atuin" target="_blank" rel="noopener">GitHub - ellie/atuin: 🐢 Magical shell history</a></h3>


  <p><span class="label1">🐢 Magical shell history. Contribute to ellie/atuin development by creating an account on GitHub.</span></p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>I'd like us to start using the <a href="https://github.com/hostilefork/replpad-js/blob/master/storage.md">persistence features</a> to remember previous sessions, and perhaps make it easier to <strong>curate past Repl interactions into scripts</strong>.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/repl-querying/1804">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/repl-querying/1804</link>
          <pubDate>Sat, 07 May 2022 19:11:19 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1804</guid>
          <source url="https://forum.rebol.info/t/repl-querying/1804.rss">REPL Querying</source>
        </item>
        <item>
          <title>Running URLs from the command line</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>I thought it would be neat to try out the new <a href="https://forum.rebol.info/t/do-or-import-of-github-gitlab-decorated-urls-on-desktop/1761">decorated URL redirection</a> in the console, by running a URL!.  So I tried:</p>
<blockquote>
<p><code>r3 https://github.com/metaeducation/rebol-odbc/blob/master/tests/odbc-test.reb rebol-firebird --firebird</code></p>
</blockquote>
<p>This didn't give me what I wanted:</p>
<pre><code>** Access Error: cannot open: %/https/github.com/metaeducation/rebol-odbc/blob/master/tests/odbc-test.reb
</code></pre>
<h2>It Thought That Was A Filename...</h2>
<p>And oddly enough, it could have been.</p>
<p>On Linux, you can make a directory called <strong><code>https:</code></strong>.  Double slashes are collapsed to assume you meant a single slash.  It could be interpreted as a path.</p>
<h2>We Should Default This To Treating It As A URL</h2>
<p>I think it's pretty obvious that should be running a script from a network location.  But if people want a file interpretation there should be a way to do that.  Should we let the % character disambiguate it?</p>
<pre><code>r3 %http://example.com/script.r
</code></pre>
<p>If so, how to deal with files that actually start with %?  %%?</p>
<p>Or maybe something like:</p>
<pre><code>r3 --file http://example.com/script.r
</code></pre>
<p>In any case, it's not entirely clear what program logic we should use here to interpret this.  Do we explicitly try to see if something can LOAD as a URL! and if not, assume it's a filename?  Do we look more narrowly for alphanumerics followed by a colon?  Special cases for http and https only, for now?</p>
<p>I'm hacking in the alphanumerics followed by colon.  But the edge case of a "weird" filename should be tended to someday.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/running-urls-from-the-command-line/1764">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/running-urls-from-the-command-line/1764</link>
          <pubDate>Wed, 01 Dec 2021 14:04:22 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1764</guid>
          <source url="https://forum.rebol.info/t/running-urls-from-the-command-line/1764.rss">Running URLs from the command line</source>
        </item>
        <item>
          <title>&quot;Current Directory&quot; and Relativism to Script Directory</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>When you encounter a DO or an IMPORT of a relative path in a script, we've been assuming that the most convenient interpretation of that would be to have it run relative to the script's location.</p>
<h2>I think we need to stop changing the working directory on DO</h2>
<p>We no longer use DO for breaking scripts into components, because the module system is starting to work...and it will only work better as time goes on.</p>
<p>So the idea of DO is now that it is a script that is like a utility, that takes command-line arguments of what it is to operate on.</p>
<p>The person who invokes a DO--like the person who invokes a script from a command-line--has a concept of the current path.  The filenames they use are relative to their concept of the path, not the concept of the script.  When running from the command line you may not really know or care where the script is--it could be somewhere on the path--why would you relativize your paths to this unknown location?</p>
<h2>We Can Use New Datatypes Like <span class="mention">@p</span>/a/t.h and <span class="mention">@tup.le</span>
</h2>
<p>Files passed on the command line can have pretty gnarly names with arbitrary composition in them...spaces, starting with digits, etc.</p>
<p>When you DO or IMPORT a script the name is likely more tame.</p>
<p>What if we said you could IMPORT an <code>@xxx</code> and it would turn that into a path and relativize it?</p>
<pre><code>import %my-lib.r  ; relative to WHAT-DIR
import @my-lib.r  ; relative to system.script.path
</code></pre>
<p>Having distinct intents for IMPORT isn't as useful as distinct intents for DO.</p>
<p>If we were willing to establish these two intents, we could make it a property of READ... so this ceases to be anything specific to IMPORT or DO.</p>
<h2>Questions, Comments, Suggestions?</h2>
<p>Right now the @-path idea looks like a pretty decent idea.  I think it would solve a lot of pain points I've been dealing with in trying to write GitHub Actions that are getting confused about the directories.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/current-directory-and-relativism-to-script-directory/1688">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/current-directory-and-relativism-to-script-directory/1688</link>
          <pubDate>Fri, 27 Aug 2021 01:19:34 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1688</guid>
          <source url="https://forum.rebol.info/t/current-directory-and-relativism-to-script-directory/1688.rss">&quot;Current Directory&quot; and Relativism to Script Directory</source>
        </item>
        <item>
          <title>Reliable Stdio and Input Redirection: Plan of a Tac</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Rebol has historically in my experience been very bad at dealing with redirection.  <a href="https://forum.rebol.info/t/how-should-redirected-input-work-for-the-console/1546">I've summarized some of that before.</a></p>
<p>I've also summarized the varous reasons that the Device Model in R3-Alpha really amounted to obfuscating make-work.  Really it just asked you to unpack assembled Rebol cells into plain-C-only data buffers and types.  It did so all for the sake of throwing over the wall to an abstract OS that didn't match or model any existing OS...and lacked invariants or asserts.</p>
<p><em>But as far as stdio goes, I've managed to excise the "REBDEV" Device for it.</em>  And yet the stdio is all in an extension.  But it's an extension that knows what Rebol values are, and can speak in terms of them and talk to the OS without needing a middleman.</p>
<h2>And Now... <a href="https://github.com/metaeducation/ren-c-stdio/blob/9277c615fc8ad74278b1a5aaca7f053f4ecfb3b2/.github/workflows/test-stdio.yml#L88">We Have Stdio Input and Output Redirection Tests!</a>
</h2>
<p>Not too many tests, but it was more than enough to keep me busy making them all work cross platform...while not screwing up the console experience.  The model for managing Ctrl-C cancellations is much better now.</p>
<p>At the moment <a href="https://github.com/metaeducation/ren-c-stdio/actions/runs/1170800228">the tests are all passing</a>.  I'm hoping that we can get tests that check how Ctrl-C reactions are handled and do some dynamic typing in "pseudoterminals" so that the console gets tested.</p>
<p>Things will be bumpy for a bit, but to make a long story short...they're definitely on a <em>much</em> better track now.  It's getting under control which means that features will be easier tow rite.</p>
<h2>The Reverse Cat Test</h2>
<p>For a first test program I picked something simple... to write a Ren-C version of the UNIX "tac" program.  This just reverses the lines in a file.  But I wanted it to do that to a stream of piped text...receive lines in, output reversed lines.</p>
<p>Here was how I thought to write it:</p>
<pre><code>write-stdout try delimit/tail newline reverse collect [
    until [not keep line: try read-line]
]
</code></pre>
<p>It makes use of a new feature of delimit: you can ask the delimiter be added at the /HEAD or /TAIL also:</p>
<pre><code>&gt;&gt; delimit/tail "," ["a" "b" "c"]
== "a,b,c,"

&gt;&gt; delimit/head "," ["a" "b" "c"]
== ",a,b,c"

&gt;&gt; delimit/head/tail "," ["a" "b" "c"]
== ",a,b,c,"
</code></pre>
<p>So when you're taking lines that have been read and given back to you without the newline on them, putting them back to having the newlines should involve adding newlines after each item.  Said another way: "between all the items plus one after the last"</p>
<h2>We Need More of These Programs!  More of These Tests!</h2>
<p>There's a lot more I could say about this, but I'm worn out at present.  So I'll just end the post with a plea that more of these small programs, data, and redirection be cooked up.</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/sleeping_bed.png?v=9" title=":sleeping_bed:" class="emoji only-emoji" alt=":sleeping_bed:"></p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/reliable-stdio-and-input-redirection-plan-of-a-tac/1686">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/reliable-stdio-and-input-redirection-plan-of-a-tac/1686</link>
          <pubDate>Thu, 26 Aug 2021 14:49:24 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1686</guid>
          <source url="https://forum.rebol.info/t/reliable-stdio-and-input-redirection-plan-of-a-tac/1686.rss">Reliable Stdio and Input Redirection: Plan of a Tac</source>
        </item>
        <item>
          <title>What Should the Console Do If You Type Too Fast During Startup?</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>So these days, stdio is an extension, it is loaded late in the boot. You can build the interpreter without stdio to use in a non-interactive library.  Or you can replace it entirely, as the Web Repl does.</p>
<p>But for the moment let's talk about the standard-stdio...</p>
<p>One of the things it does is that if you're not redirecting input, it switches over from the so-called "cooked mode" of reading a line at a time to "raw mode", where you can manage each keystroke. So that's why you can process cursor keys, or tab, or if you wanted to make it so when people typed A they saw B, etc.</p>
<p>But for the duration of the time between when the program starts and when the extension gets run, it's still in cooked mode.</p>
<p>So if you type some stuff and it hasn't quite finished loading, it will be echoed. I didn't realize this because I was running a program that didn't print a boot banner, and it just had an empty line and I started typing into it.</p>
<pre><code>$ r3 readline-test.r
aa   ; I only typed a
</code></pre>
<p>I'd type a and see it.  Then after a small delay, it would print another one so that the line said "aa".</p>
<p>Took some time for me to realize what was happening. Shouldn't have taken that long but it did, because I was focusing on the wrong thing.</p>
<h2>How To React to This?</h2>
<p>It's tempting to try and build some kind of compensation for that, where you query the input buffer at the <em>exact moment</em> the switch is flipped from cooked to raw mode.  You assume in that moment that if any input is in the buffer, it must have come during the cooked mode...and has already been printed...</p>
<p>But that's not a general solution. If your console has made it so when you type A you should get B then leaving the A there from the input buffer and saying "it was echoed already" isn't correct.</p>
<p>Not only that, you run into trouble if there's any printing before you read.  The text would be <em>above</em> the output, so it wouldn't even be seen.</p>
<p>So I think you just throw out a message so people know what's going on, and kick over to a newline:</p>
<pre><code>$ r3 readline-test.r
abc[you typed too fast!]
abc
</code></pre>
<h2>Suggestions Welcome On What to Print</h2>
<p>We can actually print the message in a different style in the smart terminal, with a weird background color or something.</p>
<ul>
<li>
<p><strong><code>[rebuffering]</code></strong>  &lt;- it was the first thing I thought of, which doesn't make it good</p>
</li>
<li>
<p><strong><code>[catching up with queued typing]</code></strong> &lt;- clear but lengthy</p>
</li>
<li>
<p><strong><code>[catching up...]</code></strong> &lt;- not as clear, shorter</p>
</li>
<li>
<p>???</p>
</li>
</ul>
            <p><small>3 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/what-should-the-console-do-if-you-type-too-fast-during-startup/1684">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/what-should-the-console-do-if-you-type-too-fast-during-startup/1684</link>
          <pubDate>Thu, 26 Aug 2021 02:07:22 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1684</guid>
          <source url="https://forum.rebol.info/t/what-should-the-console-do-if-you-type-too-fast-during-startup/1684.rss">What Should the Console Do If You Type Too Fast During Startup?</source>
        </item>
        <item>
          <title>PRINT for empty BLOCK!, empty TEXT!, or Text of Just Spaces</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>I just wrote something I thought was kind of neat, a way to do indentation via COLLECT:</p>
<pre><code>print [collect [repeat indent [keep tab]]], "some indented stuff"]
</code></pre>
<p>So if INDENT were 3 this would act as:</p>
<pre><code>print [[#"^-" #"^-" #"^-"] "some indented stuff"]
</code></pre>
<p><strong>This made me feel like the historical answer of PRINT treating a BLOCK! of material as if it were a set of already-reduced and calculated parts was probably a good answer.</strong>  In the past I've questioned it, but I think the value is demonstrated right there.</p>
<p><em>(I'll also point out that with GET-BLOCK!, we'll have a nice way of asking to reduce the block first... <strong><code>print ["For instance:" :[your vars here]]</code></strong>...this lets you mix up spaced and unspaced parts easily!)</em></p>
<p>But then I noticed it was screwing up in the base case of zero indentation, e.g.</p>
<pre><code>ren-c&gt;&gt; print [[] "some stuff"]
 some stuff
</code></pre>
<p>There's an extra leading space there.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:">  Checking Red, it does the same thing:</p>
<pre><code>red&gt;&gt; print [[] "some stuff"]
 some stuff
</code></pre>
<p>It made me wonder, does Rebol2 do this?</p>
<pre><code>rebol2&gt;&gt; print [[] "some stuff"]
some stuff
</code></pre>
<p>Oddly no.  Did R3-Alpha?</p>
<pre><code>r3-alpha&gt;&gt; print [[] "some stuff"]
some stuff
</code></pre>
<p>Again no.  Is it putting spacing around non-empty blocks?</p>
<pre><code>r3-alpha&gt;&gt; print [["test"] "some stuff"]
test some stuff
</code></pre>
<p>Well, yes.  But what if that string were empty?</p>
<pre><code>r3-alpha&gt;&gt; print [[""] "some stuff"]     
some stuff
</code></pre>
<p><em>The reason Red and Ren-C have the extra space is because there's a generic handling of turning values into strings that adds spacing even if a string is empty.</em></p>
<p>But waitasec: <strong>How does Rebol2 know psychically in advance whether a molding operation is going to produce content or not?</strong>  It would have to use a separate buffer, and I can't imagine Carl doing that.</p>
<p>So let's try something else:</p>
<pre><code>rebol2&gt;&gt; print ["here's" [] "some stuff"]
here's  some stuff
</code></pre>
<p>There's the extra space, due to not being psychic.</p>
<p>We see some weird exception was made regarding empty strings that didn't have a holistic answer.  Red and Ren-C both lack that broken weird exception.</p>
<p>So what can we do to get desirable results in a non-broken way?</p>
<h2>Empty BLOCK! Should Act The Same As NULL</h2>
<p>I've been firm on the "detail" that NULL vaporization really means it's as if it weren't there, and the spacing acts appropriately:</p>
<pre><code>&gt;&gt; print ["here's" if false ["!!!"] "some stuff"]
here's some stuff
</code></pre>
<p>That's one of my non-negotiables.  Now I'm going to add another to the list:</p>
<pre><code>&gt;&gt; print ["here's" [] "some stuff"]
here's some stuff
</code></pre>
<p>It's tempting to add another one, which is to not put spacing around empty strings:</p>
<pre><code>&gt;&gt; print ["here's" {} "some stuff"]
here's some stuff
</code></pre>
<p>The reasoning is that I don't see why robotically putting spacing around an empty string would ever be useful.  But this is a slippery slope.  What if the string contains just spaces, let's say 4?</p>
<pre><code>&gt;&gt; print ["here's" {    } "some stuff"]
here's    some stuff
</code></pre>
<p>Should there be 4 spaces in that gap?  5 spaces?  6?</p>
<p>Mechanically the easiest answer would be 6...which is to say that it's agnostic about the string contents and just puts one space before and one space after.  Doing anything else requires analyzing the molded content, which is methodized in the general case.</p>
<p><em>But the empty string case doesn't really require you to analyze the molded contents.</em>  It just requires you to notice how much the pre-delimiter added to the molding buffer...and then if the buffer didn't get any longer during the molding operation, backtrack the buffer index behind the now-superfluous delimiter.</p>
<p><strong>To my mind it's worth it to just make the exemption that empty moldings do not get delimited.</strong>  It's a more useful behavior and puts Ren-C once again in the clear lead for usage sanity.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/print-for-empty-block-empty-text-or-text-of-just-spaces/1641">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/print-for-empty-block-empty-text-or-text-of-just-spaces/1641</link>
          <pubDate>Sat, 31 Jul 2021 13:37:49 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1641</guid>
          <source url="https://forum.rebol.info/t/print-for-empty-block-empty-text-or-text-of-just-spaces/1641.rss">PRINT for empty BLOCK!, empty TEXT!, or Text of Just Spaces</source>
        </item>
        <item>
          <title>Windows CMD.EXE-based Consoles Deprecated</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Long story made short: Microsoft isn't supporting CMD.EXE or the granular APIs behind it any longer.</p>
<p>This means bugs of things like disappearing cursors are basically being resolved as "Won't Fix", e.g. by Julia and Node:</p>
<p><a href="https://github.com/JuliaLang/julia/issues/26422">Blinking of text cursor not suspended when moved on nightly Windows (Julia)</a><br>
<a href="https://github.com/nodejs/node/issues/20348">REPL on Windows doesn't display console cursor after moving (Node)</a></p>
<p>We have the same problem.  Basically, if you start a cursor action while the cursor is invisible, it will stay invisible until you let up a key and wait a bit.</p>
<p>They point to resolution as "use any terminal other than CMD.EXE", and if the cursor problems bother you I say the same.</p>
<p>Many people like "ConEmu", and it has tricks that let you make it the default terminal in Windows...(so even places that CMD.EXE would usually be baked in regardless will launch using it):</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <img src="https://conemu.github.io/conemu.ico" class="site-icon" width="16" height="16">
      <a href="https://conemu.github.io/en/DefaultTerminal.html" target="_blank" rel="noopener">conemu.github.io</a>
  </header>
  <article class="onebox-body">
    <img src="" class="thumbnail" width="" height="">

<h3><a href="https://conemu.github.io/en/DefaultTerminal.html" target="_blank" rel="noopener">ConEmu | DefaultTerminal</a></h3>

<p>The only way to replace default Windows terminal with ConEmu</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Another option is Windows Terminal... Microsoft's current and much improved <a href="https://github.com/microsoft/terminal">open source choice</a> over cmd.</p>
<p>You can install it from the Windows Store:</p>
<aside class="onebox allowlistedgeneric">
  <header class="source">
      <a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab" target="_blank" rel="noopener">Microsoft Store</a>
  </header>
  <article class="onebox-body">
    <img src="https://store-images.s-microsoft.com/image/apps.34065.13926773940052066.8978812d-6c65-429b-835d-2cecd178e2d7.3b5795a0-e24b-46a4-bfb3-f2d832f1d7e7?w=120&amp;h=120&amp;q=60" class="thumbnail onebox-avatar" width="120" height="120">

<h3><a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab" target="_blank" rel="noopener">Get Windows Terminal - Microsoft Store</a></h3>

<p>Download this app from Microsoft Store for Windows 10. See screenshots, read the latest customer reviews, and compare ratings for Windows Terminal.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/windows-cmd-exe-based-consoles-deprecated/1575">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/windows-cmd-exe-based-consoles-deprecated/1575</link>
          <pubDate>Sun, 28 Mar 2021 00:24:08 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1575</guid>
          <source url="https://forum.rebol.info/t/windows-cmd-exe-based-consoles-deprecated/1575.rss">Windows CMD.EXE-based Consoles Deprecated</source>
        </item>
        <item>
          <title>How Should Redirected Input Work For The Console?</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>When you run language interpreters without supplying a script to run on the command line, most will go into an interactive console mode.</p>
<p>But what if you didn't want interaction?  It's possible to pipe input to a process, for instance:</p>
<pre><code>$ echo "print(\"Hello\")" | python3
Hello
</code></pre>
<p><em>(Note: You have to backslash escape quotes to pass them in bash like that.)</em></p>
<p>The echo command produced some output, and python runs it as code.  It doesn't do the same thing as if you'd typed the code--there's no console banner, and it doesn't give you a response about what the output is.</p>
<p><strong>But Rebol, Red, and Ren-C all fail at this.</strong></p>
<h2>Rebol2 on Windows Ignores Piped Input</h2>
<p>Rebol2 on Windows ignores the issue entirely.  The following will just launch a GUI window, as if you hadn't said anything:</p>
<pre><code>C:\Projects\rebol2&gt; echo "print {Hello} 1 + 2" | rebol2-view
; Launches a GUI terminal window

C:\Projects\rebol2&gt; echo "print {Hello} 1 + 2" | rebol2-core
; Also launches a GUI terminal widow
</code></pre>
<p>I don't have a 32-bit Linux handy to test rebol2 with, so we'll just look at R3-Alpha on Linux.</p>
<h2>R3Alpha on Linux Runs The Input And Shows Half A Console</h2>
<p>R3-Alpha does a little better, in terms of running the code you asked for.  But it still runs the output side of the console, while not echoing the input side:</p>
<pre><code>$ echo "print {Hello} 1 + 2" | ./r3-alpha
**************************************************************************
**                                                                      **
**  REBOL 3.0 [Alpha Test]                                              **
**                                                              
...(rest of the boot banner and help)...
Upgrade - check for newer releases
Changes - what's new about this version (web)

&gt;&gt; Hello
== 3

&gt;&gt;
</code></pre>
<p>If that would print the input code too so this looked coherent, you could imagine this being a interesting mode to offer.  But while interesting, it's certainly not the default you'd want.</p>
<p>If we look into why R3-Alpha quits, it's because when it runs out of standard input to read <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/os/host-stdio.c#L90">a failure makes Fetch_Buf() return 0</a>.  You can see that it had at one time crashed under this condition, but that was commented out:</p>
<pre><code>// If error, don't crash, just ignore it:
if (Std_IO_Req.error) return 0; //Host_Crash(stdio read);
</code></pre>
<p>When Fetch_Buf() returned 0, then Get_Line() would return 0....and that would <a href="https://github.com/rebol/rebol/blob/25033f897b2bd466068d7663563cd3ff64740b94/src/os/host-main.c#L183">stop the main loop</a> and lead the console to exit.</p>
<h2>Red On Windows Runs Out of Memory</h2>
<p>If you don't use the <code>--cli</code> switch it will pop up a normal GUI Window and ignore the piped input like Rebol2 did.</p>
<p>But if you do use the <code>--cli</code> switch then it fails and exits.</p>
<pre><code>C:\Projects\red&gt; echo "print {Hello} 1 + 2" | red --cli
--== Red 0.6.4 ==--
Type HELP for starting information.

*** Internal Error: not enough memory
*** Where: append
*** Stack:
</code></pre>
<h2>Ren-C Prints Console Banner/Prompt, Then Infinite Loops</h2>
<p>Ren-C unified the way Windows worked somewhat with the way that the Linux build had worked, in terms of the relationship between the console and standard input.  Hence the behavior (and failure modes) are similar.</p>
<p>Both of these get into an infinite loop, because the console uses ASK TEXT! in usermode and calls it in a loop.  There's no special handling of pipe errors to break that loop, so it just keeps trying READ-LINE over and over again.</p>
<h2>So Nothing Historically Works.  What's The Plan?</h2>
<p>We need to detect a piped situation and not print out console banners, prompts, or expression evaluation results.</p>
<p>I'm guessing this would imply not running the console at all.  That seems saner than running the console in a mode where it still did the same REPL loop, but ASK had to worry about things like noticing when a pipe disconnected...and the printing out of expression evaluation results had to be overridden by hiding the output.</p>
<p>So that would imply that running from a pipe would be much more like running a script that was read from a file.  But a pipe may not come up with its data all at once...it could come character by character, or line by line.  What execution model would apply to pipes?</p>
<h2>What Does Python Do?</h2>
<p>Python3 seems to wait until all of the data is read before executing.  If we pipe the output of the "cat" command (e.g. me typing lines of input) into Python3</p>
<pre><code>$ cat | python3
print("Hello")  # I typed this line, hit enter
print("Goodbye")  # I typed this, hit enter, then Ctrl-D to end input
Hello 
Goodbye
</code></pre>
<p>Their <a href="https://github.com/python/cpython/blob/c7c3b7db29c4dda0519acdf7450e20d47a6409f4/Modules/main.c#L34">logic for starting up</a> does an interactivity detection, which can be driven by things like configuration flags vs. just guessing.  If the various phases opt out of interactivity, the whole thing falls through to run using the same method as running a file... <strong>PyRun_AnyFileExFlags</strong>.</p>
<pre><code>if (stdin_is_interactive(config)) {
    config-&gt;inspect = 0;
    Py_InspectFlag = 0; /* do exit on SystemExit */
    int exitcode;
    if (pymain_run_startup(config, cf, &amp;exitcode))
        return exitcode;

    if (pymain_run_interactive_hook(&amp;exitcode))
        return exitcode;
}

/* call pending calls like signal handlers (SIGINT) */
if (Py_MakePendingCalls() == -1)
    return pymain_exit_err_print();

if (PySys_Audit("cpython.run_stdin", NULL) &lt; 0)
    return pymain_exit_err_print();

int run = PyRun_AnyFileExFlags(stdin, "&lt;stdin&gt;", 0, cf);
return (run != 0);
</code></pre>
<h2>Conclusion</h2>
<p>Long story short is that I think by default, input redirection should probably be such that:</p>
<pre><code>$ command | r3
</code></pre>
<p>...acts basically like if you'd written:</p>
<pre><code>$ command &gt; output.reb
$ r3 output.reb
</code></pre>
<p>We'll want to offer more flexible behaviors for if you're processing data, e.g. line by line.  But for source code it probably makes less sense to run it line by line.</p>
<p>Maybe there could be a console automation mode where it acts like you'd typed line-by-line and prints all the output the console would print--but that's a weird feature that doesn't seem terribly useful.</p>
<p>Of course, you should be able to write a script that reads from the stdin like a file...line by line or character by character, and process it.  But that's a different question.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/how-should-redirected-input-work-for-the-console/1546">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/how-should-redirected-input-work-for-the-console/1546</link>
          <pubDate>Tue, 09 Mar 2021 08:45:25 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1546</guid>
          <source url="https://forum.rebol.info/t/how-should-redirected-input-work-for-the-console/1546.rss">How Should Redirected Input Work For The Console?</source>
        </item>
        <item>
          <title>How Should Relative Paths Be Interpreted On The Command Line?</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>In Rebmake, you specify the path on the command line to make.r, and then you might specify other paths.  For example, to a config:</p>
<pre><code>$ ../somewhere/r3 ../../somewhere-else/make.r CONFIG=../configs/some-config.r
</code></pre>
<p>What happens is that <strong><code>system/options/boot</code></strong> will try its best to get a <em>full</em> path to wherever the r3 was.</p>
<p>Next, the make.r script will be found, and it <em>changes the current directory to the directory the script is in</em>.  The rationale for this change is that you can easily write that script to talk about files relative to its location without qualifying them.  That makes sense.</p>
<p>What to make of the CONFIG's relative path, then?  Intuitively it seems those paths should be relative to wherever you were at the moment you ran the command...because it's all part of the same <em>command line</em>.</p>
<p>Yet under this set of circumstances, you've been changed into the directory of the script by the time it gets a chance to process the config.  It would thus interpret the above as <strong>../../somewhere-else/../configs/some-config.r</strong></p>
<h2>Could Someone Research Precedent For Handling This?</h2>
<p>My instincts are that command line arguments should be interpreted relatively to <strong>system/options/path</strong>, e.g. wherever you spawned r3 from.</p>
<p>Does anyone disagree with this being the general rule?  Do any programs give other precedent?</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/how-should-relative-paths-be-interpreted-on-the-command-line/1541">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/how-should-relative-paths-be-interpreted-on-the-command-line/1541</link>
          <pubDate>Fri, 05 Mar 2021 10:26:31 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1541</guid>
          <source url="https://forum.rebol.info/t/how-should-relative-paths-be-interpreted-on-the-command-line/1541.rss">How Should Relative Paths Be Interpreted On The Command Line?</source>
        </item>
        <item>
          <title>ncurses</title>
          <dc:creator><![CDATA[iArnold]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Does Rebol or Ren-C support the use of ncurses for making more out of a terminal experience when doing interactive programming?</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/ncurses/1523">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/ncurses/1523</link>
          <pubDate>Thu, 25 Feb 2021 16:54:03 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1523</guid>
          <source url="https://forum.rebol.info/t/ncurses/1523.rss">ncurses</source>
        </item>
        <item>
          <title>Commented Out Stuff From R3-Alpha&#39;s System Object</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>There were some fields in the system object that were commented out in R3-Alpha.  Generally speaking, these don't belong in the core any longer.</p>
<p>Some pertained to the console:</p>
<pre><code>;console: make object! [
;   hide-types: _    ; types not to print
;   history: _       ; Log of user inputs
;   keys: _          ; Keymap for special key
;   prompt:  {&gt;&gt; }   ; Specifies the prompt
;   result:  {== }   ; Specifies result
;   escape:  {(escape)} ; Indicates an escape
;   busy:    {|/-\}  ; Spinner for network progress
;   tab-size: 4      ; default tab size
;   break: true      ; whether escape breaks or not
;]
</code></pre>
<p>Or the command line:</p>
<pre><code>; trace:          ; True if the --trace flag was specified
; help: _         ; True if the --help flags was specified
; halt: _         ; halt after script
</code></pre>
<p>There was more, though.  For email:</p>
<pre><code>;   email: make object! [ ; Email header object
;       To:
;       CC:
;       BCC:
;       From:
;       Reply-To:
;       Date:
;       Subject:
;       Return-Path:
;       Organization:
;       Message-Id:
;       Comment:
;       X-REBOL:
;       MIME-Version:
;       Content-Type:
;       Content:
;           _
;   ]
</code></pre>
<p>The Network:</p>
<pre><code>;network: make object! [
;   host: ""        ; Host name of the user's computer
;   host-address: 0.0.0.0 ; Host computer's TCP-IP address
;   trace: _
;]
</code></pre>
<p>And a bunch of... other stuff.  Continuing in the spirit of "not just keeping things around any more", I'm just putting it here.  There are a lot of considerations about how any system should manage global state, but hanging on to a file of mostly random words that are all commented out isn't making much of an inroad on that.</p>
<pre><code>;           decimal: #"."   ; The character used as the decimal point in decimal and money vals
;           sig-digits: _    ; Significant digits to use for decimals ; blank for normal printing
;           date-sep: #"-"  ; The character used as the date separator
;           date-month-num: false   ; True if months are displayed as numbers; False for names
;           time-sep: #":"  ; The character used as the time separator

;   browser-type: 0
;
;       model:      ; Network, File, Driver
;       type:       ; bytes, integers, values
;       user:       ; User data

;       host:
;       port-id:
;       user:
;       pass:
;       target:
;       path:
;       proxy:
;       access:
;       allow:
;       buffer-size:
;       limit:
;       handler:
;       status:
;       size:
;       date:
;       sub-port:
;       locals:
;       state:
;       timeout:
;       local-ip:
;       local-service:
;       remote-service:
;       last-remote-service:
;       direction:
;       key:
;       strength:
;       algorithm:
;       block-chaining:
;       init-vector:
;       padding:
;       async-modes:
;       remote-ip:
;       local-port:
;       remote-port:
;       backlog:
;       device:
;       speed:
;       data-bits:
;       parity:
;       stop-bits:
;           _
;       rts-cts: true
;       user-data:
;       awake:

;   port-flags: make object! [
;       direct:
;       pass-thru:
;       open-append:
;       open-new:
;           _
;   ]</code></pre>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/commented-out-stuff-from-r3-alphas-system-object/1158">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/commented-out-stuff-from-r3-alphas-system-object/1158</link>
          <pubDate>Fri, 03 May 2019 02:36:18 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1158</guid>
          <source url="https://forum.rebol.info/t/commented-out-stuff-from-r3-alphas-system-object/1158.rss">Commented Out Stuff From R3-Alpha&#39;s System Object</source>
        </item>
        <item>
          <title>ECHO OFF (e.g. for now, no ECHO feature)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Internally to R3-Alpha there was some code for implementing an ECHO feature, (a command which <a href="http://www.rebol.com/docs/words/wecho.html" rel="nofollow noopener">existed in Rebol2</a>).  This was something where you could capture the standard output of your interactive session to a file.</p>
<p>It was one of those things that was hard to keep working... that didn't have any tests... so one didn't know what "working" was in the first place.  What were the expectations?  If all you have are hooks underneath the PORT! level in C code, that's going to lead to some strange log files.  Without console awareness, if you're merely streaming what got printed to standard output, you'd have your transcript littered with non-sequitur <strong><code>&gt;&gt;</code></strong> prompts.</p>
<p>If you're going to log the prompts, you probably want to log what the Rebol command input to the console was too.  If you're not going to log the prompts you probably don't want the <em>command</em> input, but you probably want interactive input in the log for other ASKs from your session.  Not to mention that an actually useful <strong>echo</strong> command would probably have a number of other useful features, for automatically naming and incrementing your log files.</p>
<p>It sounds cool (Red has <a href="https://github.com/red/red/issues/2487" rel="nofollow noopener">a wish for it</a>, including <strong>echo input</strong>, hence console awareness.)  But you don't want much of the logic for what ECHO does in C code.  So at one point, I took a stab at moving it out to userspace, building on HIJACK of WRITE-STDOUT and INPUT:</p>
<p><a href="https://github.com/metaeducation/ren-c/pull/445" rel="nofollow noopener">https://github.com/metaeducation/ren-c/pull/445</a></p>
<p>However, it has atrophied.  And with INPUT no longer being the chokepoint by which input is read due to the ASK redesign, it seems time to either revisit it and redo it...or let it go for now.  (Though of course, you can do a quick and dirty version on par with Rebol2's version if you don't mind it being bad, with <strong>hijack 'write-stdout</strong>...and just append everything to a file.)</p>
<p>I'm going with letting it go as a feature design space, and let people improvise their own solutions if they need them.  It's a nice wish, but as we move forward there's only so much non-maintained code to leave hanging around as a reminder of a wish.  So here's what it was, and discussion of the feature can reopen at a later date...when we'll likely be wanting to bring it back with a "web console first" point of view:</p>
<pre><code>echo: function [
    {Copies console I/O to a file.}

    return: &lt;void&gt;
    'instruction [file! text! block! word!]
        {File or template with * substitution, or command: [ON OFF RESET].}

    &lt;static&gt;
    target ([%echo * %.txt])
    form-target
    sub ("")
    old-input (copy :input)
    old-write-stdout (copy :write-stdout)
    hook-in
    hook-out
    logger
    ensure-echo-on
    ensure-echo-off
][
    ; Sample "interesting" feature, be willing to form the filename by filling
    ; in the blank with a substitute string you can change.
    ;
    form-target: default [func [return: [file!]] [
        either block? target [
            as file! unspaced replace (copy target) '* (
                either empty? sub [[]] [unspaced ["-" sub]]
            )
        ][
            target
        ]
    ]]

    logger: default [func [value][
        write/append form-target either char? value [to-text value][value]
        value
    ]]

    ; Installed hook; in an ideal world, WRITE-STDOUT would not exist and
    ; would just be WRITE, so this would be hooking WRITE and checking for
    ; STDOUT or falling through.  Note WRITE doesn't take CHAR! right now.
    ;
    hook-out: default [func [
        return: &lt;void&gt;
        value [text! char! binary!]
            {Text to write, if a STRING! or CHAR! is converted to OS format}
    ][
        old-write-stdout value
        logger value
    ]]

    ; It looks a bit strange to look at a console log without the input
    ; being included too.  Note that hooking the input function doesn't get
    ; the newlines, has to be added.
    ;
    hook-in: default [
        chain [
            :old-input
                |
            func [value] [
                logger value
                logger newline
                value  ; hook still needs to return the original value
            ]
        ]
    ]

    ensure-echo-on: default [does [
        ;
        ; Hijacking is a NO-OP if the functions are the same.
        ; (this is indicated by a BLANK! return vs an ACTION!)
        ;
        hijack 'write-stdout 'hook-out
        hijack 'input 'hook-in
    ]]

    ensure-echo-off: default [does [
        ;
        ; Restoring a hijacked function with its original will
        ; remove any overhead and be as fast as it was originally.
        ;
        hijack 'write-stdout 'old-write-stdout
        hijack 'input 'old-input
    ]]

    switch type of instruction [
        word! [
            switch instruction [
                'on [ensure-echo-on]
                'off [ensure-echo-off]
                'reset [
                    delete form-target
                    write/append form-target ""  ; or just have it not exist?
                ]
            ] else [
                word: to-uppercase word
                fail [
                    "Unknown ECHO command, not [ON OFF RESET]" LF
                    "Use ECHO" unspaced ["(" word ")"] "to force evaluation"
                ]
            ]
        ]

        text! [
            sub: instruction
            ensure-echo-on
        ]

        block! file! [
            target: instruction
            ensure-echo-on
        ]
    ]
]</code></pre>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/echo-off-e-g-for-now-no-echo-feature/1157">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/echo-off-e-g-for-now-no-echo-feature/1157</link>
          <pubDate>Thu, 02 May 2019 21:21:56 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1157</guid>
          <source url="https://forum.rebol.info/t/echo-off-e-g-for-now-no-echo-feature/1157.rss">ECHO OFF (e.g. for now, no ECHO feature)</source>
        </item>
        <item>
          <title>Persistence of Memory: The Enfix Console Trick</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Access to the last expression's result is pretty important.  So I was wondering what sort of syntax we could use to splice it in.  We could commandeer some existing Rebol token:</p>
<pre><code>&gt;&gt; second [&lt;alpha&gt; &lt;beta&gt;]
== &lt;beta&gt;

&gt;&gt; print #1   ; e.g. #1 for last console result, #2 for the one before that...
&lt;beta&gt;
</code></pre>
<p>But by definition, <em>anything</em> you pick could be meant literally.  We have quite a few more possibilities to make the escaping ever more esoteric, like <strong><code>&lt;console&gt;/#1</code></strong>.  But if the point is to keep you from re-entering or retyping a result, having to type in a long thing to get uniqueness defeats the purpose...you're usually trying to save time.</p>
<p>Maybe the best idea would be to find a way to get the result <em>without mentioning it at all</em>.  And that gave me the idea of combining enfix and generalized quoting, to make the <code>system/console/dialect-hook</code> (which runs after all the code has been LOADed) do something extremely cool...</p>
<h2>
<a name="kicking-it-old-school-calculator-style-1" class="anchor" href="https://forum.rebol.info#kicking-it-old-school-calculator-style-1"></a>Kicking it old-school, calculator-style</h2>
<p>The idea is that we <em>inject the last result, quoted, at the start of the code we're running</em>!  If the next operation isn't enfix, it will just be scrapped.  If it is enfix, it will get picked up as if it had been on the left.</p>
<pre><code>&gt;&gt; 1 + 2
== 3

&gt;&gt; * 10   ; it actually runs `('3 * 10)`
== 30
</code></pre>
<p>And with a small tweak to the SHOVE (<strong><code>-&gt;</code></strong>) operation, you can now shove the left hand side into a SET-WORD! (or SET-PATH!, SET-GROUP!, SET-BLOCK!....)</p>
<pre><code>&gt;&gt; 1 + 2
== 3

&gt;&gt; -&gt; foo:
== 3

&gt;&gt; foo
== 3
</code></pre>
<p>Why is the quoting important?  Well, if the last thing you evaluated was an ACTION!, you don't want that action to run, if it was a SET-WORD! you don't want it to assign, etc. etc.  But you do want to be able to capture it!</p>
<pre><code>&gt;&gt; func [x] [x + 1]

&gt;&gt; -&gt; addone:

&gt;&gt; addone 10
== 11
</code></pre>
<p>Nothing is injected for a VOID! result.  So if you ever want to clear out the memory and not get this behavior, just cycle the prompt by hitting enter.</p>
<pre><code>&gt;&gt; 1 + 2
== 3

&gt;&gt;  ; hit enter

&gt;&gt; * 5
** Script Error: * is missing its value1 argument
</code></pre>
<p>Are we having fun, yet?  <img src="https://forum.rebol.info/images/emoji/twitter/partying_face.png?v=12" title=":partying_face:" class="emoji" alt=":partying_face:" loading="lazy" width="20" height="20"></p>
<p>Notable is <a href="https://github.com/metaeducation/ren-c/commit/73da0961c6f0b37bbbc3fb0675c6c430bdb6d2ff">just how little code this took to implement</a>, mostly comments and adding the SET-XXX! feature to SHOVE.  Imagine how easy it would be to start adding your own console customizations!</p>
<blockquote>
<p>Not too distant plans might allow things like:</p>
<pre><code>&gt;&gt; data: [&lt;a&gt; &lt;b&gt;]

&gt;&gt; 1 + 2
== 3

&gt;&gt; -&gt; (=&gt; append data)
== [&lt;a&gt; &lt;b&gt; 3]
</code></pre>
<p>That would be a shorthand for:</p>
<pre><code>-&gt; specialize 'append [series: data]
</code></pre>
<p>I haven't really figured out what these "by example" specializations will look like.  At first, I thought it could be a behavior of GET-GROUP!:</p>
<pre><code>-&gt; :(append data)
</code></pre>
<p>But if it's not the <em>only</em> behavior of GET-GROUP!, I fear it might be too confusing.  Having the behavior of an unfinished call in a group producing a specialization could be unpredictable-seeming, when the user would have liked to get an error.  (That is if they could use GET-GROUP! for other things besides specialization, e.g. <code>:(x)</code> as <code>get x</code>)</p>
<p>The average person would probably find that too convoluted and just use a variable.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20"></p>
</blockquote>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/persistence-of-memory-the-enfix-console-trick/1071">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/persistence-of-memory-the-enfix-console-trick/1071</link>
          <pubDate>Fri, 15 Feb 2019 09:48:47 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1071</guid>
          <source url="https://forum.rebol.info/t/persistence-of-memory-the-enfix-console-trick/1071.rss">Persistence of Memory: The Enfix Console Trick</source>
        </item>
        <item>
          <title>Console Transcript Replay: I Want It</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p><em>I'm moving this from a post I made that was tied up with suggestions about changing the prompt away from <strong><code>&gt;&gt;</code></strong> to make it more obviously taken as an asymmetric delimiter.  This is an interesting feature which can be discussed in its own right...</em></p>
<hr>
<p>Let's imagine someone tells you they've set <strong>x: 1</strong>, and then have the following code:</p>
<pre><code>&gt;&gt; x + 2
== 3

&gt;&gt; print "hi"
hi
</code></pre>
<p>Try pasting that today, say, in Red and you will get:</p>
<pre><code>&gt;&gt;      &gt;&gt; x + 2
*** Script Error: &gt;&gt; operator is missing an argument
*** Where: catch
*** Stack:  

&gt;&gt;      == 3
*** Script Error: == operator is missing an argument
*** Where: catch
*** Stack:  

&gt;&gt; 
&gt;&gt;     &gt;&gt; print "hi"
*** Script Error: &gt;&gt; operator is missing an argument
*** Where: catch
*** Stack:  

&gt;&gt;     hi
*** Script Error: hi has no value
*** Where: catch
*** Stack:  
</code></pre>
<h2>But What If...</h2>
<p>...imagine you could go on a website, drag across someone's transcript, and paste it right into your console unedited and have it run.</p>
<p>What I'm talking about is knowing that you are receiving a paste (either by virtue of an API that tells you, or just noticing that the rate at which lines are coming in is faster than a human types...a heuristic I have been meaning to implement so that lines are batched instead of intermixing with the output).  And really being able to just paste a console transcript whole cloth, but have it respond by outputting its own complementary transcript.</p>
<p>So now let's say your transcript looked like:</p>
<pre><code>&gt;&gt; x + 2
== 3

&gt;&gt; print "hi"
hi
</code></pre>
<p>So if you pasted it into an environment where you'd said <strong>x: 10</strong> it would take the data one line at a time, and &gt;&gt; would kick it over into a replay mode</p>
<pre><code>&gt;&gt; x: 10
== 10

&gt;&gt; ; here you do the paste, it sees the &gt;&gt; and kicks over

[[ TRANSCRIPT PASTE DETECTED ]]
( to disable, see http://rebol.info/disable-transcript-paste-detection )

; &gt;&gt; x + 2
; == 3
;
; &gt;&gt; print "hi"
; == hi

[[ REPLAYING TRANSCRIPT ]]

&gt;&gt; x + 2
== 12

&gt;&gt; print "hi"
hi
</code></pre>
<h2>...Heuristics, hmmm... <img src="https://forum.rebol.info/images/emoji/twitter/face_with_monocle.png?v=9" title=":face_with_monocle:" class="emoji" alt=":face_with_monocle:">
</h2>
<p>If we keep the current indicators for prompts, e.g. <strong><code>&gt;&gt;</code></strong> and <strong><code>==</code></strong> with <strong><code>**</code></strong> for errors, then we'd be making heuristic decisions here...since these are all things you can legally use elsewhere.</p>
<p><strong>==</strong> is in common use today as an operator, though it rarely appears at the beginning of a line.  I intend it to <em>not</em> be an operator, but a divider of some kind.  So it actually be contentious, because although == doesn't appear at the start of a line today, it would as a divider.  So maybe plain equals, just off by one space?</p>
<pre><code>&gt;&gt; x + 2
 = 12
</code></pre>
<p>Parity just looks confusing, don't think anyone would get used to it:</p>
<pre><code>&gt;&gt; x + 2
&lt;&lt; 12
</code></pre>
<p>Anyway, now that I've outlined this feature, I want it yesterday.  The value of such a feature may exceed the value of dedicating <code>&lt;&lt;x&gt;&gt;</code> as some new lexical type for MAP! or similar.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/console-transcript-replay-i-want-it/1711">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/console-transcript-replay-i-want-it/1711</link>
          <pubDate>Tue, 23 Jan 2018 23:54:45 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1711</guid>
          <source url="https://forum.rebol.info/t/console-transcript-replay-i-want-it/1711.rss">Console Transcript Replay: I Want It</source>
        </item>
        <item>
          <title>Rethinking the Console Prompt: &gt;&gt; to ? or .\</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Rebol has historically used <code>&gt;&gt;</code> for the console prompt.  It also inside the language uses <code>&lt;&lt;</code> and <code>&gt;&gt;</code> for bit shift operators.  Red continues this, and it looks a little weird, e.g.</p>
<pre><code>&gt;&gt; 2 &gt;&gt; 1
== 1
</code></pre>
<p>The use of some form of <strong>&gt;</strong> is fairly common as prompts, going back to <strong><code>C:\&gt;</code></strong> and before.  It's rather common to just find the single character <code>&gt;</code> used.  Yet even in those languages, they use &gt; to mean "greater than".  So the idea of prompts themselves pursuing an out-of-band nature is apparently kind of a big thought.</p>
<p><a class="mention" href="https://forum.rebol.info/u/brianotto">@BrianOtto</a> <a href="https://forum.rebol.info/t/should-followed-by-space-be-used-for-comments/275/26">asked about what I thought of using <code>&lt;&lt;</code> and <code>&gt;&gt;</code> for comments</a>, and I wanted to mention that I think they are <strong>"high value" asymmetric symbol patterns</strong>.  There's a relatively scarce space of things that can act as short, clean-looking, asymmetric delimiters.</p>
<p>So I think they're wasted as bit shift operators, when more suboptimal choices are being made.  e.g. Red has chosen <code>#()</code> to express literal MAP!s, a parallel to JSON's <a href="https://www.xul.fr/javascript/associative.php" rel="nofollow noopener">associative arrays</a>.</p>
<pre><code>&gt;&gt; x: #(a: 10 b: 20)
== #(
    a: 10
    b: 20
)

&gt;&gt; x/b
== 20
</code></pre>
<p><em>(On a related note, <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> and I believe that if anything, construction syntax should have been the one to take <strong>#()</strong> instead of <strong>#[]</strong>, in the sense that it's not creating a BLOCK! of anything...rather it's splicing (kind of like evaluating) an element inline.)</em></p>
<p>But what if we tried to make the prompt something that didn't have meaning in the language?  Let's imagine for a moment that we take that pesky lone <strong>?</strong> I've been looking for a "higher" purpose for <em>(after all, <code>h</code> is a fine console shortcut for help, if one is really too lazy to type <code>help</code>)</em>.  And then the complementary <strong>!</strong>.  Let's imagine their higher purpose is <em>no purpose</em> in the language by default, and use them for console prompts...then take <code>&lt;&lt;</code> and <code>&gt;&gt;</code> for MAP! literals:</p>
<pre><code>? x: &lt;&lt;a: 10 b: 20&gt;&gt;
! &lt;&lt;
    a: 10
    b: 20
&gt;&gt;

? x/b
! 20
</code></pre>
<p>Contrast with Red's scheme: when you think about looking at a long list of keys and values...and you get to the end and see just a <strong><code>)</code></strong>, you have to scan up to know if you're looking at a GROUP! or not.  But here you'd be better off.  I think there's a lot more need for something like this than bit shifting.</p>
<p><strong>?</strong> is just an idea.  Because I'd been looking for a good purpose for <strong>?</strong> and <strong>!</strong>.  I kind of thought it might be fun if they were postfix, so it could be like asking a question of something...but that never came off very well.  I thought it might be okay for <strong>? foo</strong> being shorthand of <strong>set? 'foo</strong> but while it saves some typing it makes the code look unnatural...and that's not what Rebol is about.</p>
<p><em>(Same arguments about why we've scrapped the definition <strong>!: :not</strong>... it's ugly to say <strong>! condition</strong> when you could say <strong>not condition</strong>, and there's no reason to support it.)</em></p>
<p>So with lone ? and ! being enigmatic, thin and unpopular... the idea of not giving them any default meaning has some amount of appeal...and then they'd be something you could visually filter out.  But on that note, regarding <a href="https://forum.rebol.info/t/should-followed-by-space-be-used-for-comments/275/23">recent discussions of backslash</a> of it not being used <em>at all</em>...what if that property were exploited for fun and profit?</p>
<pre><code>Welcome to Rebol.  For more information please type in the commands below:

  HELP    - For starting information
  ABOUT   - Information about your Rebol
  CHANGES - What's different about this version

.\
</code></pre>
<hr>
<pre><code>.\ comment "I actually like dot backslash as the prompt"

&gt;\ comment "other symbols combine noisily, lone backslash too minimal"

breakpoint(3) .\ repeat x 2 [print [x "stuff to the left"]]
1 stuff to the left
2 stuff to the left

.\ &lt;&lt;a: "doesn't" b: "clash" c: "with chevrons!"&gt;&gt; 

.\ 1 + 2
=\ 3

.\ all [
[\  1 &lt; 2 (
(\  3)
[\  ]
=\ 3

.\ quote ==
=\ ==

.\ quote &gt;&gt;
=\ &gt;&gt;
</code></pre>
<p><em>(Colorization would of course help somewhat.)</em></p>
<p>The interesting thing about what I've done above--including a little cleverness with the multiline--is that you wind up with a transcript that can be pasted into a console session and filtered to run the commands again.  Using some of the same rationale as when discussing the backslash being filtered by a "dumb" parser, it doesn't take a lot of intelligence for the console to figure out what your commands were distinct from the output.</p>
<p>Then again, the convention could say that if it sees a backslash it ignores up to one character on the right of it, possibly a space...which might be more conventional-seeming.</p>
<pre><code>breakpoint(3) \&gt; repeat x 2 [print [x "stuff to the left"]]
1 stuff to the left
2 stuff to the left

\. &lt;&lt;a: "doesn't" b: "clash" c: "with chevrons!"&gt;&gt; 

\. 1 + 2
\= 3

\. all [
\[  1 &lt; 2 (
\(  3)
\[  ]
\= 3
</code></pre>
<p>Maybe even some kind of hybrid?  :-/</p>
<pre><code>.\ 1 + 2
\= 3
</code></pre>
<p>Anyway I'm not going to say MAP! literals are the final ante on what might be done with the very valuable <code>&lt;&lt;</code> and <code>&gt;&gt;</code>, but it's more in league with the level I think it should be at.  And if it's that prominent (or moreso) in the language, then being able to avoid its use in the console prompts has an advantage...so I think these contemplations are worthwhile.</p>
            <p><small>9 posts - 4 participants</small></p>
            <p><a href="https://forum.rebol.info/t/rethinking-the-console-prompt-to-or/489">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/rethinking-the-console-prompt-to-or/489</link>
          <pubDate>Tue, 23 Jan 2018 09:00:41 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-489</guid>
          <source url="https://forum.rebol.info/t/rethinking-the-console-prompt-to-or/489.rss">Rethinking the Console Prompt: &gt;&gt; to ? or .\</source>
        </item>
        <item>
          <title>About the Console category</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>Console</category>
          <description><![CDATA[
            <p>Specific development relating to the console, and driving the same.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-console-category/488">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-console-category/488</link>
          <pubDate>Tue, 23 Jan 2018 07:31:45 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-488</guid>
          <source url="https://forum.rebol.info/t/about-the-console-category/488.rss">About the Console category</source>
        </item>
  </channel>
</rss>
