<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Testing - AltRebol</title>
    <link>https://forum.rebol.info/c/development/testing/50</link>
    <description>Topics in the &#39;Testing&#39; category Discussion of Tests, Testing Methodology and Continuous Integration (e.g. Travis-CI).</description>
    
      <lastBuildDate>Mon, 11 Nov 2024 09:49:10 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/development/testing/50.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>Antiform Safety: Covariance and Contravariance</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>Grafting antiforms onto a C codebase that had no such concept is fraught with disasters.</p>
<p>The semantics of unstable antiforms is particularly risky.  If you have a test like <strong><code>Is_Block(cell)</code></strong> that tells you whether a cell holds a BLOCK!, then what if that cell holds an antiform block?  Usermode code has the benefit of decay-by-default (unless you take a meta-parameter).  So if you ask <strong><code>BLOCK?</code></strong> on a parameter pack, it will decay to its first item and answer based on that.  The C implementation has no such "automatic" behavior.</p>
<p>Even "worse", what if <strong><code>cell</code></strong> contains an antiform error, and you quietly say "no it's not a block" and proceed on, ignoring situations when that should have raised an abrupt failure?</p>
<h2><a name="p-7886-creating-a-type-hierarchy-atom-value-element-1" class="anchor" href="https://forum.rebol.info#p-7886-creating-a-type-hierarchy-atom-value-element-1"></a>Creating A Type Hierarchy: Atom -&gt; Value -&gt; Element</h2>
<p>I've given names to the three broad categories of cells:</p>
<ul>
<li>
<p><strong>ELEMENT</strong> - anything that you can put in a List.  So this is "element" as in "array element".  Hence, no antiforms.  (It's not a perfect name in terms of correspondence to "chemical element" in terms of the abstract form that can come in isotopes, so think of it as array element)</p>
</li>
<li>
<p><strong>VALUE</strong> - anything that you can put in a Variable.  So it extends ELEMENT with stable antiforms.</p>
</li>
<li>
<p><strong>ATOM</strong> - anything, including unstable antiforms.</p>
</li>
</ul>
<p>Systemically, we want to stop antiforms from being put into the array elements of blocks, groups, paths, and tuples.  We also want to prevent unstable antiforms from being the values of variables.</p>
<p>To make it easier to do this, the C++ build offers the ability to make <code>Element</code> that can't hold any antiforms, <code>Value</code> that can hold stable antiforms, and <code>Atom</code> that can hold anything--including unstable isotopes.</p>
<ul>
<li>
<p><strong>Class Hierarchy:</strong> Atom as base, Value derived, Element derived (upside-down for compile-time error preferences--we want passing an Atom to a routine that expects only Element to fail)</p>
</li>
<li>
<p><strong>Primary Goal:</strong> Prevent passing Atoms/Values to Element-only routines, or Atoms to Value-only routines.</p>
</li>
<li>
<p><strong>Secondary Goal:</strong> Prevent things like passing Element cells to writing routines that may potentially produce antiforms in that cell.</p>
</li>
<li>
<p><strong>Tertiary Goal:</strong> Detect things like superfluous <code>Is_Antiform()</code> calls being made on Elements.</p>
</li>
</ul>
<p>The primary goal is achieved by choosing Element as a most-derived type instead of a base type.</p>
<p>The next two goals are somewhat maddeningly trickier... <img src="https://forum.rebol.info/images/emoji/twitter/pouting_cat.png?v=12" title=":pouting_cat:" class="emoji" alt=":pouting_cat:" loading="lazy" width="20" height="20"></p>
<h2><a name="p-7886-sink-and-need-2" class="anchor" href="https://forum.rebol.info#p-7886-sink-and-need-2"></a><code>Sink(...)</code> and <code>Need(...)</code></h2>
<p>The idea behind a Sink() is to be able to mark on a function's interface when a function argument passed by pointer is intended as an output.</p>
<p>This has benefits of documentation, and can also be given some teeth by scrambling the memory that the pointer points at (so long as it isn't an "in-out" parameter).  But it also applied in CHECK_CELL_SUBCLASSES, by enforcing "covariance" for input parameters, and "contravariance" for output parameters.</p>
<p>If USE_CELL_SUBCLASSES is enabled, then the inheritance heirarchy has Atom at the base, with Element at the top.  Since what Elements can contain is more constrained than what Atoms can contain, this means you can pass Atom* to Element*, but not vice-versa.</p>
<p>However, when you have a Sink(Element) parameter instead of an Element*, the checking needs to be reversed.  You are -writing- an Element, so the receiving caller can pass an Atom* and it will be okay.  But if you were writing an Atom, then passing an Element* would not be okay, as after the initialization the Element could hold invalid states.</p>
<p>We use "SFINAE" to selectively enable the upside-down hierarchy, based on the <code>std::is_base_of&lt;&gt;</code> type trait.</p>
<h2><a name="p-7886-the-code-in-the-c-debug-build-3" class="anchor" href="https://forum.rebol.info#p-7886-the-code-in-the-c-debug-build-3"></a>The Code (in the C++ Debug Build)</h2>
<pre><code>template&lt;typename T, bool sink&gt;
struct NeedWrapper {
    T* p;
    mutable bool corruption_pending;  // can't corrupt on construct

  //=//// TYPE ALIASES ////////////////////////////////////////////////=//

    using MT = typename std::remove_const&lt;T&gt;::type;

    template&lt;typename U&gt;  // contravariance
    using IsReverseInheritable = typename std::enable_if&lt;
        std::is_same&lt;U,T&gt;::value or std::is_base_of&lt;U,T&gt;::value
    &gt;::type;

  //=//// CONSTRUCTORS ////////////////////////////////////////////////=//

    NeedWrapper() = default;  // or MSVC warns making Option(Sink(Value))

    NeedWrapper(nullptr_t) {
        p = nullptr;
        corruption_pending = false;
    }

    NeedWrapper (const NeedWrapper&lt;T,sink&gt;&amp; other) {
        p = other.p;
        corruption_pending = p and (other.corruption_pending or sink);
        other.corruption_pending = false;
    }

    template&lt;typename U, IsReverseInheritable&lt;U&gt;* = nullptr&gt;
    NeedWrapper(U* u) {
        p = u_cast(T*, u);
        corruption_pending = p and sink;
    }

    template&lt;typename U, bool B, IsReverseInheritable&lt;U&gt;* = nullptr&gt;
    NeedWrapper(const NeedWrapper&lt;U, B&gt;&amp; other) {
        p = u_cast(T*, other.p);
        corruption_pending = p and (other.corruption_pending or sink);
        other.corruption_pending = false;
    }

  //=//// ASSIGNMENT //////////////////////////////////////////////////=//

    NeedWrapper&amp; operator=(nullptr_t) {
        p = nullptr;
        corruption_pending = false;
        return *this;
    }

    NeedWrapper&amp; operator=(const NeedWrapper&lt;T,sink&gt; other) {
        if (this != &amp;other) {  // self-assignment possible
            p = other.p;
            corruption_pending = p and (other.corruption_pending or sink);
            other.corruption_pending = false;
        }
        return *this;
    }

    template&lt;typename U, IsReverseInheritable&lt;U&gt;* = nullptr&gt;
    NeedWrapper&amp; operator=(const NeedWrapper&amp; other) {
        if (this != &amp;other) {  // self-assignment possible
            p = other.p;
            corruption_pending = p and (other.corruption_pending or sink);
            other.corruption_pending = false;
        }
        return *this;
    }

    template&lt;typename U, IsReverseInheritable&lt;U&gt;* = nullptr&gt;
    NeedWrapper&amp; operator=(U* other) {
        p = u_cast(T*, other);
        corruption_pending = p and sink;
        return *this;
    }

  //=//// OPERATORS ///////////////////////////////////////////////////=//

    operator bool () const { return p != nullptr; }

    operator T* () const {
        if (corruption_pending) {
            Corrupt_If_Debug(*const_cast&lt;MT*&gt;(p));
            corruption_pending = false;
        }
        return p;
    }

    T* operator-&gt;() const {
        if (corruption_pending) {
            Corrupt_If_Debug(*const_cast&lt;MT*&gt;(p));
            corruption_pending = false;
        }
        return p;
    }

  //=//// DESTRUCTOR //////////////////////////////////////////////////=//

    ~NeedWrapper() {
        if (corruption_pending)
            Corrupt_If_Debug(*const_cast&lt;MT*&gt;(p));
    }
};
</code></pre>
<p>So then the <code>Sink(...)</code> and non-corrupting version <code>Need(...)</code> for in/out parameters with contravariance checking are:</p>
<pre><code>#define Sink(T) \
    NeedWrapper&lt;T, true&gt;

#define Need(TP) \
    NeedWrapper&lt;typename std::remove_pointer&lt;TP&gt;::type, false&gt;
</code></pre>
<h2><a name="p-7886-notes-on-corrupting-4" class="anchor" href="https://forum.rebol.info#p-7886-notes-on-corrupting-4"></a>Notes on Corrupting</h2>
<p>The original implementation was simpler, by just doing the corruption at the moment of construction.</p>
<p>But this faced a problem:</p>
<pre><code>    bool some_function(Sink(char*) out, char* in) { ... }

    if (some_function(&amp;ptr, ptr)) { ...}
</code></pre>
<p>If you corrupt the data at the address the sink points to, you can actually be corrupting the value of a stack variable being passed as another argument before it's calculated as an argument.  So deferring the corruption after construction is necessary.  It's a bit tricky in terms of the handoffs and such.</p>
<p><em>(While this could be factored, function calls aren't inlined in the debug build, so given the simplicity of the code, it's repeated.)</em></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/antiform-safety-covariance-and-contravariance/2330">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/antiform-safety-covariance-and-contravariance/2330</link>
          <pubDate>Mon, 11 Nov 2024 09:49:10 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2330</guid>
          <source url="https://forum.rebol.info/t/antiform-safety-covariance-and-contravariance/2330.rss">Antiform Safety: Covariance and Contravariance</source>
        </item>
        <item>
          <title>ENHEX and DEHEX testing, another &quot;Micro-Dialect&quot;</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>Here's a little excerpt of testing <strong><a href="https://en.wikipedia.org/wiki/Percent-encoding">Percent Encoding</a></strong> <em>(which Rebol gives the poor names ENHEX and DEHEX to, and should probably be changed)</em>.</p>
<p>It started out just as a table of encoded and decoded forms, e.g.</p>
<pre><code>for-each [encoded decoded] [
    "a%20b" "a b"
    "a%25b" "a%b"
    "a%ce%b2c" "aβc"
    ...
][
   ; test that it decodes
]
</code></pre>
<p>But the encoding produces uppercase hex digits (per <a href="https://datatracker.ietf.org/doc/html/rfc3986">RFC 3896</a>), while the decoding tolerates lowercase ones.  So you don't get the same thing back.</p>
<p>That led me to the "whimsical" choice to denote reversible <strong><code>&lt;-&gt;</code></strong> and non-reversible <strong><code>-&gt;</code></strong> transforms:</p>
<pre><code>"a%25b" &lt;-&gt; "a%b"
"a%ce%b2c" -&gt; "aβc" -&gt; "a%CE%B2c"
</code></pre>
<p>This is strange in that <strong><code>-&gt;</code></strong> is a WORD!, while <strong><code>&lt;-&gt;</code></strong> is a TAG! (and I believe this is the correct design choice when all is said and done).</p>
<p>But in a dialect, having something <em>look like what you want</em> can be enough, as it's just being looked for literally.</p>
<p>I threw in an additional wrinkle by letting BLOCK! with an INTEGER! in it serve as a comment.  It looks visually better than having to throw in a semicolon.</p>
<p>It's satisfying when such things can be done in a matter of a few minutes:</p>
<pre><code>; 1. Accept lowercase, but canonize to uppercase, per RFC 3896 2.1
;
; 2. A case can be made for considering the encoding of characters that
;    don't need it to be an error by default.
;
parse compose [
    "a%20b" &lt;-&gt; "a b"
    "a%25b" &lt;-&gt; "a%b"
    "a%ce%b2c" -&gt; "aβc" -&gt; "a%CE%B2c"  [1]
    "%2b%2b" -&gt; "++" -&gt; "++"  [2]
    "a%2Bb" -&gt; "a+b" -&gt; "a+b"  [2]
    "a%62c" -&gt; "abc" -&gt; "abc"  [2]
    "a%CE%B2c" &lt;-&gt; "aβc"
    (as text! #{2F666F726D3F763D254335253939}) -&gt; "/form?v=ř"
][ some [
    let encoded: text!
    let arrow: ['&lt;-&gt; | '-&gt;]
    let decoded: text!
    let re-encoded: [when (arrow = '-&gt;) ['-&gt; text!] | (encoded)]
    optional block!  ; headnote comment
    (
        let de: dehex encoded
        if de != decoded [
            fail ["Decode of" @encoded "gave" @de "expected" @decoded]
        ]
        let en: enhex decoded
        if en != re-encoded [
            fail ["Encode of" @decoded "gave" @en "expected" @re-encoded]
        ]
    )
]]
</code></pre>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/enhex-and-dehex-testing-another-micro-dialect/2323">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/enhex-and-dehex-testing-another-micro-dialect/2323</link>
          <pubDate>Fri, 08 Nov 2024 16:10:52 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2323</guid>
          <source url="https://forum.rebol.info/t/enhex-and-dehex-testing-another-micro-dialect/2323.rss">ENHEX and DEHEX testing, another &quot;Micro-Dialect&quot;</source>
        </item>
        <item>
          <title>Much Ado About A Tiny Email Test &quot;Micro-Dialect&quot;</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>So there was a "micro dialect" for email address scanning.  A simple idea that you could intermix valid and invalid email addresses...to put groups of related emails together even though some in the group would fail and others would succeed.</p>
<p>It was something along these lines:</p>
<pre><code>for-each [mode text] [
    + {email@example.com}
    + {firstname.lastname@example.com}
    - {email@example@example.com}
    + {email@subdomain.example.com}
    + {firstname+lastname@example.com}
    - {email@example.com}
    + {email@123.123.123.123}
    - {email@[123.123.123.123]}
    ...
 ][
    assert [mode: select [+ valid - invalid] mode]
    if (mode = 'valid) != test-scan-email (...) [
        fail ["Expected" @text "to be" an mode "email"]
    ]
 ]
</code></pre>
<p>But for this post, I threw in a couple of "hey that's neat" aspects, like:</p>
<pre><code>&gt;&gt; an "valid"
== "a valid"

&gt;&gt; an "invalid"
== "an invalid"
</code></pre>
<h2><a name="p-7845-enter-dashed-strings-1" class="anchor" href="https://forum.rebol.info#p-7845-enter-dashed-strings-1"></a>Enter Dashed Strings</h2>
<p>I don't know that the <strong><code>+</code></strong> and <strong><code>-</code></strong> markers were ever the greatest, but they certainly lost their appeal with dashed strings.</p>
<pre><code>    + -{email@example.com}-
    + -{firstname.lastname@example.com}-
    - -{email@example@example.com}-
    + -{email@subdomain.example.com}-
</code></pre>
<p>At first I figured I'd just pick an alternative.  There's Y and N...</p>
<pre><code>    Y -{email@example.com}-
    Y -{firstname.lastname@example.com}-
    N -{email@example@example.com}-
    Y -{email@subdomain.example.com}-
</code></pre>
<p>Those are pretty big letterforms that blur together some.  Tilde for trash to differentiate carries the connotation of "something wrong"...</p>
<pre><code>    Y -{email@example.com}-
    Y -{firstname.lastname@example.com}-
    ~ -{email@example@example.com}-
    Y -{email@subdomain.example.com}-
</code></pre>
<p>...but it blurs here too much with the dash.</p>
<p><strong>Really we can ask: why are we decorating the valid things, and not just the invalid things?</strong></p>
<pre><code>      -{email@example.com}-
      -{firstname.lastname@example.com}-
    # -{email@example@example.com}-
      -{email@subdomain.example.com}-
</code></pre>
<p>You could use <strong><code>N</code></strong> or <strong><code>*</code></strong> or <strong><code>#</code></strong> or any other nasty here, and it sort of stands out.  Not as well as <strong><code>&lt;bad&gt;</code></strong> would.</p>
<pre><code>      -{email@example.com}-
      -{firstname.lastname@example.com}-
&lt;bad&gt; -{email@example@example.com}-
      -{email@subdomain.example.com}-
</code></pre>
<p><strong>But if you're going to break the regularity of the structure, you can't use (today's) FOR-EACH.</strong></p>
<p>If you want to regularize it a bit, you could use something like BLOCK! to mark the bad ones:</p>
<pre><code>      -{email@example.com}-
      -{firstname.lastname@example.com}-
     [-{email@example@example.com}-]
      -{email@subdomain.example.com}-
</code></pre>
<p>If that didn't stand out enough, you could use a double-block:</p>
<pre><code>      -{email@example.com}-
      -{firstname.lastname@example.com}-
    [[-{email@example@example.com}-]]
      -{email@subdomain.example.com}-
</code></pre>
<p>It's worth remembering such things are options in some cases, but I don't think that works very well here.</p>
<h2><a name="p-7845-bad-seems-good-but-could-it-be-easier-2" class="anchor" href="https://forum.rebol.info#p-7845-bad-seems-good-but-could-it-be-easier-2"></a><code>&lt;bad&gt;</code> Seems Good, But Could It Be Easier?</h2>
<p>It would be nice if there were some way to type the FOR-EACH variables, and denote their optionality.</p>
<p><span class="mention">@hiiamboris</span> has done some things in this vein, see his <a href="https://codeberg.org/hiiamboris/red-common/src/branch/master/foreach-design.md">type filter on FOR-EACH proposal</a>.  I feel like the concept of skipping and checking should be separate intents.  I can want to type check something but not want to skip it.</p>
<p>A leading colon could imply optionality, as it does with refinements now:</p>
<pre><code>for-each [:bad [tag!] text [text!]] [
        -{email@example.com}-
        -{firstname.lastname@example.com}-
  &lt;bad&gt; -{email@example@example.com}-
        -{email@subdomain.example.com}-
        ...
][
    ...
]
</code></pre>
<p>You can even use <code>&lt;bad&gt;</code> itself for the type check by quoting it, and enforce/document that more stringently.  Also, for the sake of "how does that look in the generator model" I'll write it out that way:</p>
<pre><code>for [:bad ['&lt;bad&gt;] text [text!]] each [
        -{email@example.com}-
        -{firstname.lastname@example.com}-
  &lt;bad&gt; -{email@example@example.com}-
        -{email@subdomain.example.com}-
        ...
][
    ...
]
</code></pre>
<p>Of course you can split this out to a table vs. having the tests inline like that.</p>
<p>Interpreting blocks as type checks seems pretty useful, but that takes away from some other applications which might be used for destructuring.</p>
<p>Anyway, this is just some thinking inspired by a very small example.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/much-ado-about-a-tiny-email-test-micro-dialect/2315">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/much-ado-about-a-tiny-email-test-micro-dialect/2315</link>
          <pubDate>Fri, 11 Oct 2024 21:29:46 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2315</guid>
          <source url="https://forum.rebol.info/t/much-ado-about-a-tiny-email-test-micro-dialect/2315.rss">Much Ado About A Tiny Email Test &quot;Micro-Dialect&quot;</source>
        </item>
        <item>
          <title>Getting Output From Rebol2 on Windows GitHub Actions</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>For reasons of comparative testing or otherwise, it can be useful to run Rebol2.exe on something like GitHub Actions.  But it's tricky, since there's not support for interactivity from "plain" consoles...just the GUI.</p>
<ul>
<li>
<p>If you use the --nowindow option you can avoid a GUI Window, and then redirect Rebol2's output to a file.</p>
<ul>
<li>But then you don't get the output until it finishes--<em>if</em> it finishes.</li>
</ul>
</li>
<li>
<p>So the way to get a stream of output into the GitHub Actions log is to use piping.</p>
</li>
</ul>
<h2>But... What Do You Pipe <em>Into</em>?</h2>
<p>On UNIX you can pipe anything into <code>cat</code>, and it will "con-cat-enate" whatever it gets back to the terminal</p>
<pre><code>$ echo "CAT just repeats" | cat
CAT just repeats
</code></pre>
<p>Windows doesn't really have an analogue to that, because its seemingly-similar TYPE shell command can't be piped into.</p>
<p>The trick I came up with offhand was a batch file that pipes into FIND and excludes any line that contains the word "voodoo":</p>
<pre><code># Note: Writing a line from cmd.exe that contains quotes like this is
# seemingly impossible...escaping with ^" or "" or \" just don't work.
# Bash may be ugly, but at least it doesn't have so many glaring holes.
#
- name: Download And Wrap Rebol2 Interpreter
  run: |
    curl -o rebol2-core.exe -L http://www.rebol.com/downloads/v278/rebol-core-278-3-1.exe
    echo "rebol2-core.exe --nowindow %* | find /V \"voodoo\"" &gt; rebol2.bat
</code></pre>
<p>So that gives you a Rebol2 command that will behave as you would probably expect something on GitHub Actions to act.</p>
<pre><code># See notes above about why Rebol2 is a batch file that does piping.
#
- name: Demonstrate Rebol2 Working
  shell: cmd
  run: |
    rebol2 --do "print {Hello from Rebol2 Piping Batch Wrapper}"
</code></pre>
<p>Of course these days we can pipe into Ren-C and it can be made to work.  But this is a bit lighter weight.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/getting-output-from-rebol2-on-windows-github-actions/1966">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/getting-output-from-rebol2-on-windows-github-actions/1966</link>
          <pubDate>Thu, 15 Sep 2022 07:11:49 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1966</guid>
          <source url="https://forum.rebol.info/t/getting-output-from-rebol2-on-windows-github-actions/1966.rss">Getting Output From Rebol2 on Windows GitHub Actions</source>
        </item>
        <item>
          <title>JS testing with Cypress.io</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>I will eventually have to port my Red GUI database front end and so I was looking for testing tools.  I came across <a href="https://cypress.io">https://cypress.io</a> which seems to be fully featured though it may be more demanding of JS knowledge than I have.</p>
<p>Anyway, here's a short script to open up the replpad, and start the chess demo though I had to increase the default timeout from 4 to 5 seconds</p>
<blockquote>
<p>describe('Test the replpad', () =&gt; {<br>
it('Visits Replpad', () =&gt; {<br>
cy.visit(<code>'http://hostilefork.com/media/shared/replpad-js/'</code>)<br>
cy.get('.input').type('do &lt;chess&gt;{enter}')<br>
})<br>
})</p>
</blockquote>
<p>So, it opens a browser instance to the replpad, waits until loading is complete, and then waits until the dom has the <code>.input</code> element present.  It then types the chess command.  The chess board then pops up.</p>
<p>Here's a quick <a href="https://filiphric.com/cypress-basics-selecting-elements">tutorial</a> on how to select elements.</p>
<p>Installation is just simply</p>
<pre><code>npm install cypress --save-dev
</code></pre>
<p>but of course on Windows, you'll need to install node.js</p>
<p>And there's <a href="https://docs.cypress.io/guides/continuous-integration/github-actions#Basic-Setup">information</a> on how to use with GitHub actions</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/js-testing-with-cypress-io/1778">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/js-testing-with-cypress-io/1778</link>
          <pubDate>Tue, 21 Dec 2021 06:56:27 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1778</guid>
          <source url="https://forum.rebol.info/t/js-testing-with-cypress-io/1778.rss">JS testing with Cypress.io</source>
        </item>
        <item>
          <title>Web Testing Now Takes Screenshots 📸</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>I don't particularly enjoy the process of making GitHub Actions...but...the time spent on making the reusable bits of code pays for itself quickly.</p>
<p>We had only one test of the Repl and it was rickety.  But I'd said from the beginning we should be testing things like <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a>'s chess demo and power calculator...keeping them working.</p>
<p><strong>But if it doesn't work on the cloud--and works locally--what do you do?</strong></p>
<h1><a name="p-5659-screenshots-of-course-1" class="anchor" href="https://forum.rebol.info#p-5659-screenshots-of-course-1"></a>Screenshots, of course!</h1>
<p>I made it so that you can ask for a screenshot when the run completes or times out.  Just give it a name and it will be uploaded as a <em>"GitHub Artifact"</em> for you.</p>
<p>Here are four little smoke tests in the browser for today's world, and what the screen would look like when they stopped (if there was a screen).  They are available on every test run as the <a href="https://github.com/metaeducation/ren-c/actions/runs/1515287464">artifacts</a> at the bottom of the page.  They expire after 7 days.</p>
<h2><a name="p-5659-chess-2" class="anchor" href="https://forum.rebol.info#p-5659-chess-2"></a>Chess</h2>
<hr>
<pre><code>- name: Test Chess GUI Example
  uses: metaeducation/ren-c-action@release
  with:
    web: true
    timeout: 15
    screenshot: chess
    script: |
      animate-game: do @chess
      assert [
          comment [https://en.wikipedia.org/wiki/Fool%27s_mate]
          &lt;done&gt; = animate-game [
              f2f3 e7e6
              g2g4 d8h4
          ]
      ]
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/6cc23455cfc3da24ffd27291853be315f2845914.png" data-download-href="https://forum.rebol.info/uploads/default/6cc23455cfc3da24ffd27291853be315f2845914" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/6cc23455cfc3da24ffd27291853be315f2845914_2_690x345.png" alt="image" data-base62-sha1="fw7EauntVfjFXXfNHKdRyV35WKw" width="690" height="345" srcset="https://forum.rebol.info/uploads/default/optimized/1X/6cc23455cfc3da24ffd27291853be315f2845914_2_690x345.png, https://forum.rebol.info/uploads/default/optimized/1X/6cc23455cfc3da24ffd27291853be315f2845914_2_1035x517.png 1.5x, https://forum.rebol.info/uploads/default/original/1X/6cc23455cfc3da24ffd27291853be315f2845914.png 2x" data-dominant-color="ECE4DA"></a></div><p></p>
<h2><a name="p-5659-latest-of-3" class="anchor" href="https://forum.rebol.info#p-5659-latest-of-3"></a>LATEST-OF</h2>
<hr>
<pre><code>- name: LATEST-OF Smoke Test
  uses: metaeducation/ren-c-action@release
  with:
    web: true
    timeout: 15
    screenshot: latest-of
    script: |
      (url: latest-of)
      print ["Result was:" mold url]
      assert [url? url]
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/05b08ec27c845bbfc82ca5e942c24469db94ff18.png" data-download-href="https://forum.rebol.info/uploads/default/05b08ec27c845bbfc82ca5e942c24469db94ff18" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/05b08ec27c845bbfc82ca5e942c24469db94ff18_2_690x345.png" alt="image" data-base62-sha1="OkEWvWAPb7om7PlZ5THTqdJT3q" width="690" height="345" srcset="https://forum.rebol.info/uploads/default/optimized/1X/05b08ec27c845bbfc82ca5e942c24469db94ff18_2_690x345.png, https://forum.rebol.info/uploads/default/optimized/1X/05b08ec27c845bbfc82ca5e942c24469db94ff18_2_1035x517.png 1.5x, https://forum.rebol.info/uploads/default/original/1X/05b08ec27c845bbfc82ca5e942c24469db94ff18.png 2x" data-dominant-color="F4F3F0"></a></div><p></p>
<h2><a name="p-5659-watchlist-4" class="anchor" href="https://forum.rebol.info#p-5659-watchlist-4"></a>WATCHLIST</h2>
<hr>
<pre><code>- name: Watchlist Smoke Test
  uses: metaeducation/ren-c-action@release
  with:
    web: true
    timeout: 15
    screenshot: watch
    script: |
      x: 10
      watch x
      assert [10 = watch 1]
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/7c3a3dc3179df208f61bad1b8fb42d70040c5b64.png" data-download-href="https://forum.rebol.info/uploads/default/7c3a3dc3179df208f61bad1b8fb42d70040c5b64" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/7c3a3dc3179df208f61bad1b8fb42d70040c5b64_2_690x345.png" alt="image" data-base62-sha1="hIXZey0OhgBlFTfo46tQLBZFBxG" width="690" height="345" srcset="https://forum.rebol.info/uploads/default/optimized/1X/7c3a3dc3179df208f61bad1b8fb42d70040c5b64_2_690x345.png, https://forum.rebol.info/uploads/default/optimized/1X/7c3a3dc3179df208f61bad1b8fb42d70040c5b64_2_1035x517.png 1.5x, https://forum.rebol.info/uploads/default/original/1X/7c3a3dc3179df208f61bad1b8fb42d70040c5b64.png 2x" data-dominant-color="F8F6F4"></a></div><p></p>
<h2><a name="p-5659-redbol-5" class="anchor" href="https://forum.rebol.info#p-5659-redbol-5"></a>REDBOL</h2>
<hr>
<pre><code>- name: Redbol Smoke Test
  uses: metaeducation/ren-c-action@release
  with:
    web: true
    timeout: 15
    screenshot: redbol
    script: |
      redbol
      block: [b c]
      assert [[a b c d] = compose [a (block) d]]
</code></pre>
<p></p><div class="lightbox-wrapper"><a class="lightbox" href="https://forum.rebol.info/uploads/default/original/1X/c7ca24fcd4556a03349509c1139dd76a7c315848.png" data-download-href="https://forum.rebol.info/uploads/default/c7ca24fcd4556a03349509c1139dd76a7c315848" title="image"><img src="https://forum.rebol.info/uploads/default/optimized/1X/c7ca24fcd4556a03349509c1139dd76a7c315848_2_690x345.png" alt="image" data-base62-sha1="svq6LFOOe2vaqDYylmmkXtkMEQM" width="690" height="345" srcset="https://forum.rebol.info/uploads/default/optimized/1X/c7ca24fcd4556a03349509c1139dd76a7c315848_2_690x345.png, https://forum.rebol.info/uploads/default/optimized/1X/c7ca24fcd4556a03349509c1139dd76a7c315848_2_1035x517.png 1.5x, https://forum.rebol.info/uploads/default/original/1X/c7ca24fcd4556a03349509c1139dd76a7c315848.png 2x" data-dominant-color="F6F4F0"></a></div><p></p>
<h1><a name="p-5659-it-really-is-mostly-that-easy-6" class="anchor" href="https://forum.rebol.info#p-5659-it-really-is-mostly-that-easy-6"></a>It Really Is (Mostly) That Easy</h1>
<p>You can use it too.  So why not?  Remember it can run code on GitHub Actions Linux, Windows, and Mac containers too (just don't say <strong>web: true</strong> and it will detect the platform and download the right r3).</p>
<h1><a name="p-5659-web-automation-still-primitive-more-work-to-do-7" class="anchor" href="https://forum.rebol.info#p-5659-web-automation-still-primitive-more-work-to-do-7"></a>...Web Automation Still Primitive, More Work To Do...</h1>
<p>You can see that it makes the last thing it does:</p>
<pre><code>print reverse {ETELPMOC TSET}
</code></pre>
<p>Then a setInterval()-based JavaScript timer kicks in every couple of seconds looking for the text "TEST COMPLETE".  This is not great for the long term.  We should be looking for something out of band (like the title bar of the browser, perhaps...<a href="http://titlewait.hostilefork.com/">I've done that before</a>)</p>
<p>The newlines are replaced with spaces because if the console gets a newline, it starts running code...and isn't responsive to keypresses until the prompt comes back again.  So characters get lost.  Stripping out the newlines is bad because if you have any semicolon comments to end of line, they will screw things up by turning the subsequent lines into comments.  Also it ruins multiline strings.</p>
<p>So a better way is needed to actually simulate hitting enter and then waiting (or the console needs to find a way to do keyboard buffering while code is running).</p>
<p>Deficiencies aside, it gives things more hope to have these kinds of tests.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/web-testing-now-takes-screenshots/1762">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/web-testing-now-takes-screenshots/1762</link>
          <pubDate>Mon, 29 Nov 2021 10:45:42 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1762</guid>
          <source url="https://forum.rebol.info/t/web-testing-now-takes-screenshots/1762.rss">Web Testing Now Takes Screenshots 📸</source>
        </item>
        <item>
          <title>New Testing Feature: @COLLECT-TESTS</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>Historically there were a lot of lines in test files that were the moral equivalent of:</p>
<pre><code>; Test the `=` operator
(1 = 1)
(2 = 2)
(3 = 3)
...97 lines later...
(100 = 100)
</code></pre>
<p>I'm really not exaggerating much.  Someone really did like filling up pages with tests like this.</p>
<p>(There's an argument which can be made that if you're testing some basic facilities you might want to start with something more like that, because you haven't established trust in the higher-level language facilities well enough to know that they're working to generate the tests.  :-/)</p>
<p>I myself don't like seeing pages of tests like that, so I'd just make a single test that would iterate and fail if anything went wrong:</p>
<pre><code>(count-up index 100 [
    do compose [(index) = (index)]
]
true)
</code></pre>
<p>But that's kind of lame.  The test log just gives you output of "succeeded" or "error".  You don't get a view of which iteration was bad on an error, and you don't get a view of the tests that ran successfully.</p>
<h2>Meet <span class="mention">@COLLECT-TESTS</span>
</h2>
<p>In your test file, you can now say:</p>
<pre><code>@collect-tests [
    count-up index 100 [
        keep-test compose [(index) = (index)]
    ]
]
</code></pre>
<p>Then the log would show all the tests that were generated, and if 5 of them succeed but 95 don't you'll see the source and the error for all of them.</p>
<p>This notation isn't necessarily final, but I just picked it to jump off the page a little bit.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/new-testing-feature-collect-tests/1681">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/new-testing-feature-collect-tests/1681</link>
          <pubDate>Mon, 23 Aug 2021 12:22:57 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1681</guid>
          <source url="https://forum.rebol.info/t/new-testing-feature-collect-tests/1681.rss">New Testing Feature: @COLLECT-TESTS</source>
        </item>
        <item>
          <title>A Quantum Leap in Testing: Isolating Into Contexts</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>Long ago <a class="mention" href="https://forum.rebol.info/u/brett">@Brett</a> took on the lame-but-important task of breaking the tests into individual files (from a giant, monolithic %core-tests.r file).</p>
<p>And as part of that task, I asked the favor of converting it from the traditional "tests-as-BLOCK!s":</p>
<pre><code>; Original Rebol Test Format
["abba" = reverse "abba"]
[
    foo: func [x] [
        x + 1000
    ]
    true  ; tests have to return *exactly* LOGIC! true
]
[1020 = foo x]
[304 = foo -696]
</code></pre>
<p>...to use GROUP!s...</p>
<pre><code>; Ren-C Adjusted Test Format
("abba" = reverse "abba")
(
    foo: func [x] [
        x + 1000
    ]
    true
)
(1020 = foo x)
(304 = foo -696)
</code></pre>
<h1>...it Wasn't Just Change for the Sake of Change...</h1>
<p>I had a plan.</p>
<p>The idea was that I wanted to save the more "barrier-like" blocks to represent isolated groups.  So then in the "someday" that we could run these tests into isolated contexts, we'd be able to group only those tests that needed to interact together.</p>
<p>While we were waiting for isolation technology to improve, the blocks were still used.  They were just documentation.</p>
<p><strong>But today that is no longer--by the magic of science <img src="https://forum.rebol.info/images/emoji/twitter/man_scientist.png?v=9" title=":man_scientist:" class="emoji" alt=":man_scientist:">   they are isolated!</strong></p>
<pre><code>("abba" = reverse "abba")  ; does not need foo, stands alone

[
    (foo: func [x] [
        x + 1000
    ]
    true)

    (1020 = foo x)  ; uses foo, wants to be in same isolated context
    (304 = foo -696)  ; also sees foo
]
</code></pre>
<h2>But It's Better Than I Thought!</h2>
<p><strong>We can actually isolate every test if we feel like it!   We can run the thousands of tests and add nothing to the user context in the process!</strong></p>
<p>Is it slower, you ask?  No--IT'S MUCH FASTER!  The GC can clean things up it's not using.</p>
<p>It Has Been A Good Test For Sea Of Words Modules!  Making thousands of mini-modules was a good exercise and found a couple of bugs.  Nothing too big, but certainly good to have that extra stress test.</p>
<p><em>(We still might try a mode where we don't isolate, just to throw a wrench in the GC and cause the user context to puff up.  It's a semi-random sort of stress test.)</em></p>
<h2>If BLOCK! Means "Isolate Test", Most Want The Insulation</h2>
<pre><code>["abba" = reverse "abba"]  ; we can isolate this!

[
    (foo: func [x] [  ; we can *not* isolate this...
        x + 1000   ; ...and make that also mean "don't check result!"
    ])  ; ...so no need for the "true" here

    [y: 1020, y = foo x]  ; uses foo, doesn't need to expose Y
    [304 = foo -696]  ; uses foo, doesn't need to see Y
]
</code></pre>
<p>We don't quite yet have the underlying mechanisms to get that extra level of inheritance needed to isolate the "cluster" of tests, and then get that nested isolation for the blocks in the cluster.  But it's likely not too far away!</p>
<h2>Could We do Better With the Notation?</h2>
<p>I tried some experimentation with separating out the idea of putting freeform code in the "cluster" of tests, and saying the freeform code is what's not isolated:</p>
<pre><code>[
    foo: func [x] [
        x + 1000
    ]

    [1020 = foo x]
    [304 = foo -696]
]
</code></pre>
<p>You could imagine it running not just setup code for definitions, but also shutdown:</p>
<pre><code>[
    port: open %test-data.txt

    [port? port]
    [binary? read port]

    close port
]
</code></pre>
<p>But trying my hand at it, I think being this freeform isn't a good idea for this particular dialect.  There's potential for confusion since you're sensing so much based on when a block is on a newline or not.  Seems easy to make mistakes.</p>
<p>Main thing to focus on here is the advancements in the isolation.  I'll keep thinking on the dialect!</p>
            <p><small>3 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/a-quantum-leap-in-testing-isolating-into-contexts/1680">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/a-quantum-leap-in-testing-isolating-into-contexts/1680</link>
          <pubDate>Mon, 23 Aug 2021 09:38:40 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1680</guid>
          <source url="https://forum.rebol.info/t/a-quantum-leap-in-testing-isolating-into-contexts/1680.rss">A Quantum Leap in Testing: Isolating Into Contexts</source>
        </item>
        <item>
          <title>Making Red Tests Useful: Starting UPARSE on the Right Foot</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>When UPARSE began it couldn't do much.  So it had one test file %uparse.test.reb, that grew as the number of combinators grew.</p>
<p>This "one test file for all parse functions" approach was all the Saphirion tests ever had.  And the ever-growing-file method is also used by the <a href="https://github.com/red/red/blob/master/tests/source/units/parse-test.red">Red parse tests</a>.</p>
<p>But UPARSE now aims higher: <em>each combinator gets its own test file</em>.  While some tests will not fit precisely into that--especially larger examples that use many features--it's a better general idea for most of the tests.</p>
<p>Hence you can see <a href="https://github.com/metaeducation/ren-c/tree/master/tests/parse">all the nice files in the <strong><code>%tests/parse/</code></strong></a> directory.  And now that UPARSE is capable enough, I've even mined the R3-Alpha PARSE tests and sorted through them...adjusting them for UPARSE and making sure they work.</p>
<h2>Mining Red Tests for Insight</h2>
<p>This morning I hacked up a converter to translate Red's rather verbose test format to the more spare Rebol test form.  At some point we'll be able to run Red's test suite directly "via Redbol", but I just wanted to go through and mine their parse tests for anything useful...and have them translated into the UPARSE way of saying things.</p>
<p>So... <strong>MEET <a href="https://github.com/metaeducation/ren-c/blob/414a51e4974dfaa5e18486bc69e8a2fc52588156/tests/parse/parse-tests-from-red.test.reb">%PARSE-TESTS-FROM-RED.TEST.REB</a></strong>!</p>
<p><em>(Note: Capture was done as of the last change to that file on Oct 16, 2020... <a href="https://github.com/red/red/commit/32c30072ff215fd4efc0200ab3572ffd7afc8e9f#diff-aa7745d6b886ee41ee7e0ff66dfcbeb5412f86eb0be8bd47370e1e3ef244e089">commit 32c30072ff215fd4efc0200ab3572ffd7afc8e9f</a>...curious they haven't added any parse tests for a year...?)</em></p>
<p>No small feat to go through those, but.  Here we are.  Most of them work--but BREAK and REJECT still need to be thought through as combinators.  So the tests that don't work are the ones that use those.  I'm starting them out as a commit of one file just to show what was taken if there's any question about that.  But the next step is to break them out into the per-combinator files.</p>
<p>They licensed their tests BSD-3 which is <a href="http://www.apache.org/legal/resolved.html#category-a">Apache-2 Compatible to include or extend</a>.  Taking Apache-2 code back to BSD-3 isn't allowed by default.  But they have my permission to take whatever <em>tests</em> as BSD-3, if they care.  <sub>(They can in fact take any of my <em>ideas</em>.  Should they ever do so, then them merely knowing that their ideas don't work and mine do is plenty punishment for them.  But the non-test-<em>code</em> is LGPL...that includes the code for UPARSE and the web REPL.  Borrowing from that means being subject to the LGPL license.)</sub></p>
<p>Changes to remember are:</p>
<ul>
<li>
<p>UPARSE uses OPT SOME (or MAYBE SOME) instead of ANY/WHILE (it has <a href="https://forum.rebol.info/t/the-trickiness-of-the-new-any-combinator-concept/1662">a better meaning for ANY</a> and a <a href="https://forum.rebol.info/t/the-cool-new-repurposing-of-while-in-parse/1875">more consistent meaning for WHILE</a>!).  SOME does not have a progress requirement.  Use FURTHER if progress is mandated.</p>
</li>
<li>
<p>SET-WORD! must be combined with <code>&lt;here&gt;</code> to capture a position, vs. that weird old behavior of set-word alone.  Seeking positions is done with the SEEK combinator, not a GET-WORD!.</p>
</li>
<li>
<p>UPARSE replaces END with <code>&lt;end&gt;</code> and SKIP with <code>&lt;any&gt;</code>. I think these TAG! combinators are working out great...it's nice to have END free for a variable name...and it opens up the space for more nouns that are "out of band" from variable names.  Needing to say <code>'&lt;tag&gt;</code> to actually match a tag is a small price to pay.</p>
</li>
<li>
<p>General Ren-C renamings (string! =&gt; text!, number! =&gt; any-number!, none! =&gt; blank!), historical TRY is TRAP (with a much neater meaning for TRY)...</p>
</li>
<li>
<p>Stopping an alternate match is just done with FALSE.  FAIL is reserved for the "raise an error" sense of failing, and by letting LOGIC! decide if the parse should go on or not we have a nice ability to use splicing rules like <code>:(condition = whatever)</code> to put a true to go on or a false to stop matching.</p>
</li>
</ul>
<p>Thoughts follow.</p>
<h2>You Never Find Out If Red PARSE COLLECT fails</h2>
<p>Once a COLLECT keyword is hit, your result will be an array.  It will contain whatever got collected up to the point of failure.</p>
<pre><code>red&gt;&gt; parse [1 2 3 &lt;bomb&gt;] [collect [some keep integer!] word!]
== [1 2 3]

red&gt;&gt; parse [1 2 3 &lt;bomb&gt;] [collect [some keep integer! word!]]
== [1 2 3]

red&gt;&gt; parse [1 2 3 &lt;bomb&gt; 4] [collect [some keep integer! word!]]
== [1 2 3]
</code></pre>
<p>Ren-C's system lets you have your cake and eat it too... the COLLECT result can be the result and you can even elide matches outside:</p>
<pre><code>ren-c&gt;&gt; parse [1 2 3 ta-da!] [collect [some keep integer!] elide word!]
== [1 2 3]

ren-c&gt;&gt; parse [1 2 3 ta-da!] [collect [some keep integer!] word!]
== ta-da!

ren-c&gt;&gt; parse [1 2 3 &lt;bomb&gt;] [collect [some keep integer!] word!]
; null
</code></pre>
<p>And of course you can always store rule results--any rule synthesized result--into a variable:</p>
<pre><code>ren-c&gt;&gt; parse [1 2 3 ta-da!] [block: collect [some keep integer!] word!]
== ta-da!

ren-c&gt;&gt; block
== [1 2 3]
</code></pre>
<p>Every option is on the table (except having rules you write as if they must match fail, and not tell you!)</p>
<h2>Red PARSE COLLECT/KEEP Is Wacky About Splicing</h2>
<p>Here's a collect test that shows some nasty inconsistencies:</p>
<pre><code>red&gt;&gt; parse [a b b b] [collect [skip keep some 'b]]
== [[b b b]]
</code></pre>
<p>First of all, that KEEP is keeping a BLOCK!.  We know that in ordinary COLLECT if you keep a block it will splice...but this PARSE KEEP is acting like a Rebol2 KEEP/ONLY.</p>
<p>Secondly, the <strong>some 'b</strong> rule is returning a BLOCK!.  But that's not what it does in general.  Try an assignment:</p>
<pre><code>red&gt;&gt; parse [a b b b] [skip set var some 'b]
== true

red&gt;&gt; var
== b
</code></pre>
<p>So KEEP SOME 'B has a different logic for what SOME 'B synthesizes than SET SOME 'B.  <img src="https://forum.rebol.info/images/emoji/twitter/clown_face.png?v=9" title=":clown_face:" class="emoji" alt=":clown_face:"></p>
<p>Ren-C is consistent on both fronts.  KEEP does as-is by default, and SPREAD is used to request splicing.  SOME always synthesizes the value of its last rule unless you ask for a copy.  Currently that is done with ACROSS <em>(may name change to COPY after a settling period...the distinction is currently helpful)</em></p>
<pre><code>ren-c&gt;&gt; parse [a b b b] [collect [&lt;any&gt;, keep across some 'b]]
== [[b b b]]

ren-c&gt;&gt; parse [a b b b] [collect [&lt;any&gt;, keep spread across some 'b]]
== [b b b]

ren-c&gt;&gt; parse [a b b b] [collect [&lt;any&gt;, keep some 'b]]
== [b]
</code></pre>
<p><strong>But...how do you splice in Red KEEP?</strong></p>
<p>Er... <a href="https://github.com/red/red/issues/2391#issuecomment-281655108">KEEP PICK and KEEP COPY variants are explained (?) here</a>:</p>
<pre><code>red&gt;&gt; parse [x -- ] [collect [keep to '-- ]]
== [x]
red&gt;&gt; parse [x y -- ] [collect [keep to '-- ]]
== [[x y]]

red&gt;&gt; parse [x -- ] [collect [keep pick to '-- ]]
== [x] 
red&gt;&gt; parse [x y -- ] [collect [keep pick to '-- ]]
== [x y]

red&gt;&gt; parse [x -- ] [collect [keep copy _ to '-- ]]
== [[x]]
red&gt;&gt; parse [x y -- ] [collect [keep copy _ to '-- ]]
== [[x y]]
</code></pre>
<p><em>(Sidenote: the use of the _ as a "word that is thrown away" shows that being forced to name arguments to COPY is a bad idea.  It's better as a combinator that synthesizes a result that may or may not be stored in a variable.)</em></p>
<p>The best I can imagine is that this is an attempt to avoid generating large intermediate series. Since Red doesn't worry about "rollback" then if it wants to append things as it goes to the collecting array it can do so with this KEEP PICK.</p>
<p>It doesn't seem to even make any sense...the above suggests that KEEP PICK splices, but apparently not if the result comes from a GROUP! (??).   See <a href="https://github.com/red/red/issues/4198">Red Issue #4198</a>:</p>
<pre><code>red&gt;&gt; parse [][collect keep pick ('a)]
== [a]

red&gt;&gt; parse [][collect keep pick ([a b])]
== [[a b]]
</code></pre>
<p>UPARSE is going down a vastly more consistent/usable road.  But if rollback isn't a requirement there's no reason the append-with-no-intermediate-series behavior couldn't be mimic'd in the UPARSE2 emulation.  Don't know who'd want it, though.</p>
<h2>Explicit Advancement Requirement Is Good</h2>
<p>These all infinite loop in UPARSE:</p>
<pre><code>parse [a a] [some ['c | not 'b] repeat 2 &lt;any&gt;]
parse "aa" [some [#c | not #b] repeat 2 &lt;any&gt;]
parse "bx" [some [not "b" | &lt;any&gt;]]
parse #{0A0A} [some [#"^L" | not #{0B}] repeat 2 &lt;any&gt;]
</code></pre>
<p>And they're trickier than usual, because if you just change that to <code>some further</code> they won't work... because you're demanding rules like <code>further ['c | not 'b]</code> make progress <em>some</em> number of times.</p>
<p>*<em>It's a really convoluted way of thinking of what you're doing here as <em>"some number of matches... including a non-match that doesn't advance of 'b counting as at least one match.</em></em>  So the SOME doesn't fail to match, -but- if it doesn't advance, even though the one time succeeded count it as a break of the iteration and yield success"*.</p>
<p>Who wants to think like that?  It doesn't really make sense.  If you insist on using SOME you have to use an OPT and FURTHER:</p>
<pre><code>parse [a a] [opt some further ['c | not 'b], repeat 2 &lt;any&gt;]
</code></pre>
<p>Or write it more coherently by just testing for the NOT in sequence, vs inside the looped alternate:</p>
<pre><code>parse [a a] [opt some 'c, not 'b, repeat 2 &lt;any&gt;]
</code></pre>
<p>I know it's just a test, but, I have a feeling that most of these "infinite rules need to break" rules have saner expressions...which makes for a more understandable SOME.  Red embraces the advancement rule on purpose; these tests represent "fixes" to what they consider bugs, e.g. <a href="https://github.com/red/red/issues/3927">Red Issue #3927</a>.</p>
<p>But I think requiring advancement fundamentally limits the perception of what PARSE can do.  It can be the control structure of an application or state machine... SOME is a loop.  You might want to re-run a rule so long as input is pending on a network port.  Especially with GROUP! rule splicing that can inject "true" or "false", you can mix and match rules with imperative code... and having a successful rule decide it was "too successful" is just disruptive.</p>
<p>Having a good debugger someday <em>(it's always "someday"...? :-/)</em> will make it easy enough to find the infinite loops.</p>
<h2>We Don't Do /INTO... nor COLLECT INTO</h2>
<p>Red is concerned about low level series optimization, even though Gregg has indicated he agrees with me that this is a bad thing to focus on:</p>
<p><a href="https://forum.rebol.info/t/stopping-the-into-virus/705/1" class="inline-onebox">Stopping the /INTO Virus</a></p>
<p>Not going to rewrite that post here.  But I'll say the idea of being able to make series discontiguous in memory is an interesting one; kind of like how filesystems can split files into chunks.  It seems to me that if series could be "chunked" in this way at a system level, we could worry less about these /INTO matters.  I'd rather look into that kind of answer vs. burdening users with /INTO.</p>
<p>So there's no COLLECT INTO pattern in UPARSE.  They also have a COLLECT AFTER which uses the position after the current series position instead of before the current series position to insert.  :-/  The need for these permutations just seems to further demonstrate what an awkward thing this is to build in.</p>
<p>Someone can put this stuff in Redbol's PARSE built on UPARSE with different combinators--if they really want it.  Don't think that will be me!</p>
<h2>Using Things as Non-Rules Usually Requires GROUP!</h2>
<p>In Red, this works:</p>
<pre><code>red&gt;&gt; parse blk: [] [insert 1]
== true

red&gt;&gt; blk
== [1]
</code></pre>
<p>Originally I asked <em>"Why treat that 1 as a number, instead of as a rule?"</em>  Because it was common to say that things like <strong>3 rule</strong> were a repeat count.  I pointed out the inconsistency.</p>
<p>My argument against inconsistency still holds.  But in this case: I think the literal integer interpretation was the right bias to take.  So UPARSE's INTEGER! combinator <strong><a href="https://forum.rebol.info/t/is-integer-in-parse-too-obfuscating/1578/11">now evaluates to the integer literally</a></strong> with no implicit repeat.</p>
<h2>Red's PARSE INSERT Is Either Arity-1 or Arity-2</h2>
<p>As I show above, Red lets you do <code>insert 1</code>... which makes it look like INSERT takes a single argument.  That's the thing to insert.  You don't need to tell it what series or position, because it presumes you mean the current series at the parse position.</p>
<p>But weirdly enough, <a href="https://github.com/red/red/issues/4153">you can provide a position as the first argument to insert as a word</a>.  In this case it takes two parameters.</p>
<pre><code>&gt;&gt; parse (data: [a b c]) [
    pos-head:           ; capture head postion to variable
    to end              ; seek to end of series
    pos-tail:           ; capture tail position to variable
    insert pos-head 1   ; use arity-2 form of insert, arg 1 is where
]
== true  ; parse position was moved past insertion to end

&gt;&gt; data
== [1 a b c]  ; data changed as expected

&gt;&gt; pos-head
== [1 a b c]  ; pos-head did not move to consistently point at a

&gt;&gt; pos-tail  ; pos-tail also did not move, no longer tail
== [c]
</code></pre>
<p>There's a little bit of this mechanism that would be hard to do yourself.  If you tried to save the parse position, do a SEEK to where you want to insert, then insert, and jump back to the parse position you saved... your parse position wouldn't take into account the size of the insertion.  So you'd have to do something more like:</p>
<ul>
<li>Save the parse position</li>
<li>Seek to where you want to insert</li>
<li>Save the insertion position</li>
<li>Do the insert</li>
<li>If parse position was before insertion position, jump back to it, else
<ul>
<li>Save the after-insertion position</li>
<li>Count distance between after-insertion position and before insertion position</li>
<li>Seek to the saved parse position plus that distance</li>
</ul>
</li>
</ul>
<p>So this form of INSERT does that for you.  But as shown above, the only position that is getting adjusted in this way is your parse position...all other saved positions in the parse will have the wrong index.  This is just a general Rebol issue since it's nothing more than arrays and indices at heart.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=9" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>Here's an example weird Red test of this:</p>
<pre><code>red&gt;&gt; series: [a b c]
red&gt;&gt; letters: [x y z]
red&gt;&gt; parse series [
     mark: 'a insert mark letters insert only mark letters 'b 'c
 ]
== true
red&gt;&gt; series
== [[x y z] x y z a b c]
</code></pre>
<p>Here's me rotely translating that parse rule according to my formula above:</p>
<pre><code>[
    mark: &lt;here&gt;
     'a

    ; Try equivalent of Red's `insert mark letters`
    pos: &lt;here&gt;
    seek (mark)
    insert spread (letters)
    after: &lt;here&gt;
    seek (skip pos (index of after) - (index of mark))

    ; Try equivalent of Red's `insert only mark letters`
    pos: &lt;here&gt;
    seek (mark)
    insert (letters)
    after: &lt;here&gt;
    seek (skip pos (index of after) - (index of mark))

    'b 'c
]
</code></pre>
<p>The mechanic isn't rocket science, but it's sure a pain to do by hand.  Another approach would be PUSH-POSITION and POP-POSITION operators, where the positions on the stack get updated for insertions.</p>
<p>CHANGE is weirder still, because if you pass it a position in the series it changes <em>between</em> the current parse position and what you pass it.</p>
<pre><code>red&gt;&gt; parse blk: [a b c 1 2 3] [
    mark:
    some word!
    change mark "like so"
    some integer!
]
== true

red&gt;&gt; blk
== ["like so" 1 2 3]
</code></pre>
<p>Gabriele dropped mutating operators like CHANGE/INSERT/REMOVE from Topaz PARSE entirely.  They are troublemakers, for sure.  I've kept an open mind but this is of course the kind of debacle you're going to have with them.</p>
<p>But no matter how this is dealt with, I don't think variable-arity INSERT is the right answer.  This needs more careful thought if mutations are going to be allowed.</p>
<h2>Weird Implicit KEEP on Nested COLLECT</h2>
<p>This is the consequence of the fact that COLLECT doesn't really know where it's writing things when you don't use INTO.  It bubbles its result out the top of the parse if you merely mention COLLECT.  So if you have a nested collect and no INTO, where else would it go?</p>
<pre><code>red&gt;&gt; parse [a a [1 1] b b] [
     collect [some [
         keep word!
         | ahead block! into [collect [some keep integer!]]
     ]]
]
== [a a [1 1] b b]
</code></pre>
<p>It's nicer to have the option to do what you want with it.  In Ren-C, such a COLLECT would just be thrown out...you'd have to KEEP it in the outer collect.  At which point you could splice it, or not...</p>
<pre><code>ren-c&gt;&gt; parse [a a [1 1] b b] [
     collect [some [
         keep word!
         | subparse block! [keep spread collect [some keep integer!]]
     ]]
]
== [a a 1 1 b b]

ren-c&gt;&gt; parse [a a [1 1] b b] [
     collect [some [
         keep word!
         | subparse block! [keep collect [some keep integer!]]
     ]]
]
== [a a [1 1] b b]
</code></pre>
<h2>Weird TO END Behavior With Strings</h2>
<p>In <a href="https://github.com/red/red/issues/2561">Red Issue #2561</a> it was observed that the null terminator of strings was getting captured by KEEP TO END in PARSE collect.  Clearly a bug.</p>
<p>But the fix yields this weird behavior:</p>
<pre><code>red&gt;&gt; parse "" [collect [keep to end]]|
== []

red&gt;&gt; parse "" [collect [keep pick to end]]|
== []
</code></pre>
<p>I ask the usual question of why KEEP should be different from anything else.  Let's try:</p>
<pre><code>red&gt;&gt; parse "" [test: to end]
== true

red&gt;&gt; test
== ""
</code></pre>
<p>So if that's what TO END synthesized, why isn't it what KEEP would keep?</p>
<p>Often it is said in the Red camp that I <em>"make things too complicated"</em> (or whatever they say, it's patently untrue)--it would be <em>so much easier</em> if they'd just follow the UPARSE schematic.  Rules synthesize values, BLOCK! rules synthesize the value of their last synthesized alternate, GROUP!s consume no input and just synthesize a value.  And that value is what gets up to KEEP or set in a variable or returned from the overall operation.</p>
            <p><small>4 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/making-red-tests-useful-starting-uparse-on-the-right-foot/1649">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/making-red-tests-useful-starting-uparse-on-the-right-foot/1649</link>
          <pubDate>Fri, 06 Aug 2021 21:56:33 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1649</guid>
          <source url="https://forum.rebol.info/t/making-red-tests-useful-starting-uparse-on-the-right-foot/1649.rss">Making Red Tests Useful: Starting UPARSE on the Right Foot</source>
        </item>
        <item>
          <title>Troubleshooting development</title>
          <dc:creator><![CDATA[iArnold]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>My function now needs to return a result but either</p>
<pre><code>return rebInteger(result);
</code></pre>
<p>where result is my resulting unsigned long value and</p>
<pre><code>return rebVoid();
</code></pre>
<p>both make the console exit and not responsive.</p>
<p>What could cause this behaviour? Could it be I forgot to rebRelease a value that ought to be rebReleased?</p>
<p>Because this</p>
<pre><code>    rebElide("print [{Returning the integer result.}", rebI(result), "{}]");

    rebElide("print {ok!}");

    return rebInteger(result);
}
</code></pre>
<p>Resulting in ending like</p>
<pre><code>&gt;&gt; g-signal-connect-data button1 "clicked" get-handle :f null null 0
Returning the integer result. 52  
ok!
arnold@Ubuntu:/r3n-c/build$ 
</code></pre>
<p>where input typed will no longer appear on the terminal screen..</p>
<p>So indeed I removed a couple of my assignments that were meant to display information about the passed arguments and now the function at least is returning its correct value again:</p>
<pre><code>&gt;&gt; g-signal-connect-data button1 "clicked" get-handle :f null null 0
Returning the integer result. 52 
ok!
== 52
</code></pre>
<p>So this does make a difference.</p>
            <p><small>10 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/troubleshooting-development/1625">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/troubleshooting-development/1625</link>
          <pubDate>Sat, 12 Jun 2021 11:37:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1625</guid>
          <source url="https://forum.rebol.info/t/troubleshooting-development/1625.rss">Troubleshooting development</source>
        </item>
        <item>
          <title>Performance of INHERIT-META</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>I did a little bit of performance sampling and noticed a fair bit of boot time was spent in a function called INHERIT-META.  It's was called often, and it was slow.</p>
<p>Carl &amp; BrianH &amp; co were big fans of taking bottleneck functions and making them natives.  I've tried to avoid that for "weird" functions, but I will make an exception here.</p>
<p>I'm keeping a copy of the original code, which isn't even complete...despite being slow.  :-/</p>
<pre><code>inherit-meta: func* [
    return: "Same as derived (assists in efficient chaining)"
        [action!]
    derived [action!]
    original "Passed as WORD! to use GET to avoid tainting cached label"
        [word!]
    /augment "Additional spec information to scan"
        [block!]
][
    original: get original  ; GET so `specialize :foo [...]` keeps label foo

    if let m1: meta-of :original [
        set-meta :derived let m2: copy :m1  ; shallow copy
        if select m1 'parameter-notes [  ; shallow copy, but make frame match
            m2/parameter-notes: make frame! :derived
            for-each [key value] m1/parameter-notes [
                if in m2/parameter-notes key [
                    m2/parameter-notes/(key): get* 'value  ; !!! BAD-WORD!s
                ]
            ]
        ]
        if select m1 'parameter-types [  ; shallow copy, but make frame match
            m2/parameter-types: make frame! :derived
            for-each [key value] m1/parameter-types [
                if in m2/parameter-types key [
                    m2/parameter-types/(key): get* 'value  ; !!! BAD-WORD!s
                ]
            ]
        ]
    ]
    return get 'derived  ; no :derived name cache
]</code></pre>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/performance-of-inherit-meta/1619">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/performance-of-inherit-meta/1619</link>
          <pubDate>Thu, 03 Jun 2021 21:26:51 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1619</guid>
          <source url="https://forum.rebol.info/t/performance-of-inherit-meta/1619.rss">Performance of INHERIT-META</source>
        </item>
        <item>
          <title>Rethinking Experiments: from `unstable` to `StackValue(*)`</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>As a C program with a lot of mutable state, the interpreter is in constant danger of bugs due to stale pointers.</p>
<p>For instance: the "data stack" can have any of its pointers moved, whenever stack values are pushed or popped.  You can create problems as easily as this:</p>
<pre><code> Value(*) item = TOP;  // top of data stack...right now
 if (IS_WORD(item)) {
      Init_Integer(PUSH(), 1);  // *may* need to relocate entire stack
      printf("Pushed a 1 after seeing %s\n", VAL_WORD_UTF8(item));  // !!! BAD
 }
</code></pre>
<p>The problem is that after you did a push, the previous item pointer <em>might</em> be bad.  It usually isn't, because the stack doesn't need to expand on most pushes.  But things that happen "only sometimes" are the most pernicious sorts of bugs.</p>
<p>It would seem that these stack pointers need to be a fundamentally different type...something that encodes the fact that they go invalid.</p>
<h2>
<a name="weird-first-idea-use-volatile-1" class="anchor" href="https://forum.rebol.info#weird-first-idea-use-volatile-1"></a>Weird First Idea: Use <code>volatile</code>
</h2>
<p>An odd thought I had some time ago was to leverage the <code>volatile</code> attribute.  This is a feature that operates a bit like <code>const</code>, but it signals that a memory address might change outside of the compiler's awareness...so it can't use caching or registers to optimize around it.  The memory has to be fetched each time.</p>
<p>Using volatile to mark pointers to stack locations would make it more obvious where the unstable pointers were.  And then, if you had a routine that took unstable pointers or had them around on the stack, you'd know that you couldn't do stack pushes or pops.  You also couldn't call the evaluator (because arbitrary evaluation can potentially call routines that do pushes and pops).</p>
<p>What seemed nice about this is that volatile--like const--could push its compile time checking transitively through the call graph.  If you have a normal pointer, you can pass it to a routine that accepts either volatile or non-volatile pointers.  But if you have a volatile pointer, you can only pass it to routines that accept volatile pointers.  It would ferret out all the places that shouldn't call the evaluator...</p>
<p>But one drawback is that since this isn't what volatile is actually <em>for</em>, it has the unintended side-effect of making the pointer accesses slow.  So this couldn't be used in the main build, hence volatile would have to have an alias that could be defined to nothing.  I chose <strong><code>unstable</code></strong>:</p>
<pre><code>#ifdef DEBUG_CHECK_UNSTABLE_POINTERS
    #define unstable volatile
#else
    #define unstable  // nothing in unchecked builds
#endif
</code></pre>
<p>As clever as this idea was, it made a big mess.  In particular, it suffered from the problem that C has no particularly good way of letting you build this routine pattern:</p>
<pre><code>  Type1 some_function(Type2 arg, ...)

  unstable Type1 some_function(unstable Type2 arg, ...)
</code></pre>
<p>You want the code to be exactly the same, you just don't want it to drop the annotation on the floor...because that defeats the purpose.  There are ways to do it, but they're very ugly.</p>
<p><strong>...and after all that mess, there's no bug alerts to fire off.</strong></p>
<p>All this does is make it possible for you to visually inspect a routine and have a little bit more information.  It doesn't intrinsically catch any bugs.</p>
<h2>
<a name="taking-another-tactic-a-smart-pointer-class-2" class="anchor" href="https://forum.rebol.info#taking-another-tactic-a-smart-pointer-class-2"></a>Taking Another Tactic: A Smart Pointer Class</h2>
<p>So I ripped out all the <strong><code>unstable</code></strong> stuff, and looked at it again.  What if in the C++ build, the pointers were actual smart pointer classes, that participated in a global count of how many such pointers were extant?  So the result of operations like TOP would be a class... that would +1 the count on construction, and -1 the count on destruction.  An assert would trigger if you tried to push or pop the stack with any non-zero number of these outstanding.</p>
<pre><code> StackValue(*) item = TOP;  // result held in pointer class, extant count + 1
 if (IS_WORD(item)) {
      Init_Integer(PUSH(), 1);  // asserts since a stack pointer is extant
      printf("Pushed a 1 after seeing %s\n", VAL_WORD_UTF8(item));  // unreached
 }
</code></pre>
<p>The interesting thing about such classes is that they can implicitly coerce themselves to <code>Value(*)</code>...and also, that C++ is willing to hold an instance live for as long as a callsite runs.  That means that if a function take a <em>value-by-pointer</em>, you can pass it a temporarily constructed <em>stackvalue-by-value</em>:</p>
<pre><code>Init_Integer(PUSH(), 1);  // generated stackval destructed after Init_Integer()
</code></pre>
<p>So ergonomically, it can act very much like it's returning <code>Value(*)</code>.  But to get the benefit, you just have to avoid directly storing the result of <code>TOP</code> or <code>PUSH()</code> in a <code>Value(*)</code> variable.  Always put them in one of these smart pointers.  (There's no particular good way to enforce this -and- be ergonomic, so it just has to be a policy developers making the core have to know about.)</p>
<p><em><strong>And the C build just defines <code>StackValue(*)</code> as <code>Value(*)</code> and is none the wiser.</strong></em></p>
<p>There's a bit of a technical problem in that this relies on StackValue(*) having constructor and destructor behavior... e.g. the destructor is where the count gets decremented.  But since the interpreter uses longjmp() when a fail() happens, this can cut across the destructor, generating undefined behavior.  While that can mean "anything" what it generally means is "your destructor does not run", which is fine because we enforce the extant count as zero at each evaluation.  Hence unwinding a frame can just reset the count to zero.  It's reliable enough for a debug feature.</p>
<h2>
<a name="and-it-caught-bugs-right-away-3" class="anchor" href="https://forum.rebol.info#and-it-caught-bugs-right-away-3"></a>And It Caught Bugs, Right Away!</h2>
<p>As expected, there were some instances of potential movability of stacks.  The cases were surprising; not things I would have suspected would be problems, but they were.</p>
<p>It's good to have this category of bugs have a reliable device for catching them.  All while still remaining compilable as plain old C...</p>
<p>I'm not sure exactly what the moral of this story is.  But maybe it's that compile-time checking may be great in theory, but you need to have a pretty good ratio of source-contamination-to-bugs-findable.  If you can come up with a good way to catch the majority of things at runtime with a bit of localized code, that may be a better investment.</p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/rethinking-experiments-from-unstable-to-stackvalue/1454">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/rethinking-experiments-from-unstable-to-stackvalue/1454</link>
          <pubDate>Mon, 04 Jan 2021 08:27:30 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1454</guid>
          <source url="https://forum.rebol.info/t/rethinking-experiments-from-unstable-to-stackvalue/1454.rss">Rethinking Experiments: from `unstable` to `StackValue(*)`</source>
        </item>
        <item>
          <title>Should There Be Distinct Debug/Release Builds?</title>
          <dc:creator><![CDATA[iArnold]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>Preserving for debug build only, that is typical for having bugs that are not reproducable in debug builds. Not in favor for such.</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/should-there-be-distinct-debug-release-builds/1446">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/should-there-be-distinct-debug-release-builds/1446</link>
          <pubDate>Wed, 30 Dec 2020 18:48:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1446</guid>
          <source url="https://forum.rebol.info/t/should-there-be-distinct-debug-release-builds/1446.rss">Should There Be Distinct Debug/Release Builds?</source>
        </item>
        <item>
          <title>Goodbye, Travis. (But it&#39;s not all despair.)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>In its day, Travis CI was a real eye-opener about how useful spinning up a batch of build processes could be.  It was fast, free for open source, and neat.</p>
<p>But it was <a href="https://news.ycombinator.com/item?id=25003387">sold to a pretty smarmy company called Idera</a>.  And without being told, we were shifted onto a free "plan" with 1000 minutes of compute time.</p>
<p>That's not 1000 minutes a month, that's 1000 minutes <em>total</em>.  Not exactly a "plan".</p>
<p>Not only was there no heads up this was going to happen, but the account was in the negative by 3200 minutes.  There wasn't really any accounting to know where all these minutes came from or when they started.</p>
<p>In theory we could get approved as an open source organization with a monthly refresh.  But on forums people who've submitted for the approval process say they've heard nothing back but a form letter.</p>
<p>If this had been done more straightforwardly, then a $15/mo fee to keep the build farm going wouldn't seem that bad.  But with it being done the way it was, this isn't an organization you want to be giving your credit card number to.</p>
<h2>Starting Over From Scratch</h2>
<p>I pulled out all the Travis scripts and am beginning from a fresh sheet.</p>
<p>It would be good--I think--to have pieces of the build done by different CI services.  That distributes the minutes we might use if we're being charged (in free open source points or with dollars).  But it would also help look for ways to do things in a CI-agnostic way.</p>
<p>To that end, I began by breaking up <a class="mention" href="https://forum.rebol.info/u/lkppo">@LkpPo</a>'s %make.sh script into some isolated bash files, that can be documented and tested as isolated bits of functionality:</p>
<p><a href="https://github.com/metaeducation/ren-c/tree/master/tools/bash">%tools/bash/</a></p>
<p>This way the CI can be debugging the same process that any user could also benefit from.</p>
<p>The highest priority build to get back online was the Wasm builds.  So I decided to go ahead and give a shot at putting that on GitHub Actions (which is where many people jumped to).</p>
<p>By having a separate CI just for the Web Builds, the file can be a lot more focused and clear:</p>
<p><a href="https://github.com/metaeducation/ren-c/blob/master/.github/workflows/main.yml"><code>.github/workflows/main.yml</code></a></p>
<p>And if you look at the output from the build, it's <em>much</em> more coherent to look at than what we had in Travis:</p>
<p><a href="https://github.com/metaeducation/ren-c/runs/1490412125?check_suite_focus=true">A Successful Web Build / Test / Greenlight Log</a></p>
<h2>This is Turning Out To Be a Good Thing</h2>
<p>At first, it felt like just another avalanche of "oh no, not <em>another</em> thing to deal with".</p>
<p>But despite the annoyance of having to take time out to deal with it, this is looking a lot better.  The files needed the attention.  GitHub Actions are snappy, I gather that other CI have a lot of things going for them as well <em>(I'm interested in looking into <a href="https://www.drone.io/">Drone.io</a></em>)  So far, the main downside to GitHub Actions seems that your choices for build platforms are pretty limited...this is the list:</p>
<p><a href="https://github.com/actions/virtual-environments#available-environments">https://github.com/actions/virtual-environments#available-environments</a></p>
<p>Anyway, I guess Travis was sold to a bargain basement and going away for a reason...there's too many better options.  It's sad to see something go out like this, when it felt at one point like it really defined a new way of working.  But the build process is important enough to get attention and be brought up to current practices...so being forced to attend to it is probably a blessing in disguise.</p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/goodbye-travis-but-its-not-all-despair/1421">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/goodbye-travis-but-its-not-all-despair/1421</link>
          <pubDate>Thu, 03 Dec 2020 06:41:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1421</guid>
          <source url="https://forum.rebol.info/t/goodbye-travis-but-its-not-all-despair/1421.rss">Goodbye, Travis. (But it&#39;s not all despair.)</source>
        </item>
        <item>
          <title>Executable Size Analysis</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>I compiled <a href="https://github.com/google/bloaty">"Bloaty McBloatface"</a> to get a dump of what the general file size usage is in an -O2 executable which has the default things included (Crypto, Filesystem, HTTP/TCP, JPEG, PNG, etc.)</p>
<p>The file is around 2 megabytes at this point...with all the encryption protocols and such.  Quick summary of findings:</p>
<h2>Mezzanine/Boot Compressed Source Is Biggest Single Chunk</h2>
<p>The compressed source code for all the mezzanine and boot stuff is 65K...which is uncompressed and LOADed, and then the text is thrown away.  But of course the loaded/bound representation for anything that sticks around after boot is going to be bigger in memory.</p>
<p>If one is going to be space conscious--especially about how much memory is taken once things get loaded--this code is where to look.</p>
<p>One thing I have done is set it up so we could have a boot mode that doesn't remember help information.  So if we're looking to make small embeddable forms, it would be good to look at how well things pack and make sure all unnecessary memory is reclaimed.</p>
<p><em>(This involves things like if you have a <code>startup</code> function that's only used once, then after you run it be sure to set <code>startup: null</code> so it can be GC'd. )</em></p>
<h2>Third-Party Libraries</h2>
<ul>
<li>
<p>Zlib is 58.1K.  It's good that things have been rigged up to only include one version of Zlib (instead of duplicating it in PNG loading, for example).  There's probably not much that can be cut there--although on some systems that have a zlib shared library, you could build an executable that used that instead.</p>
</li>
<li>
<p>The JPEG decoder--which only decodes and does not encode--takes up 53.8K.  That seems excessive, especially considering there are <a href="https://keyj.emphy.de/nanojpeg/">pure C 6K decoders</a>.  JPEG is an extension, so you can build without this in any case.</p>
</li>
<li>
<p>LodePNG the PNG extension uses that Zlib...but then its own code is 42.5K.  That covers both encoding and decoding.  Again...PNG is optional, so people who don't want the extension don't need to have it.</p>
</li>
<li>
<p>f-dtoa.c is 31.2K...this is some fairly <a href="https://stackoverflow.com/questions/3173056/why-does-dtoa-c-contain-so-much-code">arcane but vetted C code</a> for converting between floating point <code>double</code> numbers and ASCII.</p>
</li>
<li>
<p>The elliptic curves for cryptography are the single-largest crypto chunk, at 29.3K.  You can build without crypto at all, and you can pare out some of the curves as well...so this is optional.</p>
</li>
<li>
<p>The BigNum math at 24.1Ki is the second largest crypto chunk.  Right now it's optional and you only get it if you build with crypto.  But I'm aiming to say that this is part of the standard implementation of INTEGER!.  (Although perhaps there could be a build where you don't have bignums, and large integers just overflow, for those who wanted it.)</p>
</li>
</ul>
<p>It kind of goes down from there, with particular hashes and such for the cryptography.</p>
<h2>Interpreter Code</h2>
<ul>
<li>
<p>PARSE is the biggest single largest piece of code it seems...at 52.6K it's larger than the evaluator and the action execution code combined.  I definitely think it needs a revisit to its implementation for all kinds of reasons, and most of what I'd think of doing to it would hopefully make it smaller.</p>
</li>
<li>
<p>The "control structures" that include SWITCH and CASE and IF take up a lot of space, and I imagine some of that is also the kind-of-out-of-control batch of MATCH experimentation.</p>
</li>
<li>
<p>The scanner is another thing that could be reduced, it's 39.6K and I'm sure it could be both smaller and faster.  Since Red has attacked this particular problem it's probably worth looking to see if there's anything useful in their answer.</p>
</li>
</ul>
<p>Anyway...it's kind of a case of "things just add up".  Most important is making sure that a core can be put together that's small and doesn't pull in things it doesn't need...and things remain on track for that point.  The system still builds on old systems and dependencies are under control.</p>
<p>It's good to look at, and will keep it all in mind.</p>
<p>Though the stripped file is almost 2MB, debug symbols multiply that by a factor of 10, so a debug executable will be 20 megabytes in file size.  <strong>So ignore the FILE SIZE, only the VM SIZE counts here...</strong></p>
<pre><code>   FILE SIZE        VM SIZE    
 --------------  -------------- 
   0.4%  73.1Ki   3.4%  65.4Ki    prep/core/tmp-boot-block.c
   1.2%   220Ki   3.0%  58.1Ki    ../Projects/ren-c/src/core/u-zlib.c
   2.8%   524Ki   2.8%  54.5Ki    ../Projects/ren-c/src/core/n-control.c
   1.5%   279Ki   2.8%  53.8Ki    ../Projects/ren-c/extensions/jpg/u-jpg.c
   3.0%   554Ki   2.7%  52.6Ki    ../Projects/ren-c/src/core/u-parse.c
   1.2%   227Ki   2.2%  42.5Ki    ../Projects/ren-c/extensions/png/lodepng.c
   2.4%   440Ki   2.1%  41.8Ki    ../Projects/ren-c/src/core/c-path.c
   2.6%   490Ki   2.1%  41.7Ki    ../Projects/ren-c/src/core/n-data.c
   1.8%   341Ki   2.0%  39.6Ki    ../Projects/ren-c/src/core/l-scan.c
   1.8%   335Ki   1.9%  36.6Ki    ../Projects/ren-c/src/core/a-lib.c
   1.7%   308Ki   1.6%  31.8Ki    ../Projects/ren-c/src/core/n-loop.c
   1.8%   339Ki   1.6%  31.4Ki    ../Projects/ren-c/extensions/image/t-image.c
   0.6%   107Ki   1.6%  31.2Ki    ../Projects/ren-c/src/core/f-dtoa.c
   1.7%   322Ki   1.5%  29.7Ki    ../Projects/ren-c/src/core/t-block.c
   1.0%   187Ki   1.5%  29.4Ki    ../Projects/ren-c/src/core/f-deci.c
   1.1%   212Ki   1.5%  29.3Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/ecp.c
   1.5%   276Ki   1.5%  29.1Ki    ../Projects/ren-c/src/core/n-reduce.c
   1.6%   298Ki   1.4%  28.0Ki    ../Projects/ren-c/src/core/t-binary.c
   1.5%   288Ki   1.4%  27.9Ki    ../Projects/ren-c/src/core/c-error.c
   1.5%   282Ki   1.4%  27.6Ki    ../Projects/ren-c/src/core/n-do.c
   1.8%   331Ki   1.4%  26.4Ki    ../Projects/ren-c/src/core/t-string.c
   0.2%  34.4Ki   1.3%  26.0Ki    ../Projects/ren-c/src/main/main.c
   0.7%   121Ki   1.2%  24.1Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/bignum.c
   1.4%   269Ki   1.2%  23.3Ki    ../Projects/ren-c/src/core/b-init.c
   1.4%   260Ki   1.1%  22.2Ki    ../Projects/ren-c/extensions/crypt/mod-crypt.c
   1.1%   213Ki   1.1%  22.0Ki    ../Projects/ren-c/src/core/evaluator/c-action.c
   1.4%   261Ki   1.1%  20.7Ki    ../Projects/ren-c/src/core/n-strings.c
   1.0%   185Ki   1.1%  20.6Ki    ../Projects/ren-c/src/core/evaluator/c-eval.c
   1.2%   227Ki   1.0%  19.8Ki    ../Projects/ren-c/src/core/t-varargs.c
   1.1%   211Ki   1.0%  18.9Ki    ../Projects/ren-c/extensions/gob/t-gob.c
   1.1%   195Ki   1.0%  18.9Ki    ../Projects/ren-c/src/core/c-function.c
   1.1%   208Ki   0.9%  18.0Ki    ../Projects/ren-c/src/core/t-object.c
   1.1%   202Ki   0.9%  17.5Ki    ../Projects/ren-c/src/core/s-make.c
   1.0%   177Ki   0.9%  17.3Ki    ../Projects/ren-c/src/core/functionals/c-specialize.c
   0.8%   147Ki   0.9%  16.9Ki    ../Projects/ren-c/src/core/l-types.c
   0.2%  44.2Ki   0.9%  16.6Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/aes.c
   1.0%   193Ki   0.8%  16.3Ki    ../Projects/ren-c/src/core/c-context.c
   0.8%   150Ki   0.8%  15.7Ki    ../Projects/ren-c/src/core/s-mold.c
   1.0%   177Ki   0.8%  15.6Ki    ../Projects/ren-c/src/core/s-ops.c
   0.9%   169Ki   0.8%  15.3Ki    ../Projects/ren-c/src/core/t-map.c
   0.9%   162Ki   0.8%  15.1Ki    ../Projects/ren-c/src/core/t-bitset.c
   0.9%   171Ki   0.8%  14.7Ki    ../Projects/ren-c/extensions/vector/t-vector.c
   0.1%  24.4Ki   0.7%  14.0Ki    ../Projects/ren-c/src/core/s-cases.c
   0.8%   158Ki   0.7%  13.5Ki    ../Projects/ren-c/src/core/c-bind.c
   0.7%   134Ki   0.7%  13.2Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/ecp_curves.c
   0.4%  72.2Ki   0.7%  13.0Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/rsa.c
   0.7%   125Ki   0.6%  12.6Ki    ../Projects/ren-c/extensions/event/mod-event.c
   0.9%   159Ki   0.6%  12.3Ki    ../Projects/ren-c/extensions/filesystem/mod-filesystem.c
   0.7%   135Ki   0.6%  12.0Ki    ../Projects/ren-c/extensions/network/mod-network.c
   0.6%   110Ki   0.6%  11.8Ki    ../Projects/ren-c/src/core/t-logic.c
   0.5%   100Ki   0.6%  11.7Ki    ../Projects/ren-c/src/core/t-date.c
   0.8%   153Ki   0.6%  11.5Ki    ../Projects/ren-c/extensions/filesystem/p-file.c
   0.9%   163Ki   0.6%  11.4Ki    ../Projects/ren-c/src/core/f-modify.c
   0.7%   125Ki   0.6%  11.3Ki    ../Projects/ren-c/extensions/utf/mod-utf.c
   0.7%   128Ki   0.6%  11.0Ki    ../Projects/ren-c/src/core/t-char.c
   0.6%   105Ki   0.6%  10.9Ki    ../Projects/ren-c/src/core/c-word.c
   0.6%   109Ki   0.5%  10.7Ki    ../Projects/ren-c/src/core/n-math.c
   0.1%  19.2Ki   0.5%  10.5Ki    ../Projects/ren-c/src/core/f-random.c
   0.1%  19.6Ki   0.5%  10.3Ki    prep/core/tmp-type-hooks.c
   0.8%   143Ki   0.5%  10.3Ki    ../Projects/ren-c/src/core/u-compress.c
   0.6%   109Ki   0.5%  9.75Ki    ../Projects/ren-c/src/core/f-blocks.c
   0.4%  80.3Ki   0.5%  9.45Ki    ../Projects/ren-c/src/core/f-stubs.c
   0.1%  18.9Ki   0.5%  9.26Ki    prep/extensions/console/tmp-mod-console-init.c
   0.6%   108Ki   0.5%  9.20Ki    ../Projects/ren-c/src/core/t-integer.c
   0.6%   104Ki   0.5%  9.12Ki    ../Projects/ren-c/src/core/t-tuple.c
   0.5%  87.4Ki   0.5%  9.05Ki    ../Projects/ren-c/src/core/t-time.c
   0.5%  86.6Ki   0.5%  8.92Ki    ../Projects/ren-c/src/core/m-gc.c
   0.5%  96.6Ki   0.5%  8.89Ki    ../Projects/ren-c/src/core/s-find.c
   0.5%  92.4Ki   0.5%  8.76Ki    ../Projects/ren-c/extensions/event/t-event.c
   0.5%  88.6Ki   0.4%  8.70Ki    ../Projects/ren-c/src/core/n-error.c
   0.5%  99.0Ki   0.4%  8.54Ki    ../Projects/ren-c/src/core/s-crc.c
   0.4%  76.1Ki   0.4%  8.53Ki    ../Projects/ren-c/src/core/m-pools.c
   0.4%  75.9Ki   0.4%  8.32Ki    ../Projects/ren-c/extensions/process/call-posix.c
   0.5%  87.9Ki   0.4%  8.20Ki    ../Projects/ren-c/src/core/functionals/c-oneshot.c
   0.5%  97.3Ki   0.4%  8.15Ki    ../Projects/ren-c/src/core/m-series.c
   0.4%  82.2Ki   0.4%  7.90Ki    ../Projects/ren-c/src/core/t-decimal.c
   0.5%  93.2Ki   0.4%  7.83Ki    ../Projects/ren-c/src/core/t-function.c
   0.4%  75.9Ki   0.4%  7.55Ki    ../Projects/ren-c/src/core/t-datatype.c
   0.4%  67.0Ki   0.4%  7.45Ki    ../Projects/ren-c/src/core/t-money.c
   0.5%  83.9Ki   0.4%  7.24Ki    ../Projects/ren-c/src/core/n-sets.c
   0.4%  80.2Ki   0.4%  7.15Ki    ../Projects/ren-c/src/core/functionals/n-function.c
   0.2%  41.5Ki   0.4%  7.04Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/ripemd160.c
   0.2%  36.6Ki   0.4%  7.01Ki    ../Projects/ren-c/extensions/stdio/readline-posix.c
   0.4%  79.8Ki   0.4%  6.89Ki    ../Projects/ren-c/src/core/n-protect.c
   0.4%  77.7Ki   0.3%  6.72Ki    ../Projects/ren-c/src/core/functionals/c-hijack.c
   0.3%  56.9Ki   0.3%  6.67Ki    ../Projects/ren-c/extensions/stdio/p-stdio.c
   0.4%  73.0Ki   0.3%  6.66Ki    ../Projects/ren-c/src/core/functionals/c-enclose.c
   0.4%  76.4Ki   0.3%  6.58Ki    ../Projects/ren-c/extensions/signal/mod-signal.c
   0.4%  70.8Ki   0.3%  6.52Ki    ../Projects/ren-c/src/core/t-pair.c
   0.4%  70.1Ki   0.3%  6.42Ki    ../Projects/ren-c/extensions/serial/mod-serial.c
   0.3%  54.8Ki   0.3%  6.29Ki    ../Projects/ren-c/extensions/process/mod-process.c
   0.3%  62.2Ki   0.3%  6.21Ki    ../Projects/ren-c/src/core/f-extension.c
   0.4%  65.8Ki   0.3%  6.21Ki    ../Projects/ren-c/src/core/t-port.c
   0.3%  53.2Ki   0.3%  6.12Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/sha1.c
   0.4%  75.9Ki   0.3%  6.06Ki    ../Projects/ren-c/src/core/functionals/c-chain.c
   0.3%  57.6Ki   0.3%  5.95Ki    ../Projects/ren-c/src/core/f-enbase.c
   0.3%  63.9Ki   0.3%  5.88Ki    ../Projects/ren-c/src/core/t-typeset.c
   0.4%  66.7Ki   0.3%  5.73Ki    ../Projects/ren-c/extensions/filesystem/file-posix.c
   0.4%  70.3Ki   0.3%  5.54Ki    ../Projects/ren-c/extensions/event/p-event.c
   0.1%  15.1Ki   0.3%  5.46Ki    prep/extensions/debugger/tmp-mod-debugger-init.c
   0.0%  5.46Ki   0.3%  5.46Ki    [section .gnu.hash]
   0.3%  58.5Ki   0.3%  5.35Ki    ../Projects/ren-c/src/core/f-series.c
   0.3%  61.7Ki   0.3%  5.33Ki    ../Projects/ren-c/src/core/t-word.c
   0.3%  46.8Ki   0.3%  5.22Ki    ../Projects/ren-c/extensions/bmp/mod-bmp.c
   0.4%  68.2Ki   0.3%  5.22Ki    ../Projects/ren-c/src/core/functionals/c-does.c
   0.3%  58.5Ki   0.3%  5.18Ki    ../Projects/ren-c/extensions/network/dev-net.c
   0.1%  19.0Ki   0.3%  5.01Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/sha512.c
   0.1%  22.4Ki   0.3%  5.00Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/sha256.c
   0.1%  14.6Ki   0.3%  4.90Ki    prep/extensions/locale/tmp-mod-locale-init.c
   0.3%  62.2Ki   0.2%  4.83Ki    ../Projects/ren-c/src/core/functionals/c-reskin.c
   0.4%  68.5Ki   0.2%  4.73Ki    ../Projects/ren-c/extensions/filesystem/p-dir.c
   0.1%  24.6Ki   0.2%  4.73Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/md.c
   0.3%  62.4Ki   0.2%  4.70Ki    ../Projects/ren-c/extensions/stdio/mod-stdio.c
   0.1%  21.9Ki   0.2%  4.65Ki    ../Projects/ren-c/src/core/a-globals.c
   0.1%  19.1Ki   0.2%  4.54Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/cipher_wrap.c
   0.2%  28.5Ki   0.2%  4.48Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/cipher.c
   0.2%  41.0Ki   0.2%  4.01Ki    ../Projects/ren-c/src/core/f-device.c
   0.2%  40.2Ki   0.2%  3.77Ki    ../Projects/ren-c/src/core/t-quoted.c
   0.3%  47.5Ki   0.2%  3.77Ki    ../Projects/ren-c/extensions/dns/mod-dns.c
   0.1%  13.2Ki   0.2%  3.57Ki    prep/extensions/process/tmp-mod-process-init.c
   0.3%  52.1Ki   0.2%  3.52Ki    ../Projects/ren-c/src/core/d-stack.c
   0.2%  31.7Ki   0.2%  3.51Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/md5.c
   0.1%  20.8Ki   0.2%  3.48Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/dhm.c
   0.1%  23.3Ki   0.2%  3.46Ki    ../Projects/ren-c/extensions/console/mod-console.c
   0.2%  43.3Ki   0.2%  3.41Ki    ../Projects/ren-c/src/core/m-stacks.c
   0.0%  3.40Ki   0.2%  3.40Ki    [section .dynsym]
   0.2%  37.9Ki   0.2%  3.39Ki    ../Projects/ren-c/extensions/gif/mod-gif.c
   0.1%  16.3Ki   0.2%  3.38Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/rsa_internal.c
   0.3%  46.8Ki   0.2%  3.36Ki    ../Projects/ren-c/src/core/functionals/c-augment.c
   0.2%  46.1Ki   0.2%  3.36Ki    ../Projects/ren-c/extensions/debugger/mod-debugger.c
   0.2%  44.7Ki   0.2%  3.27Ki    ../Projects/ren-c/src/core/n-io.c
   0.0%  3.09Ki   0.2%  3.09Ki    [section .rela.plt]
   0.2%  39.5Ki   0.2%  3.08Ki    ../Projects/ren-c/extensions/png/mod-png.c
   0.2%  29.2Ki   0.2%  3.05Ki    ../Projects/ren-c/src/core/f-round.c
   0.2%  46.3Ki   0.1%  2.76Ki    ../Projects/ren-c/src/core/c-port.c
   0.1%  26.0Ki   0.1%  2.67Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/ecdh.c
   0.1%  23.2Ki   0.1%  2.66Ki    ../Projects/ren-c/src/core/f-qsort.c
   0.1%  12.3Ki   0.1%  2.64Ki    prep/extensions/secure/tmp-mod-secure-init.c
   0.1%  25.9Ki   0.1%  2.63Ki    ../Projects/ren-c/extensions/serial/serial-posix.c
   0.2%  28.3Ki   0.1%  2.62Ki    ../Projects/ren-c/src/core/d-print.c
   0.1%  24.1Ki   0.1%  2.56Ki    ../Projects/ren-c/src/core/f-math.c
   0.1%  16.9Ki   0.1%  2.52Ki    ../Projects/ren-c/extensions/crypt/mbedtls/library/hmac_drbg.c
   0.2%  35.0Ki   0.1%  2.27Ki    ../Projects/ren-c/extensions/gob/mod-gob.c
   0.1%  14.0Ki   0.1%  2.26Ki    ../Projects/ren-c/extensions/uuid/libuuid/gen_uuid.c
   0.2%  33.0Ki   0.1%  2.24Ki    ../Projects/ren-c/src/core/n-system.c
   0.1%  19.1Ki   0.1%  2.23Ki    ../Projects/ren-c/extensions/locale/mod-locale.c
   0.2%  37.6Ki   0.1%  2.21Ki    ../Projects/ren-c/src/core/d-crash.c
   0.2%  37.3Ki   0.1%  2.16Ki    ../Projects/ren-c/extensions/secure/mod-secure.c
   0.1%  11.8Ki   0.1%  2.11Ki    prep/extensions/event/tmp-mod-event-init.c
   0.0%  2.08Ki   0.1%  2.08Ki    [section .plt]
   0.0%  2.06Ki   0.1%  2.06Ki    [section .plt.sec]
   0.1%  11.7Ki   0.1%  2.05Ki    prep/extensions/crypt/tmp-mod-crypt-init.c
   1.4%   254Ki   0.1%  2.00Ki    ../Projects/ren-c/src/core/a-constants.c
   0.2%  34.8Ki   0.1%  1.99Ki    ../Projects/ren-c/src/core/functionals/c-typechecker.c
   0.2%  30.1Ki   0.1%  1.85Ki    ../Projects/ren-c/extensions/stdio/stdio-posix.c
   0.2%  32.0Ki   0.1%  1.81Ki    ../Projects/ren-c/src/core/functionals/c-adapt.c
   0.0%  1.72Ki   0.1%  1.72Ki    [section .gnu.version]
   0.1%  17.9Ki   0.1%  1.57Ki    ../Projects/ren-c/extensions/signal/dev-signal.c
   0.1%  11.1Ki   0.1%  1.44Ki    prep/extensions/network/tmp-mod-network-init.c
   0.1%  27.3Ki   0.1%  1.42Ki    ../Projects/ren-c/extensions/jpg/mod-jpg.c
   0.1%  27.3Ki   0.1%  1.37Ki    ../Projects/ren-c/extensions/library/mod-library.c
   0.0%  1.26Ki   0.1%  1.26Ki    [section .dynstr]
   0.1%  10.9Ki   0.1%  1.25Ki    prep/extensions/gob/tmp-mod-gob-init.c
   0.1%  10.9Ki   0.1%  1.24Ki    prep/extensions/filesystem/tmp-mod-filesystem-init.c
   0.1%  20.5Ki   0.1%  1.21Ki    ../Projects/ren-c/src/core/t-blank.c
   0.1%  10.8Ki   0.1%  1.16Ki    prep/extensions/stdio/tmp-mod-stdio-init.c
   0.1%  15.7Ki   0.1%  1.14Ki    ../Projects/ren-c/extensions/time/time-posix.c
   0.0%  1.05Ki   0.1%  1.05Ki    [section .got]
   0.1%  18.4Ki   0.1%  1.03Ki    ../Projects/ren-c/src/core/d-trace.c
   0.0%  8.58Ki   0.1%  1.01Ki    ../Projects/ren-c/extensions/uuid/libuuid/randutils.c
   0.1%  14.9Ki   0.1%    1016    ../Projects/ren-c/src/core/f-int.c
   0.1%  14.5Ki   0.1%     997    ../Projects/ren-c/extensions/event/event-posix.c
   0.1%  10.6Ki   0.0%     977    prep/extensions/utf/tmp-mod-utf-init.c
   0.1%  10.6Ki   0.0%     969    prep/extensions/view/tmp-mod-view-init.c
   0.1%  17.9Ki   0.0%     944    ../Projects/ren-c/extensions/time/mod-time.c
   0.1%  20.0Ki   0.0%     930    ../Projects/ren-c/src/core/c-signal.c
   0.1%  15.5Ki   0.0%     836    ../Projects/ren-c/extensions/view/mod-view.c
   0.0%     805   0.0%     805    [LOAD #2 [R]]
   0.1%  10.4Ki   0.0%     734    prep/extensions/library/tmp-mod-library-init.c
   0.1%  13.3Ki   0.0%     720    ../Projects/ren-c/extensions/library/library-posix.c
   0.1%  10.3Ki   0.0%     716    prep/extensions/image/tmp-mod-image-init.c
   0.0%     712   0.0%     712    [section .eh_frame]
   0.0%     667   0.0%     667    [section .rodata]
   0.1%  10.3Ki   0.0%     640    prep/extensions/vector/tmp-mod-vector-init.c
   0.0%     628   0.0%     628    [section .text]
   0.1%  10.2Ki   0.0%     591    prep/extensions/time/tmp-mod-time-init.c
   0.1%  10.2Ki   0.0%     589    prep/extensions/serial/tmp-mod-serial-init.c
   0.1%  10.2Ki   0.0%     552    prep/extensions/gif/tmp-mod-gif-init.c
   0.1%  10.2Ki   0.0%     529    prep/extensions/bmp/tmp-mod-bmp-init.c
   0.1%  10.1Ki   0.0%     529    prep/extensions/png/tmp-mod-png-init.c
   0.0%     528   0.0%     528    [section .dynamic]
   0.0%  4.42Ki   0.0%     512    ../Projects/ren-c/extensions/crypt/mbedtls/library/arc4.c
   0.1%  10.1Ki   0.0%     502    prep/extensions/jpg/tmp-mod-jpg-init.c
   0.1%  12.2Ki   0.0%     486    ../Projects/ren-c/src/core/d-test.c
   0.1%  10.1Ki   0.0%     478    prep/extensions/dns/tmp-mod-dns-init.c
   0.1%  10.1Ki   0.0%     476    prep/extensions/uuid/tmp-mod-uuid-init.c
   0.1%  10.1Ki   0.0%     456    prep/extensions/signal/tmp-mod-signal-init.c
   0.1%  11.4Ki   0.0%     426    ../Projects/ren-c/extensions/vector/mod-vector.c
   0.1%  11.4Ki   0.0%     421    ../Projects/ren-c/extensions/image/mod-image.c
   0.0%       0   0.0%     313    [section .bss]
   0.1%  15.5Ki   0.0%     296    ../Projects/ren-c/src/core/d-stats.c
   0.1%  11.3Ki   0.0%     280    ../Projects/ren-c/extensions/uuid/mod-uuid.c
   0.0%     240   0.0%     240    [section .gnu.version_r]
   0.0%  2.44Ki   0.0%     168    ../Projects/ren-c/extensions/crypt/mbedtls/library/platform.c
   0.0%  2.86Ki   0.0%     152    ../Projects/ren-c/extensions/crypt/mbedtls/library/platform_util.c
   0.0%  2.75Ki   0.0%     128    ../Projects/ren-c/extensions/uuid/libuuid/unpack.c
   0.1%  13.8Ki   0.0%     104    ../Projects/ren-c/src/core/d-dump.c
   0.0%  2.41Ki   0.0%      96    ../Projects/ren-c/extensions/uuid/libuuid/pack.c
   0.0%      60   0.0%      60    [section .eh_frame_hdr]
   0.0%      48   0.0%      48    [section .data]
   0.0%      48   0.0%      48    [section .rela.dyn]
   0.0%      36   0.0%      36    [section .note.gnu.build-id]
   0.0%      32   0.0%      32    [section .note.ABI-tag]
   0.0%      32   0.0%      32    [section .note.gnu.property]
   0.0%      28   0.0%      28    [section .interp]
   0.0%      27   0.0%      27    [section .init]
   0.0%       0   0.0%      24    [LOAD #5 [RW]]
   0.0%      16   0.0%      16    [section .plt.got]
   0.0%      13   0.0%      13    [section .fini]
   0.0%       8   0.0%       8    [LOAD #3 [RX]]
   0.0%       8   0.0%       8    [section .fini_array]
   0.0%       8   0.0%       8    [section .init_array]
   0.0%       4   0.0%       4    [LOAD #4 [R]]
   0.0%     324   0.0%       1    ../Projects/ren-c/src/core/d-winstack.c
   0.0%     243   0.0%       0    
   0.0%  9.11Ki   0.0%       0    ../Projects/ren-c/src/core/c-do.c
   0.0%  9.11Ki   0.0%       0    ../Projects/ren-c/src/core/c-value.c
   0.0%  9.11Ki   0.0%       0    ../Projects/ren-c/src/core/d-eval.c
   0.0%  9.11Ki   0.0%       0    ../Projects/ren-c/src/core/d-gc.c
   0.0%  2.50Ki   0.0%       0    [ELF Headers]
   0.0%  4.69Ki   0.0%       0    [Unmapped]
   0.0%      42   0.0%       0    [section .comment]
   0.0%     133   0.0%       0    [section .debug_abbrev]
   0.1%  9.38Ki   0.0%       0    [section .debug_aranges]
   0.6%   119Ki   0.0%       0    [section .debug_loc]
   2.4%   455Ki   0.0%       0    [section .debug_macro]
   0.0%     368   0.0%       0    [section .debug_ranges]
   1.6%   296Ki   0.0%       0    [section .debug_str]
   0.0%     397   0.0%       0    [section .shstrtab]
   0.0%  4.64Ki   0.0%       0    [section .strtab]
   0.1%  9.33Ki   0.0%       0    [section .symtab]
 100.0%  18.2Mi 100.0%  1.90Mi    TOTAL</code></pre>
            <p><small>4 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/executable-size-analysis/1367">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/executable-size-analysis/1367</link>
          <pubDate>Thu, 15 Oct 2020 02:45:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1367</guid>
          <source url="https://forum.rebol.info/t/executable-size-analysis/1367.rss">Executable Size Analysis</source>
        </item>
        <item>
          <title>Testing Generic Tuple and Path Structuring</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>Generic TUPLE! and PATH! are fairly similar.  Both are immutable types, both have to have at least two elements, and neither allow nesting into themselves.  So you can't put a tuple-into-a-tuple or a path-into-a-path.</p>
<p><em>But you can put a tuple in a path...just not vice versa.</em>  So <strong>a.b.c/d.e.f</strong> is a 2-element PATH! containing two 3-element TUPLE!.  While <strong>a/b/c.d/e/f</strong> is a 5-element PATH! whose third element is a TUPLE!.</p>
<p>Writing this is complicated, especially because the scanner is kind of "ad hoc" and has been evolving organically over time.  So I came up with an interesting test dialect.</p>
<h2>Structural Equivalence Testing</h2>
<p>Here are the two examples above shown in the test dialect.  Each line contains a string, an arrow, and then one or more <em>isomorphic structures</em>, where PATH! is replaced with BLOCK! and TUPLE! is replaced with GROUP!:</p>
<pre><code>"a.b.c/d.e.f"  -&gt;  [(a b c) (d e f)]
"a/b/c.d/e/f"  -&gt;  [a b (c d) e f]
</code></pre>
<p>So then what the test does is LOAD the string, and transform its paths and tuples into the blocks and groups on the right of the arrow.</p>
<p>Because actual BLOCK! and GROUP!s are legal in tuples and paths, the transformation turns them into ^block and ^group in the tests that use them:</p>
<pre><code>"[a].(b)"  -&gt;  (^[a] ^(b))
</code></pre>
<p>Whitespace testing is important, to make sure it reacts correctly...which means you can get more than one value on the right:</p>
<pre><code>"(a b)/c"  -&gt;  [^(a b) c]
"(a b) /c"  -&gt;  ^(a b)  [_ c]
</code></pre>
<p>I decided it was a nice use of the NEW-LINE? to detect when a new test started.  I still don't know exactly where on balance in dialecting it's good or bad to use line breaks, but it would be much noisier if each test had to be in a BLOCK! or if there had to be some explicit <code>&lt;new-test&gt;</code> tag.</p>
<p>I found that on a page full of tests, two spaces between things helped... and also, the ability to group a few similar tests together and then skip a line before another group of tests:</p>
<pre><code>"."  -&gt;  (_ _)
".."  -&gt;  (_ _ _)
"..."  -&gt;  (_ _ _ _)

"/a"  -&gt;  [_ a] 
"//a"  -&gt;  [_ _ a]
"a/"  -&gt;  [a _]
"a//"  -&gt;  [a _ _]
"/a/"  -&gt;  [_ a _]
"//a//"  -&gt;  [_ _ a _ _]
</code></pre>
<p>Anyway, the generic tuple commit is all still a work in progress...but hopefully I'll be able to get it hammered together soon.  Some pretty fancy cases are working!</p>
<pre><code>"a.1.(x)/[a b c]/&lt;d&gt;.2"  -&gt;  [(a 1 ^(x)) ^[a b c] (&lt;d&gt; 2)]

"/./(a b)/./"  -&gt;  [_ (_ _) ^(a b) (_ _) _]
</code></pre>
<p><strong>But equally important to what kinds of wild paths and tuples you might create if you wanted, is the fact that mysteriously <em>evil</em> paths and tuples won't be able to exist.</strong>  So don't fear the power... get ready to enjoy the <em>coherence</em>.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353</link>
          <pubDate>Thu, 01 Oct 2020 07:30:53 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1353</guid>
          <source url="https://forum.rebol.info/t/testing-generic-tuple-and-path-structuring/1353.rss">Testing Generic Tuple and Path Structuring</source>
        </item>
        <item>
          <title>About the Testing category</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>Discussion of Tests, Testing Methodology and Continuous Integration (e.g. Travis-CI).</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/about-the-testing-category/1351">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/about-the-testing-category/1351</link>
          <pubDate>Tue, 29 Sep 2020 20:03:57 +0000</pubDate>
          <discourse:topicPinned>Yes</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-1351</guid>
          <source url="https://forum.rebol.info/t/about-the-testing-category/1351.rss">About the Testing category</source>
        </item>
        <item>
          <title>Criteria for stable r3/ren-c releases</title>
          <dc:creator><![CDATA[gchiu]]></dc:creator>
          <category>Testing</category>
          <description><![CDATA[
            <p>At present we have continuous builds of ren-c as commits made which makes choosing a stable release difficult.</p>
<p>I'm suggesting we choose a core set of commonly used programs/utilities and test them against the new builds.  If they all pass, then the new build becomes the candidate for the new stable release.  If the tools fail, then they need to be amended until they work again before we decide on the new stable release.  If they can't be fixed, then we decide whether we can still use that tool.</p>
<p>For the first suggestion,  I am suggesting that we chose existing module code as the corpus of code that we test against.</p>
<p><a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> Does that suit you since you're the author of the most used modules!</p>
            <p><small>14 posts - 4 participants</small></p>
            <p><a href="https://forum.rebol.info/t/criteria-for-stable-r3-ren-c-releases/189">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/criteria-for-stable-r3-ren-c-releases/189</link>
          <pubDate>Thu, 06 Jul 2017 05:01:32 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-189</guid>
          <source url="https://forum.rebol.info/t/criteria-for-stable-r3-ren-c-releases/189.rss">Criteria for stable r3/ren-c releases</source>
        </item>
  </channel>
</rss>
