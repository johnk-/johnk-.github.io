<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:discourse="http://www.discourse.org/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Usage - AltRebol</title>
    <link>https://forum.rebol.info/c/usage/7</link>
    <description>Topics in the &#39;Usage&#39; category Questions and discussion about using Rebol.</description>
    
      <lastBuildDate>Thu, 19 Dec 2024 01:12:09 +0000</lastBuildDate>
      <atom:link href="https://forum.rebol.info/c/usage/7.rss" rel="self" type="application/rss+xml" />
        <item>
          <title>The Grand Leading-Slash &quot;Safety, or Burden?&quot; Question</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <p>Overall, I have been tremendously happy with how the ideas of the <strong><a href="https://forum.rebol.info/t/big-alien-proposal-word-runs-functions/1905">Big Alien Proposal</a></strong> have worked out.</p>
<p>That started from the concept that when slashes appear, they either come <em>before</em> a function they run, or <em>after</em> a function they suppress execution for.</p>
<pre><code>foo.bar
; ^-- foo is an entity from which BAR is being selected.  BAR is not
; allowed to be an antiform frame, so this syntax cannot invoke a
; function call (though it can invoke an 'accessor', e.g. a "getter"
; which is 0-arity).

foo/bar
; ^-- foo is an entity from which BAR (an a FRAME! or antiform FRAME!)
; is being selected and then invoked.  This will generate an error if
; bar is not a frame or antiform frame.

foo.bar/
; ^-- bar is a field which is an antiform FRAME!, whose execution is
; being suppressed.  This expression will return an antiform frame, or
; an error if not an antiform frame.

foo
; ^-- conventional WORD! reference, will run an antiform frame as an
; action invocation or fetch other values as-is

/foo
; ^-- invocation reference, will run an antiform frame (or plain frame)
; as an action invocation and give errors on other types

foo/
; ^-- action suppression, will give you back an antiform frame as-is
; and error on other types.
</code></pre>
<p><em>(If you're curious about why <strong><code>/foo</code></strong> will run plain FRAME! as well as antiform, while <strong><code>foo/</code></strong> will not return an antiform frame for plain FRAME!, this is based on the idea that it's better to be conservative when fetching values so that you won't get surprised by getting a plain frame back from <strong><code>foo/</code>~</strong> which gives everything back as-is.)</em></p>
<hr>
<p>I've written elsewhere <a href="https://forum.rebol.info/t/trailing-slash-is-a-winner-for-defused-actions/2327">how pleased I am that the way you suppress a function's execution is by throwing up a "barrier"</a> with a separating slash that makes it clear arguments are not being gathered at the callsite.  That's really slick.</p>
<p>For this idea to work, something else had to be used for refinements.  That meant <a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226">invention of the CHAIN! datatype</a> has opened a lot of interesting doors, and I find it's quite learnable to see things like <strong><code>trim:auto:tail</code></strong> instead of <strong><code>trim/auto/tail</code></strong>.</p>
<p><em>I actually prefer it!</em>  What some might think of a disadvantage of being "less noticeable" turns into an advantage... <strong><code>trim:auto</code></strong> really could have been a function called <strong><code>trim-auto</code></strong> just as easily.  Why would you want a slash to make the fact that it has a refinement "pop"?  The slashes to make function calls or suppression pop are much better applied.</p>
<p><strong>So that's all good. <img src="https://forum.rebol.info/images/emoji/twitter/smile_cat.png?v=12" title=":smile_cat:" class="emoji" alt=":smile_cat:" loading="lazy" width="20" height="20"> No regrets!</strong></p>
<h2><a name="p-7975-but-leading-slash-for-functions-rule-hasnt-100-geld-1" class="anchor" href="https://forum.rebol.info#p-7975-but-leading-slash-for-functions-rule-hasnt-100-geld-1"></a>But... Leading-Slash For Functions Rule Hasn't 100% Gel'd</h2>
<p>Another part of the proposal was that in order to get tighter control on what was a function or not, you would be required to assign functions using a leading-slash kind of SET-WORD!.</p>
<pre><code>&gt;&gt; foo: func [a b] [return a + b]
** Error: FOO: can't be used to assign antiform FRAME!, use /FOO:

&gt;&gt; /foo: func [a b] [return a + b]
== ~#[frame! "foo" [a b]]]~  ; anti
</code></pre>
<p><strong>It hasn't fully settled with me after working with it for some time.</strong></p>
<p>As I mentioned above, colons for refinements was easy to adapt to...and now that I'm adapted, I prefer it.</p>
<p>But I'm still typing <strong><code>test: cascade [add/ even?/]</code></strong>.  I love the trailing slashes (and this will be even better when the whole cascade can be done with just <strong><code>even?/add/</code></strong>).  But I'm kind of cursing under my breath the thought of having typed <strong><code>test:</code></strong> and having to backspace over it so it says <strong><code>/test:</code></strong>.  And then I go "hrmph."</p>
<p>When I'm reading code, I probably appreciate it more than I find it to be "messy".  It gives you a better compass.  The eye can scan and comprehend much better... it's of particular value when you're not using an obvious function generator like FUNC, but something else.  This cues readers to go "oh, I guess that's a function generator".</p>
<p>Yet still... it's a burden in a way the other changes are not.  It's the only change that increases the character count.</p>
<h2><a name="p-7975-whats-at-stake-by-not-enforcing-this-2" class="anchor" href="https://forum.rebol.info#p-7975-whats-at-stake-by-not-enforcing-this-2"></a>What's At Stake By Not Enforcing This?</h2>
<p>Ren-C has a powerful story about how antiforms can't be put in blocks, which means you can write this kind of code and it "just works":</p>
<pre><code>block2: collect [
    for-each 'item block1 [keep item]
]

assert [equal? block1 block2]
</code></pre>
<p>When you compare it to Rebol2/R3-Alpha/Red, it's one of those vastly superior situations.  You aren't getting tricked into receiving an ITEM in the FOR-EACH that would generate an unset variable error, or conflate with the state that gets returned when an item can't be picked from a block, or accidentally run a function.  It's a solid solution.</p>
<p>But that's only for blocks.  What about other places, like objects?</p>
<p>If we don't put barriers on how action antiforms get assigned to variables, we get the problem all over again:</p>
<pre><code>for-each [key value] obj [
    if integer? value [  ; oops, what if VALUE is an action antiform!
        print "Found an integer"
    ]
]
</code></pre>
<p>There's no way in this case to say "variables can't hold antiforms".  Logic is an antiform.  Words holding antiform frames are actions.</p>
<p>Getting this under control with slashes is the kind of thing I've been trying to do for a long time, I've just never had the syntax.  Leading slashes felt like it could be the key:</p>
<pre><code>for-each [key value] obj [...]  ; value can't be frame antiform

for-each [key /value] obj [...]  ; value must be frame antiform

for-each [key ~/value] obj [...]  ; value may be frame antiform
</code></pre>
<p>But if these rules are applied everywhere, what you have to do gets more complex:</p>
<pre><code>set $x does [print "Is this an error?"]

set $/x does [print "Do you have to do this?"]

&gt;&gt; var: $x
== x  ; bound

set var does [print "If this errors, how to make VAR into bound /x?"]

set:active var does [print "Do you use refinements?"] (or just SET:ANY ?)
</code></pre>
<p>Nothing is free.  And the already more complicated world where <strong><code>x:</code></strong> is a CHAIN! instead of a fundamental different type of word has its own issues, that these all pile on top of.</p>
<h2><a name="p-7975-theres-likely-not-enough-value-in-optional-slash-3" class="anchor" href="https://forum.rebol.info#p-7975-theres-likely-not-enough-value-in-optional-slash-3"></a>There's Likely Not Enough Value In Optional Slash</h2>
<p>If <strong><code>/foo: func [...] [...]</code></strong> will enforce that the thing you're assigning is an antiform action, but <strong><code>foo: func [...] [...]</code></strong> still works... I have a feeling that the complexity it takes to offer the feature doesn't give a sufficient payoff to be worth it.</p>
<p>You have everyone paying the tax of dealing with complicated path structures and bookkeeping--vs. being able to just SET and GET words and tuples at will... and then you're not even giving any additional guarantees in the source.</p>
<p>This makes me feel like it really is an all-in or not-at-all situation.</p>
<h2><a name="p-7975-long-story-short-im-still-weighing-it-4" class="anchor" href="https://forum.rebol.info#p-7975-long-story-short-im-still-weighing-it-4"></a>Long Story Short: I'm Still Weighing It</h2>
<p>I'm not ready to make a verdict.</p>
<p>The techniques for working with these new CHAIN! and PATH! situations are still being learned.  Most of my hesitance isn't from the looks or typing an extra character, but from frustrations in that...and maybe that frustration will lessen as I work on it more.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/the-grand-leading-slash-safety-or-burden-question/2352">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/the-grand-leading-slash-safety-or-burden-question/2352</link>
          <pubDate>Thu, 19 Dec 2024 01:12:09 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2352</guid>
          <source url="https://forum.rebol.info/t/the-grand-leading-slash-safety-or-burden-question/2352.rss">The Grand Leading-Slash &quot;Safety, or Burden?&quot; Question</source>
        </item>
        <item>
          <title>Trailing Slash Is A Winner For Defused Actions</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Show &amp; Tell</category>
          <description><![CDATA[
            <p>I <em>really</em> like this trailing slash thing, meaning "get me the action as is and don't run it AND guarantee it's an action".</p>
<pre><code>&gt;&gt; replace [a 1 a &lt;baby&gt;] word?/ &lt;ice&gt;
== [&lt;ice&gt; 1 &lt;ice&gt; &lt;baby&gt;]
</code></pre>
<p>That's to me just about perfect:</p>
<ul>
<li>
<p>You're passing the parameter of what to replace as being an antiform action, so it will be called on the elements.</p>
</li>
<li>
<p>It does NOT take a parameter (notice the slash dividing it from what comes after it?  that's a strong semiotic hint that <code>&lt;ice&gt;</code> is not a parameter to <code>word?</code>)</p>
</li>
<li>
<p>...and it's an antiform, so you know it doesn't occur literally in the block.</p>
</li>
</ul>
<p>Before this form existed, I was using MATCHES which made an antiform action for a datatype:</p>
<pre><code>&gt;&gt; replace [a 1 a &lt;baby&gt;] matches word! &lt;ice&gt;
== [&lt;ice&gt; 1 &lt;ice&gt; &lt;baby&gt;]
</code></pre>
<p>That's slower, wordier, and more opaque about the mechanics.</p>
<p>It's useful if you have a datatype in your hand and need to convert it to a function, or if you have a more complex type construction:</p>
<pre><code>&gt;&gt; replace [a 1 a &lt;baby&gt;] matches [word! integer!] &lt;ice&gt;
== [&lt;ice&gt; &lt;ice&gt; &lt;ice&gt; &lt;baby&gt;]
</code></pre>
<p>Maybe it should be called MATCHER, since it's actually a function generator.  MATCHES looks a little too much like MATCH, so it seems like it might take <code>&lt;ice&gt;</code> as an argument.  <img src="https://forum.rebol.info/images/emoji/twitter/frowning.png?v=12" title=":frowning:" class="emoji" alt=":frowning:" loading="lazy" width="20" height="20"></p>
<p>If you make such a call often, you wouldn't want to regenerate the function each time:</p>
<pre><code>&gt;&gt; word-or-int?: matcher [word! integer!]

&gt;&gt; replace [a 1 a &lt;baby&gt;] word-or-int?/ &lt;ice&gt;
== [&lt;ice&gt; &lt;ice&gt; &lt;ice&gt; &lt;baby&gt;]
</code></pre>
<p>MATCHES would seems like it's providing an answer in the moment, whereas MATCHER works better for when you're not using immediately.  So it's probably the better choice.</p>
<p>Anyway, I'll also say that the <a href="https://forum.rebol.info/t/make-replace-all-default-semantics-of-replace/2269">REPLACE "ALL" semantic being the default</a> is a big improvement.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/trailing-slash-is-a-winner-for-defused-actions/2327">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/trailing-slash-is-a-winner-for-defused-actions/2327</link>
          <pubDate>Fri, 08 Nov 2024 19:05:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2327</guid>
          <source url="https://forum.rebol.info/t/trailing-slash-is-a-winner-for-defused-actions/2327.rss">Trailing Slash Is A Winner For Defused Actions</source>
        </item>
        <item>
          <title>What To Do About Horrible, Grievous, Unicode</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <p>At some point <a href="https://github.com/red/red/blob/master/tests/source/units/series-test.red#L1413C2-L1417C39">I picked up a test from Red</a>, which is basically this:</p>
<pre><code>str: " ^(A0) ^-a b  ^- c  ^(2000) "
assert ["a b  ^- c" = trim copy str]
</code></pre>
<p>That's some funny business.</p>
<ul>
<li>
<p>The hex character ^(a0) is decimal 160, which is the standard Unicode translation for <code>&amp;nbsp;</code>... non-breaking space.</p>
</li>
<li>
<p>The hex character ^(2000) is "EN QUAD".. <a href="https://en.wikipedia.org/wiki/Quad_(typography)">a space that is one <em>en</em> wide: half the width of an em quad.</a></p>
</li>
</ul>
<p>R3-Alpha (and Ren-C) never had support for trimming these characters out.  So the test fails.</p>
<p>But it wound up flying under the radar, somehow.</p>
<p><em>(I think I didn't actually pick up the file it was in to the tests until some time after adding it.  And by the time I added it, a lot of things were breaking due to binding and I was putting off fixing everything until it was time.  Now it's that time--I'm going item by item reviewing breakages and getting the tests in order.)</em></p>
<p>But when I got to this one, the log just said:</p>
<pre><code>(   
    str: "   ^-a b  ^- c    "
    "a b  ^- c" = trim copy str
) "failed, test returned null"
</code></pre>
<p>Because I didn't go look up the test (I thought I had it right there)...I didn't realize there was funny business because the display doesn't give you any indication.  Neither does Red's after the transcode:</p>
<pre><code>red&gt;&gt; " ^(A0) ^-a b  ^- c  ^(2000) "
== "   ^-a b  ^- c    "
</code></pre>
<p>Even pasting it into VS Code (which I didn't, until just now) gives you <em>terribly weak</em> feedback that something weird is going on:</p>
<p><img src="https://forum.rebol.info/uploads/default/original/1X/fcb694d9fa08aa3be6b625b1529de82cf9e2ecef.png" alt="image" data-base62-sha1="A3Bv5No7U3eVyTqLu28KCsYccXl" width="393" height="59"></p>
<p>Gee.  Glad I had "show invisibles" turned on--that <em>really</em> did a lot for me there.  <img src="https://forum.rebol.info/images/emoji/twitter/roll_eyes.png?v=12" title=":roll_eyes:" class="emoji" alt=":roll_eyes:" loading="lazy" width="20" height="20"></p>
<p><em>(Seriously, what is the point of that feature if that's what it's going to do?)</em></p>
<h2><a name="p-7679-i-dont-want-this-stuff-in-source-files-1" class="anchor" href="https://forum.rebol.info#p-7679-i-dont-want-this-stuff-in-source-files-1"></a>I Don't Want This Stuff In Source Files</h2>
<p>We can't fix the world.  They're doing what they are doing.  This stuff is the currency of text and you have to support it.</p>
<p>But we can set house rules.  The default mode for Ren-C should only allow two invisible characters in source: space and newline.  (And I'd like there to not be space at the end of lines.)  This would be a hard rule for any script in official repositories.</p>
<p>I'd have saved myself an hour of confused digging if there'd been an error when I pasted in the console, telling me I was dealing with a messed-up situation.  There'd have to be some conscious shift into a mode to tolerate it... temporarily as some kind of way to import a string into the system.</p>
<h2><a name="p-7679-not-ready-to-support-this-test-2" class="anchor" href="https://forum.rebol.info#p-7679-not-ready-to-support-this-test-2"></a>Not Ready To Support This Test</h2>
<p>There's a <a href="https://forum.rebol.info/t/roaring-bitset-s/1327">sparse bitset implementation</a> that has been on the shelf, but that's needed before we create unicode charsets for high codepoints.</p>
<p>Anyway, there are higher priorities.  But I definitely do feel like there should be some alarms going off when you are reading files with disruptive codepoints.  You should have to say "Yes, I want ugly codepoints" or "Yes, I want emoji".</p>
<p>A totally permissive TO TEXT! operator shouldn't be what people are reaching for.  You should have to be explicit.  <strong><code>(decode [@utf-8, whitespace: all, emoji: all] blob)</code></strong>.  Principle of least privilege... conservative defaults.</p>
<p>The names for the specializations should help guide behavior.  <strong><code>(decode @utf8-unchecked blob)</code></strong>.  (Unnatural?)</p>
<ul>
<li>"What does that mean, unchecked (looks up documentation)"</li>
<li>"Oh, I have an option to have it screen out weird whitespace?  Wow!  Great! "</li>
</ul>
<p>Something like <strong><code>utf8-basic</code></strong> would make conservative choices--the same ones used by default for source code.</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/what-to-do-about-horrible-grievous-unicode/2280">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/what-to-do-about-horrible-grievous-unicode/2280</link>
          <pubDate>Sun, 15 Sep 2024 13:38:04 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2280</guid>
          <source url="https://forum.rebol.info/t/what-to-do-about-horrible-grievous-unicode/2280.rss">What To Do About Horrible, Grievous, Unicode</source>
        </item>
        <item>
          <title>TRIPWIRE in The Wild</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Show &amp; Tell</category>
          <description><![CDATA[
            <p>If you access an unset variable, you don't get a lot of information back:</p>
<pre><code>&gt;&gt; state: ~

&gt;&gt; state
** Script Error: state is ~ antiform
** See ^(...) and GET/ANY
</code></pre>
<p>But with <strong><a href="https://forum.rebol.info/t/antiform-tag-as-triggers-an-error-on-access-type/2170">antiform tags</a></strong>, you can embed a message into the unset variable:</p>
<pre><code>&gt;&gt; state: ~&lt;INITIALIZE-STATE hasn't been called yet&gt;~

&gt;&gt; state
** Script Error: state is ~&lt;INITIALIZE-STATE hasn't been called yet&gt;~ antiform
** See ^(...) and GET/ANY
</code></pre>
<p>This new concept is called a <strong>TRIPWIRE</strong>.</p>
<p>DEFAULT reacts to it, considering the variable to be "vacant"</p>
<pre><code>&gt;&gt; vacancy? get/any $state
== ~okay~  ; anti

&gt;&gt; state: default [10 + 20]
== 30

&gt;&gt; state
== 30
</code></pre>
<h2>
<a name="can-be-better-than-a-meandering-comment-1" class="anchor" href="https://forum.rebol.info#can-be-better-than-a-meandering-comment-1"></a>Can Be Better Than A Meandering Comment!</h2>
<p>A comment won't direct people to the relevant issue at runtime.  But a well-chosen tripwire can.</p>
<p>Compare:</p>
<pre><code>; !!! UPARSE is not available in SYS because it is higher level.  We hack it
; up so that when %uparse.r runs it pokes itself into sys.util/parse
;
parse: ~
</code></pre>
<p>With:</p>
<pre><code>parse: ~&lt;higher-level %uparse.r hasn't set SYS.UTIL/PARSE yet&gt;~
</code></pre>
<p>Much better!  Gives you the information you need, when you need it!</p>
<p><em>(Note: I was inspired to this concept by a style of usage <a class="mention" href="https://forum.rebol.info/u/rgchris">@rgchris</a> had in his scripts, using TAG!s to provide guidance for what was supposed to be filled into certain slots.  I just wanted to give that some teeth, to know that the variable was conceptually unset.)</em></p>
            <p><small>3 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/tripwire-in-the-wild/2278">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/tripwire-in-the-wild/2278</link>
          <pubDate>Sun, 15 Sep 2024 07:46:39 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2278</guid>
          <source url="https://forum.rebol.info/t/tripwire-in-the-wild/2278.rss">TRIPWIRE in The Wild</source>
        </item>
        <item>
          <title>Quasiforms Aren&#39;t Super Friendly (and they shouldn&#39;t be)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <p>The original intent of quasiforms was that they were a bit "bad".</p>
<p>Things like <strong><code>~null~</code></strong> were actually originally called BAD-WORD!s.  (I kind of miss that slightly amusing term.)</p>
<p>So indeed, an aspect of the term "quasi" was that the squiggles would make you <em>uncomfortable</em>... perhaps a bit <em>queasy</em>... <img src="https://forum.rebol.info/images/emoji/twitter/nauseated_face.png?v=12" title=":nauseated_face:" class="emoji" alt=":nauseated_face:" loading="lazy" width="20" height="20"> ...and they would call attention to themselves.</p>
<h2>
<a name="they-are-disruptive-by-design-1" class="anchor" href="https://forum.rebol.info#they-are-disruptive-by-design-1"></a>They Are Disruptive By Design</h2>
<p>Consider code like this:</p>
<pre><code>&gt;&gt; stuff: [[a b] ~[c d]~ (e f)]

&gt;&gt; list: second stuff

&gt;&gt; for-each item list [probe item]
** Script Error: for-each expects
     [~void~ blank! any-series? any-context? map! any-sequence? action?]
   for its data argument
</code></pre>
<p>It's not super typical to want to enumerate quasiform lists.  But it does come up...and when it does, it may <em>seem</em> kind of annoying that you have to say things like <strong><code>for-each item unquasi list</code></strong></p>
<h2>
<a name="its-for-the-best-2" class="anchor" href="https://forum.rebol.info#its-for-the-best-2"></a>It's For The Best</h2>
<p>We <em>want</em> code that isn't specifically written to expect quasiforms to trip up on them, <strong>because the odds are pretty good that they are proxies for antiform intent</strong>.</p>
<p>And I'd really discourage usage of quasiforms anywhere that they're not being used for something intended to be fundamentally disruptive.  As I wrote in describing <strong><a href="https://forum.rebol.info/t/synthetic-asymmetric-delimiters/1893">Synthetic Asymmetric Delimiters</a></strong>, you have other choices.</p>
<p>Don't pick quasiforms in your dialect just because "they look cool".  Pick them <em>because you want to create a speedbump.</em></p>
<p>So the number of things you can do with quasiforms will remain intentionally limited.  Expect errors when you pass them to anything that's not strictly structural (like APPEND, FIND, etc.)</p>
<pre><code>&gt;&gt; to word! 'null
== null

&gt;&gt; to word! '~null~
** Script Error: expected &amp;[word] not &amp;[quasiform]

&gt;&gt; unquasi '~null~
== null
</code></pre>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/quasiforms-arent-super-friendly-and-they-shouldnt-be/2273">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/quasiforms-arent-super-friendly-and-they-shouldnt-be/2273</link>
          <pubDate>Fri, 13 Sep 2024 02:47:50 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2273</guid>
          <source url="https://forum.rebol.info/t/quasiforms-arent-super-friendly-and-they-shouldnt-be/2273.rss">Quasiforms Aren&#39;t Super Friendly (and they shouldn&#39;t be)</source>
        </item>
        <item>
          <title>Quick and Dirty FLOW Example</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Show &amp; Tell</category>
          <description><![CDATA[
            <p>At one point I proposed something along the lines of:</p>
<pre><code>&gt;&gt; flow [
       [1 2 3]
       reverse _
       map-each x _ [x * 10]
   ]
== [30 20 10]
</code></pre>
<h2>
<a name="seems-neat-how-hard-is-it-to-do-1" class="anchor" href="https://forum.rebol.info#seems-neat-how-hard-is-it-to-do-1"></a>Seems Neat.  How Hard Is It To Do?</h2>
<p>Well, let's just be simple-minded to start.</p>
<p><em>(and let's use the up-and-coming notation, just to start getting used to it...as well as my proposed change to <a href="https://forum.rebol.info/t/make-replace-all-default-semantics-of-replace/2269/">REPLACE to mean REPLACE/ALL by default</a>...)</em></p>
<pre><code>flow: func [
    block [block!]
    :placeholder [element?]
    &lt;local&gt; flow-result
][
    placeholder: default [_]
    block: copy block
    replace block placeholder $flow-result
    while [not tail? block] [
         insert block $flow-result:
         [block flow-result]: evaluate:next block
    ]
    return flow-result
]
</code></pre>
<h2>
<a name="and-on-this-example-it-works-2" class="anchor" href="https://forum.rebol.info#and-on-this-example-it-works-2"></a>And On This Example, It Works!</h2>
<p>Not with the new notation quite yet, but with the slash-as-refinement notation.  Some notes:</p>
<ul>
<li>
<p><strong>element?</strong> means any non-antiform</p>
</li>
<li>
<p><strong>$flow-result</strong> evaluates to the plain word of <strong>flow-result</strong>, but carrying a binding from the current context (in this case, so that the code in the user supplied block can see the local variable in FLOW's frame)</p>
</li>
</ul>
<h2>
<a name="but-how-does-it-work-3" class="anchor" href="https://forum.rebol.info#but-how-does-it-work-3"></a>But <em>How</em> Does It Work?</h2>
<p>It simply creates a variable FLOW-RESULT, and then splices it into a copy of the block:</p>
<pre><code>flow [
    [1 2 3]
    reverse _
    map-each x _ [x * 10]
]
=&gt;
[
   flow-result: [1 2 3]
   flow-result: reverse flow-result
   flow-result: map-each x flow-result [x * 10]
]
</code></pre>
<p>But it can't do it ahead of time, because it doesn't know the span of the expressions until it executes them.  So it goes one step at a time, inserting the SET-WORD! after each step</p>
<pre><code>[
   flow-result: [1 2 3]  ; &lt;-- gets to here
   reverse flow-result
   map-each x flow-result [x * 10]
]
...
[
   flow-result: [1 2 3]
   flow-result: reverse flow-result  ; &lt;-- gets to here
   map-each x flow-result [x * 10]
]
...
[
   flow-result: [1 2 3]
   flow-result: reverse flow-result
   flow-result: map-each x flow-result [x * 10]  ; finished
]
</code></pre>
<h2>
<a name="very-simple-but-useful-right-off-the-bat-4" class="anchor" href="https://forum.rebol.info#very-simple-but-useful-right-off-the-bat-4"></a>Very Simple, But Useful Right Off The Bat</h2>
<p>I don't know what all design the correct FLOW would need.  It would need to do its replacements deeply (we don't have REPLACE/DEEP, so you'd have to use PARSE or something).</p>
<p>And I don't know what features it should have.  But... pretty cool to see this kind of thing be so natural to do.</p>
<p><a href="https://www.youtube.com/watch?v=nlQBYZClWXs">Dimension 5 - Flow</a></p>

            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/quick-and-dirty-flow-example/2270">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/quick-and-dirty-flow-example/2270</link>
          <pubDate>Wed, 11 Sep 2024 13:47:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2270</guid>
          <source url="https://forum.rebol.info/t/quick-and-dirty-flow-example/2270.rss">Quick and Dirty FLOW Example</source>
        </item>
        <item>
          <title>Parallel FOR Example</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Show &amp; Tell</category>
          <description><![CDATA[
            <p>One goal of Ren-C since the start has been to make sure people can write their own looping constructs that behave like the built-in loops.  (That's why <a href="https://forum.rebol.info/t/what-are-definitional-returns/2191">definitional return</a> was so important, which paved the way for many other improvements to come.)</p>
<p>One loop construct requested by <a class="mention" href="https://forum.rebol.info/u/gchiu">@gchiu</a> was the ability to walk through blocks in parallel.  It's in the tests, but I thought I'd share it here:</p>
<pre><code>for-parallel: function [
    return: [any-atom?]
    vars [block!]
    blk1 [~void~ any-list?]
    blk2 [~void~ any-list?]
    body [block!]
][
    return while [(not empty? maybe blk1) or (not empty? maybe blk2)] [
        (vars): pack [(first maybe blk1) (first maybe blk2)]

        repeat 1 body else [  ; if pure NULL it was a BREAK
            return null
        ]

        ; They either did a CONTINUE the REPEAT caught, or the body reached
        ; the end.  ELIDE the increment, so body evaluation is WHILE's result.
        ;
        elide blk1: next maybe blk1
        elide blk2: next maybe blk2
    ]
]
</code></pre>
<p>You get this behavior:</p>
<pre><code>&gt;&gt; collect [
       assert [
           20 = for-parallel [x y] [a b] [1 2] [
               keep :[x y]
               y * 10
           ]
       ]
   ]
== [[a 1] [b 2]]
</code></pre>
<p>There's a lot of nice little flourishes here.  BREAK and CONTINUE work, thanks to the <a href="https://forum.rebol.info/t/the-simple-yet-powerful-magic-of-the-loop-result-protocol/609">loop result protocol</a>.  Assigning the variables is handled elegantly by multi-return, where a SET-GROUP! retriggers as a SET-BLOCK!.  ELIDE is put to good use to avoid a temporary variable for the loop product.</p>
<p><em><strong>"Isn't it nice... when things just... work?"</strong></em></p>
<p><a href="https://www.youtube.com/watch?v=Z57kGB-mI54">Honda - The Cog</a></p>

            <p><small>3 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/parallel-for-example/2261">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/parallel-for-example/2261</link>
          <pubDate>Mon, 09 Sep 2024 01:03:12 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2261</guid>
          <source url="https://forum.rebol.info/t/parallel-for-example/2261.rss">Parallel FOR Example</source>
        </item>
        <item>
          <title>VOID &amp; Definitional Error with SET and SET-GROUP!</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Show &amp; Tell</category>
          <description><![CDATA[
            <p>I'm doing some refactoring to bring more consistency between the behavior of SET of a group and a SET-XXX!:</p>
<pre><code>set var expression

; vs.

(var): expression

; vs.

eval compose [(var): expression]
</code></pre>
<p>Ideally these should be interchangeable and have the same properties.</p>
<h2>
<a name="raised-error-propagation-1" class="anchor" href="https://forum.rebol.info#raised-error-propagation-1"></a>Raised Error Propagation</h2>
<p>One of those interesting properties is that definitional errors will skip the assignment and propagate one step, vs be promoted to abrupt failure at the moment you try to SET.  This allows you to write things like:</p>
<pre><code>&gt;&gt; item: &lt;whatever&gt;
&gt;&gt; block: []

&gt;&gt; error: trap [item: take block]
== make error! [
    type: 'Script
    id: 'nothing-to-take
    message: "Can't TAKE, no value available (consider TRY TAKE)"
    near: '[item: take block **]
    where: '[take entrap trap enrescue console]
    file: ~null~
    line: 1
]

&gt;&gt; item
== &lt;whatever&gt;
</code></pre>
<p>This has turned out to be quite useful, because without it you'd basically not be able to use TRAP with assignments.  The only way to deal with them would be EXCEPT:</p>
<pre><code>var: (...) except e -&gt; [...]
</code></pre>
<p>And that's not always what you want--it could be putting the exception logic in an awkward position, and it also often makes you parenthesize complex expressions on the left of the except.</p>
<h2>
<a name="another-cool-feature-opting-out-2" class="anchor" href="https://forum.rebol.info#another-cool-feature-opting-out-2"></a>Another Cool Feature... Opting Out</h2>
<p>I've actually had cases where this is useful!  Let's say you have a variable that's sometimes null, but something you want to set:</p>
<pre><code>var: case [
    condition1 [$word1]
    condition1 [$word2]
]  ; if none of the cases match, CASE returns null
</code></pre>
<p>Okay, now let's say you want to call SOME-FUNCTION with an expression, and if VAR is not null you want to assign the expression to var too.</p>
<p>Like this:</p>
<pre><code> if var [
     some-function (var): expression
 ] else [
     some-function expression
 ]
</code></pre>
<p>You could factor that out a bit:</p>
<pre><code> some-function if var [
     (var): expression
 ] else [
     expression
 ]
</code></pre>
<p>If your expression is complex you'd probably wind up needing to factor it out vs. repeating it:</p>
<pre><code> let e: expression
 some-function either var [(var): e] else [e]
</code></pre>
<p><strong>BUT SET-GROUP! of a VOID variable will just propagate the value out!</strong></p>
<pre><code>some-function (maybe var): expression
</code></pre>
<p>Cool, huh?  Anyway, I'm making sure these things work the same with SET the native.</p>
<pre><code>some-function set maybe var expression
</code></pre>
<h2>
<a name="you-cant-do-that-with-compose-though-3" class="anchor" href="https://forum.rebol.info#you-cant-do-that-with-compose-though-3"></a>You Can't Do That With COMPOSE, Though</h2>
<pre><code>eval compose [some-function (maybe var): expression]
</code></pre>
<p>It could perhaps be argued that would produce either of:</p>
<pre><code>some-function []: expression
some-function (): expression
</code></pre>
<p>Which we might envision working the same way.  But I think if you want that, you need to ask for it.</p>
<pre><code>eval compose [some-function (any [var []]): expression]
</code></pre>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/void-definitional-error-with-set-and-set-group/2258">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/void-definitional-error-with-set-and-set-group/2258</link>
          <pubDate>Sat, 07 Sep 2024 09:15:55 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2258</guid>
          <source url="https://forum.rebol.info/t/void-definitional-error-with-set-and-set-group/2258.rss">VOID &amp; Definitional Error with SET and SET-GROUP!</source>
        </item>
        <item>
          <title>Nice Blank Moment While Killing GET-PATH!/SET-PATH!</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Show &amp; Tell</category>
          <description><![CDATA[
            <p>I'm busily killing off all the stray SET-PATH! and GET-PATH! that exist... <em>(because <a href="https://forum.rebol.info/t/introducingnew-chain-datatype/2226">CHAIN! is going to be underneath PATH!</a>, you won't be able to put a path in a chain such that you would describe the path as being set or gotten... the colon can't be "applied to" the path)</em>.</p>
<p>I came across the pleasing SIGIL! test:</p>
<pre><code>for-each [sigil items] [
    ~null~  [  word    tu.p.le    pa/th    [bl o ck]    (gr o up)  ]
    ::      [  word:   tu.p.le:   pa/th:   [bl o ck]:   (gr o up): ]
    :       [ :word   :tu.p.le   :pa/th   :[bl o ck]   :(gr o up)  ]
    ^       [ ^word   ^tu.p.le   ^pa/th   ^[bl o ck]   ^(gr o up)  ]
    &amp;       [ &amp;word   &amp;tu.p.le   &amp;pa/th   &amp;[bl o ck]   &amp;(gr o up)  ]
    @       [ @word   @tu.p.le   @pa/th   @[bl o ck]   @(gr o up)  ]
    $       [ $word   $tu.p.le   $pa/th   $[bl o ck]   $(gr o up)  ]
    '       [ 'word   'tu.p.le   'pa/th   '[bl o ck]   '(gr o up)  ]
    ~~      [ ~word~  ~tu.p.le~  ~pa/th~  ~[bl o ck]~  ~(gr o up)~ ]
][
    for-each item items [
        assert [any [quoted? item, quasi? item, bindable? item]]
        if (degrade sigil) &lt;&gt; sigil of item [
            fail [mold item]
        ]
    ]
]
</code></pre>
<p><strong><code>:</code></strong> and <strong><code>::</code></strong> are not going to be SIGIL! at all soon.  But as a first step, I need to get rid of SET-PATH! and GET-PATH!</p>
<h2>
<a name="behold-just-a-little-nice-rebolish-moment-1" class="anchor" href="https://forum.rebol.info#behold-just-a-little-nice-rebolish-moment-1"></a>Behold Just A Little Nice Rebolish Moment</h2>
<p>I realized I needed to kill QUASI-TUPLE! and QUASI-PATH! also...</p>
<pre><code>for-each [sigil items] [
    ~null~  [  word    tu.p.le    pa/th    [bl o ck]    (gr o up)  ]
    ::      [  word:   tu.p.le:     _      [bl o ck]:   (gr o up): ]
    :       [ :word   :tu.p.le      _     :[bl o ck]   :(gr o up)  ]
    ^       [ ^word   ^tu.p.le   ^pa/th   ^[bl o ck]   ^(gr o up)  ]
    &amp;       [ &amp;word   &amp;tu.p.le   &amp;pa/th   &amp;[bl o ck]   &amp;(gr o up)  ]
    @       [ @word   @tu.p.le   @pa/th   @[bl o ck]   @(gr o up)  ]
    $       [ $word   $tu.p.le   $pa/th   $[bl o ck]   $(gr o up)  ]
    '       [ 'word   'tu.p.le   'pa/th   '[bl o ck]   '(gr o up)  ]
    ~~      [ ~word~      _         _     ~[bl o ck]~  ~(gr o up)~ ]
][
    for-each item items [
        if blank? item [continue]
        assert [any [quoted? item, quasi? item, bindable? item]]
        if (degrade sigil) &lt;&gt; sigil of item [
            fail [mold item]
        ]
    ]
]
</code></pre>
<p>When you have the parts, you just use them...</p>
<p>Of course I could have used other things.</p>
<hr>
<pre><code>    ::      [  word:   tu.p.le:     ~    [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:     #    [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:    !!!   [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:  &lt;dead&gt;  [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:  ~null~  [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<pre><code>    ::      [  word:   tu.p.le:   #dead  [bl o ck]:   (gr o up): ]
</code></pre>
<hr>
<p>It would be nice to have <strong><code>~dead~</code></strong>, but I have spoken about reserving WORD! quasi/antiforms.</p>
<p>(Maybe that could be relaxed, to where quasiforms are allowed for all WORD! but antiforms only for those endorsed by the system?  It might make sense.  You can dialect with <code>~null~</code> the quasiform all you like without having that mean anything to do with the behavior of null, so you could do that with any other quasiform word of the future... might as well let you make them, right?  But QUASI-TUPLE! and QUASI-PATH! don't get that allowance, so <strong><code>~/foo</code></strong> can be a PATH!)</p>
<p>In a lot of cases, trash (<strong><code>~</code></strong>) would be the right choice for a "this is invalid slot".</p>
<p>But here, we've got quasiforms in the mix as part of the discussion.  It favors picking blank as out of band.  And it gets out of the way a little more.</p>
<h2>
<a name="note-that-path-and-path-will-become-loadable-again-2" class="anchor" href="https://forum.rebol.info#note-that-path-and-path-will-become-loadable-again-2"></a>Note That <code>:pa/th</code> and <code>pa/th:</code> Will Become LOADable Again...</h2>
<p>You just won't ask about colons applied on the head or tail of the paths, because you'll have to "dig" to find the chains underneath.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/nice-blank-moment-while-killing-get-path-set-path/2241">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/nice-blank-moment-while-killing-get-path-set-path/2241</link>
          <pubDate>Sat, 31 Aug 2024 20:27:34 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2241</guid>
          <source url="https://forum.rebol.info/t/nice-blank-moment-while-killing-get-path-set-path/2241.rss">Nice Blank Moment While Killing GET-PATH!/SET-PATH!</source>
        </item>
        <item>
          <title>Why is &lt;/&gt; a TAG! and not a PATH! (or WORD!)?</title>
          <dc:creator><![CDATA[bradrn]]></dc:creator>
          <category>Questions</category>
          <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="4" data-topic="2218">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/wolfram-language/2218/4">Wolfram Language</a></div>
<blockquote>
<p><strong><code>&lt;/&gt;</code></strong> is a TAG!</p>
</blockquote>
</aside>
<p>This strikes me as being odd. It’s not a valid closing tag in HTML or XML, for instance. I find it natural to interpret this as ‘path from <code>&lt;</code> to <code>&gt;</code>’.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/why-is-a-tag-and-not-a-path-or-word/2219">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/why-is-a-tag-and-not-a-path-or-word/2219</link>
          <pubDate>Sun, 25 Aug 2024 03:58:41 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2219</guid>
          <source url="https://forum.rebol.info/t/why-is-a-tag-and-not-a-path-or-word/2219.rss">Why is &lt;/&gt; a TAG! and not a PATH! (or WORD!)?</source>
        </item>
        <item>
          <title>Meta-Representability in Ren-C (Isotopic Theory)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <p><em>I wrote this to try and give some context to an AI before asking it a naming question.  For a less high-level treatment, see <strong><a href="https://forum.rebol.info/t/a-justification-of-generalized-isotopes/1918">A Justification of Generalized Isotopes</a></strong>.</em></p>
<hr>
<p>Most imperative programming languages do not delve into the relationships between things like null and undefined... as if they were mathematical, and you were going to discover that if you take the square root of undefined you get null, etc.  <img src="https://forum.rebol.info/images/emoji/twitter/slight_smile.png?v=12" title=":slight_smile:" class="emoji" alt=":slight_smile:" loading="lazy" width="20" height="20">  But I am doing something analogous to that.</p>
<p>In particular, I'm making it possible to push variables which may contain states like undefined and null "upwards" representationally, to where whatever they are holding becomes "Meta".</p>
<pre><code>&gt;&gt; var
** Error: var is nothing

&gt;&gt; var: meta var
== ~

&gt;&gt; var  ; no error on access
== ~

&gt;&gt; var: meta var  ; again, no error
== '~

&gt;&gt; var
== '~

&gt;&gt; var: meta var  ; no error again
== ''~
</code></pre>
<p>If something is a special form (like nothing or null) the first META step will use tildes to indicate it has been raised to a "quasiform".  Quasiforms do not cause errors when accessed from variables, and can be put into "reified" contexts like arrays.  Then every META step after that adds a level of quoting, indicated by an apostrophe.</p>
<p>UNMETA reverses this process, ultimately getting back to the special form which cannot be put in arrays and--in the case of "nothing"--causes errors on access.</p>
<pre><code>&gt;&gt; var: unmeta first ['~]
== ~

&gt;&gt; var
== ~

&gt;&gt; var: unmeta var  ; result is nothing, shows nothing in the console

&gt;&gt; var
** Error: var is nothing
</code></pre>
<p>If something didn't start out as a special form, then it will just get quoting levels added by apostrophes:</p>
<pre><code>&gt;&gt; var
== 10

&gt;&gt; var: meta var
== '10

&gt;&gt; var: meta var
== ''10
</code></pre>
<p>So what this lets people do is kind of work generically and persist special states of interest to them in meta form, multiplexed alongside things that had been conventional values.</p>
<p>The special states are called "antiforms".  And they aren't just things like NULL and NOTHING, but also <a href="https://forum.rebol.info/t/the-void-in-null-out-protocol/1880">VOID</a>... <a href="https://forum.rebol.info/t/why-theres-no-boolean-type-storable-in-a-block/2095">logical TRUE and FALSE</a> (which means all reified states can be truthy)... <a href="https://forum.rebol.info/t/thought-reimplementing-multi-return-via-isotopic-block/1955">multi-return packs</a>, <a href="https://forum.rebol.info/t/fail-vs-return-raise-the-new-age-of-definitional-errors/1852">raised errors</a>, <a href="https://forum.rebol.info/t/the-long-awaited-death-of-only/1607">splice representations</a>...</p>
<p>To a newcomer, the merits or applications may not be obvious.  But this model gives phenomenal expressive power.  And I definitely do think of it as being like the "higher mathematics" of Rebol.</p>
<hr>
<p><a href="https://www.youtube.com/watch?v=B1J6Ou4q8vE">Animation vs. Math</a></p>

            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/meta-representability-in-ren-c-isotopic-theory/2217">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/meta-representability-in-ren-c-isotopic-theory/2217</link>
          <pubDate>Sat, 24 Aug 2024 18:38:40 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2217</guid>
          <source url="https://forum.rebol.info/t/meta-representability-in-ren-c-isotopic-theory/2217.rss">Meta-Representability in Ren-C (Isotopic Theory)</source>
        </item>
        <item>
          <title>Trust the User&#39;s Judgment... *When You Can*</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <p>When writing about <a href="https://forum.rebol.info/t/set-word-to-initialize-locals-in-function-specs/2210">whether we should have SET-WORD! for initializing locals in function specs</a>, I talked about whether to enforce the right hand side of the SET-WORD! being a GROUP! for safety:</p>
<aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="2210">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/set-word-to-initialize-locals-in-function-specs/2210/1">SET-WORD! To Initialize Locals In Function Specs?</a></div>
<blockquote>
<p>If plain words are being picked up as locals there's potential for error if you accidentally wrote an expression that didn't work, like:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">func [
   arg [integer!]
   &lt;local&gt;
   local1 local2
   local3: arity-2-but-I-think-it's-3 a b c
   local4: 10
][
    ...
]
</code></pre>
<p>That could wind up making a local <strong><code>c</code></strong> that you didn't intend. But then again, sometimes it would be just a very obvious simple initialization, like <strong><code>local4: 10</code></strong>. Forcing people to use parentheses could do more harm than good, vs. trusting them to use the parentheses if they feel it's warranted.</p>
</blockquote>
</aside>
<p>I realized this kind of dove to the heart of Rebol philosophy:</p>
<p><strong>If you need to evaluate an expression multiple times, it has to be in an array.  But if you're doing an evaluation just once, trust the user to formulate the expression and use an array if they deem it necessary.</strong></p>
<p>Most people encounter this first with the difference between IF and WHILE.</p>
<p>Certainly IF <em>could</em> take its condition in a BLOCK!.  But it doesn't.  You can mess up:</p>
<p>In Rebol2:</p>
<pre><code>block: [a b]
data: [c]

if 3 = length? append block [
   print "Appending data to block gave us 3 elements"
]

stuff: [a b c]
</code></pre>
<p>You run the code and you get no output, because you forgot to say <strong>append block data</strong>.  So what did you get instead?</p>
<pre><code>&gt;&gt; block
== [a b
    print "Appending data to block gave us 3 elements"
]
</code></pre>
<p>What you thought was a branch got appended.  And the branch actually wound up being the block from the next expression (SET-WORD!s evaluate to what they are assigned).</p>
<p><em>(As it so happens in Ren-C, it catches this...due to <a href="https://forum.rebol.info/t/soft-quoted-branching-light-elegant-fast/1020">soft-quoted branching</a>.  Since it quotes its branch slot, it saw a SET-WORD! in the position, and it doesn't allow things like WORD! or SET-WORD! there.  If we didn't already have enough reasons to appreciate soft quoted branching, there's one more!)</em></p>
<h2><a name="p-7368-should-it-have-required-a-block-for-the-condition-1" class="anchor" href="https://forum.rebol.info#p-7368-should-it-have-required-a-block-for-the-condition-1"></a>Should It Have Required a Block For The Condition?</h2>
<p><strong>The answer for the Rebol Core is: No.</strong>  The goal is to trust the user to make that call.</p>
<p>If you think the expression you're writing is too risky to get right, you should use a GROUP! or break it into subexpressions or otherwise rethink your code so it's not risky.  Being able to cook up a DSL in ten minutes that solves patterns you find useful is the tool you use when you find yourself making code that's at risk of mistakes.</p>
<p><strong>The answer for You is: Your Choice.</strong>  If you find you're making lots of mistakes and want to set a policy that IF always takes a BLOCK! condition, suit yourself.  IF is yours, just like everything.  Redefine it.  It's about <a href="https://forum.rebol.info/t/back-to-personal-computing/186">putting the personal back into personal computing.</a></p>
<h2><a name="p-7368-well-then-why-use-a-block-for-whiles-condition-2" class="anchor" href="https://forum.rebol.info#p-7368-well-then-why-use-a-block-for-whiles-condition-2"></a>Well Then Why Use A BLOCK! For WHILE's Condition?</h2>
<p>Because there wasn't another choice.</p>
<p>You can't tell how long an expression is going to be just by looking at it.  You have to evaluate it.</p>
<p>The condition in a WHILE needs to be evaluated more than once.  So it's taken as a BLOCK!.</p>
<h2><a name="p-7368-this-is-one-of-the-big-ideas-3" class="anchor" href="https://forum.rebol.info#p-7368-this-is-one-of-the-big-ideas-3"></a>This Is One of The "Big Ideas"</h2>
<p>Whether you see it as a big idea or just kind of gonzo programming, is up to you.</p>
<p>With the state of software being how it is, I think we need the occasional Flower Sermon.</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Flower_Sermon">https://en.wikipedia.org/wiki/Flower_Sermon</a></strong></p>
<p>Ren-C has <a href="https://forum.rebol.info/t/the-language-worlds-weirdest-comma-mechanic/1387">thrown in another big tool here, with COMMA!</a>.  Giving you yet more choice.</p>
<p>Yet EVAL and PARSE still let you write your streams of consciousness, giving the code a written-English like fluidity, of mostly words and spaces...which we are naturally good at working with.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/trust-the-users-judgment-when-you-can/2211">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/trust-the-users-judgment-when-you-can/2211</link>
          <pubDate>Sat, 24 Aug 2024 03:44:15 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2211</guid>
          <source url="https://forum.rebol.info/t/trust-the-users-judgment-when-you-can/2211.rss">Trust the User&#39;s Judgment... *When You Can*</source>
        </item>
        <item>
          <title>MAKE Should Be Using *Dialected Constructors*</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="1" data-topic="1591">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/debunking-the-arity-1-make/1591/1">Debunking the Arity-1 MAKE</a></div>
<blockquote>
<p>No one really uses the "polymorphism" of <strong>make some-type some-definition</strong> without really knowing what type or definition is, right? That seems essentially meaningless.</p>
</blockquote>
</aside>
<p>In thinking more about "what is MAKE", I feel like it is fundamentally a constructor.</p>
<hr>
<p>When you think about Rebol's value proposition vs. other languages, what's the key idea?</p>
<p><strong>DIALECTS.</strong>  The freeform Jazz of programming.  <img src="https://forum.rebol.info/images/emoji/twitter/saxophone.png?v=12" title=":saxophone:" class="emoji" alt=":saxophone:" loading="lazy" width="20" height="20"></p>
<hr>
<p>So what should be the differentiating factor about constructors in Rebol vs. other languages?</p>
<p><strong>CONSTRUCTOR DIALECTS.</strong> <img src="https://forum.rebol.info/images/emoji/twitter/saxophone.png?v=12" title=":saxophone:" class="emoji" alt=":saxophone:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/guitar.png?v=12" title=":guitar:" class="emoji" alt=":guitar:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/drum.png?v=12" title=":drum:" class="emoji" alt=":drum:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/musical_keyboard.png?v=12" title=":musical_keyboard:" class="emoji" alt=":musical_keyboard:" loading="lazy" width="20" height="20"></p>
<hr>
<p>When I say <strong><code>make my-type! [...]</code></strong> then what goes in that BLOCK! needs to be delegated to MY-TYPE! in some way to allow it the freedom to interpret the hell out of that block.</p>
<p>And it shouldn't only be allowed to be a BLOCK! full of madness.  Consistent with history where you can write things like <strong><code>(make block! 10)</code></strong> to preallocate a size, you should be able to pass anything you want.</p>
<pre><code>make my-type! 'some-word

make my-type! /some-refinement

make my-type! ${...}  ; gimme a bound FENCE!

make my-type! @[...]  ; special meaning if "inert" block received?
</code></pre>
<hr>
<h3><a name="p-7330-history-has-ridiculously-underformed-the-potential-1" class="anchor" href="https://forum.rebol.info#p-7330-history-has-ridiculously-underformed-the-potential-1"></a>History Has Ridiculously Underformed The Potential</h3>
<p>When you look at the TO/MAKE Matrix, it's full of meaningless choices:</p>
<pre><code>rebol2&gt;&gt; make block! [a b c]
== [a b c]
</code></pre>
<p>Huh?  What the hell use is that.  Is it a copy?  Is it a deep copy?  <em><a href="https://www.youtube.com/watch?v=U80ebi4AKgs">Where's the beef?</a></em></p>
<p>Why isn't the constructor for block a literate landscape, subsuming the functionality of <a href="http://www.rebol.com/docs/words/warray.html">ARRAY</a> (a terrible name for a verb) and much more?</p>
<pre><code>&gt;&gt; make block! [4/8 initial: '*]
== [* * * *]  ; length 4, capacity 8, initialize elements with *

&gt;&gt; make block! /8
== []  ; just capacity 8

&gt;&gt; make block! 4
== [~ ~ ~ ~]  ; default to TRASH
</code></pre>
<p>There's an answer here that "dialect design is hard", and it's scary to put a dialect in the core.  But there's decades of experience at this point.  And maybe even ways for people to do their own rewrites and transformations so they don't have to use a <strong><code>make-block</code></strong> function but can customize <strong><code>make block!</code></strong> itself.</p>
<hr>
<h3><a name="p-7330-ren-c-has-opened-up-the-skies-and-will-do-more-2" class="anchor" href="https://forum.rebol.info#p-7330-ren-c-has-opened-up-the-skies-and-will-do-more-2"></a>Ren-C Has Opened Up The Skies, and Will Do More</h3>
<p>I was musing on the behavior of FENCE! in the interpreter and thought, what if it wasn't narrowly defined as being OBJECT! related.  <em>What if it was MAKE-related, with an object-generating default?</em></p>
<pre><code>&gt;&gt; {x: 10, y: 20}
== #[object! x: 10 y: 20]

&gt;&gt; {[block!] 4/8 initial: '*}  ; maybe leading block means MAKE that?
== [* * * *]

&gt;&gt; {block! {4/8 initial: '*}}  ; maybe nesting FENCE! does it?
== [* * * *]

&gt;&gt; {block! 4/8 initial: '*}  ; maybe starting with WORD! is enough?
== [* * * *]

&gt;&gt; {group!}  ; synonym for -&gt; copy '() ?
== ()
</code></pre>
<p>It's a half-baked thought, and I don't know what the ideal syntax is.  But I feel like this could make FENCE! so much more.</p>
<hr>
<h2><a name="p-7330-so-coming-soon-the-great-make-purge-3" class="anchor" href="https://forum.rebol.info#p-7330-so-coming-soon-the-great-make-purge-3"></a>So Coming Soon: The Great MAKE Purge.</h2>
<p>In the combinatoric TO/MAKE matrix, there is a ton of garbage.</p>
<p>I've previously suggested that TO should not do any evaluation (e.g. be binding agnostic on what it gets in).  I think that remains a good idea, that it be purely mechanical.  <a href="https://forum.rebol.info/t/hacking-away-on-the-to-and-make-matrix/649">I had some other ideas that are lingering.</a></p>
<p>I think it's time to further cull the "MAKE for the sake of thinking everything you pass needs to do something, even if it's trivial."  I've been wiping out some of the garbage, but more is needed.</p>
<p>And we have to find a way to give users the ability to hook MAKE on their objects... such that something like <strong><code>make point-3D! [...]</code></strong> isn't locked into a trivial extension syntax of SET-WORD! and value, but truly able to do interesting things.</p>
            <p><small>4 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/make-should-be-using-dialected-constructors/2196">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/make-should-be-using-dialected-constructors/2196</link>
          <pubDate>Tue, 20 Aug 2024 05:41:38 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2196</guid>
          <source url="https://forum.rebol.info/t/make-should-be-using-dialected-constructors/2196.rss">MAKE Should Be Using *Dialected Constructors*</source>
        </item>
        <item>
          <title>The Robustness Principle Is Not Robust</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <p>Something floating around that I've pretty much always hated--but experience has made me hate more--is the "Robustness Principle":</p>
<aside class="onebox wikipedia" data-onebox-src="https://en.wikipedia.org/wiki/Robustness_principle">
  <header class="source">

      <a href="https://en.wikipedia.org/wiki/Robustness_principle" target="_blank" rel="noopener">en.wikipedia.org</a>
  </header>

  <article class="onebox-body">
    

<h3><a href="https://en.wikipedia.org/wiki/Robustness_principle" target="_blank" rel="noopener">Robustness principle</a></h3>

<p>In computing, the robustness principle is a design guideline for software that states: "be conservative in what you do, be liberal in what you accept from others". It is often reworded as: "be conservative in what you send, be liberal in what you accept". The principle is also known as Postel's law, after Jon Postel, who used the wording in an early specification of TCP.
 In other words, programs that send messages to other machines (or to other programs on the same machine) should conform comple...</p>

  </article>

  <div class="onebox-metadata">
    
    
  </div>

  <div style="clear: both"></div>
</aside>

<p>I understand the motivation.  If you have something that imports to a vector graphics program and not all the Bezier curves have endpoints... then, sure.  Someone is going to appreciate that you were forgiving and they got some kind of maybe-a-bit-broken picture instead of an "Invalid File" error.</p>
<p>Pushing this further to those of us who remember the DOS days: we had those experiences where we accidentally deleted files, but the filesystem didn't delete everything--it just wrote a zero byte on the filename (or somesuch).  Norton Utilities let us catch our mistake and get our file back.  In some ways, a lax and forgiving attitude is a beautiful thing...</p>
<p>This so-called "robustness" cannot (and should not) be subconscious.  It needs to be mitigated with an in-your-face consciousness shift!  <em>(And I think Norton Utilities is an apt example, because if you were firing up that program <a href="https://www.youtube.com/watch?v=RRU3I_o1vLc">you knew you were in the Danger Zone</a>)</em>.</p>
<p>There must be a really jarring speedbump.  When a data file is not fitting the standards, you have to go through a procedure that transforms the broken file to the standard.  You have to be aware that you are dealing with a dirty file.  And the experience of that transformation informs you that the person who gave you the dirty file isn't playing with all their marbles, and you correct them for the next transmission.</p>
<p>Authentic programs should demand a standard form.  And when they aren't getting the standard form they should speak up, march you out the door, and force you to fix your input. "Real programs" should never pretend the byte sequence of bad input is okay--there should only be "Cleanup/Recovery programs" that fix the sequence to write a correct one.  And that recovery program should be terminated before the "Real program" runs.</p>
<hr>
<p>I don't need to rewrite the critiques of the "robustness principle" cited in Wikipedia.  But it is nonsense, and the opposite of robust.  It's a garbage idea, that anyone with a whit of sense regarding security can see right through immediately.</p>
<p>There is a better way: the better way is <em>consciousness</em> about what you are working with, and rejection of any sort of malignant "middleman" acting on your data without you knowing.</p>
<ul>
<li>
<p>"Normalization" you did not ask for is an attack on your information.</p>
</li>
<li>
<p>"Glossing over or fixing invalid sequences" you did not ask for is an attack on your information</p>
</li>
<li>
<p>Anything which makes a simple load of a file and save back of the same file not idempotent is an attack on your information</p>
</li>
</ul>
<p>Perhaps I've become even more religious than Carl in some of these ways.  But I certainly see things won't get better without pushing back.</p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187</link>
          <pubDate>Thu, 13 Jun 2024 05:45:28 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2187</guid>
          <source url="https://forum.rebol.info/t/the-robustness-principle-is-not-robust/2187.rss">The Robustness Principle Is Not Robust</source>
        </item>
        <item>
          <title>RE: The Ordering and Priorities of the Ren-C Project</title>
          <dc:creator><![CDATA[bradrn]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <aside class="quote no-group quote-modified" data-username="hostilefork" data-post="5" data-topic="2177">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/speed-of-uparse/2177/5">Speed of UPARSE</a></div>
<blockquote>
<aside class="quote no-group" data-username="bradrn" data-post="4" data-topic="2177">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"><a href="https://forum.rebol.info/t/speed-of-uparse/2177/4">Speed of UPARSE</a></div>
<blockquote>
<p>I’ll be blunt: this, to me, sounds unusably slow. Beyond the very simplest tasks, I can’t imagine a situation where I’d deliberately choose to take a 250× performance drop.</p>
</blockquote>
</aside>
<p>This is a first-of-its-kind design. And if you don't understand why I'm building things the way I'm building them, then...to be blunt...there's not much point in me listening to your feedback regarding the order in which I do things.</p>
</blockquote>
</aside>
<p>Remember, I come from well outside the Rebol world. The reason I don’t understand is, to a large extent, because this way of reasoning about code is one I’ve never seen before in my life. This is the reason I’m asking so many questions, setting out my opinions, and having these discussions with you… precisely so that I can begin to understand why it is that way.</p>
            <p><small>9 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/re-the-ordering-and-priorities-of-the-ren-c-project/2179">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/re-the-ordering-and-priorities-of-the-ren-c-project/2179</link>
          <pubDate>Sat, 06 Apr 2024 19:16:35 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2179</guid>
          <source url="https://forum.rebol.info/t/re-the-ordering-and-priorities-of-the-ren-c-project/2179.rss">RE: The Ordering and Priorities of the Ren-C Project</source>
        </item>
        <item>
          <title>Feb 2024 Talk, Functional Programming Sydney</title>
          <dc:creator><![CDATA[bradrn]]></dc:creator>
          <category>Show &amp; Tell</category>
          <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="1" data-topic="2136">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136/1">Fundamental distinguishing features of Rebol</a></div>
<blockquote>
<p>I offered to give a talk at my local Functional Programming meetup next month. Given my recent interests, I’m thinking of giving an intro to Rebol and its basic concepts.</p>
</blockquote>
</aside>
<p>As a follow-up to this, the talk slides are now online: <a href="https://github.com/fp-syd/meetings/blob/master/2024/2024-02-Neimann-Computing-with-eval.pdf" class="inline-onebox">meetings/2024/2024-02-Neimann-Computing-with-eval.pdf at master · fp-syd/meetings · GitHub</a></p>
            <p><small>3 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/feb-2024-talk-functional-programming-sydney/2175">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/feb-2024-talk-functional-programming-sydney/2175</link>
          <pubDate>Fri, 22 Mar 2024 00:19:14 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2175</guid>
          <source url="https://forum.rebol.info/t/feb-2024-talk-functional-programming-sydney/2175.rss">Feb 2024 Talk, Functional Programming Sydney</source>
        </item>
        <item>
          <title>&quot;More arguments for a function on request&quot; (Variadics)</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Questions</category>
          <description><![CDATA[
            <p>On Red's Gitter, <a href="https://matrix.to/#/!EorVRCzrVpjojJtctJ:gitter.im/$9hee8CVtrrHeVB7GTvPmKo2hV04eYAjOrhH64C3j5kY?via=gitter.im&amp;via=matrix.org&amp;via=chat.weho.st">@GiuseppeChillemi asked</a>:</p>
<blockquote>
<p>Do you think it would be possible to get more arguments for a function on request?</p>
<p>Example:</p>
<pre><code>aaa: 1
bbb: 2
ccc: 3
f: func [arg1] [other-args: get-args 3]
f arg1-val aaa bbb ccc
</code></pre>
</blockquote>
<p>And Gregg says "oh that would make Red unsafe" (as if Red were somehow "safe").</p>
<p>Anyway, Ren-C has some support for variadics.  While the implementation hasn't gotten a lot of attention in a while, it's no less safe than anything else--the mechanisms used are the same ones that gather ordinary arguments.</p>
<pre><code> aaa: 1
 bbb: 2
 ccc: 3
 f: func [arg1 others [&lt;variadic&gt; any-value?]] [
     return collect [keep arg1, repeat 3 [keep take others]]
 ]

 &gt;&gt; f 1020 aaa bbb ccc
 == [1020 1 2 3]
</code></pre>
<p>The interface is probably not what it's going to ultimately be.  But for now, you can mark a parameter <code>&lt;variadic&gt;</code> and it will be a VARARGS!, that supports TAKE to acquire parameters after the call is made.</p>
<p>Variadics should be used sparingly, because they are difficult to wrap and abstract.  There are some mechanisms for APPLY'ing variadics using a BLOCK! to supply the variadic arguments, but the interface for that is also likely to change.</p>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/more-arguments-for-a-function-on-request-variadics/2174">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/more-arguments-for-a-function-on-request-variadics/2174</link>
          <pubDate>Tue, 19 Mar 2024 09:51:30 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2174</guid>
          <source url="https://forum.rebol.info/t/more-arguments-for-a-function-on-request-variadics/2174.rss">&quot;More arguments for a function on request&quot; (Variadics)</source>
        </item>
        <item>
          <title>Getting an unset variable</title>
          <dc:creator><![CDATA[bradrn]]></dc:creator>
          <category>Questions</category>
          <description><![CDATA[
            <p>Nothing (now anti BLANK!) <a href="https://forum.rebol.info/t/shades-of-distinction-in-non-valued-intents/1604">has been established</a> as the value of unset variables. As the example in that thread states:</p>
<pre><code class="lang-plaintext">&gt;&gt; nothing-value
** Error: NOTHING-VALUE variable is unset

&gt;&gt; append [a b] get/any 'nothing-value
** Error: APPEND does not allow adding ~ antiforms to blocks
</code></pre>
<p>But when I try this, I get quite different results:</p>
<pre><code class="lang-plaintext">&gt;&gt; nothing-value
** Script Error: nothing-value word is attached to a context, but unassigned

&gt;&gt; append [a b] get/any 'nothing-value
** Script Error: nothing-value word is not bound to a context
</code></pre>
<p>In fact, even GET/ANY doesn’t seem to work… even when I make sure the binding is right:</p>
<pre><code class="lang-plaintext">&gt;&gt; get/any 'nothing-value
** Script Error: nothing-value word is not bound to a context

&gt;&gt; get/any $nothing-value             
** Script Error: nothing-value word is attached to a context, but unassigned
</code></pre>
<p>So, what’s happening here? And how <em>do</em> I get nothing out of an unset variable?</p>
            <p><small>4 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/getting-an-unset-variable/2169">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/getting-an-unset-variable/2169</link>
          <pubDate>Sat, 09 Mar 2024 02:39:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2169</guid>
          <source url="https://forum.rebol.info/t/getting-an-unset-variable/2169.rss">Getting an unset variable</source>
        </item>
        <item>
          <title>How To Choose Between Returning VOID and NIHIL?</title>
          <dc:creator><![CDATA[bradrn]]></dc:creator>
          <category>Questions</category>
          <description><![CDATA[
            <aside class="quote no-group" data-username="hostilefork" data-post="6" data-topic="2283">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/what-are-null-void-nothing-blank-and-nihil/2283/6">What Are NULL, VOID, NOTHING, BLANK, and NIHIL?</a></div>
<blockquote>
<p>Void is used generically in many places when you want things to vanish:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">&gt;&gt; compose [&lt;a&gt; (if false [&lt;b&gt;]) &lt;c&gt;]
== [&lt;a&gt; &lt;c&gt;]
</code></pre>
</blockquote>
</aside>
<p>Ah-ha… I’d completely missed this use of void, as a return value.</p>
<p>Though this does now raise the question of whether a function should return nihil or void. Both seem to vaporise in lists, after all. I guess it depends on whether you want the function call to be ignored or not.</p>
            <p><small>2 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/how-to-choose-between-returning-void-and-nihil/2171">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/how-to-choose-between-returning-void-and-nihil/2171</link>
          <pubDate>Sat, 09 Mar 2024 02:30:26 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2171</guid>
          <source url="https://forum.rebol.info/t/how-to-choose-between-returning-void-and-nihil/2171.rss">How To Choose Between Returning VOID and NIHIL?</source>
        </item>
        <item>
          <title>What deserves to be a datatype?</title>
          <dc:creator><![CDATA[bradrn]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <aside class="quote no-group" data-username="bradrn" data-post="7" data-topic="2159">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/bradrn/48/365_2.png" class="avatar"><a href="https://forum.rebol.info/t/header-dialect-and-multiline-strings/2159/7">Header dialect and multiline strings</a></div>
<blockquote>
<p>(If I may philosophise for a moment… I feel there’s a big, gaping hole in my understanding of how we decide ‘what Rebol syntax is’, so to speak. Perhaps my caution around sigils and TYPE-BLOCK!s are a manifestation of that hole, as is this. I’ll make a new thread about it if I can figure out any clearer way to articulate my concerns.)</p>
</blockquote>
</aside>
<p>This is that thread.</p>
<p>I’ll begin by observing that in Rebol, the complexity of the lexer vs the parser is ‘reversed’ compared to other programming languages. In Rebol, the actual syntax is highly minimalistic: there’s only a few constructs which provide explicit grouping, and none provide anything more than a simple list of items. By contrast, the lexer is exceedingly complicated: nearly every datatype has its own literal form, oftentimes more than one.</p>
<p>Language design ends up ‘reversed’ in a similar way. In most languages, discussion centres around questions like ‘which new syntactic constructs should we add’. By contrast, Rebol (and especially Ren-C) more often poses the question: ‘which new datatypes do we want to include, with which literal syntax?’.</p>
<p>At the moment, I still feel uncomfortable discussing such questions. I don’t feel that I fully understand the kind of criteria we should consider to know whether a datatype is worth including or not. Or, more concisely, I don’t understand how decide: <strong>what deserves to be a Ren-C datatype?</strong>.</p>
<hr>
<p>One obvious criterion is simply, <em>datatypes representing common types of data</em>. This is why we have things like MONEY! and FILE! and DATE! and so on. Ultimately this stems from Rebol’s heritage as a data-transfer format, but obviously these types are far more broadly useful.</p>
<p>Another obvious criterion is <em>syntax which is important for programming</em>. This gives us GROUP! and GET-WORD! and PATH! and so on. These exist as datatypes ultimately because Rebol is homoiconic, but their presence has suggested a wide range of uses beyond simple programming.</p>
<p>This accounts for most of the types in Ren-C. And, if that were all to it, I’d have no objections.</p>
<hr>
<p>But, unfortunately, there are some other types, whose presence is explained by neither of those criteria. As I’ve said previously, the ones which make me feel most uncomfortable are THE-* and TYPE-*. Neither of these represent common types of data that one would want to pass around. And, with the possible exceptions of THE-WORD! and TYPE-BLOCK!, they’re basically useless in ‘regular’ programming.</p>
<p>Despite this, <a class="mention" href="https://forum.rebol.info/u/hostilefork">@hostilefork</a> has lobbied pretty hard for both of these. Hopefully it should be clear now why I find this viewpoint confusing. I can’t say the existence of these types is <em>problematic</em>, as such, but I feel this <strong>indicates a gap in my understanding of the language</strong>.</p>
<p>The closest to an explanation I’ve found is that these types are useful in dialecting. That is, they may not be useful for programming <em>per se</em>, but having the syntax around is useful for constructing new languages. (For instance, using TYPE-WORD!s in PARSE dialect, or THE-WORD!s for module inclusion.) The problem with this is, <a href="https://forum.rebol.info/t/a-proliferation-of-word-s/2147">as we’ve established</a>, that there’s a huge number of syntaxes which would be ‘useful in dialecting’: clearly, this is too low a bar for deciding ‘what deserves to be a datatype’.</p>
<p>(And, incidentally, this also establishes that we’re quite willing to reject datatypes that don’t seem to be of sufficiently general usage.)</p>
<p>Another argument is simply consistency: other sigils have versions for words, blocks, tuples, etc., so THE-* and TYPE-* should as well. But this doesn’t strike me as particularly convincing — there’s nothing intrinsic in Ren-C which requires sigils to generalise to all possible types. Indeed, we’re quite willing to avoid doing so when it would make no sense. (For instance, we don’t have ISSUE-TEXT!, ISSUE-BINARY!, ISSUE-EMAIL!… we just have a single textual ISSUE! type, because doing otherwise would be silly.)</p>
<p>So, when all is said and done, we have a set of types which don’t seem to be of general use, and have no convincing reason to exist, but are nonetheless kept in the language. And <strong>I want to know why that is</strong>, because I can’t figure it out.</p>
            <p><small>10 posts - 2 participants</small></p>
            <p><a href="https://forum.rebol.info/t/what-deserves-to-be-a-datatype/2164">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/what-deserves-to-be-a-datatype/2164</link>
          <pubDate>Tue, 05 Mar 2024 08:20:02 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2164</guid>
          <source url="https://forum.rebol.info/t/what-deserves-to-be-a-datatype/2164.rss">What deserves to be a datatype?</source>
        </item>
        <item>
          <title>REIFY and DEGRADE: a Narrower META and UNMETA</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Feature Discover</category>
          <description><![CDATA[
            <p>In the "small improvements can be big" category, I think that I've settled on the name for the function that turns quasiforms into antiforms, but leaves everything else alone: <strong>DEGRADE</strong>...and its complement <strong>REIFY</strong> which turns antiforms into quasiforms (but leaves everything else alone).</p>
<pre><code>&gt;&gt; first [1020 ~null~]
== 1020

&gt;&gt; second [1020 ~null~]
== ~null~

&gt;&gt; degrade first [1020 ~null~]
== 1020

&gt;&gt; degrade second [1020 ~null~]
== ~null~  ; anti

&gt;&gt; 304
== 304

&gt;&gt; reify 304
== 304

&gt;&gt; true
== ~true~  ; anti

&gt;&gt; reify true
== ~true~
</code></pre>
<p>If you're dealing with a full-band situation where you genuinely don't know if you're working with a "meaningful quasiform" where <em>quasi means quasi</em>, you have to use META and UNMETA.  But if you know that quasiforms aren't part of your data of interest, REIFY and DEGRADE can help you dodge adding and removing quote marks much (or most) of the time.</p>
<aside class="quote no-group" data-username="hostilefork" data-post="12" data-topic="1560">
<div class="title">
<div class="quote-controls"></div>
<img loading="lazy" alt="" width="24" height="24" src="https://forum.rebol.info/user_avatar/forum.rebol.info/hostilefork/48/421_2.png" class="avatar"><a href="https://forum.rebol.info/t/weird-word-s-allow-but-escape-them/1560/12">Weird WORD!s - Allow, But Escape Them?</a></div>
<blockquote>
<p>Maybe it would be better (and give Chris less of a heart attack) if it said:</p>
<pre data-code-wrap="plaintext"><code class="lang-plaintext">for-each [sigil' items] [
    ~null~ [  word   tu.p.le   pa/th   [bl o ck]   (gr o up)  ]
    '::    [  word:  tu.p.le:  pa/th:  [bl o ck]:  (gr o up): ]
    ':     [ :word  :tu.p.le  :pa/th  :[bl o ck]  :(gr o up)  ]
    '^     [ ^word  ^tu.p.le  ^pa/th  ^[bl o ck]  ^(gr o up)  ]
    '&amp;     [ &amp;word  &amp;tu.p.le  &amp;pa/th  &amp;[bl o ck]  &amp;(gr o up)  ]
    '@     [ @word  @tu.p.le  @pa/th  @[bl o ck]  @(gr o up)  ]
    '$     [ $word  $tu.p.le  $pa/th  $[bl o ck]  $(gr o up)  ]
 ][
      for-each item items [
          if (unmeta sigil') &lt;&gt; sigil of item [fail [mold item]]
      ]
 ]
</code></pre>
</blockquote>
</aside>
<p>I like how DEGRADE can be used in situations like this to help you strike the quotes on the normal values...since SIGIL OF never returns quasiforms, only SIGIL! or a null antiform:</p>
<pre><code>for-each [sigil items] [
    ~null~ [  word   tu.p.le   pa/th   [bl o ck]   (gr o up)  ]
    ::     [  word:  tu.p.le:  pa/th:  [bl o ck]:  (gr o up): ]
    :      [ :word  :tu.p.le  :pa/th  :[bl o ck]  :(gr o up)  ]
    ^      [ ^word  ^tu.p.le  ^pa/th  ^[bl o ck]  ^(gr o up)  ]
    &amp;      [ &amp;word  &amp;tu.p.le  &amp;pa/th  &amp;[bl o ck]  &amp;(gr o up)  ]
    @      [ @word  @tu.p.le  @pa/th  @[bl o ck]  @(gr o up)  ]
    $      [ $word  $tu.p.le  $pa/th  $[bl o ck]  $(gr o up)  ]
][
    for-each item items [
        if (degrade sigil) &lt;&gt; sigil of item [
            fail [mold item]
        ]
    ]
]
</code></pre>
<p>I think this will be a useful and common pattern.</p>
<p>Void being a word antiform is locking this all up into place!</p>
<p><img src="https://forum.rebol.info/images/emoji/twitter/atom_symbol.png?v=12" title=":atom_symbol:" class="emoji only-emoji" alt=":atom_symbol:" loading="lazy" width="20" height="20"> <img src="https://forum.rebol.info/images/emoji/twitter/+1.png?v=12" title=":+1:" class="emoji only-emoji" alt=":+1:" loading="lazy" width="20" height="20"></p>
            <p><small>2 posts - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163</link>
          <pubDate>Sun, 03 Mar 2024 15:28:36 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2163</guid>
          <source url="https://forum.rebol.info/t/reify-and-degrade-a-narrower-meta-and-unmeta/2163.rss">REIFY and DEGRADE: a Narrower META and UNMETA</source>
        </item>
        <item>
          <title>copy all files in a directory ... a little help please?</title>
          <dc:creator><![CDATA[hcfe]]></dc:creator>
          <category>Usage</category>
          <description><![CDATA[
            <p>Hi everybody,</p>
<p>I'd like to modify this script from the script library: <a href="http://rebol.net/cookbook/recipes/0011.html" rel="noopener nofollow ugc">copy all files in a directory</a> so that it can exclude directories and or files like you can with rsync.</p>
<p>It has been a long time since I've used rebol, and I was never much good at it!</p>
<p>Any help appreciated...</p>
            <p><small>5 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/copy-all-files-in-a-directory-a-little-help-please/2149">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/copy-all-files-in-a-directory-a-little-help-please/2149</link>
          <pubDate>Thu, 15 Feb 2024 00:10:21 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2149</guid>
          <source url="https://forum.rebol.info/t/copy-all-files-in-a-directory-a-little-help-please/2149.rss">copy all files in a directory ... a little help please?</source>
        </item>
        <item>
          <title>Fundamental distinguishing features of Rebol</title>
          <dc:creator><![CDATA[bradrn]]></dc:creator>
          <category>Philosophy</category>
          <description><![CDATA[
            <p>Perhaps foolishly, I offered to give a talk at my local Functional Programming meetup next month. Given my recent interests, I’m thinking of giving an intro to Rebol and its basic concepts.</p>
<p>So that’s gotten me thinking: what <em>are</em> the basic concepts of Rebol as a programming paradigm, which distinguish it from all others? Here’s what I’ve come up with so far:</p>
<ul>
<li>
<p><strong>Everything is a datatype</strong>: Rebol was built for networking. This means you should be able to take any value, serialise it in a human-readable way, and parse it back into a value. This means a lot of built-in datatypes for useful concepts.</p>
</li>
<li>
<p><strong>Data is code</strong>: Everything starts out its life as data. If you want, you can evaluate it in some way to get a result. Naturally, you can evaluate it using any rules you want, which gives you <strong>dialecting</strong> as a corollary.</p>
<p>(It’s worth noting that this is the converse of Lisp’s famous maxim, ‘code is data’.)</p>
</li>
<li>
<p><strong>Binding</strong>: Word values are associated with their storage. This can be arbitrarily manipulated by the programmer, leading to <strong>definitional scoping</strong>.</p>
</li>
<li>
<p>More generally, I might summarise all the above points as natural consequences of <strong>computing with evaluation</strong>: the fundamental operation of Rebol is taking values and extracting some kind of result from them. This necessitates the other points above: a rich set of datatypes to store both the original value and the result, the ability to treat those datatypes as code which can be evaluated, and a way to look up references during the evaluation process.</p>
</li>
</ul>
<p>Does this all seem reasonable? Have I missed anything?</p>
            <p><small>16 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136</link>
          <pubDate>Mon, 29 Jan 2024 12:55:14 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2136</guid>
          <source url="https://forum.rebol.info/t/fundamental-distinguishing-features-of-rebol/2136.rss">Fundamental distinguishing features of Rebol</source>
        </item>
        <item>
          <title>Reacting to Definitional Errors: CURTAIL</title>
          <dc:creator><![CDATA[hostilefork]]></dc:creator>
          <category>Show &amp; Tell</category>
          <description><![CDATA[
            <p>Here's a simple <a href="https://forum.rebol.info/t/introducing-reframer-close-cousin-to-enclose/1395">REFRAMER</a> called CURTAIL:</p>
<pre><code>curtail: reframer function [frame [frame!]] [
    return do frame except e -&gt; [
        if e.id == 'need-non-null [return void]
        raise e
    ]
]
</code></pre>
<p>If you don't remember what reframers do, they just have access to a function call before you run it.  Here we are looking for the function we're running to give us a NEED-NON-NULL error.</p>
<p><em>But we're not looking for just any NEED-NON-NULL error that might go by.</em>  We're only interested in ones that are coming out of the call we're processing.  If that happens, we just vaporize the expression.</p>
<pre><code>&gt;&gt; compose [(null)]
** Script Error: non-NULL value required (see MAYBE, TRY, REIFY)

&gt;&gt; curtail compose [(null)]  ; will give back void
</code></pre>
<p>You can see something like this simplifying null checks:</p>
<pre><code>&gt;&gt; ver: 1.2.3
&gt;&gt; date: null

&gt;&gt; print [curtail spaced ["Version:" ver] curtail spaced ["Date:" date]]
Version: 1.2.3
</code></pre>
<p><em>But like I said, it's not just any NEED-NON-NULL...</em></p>
<pre><code>&gt;&gt; a: 1 b: null c: 3
&gt;&gt; get-ver: func [] [to tuple! reduce [a b c]]

&gt;&gt; print [curtail spaced ["Version:" get-ver] curtail spaced ["Date:" date]]
** Script Error: non-NULL value required (see MAYBE, TRY, REIFY)
</code></pre>
            <p><small>1 post - 1 participant</small></p>
            <p><a href="https://forum.rebol.info/t/reacting-to-definitional-errors-curtail/2118">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/reacting-to-definitional-errors-curtail/2118</link>
          <pubDate>Mon, 15 Jan 2024 01:13:20 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2118</guid>
          <source url="https://forum.rebol.info/t/reacting-to-definitional-errors-curtail/2118.rss">Reacting to Definitional Errors: CURTAIL</source>
        </item>
        <item>
          <title>Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</title>
          <dc:creator><![CDATA[no-e-in]]></dc:creator>
          <category>Show &amp; Tell</category>
          <description><![CDATA[
            <p>I recently discovered a version of COLLECT by Brett Handley (for R2) that is less general <em>[<a href="https://forum.rebol.info/t/implementing-collect-keep/2099">than what COLLECT has been come to be known as</a>]</em> but avoids nested code.</p>
<pre><code>collect: func [
    {Collects block evaluations, use as body in For, Repeat, etc.}
    block [block!] "Block to evaluate."
    /initial result [series! datatype!] "Initialise the result."
    /only "Inserts into result using Only refinement."
] [
    if not initial [result: block!]
    result: any [all [datatype? result make result 1000] result]
    reduce ['head pick [insert insert/only] not only 'tail result to paren! block]
]
</code></pre>
<p>Examples (running in Rebol2 interpreter):</p>
<pre><code>&gt;&gt; for i 1 10 2 collect [i * 10]
== [10 30 50 70 90]
    
&gt;&gt; foreach [a b] [1 2 3 4] collect [a + b]
== [3 7]

&gt;&gt; foreach w [a b c d] collect [w]
== [a b c d]

&gt;&gt; repeat e [a b c %.txt] collect/initial [e] %file
== %fileabc.txt

&gt;&gt; iota: func [n [integer!]][repeat i n collect/initial [i] make block! n]
&gt;&gt; iota 10
== [1 2 3 4 5 6 7 8 9 10]
</code></pre>
            <p><small>6 posts - 3 participants</small></p>
            <p><a href="https://forum.rebol.info/t/variant-of-collect-without-keep/2110">Read full topic</a></p>
          ]]></description>
          <link>https://forum.rebol.info/t/variant-of-collect-without-keep/2110</link>
          <pubDate>Thu, 11 Jan 2024 10:05:58 +0000</pubDate>
          <discourse:topicPinned>No</discourse:topicPinned>
          <discourse:topicClosed>No</discourse:topicClosed>
          <discourse:topicArchived>No</discourse:topicArchived>
          <guid isPermaLink="false">forum.rebol.info-topic-2110</guid>
          <source url="https://forum.rebol.info/t/variant-of-collect-without-keep/2110.rss">Variant Of &quot;COLLECT&quot; Without &quot;KEEP&quot;</source>
        </item>
  </channel>
</rss>
